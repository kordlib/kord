// Klib ABI Dump
// Targets: [js]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <kord:rest>
final enum class dev.kord.rest.json/JsonErrorCode : kotlin/Enum<dev.kord.rest.json/JsonErrorCode> { // dev.kord.rest.json/JsonErrorCode|null[0]
    enum entry APIResourceOverloaded // dev.kord.rest.json/JsonErrorCode.APIResourceOverloaded|null[0]
    enum entry AlreadyCrossposted // dev.kord.rest.json/JsonErrorCode.AlreadyCrossposted|null[0]
    enum entry AnnouncementRateLimit // dev.kord.rest.json/JsonErrorCode.AnnouncementRateLimit|null[0]
    enum entry ApplicationCommandNameExists // dev.kord.rest.json/JsonErrorCode.ApplicationCommandNameExists|null[0]
    enum entry ApplicationNotAvailable // dev.kord.rest.json/JsonErrorCode.ApplicationNotAvailable|null[0]
    enum entry BeforeValueBeforeThreadCreate // dev.kord.rest.json/JsonErrorCode.BeforeValueBeforeThreadCreate|null[0]
    enum entry BitrateTooHigh // dev.kord.rest.json/JsonErrorCode.BitrateTooHigh|null[0]
    enum entry BotsEndpoint // dev.kord.rest.json/JsonErrorCode.BotsEndpoint|null[0]
    enum entry BulkDeleteOldMessage // dev.kord.rest.json/JsonErrorCode.BulkDeleteOldMessage|null[0]
    enum entry CannotConvertBetweenPremiumAndNormalEmoji // dev.kord.rest.json/JsonErrorCode.CannotConvertBetweenPremiumAndNormalEmoji|null[0]
    enum entry CannotDeleteGuildSubscriptionIntegration // dev.kord.rest.json/JsonErrorCode.CannotDeleteGuildSubscriptionIntegration|null[0]
    enum entry CannotDeleteRequiredCommunityChannel // dev.kord.rest.json/JsonErrorCode.CannotDeleteRequiredCommunityChannel|null[0]
    enum entry CannotEditMessageByAnotherUser // dev.kord.rest.json/JsonErrorCode.CannotEditMessageByAnotherUser|null[0]
    enum entry CannotEditStickersWithinMessage // dev.kord.rest.json/JsonErrorCode.CannotEditStickersWithinMessage|null[0]
    enum entry CannotEnableOnboarding // dev.kord.rest.json/JsonErrorCode.CannotEnableOnboarding|null[0]
    enum entry CannotExecuteOnDM // dev.kord.rest.json/JsonErrorCode.CannotExecuteOnDM|null[0]
    enum entry CannotExecuteOnSystemMessage // dev.kord.rest.json/JsonErrorCode.CannotExecuteOnSystemMessage|null[0]
    enum entry CannotMixSubscriptionAndNonSubscriptionRoles // dev.kord.rest.json/JsonErrorCode.CannotMixSubscriptionAndNonSubscriptionRoles|null[0]
    enum entry CannotModifySystemWebhook // dev.kord.rest.json/JsonErrorCode.CannotModifySystemWebhook|null[0]
    enum entry CannotPinMessageFromAnotherChannel // dev.kord.rest.json/JsonErrorCode.CannotPinMessageFromAnotherChannel|null[0]
    enum entry CannotReplyWithoutMessageHistoryPermission // dev.kord.rest.json/JsonErrorCode.CannotReplyWithoutMessageHistoryPermission|null[0]
    enum entry CannotSelfRedeemGift // dev.kord.rest.json/JsonErrorCode.CannotSelfRedeemGift|null[0]
    enum entry CannotSendEmptyMessage // dev.kord.rest.json/JsonErrorCode.CannotSendEmptyMessage|null[0]
    enum entry CannotSendExplicitContent // dev.kord.rest.json/JsonErrorCode.CannotSendExplicitContent|null[0]
    enum entry CannotSendMessageInForumChannel // dev.kord.rest.json/JsonErrorCode.CannotSendMessageInForumChannel|null[0]
    enum entry CannotSendMessagesInNonTextChannel // dev.kord.rest.json/JsonErrorCode.CannotSendMessagesInNonTextChannel|null[0]
    enum entry CannotSendMessagesToUser // dev.kord.rest.json/JsonErrorCode.CannotSendMessagesToUser|null[0]
    enum entry CannotSendVoiceMessagesInThisChannel // dev.kord.rest.json/JsonErrorCode.CannotSendVoiceMessagesInThisChannel|null[0]
    enum entry CannotUpdateFinishedEvent // dev.kord.rest.json/JsonErrorCode.CannotUpdateFinishedEvent|null[0]
    enum entry CannotUpdateOnboarding // dev.kord.rest.json/JsonErrorCode.CannotUpdateOnboarding|null[0]
    enum entry ChannelVerificationTooHigh // dev.kord.rest.json/JsonErrorCode.ChannelVerificationTooHigh|null[0]
    enum entry ChannelWriteRateLimit // dev.kord.rest.json/JsonErrorCode.ChannelWriteRateLimit|null[0]
    enum entry ChannelsTooLarge // dev.kord.rest.json/JsonErrorCode.ChannelsTooLarge|null[0]
    enum entry CommunityServerChannelMustBeTextChannel // dev.kord.rest.json/JsonErrorCode.CommunityServerChannelMustBeTextChannel|null[0]
    enum entry ConnectionRevoked // dev.kord.rest.json/JsonErrorCode.ConnectionRevoked|null[0]
    enum entry DisallowedName // dev.kord.rest.json/JsonErrorCode.DisallowedName|null[0]
    enum entry EntityOfEventDifferentFromEventEntity // dev.kord.rest.json/JsonErrorCode.EntityOfEventDifferentFromEventEntity|null[0]
    enum entry FailedToCreateStage // dev.kord.rest.json/JsonErrorCode.FailedToCreateStage|null[0]
    enum entry FailedToResizeAssetBelowMaximumSize // dev.kord.rest.json/JsonErrorCode.FailedToResizeAssetBelowMaximumSize|null[0]
    enum entry FileTooLarge // dev.kord.rest.json/JsonErrorCode.FileTooLarge|null[0]
    enum entry General // dev.kord.rest.json/JsonErrorCode.General|null[0]
    enum entry GiftRequiresPaymentSource // dev.kord.rest.json/JsonErrorCode.GiftRequiresPaymentSource|null[0]
    enum entry GuildAlreadyHadTemplate // dev.kord.rest.json/JsonErrorCode.GuildAlreadyHadTemplate|null[0]
    enum entry GuildSubscriptionTooLow // dev.kord.rest.json/JsonErrorCode.GuildSubscriptionTooLow|null[0]
    enum entry GuildWidgetDisabled // dev.kord.rest.json/JsonErrorCode.GuildWidgetDisabled|null[0]
    enum entry InteractionAlreadyAcknowledged // dev.kord.rest.json/JsonErrorCode.InteractionAlreadyAcknowledged|null[0]
    enum entry InteractionFailedToSend // dev.kord.rest.json/JsonErrorCode.InteractionFailedToSend|null[0]
    enum entry InvalidAPIVersion // dev.kord.rest.json/JsonErrorCode.InvalidAPIVersion|null[0]
    enum entry InvalidAccountType // dev.kord.rest.json/JsonErrorCode.InvalidAccountType|null[0]
    enum entry InvalidActivityAction // dev.kord.rest.json/JsonErrorCode.InvalidActivityAction|null[0]
    enum entry InvalidAuthToken // dev.kord.rest.json/JsonErrorCode.InvalidAuthToken|null[0]
    enum entry InvalidFile // dev.kord.rest.json/JsonErrorCode.InvalidFile|null[0]
    enum entry InvalidFormBody // dev.kord.rest.json/JsonErrorCode.InvalidFormBody|null[0]
    enum entry InvalidGuild // dev.kord.rest.json/JsonErrorCode.InvalidGuild|null[0]
    enum entry InvalidJsonForLottieFile // dev.kord.rest.json/JsonErrorCode.InvalidJsonForLottieFile|null[0]
    enum entry InvalidJsonInRequestBody // dev.kord.rest.json/JsonErrorCode.InvalidJsonInRequestBody|null[0]
    enum entry InvalidMFALevel // dev.kord.rest.json/JsonErrorCode.InvalidMFALevel|null[0]
    enum entry InvalidMessageType // dev.kord.rest.json/JsonErrorCode.InvalidMessageType|null[0]
    enum entry InvalidOAuth2AccessToken // dev.kord.rest.json/JsonErrorCode.InvalidOAuth2AccessToken|null[0]
    enum entry InvalidOAuth2State // dev.kord.rest.json/JsonErrorCode.InvalidOAuth2State|null[0]
    enum entry InvalidRecipients // dev.kord.rest.json/JsonErrorCode.InvalidRecipients|null[0]
    enum entry InvalidRequestOrigin // dev.kord.rest.json/JsonErrorCode.InvalidRequestOrigin|null[0]
    enum entry InvalidRole // dev.kord.rest.json/JsonErrorCode.InvalidRole|null[0]
    enum entry InvalidStickerFrameRate // dev.kord.rest.json/JsonErrorCode.InvalidStickerFrameRate|null[0]
    enum entry InvalidStickerSent // dev.kord.rest.json/JsonErrorCode.InvalidStickerSent|null[0]
    enum entry InvalidThreadNotificationSettings // dev.kord.rest.json/JsonErrorCode.InvalidThreadNotificationSettings|null[0]
    enum entry InvalidWebhookToken // dev.kord.rest.json/JsonErrorCode.InvalidWebhookToken|null[0]
    enum entry InviteCodeInvalidOrTaken // dev.kord.rest.json/JsonErrorCode.InviteCodeInvalidOrTaken|null[0]
    enum entry MaxActiveAnnouncementThreads // dev.kord.rest.json/JsonErrorCode.MaxActiveAnnouncementThreads|null[0]
    enum entry MaxActiveThreads // dev.kord.rest.json/JsonErrorCode.MaxActiveThreads|null[0]
    enum entry MaxAnimatedEmojis // dev.kord.rest.json/JsonErrorCode.MaxAnimatedEmojis|null[0]
    enum entry MaxApplicationCommands // dev.kord.rest.json/JsonErrorCode.MaxApplicationCommands|null[0]
    enum entry MaxAttachments // dev.kord.rest.json/JsonErrorCode.MaxAttachments|null[0]
    enum entry MaxBanFetches // dev.kord.rest.json/JsonErrorCode.MaxBanFetches|null[0]
    enum entry MaxChannelPermissionOverwrites // dev.kord.rest.json/JsonErrorCode.MaxChannelPermissionOverwrites|null[0]
    enum entry MaxDailyApplicationCommandCreates // dev.kord.rest.json/JsonErrorCode.MaxDailyApplicationCommandCreates|null[0]
    enum entry MaxEmojis // dev.kord.rest.json/JsonErrorCode.MaxEmojis|null[0]
    enum entry MaxFriends // dev.kord.rest.json/JsonErrorCode.MaxFriends|null[0]
    enum entry MaxGroupDMs // dev.kord.rest.json/JsonErrorCode.MaxGroupDMs|null[0]
    enum entry MaxGuildChannels // dev.kord.rest.json/JsonErrorCode.MaxGuildChannels|null[0]
    enum entry MaxGuildRoles // dev.kord.rest.json/JsonErrorCode.MaxGuildRoles|null[0]
    enum entry MaxGuildWebhooks // dev.kord.rest.json/JsonErrorCode.MaxGuildWebhooks|null[0]
    enum entry MaxGuildWidgetSettingsUpdates // dev.kord.rest.json/JsonErrorCode.MaxGuildWidgetSettingsUpdates|null[0]
    enum entry MaxGuilds // dev.kord.rest.json/JsonErrorCode.MaxGuilds|null[0]
    enum entry MaxInvites // dev.kord.rest.json/JsonErrorCode.MaxInvites|null[0]
    enum entry MaxLottieAnimationDimensions // dev.kord.rest.json/JsonErrorCode.MaxLottieAnimationDimensions|null[0]
    enum entry MaxNonMemberBans // dev.kord.rest.json/JsonErrorCode.MaxNonMemberBans|null[0]
    enum entry MaxOldMessageEdits // dev.kord.rest.json/JsonErrorCode.MaxOldMessageEdits|null[0]
    enum entry MaxPinnedThreadsInForumChannel // dev.kord.rest.json/JsonErrorCode.MaxPinnedThreadsInForumChannel|null[0]
    enum entry MaxPins // dev.kord.rest.json/JsonErrorCode.MaxPins|null[0]
    enum entry MaxPremiumEmojis // dev.kord.rest.json/JsonErrorCode.MaxPremiumEmojis|null[0]
    enum entry MaxPruneRequests // dev.kord.rest.json/JsonErrorCode.MaxPruneRequests|null[0]
    enum entry MaxReactions // dev.kord.rest.json/JsonErrorCode.MaxReactions|null[0]
    enum entry MaxRecipients // dev.kord.rest.json/JsonErrorCode.MaxRecipients|null[0]
    enum entry MaxServerCategories // dev.kord.rest.json/JsonErrorCode.MaxServerCategories|null[0]
    enum entry MaxServerMembers // dev.kord.rest.json/JsonErrorCode.MaxServerMembers|null[0]
    enum entry MaxStickerAnimationDuration // dev.kord.rest.json/JsonErrorCode.MaxStickerAnimationDuration|null[0]
    enum entry MaxStickerFrameCount // dev.kord.rest.json/JsonErrorCode.MaxStickerFrameCount|null[0]
    enum entry MaxStickerFrameRate // dev.kord.rest.json/JsonErrorCode.MaxStickerFrameRate|null[0]
    enum entry MaxStickers // dev.kord.rest.json/JsonErrorCode.MaxStickers|null[0]
    enum entry MaxTagsInForumChannel // dev.kord.rest.json/JsonErrorCode.MaxTagsInForumChannel|null[0]
    enum entry MaxThreadParticipants // dev.kord.rest.json/JsonErrorCode.MaxThreadParticipants|null[0]
    enum entry MaxUncompletedGuildScheduledEvents // dev.kord.rest.json/JsonErrorCode.MaxUncompletedGuildScheduledEvents|null[0]
    enum entry MaxWebhooks // dev.kord.rest.json/JsonErrorCode.MaxWebhooks|null[0]
    enum entry MessageAlreadyHasThread // dev.kord.rest.json/JsonErrorCode.MessageAlreadyHasThread|null[0]
    enum entry MessageBlockedByAutomaticModeration // dev.kord.rest.json/JsonErrorCode.MessageBlockedByAutomaticModeration|null[0]
    enum entry MessageBlockedByHarmfulLinksFilter // dev.kord.rest.json/JsonErrorCode.MessageBlockedByHarmfulLinksFilter|null[0]
    enum entry MissingAccess // dev.kord.rest.json/JsonErrorCode.MissingAccess|null[0]
    enum entry MissingOAuthScope // dev.kord.rest.json/JsonErrorCode.MissingOAuthScope|null[0]
    enum entry NoSettableTagsAvailable // dev.kord.rest.json/JsonErrorCode.NoSettableTagsAvailable|null[0]
    enum entry NoUsersWithDiscordTag // dev.kord.rest.json/JsonErrorCode.NoUsersWithDiscordTag|null[0]
    enum entry NonBotEndpoint // dev.kord.rest.json/JsonErrorCode.NonBotEndpoint|null[0]
    enum entry NonBotGuildInviteAccepted // dev.kord.rest.json/JsonErrorCode.NonBotGuildInviteAccepted|null[0]
    enum entry OAuth2ApplicationLimit // dev.kord.rest.json/JsonErrorCode.OAuth2ApplicationLimit|null[0]
    enum entry OAuth2HasNoBot // dev.kord.rest.json/JsonErrorCode.OAuth2HasNoBot|null[0]
    enum entry OnlyOwner // dev.kord.rest.json/JsonErrorCode.OnlyOwner|null[0]
    enum entry OperationOnArchivedThread // dev.kord.rest.json/JsonErrorCode.OperationOnArchivedThread|null[0]
    enum entry OwnerCannotBePendingMember // dev.kord.rest.json/JsonErrorCode.OwnerCannotBePendingMember|null[0]
    enum entry OwnershipCannotBeTransferredToBot // dev.kord.rest.json/JsonErrorCode.OwnershipCannotBeTransferredToBot|null[0]
    enum entry PermissionLack // dev.kord.rest.json/JsonErrorCode.PermissionLack|null[0]
    enum entry ProvidedMessageCountInsufficient // dev.kord.rest.json/JsonErrorCode.ProvidedMessageCountInsufficient|null[0]
    enum entry RasterizedImagesInLotties // dev.kord.rest.json/JsonErrorCode.RasterizedImagesInLotties|null[0]
    enum entry ReactionBlocked // dev.kord.rest.json/JsonErrorCode.ReactionBlocked|null[0]
    enum entry RequestEntityTooLarge // dev.kord.rest.json/JsonErrorCode.RequestEntityTooLarge|null[0]
    enum entry Require2FA // dev.kord.rest.json/JsonErrorCode.Require2FA|null[0]
    enum entry ResourceIsRateLimited // dev.kord.rest.json/JsonErrorCode.ResourceIsRateLimited|null[0]
    enum entry SendMessagesTemporarilyDisabled // dev.kord.rest.json/JsonErrorCode.SendMessagesTemporarilyDisabled|null[0]
    enum entry ServerNeedsMonetizationEnabled // dev.kord.rest.json/JsonErrorCode.ServerNeedsMonetizationEnabled|null[0]
    enum entry ServerNeedsMoreBoosts // dev.kord.rest.json/JsonErrorCode.ServerNeedsMoreBoosts|null[0]
    enum entry ServerNotAvailableInLocation // dev.kord.rest.json/JsonErrorCode.ServerNotAvailableInLocation|null[0]
    enum entry ServerWriteRateLimit // dev.kord.rest.json/JsonErrorCode.ServerWriteRateLimit|null[0]
    enum entry SlowModeRateLimit // dev.kord.rest.json/JsonErrorCode.SlowModeRateLimit|null[0]
    enum entry StageAlreadyOpen // dev.kord.rest.json/JsonErrorCode.StageAlreadyOpen|null[0]
    enum entry StickerPermissionLack // dev.kord.rest.json/JsonErrorCode.StickerPermissionLack|null[0]
    enum entry TagNamesMustBeUnique // dev.kord.rest.json/JsonErrorCode.TagNamesMustBeUnique|null[0]
    enum entry TagRequired // dev.kord.rest.json/JsonErrorCode.TagRequired|null[0]
    enum entry TemporarilyDisabled // dev.kord.rest.json/JsonErrorCode.TemporarilyDisabled|null[0]
    enum entry TheadLocked // dev.kord.rest.json/JsonErrorCode.TheadLocked|null[0]
    enum entry TitleBlockedByAutomaticModeration // dev.kord.rest.json/JsonErrorCode.TitleBlockedByAutomaticModeration|null[0]
    enum entry TooFastDM // dev.kord.rest.json/JsonErrorCode.TooFastDM|null[0]
    enum entry TooLongNote // dev.kord.rest.json/JsonErrorCode.TooLongNote|null[0]
    enum entry Unauthorized // dev.kord.rest.json/JsonErrorCode.Unauthorized|null[0]
    enum entry UnauthorizedForAction // dev.kord.rest.json/JsonErrorCode.UnauthorizedForAction|null[0]
    enum entry UnderMinimumAge // dev.kord.rest.json/JsonErrorCode.UnderMinimumAge|null[0]
    enum entry Unknown // dev.kord.rest.json/JsonErrorCode.Unknown|null[0]
    enum entry UnknownAccount // dev.kord.rest.json/JsonErrorCode.UnknownAccount|null[0]
    enum entry UnknownApplication // dev.kord.rest.json/JsonErrorCode.UnknownApplication|null[0]
    enum entry UnknownApplicationCommand // dev.kord.rest.json/JsonErrorCode.UnknownApplicationCommand|null[0]
    enum entry UnknownApplicationCommandPermissions // dev.kord.rest.json/JsonErrorCode.UnknownApplicationCommandPermissions|null[0]
    enum entry UnknownBan // dev.kord.rest.json/JsonErrorCode.UnknownBan|null[0]
    enum entry UnknownBranch // dev.kord.rest.json/JsonErrorCode.UnknownBranch|null[0]
    enum entry UnknownBuild // dev.kord.rest.json/JsonErrorCode.UnknownBuild|null[0]
    enum entry UnknownChannel // dev.kord.rest.json/JsonErrorCode.UnknownChannel|null[0]
    enum entry UnknownDiscoverableServerCategory // dev.kord.rest.json/JsonErrorCode.UnknownDiscoverableServerCategory|null[0]
    enum entry UnknownEmoji // dev.kord.rest.json/JsonErrorCode.UnknownEmoji|null[0]
    enum entry UnknownEntitlement // dev.kord.rest.json/JsonErrorCode.UnknownEntitlement|null[0]
    enum entry UnknownGiftCode // dev.kord.rest.json/JsonErrorCode.UnknownGiftCode|null[0]
    enum entry UnknownGuild // dev.kord.rest.json/JsonErrorCode.UnknownGuild|null[0]
    enum entry UnknownGuildMemberVerificationForm // dev.kord.rest.json/JsonErrorCode.UnknownGuildMemberVerificationForm|null[0]
    enum entry UnknownGuildScheduledEvent // dev.kord.rest.json/JsonErrorCode.UnknownGuildScheduledEvent|null[0]
    enum entry UnknownGuildScheduledEventUser // dev.kord.rest.json/JsonErrorCode.UnknownGuildScheduledEventUser|null[0]
    enum entry UnknownGuildTemplate // dev.kord.rest.json/JsonErrorCode.UnknownGuildTemplate|null[0]
    enum entry UnknownGuildWelcomeScreen // dev.kord.rest.json/JsonErrorCode.UnknownGuildWelcomeScreen|null[0]
    enum entry UnknownIntegration // dev.kord.rest.json/JsonErrorCode.UnknownIntegration|null[0]
    enum entry UnknownInteraction // dev.kord.rest.json/JsonErrorCode.UnknownInteraction|null[0]
    enum entry UnknownInvite // dev.kord.rest.json/JsonErrorCode.UnknownInvite|null[0]
    enum entry UnknownLobby // dev.kord.rest.json/JsonErrorCode.UnknownLobby|null[0]
    enum entry UnknownMember // dev.kord.rest.json/JsonErrorCode.UnknownMember|null[0]
    enum entry UnknownMessage // dev.kord.rest.json/JsonErrorCode.UnknownMessage|null[0]
    enum entry UnknownPermissionOverwrite // dev.kord.rest.json/JsonErrorCode.UnknownPermissionOverwrite|null[0]
    enum entry UnknownPremiumServerSubscribeCooldown // dev.kord.rest.json/JsonErrorCode.UnknownPremiumServerSubscribeCooldown|null[0]
    enum entry UnknownProvider // dev.kord.rest.json/JsonErrorCode.UnknownProvider|null[0]
    enum entry UnknownRedistributable // dev.kord.rest.json/JsonErrorCode.UnknownRedistributable|null[0]
    enum entry UnknownRole // dev.kord.rest.json/JsonErrorCode.UnknownRole|null[0]
    enum entry UnknownSKU // dev.kord.rest.json/JsonErrorCode.UnknownSKU|null[0]
    enum entry UnknownSession // dev.kord.rest.json/JsonErrorCode.UnknownSession|null[0]
    enum entry UnknownStageInstance // dev.kord.rest.json/JsonErrorCode.UnknownStageInstance|null[0]
    enum entry UnknownSticker // dev.kord.rest.json/JsonErrorCode.UnknownSticker|null[0]
    enum entry UnknownStoreDirectoryLayout // dev.kord.rest.json/JsonErrorCode.UnknownStoreDirectoryLayout|null[0]
    enum entry UnknownStoreListing // dev.kord.rest.json/JsonErrorCode.UnknownStoreListing|null[0]
    enum entry UnknownStream // dev.kord.rest.json/JsonErrorCode.UnknownStream|null[0]
    enum entry UnknownTag // dev.kord.rest.json/JsonErrorCode.UnknownTag|null[0]
    enum entry UnknownToken // dev.kord.rest.json/JsonErrorCode.UnknownToken|null[0]
    enum entry UnknownUpload // dev.kord.rest.json/JsonErrorCode.UnknownUpload|null[0]
    enum entry UnknownUser // dev.kord.rest.json/JsonErrorCode.UnknownUser|null[0]
    enum entry UnknownVoiceState // dev.kord.rest.json/JsonErrorCode.UnknownVoiceState|null[0]
    enum entry UnknownWebhook // dev.kord.rest.json/JsonErrorCode.UnknownWebhook|null[0]
    enum entry UnknownWebhookService // dev.kord.rest.json/JsonErrorCode.UnknownWebhookService|null[0]
    enum entry UserAccountMustBeVerified // dev.kord.rest.json/JsonErrorCode.UserAccountMustBeVerified|null[0]
    enum entry UserBannedFromGuild // dev.kord.rest.json/JsonErrorCode.UserBannedFromGuild|null[0]
    enum entry UserNotInVoice // dev.kord.rest.json/JsonErrorCode.UserNotInVoice|null[0]
    enum entry VerifyAccount // dev.kord.rest.json/JsonErrorCode.VerifyAccount|null[0]
    enum entry VoiceMessagesCannotBeEdited // dev.kord.rest.json/JsonErrorCode.VoiceMessagesCannotBeEdited|null[0]
    enum entry VoiceMessagesDoNotSupportAdditionalContent // dev.kord.rest.json/JsonErrorCode.VoiceMessagesDoNotSupportAdditionalContent|null[0]
    enum entry VoiceMessagesMustHaveASingleAudioAttachment // dev.kord.rest.json/JsonErrorCode.VoiceMessagesMustHaveASingleAudioAttachment|null[0]
    enum entry VoiceMessagesMustHaveSupportingMetadata // dev.kord.rest.json/JsonErrorCode.VoiceMessagesMustHaveSupportingMetadata|null[0]
    enum entry WebhookCannotHaveThreadNameAndThreadId // dev.kord.rest.json/JsonErrorCode.WebhookCannotHaveThreadNameAndThreadId|null[0]
    enum entry WebhookMissingThreadNameOrThreadId // dev.kord.rest.json/JsonErrorCode.WebhookMissingThreadNameOrThreadId|null[0]
    enum entry WebhookServicesCannotBeUsedInForumChannels // dev.kord.rest.json/JsonErrorCode.WebhookServicesCannotBeUsedInForumChannels|null[0]
    enum entry WebhooksCanOnlyCreateThreadsInForumChannels // dev.kord.rest.json/JsonErrorCode.WebhooksCanOnlyCreateThreadsInForumChannels|null[0]
    enum entry WrongChannelType // dev.kord.rest.json/JsonErrorCode.WrongChannelType|null[0]

    final val code // dev.kord.rest.json/JsonErrorCode.code|{}code[0]
        final fun <get-code>(): kotlin/Int // dev.kord.rest.json/JsonErrorCode.code.<get-code>|<get-code>(){}[0]
    final val entries // dev.kord.rest.json/JsonErrorCode.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<dev.kord.rest.json/JsonErrorCode> // dev.kord.rest.json/JsonErrorCode.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): dev.kord.rest.json/JsonErrorCode // dev.kord.rest.json/JsonErrorCode.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<dev.kord.rest.json/JsonErrorCode> // dev.kord.rest.json/JsonErrorCode.values|values#static(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // dev.kord.rest.json/JsonErrorCode.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json/JsonErrorCode> // dev.kord.rest.json/JsonErrorCode.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // dev.kord.rest.json/JsonErrorCode.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

abstract interface <#A: out kotlin/Any> dev.kord.rest.builder/AuditRequestBuilder : dev.kord.rest.builder/AuditBuilder, dev.kord.rest.builder/RequestBuilder<#A> // dev.kord.rest.builder/AuditRequestBuilder|null[0]

abstract interface <#A: out kotlin/Any> dev.kord.rest.builder/RequestBuilder { // dev.kord.rest.builder/RequestBuilder|null[0]
    abstract fun toRequest(): #A // dev.kord.rest.builder/RequestBuilder.toRequest|toRequest(){}[0]
}

abstract interface dev.kord.rest.builder.channel/PermissionOverwritesCreateBuilder : dev.kord.rest.builder.channel/PermissionOverwritesBuilder { // dev.kord.rest.builder.channel/PermissionOverwritesCreateBuilder|null[0]
    abstract var permissionOverwrites // dev.kord.rest.builder.channel/PermissionOverwritesCreateBuilder.permissionOverwrites|{}permissionOverwrites[0]
        abstract fun <get-permissionOverwrites>(): kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite> // dev.kord.rest.builder.channel/PermissionOverwritesCreateBuilder.permissionOverwrites.<get-permissionOverwrites>|<get-permissionOverwrites>(){}[0]
        abstract fun <set-permissionOverwrites>(kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite>) // dev.kord.rest.builder.channel/PermissionOverwritesCreateBuilder.permissionOverwrites.<set-permissionOverwrites>|<set-permissionOverwrites>(kotlin.collections.MutableSet<dev.kord.common.entity.Overwrite>){}[0]

    open fun addOverwrite(dev.kord.common.entity/Overwrite) // dev.kord.rest.builder.channel/PermissionOverwritesCreateBuilder.addOverwrite|addOverwrite(dev.kord.common.entity.Overwrite){}[0]
}

abstract interface dev.kord.rest.builder.channel/PermissionOverwritesModifyBuilder : dev.kord.rest.builder.channel/PermissionOverwritesBuilder { // dev.kord.rest.builder.channel/PermissionOverwritesModifyBuilder|null[0]
    abstract var permissionOverwrites // dev.kord.rest.builder.channel/PermissionOverwritesModifyBuilder.permissionOverwrites|{}permissionOverwrites[0]
        abstract fun <get-permissionOverwrites>(): kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite>? // dev.kord.rest.builder.channel/PermissionOverwritesModifyBuilder.permissionOverwrites.<get-permissionOverwrites>|<get-permissionOverwrites>(){}[0]
        abstract fun <set-permissionOverwrites>(kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite>?) // dev.kord.rest.builder.channel/PermissionOverwritesModifyBuilder.permissionOverwrites.<set-permissionOverwrites>|<set-permissionOverwrites>(kotlin.collections.MutableSet<dev.kord.common.entity.Overwrite>?){}[0]

    open fun addOverwrite(dev.kord.common.entity/Overwrite) // dev.kord.rest.builder.channel/PermissionOverwritesModifyBuilder.addOverwrite|addOverwrite(dev.kord.common.entity.Overwrite){}[0]
}

abstract interface dev.kord.rest.builder.interaction/ApplicationCommandCreateBuilder : dev.kord.rest.builder.interaction/LocalizedNameCreateBuilder, dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/ApplicationCommandCreateRequest> { // dev.kord.rest.builder.interaction/ApplicationCommandCreateBuilder|null[0]
    abstract val type // dev.kord.rest.builder.interaction/ApplicationCommandCreateBuilder.type|{}type[0]
        abstract fun <get-type>(): dev.kord.common.entity/ApplicationCommandType // dev.kord.rest.builder.interaction/ApplicationCommandCreateBuilder.type.<get-type>|<get-type>(){}[0]

    abstract var defaultMemberPermissions // dev.kord.rest.builder.interaction/ApplicationCommandCreateBuilder.defaultMemberPermissions|{}defaultMemberPermissions[0]
        abstract fun <get-defaultMemberPermissions>(): dev.kord.common.entity/Permissions? // dev.kord.rest.builder.interaction/ApplicationCommandCreateBuilder.defaultMemberPermissions.<get-defaultMemberPermissions>|<get-defaultMemberPermissions>(){}[0]
        abstract fun <set-defaultMemberPermissions>(dev.kord.common.entity/Permissions?) // dev.kord.rest.builder.interaction/ApplicationCommandCreateBuilder.defaultMemberPermissions.<set-defaultMemberPermissions>|<set-defaultMemberPermissions>(dev.kord.common.entity.Permissions?){}[0]
    abstract var defaultPermission // dev.kord.rest.builder.interaction/ApplicationCommandCreateBuilder.defaultPermission|{}defaultPermission[0]
        abstract fun <get-defaultPermission>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/ApplicationCommandCreateBuilder.defaultPermission.<get-defaultPermission>|<get-defaultPermission>(){}[0]
        abstract fun <set-defaultPermission>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/ApplicationCommandCreateBuilder.defaultPermission.<set-defaultPermission>|<set-defaultPermission>(kotlin.Boolean?){}[0]
    abstract var nsfw // dev.kord.rest.builder.interaction/ApplicationCommandCreateBuilder.nsfw|{}nsfw[0]
        abstract fun <get-nsfw>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/ApplicationCommandCreateBuilder.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
        abstract fun <set-nsfw>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/ApplicationCommandCreateBuilder.nsfw.<set-nsfw>|<set-nsfw>(kotlin.Boolean?){}[0]

    open fun disableCommandInGuilds() // dev.kord.rest.builder.interaction/ApplicationCommandCreateBuilder.disableCommandInGuilds|disableCommandInGuilds(){}[0]
}

abstract interface dev.kord.rest.builder.interaction/ApplicationCommandModifyBuilder : dev.kord.rest.builder.interaction/LocalizedNameModifyBuilder, dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/ApplicationCommandModifyRequest> { // dev.kord.rest.builder.interaction/ApplicationCommandModifyBuilder|null[0]
    abstract var defaultMemberPermissions // dev.kord.rest.builder.interaction/ApplicationCommandModifyBuilder.defaultMemberPermissions|{}defaultMemberPermissions[0]
        abstract fun <get-defaultMemberPermissions>(): dev.kord.common.entity/Permissions? // dev.kord.rest.builder.interaction/ApplicationCommandModifyBuilder.defaultMemberPermissions.<get-defaultMemberPermissions>|<get-defaultMemberPermissions>(){}[0]
        abstract fun <set-defaultMemberPermissions>(dev.kord.common.entity/Permissions?) // dev.kord.rest.builder.interaction/ApplicationCommandModifyBuilder.defaultMemberPermissions.<set-defaultMemberPermissions>|<set-defaultMemberPermissions>(dev.kord.common.entity.Permissions?){}[0]
    abstract var defaultPermission // dev.kord.rest.builder.interaction/ApplicationCommandModifyBuilder.defaultPermission|{}defaultPermission[0]
        abstract fun <get-defaultPermission>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/ApplicationCommandModifyBuilder.defaultPermission.<get-defaultPermission>|<get-defaultPermission>(){}[0]
        abstract fun <set-defaultPermission>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/ApplicationCommandModifyBuilder.defaultPermission.<set-defaultPermission>|<set-defaultPermission>(kotlin.Boolean?){}[0]
    abstract var nsfw // dev.kord.rest.builder.interaction/ApplicationCommandModifyBuilder.nsfw|{}nsfw[0]
        abstract fun <get-nsfw>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/ApplicationCommandModifyBuilder.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
        abstract fun <set-nsfw>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/ApplicationCommandModifyBuilder.nsfw.<set-nsfw>|<set-nsfw>(kotlin.Boolean?){}[0]
}

abstract interface dev.kord.rest.builder.interaction/ChatInputCreateBuilder : dev.kord.rest.builder.interaction/ApplicationCommandCreateBuilder, dev.kord.rest.builder.interaction/LocalizedDescriptionCreateBuilder, dev.kord.rest.builder.interaction/RootInputChatBuilder // dev.kord.rest.builder.interaction/ChatInputCreateBuilder|null[0]

abstract interface dev.kord.rest.builder.interaction/ChatInputModifyBuilder : dev.kord.rest.builder.interaction/ApplicationCommandModifyBuilder, dev.kord.rest.builder.interaction/LocalizedDescriptionModifyBuilder, dev.kord.rest.builder.interaction/RootInputChatBuilder // dev.kord.rest.builder.interaction/ChatInputModifyBuilder|null[0]

abstract interface dev.kord.rest.builder.interaction/GlobalApplicationCommandCreateBuilder : dev.kord.rest.builder.interaction/ApplicationCommandCreateBuilder { // dev.kord.rest.builder.interaction/GlobalApplicationCommandCreateBuilder|null[0]
    abstract var dmPermission // dev.kord.rest.builder.interaction/GlobalApplicationCommandCreateBuilder.dmPermission|{}dmPermission[0]
        abstract fun <get-dmPermission>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/GlobalApplicationCommandCreateBuilder.dmPermission.<get-dmPermission>|<get-dmPermission>(){}[0]
        abstract fun <set-dmPermission>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/GlobalApplicationCommandCreateBuilder.dmPermission.<set-dmPermission>|<set-dmPermission>(kotlin.Boolean?){}[0]
}

abstract interface dev.kord.rest.builder.interaction/GlobalApplicationCommandModifyBuilder : dev.kord.rest.builder.interaction/ApplicationCommandModifyBuilder { // dev.kord.rest.builder.interaction/GlobalApplicationCommandModifyBuilder|null[0]
    abstract var dmPermission // dev.kord.rest.builder.interaction/GlobalApplicationCommandModifyBuilder.dmPermission|{}dmPermission[0]
        abstract fun <get-dmPermission>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/GlobalApplicationCommandModifyBuilder.dmPermission.<get-dmPermission>|<get-dmPermission>(){}[0]
        abstract fun <set-dmPermission>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/GlobalApplicationCommandModifyBuilder.dmPermission.<set-dmPermission>|<set-dmPermission>(kotlin.Boolean?){}[0]
}

abstract interface dev.kord.rest.builder.interaction/GlobalChatInputCreateBuilder : dev.kord.rest.builder.interaction/ChatInputCreateBuilder, dev.kord.rest.builder.interaction/GlobalApplicationCommandCreateBuilder // dev.kord.rest.builder.interaction/GlobalChatInputCreateBuilder|null[0]

abstract interface dev.kord.rest.builder.interaction/GlobalChatInputModifyBuilder : dev.kord.rest.builder.interaction/ChatInputModifyBuilder, dev.kord.rest.builder.interaction/GlobalApplicationCommandModifyBuilder // dev.kord.rest.builder.interaction/GlobalChatInputModifyBuilder|null[0]

abstract interface dev.kord.rest.builder.interaction/GlobalMessageCommandCreateBuilder : dev.kord.rest.builder.interaction/GlobalApplicationCommandCreateBuilder, dev.kord.rest.builder.interaction/MessageCommandCreateBuilder // dev.kord.rest.builder.interaction/GlobalMessageCommandCreateBuilder|null[0]

abstract interface dev.kord.rest.builder.interaction/GlobalMessageCommandModifyBuilder : dev.kord.rest.builder.interaction/GlobalApplicationCommandModifyBuilder, dev.kord.rest.builder.interaction/MessageCommandModifyBuilder // dev.kord.rest.builder.interaction/GlobalMessageCommandModifyBuilder|null[0]

abstract interface dev.kord.rest.builder.interaction/GlobalUserCommandCreateBuilder : dev.kord.rest.builder.interaction/GlobalApplicationCommandCreateBuilder, dev.kord.rest.builder.interaction/UserCommandCreateBuilder // dev.kord.rest.builder.interaction/GlobalUserCommandCreateBuilder|null[0]

abstract interface dev.kord.rest.builder.interaction/GlobalUserCommandModifyBuilder : dev.kord.rest.builder.interaction/GlobalApplicationCommandModifyBuilder, dev.kord.rest.builder.interaction/UserCommandModifyBuilder // dev.kord.rest.builder.interaction/GlobalUserCommandModifyBuilder|null[0]

abstract interface dev.kord.rest.builder.interaction/LocalizedDescriptionBuilder { // dev.kord.rest.builder.interaction/LocalizedDescriptionBuilder|null[0]
    abstract val description // dev.kord.rest.builder.interaction/LocalizedDescriptionBuilder.description|{}description[0]
        abstract fun <get-description>(): kotlin/String? // dev.kord.rest.builder.interaction/LocalizedDescriptionBuilder.description.<get-description>|<get-description>(){}[0]

    abstract var descriptionLocalizations // dev.kord.rest.builder.interaction/LocalizedDescriptionBuilder.descriptionLocalizations|{}descriptionLocalizations[0]
        abstract fun <get-descriptionLocalizations>(): kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>? // dev.kord.rest.builder.interaction/LocalizedDescriptionBuilder.descriptionLocalizations.<get-descriptionLocalizations>|<get-descriptionLocalizations>(){}[0]
        abstract fun <set-descriptionLocalizations>(kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>?) // dev.kord.rest.builder.interaction/LocalizedDescriptionBuilder.descriptionLocalizations.<set-descriptionLocalizations>|<set-descriptionLocalizations>(kotlin.collections.MutableMap<dev.kord.common.Locale,kotlin.String>?){}[0]

    open fun description(dev.kord.common/Locale, kotlin/String) // dev.kord.rest.builder.interaction/LocalizedDescriptionBuilder.description|description(dev.kord.common.Locale;kotlin.String){}[0]
}

abstract interface dev.kord.rest.builder.interaction/LocalizedDescriptionCreateBuilder : dev.kord.rest.builder.interaction/LocalizedDescriptionBuilder { // dev.kord.rest.builder.interaction/LocalizedDescriptionCreateBuilder|null[0]
    abstract var description // dev.kord.rest.builder.interaction/LocalizedDescriptionCreateBuilder.description|{}description[0]
        abstract fun <get-description>(): kotlin/String // dev.kord.rest.builder.interaction/LocalizedDescriptionCreateBuilder.description.<get-description>|<get-description>(){}[0]
        abstract fun <set-description>(kotlin/String) // dev.kord.rest.builder.interaction/LocalizedDescriptionCreateBuilder.description.<set-description>|<set-description>(kotlin.String){}[0]
}

abstract interface dev.kord.rest.builder.interaction/LocalizedDescriptionModifyBuilder : dev.kord.rest.builder.interaction/LocalizedDescriptionBuilder { // dev.kord.rest.builder.interaction/LocalizedDescriptionModifyBuilder|null[0]
    abstract var description // dev.kord.rest.builder.interaction/LocalizedDescriptionModifyBuilder.description|{}description[0]
        abstract fun <get-description>(): kotlin/String? // dev.kord.rest.builder.interaction/LocalizedDescriptionModifyBuilder.description.<get-description>|<get-description>(){}[0]
        abstract fun <set-description>(kotlin/String?) // dev.kord.rest.builder.interaction/LocalizedDescriptionModifyBuilder.description.<set-description>|<set-description>(kotlin.String?){}[0]
}

abstract interface dev.kord.rest.builder.interaction/LocalizedNameBuilder { // dev.kord.rest.builder.interaction/LocalizedNameBuilder|null[0]
    abstract val name // dev.kord.rest.builder.interaction/LocalizedNameBuilder.name|{}name[0]
        abstract fun <get-name>(): kotlin/String? // dev.kord.rest.builder.interaction/LocalizedNameBuilder.name.<get-name>|<get-name>(){}[0]

    abstract var nameLocalizations // dev.kord.rest.builder.interaction/LocalizedNameBuilder.nameLocalizations|{}nameLocalizations[0]
        abstract fun <get-nameLocalizations>(): kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>? // dev.kord.rest.builder.interaction/LocalizedNameBuilder.nameLocalizations.<get-nameLocalizations>|<get-nameLocalizations>(){}[0]
        abstract fun <set-nameLocalizations>(kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>?) // dev.kord.rest.builder.interaction/LocalizedNameBuilder.nameLocalizations.<set-nameLocalizations>|<set-nameLocalizations>(kotlin.collections.MutableMap<dev.kord.common.Locale,kotlin.String>?){}[0]

    open fun name(dev.kord.common/Locale, kotlin/String) // dev.kord.rest.builder.interaction/LocalizedNameBuilder.name|name(dev.kord.common.Locale;kotlin.String){}[0]
}

abstract interface dev.kord.rest.builder.interaction/LocalizedNameCreateBuilder : dev.kord.rest.builder.interaction/LocalizedNameBuilder { // dev.kord.rest.builder.interaction/LocalizedNameCreateBuilder|null[0]
    abstract var name // dev.kord.rest.builder.interaction/LocalizedNameCreateBuilder.name|{}name[0]
        abstract fun <get-name>(): kotlin/String // dev.kord.rest.builder.interaction/LocalizedNameCreateBuilder.name.<get-name>|<get-name>(){}[0]
        abstract fun <set-name>(kotlin/String) // dev.kord.rest.builder.interaction/LocalizedNameCreateBuilder.name.<set-name>|<set-name>(kotlin.String){}[0]
}

abstract interface dev.kord.rest.builder.interaction/LocalizedNameModifyBuilder : dev.kord.rest.builder.interaction/LocalizedNameBuilder { // dev.kord.rest.builder.interaction/LocalizedNameModifyBuilder|null[0]
    abstract var name // dev.kord.rest.builder.interaction/LocalizedNameModifyBuilder.name|{}name[0]
        abstract fun <get-name>(): kotlin/String? // dev.kord.rest.builder.interaction/LocalizedNameModifyBuilder.name.<get-name>|<get-name>(){}[0]
        abstract fun <set-name>(kotlin/String?) // dev.kord.rest.builder.interaction/LocalizedNameModifyBuilder.name.<set-name>|<set-name>(kotlin.String?){}[0]
}

abstract interface dev.kord.rest.builder.interaction/MessageCommandCreateBuilder : dev.kord.rest.builder.interaction/ApplicationCommandCreateBuilder // dev.kord.rest.builder.interaction/MessageCommandCreateBuilder|null[0]

abstract interface dev.kord.rest.builder.interaction/MessageCommandModifyBuilder : dev.kord.rest.builder.interaction/ApplicationCommandModifyBuilder // dev.kord.rest.builder.interaction/MessageCommandModifyBuilder|null[0]

abstract interface dev.kord.rest.builder.interaction/RootInputChatBuilder : dev.kord.rest.builder.interaction/BaseInputChatBuilder // dev.kord.rest.builder.interaction/RootInputChatBuilder|null[0]

abstract interface dev.kord.rest.builder.interaction/UserCommandCreateBuilder : dev.kord.rest.builder.interaction/ApplicationCommandCreateBuilder // dev.kord.rest.builder.interaction/UserCommandCreateBuilder|null[0]

abstract interface dev.kord.rest.builder.interaction/UserCommandModifyBuilder : dev.kord.rest.builder.interaction/ApplicationCommandModifyBuilder // dev.kord.rest.builder.interaction/UserCommandModifyBuilder|null[0]

abstract interface dev.kord.rest.builder.message/MessageBuilder { // dev.kord.rest.builder.message/MessageBuilder|null[0]
    abstract val files // dev.kord.rest.builder.message/MessageBuilder.files|{}files[0]
        abstract fun <get-files>(): kotlin.collections/MutableList<dev.kord.rest/NamedFile> // dev.kord.rest.builder.message/MessageBuilder.files.<get-files>|<get-files>(){}[0]

    abstract var allowedMentions // dev.kord.rest.builder.message/MessageBuilder.allowedMentions|{}allowedMentions[0]
        abstract fun <get-allowedMentions>(): dev.kord.rest.builder.message/AllowedMentionsBuilder? // dev.kord.rest.builder.message/MessageBuilder.allowedMentions.<get-allowedMentions>|<get-allowedMentions>(){}[0]
        abstract fun <set-allowedMentions>(dev.kord.rest.builder.message/AllowedMentionsBuilder?) // dev.kord.rest.builder.message/MessageBuilder.allowedMentions.<set-allowedMentions>|<set-allowedMentions>(dev.kord.rest.builder.message.AllowedMentionsBuilder?){}[0]
    abstract var attachments // dev.kord.rest.builder.message/MessageBuilder.attachments|{}attachments[0]
        abstract fun <get-attachments>(): kotlin.collections/MutableList<dev.kord.rest.builder.message/AttachmentBuilder>? // dev.kord.rest.builder.message/MessageBuilder.attachments.<get-attachments>|<get-attachments>(){}[0]
        abstract fun <set-attachments>(kotlin.collections/MutableList<dev.kord.rest.builder.message/AttachmentBuilder>?) // dev.kord.rest.builder.message/MessageBuilder.attachments.<set-attachments>|<set-attachments>(kotlin.collections.MutableList<dev.kord.rest.builder.message.AttachmentBuilder>?){}[0]
    abstract var components // dev.kord.rest.builder.message/MessageBuilder.components|{}components[0]
        abstract fun <get-components>(): kotlin.collections/MutableList<dev.kord.rest.builder.component/MessageComponentBuilder>? // dev.kord.rest.builder.message/MessageBuilder.components.<get-components>|<get-components>(){}[0]
        abstract fun <set-components>(kotlin.collections/MutableList<dev.kord.rest.builder.component/MessageComponentBuilder>?) // dev.kord.rest.builder.message/MessageBuilder.components.<set-components>|<set-components>(kotlin.collections.MutableList<dev.kord.rest.builder.component.MessageComponentBuilder>?){}[0]
    abstract var content // dev.kord.rest.builder.message/MessageBuilder.content|{}content[0]
        abstract fun <get-content>(): kotlin/String? // dev.kord.rest.builder.message/MessageBuilder.content.<get-content>|<get-content>(){}[0]
        abstract fun <set-content>(kotlin/String?) // dev.kord.rest.builder.message/MessageBuilder.content.<set-content>|<set-content>(kotlin.String?){}[0]
    abstract var embeds // dev.kord.rest.builder.message/MessageBuilder.embeds|{}embeds[0]
        abstract fun <get-embeds>(): kotlin.collections/MutableList<dev.kord.rest.builder.message/EmbedBuilder>? // dev.kord.rest.builder.message/MessageBuilder.embeds.<get-embeds>|<get-embeds>(){}[0]
        abstract fun <set-embeds>(kotlin.collections/MutableList<dev.kord.rest.builder.message/EmbedBuilder>?) // dev.kord.rest.builder.message/MessageBuilder.embeds.<set-embeds>|<set-embeds>(kotlin.collections.MutableList<dev.kord.rest.builder.message.EmbedBuilder>?){}[0]
    abstract var flags // dev.kord.rest.builder.message/MessageBuilder.flags|{}flags[0]
        abstract fun <get-flags>(): dev.kord.common.entity/MessageFlags? // dev.kord.rest.builder.message/MessageBuilder.flags.<get-flags>|<get-flags>(){}[0]
        abstract fun <set-flags>(dev.kord.common.entity/MessageFlags?) // dev.kord.rest.builder.message/MessageBuilder.flags.<set-flags>|<set-flags>(dev.kord.common.entity.MessageFlags?){}[0]
    abstract var suppressEmbeds // dev.kord.rest.builder.message/MessageBuilder.suppressEmbeds|{}suppressEmbeds[0]
        abstract fun <get-suppressEmbeds>(): kotlin/Boolean? // dev.kord.rest.builder.message/MessageBuilder.suppressEmbeds.<get-suppressEmbeds>|<get-suppressEmbeds>(){}[0]
        abstract fun <set-suppressEmbeds>(kotlin/Boolean?) // dev.kord.rest.builder.message/MessageBuilder.suppressEmbeds.<set-suppressEmbeds>|<set-suppressEmbeds>(kotlin.Boolean?){}[0]

    open fun addFile(kotlin/String, io.ktor.client.request.forms/ChannelProvider): dev.kord.rest/NamedFile // dev.kord.rest.builder.message/MessageBuilder.addFile|addFile(kotlin.String;io.ktor.client.request.forms.ChannelProvider){}[0]
}

abstract interface dev.kord.rest.builder/AuditBuilder { // dev.kord.rest.builder/AuditBuilder|null[0]
    abstract var reason // dev.kord.rest.builder/AuditBuilder.reason|{}reason[0]
        abstract fun <get-reason>(): kotlin/String? // dev.kord.rest.builder/AuditBuilder.reason.<get-reason>|<get-reason>(){}[0]
        abstract fun <set-reason>(kotlin/String?) // dev.kord.rest.builder/AuditBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]
}

abstract interface dev.kord.rest.ratelimit/RequestRateLimiter { // dev.kord.rest.ratelimit/RequestRateLimiter|null[0]
    abstract suspend fun await(dev.kord.rest.request/Request<*, *>): dev.kord.rest.ratelimit/RequestToken // dev.kord.rest.ratelimit/RequestRateLimiter.await|await(dev.kord.rest.request.Request<*,*>){}[0]
}

abstract interface dev.kord.rest.ratelimit/RequestToken { // dev.kord.rest.ratelimit/RequestToken|null[0]
    abstract val completed // dev.kord.rest.ratelimit/RequestToken.completed|{}completed[0]
        abstract fun <get-completed>(): kotlin/Boolean // dev.kord.rest.ratelimit/RequestToken.completed.<get-completed>|<get-completed>(){}[0]

    abstract suspend fun complete(dev.kord.rest.ratelimit/RequestResponse) // dev.kord.rest.ratelimit/RequestToken.complete|complete(dev.kord.rest.ratelimit.RequestResponse){}[0]
}

abstract interface dev.kord.rest.request/RequestHandler { // dev.kord.rest.request/RequestHandler|null[0]
    abstract val token // dev.kord.rest.request/RequestHandler.token|{}token[0]
        abstract fun <get-token>(): kotlin/String // dev.kord.rest.request/RequestHandler.token.<get-token>|<get-token>(){}[0]

    abstract suspend fun <#A1: kotlin/Any, #B1: kotlin/Any?> handle(dev.kord.rest.request/Request<#A1, #B1>): #B1 // dev.kord.rest.request/RequestHandler.handle|handle(dev.kord.rest.request.Request<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
    open suspend fun <#A1: kotlin/Any?> intercept(dev.kord.rest.request/RequestBuilder<#A1>) // dev.kord.rest.request/RequestHandler.intercept|intercept(dev.kord.rest.request.RequestBuilder<0:0>){0§<kotlin.Any?>}[0]
}

sealed interface <#A: kotlin/Any?> dev.kord.rest.route/ResponseMapper { // dev.kord.rest.route/ResponseMapper|null[0]
    abstract fun deserialize(kotlinx.serialization.json/Json, kotlin/String): #A // dev.kord.rest.route/ResponseMapper.deserialize|deserialize(kotlinx.serialization.json.Json;kotlin.String){}[0]
}

sealed interface dev.kord.rest.builder.automoderation/AllowedKeywordsAutoModerationRuleBuilder : dev.kord.rest.builder.automoderation/TypedAutoModerationRuleBuilder { // dev.kord.rest.builder.automoderation/AllowedKeywordsAutoModerationRuleBuilder|null[0]
    abstract var allowedKeywords // dev.kord.rest.builder.automoderation/AllowedKeywordsAutoModerationRuleBuilder.allowedKeywords|{}allowedKeywords[0]
        abstract fun <get-allowedKeywords>(): kotlin.collections/MutableList<kotlin/String>? // dev.kord.rest.builder.automoderation/AllowedKeywordsAutoModerationRuleBuilder.allowedKeywords.<get-allowedKeywords>|<get-allowedKeywords>(){}[0]
        abstract fun <set-allowedKeywords>(kotlin.collections/MutableList<kotlin/String>?) // dev.kord.rest.builder.automoderation/AllowedKeywordsAutoModerationRuleBuilder.allowedKeywords.<set-allowedKeywords>|<set-allowedKeywords>(kotlin.collections.MutableList<kotlin.String>?){}[0]
}

sealed interface dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder : dev.kord.rest.builder/AuditBuilder { // dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder|null[0]
    abstract val actions // dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder.actions|{}actions[0]
        abstract fun <get-actions>(): kotlin.collections/MutableList<dev.kord.rest.builder.automoderation/AutoModerationActionBuilder>? // dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder.actions.<get-actions>|<get-actions>(){}[0]
    abstract val eventType // dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder.eventType|{}eventType[0]
        abstract fun <get-eventType>(): dev.kord.common.entity/AutoModerationRuleEventType? // dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder.eventType.<get-eventType>|<get-eventType>(){}[0]
    abstract val name // dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder.name|{}name[0]
        abstract fun <get-name>(): kotlin/String? // dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder.name.<get-name>|<get-name>(){}[0]
    abstract val triggerType // dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder.triggerType|{}triggerType[0]
        abstract fun <get-triggerType>(): dev.kord.common.entity/AutoModerationRuleTriggerType? // dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder.triggerType.<get-triggerType>|<get-triggerType>(){}[0]

    abstract var enabled // dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder.enabled|{}enabled[0]
        abstract fun <get-enabled>(): kotlin/Boolean? // dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder.enabled.<get-enabled>|<get-enabled>(){}[0]
        abstract fun <set-enabled>(kotlin/Boolean?) // dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder.enabled.<set-enabled>|<set-enabled>(kotlin.Boolean?){}[0]
    abstract var exemptChannels // dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder.exemptChannels|{}exemptChannels[0]
        abstract fun <get-exemptChannels>(): kotlin.collections/MutableList<dev.kord.common.entity/Snowflake>? // dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder.exemptChannels.<get-exemptChannels>|<get-exemptChannels>(){}[0]
        abstract fun <set-exemptChannels>(kotlin.collections/MutableList<dev.kord.common.entity/Snowflake>?) // dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder.exemptChannels.<set-exemptChannels>|<set-exemptChannels>(kotlin.collections.MutableList<dev.kord.common.entity.Snowflake>?){}[0]
    abstract var exemptRoles // dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder.exemptRoles|{}exemptRoles[0]
        abstract fun <get-exemptRoles>(): kotlin.collections/MutableList<dev.kord.common.entity/Snowflake>? // dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder.exemptRoles.<get-exemptRoles>|<get-exemptRoles>(){}[0]
        abstract fun <set-exemptRoles>(kotlin.collections/MutableList<dev.kord.common.entity/Snowflake>?) // dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder.exemptRoles.<set-exemptRoles>|<set-exemptRoles>(kotlin.collections.MutableList<dev.kord.common.entity.Snowflake>?){}[0]

    abstract fun assignActions(kotlin.collections/MutableList<dev.kord.rest.builder.automoderation/AutoModerationActionBuilder>) // dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder.assignActions|assignActions(kotlin.collections.MutableList<dev.kord.rest.builder.automoderation.AutoModerationActionBuilder>){}[0]
    abstract fun assignEventType(dev.kord.common.entity/AutoModerationRuleEventType) // dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder.assignEventType|assignEventType(dev.kord.common.entity.AutoModerationRuleEventType){}[0]
    abstract fun assignName(kotlin/String) // dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder.assignName|assignName(kotlin.String){}[0]
}

sealed interface dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleBuilder : dev.kord.rest.builder.automoderation/AllowedKeywordsAutoModerationRuleBuilder, dev.kord.rest.builder.automoderation/TimeoutAutoModerationRuleBuilder { // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleBuilder|null[0]
    open val triggerType // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleBuilder.triggerType|{}triggerType[0]
        open fun <get-triggerType>(): dev.kord.common.entity/AutoModerationRuleTriggerType.Keyword // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleBuilder.triggerType.<get-triggerType>|<get-triggerType>(){}[0]

    abstract var keywords // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleBuilder.keywords|{}keywords[0]
        abstract fun <get-keywords>(): kotlin.collections/MutableList<kotlin/String>? // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleBuilder.keywords.<get-keywords>|<get-keywords>(){}[0]
        abstract fun <set-keywords>(kotlin.collections/MutableList<kotlin/String>?) // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleBuilder.keywords.<set-keywords>|<set-keywords>(kotlin.collections.MutableList<kotlin.String>?){}[0]
    abstract var regexPatterns // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleBuilder.regexPatterns|{}regexPatterns[0]
        abstract fun <get-regexPatterns>(): kotlin.collections/MutableList<kotlin/String>? // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleBuilder.regexPatterns.<get-regexPatterns>|<get-regexPatterns>(){}[0]
        abstract fun <set-regexPatterns>(kotlin.collections/MutableList<kotlin/String>?) // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleBuilder.regexPatterns.<set-regexPatterns>|<set-regexPatterns>(kotlin.collections.MutableList<kotlin.String>?){}[0]
}

sealed interface dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleBuilder : dev.kord.rest.builder.automoderation/AllowedKeywordsAutoModerationRuleBuilder { // dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleBuilder|null[0]
    abstract val presets // dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleBuilder.presets|{}presets[0]
        abstract fun <get-presets>(): kotlin.collections/MutableList<dev.kord.common.entity/AutoModerationRuleKeywordPresetType>? // dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleBuilder.presets.<get-presets>|<get-presets>(){}[0]
    open val triggerType // dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleBuilder.triggerType|{}triggerType[0]
        open fun <get-triggerType>(): dev.kord.common.entity/AutoModerationRuleTriggerType.KeywordPreset // dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleBuilder.triggerType.<get-triggerType>|<get-triggerType>(){}[0]

    abstract fun assignPresets(kotlin.collections/MutableList<dev.kord.common.entity/AutoModerationRuleKeywordPresetType>) // dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleBuilder.assignPresets|assignPresets(kotlin.collections.MutableList<dev.kord.common.entity.AutoModerationRuleKeywordPresetType>){}[0]
}

sealed interface dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleBuilder : dev.kord.rest.builder.automoderation/TimeoutAutoModerationRuleBuilder { // dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleBuilder|null[0]
    open val triggerType // dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleBuilder.triggerType|{}triggerType[0]
        open fun <get-triggerType>(): dev.kord.common.entity/AutoModerationRuleTriggerType.MentionSpam // dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleBuilder.triggerType.<get-triggerType>|<get-triggerType>(){}[0]

    abstract var mentionLimit // dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleBuilder.mentionLimit|{}mentionLimit[0]
        abstract fun <get-mentionLimit>(): kotlin/Int? // dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleBuilder.mentionLimit.<get-mentionLimit>|<get-mentionLimit>(){}[0]
        abstract fun <set-mentionLimit>(kotlin/Int?) // dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleBuilder.mentionLimit.<set-mentionLimit>|<set-mentionLimit>(kotlin.Int?){}[0]
    abstract var mentionRaidProtectionEnabled // dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleBuilder.mentionRaidProtectionEnabled|{}mentionRaidProtectionEnabled[0]
        abstract fun <get-mentionRaidProtectionEnabled>(): kotlin/Boolean? // dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleBuilder.mentionRaidProtectionEnabled.<get-mentionRaidProtectionEnabled>|<get-mentionRaidProtectionEnabled>(){}[0]
        abstract fun <set-mentionRaidProtectionEnabled>(kotlin/Boolean?) // dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleBuilder.mentionRaidProtectionEnabled.<set-mentionRaidProtectionEnabled>|<set-mentionRaidProtectionEnabled>(kotlin.Boolean?){}[0]
}

sealed interface dev.kord.rest.builder.automoderation/SpamAutoModerationRuleBuilder : dev.kord.rest.builder.automoderation/TypedAutoModerationRuleBuilder { // dev.kord.rest.builder.automoderation/SpamAutoModerationRuleBuilder|null[0]
    open val triggerType // dev.kord.rest.builder.automoderation/SpamAutoModerationRuleBuilder.triggerType|{}triggerType[0]
        open fun <get-triggerType>(): dev.kord.common.entity/AutoModerationRuleTriggerType.Spam // dev.kord.rest.builder.automoderation/SpamAutoModerationRuleBuilder.triggerType.<get-triggerType>|<get-triggerType>(){}[0]
}

sealed interface dev.kord.rest.builder.automoderation/TimeoutAutoModerationRuleBuilder : dev.kord.rest.builder.automoderation/TypedAutoModerationRuleBuilder // dev.kord.rest.builder.automoderation/TimeoutAutoModerationRuleBuilder|null[0]

sealed interface dev.kord.rest.builder.automoderation/TypedAutoModerationRuleBuilder : dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder { // dev.kord.rest.builder.automoderation/TypedAutoModerationRuleBuilder|null[0]
    abstract val triggerType // dev.kord.rest.builder.automoderation/TypedAutoModerationRuleBuilder.triggerType|{}triggerType[0]
        abstract fun <get-triggerType>(): dev.kord.common.entity/AutoModerationRuleTriggerType // dev.kord.rest.builder.automoderation/TypedAutoModerationRuleBuilder.triggerType.<get-triggerType>|<get-triggerType>(){}[0]
}

sealed interface dev.kord.rest.builder.channel/PermissionOverwritesBuilder { // dev.kord.rest.builder.channel/PermissionOverwritesBuilder|null[0]
    abstract fun addOverwrite(dev.kord.common.entity/Overwrite) // dev.kord.rest.builder.channel/PermissionOverwritesBuilder.addOverwrite|addOverwrite(dev.kord.common.entity.Overwrite){}[0]
}

sealed interface dev.kord.rest.builder.component/ComponentBuilder { // dev.kord.rest.builder.component/ComponentBuilder|null[0]
    abstract fun build(): dev.kord.common.entity/DiscordComponent // dev.kord.rest.builder.component/ComponentBuilder.build|build(){}[0]
}

sealed interface dev.kord.rest.builder.component/MessageComponentBuilder : dev.kord.rest.builder.component/ComponentBuilder // dev.kord.rest.builder.component/MessageComponentBuilder|null[0]

sealed interface dev.kord.rest.builder.interaction/BaseInputChatBuilder { // dev.kord.rest.builder.interaction/BaseInputChatBuilder|null[0]
    abstract var options // dev.kord.rest.builder.interaction/BaseInputChatBuilder.options|{}options[0]
        abstract fun <get-options>(): kotlin.collections/MutableList<dev.kord.rest.builder.interaction/OptionsBuilder>? // dev.kord.rest.builder.interaction/BaseInputChatBuilder.options.<get-options>|<get-options>(){}[0]
        abstract fun <set-options>(kotlin.collections/MutableList<dev.kord.rest.builder.interaction/OptionsBuilder>?) // dev.kord.rest.builder.interaction/BaseInputChatBuilder.options.<set-options>|<set-options>(kotlin.collections.MutableList<dev.kord.rest.builder.interaction.OptionsBuilder>?){}[0]
}

sealed interface dev.kord.rest.builder.message.create/MessageCreateBuilder : dev.kord.rest.builder.message/MessageBuilder { // dev.kord.rest.builder.message.create/MessageCreateBuilder|null[0]
    abstract var flags // dev.kord.rest.builder.message.create/MessageCreateBuilder.flags|{}flags[0]
        abstract fun <get-flags>(): dev.kord.common.entity/MessageFlags? // dev.kord.rest.builder.message.create/MessageCreateBuilder.flags.<get-flags>|<get-flags>(){}[0]
        abstract fun <set-flags>(dev.kord.common.entity/MessageFlags?) // dev.kord.rest.builder.message.create/MessageCreateBuilder.flags.<set-flags>|<set-flags>(dev.kord.common.entity.MessageFlags?){}[0]
    abstract var suppressNotifications // dev.kord.rest.builder.message.create/MessageCreateBuilder.suppressNotifications|{}suppressNotifications[0]
        abstract fun <get-suppressNotifications>(): kotlin/Boolean? // dev.kord.rest.builder.message.create/MessageCreateBuilder.suppressNotifications.<get-suppressNotifications>|<get-suppressNotifications>(){}[0]
        abstract fun <set-suppressNotifications>(kotlin/Boolean?) // dev.kord.rest.builder.message.create/MessageCreateBuilder.suppressNotifications.<set-suppressNotifications>|<set-suppressNotifications>(kotlin.Boolean?){}[0]
    abstract var tts // dev.kord.rest.builder.message.create/MessageCreateBuilder.tts|{}tts[0]
        abstract fun <get-tts>(): kotlin/Boolean? // dev.kord.rest.builder.message.create/MessageCreateBuilder.tts.<get-tts>|<get-tts>(){}[0]
        abstract fun <set-tts>(kotlin/Boolean?) // dev.kord.rest.builder.message.create/MessageCreateBuilder.tts.<set-tts>|<set-tts>(kotlin.Boolean?){}[0]
}

sealed interface dev.kord.rest.builder.message.modify/MessageModifyBuilder : dev.kord.rest.builder.message/MessageBuilder // dev.kord.rest.builder.message.modify/MessageModifyBuilder|null[0]

sealed interface dev.kord.rest.route/Position { // dev.kord.rest.route/Position|null[0]
    abstract val key // dev.kord.rest.route/Position.key|{}key[0]
        abstract fun <get-key>(): kotlin/String // dev.kord.rest.route/Position.key.<get-key>|<get-key>(){}[0]
    abstract val value // dev.kord.rest.route/Position.value|{}value[0]
        abstract fun <get-value>(): dev.kord.common.entity/Snowflake // dev.kord.rest.route/Position.value.<get-value>|<get-value>(){}[0]

    sealed interface BeforeOrAfter : dev.kord.rest.route/Position // dev.kord.rest.route/Position.BeforeOrAfter|null[0]

    final class After : dev.kord.rest.route/Position.BeforeOrAfter { // dev.kord.rest.route/Position.After|null[0]
        constructor <init>(dev.kord.common.entity/Snowflake) // dev.kord.rest.route/Position.After.<init>|<init>(dev.kord.common.entity.Snowflake){}[0]

        final val key // dev.kord.rest.route/Position.After.key|{}key[0]
            final fun <get-key>(): kotlin/String // dev.kord.rest.route/Position.After.key.<get-key>|<get-key>(){}[0]
        final val value // dev.kord.rest.route/Position.After.value|{}value[0]
            final fun <get-value>(): dev.kord.common.entity/Snowflake // dev.kord.rest.route/Position.After.value.<get-value>|<get-value>(){}[0]
    }

    final class Around : dev.kord.rest.route/Position { // dev.kord.rest.route/Position.Around|null[0]
        constructor <init>(dev.kord.common.entity/Snowflake) // dev.kord.rest.route/Position.Around.<init>|<init>(dev.kord.common.entity.Snowflake){}[0]

        final val key // dev.kord.rest.route/Position.Around.key|{}key[0]
            final fun <get-key>(): kotlin/String // dev.kord.rest.route/Position.Around.key.<get-key>|<get-key>(){}[0]
        final val value // dev.kord.rest.route/Position.Around.value|{}value[0]
            final fun <get-value>(): dev.kord.common.entity/Snowflake // dev.kord.rest.route/Position.Around.value.<get-value>|<get-value>(){}[0]
    }

    final class Before : dev.kord.rest.route/Position.BeforeOrAfter { // dev.kord.rest.route/Position.Before|null[0]
        constructor <init>(dev.kord.common.entity/Snowflake) // dev.kord.rest.route/Position.Before.<init>|<init>(dev.kord.common.entity.Snowflake){}[0]

        final val key // dev.kord.rest.route/Position.Before.key|{}key[0]
            final fun <get-key>(): kotlin/String // dev.kord.rest.route/Position.Before.key.<get-key>|<get-key>(){}[0]
        final val value // dev.kord.rest.route/Position.Before.value|{}value[0]
            final fun <get-value>(): dev.kord.common.entity/Snowflake // dev.kord.rest.route/Position.Before.value.<get-value>|<get-value>(){}[0]
    }
}

abstract class dev.kord.rest.ratelimit/AbstractRateLimiter : dev.kord.rest.ratelimit/RequestRateLimiter { // dev.kord.rest.ratelimit/AbstractRateLimiter|null[0]
    final val clock // dev.kord.rest.ratelimit/AbstractRateLimiter.clock|{}clock[0]
        final fun <get-clock>(): kotlinx.datetime/Clock // dev.kord.rest.ratelimit/AbstractRateLimiter.clock.<get-clock>|<get-clock>(){}[0]

    open suspend fun await(dev.kord.rest.request/Request<*, *>): dev.kord.rest.ratelimit/RequestToken // dev.kord.rest.ratelimit/AbstractRateLimiter.await|await(dev.kord.rest.request.Request<*,*>){}[0]
}

abstract class dev.kord.rest.request/RestRequestException : dev.kord.common.exception/RequestException { // dev.kord.rest.request/RestRequestException|null[0]
    constructor <init>(dev.kord.rest.request/Request<*, *>, dev.kord.rest.request/HttpStatus, dev.kord.rest.json.response/DiscordErrorResponse? = ...) // dev.kord.rest.request/RestRequestException.<init>|<init>(dev.kord.rest.request.Request<*,*>;dev.kord.rest.request.HttpStatus;dev.kord.rest.json.response.DiscordErrorResponse?){}[0]

    final val error // dev.kord.rest.request/RestRequestException.error|{}error[0]
        final fun <get-error>(): dev.kord.rest.json.response/DiscordErrorResponse? // dev.kord.rest.request/RestRequestException.error.<get-error>|<get-error>(){}[0]
    final val request // dev.kord.rest.request/RestRequestException.request|{}request[0]
        final fun <get-request>(): dev.kord.rest.request/Request<*, *> // dev.kord.rest.request/RestRequestException.request.<get-request>|<get-request>(){}[0]
    final val status // dev.kord.rest.request/RestRequestException.status|{}status[0]
        final fun <get-status>(): dev.kord.rest.request/HttpStatus // dev.kord.rest.request/RestRequestException.status.<get-status>|<get-status>(){}[0]
}

abstract class dev.kord.rest.service/RestService { // dev.kord.rest.service/RestService|null[0]
    constructor <init>(dev.kord.rest.request/RequestHandler) // dev.kord.rest.service/RestService.<init>|<init>(dev.kord.rest.request.RequestHandler){}[0]

    final val requestHandler // dev.kord.rest.service/RestService.requestHandler|{}requestHandler[0]
        final fun <get-requestHandler>(): dev.kord.rest.request/RequestHandler // dev.kord.rest.service/RestService.requestHandler.<get-requestHandler>|<get-requestHandler>(){}[0]

    final suspend inline fun <#A1: kotlin/Any?> call(dev.kord.rest.route/Route<#A1>, kotlin/Function1<dev.kord.rest.request/RequestBuilder<#A1>, kotlin/Unit> = ...): #A1 // dev.kord.rest.service/RestService.call|call(dev.kord.rest.route.Route<0:0>;kotlin.Function1<dev.kord.rest.request.RequestBuilder<0:0>,kotlin.Unit>){0§<kotlin.Any?>}[0]
}

final class <#A: kotlin/Any, #B: kotlin/Any?> dev.kord.rest.request/JsonRequest : dev.kord.rest.request/Request<#A, #B> { // dev.kord.rest.request/JsonRequest|null[0]
    constructor <init>(dev.kord.rest.route/Route<#B>, kotlin.collections/Map<dev.kord.rest.route/Route.Key, kotlin/String>, io.ktor.util/StringValues, io.ktor.util/StringValues, dev.kord.rest.request/RequestBody<#A>?, kotlin/String = ...) // dev.kord.rest.request/JsonRequest.<init>|<init>(dev.kord.rest.route.Route<1:1>;kotlin.collections.Map<dev.kord.rest.route.Route.Key,kotlin.String>;io.ktor.util.StringValues;io.ktor.util.StringValues;dev.kord.rest.request.RequestBody<1:0>?;kotlin.String){}[0]

    final val body // dev.kord.rest.request/JsonRequest.body|{}body[0]
        final fun <get-body>(): dev.kord.rest.request/RequestBody<#A>? // dev.kord.rest.request/JsonRequest.body.<get-body>|<get-body>(){}[0]
    final val files // dev.kord.rest.request/JsonRequest.files|{}files[0]
        final fun <get-files>(): kotlin.collections/List<dev.kord.rest/NamedFile>? // dev.kord.rest.request/JsonRequest.files.<get-files>|<get-files>(){}[0]
    final val headers // dev.kord.rest.request/JsonRequest.headers|{}headers[0]
        final fun <get-headers>(): io.ktor.util/StringValues // dev.kord.rest.request/JsonRequest.headers.<get-headers>|<get-headers>(){}[0]
    final val parameters // dev.kord.rest.request/JsonRequest.parameters|{}parameters[0]
        final fun <get-parameters>(): io.ktor.util/StringValues // dev.kord.rest.request/JsonRequest.parameters.<get-parameters>|<get-parameters>(){}[0]
    final val route // dev.kord.rest.request/JsonRequest.route|{}route[0]
        final fun <get-route>(): dev.kord.rest.route/Route<#B> // dev.kord.rest.request/JsonRequest.route.<get-route>|<get-route>(){}[0]
    final val routeParams // dev.kord.rest.request/JsonRequest.routeParams|{}routeParams[0]
        final fun <get-routeParams>(): kotlin.collections/Map<dev.kord.rest.route/Route.Key, kotlin/String> // dev.kord.rest.request/JsonRequest.routeParams.<get-routeParams>|<get-routeParams>(){}[0]
}

final class <#A: kotlin/Any, #B: kotlin/Any?> dev.kord.rest.request/MultipartRequest : dev.kord.rest.request/Request<#A, #B> { // dev.kord.rest.request/MultipartRequest|null[0]
    constructor <init>(dev.kord.rest.route/Route<#B>, kotlin.collections/Map<dev.kord.rest.route/Route.Key, kotlin/String>, io.ktor.util/StringValues, io.ktor.util/StringValues, dev.kord.rest.request/RequestBody<#A>?, kotlin.collections/List<dev.kord.rest/NamedFile> = ..., kotlin/String = ...) // dev.kord.rest.request/MultipartRequest.<init>|<init>(dev.kord.rest.route.Route<1:1>;kotlin.collections.Map<dev.kord.rest.route.Route.Key,kotlin.String>;io.ktor.util.StringValues;io.ktor.util.StringValues;dev.kord.rest.request.RequestBody<1:0>?;kotlin.collections.List<dev.kord.rest.NamedFile>;kotlin.String){}[0]

    final val body // dev.kord.rest.request/MultipartRequest.body|{}body[0]
        final fun <get-body>(): dev.kord.rest.request/RequestBody<#A>? // dev.kord.rest.request/MultipartRequest.body.<get-body>|<get-body>(){}[0]
    final val data // dev.kord.rest.request/MultipartRequest.data|{}data[0]
        final fun <get-data>(): kotlin.collections/List<io.ktor.http.content/PartData> // dev.kord.rest.request/MultipartRequest.data.<get-data>|<get-data>(){}[0]
    final val files // dev.kord.rest.request/MultipartRequest.files|{}files[0]
        final fun <get-files>(): kotlin.collections/List<dev.kord.rest/NamedFile> // dev.kord.rest.request/MultipartRequest.files.<get-files>|<get-files>(){}[0]
    final val headers // dev.kord.rest.request/MultipartRequest.headers|{}headers[0]
        final fun <get-headers>(): io.ktor.util/StringValues // dev.kord.rest.request/MultipartRequest.headers.<get-headers>|<get-headers>(){}[0]
    final val parameters // dev.kord.rest.request/MultipartRequest.parameters|{}parameters[0]
        final fun <get-parameters>(): io.ktor.util/StringValues // dev.kord.rest.request/MultipartRequest.parameters.<get-parameters>|<get-parameters>(){}[0]
    final val route // dev.kord.rest.request/MultipartRequest.route|{}route[0]
        final fun <get-route>(): dev.kord.rest.route/Route<#B> // dev.kord.rest.request/MultipartRequest.route.<get-route>|<get-route>(){}[0]
    final val routeParams // dev.kord.rest.request/MultipartRequest.routeParams|{}routeParams[0]
        final fun <get-routeParams>(): kotlin.collections/Map<dev.kord.rest.route/Route.Key, kotlin/String> // dev.kord.rest.request/MultipartRequest.routeParams.<get-routeParams>|<get-routeParams>(){}[0]
}

final class <#A: kotlin/Any> dev.kord.rest.request/RequestBody { // dev.kord.rest.request/RequestBody|null[0]
    constructor <init>(kotlinx.serialization/SerializationStrategy<#A>, #A) // dev.kord.rest.request/RequestBody.<init>|<init>(kotlinx.serialization.SerializationStrategy<1:0>;1:0){}[0]

    final val body // dev.kord.rest.request/RequestBody.body|{}body[0]
        final fun <get-body>(): #A // dev.kord.rest.request/RequestBody.body.<get-body>|<get-body>(){}[0]
    final val strategy // dev.kord.rest.request/RequestBody.strategy|{}strategy[0]
        final fun <get-strategy>(): kotlinx.serialization/SerializationStrategy<#A> // dev.kord.rest.request/RequestBody.strategy.<get-strategy>|<get-strategy>(){}[0]

    final fun component1(): kotlinx.serialization/SerializationStrategy<#A> // dev.kord.rest.request/RequestBody.component1|component1(){}[0]
    final fun component2(): #A // dev.kord.rest.request/RequestBody.component2|component2(){}[0]
    final fun copy(kotlinx.serialization/SerializationStrategy<#A> = ..., #A = ...): dev.kord.rest.request/RequestBody<#A> // dev.kord.rest.request/RequestBody.copy|copy(kotlinx.serialization.SerializationStrategy<1:0>;1:0){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.request/RequestBody.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.request/RequestBody.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.request/RequestBody.toString|toString(){}[0]
}

final class <#A: kotlin/Any?> dev.kord.rest.request/RequestBuilder { // dev.kord.rest.request/RequestBuilder|null[0]
    constructor <init>(dev.kord.rest.route/Route<#A>, kotlin/Int = ...) // dev.kord.rest.request/RequestBuilder.<init>|<init>(dev.kord.rest.route.Route<1:0>;kotlin.Int){}[0]

    final val keys // dev.kord.rest.request/RequestBuilder.keys|{}keys[0]
        final fun <get-keys>(): kotlin.collections/MutableMap<dev.kord.rest.route/Route.Key, kotlin/String> // dev.kord.rest.request/RequestBuilder.keys.<get-keys>|<get-keys>(){}[0]
    final val route // dev.kord.rest.request/RequestBuilder.route|{}route[0]
        final fun <get-route>(): dev.kord.rest.route/Route<#A> // dev.kord.rest.request/RequestBuilder.route.<get-route>|<get-route>(){}[0]

    final var baseUrl // dev.kord.rest.request/RequestBuilder.baseUrl|{}baseUrl[0]
        final fun <get-baseUrl>(): kotlin/String // dev.kord.rest.request/RequestBuilder.baseUrl.<get-baseUrl>|<get-baseUrl>(){}[0]
        final fun <set-baseUrl>(kotlin/String) // dev.kord.rest.request/RequestBuilder.baseUrl.<set-baseUrl>|<set-baseUrl>(kotlin.String){}[0]

    final fun (kotlin.collections/MutableMap<dev.kord.rest.route/Route.Key, kotlin/String>).set(dev.kord.rest.route/Route.Key, dev.kord.common.entity/Snowflake) // dev.kord.rest.request/RequestBuilder.set|set@kotlin.collections.MutableMap<dev.kord.rest.route.Route.Key,kotlin.String>(dev.kord.rest.route.Route.Key;dev.kord.common.entity.Snowflake){}[0]
    final fun (kotlin.collections/MutableMap<kotlin/String, kotlin/String>).set(dev.kord.rest.route/Route.Key, kotlin/String) // dev.kord.rest.request/RequestBuilder.set|set@kotlin.collections.MutableMap<kotlin.String,kotlin.String>(dev.kord.rest.route.Route.Key;kotlin.String){}[0]
    final fun <#A1: kotlin/Any> body(kotlinx.serialization/SerializationStrategy<#A1>, #A1) // dev.kord.rest.request/RequestBuilder.body|body(kotlinx.serialization.SerializationStrategy<0:0>;0:0){0§<kotlin.Any>}[0]
    final fun build(): dev.kord.rest.request/Request<*, #A> // dev.kord.rest.request/RequestBuilder.build|build(){}[0]
    final fun file(dev.kord.rest/NamedFile) // dev.kord.rest.request/RequestBuilder.file|file(dev.kord.rest.NamedFile){}[0]
    final fun file(kotlin/String, io.ktor.client.request.forms/ChannelProvider) // dev.kord.rest.request/RequestBuilder.file|file(kotlin.String;io.ktor.client.request.forms.ChannelProvider){}[0]
    final fun parameter(kotlin/String, dev.kord.common.entity/Snowflake) // dev.kord.rest.request/RequestBuilder.parameter|parameter(kotlin.String;dev.kord.common.entity.Snowflake){}[0]
    final fun parameter(kotlin/String, kotlin/Any) // dev.kord.rest.request/RequestBuilder.parameter|parameter(kotlin.String;kotlin.Any){}[0]
    final fun unencodedHeader(kotlin/String, kotlin/String) // dev.kord.rest.request/RequestBuilder.unencodedHeader|unencodedHeader(kotlin.String;kotlin.String){}[0]
    final fun urlEncodedHeader(kotlin/String, kotlin/String) // dev.kord.rest.request/RequestBuilder.urlEncodedHeader|urlEncodedHeader(kotlin.String;kotlin.String){}[0]
}

final class dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataBuilder : dev.kord.rest.builder.interaction/LocalizedDescriptionCreateBuilder, dev.kord.rest.builder.interaction/LocalizedNameCreateBuilder, dev.kord.rest.builder/RequestBuilder<dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata> { // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataBuilder|null[0]
    constructor <init>(dev.kord.common.entity/ApplicationRoleConnectionMetadataType, kotlin/String, kotlin/String, kotlin/String) // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataBuilder.<init>|<init>(dev.kord.common.entity.ApplicationRoleConnectionMetadataType;kotlin.String;kotlin.String;kotlin.String){}[0]

    final var description // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataBuilder.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataBuilder.description.<get-description>|<get-description>(){}[0]
        final fun <set-description>(kotlin/String) // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataBuilder.description.<set-description>|<set-description>(kotlin.String){}[0]
    final var descriptionLocalizations // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataBuilder.descriptionLocalizations|{}descriptionLocalizations[0]
        final fun <get-descriptionLocalizations>(): kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>? // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataBuilder.descriptionLocalizations.<get-descriptionLocalizations>|<get-descriptionLocalizations>(){}[0]
        final fun <set-descriptionLocalizations>(kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>?) // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataBuilder.descriptionLocalizations.<set-descriptionLocalizations>|<set-descriptionLocalizations>(kotlin.collections.MutableMap<dev.kord.common.Locale,kotlin.String>?){}[0]
    final var key // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataBuilder.key|{}key[0]
        final fun <get-key>(): kotlin/String // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataBuilder.key.<get-key>|<get-key>(){}[0]
        final fun <set-key>(kotlin/String) // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataBuilder.key.<set-key>|<set-key>(kotlin.String){}[0]
    final var name // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataBuilder.name.<set-name>|<set-name>(kotlin.String){}[0]
    final var nameLocalizations // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataBuilder.nameLocalizations|{}nameLocalizations[0]
        final fun <get-nameLocalizations>(): kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>? // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataBuilder.nameLocalizations.<get-nameLocalizations>|<get-nameLocalizations>(){}[0]
        final fun <set-nameLocalizations>(kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>?) // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataBuilder.nameLocalizations.<set-nameLocalizations>|<set-nameLocalizations>(kotlin.collections.MutableMap<dev.kord.common.Locale,kotlin.String>?){}[0]
    final var type // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataBuilder.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ApplicationRoleConnectionMetadataType // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataBuilder.type.<get-type>|<get-type>(){}[0]
        final fun <set-type>(dev.kord.common.entity/ApplicationRoleConnectionMetadataType) // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataBuilder.type.<set-type>|<set-type>(dev.kord.common.entity.ApplicationRoleConnectionMetadataType){}[0]

    final fun toRequest(): dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataRecordsBuilder : dev.kord.rest.builder/RequestBuilder<kotlin.collections/List<dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata>> { // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataRecordsBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataRecordsBuilder.<init>|<init>(){}[0]

    final var records // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataRecordsBuilder.records|{}records[0]
        final fun <get-records>(): kotlin.collections/MutableList<dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataBuilder> // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataRecordsBuilder.records.<get-records>|<get-records>(){}[0]
        final fun <set-records>(kotlin.collections/MutableList<dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataBuilder>) // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataRecordsBuilder.records.<set-records>|<set-records>(kotlin.collections.MutableList<dev.kord.rest.builder.application.ApplicationRoleConnectionMetadataBuilder>){}[0]

    final fun toRequest(): kotlin.collections/List<dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata> // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataRecordsBuilder.toRequest|toRequest(){}[0]
    final inline fun record(dev.kord.common.entity/ApplicationRoleConnectionMetadataType, kotlin/String, kotlin/String, kotlin/String, kotlin/Function1<dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataRecordsBuilder.record|record(dev.kord.common.entity.ApplicationRoleConnectionMetadataType;kotlin.String;kotlin.String;kotlin.String;kotlin.Function1<dev.kord.rest.builder.application.ApplicationRoleConnectionMetadataBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.rest.builder.auditlog/AuditLogGetRequestBuilder : dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/AuditLogGetRequest> { // dev.kord.rest.builder.auditlog/AuditLogGetRequestBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.auditlog/AuditLogGetRequestBuilder.<init>|<init>(){}[0]

    final var action // dev.kord.rest.builder.auditlog/AuditLogGetRequestBuilder.action|{}action[0]
        final fun <get-action>(): dev.kord.common.entity/AuditLogEvent? // dev.kord.rest.builder.auditlog/AuditLogGetRequestBuilder.action.<get-action>|<get-action>(){}[0]
        final fun <set-action>(dev.kord.common.entity/AuditLogEvent?) // dev.kord.rest.builder.auditlog/AuditLogGetRequestBuilder.action.<set-action>|<set-action>(dev.kord.common.entity.AuditLogEvent?){}[0]
    final var after // dev.kord.rest.builder.auditlog/AuditLogGetRequestBuilder.after|{}after[0]
        final fun <get-after>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.auditlog/AuditLogGetRequestBuilder.after.<get-after>|<get-after>(){}[0]
        final fun <set-after>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.auditlog/AuditLogGetRequestBuilder.after.<set-after>|<set-after>(dev.kord.common.entity.Snowflake?){}[0]
    final var before // dev.kord.rest.builder.auditlog/AuditLogGetRequestBuilder.before|{}before[0]
        final fun <get-before>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.auditlog/AuditLogGetRequestBuilder.before.<get-before>|<get-before>(){}[0]
        final fun <set-before>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.auditlog/AuditLogGetRequestBuilder.before.<set-before>|<set-before>(dev.kord.common.entity.Snowflake?){}[0]
    final var limit // dev.kord.rest.builder.auditlog/AuditLogGetRequestBuilder.limit|{}limit[0]
        final fun <get-limit>(): kotlin/Int? // dev.kord.rest.builder.auditlog/AuditLogGetRequestBuilder.limit.<get-limit>|<get-limit>(){}[0]
        final fun <set-limit>(kotlin/Int?) // dev.kord.rest.builder.auditlog/AuditLogGetRequestBuilder.limit.<set-limit>|<set-limit>(kotlin.Int?){}[0]
    final var userId // dev.kord.rest.builder.auditlog/AuditLogGetRequestBuilder.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.auditlog/AuditLogGetRequestBuilder.userId.<get-userId>|<get-userId>(){}[0]
        final fun <set-userId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.auditlog/AuditLogGetRequestBuilder.userId.<set-userId>|<set-userId>(dev.kord.common.entity.Snowflake?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/AuditLogGetRequest // dev.kord.rest.builder.auditlog/AuditLogGetRequestBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.automoderation/BlockMessageAutoModerationActionBuilder : dev.kord.rest.builder.automoderation/AutoModerationActionBuilder { // dev.kord.rest.builder.automoderation/BlockMessageAutoModerationActionBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.automoderation/BlockMessageAutoModerationActionBuilder.<init>|<init>(){}[0]

    final val type // dev.kord.rest.builder.automoderation/BlockMessageAutoModerationActionBuilder.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/AutoModerationActionType.BlockMessage // dev.kord.rest.builder.automoderation/BlockMessageAutoModerationActionBuilder.type.<get-type>|<get-type>(){}[0]

    final var customMessage // dev.kord.rest.builder.automoderation/BlockMessageAutoModerationActionBuilder.customMessage|{}customMessage[0]
        final fun <get-customMessage>(): kotlin/String? // dev.kord.rest.builder.automoderation/BlockMessageAutoModerationActionBuilder.customMessage.<get-customMessage>|<get-customMessage>(){}[0]
        final fun <set-customMessage>(kotlin/String?) // dev.kord.rest.builder.automoderation/BlockMessageAutoModerationActionBuilder.customMessage.<set-customMessage>|<set-customMessage>(kotlin.String?){}[0]
}

final class dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleCreateBuilder : dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder, dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleBuilder { // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleCreateBuilder|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity/AutoModerationRuleEventType) // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleCreateBuilder.<init>|<init>(kotlin.String;dev.kord.common.entity.AutoModerationRuleEventType){}[0]

    final var allowedKeywords // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleCreateBuilder.allowedKeywords|{}allowedKeywords[0]
        final fun <get-allowedKeywords>(): kotlin.collections/MutableList<kotlin/String>? // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleCreateBuilder.allowedKeywords.<get-allowedKeywords>|<get-allowedKeywords>(){}[0]
        final fun <set-allowedKeywords>(kotlin.collections/MutableList<kotlin/String>?) // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleCreateBuilder.allowedKeywords.<set-allowedKeywords>|<set-allowedKeywords>(kotlin.collections.MutableList<kotlin.String>?){}[0]
    final var keywords // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleCreateBuilder.keywords|{}keywords[0]
        final fun <get-keywords>(): kotlin.collections/MutableList<kotlin/String>? // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleCreateBuilder.keywords.<get-keywords>|<get-keywords>(){}[0]
        final fun <set-keywords>(kotlin.collections/MutableList<kotlin/String>?) // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleCreateBuilder.keywords.<set-keywords>|<set-keywords>(kotlin.collections.MutableList<kotlin.String>?){}[0]
    final var regexPatterns // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleCreateBuilder.regexPatterns|{}regexPatterns[0]
        final fun <get-regexPatterns>(): kotlin.collections/MutableList<kotlin/String>? // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleCreateBuilder.regexPatterns.<get-regexPatterns>|<get-regexPatterns>(){}[0]
        final fun <set-regexPatterns>(kotlin.collections/MutableList<kotlin/String>?) // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleCreateBuilder.regexPatterns.<set-regexPatterns>|<set-regexPatterns>(kotlin.collections.MutableList<kotlin.String>?){}[0]
}

final class dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleModifyBuilder : dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder, dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleBuilder { // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleModifyBuilder.<init>|<init>(){}[0]

    final var allowedKeywords // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleModifyBuilder.allowedKeywords|{}allowedKeywords[0]
        final fun <get-allowedKeywords>(): kotlin.collections/MutableList<kotlin/String>? // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleModifyBuilder.allowedKeywords.<get-allowedKeywords>|<get-allowedKeywords>(){}[0]
        final fun <set-allowedKeywords>(kotlin.collections/MutableList<kotlin/String>?) // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleModifyBuilder.allowedKeywords.<set-allowedKeywords>|<set-allowedKeywords>(kotlin.collections.MutableList<kotlin.String>?){}[0]
    final var keywords // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleModifyBuilder.keywords|{}keywords[0]
        final fun <get-keywords>(): kotlin.collections/MutableList<kotlin/String>? // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleModifyBuilder.keywords.<get-keywords>|<get-keywords>(){}[0]
        final fun <set-keywords>(kotlin.collections/MutableList<kotlin/String>?) // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleModifyBuilder.keywords.<set-keywords>|<set-keywords>(kotlin.collections.MutableList<kotlin.String>?){}[0]
    final var regexPatterns // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleModifyBuilder.regexPatterns|{}regexPatterns[0]
        final fun <get-regexPatterns>(): kotlin.collections/MutableList<kotlin/String>? // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleModifyBuilder.regexPatterns.<get-regexPatterns>|<get-regexPatterns>(){}[0]
        final fun <set-regexPatterns>(kotlin.collections/MutableList<kotlin/String>?) // dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleModifyBuilder.regexPatterns.<set-regexPatterns>|<set-regexPatterns>(kotlin.collections.MutableList<kotlin.String>?){}[0]
}

final class dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleCreateBuilder : dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder, dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleBuilder { // dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleCreateBuilder|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity/AutoModerationRuleEventType) // dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleCreateBuilder.<init>|<init>(kotlin.String;dev.kord.common.entity.AutoModerationRuleEventType){}[0]

    final var allowedKeywords // dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleCreateBuilder.allowedKeywords|{}allowedKeywords[0]
        final fun <get-allowedKeywords>(): kotlin.collections/MutableList<kotlin/String>? // dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleCreateBuilder.allowedKeywords.<get-allowedKeywords>|<get-allowedKeywords>(){}[0]
        final fun <set-allowedKeywords>(kotlin.collections/MutableList<kotlin/String>?) // dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleCreateBuilder.allowedKeywords.<set-allowedKeywords>|<set-allowedKeywords>(kotlin.collections.MutableList<kotlin.String>?){}[0]
    final var presets // dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleCreateBuilder.presets|{}presets[0]
        final fun <get-presets>(): kotlin.collections/MutableList<dev.kord.common.entity/AutoModerationRuleKeywordPresetType> // dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleCreateBuilder.presets.<get-presets>|<get-presets>(){}[0]
        final fun <set-presets>(kotlin.collections/MutableList<dev.kord.common.entity/AutoModerationRuleKeywordPresetType>) // dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleCreateBuilder.presets.<set-presets>|<set-presets>(kotlin.collections.MutableList<dev.kord.common.entity.AutoModerationRuleKeywordPresetType>){}[0]

    final fun assignPresets(kotlin.collections/MutableList<dev.kord.common.entity/AutoModerationRuleKeywordPresetType>) // dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleCreateBuilder.assignPresets|assignPresets(kotlin.collections.MutableList<dev.kord.common.entity.AutoModerationRuleKeywordPresetType>){}[0]
}

final class dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleModifyBuilder : dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder, dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleBuilder { // dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleModifyBuilder.<init>|<init>(){}[0]

    final var allowedKeywords // dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleModifyBuilder.allowedKeywords|{}allowedKeywords[0]
        final fun <get-allowedKeywords>(): kotlin.collections/MutableList<kotlin/String>? // dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleModifyBuilder.allowedKeywords.<get-allowedKeywords>|<get-allowedKeywords>(){}[0]
        final fun <set-allowedKeywords>(kotlin.collections/MutableList<kotlin/String>?) // dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleModifyBuilder.allowedKeywords.<set-allowedKeywords>|<set-allowedKeywords>(kotlin.collections.MutableList<kotlin.String>?){}[0]
    final var presets // dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleModifyBuilder.presets|{}presets[0]
        final fun <get-presets>(): kotlin.collections/MutableList<dev.kord.common.entity/AutoModerationRuleKeywordPresetType>? // dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleModifyBuilder.presets.<get-presets>|<get-presets>(){}[0]
        final fun <set-presets>(kotlin.collections/MutableList<dev.kord.common.entity/AutoModerationRuleKeywordPresetType>?) // dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleModifyBuilder.presets.<set-presets>|<set-presets>(kotlin.collections.MutableList<dev.kord.common.entity.AutoModerationRuleKeywordPresetType>?){}[0]

    final fun assignPresets(kotlin.collections/MutableList<dev.kord.common.entity/AutoModerationRuleKeywordPresetType>) // dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleModifyBuilder.assignPresets|assignPresets(kotlin.collections.MutableList<dev.kord.common.entity.AutoModerationRuleKeywordPresetType>){}[0]
}

final class dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleCreateBuilder : dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder, dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleBuilder { // dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleCreateBuilder|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity/AutoModerationRuleEventType) // dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleCreateBuilder.<init>|<init>(kotlin.String;dev.kord.common.entity.AutoModerationRuleEventType){}[0]

    final var mentionLimit // dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleCreateBuilder.mentionLimit|{}mentionLimit[0]
        final fun <get-mentionLimit>(): kotlin/Int? // dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleCreateBuilder.mentionLimit.<get-mentionLimit>|<get-mentionLimit>(){}[0]
        final fun <set-mentionLimit>(kotlin/Int?) // dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleCreateBuilder.mentionLimit.<set-mentionLimit>|<set-mentionLimit>(kotlin.Int?){}[0]
    final var mentionRaidProtectionEnabled // dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleCreateBuilder.mentionRaidProtectionEnabled|{}mentionRaidProtectionEnabled[0]
        final fun <get-mentionRaidProtectionEnabled>(): kotlin/Boolean? // dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleCreateBuilder.mentionRaidProtectionEnabled.<get-mentionRaidProtectionEnabled>|<get-mentionRaidProtectionEnabled>(){}[0]
        final fun <set-mentionRaidProtectionEnabled>(kotlin/Boolean?) // dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleCreateBuilder.mentionRaidProtectionEnabled.<set-mentionRaidProtectionEnabled>|<set-mentionRaidProtectionEnabled>(kotlin.Boolean?){}[0]
}

final class dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleModifyBuilder : dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder, dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleBuilder { // dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleModifyBuilder.<init>|<init>(){}[0]

    final var mentionLimit // dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleModifyBuilder.mentionLimit|{}mentionLimit[0]
        final fun <get-mentionLimit>(): kotlin/Int? // dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleModifyBuilder.mentionLimit.<get-mentionLimit>|<get-mentionLimit>(){}[0]
        final fun <set-mentionLimit>(kotlin/Int?) // dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleModifyBuilder.mentionLimit.<set-mentionLimit>|<set-mentionLimit>(kotlin.Int?){}[0]
    final var mentionRaidProtectionEnabled // dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleModifyBuilder.mentionRaidProtectionEnabled|{}mentionRaidProtectionEnabled[0]
        final fun <get-mentionRaidProtectionEnabled>(): kotlin/Boolean? // dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleModifyBuilder.mentionRaidProtectionEnabled.<get-mentionRaidProtectionEnabled>|<get-mentionRaidProtectionEnabled>(){}[0]
        final fun <set-mentionRaidProtectionEnabled>(kotlin/Boolean?) // dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleModifyBuilder.mentionRaidProtectionEnabled.<set-mentionRaidProtectionEnabled>|<set-mentionRaidProtectionEnabled>(kotlin.Boolean?){}[0]
}

final class dev.kord.rest.builder.automoderation/SendAlertMessageAutoModerationActionBuilder : dev.kord.rest.builder.automoderation/AutoModerationActionBuilder { // dev.kord.rest.builder.automoderation/SendAlertMessageAutoModerationActionBuilder|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake) // dev.kord.rest.builder.automoderation/SendAlertMessageAutoModerationActionBuilder.<init>|<init>(dev.kord.common.entity.Snowflake){}[0]

    final val type // dev.kord.rest.builder.automoderation/SendAlertMessageAutoModerationActionBuilder.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/AutoModerationActionType.SendAlertMessage // dev.kord.rest.builder.automoderation/SendAlertMessageAutoModerationActionBuilder.type.<get-type>|<get-type>(){}[0]

    final var channelId // dev.kord.rest.builder.automoderation/SendAlertMessageAutoModerationActionBuilder.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.rest.builder.automoderation/SendAlertMessageAutoModerationActionBuilder.channelId.<get-channelId>|<get-channelId>(){}[0]
        final fun <set-channelId>(dev.kord.common.entity/Snowflake) // dev.kord.rest.builder.automoderation/SendAlertMessageAutoModerationActionBuilder.channelId.<set-channelId>|<set-channelId>(dev.kord.common.entity.Snowflake){}[0]
}

final class dev.kord.rest.builder.automoderation/SpamAutoModerationRuleCreateBuilder : dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder, dev.kord.rest.builder.automoderation/SpamAutoModerationRuleBuilder { // dev.kord.rest.builder.automoderation/SpamAutoModerationRuleCreateBuilder|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity/AutoModerationRuleEventType) // dev.kord.rest.builder.automoderation/SpamAutoModerationRuleCreateBuilder.<init>|<init>(kotlin.String;dev.kord.common.entity.AutoModerationRuleEventType){}[0]
}

final class dev.kord.rest.builder.automoderation/SpamAutoModerationRuleModifyBuilder : dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder, dev.kord.rest.builder.automoderation/SpamAutoModerationRuleBuilder { // dev.kord.rest.builder.automoderation/SpamAutoModerationRuleModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.automoderation/SpamAutoModerationRuleModifyBuilder.<init>|<init>(){}[0]
}

final class dev.kord.rest.builder.automoderation/TimeoutAutoModerationActionBuilder : dev.kord.rest.builder.automoderation/AutoModerationActionBuilder { // dev.kord.rest.builder.automoderation/TimeoutAutoModerationActionBuilder|null[0]
    constructor <init>(kotlin.time/Duration) // dev.kord.rest.builder.automoderation/TimeoutAutoModerationActionBuilder.<init>|<init>(kotlin.time.Duration){}[0]

    final val type // dev.kord.rest.builder.automoderation/TimeoutAutoModerationActionBuilder.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/AutoModerationActionType.Timeout // dev.kord.rest.builder.automoderation/TimeoutAutoModerationActionBuilder.type.<get-type>|<get-type>(){}[0]

    final var duration // dev.kord.rest.builder.automoderation/TimeoutAutoModerationActionBuilder.duration|{}duration[0]
        final fun <get-duration>(): kotlin.time/Duration // dev.kord.rest.builder.automoderation/TimeoutAutoModerationActionBuilder.duration.<get-duration>|<get-duration>(){}[0]
        final fun <set-duration>(kotlin.time/Duration) // dev.kord.rest.builder.automoderation/TimeoutAutoModerationActionBuilder.duration.<set-duration>|<set-duration>(kotlin.time.Duration){}[0]
}

final class dev.kord.rest.builder.automoderation/UntypedAutoModerationRuleModifyBuilder : dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder { // dev.kord.rest.builder.automoderation/UntypedAutoModerationRuleModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.automoderation/UntypedAutoModerationRuleModifyBuilder.<init>|<init>(){}[0]

    final val triggerType // dev.kord.rest.builder.automoderation/UntypedAutoModerationRuleModifyBuilder.triggerType|{}triggerType[0]
        final fun <get-triggerType>(): kotlin/Nothing? // dev.kord.rest.builder.automoderation/UntypedAutoModerationRuleModifyBuilder.triggerType.<get-triggerType>|<get-triggerType>(){}[0]
}

final class dev.kord.rest.builder.ban/BanCreateBuilder : dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/GuildBanCreateRequest> { // dev.kord.rest.builder.ban/BanCreateBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.ban/BanCreateBuilder.<init>|<init>(){}[0]

    final var deleteMessageDuration // dev.kord.rest.builder.ban/BanCreateBuilder.deleteMessageDuration|{}deleteMessageDuration[0]
        final fun <get-deleteMessageDuration>(): kotlin.time/Duration? // dev.kord.rest.builder.ban/BanCreateBuilder.deleteMessageDuration.<get-deleteMessageDuration>|<get-deleteMessageDuration>(){}[0]
        final fun <set-deleteMessageDuration>(kotlin.time/Duration?) // dev.kord.rest.builder.ban/BanCreateBuilder.deleteMessageDuration.<set-deleteMessageDuration>|<set-deleteMessageDuration>(kotlin.time.Duration?){}[0]
    final var reason // dev.kord.rest.builder.ban/BanCreateBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.ban/BanCreateBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.ban/BanCreateBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/GuildBanCreateRequest // dev.kord.rest.builder.ban/BanCreateBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.channel.thread/StartForumThreadBuilder : dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/MultipartStartThreadRequest> { // dev.kord.rest.builder.channel.thread/StartForumThreadBuilder|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.builder.channel.thread/StartForumThreadBuilder.<init>|<init>(kotlin.String){}[0]

    final var appliedTags // dev.kord.rest.builder.channel.thread/StartForumThreadBuilder.appliedTags|{}appliedTags[0]
        final fun <get-appliedTags>(): kotlin.collections/MutableList<dev.kord.common.entity/Snowflake>? // dev.kord.rest.builder.channel.thread/StartForumThreadBuilder.appliedTags.<get-appliedTags>|<get-appliedTags>(){}[0]
        final fun <set-appliedTags>(kotlin.collections/MutableList<dev.kord.common.entity/Snowflake>?) // dev.kord.rest.builder.channel.thread/StartForumThreadBuilder.appliedTags.<set-appliedTags>|<set-appliedTags>(kotlin.collections.MutableList<dev.kord.common.entity.Snowflake>?){}[0]
    final var autoArchiveDuration // dev.kord.rest.builder.channel.thread/StartForumThreadBuilder.autoArchiveDuration|{}autoArchiveDuration[0]
        final fun <get-autoArchiveDuration>(): dev.kord.common.entity/ArchiveDuration? // dev.kord.rest.builder.channel.thread/StartForumThreadBuilder.autoArchiveDuration.<get-autoArchiveDuration>|<get-autoArchiveDuration>(){}[0]
        final fun <set-autoArchiveDuration>(dev.kord.common.entity/ArchiveDuration?) // dev.kord.rest.builder.channel.thread/StartForumThreadBuilder.autoArchiveDuration.<set-autoArchiveDuration>|<set-autoArchiveDuration>(dev.kord.common.entity.ArchiveDuration?){}[0]
    final var message // dev.kord.rest.builder.channel.thread/StartForumThreadBuilder.message|{}message[0]
        final fun <get-message>(): dev.kord.rest.builder.message.create/ForumMessageCreateBuilder // dev.kord.rest.builder.channel.thread/StartForumThreadBuilder.message.<get-message>|<get-message>(){}[0]
        final fun <set-message>(dev.kord.rest.builder.message.create/ForumMessageCreateBuilder) // dev.kord.rest.builder.channel.thread/StartForumThreadBuilder.message.<set-message>|<set-message>(dev.kord.rest.builder.message.create.ForumMessageCreateBuilder){}[0]
    final var name // dev.kord.rest.builder.channel.thread/StartForumThreadBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.builder.channel.thread/StartForumThreadBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // dev.kord.rest.builder.channel.thread/StartForumThreadBuilder.name.<set-name>|<set-name>(kotlin.String){}[0]
    final var rateLimitPerUser // dev.kord.rest.builder.channel.thread/StartForumThreadBuilder.rateLimitPerUser|{}rateLimitPerUser[0]
        final fun <get-rateLimitPerUser>(): kotlin.time/Duration? // dev.kord.rest.builder.channel.thread/StartForumThreadBuilder.rateLimitPerUser.<get-rateLimitPerUser>|<get-rateLimitPerUser>(){}[0]
        final fun <set-rateLimitPerUser>(kotlin.time/Duration?) // dev.kord.rest.builder.channel.thread/StartForumThreadBuilder.rateLimitPerUser.<set-rateLimitPerUser>|<set-rateLimitPerUser>(kotlin.time.Duration?){}[0]
    final var reason // dev.kord.rest.builder.channel.thread/StartForumThreadBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.channel.thread/StartForumThreadBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.channel.thread/StartForumThreadBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]

    final fun message(kotlin/String) // dev.kord.rest.builder.channel.thread/StartForumThreadBuilder.message|message(kotlin.String){}[0]
    final fun toRequest(): dev.kord.rest.json.request/MultipartStartThreadRequest // dev.kord.rest.builder.channel.thread/StartForumThreadBuilder.toRequest|toRequest(){}[0]
    final inline fun message(kotlin/Function1<dev.kord.rest.builder.message.create/ForumMessageCreateBuilder, kotlin/Unit>) // dev.kord.rest.builder.channel.thread/StartForumThreadBuilder.message|message(kotlin.Function1<dev.kord.rest.builder.message.create.ForumMessageCreateBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.rest.builder.channel.thread/StartThreadBuilder : dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/StartThreadRequest> { // dev.kord.rest.builder.channel.thread/StartThreadBuilder|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity/ChannelType) // dev.kord.rest.builder.channel.thread/StartThreadBuilder.<init>|<init>(kotlin.String;dev.kord.common.entity.ChannelType){}[0]

    final val type // dev.kord.rest.builder.channel.thread/StartThreadBuilder.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ChannelType // dev.kord.rest.builder.channel.thread/StartThreadBuilder.type.<get-type>|<get-type>(){}[0]

    final var autoArchiveDuration // dev.kord.rest.builder.channel.thread/StartThreadBuilder.autoArchiveDuration|{}autoArchiveDuration[0]
        final fun <get-autoArchiveDuration>(): dev.kord.common.entity/ArchiveDuration? // dev.kord.rest.builder.channel.thread/StartThreadBuilder.autoArchiveDuration.<get-autoArchiveDuration>|<get-autoArchiveDuration>(){}[0]
        final fun <set-autoArchiveDuration>(dev.kord.common.entity/ArchiveDuration?) // dev.kord.rest.builder.channel.thread/StartThreadBuilder.autoArchiveDuration.<set-autoArchiveDuration>|<set-autoArchiveDuration>(dev.kord.common.entity.ArchiveDuration?){}[0]
    final var invitable // dev.kord.rest.builder.channel.thread/StartThreadBuilder.invitable|{}invitable[0]
        final fun <get-invitable>(): kotlin/Boolean? // dev.kord.rest.builder.channel.thread/StartThreadBuilder.invitable.<get-invitable>|<get-invitable>(){}[0]
        final fun <set-invitable>(kotlin/Boolean?) // dev.kord.rest.builder.channel.thread/StartThreadBuilder.invitable.<set-invitable>|<set-invitable>(kotlin.Boolean?){}[0]
    final var name // dev.kord.rest.builder.channel.thread/StartThreadBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.builder.channel.thread/StartThreadBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // dev.kord.rest.builder.channel.thread/StartThreadBuilder.name.<set-name>|<set-name>(kotlin.String){}[0]
    final var rateLimitPerUser // dev.kord.rest.builder.channel.thread/StartThreadBuilder.rateLimitPerUser|{}rateLimitPerUser[0]
        final fun <get-rateLimitPerUser>(): kotlin.time/Duration? // dev.kord.rest.builder.channel.thread/StartThreadBuilder.rateLimitPerUser.<get-rateLimitPerUser>|<get-rateLimitPerUser>(){}[0]
        final fun <set-rateLimitPerUser>(kotlin.time/Duration?) // dev.kord.rest.builder.channel.thread/StartThreadBuilder.rateLimitPerUser.<set-rateLimitPerUser>|<set-rateLimitPerUser>(kotlin.time.Duration?){}[0]
    final var reason // dev.kord.rest.builder.channel.thread/StartThreadBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.channel.thread/StartThreadBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.channel.thread/StartThreadBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/StartThreadRequest // dev.kord.rest.builder.channel.thread/StartThreadBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.channel.thread/StartThreadWithMessageBuilder : dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/StartThreadRequest> { // dev.kord.rest.builder.channel.thread/StartThreadWithMessageBuilder|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.builder.channel.thread/StartThreadWithMessageBuilder.<init>|<init>(kotlin.String){}[0]

    final var autoArchiveDuration // dev.kord.rest.builder.channel.thread/StartThreadWithMessageBuilder.autoArchiveDuration|{}autoArchiveDuration[0]
        final fun <get-autoArchiveDuration>(): dev.kord.common.entity/ArchiveDuration? // dev.kord.rest.builder.channel.thread/StartThreadWithMessageBuilder.autoArchiveDuration.<get-autoArchiveDuration>|<get-autoArchiveDuration>(){}[0]
        final fun <set-autoArchiveDuration>(dev.kord.common.entity/ArchiveDuration?) // dev.kord.rest.builder.channel.thread/StartThreadWithMessageBuilder.autoArchiveDuration.<set-autoArchiveDuration>|<set-autoArchiveDuration>(dev.kord.common.entity.ArchiveDuration?){}[0]
    final var name // dev.kord.rest.builder.channel.thread/StartThreadWithMessageBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.builder.channel.thread/StartThreadWithMessageBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // dev.kord.rest.builder.channel.thread/StartThreadWithMessageBuilder.name.<set-name>|<set-name>(kotlin.String){}[0]
    final var rateLimitPerUser // dev.kord.rest.builder.channel.thread/StartThreadWithMessageBuilder.rateLimitPerUser|{}rateLimitPerUser[0]
        final fun <get-rateLimitPerUser>(): kotlin.time/Duration? // dev.kord.rest.builder.channel.thread/StartThreadWithMessageBuilder.rateLimitPerUser.<get-rateLimitPerUser>|<get-rateLimitPerUser>(){}[0]
        final fun <set-rateLimitPerUser>(kotlin.time/Duration?) // dev.kord.rest.builder.channel.thread/StartThreadWithMessageBuilder.rateLimitPerUser.<set-rateLimitPerUser>|<set-rateLimitPerUser>(kotlin.time.Duration?){}[0]
    final var reason // dev.kord.rest.builder.channel.thread/StartThreadWithMessageBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.channel.thread/StartThreadWithMessageBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.channel.thread/StartThreadWithMessageBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/StartThreadRequest // dev.kord.rest.builder.channel.thread/StartThreadWithMessageBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.channel.thread/ThreadModifyBuilder : dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/ChannelModifyPatchRequest> { // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.<init>|<init>(){}[0]

    final var appliedTags // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.appliedTags|{}appliedTags[0]
        final fun <get-appliedTags>(): kotlin.collections/MutableList<dev.kord.common.entity/Snowflake>? // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.appliedTags.<get-appliedTags>|<get-appliedTags>(){}[0]
        final fun <set-appliedTags>(kotlin.collections/MutableList<dev.kord.common.entity/Snowflake>?) // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.appliedTags.<set-appliedTags>|<set-appliedTags>(kotlin.collections.MutableList<dev.kord.common.entity.Snowflake>?){}[0]
    final var archived // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.archived|{}archived[0]
        final fun <get-archived>(): kotlin/Boolean? // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.archived.<get-archived>|<get-archived>(){}[0]
        final fun <set-archived>(kotlin/Boolean?) // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.archived.<set-archived>|<set-archived>(kotlin.Boolean?){}[0]
    final var autoArchiveDuration // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.autoArchiveDuration|{}autoArchiveDuration[0]
        final fun <get-autoArchiveDuration>(): dev.kord.common.entity/ArchiveDuration? // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.autoArchiveDuration.<get-autoArchiveDuration>|<get-autoArchiveDuration>(){}[0]
        final fun <set-autoArchiveDuration>(dev.kord.common.entity/ArchiveDuration?) // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.autoArchiveDuration.<set-autoArchiveDuration>|<set-autoArchiveDuration>(dev.kord.common.entity.ArchiveDuration?){}[0]
    final var flags // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity/ChannelFlags? // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.flags.<get-flags>|<get-flags>(){}[0]
        final fun <set-flags>(dev.kord.common.entity/ChannelFlags?) // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.flags.<set-flags>|<set-flags>(dev.kord.common.entity.ChannelFlags?){}[0]
    final var invitable // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.invitable|{}invitable[0]
        final fun <get-invitable>(): kotlin/Boolean? // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.invitable.<get-invitable>|<get-invitable>(){}[0]
        final fun <set-invitable>(kotlin/Boolean?) // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.invitable.<set-invitable>|<set-invitable>(kotlin.Boolean?){}[0]
    final var locked // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.locked|{}locked[0]
        final fun <get-locked>(): kotlin/Boolean? // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.locked.<get-locked>|<get-locked>(){}[0]
        final fun <set-locked>(kotlin/Boolean?) // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.locked.<set-locked>|<set-locked>(kotlin.Boolean?){}[0]
    final var name // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String?) // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.name.<set-name>|<set-name>(kotlin.String?){}[0]
    final var rateLimitPerUser // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.rateLimitPerUser|{}rateLimitPerUser[0]
        final fun <get-rateLimitPerUser>(): kotlin.time/Duration? // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.rateLimitPerUser.<get-rateLimitPerUser>|<get-rateLimitPerUser>(){}[0]
        final fun <set-rateLimitPerUser>(kotlin.time/Duration?) // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.rateLimitPerUser.<set-rateLimitPerUser>|<set-rateLimitPerUser>(kotlin.time.Duration?){}[0]
    final var reason // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/ChannelModifyPatchRequest // dev.kord.rest.builder.channel.thread/ThreadModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.channel/CategoryCreateBuilder : dev.kord.rest.builder.channel/PermissionOverwritesCreateBuilder, dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/GuildChannelCreateRequest> { // dev.kord.rest.builder.channel/CategoryCreateBuilder|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.builder.channel/CategoryCreateBuilder.<init>|<init>(kotlin.String){}[0]

    final var name // dev.kord.rest.builder.channel/CategoryCreateBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.builder.channel/CategoryCreateBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // dev.kord.rest.builder.channel/CategoryCreateBuilder.name.<set-name>|<set-name>(kotlin.String){}[0]
    final var nsfw // dev.kord.rest.builder.channel/CategoryCreateBuilder.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): kotlin/Boolean? // dev.kord.rest.builder.channel/CategoryCreateBuilder.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
        final fun <set-nsfw>(kotlin/Boolean?) // dev.kord.rest.builder.channel/CategoryCreateBuilder.nsfw.<set-nsfw>|<set-nsfw>(kotlin.Boolean?){}[0]
    final var permissionOverwrites // dev.kord.rest.builder.channel/CategoryCreateBuilder.permissionOverwrites|{}permissionOverwrites[0]
        final fun <get-permissionOverwrites>(): kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite> // dev.kord.rest.builder.channel/CategoryCreateBuilder.permissionOverwrites.<get-permissionOverwrites>|<get-permissionOverwrites>(){}[0]
        final fun <set-permissionOverwrites>(kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite>) // dev.kord.rest.builder.channel/CategoryCreateBuilder.permissionOverwrites.<set-permissionOverwrites>|<set-permissionOverwrites>(kotlin.collections.MutableSet<dev.kord.common.entity.Overwrite>){}[0]
    final var position // dev.kord.rest.builder.channel/CategoryCreateBuilder.position|{}position[0]
        final fun <get-position>(): kotlin/Int? // dev.kord.rest.builder.channel/CategoryCreateBuilder.position.<get-position>|<get-position>(){}[0]
        final fun <set-position>(kotlin/Int?) // dev.kord.rest.builder.channel/CategoryCreateBuilder.position.<set-position>|<set-position>(kotlin.Int?){}[0]
    final var reason // dev.kord.rest.builder.channel/CategoryCreateBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.channel/CategoryCreateBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.channel/CategoryCreateBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/GuildChannelCreateRequest // dev.kord.rest.builder.channel/CategoryCreateBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.channel/CategoryModifyBuilder : dev.kord.rest.builder.channel/PermissionOverwritesModifyBuilder, dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/ChannelModifyPatchRequest> { // dev.kord.rest.builder.channel/CategoryModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.channel/CategoryModifyBuilder.<init>|<init>(){}[0]

    final var name // dev.kord.rest.builder.channel/CategoryModifyBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.rest.builder.channel/CategoryModifyBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String?) // dev.kord.rest.builder.channel/CategoryModifyBuilder.name.<set-name>|<set-name>(kotlin.String?){}[0]
    final var permissionOverwrites // dev.kord.rest.builder.channel/CategoryModifyBuilder.permissionOverwrites|{}permissionOverwrites[0]
        final fun <get-permissionOverwrites>(): kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite>? // dev.kord.rest.builder.channel/CategoryModifyBuilder.permissionOverwrites.<get-permissionOverwrites>|<get-permissionOverwrites>(){}[0]
        final fun <set-permissionOverwrites>(kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite>?) // dev.kord.rest.builder.channel/CategoryModifyBuilder.permissionOverwrites.<set-permissionOverwrites>|<set-permissionOverwrites>(kotlin.collections.MutableSet<dev.kord.common.entity.Overwrite>?){}[0]
    final var position // dev.kord.rest.builder.channel/CategoryModifyBuilder.position|{}position[0]
        final fun <get-position>(): kotlin/Int? // dev.kord.rest.builder.channel/CategoryModifyBuilder.position.<get-position>|<get-position>(){}[0]
        final fun <set-position>(kotlin/Int?) // dev.kord.rest.builder.channel/CategoryModifyBuilder.position.<set-position>|<set-position>(kotlin.Int?){}[0]
    final var reason // dev.kord.rest.builder.channel/CategoryModifyBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.channel/CategoryModifyBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.channel/CategoryModifyBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/ChannelModifyPatchRequest // dev.kord.rest.builder.channel/CategoryModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.channel/ChannelPermissionModifyBuilder : dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/ChannelPermissionEditRequest> { // dev.kord.rest.builder.channel/ChannelPermissionModifyBuilder|null[0]
    constructor <init>(dev.kord.common.entity/OverwriteType) // dev.kord.rest.builder.channel/ChannelPermissionModifyBuilder.<init>|<init>(dev.kord.common.entity.OverwriteType){}[0]

    final var allowed // dev.kord.rest.builder.channel/ChannelPermissionModifyBuilder.allowed|{}allowed[0]
        final fun <get-allowed>(): dev.kord.common.entity/Permissions // dev.kord.rest.builder.channel/ChannelPermissionModifyBuilder.allowed.<get-allowed>|<get-allowed>(){}[0]
        final fun <set-allowed>(dev.kord.common.entity/Permissions) // dev.kord.rest.builder.channel/ChannelPermissionModifyBuilder.allowed.<set-allowed>|<set-allowed>(dev.kord.common.entity.Permissions){}[0]
    final var denied // dev.kord.rest.builder.channel/ChannelPermissionModifyBuilder.denied|{}denied[0]
        final fun <get-denied>(): dev.kord.common.entity/Permissions // dev.kord.rest.builder.channel/ChannelPermissionModifyBuilder.denied.<get-denied>|<get-denied>(){}[0]
        final fun <set-denied>(dev.kord.common.entity/Permissions) // dev.kord.rest.builder.channel/ChannelPermissionModifyBuilder.denied.<set-denied>|<set-denied>(dev.kord.common.entity.Permissions){}[0]
    final var reason // dev.kord.rest.builder.channel/ChannelPermissionModifyBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.channel/ChannelPermissionModifyBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.channel/ChannelPermissionModifyBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/ChannelPermissionEditRequest // dev.kord.rest.builder.channel/ChannelPermissionModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.channel/ForumChannelCreateBuilder : dev.kord.rest.builder.channel/PermissionOverwritesCreateBuilder, dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/GuildChannelCreateRequest> { // dev.kord.rest.builder.channel/ForumChannelCreateBuilder|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.<init>|<init>(kotlin.String){}[0]

    final var availableTags // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.availableTags|{}availableTags[0]
        final fun <get-availableTags>(): kotlin.collections/MutableList<dev.kord.rest.json.request/ForumTagRequest>? // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.availableTags.<get-availableTags>|<get-availableTags>(){}[0]
        final fun <set-availableTags>(kotlin.collections/MutableList<dev.kord.rest.json.request/ForumTagRequest>?) // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.availableTags.<set-availableTags>|<set-availableTags>(kotlin.collections.MutableList<dev.kord.rest.json.request.ForumTagRequest>?){}[0]
    final var defaultAutoArchiveDuration // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.defaultAutoArchiveDuration|{}defaultAutoArchiveDuration[0]
        final fun <get-defaultAutoArchiveDuration>(): dev.kord.common.entity/ArchiveDuration? // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.defaultAutoArchiveDuration.<get-defaultAutoArchiveDuration>|<get-defaultAutoArchiveDuration>(){}[0]
        final fun <set-defaultAutoArchiveDuration>(dev.kord.common.entity/ArchiveDuration?) // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.defaultAutoArchiveDuration.<set-defaultAutoArchiveDuration>|<set-defaultAutoArchiveDuration>(dev.kord.common.entity.ArchiveDuration?){}[0]
    final var defaultForumLayout // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.defaultForumLayout|{}defaultForumLayout[0]
        final fun <get-defaultForumLayout>(): dev.kord.common.entity/ForumLayoutType? // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.defaultForumLayout.<get-defaultForumLayout>|<get-defaultForumLayout>(){}[0]
        final fun <set-defaultForumLayout>(dev.kord.common.entity/ForumLayoutType?) // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.defaultForumLayout.<set-defaultForumLayout>|<set-defaultForumLayout>(dev.kord.common.entity.ForumLayoutType?){}[0]
    final var defaultReactionEmoji // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.defaultReactionEmoji|{}defaultReactionEmoji[0]
        final fun <get-defaultReactionEmoji>(): dev.kord.common.entity/DefaultReaction? // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.defaultReactionEmoji.<get-defaultReactionEmoji>|<get-defaultReactionEmoji>(){}[0]
        final fun <set-defaultReactionEmoji>(dev.kord.common.entity/DefaultReaction?) // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.defaultReactionEmoji.<set-defaultReactionEmoji>|<set-defaultReactionEmoji>(dev.kord.common.entity.DefaultReaction?){}[0]
    final var defaultReactionEmojiId // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.defaultReactionEmojiId|{}defaultReactionEmojiId[0]
        final fun <get-defaultReactionEmojiId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.defaultReactionEmojiId.<get-defaultReactionEmojiId>|<get-defaultReactionEmojiId>(){}[0]
        final fun <set-defaultReactionEmojiId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.defaultReactionEmojiId.<set-defaultReactionEmojiId>|<set-defaultReactionEmojiId>(dev.kord.common.entity.Snowflake?){}[0]
    final var defaultReactionEmojiName // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.defaultReactionEmojiName|{}defaultReactionEmojiName[0]
        final fun <get-defaultReactionEmojiName>(): kotlin/String? // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.defaultReactionEmojiName.<get-defaultReactionEmojiName>|<get-defaultReactionEmojiName>(){}[0]
        final fun <set-defaultReactionEmojiName>(kotlin/String?) // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.defaultReactionEmojiName.<set-defaultReactionEmojiName>|<set-defaultReactionEmojiName>(kotlin.String?){}[0]
    final var defaultSortOrder // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.defaultSortOrder|{}defaultSortOrder[0]
        final fun <get-defaultSortOrder>(): dev.kord.common.entity/SortOrderType? // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.defaultSortOrder.<get-defaultSortOrder>|<get-defaultSortOrder>(){}[0]
        final fun <set-defaultSortOrder>(dev.kord.common.entity/SortOrderType?) // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.defaultSortOrder.<set-defaultSortOrder>|<set-defaultSortOrder>(dev.kord.common.entity.SortOrderType?){}[0]
    final var defaultThreadRateLimitPerUser // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.defaultThreadRateLimitPerUser|{}defaultThreadRateLimitPerUser[0]
        final fun <get-defaultThreadRateLimitPerUser>(): kotlin.time/Duration? // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.defaultThreadRateLimitPerUser.<get-defaultThreadRateLimitPerUser>|<get-defaultThreadRateLimitPerUser>(){}[0]
        final fun <set-defaultThreadRateLimitPerUser>(kotlin.time/Duration?) // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.defaultThreadRateLimitPerUser.<set-defaultThreadRateLimitPerUser>|<set-defaultThreadRateLimitPerUser>(kotlin.time.Duration?){}[0]
    final var flags // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity/ChannelFlags? // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.flags.<get-flags>|<get-flags>(){}[0]
        final fun <set-flags>(dev.kord.common.entity/ChannelFlags?) // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.flags.<set-flags>|<set-flags>(dev.kord.common.entity.ChannelFlags?){}[0]
    final var name // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.name.<set-name>|<set-name>(kotlin.String){}[0]
    final var nsfw // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): kotlin/Boolean? // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
        final fun <set-nsfw>(kotlin/Boolean?) // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.nsfw.<set-nsfw>|<set-nsfw>(kotlin.Boolean?){}[0]
    final var parentId // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.parentId|{}parentId[0]
        final fun <get-parentId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.parentId.<get-parentId>|<get-parentId>(){}[0]
        final fun <set-parentId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.parentId.<set-parentId>|<set-parentId>(dev.kord.common.entity.Snowflake?){}[0]
    final var permissionOverwrites // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.permissionOverwrites|{}permissionOverwrites[0]
        final fun <get-permissionOverwrites>(): kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite> // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.permissionOverwrites.<get-permissionOverwrites>|<get-permissionOverwrites>(){}[0]
        final fun <set-permissionOverwrites>(kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite>) // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.permissionOverwrites.<set-permissionOverwrites>|<set-permissionOverwrites>(kotlin.collections.MutableSet<dev.kord.common.entity.Overwrite>){}[0]
    final var position // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.position|{}position[0]
        final fun <get-position>(): kotlin/Int? // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.position.<get-position>|<get-position>(){}[0]
        final fun <set-position>(kotlin/Int?) // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.position.<set-position>|<set-position>(kotlin.Int?){}[0]
    final var rateLimitPerUser // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.rateLimitPerUser|{}rateLimitPerUser[0]
        final fun <get-rateLimitPerUser>(): kotlin.time/Duration? // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.rateLimitPerUser.<get-rateLimitPerUser>|<get-rateLimitPerUser>(){}[0]
        final fun <set-rateLimitPerUser>(kotlin.time/Duration?) // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.rateLimitPerUser.<set-rateLimitPerUser>|<set-rateLimitPerUser>(kotlin.time.Duration?){}[0]
    final var reason // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]
    final var topic // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.topic|{}topic[0]
        final fun <get-topic>(): kotlin/String? // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.topic.<get-topic>|<get-topic>(){}[0]
        final fun <set-topic>(kotlin/String?) // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.topic.<set-topic>|<set-topic>(kotlin.String?){}[0]

    final fun tag(kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel/ForumTagBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.tag|tag(kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.ForumTagBuilder,kotlin.Unit>){}[0]
    final fun toRequest(): dev.kord.rest.json.request/GuildChannelCreateRequest // dev.kord.rest.builder.channel/ForumChannelCreateBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.channel/ForumChannelModifyBuilder : dev.kord.rest.builder.channel/PermissionOverwritesModifyBuilder, dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/ChannelModifyPatchRequest> { // dev.kord.rest.builder.channel/ForumChannelModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.<init>|<init>(){}[0]

    final var availableTags // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.availableTags|{}availableTags[0]
        final fun <get-availableTags>(): kotlin.collections/MutableList<dev.kord.rest.json.request/ForumTagRequest>? // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.availableTags.<get-availableTags>|<get-availableTags>(){}[0]
        final fun <set-availableTags>(kotlin.collections/MutableList<dev.kord.rest.json.request/ForumTagRequest>?) // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.availableTags.<set-availableTags>|<set-availableTags>(kotlin.collections.MutableList<dev.kord.rest.json.request.ForumTagRequest>?){}[0]
    final var defaultAutoArchiveDuration // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.defaultAutoArchiveDuration|{}defaultAutoArchiveDuration[0]
        final fun <get-defaultAutoArchiveDuration>(): dev.kord.common.entity/ArchiveDuration? // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.defaultAutoArchiveDuration.<get-defaultAutoArchiveDuration>|<get-defaultAutoArchiveDuration>(){}[0]
        final fun <set-defaultAutoArchiveDuration>(dev.kord.common.entity/ArchiveDuration?) // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.defaultAutoArchiveDuration.<set-defaultAutoArchiveDuration>|<set-defaultAutoArchiveDuration>(dev.kord.common.entity.ArchiveDuration?){}[0]
    final var defaultForumLayout // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.defaultForumLayout|{}defaultForumLayout[0]
        final fun <get-defaultForumLayout>(): dev.kord.common.entity/ForumLayoutType? // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.defaultForumLayout.<get-defaultForumLayout>|<get-defaultForumLayout>(){}[0]
        final fun <set-defaultForumLayout>(dev.kord.common.entity/ForumLayoutType?) // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.defaultForumLayout.<set-defaultForumLayout>|<set-defaultForumLayout>(dev.kord.common.entity.ForumLayoutType?){}[0]
    final var defaultReactionEmoji // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.defaultReactionEmoji|{}defaultReactionEmoji[0]
        final fun <get-defaultReactionEmoji>(): dev.kord.common.entity/DefaultReaction? // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.defaultReactionEmoji.<get-defaultReactionEmoji>|<get-defaultReactionEmoji>(){}[0]
        final fun <set-defaultReactionEmoji>(dev.kord.common.entity/DefaultReaction?) // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.defaultReactionEmoji.<set-defaultReactionEmoji>|<set-defaultReactionEmoji>(dev.kord.common.entity.DefaultReaction?){}[0]
    final var defaultReactionEmojiId // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.defaultReactionEmojiId|{}defaultReactionEmojiId[0]
        final fun <get-defaultReactionEmojiId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.defaultReactionEmojiId.<get-defaultReactionEmojiId>|<get-defaultReactionEmojiId>(){}[0]
        final fun <set-defaultReactionEmojiId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.defaultReactionEmojiId.<set-defaultReactionEmojiId>|<set-defaultReactionEmojiId>(dev.kord.common.entity.Snowflake?){}[0]
    final var defaultReactionEmojiName // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.defaultReactionEmojiName|{}defaultReactionEmojiName[0]
        final fun <get-defaultReactionEmojiName>(): kotlin/String? // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.defaultReactionEmojiName.<get-defaultReactionEmojiName>|<get-defaultReactionEmojiName>(){}[0]
        final fun <set-defaultReactionEmojiName>(kotlin/String?) // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.defaultReactionEmojiName.<set-defaultReactionEmojiName>|<set-defaultReactionEmojiName>(kotlin.String?){}[0]
    final var defaultSortOrder // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.defaultSortOrder|{}defaultSortOrder[0]
        final fun <get-defaultSortOrder>(): dev.kord.common.entity/SortOrderType? // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.defaultSortOrder.<get-defaultSortOrder>|<get-defaultSortOrder>(){}[0]
        final fun <set-defaultSortOrder>(dev.kord.common.entity/SortOrderType?) // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.defaultSortOrder.<set-defaultSortOrder>|<set-defaultSortOrder>(dev.kord.common.entity.SortOrderType?){}[0]
    final var defaultThreadRateLimitPerUser // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.defaultThreadRateLimitPerUser|{}defaultThreadRateLimitPerUser[0]
        final fun <get-defaultThreadRateLimitPerUser>(): kotlin.time/Duration? // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.defaultThreadRateLimitPerUser.<get-defaultThreadRateLimitPerUser>|<get-defaultThreadRateLimitPerUser>(){}[0]
        final fun <set-defaultThreadRateLimitPerUser>(kotlin.time/Duration?) // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.defaultThreadRateLimitPerUser.<set-defaultThreadRateLimitPerUser>|<set-defaultThreadRateLimitPerUser>(kotlin.time.Duration?){}[0]
    final var flags // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity/ChannelFlags? // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.flags.<get-flags>|<get-flags>(){}[0]
        final fun <set-flags>(dev.kord.common.entity/ChannelFlags?) // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.flags.<set-flags>|<set-flags>(dev.kord.common.entity.ChannelFlags?){}[0]
    final var name // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String?) // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.name.<set-name>|<set-name>(kotlin.String?){}[0]
    final var nsfw // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): kotlin/Boolean? // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
        final fun <set-nsfw>(kotlin/Boolean?) // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.nsfw.<set-nsfw>|<set-nsfw>(kotlin.Boolean?){}[0]
    final var parentId // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.parentId|{}parentId[0]
        final fun <get-parentId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.parentId.<get-parentId>|<get-parentId>(){}[0]
        final fun <set-parentId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.parentId.<set-parentId>|<set-parentId>(dev.kord.common.entity.Snowflake?){}[0]
    final var permissionOverwrites // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.permissionOverwrites|{}permissionOverwrites[0]
        final fun <get-permissionOverwrites>(): kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite>? // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.permissionOverwrites.<get-permissionOverwrites>|<get-permissionOverwrites>(){}[0]
        final fun <set-permissionOverwrites>(kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite>?) // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.permissionOverwrites.<set-permissionOverwrites>|<set-permissionOverwrites>(kotlin.collections.MutableSet<dev.kord.common.entity.Overwrite>?){}[0]
    final var position // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.position|{}position[0]
        final fun <get-position>(): kotlin/Int? // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.position.<get-position>|<get-position>(){}[0]
        final fun <set-position>(kotlin/Int?) // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.position.<set-position>|<set-position>(kotlin.Int?){}[0]
    final var rateLimitPerUser // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.rateLimitPerUser|{}rateLimitPerUser[0]
        final fun <get-rateLimitPerUser>(): kotlin.time/Duration? // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.rateLimitPerUser.<get-rateLimitPerUser>|<get-rateLimitPerUser>(){}[0]
        final fun <set-rateLimitPerUser>(kotlin.time/Duration?) // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.rateLimitPerUser.<set-rateLimitPerUser>|<set-rateLimitPerUser>(kotlin.time.Duration?){}[0]
    final var reason // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]
    final var topic // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.topic|{}topic[0]
        final fun <get-topic>(): kotlin/String? // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.topic.<get-topic>|<get-topic>(){}[0]
        final fun <set-topic>(kotlin/String?) // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.topic.<set-topic>|<set-topic>(kotlin.String?){}[0]

    final fun tag(kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel/ForumTagBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.tag|tag(kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.ForumTagBuilder,kotlin.Unit>){}[0]
    final fun toRequest(): dev.kord.rest.json.request/ChannelModifyPatchRequest // dev.kord.rest.builder.channel/ForumChannelModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.channel/ForumTagBuilder : dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/ForumTagRequest> { // dev.kord.rest.builder.channel/ForumTagBuilder|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.builder.channel/ForumTagBuilder.<init>|<init>(kotlin.String){}[0]

    final var moderated // dev.kord.rest.builder.channel/ForumTagBuilder.moderated|{}moderated[0]
        final fun <get-moderated>(): kotlin/Boolean? // dev.kord.rest.builder.channel/ForumTagBuilder.moderated.<get-moderated>|<get-moderated>(){}[0]
        final fun <set-moderated>(kotlin/Boolean?) // dev.kord.rest.builder.channel/ForumTagBuilder.moderated.<set-moderated>|<set-moderated>(kotlin.Boolean?){}[0]
    final var name // dev.kord.rest.builder.channel/ForumTagBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.builder.channel/ForumTagBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // dev.kord.rest.builder.channel/ForumTagBuilder.name.<set-name>|<set-name>(kotlin.String){}[0]
    final var reactionEmojiId // dev.kord.rest.builder.channel/ForumTagBuilder.reactionEmojiId|{}reactionEmojiId[0]
        final fun <get-reactionEmojiId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.channel/ForumTagBuilder.reactionEmojiId.<get-reactionEmojiId>|<get-reactionEmojiId>(){}[0]
        final fun <set-reactionEmojiId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.channel/ForumTagBuilder.reactionEmojiId.<set-reactionEmojiId>|<set-reactionEmojiId>(dev.kord.common.entity.Snowflake?){}[0]
    final var reactionEmojiName // dev.kord.rest.builder.channel/ForumTagBuilder.reactionEmojiName|{}reactionEmojiName[0]
        final fun <get-reactionEmojiName>(): kotlin/String? // dev.kord.rest.builder.channel/ForumTagBuilder.reactionEmojiName.<get-reactionEmojiName>|<get-reactionEmojiName>(){}[0]
        final fun <set-reactionEmojiName>(kotlin/String?) // dev.kord.rest.builder.channel/ForumTagBuilder.reactionEmojiName.<set-reactionEmojiName>|<set-reactionEmojiName>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/ForumTagRequest // dev.kord.rest.builder.channel/ForumTagBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.channel/GuildChannelPositionModifyBuilder : dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/GuildChannelPositionModifyRequest> { // dev.kord.rest.builder.channel/GuildChannelPositionModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.channel/GuildChannelPositionModifyBuilder.<init>|<init>(){}[0]

    final var swaps // dev.kord.rest.builder.channel/GuildChannelPositionModifyBuilder.swaps|{}swaps[0]
        final fun <get-swaps>(): kotlin.collections/MutableList<dev.kord.rest.builder.channel/GuildChannelSwapBuilder> // dev.kord.rest.builder.channel/GuildChannelPositionModifyBuilder.swaps.<get-swaps>|<get-swaps>(){}[0]
        final fun <set-swaps>(kotlin.collections/MutableList<dev.kord.rest.builder.channel/GuildChannelSwapBuilder>) // dev.kord.rest.builder.channel/GuildChannelPositionModifyBuilder.swaps.<set-swaps>|<set-swaps>(kotlin.collections.MutableList<dev.kord.rest.builder.channel.GuildChannelSwapBuilder>){}[0]

    final fun move(kotlin/Array<out kotlin/Pair<dev.kord.common.entity/Snowflake, kotlin/Int>>...) // dev.kord.rest.builder.channel/GuildChannelPositionModifyBuilder.move|move(kotlin.Array<out|kotlin.Pair<dev.kord.common.entity.Snowflake,kotlin.Int>>...){}[0]
    final fun move(kotlin/Pair<dev.kord.common.entity/Snowflake, kotlin/Int>) // dev.kord.rest.builder.channel/GuildChannelPositionModifyBuilder.move|move(kotlin.Pair<dev.kord.common.entity.Snowflake,kotlin.Int>){}[0]
    final fun toRequest(): dev.kord.rest.json.request/GuildChannelPositionModifyRequest // dev.kord.rest.builder.channel/GuildChannelPositionModifyBuilder.toRequest|toRequest(){}[0]
    final inline fun move(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.channel/GuildChannelSwapBuilder, kotlin/Unit>) // dev.kord.rest.builder.channel/GuildChannelPositionModifyBuilder.move|move(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.channel.GuildChannelSwapBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.rest.builder.channel/GuildChannelSwapBuilder { // dev.kord.rest.builder.channel/GuildChannelSwapBuilder|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake) // dev.kord.rest.builder.channel/GuildChannelSwapBuilder.<init>|<init>(dev.kord.common.entity.Snowflake){}[0]

    final var channelId // dev.kord.rest.builder.channel/GuildChannelSwapBuilder.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.rest.builder.channel/GuildChannelSwapBuilder.channelId.<get-channelId>|<get-channelId>(){}[0]
        final fun <set-channelId>(dev.kord.common.entity/Snowflake) // dev.kord.rest.builder.channel/GuildChannelSwapBuilder.channelId.<set-channelId>|<set-channelId>(dev.kord.common.entity.Snowflake){}[0]
    final var lockPermissionsToParent // dev.kord.rest.builder.channel/GuildChannelSwapBuilder.lockPermissionsToParent|{}lockPermissionsToParent[0]
        final fun <get-lockPermissionsToParent>(): kotlin/Boolean? // dev.kord.rest.builder.channel/GuildChannelSwapBuilder.lockPermissionsToParent.<get-lockPermissionsToParent>|<get-lockPermissionsToParent>(){}[0]
        final fun <set-lockPermissionsToParent>(kotlin/Boolean?) // dev.kord.rest.builder.channel/GuildChannelSwapBuilder.lockPermissionsToParent.<set-lockPermissionsToParent>|<set-lockPermissionsToParent>(kotlin.Boolean?){}[0]
    final var parentId // dev.kord.rest.builder.channel/GuildChannelSwapBuilder.parentId|{}parentId[0]
        final fun <get-parentId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.channel/GuildChannelSwapBuilder.parentId.<get-parentId>|<get-parentId>(){}[0]
        final fun <set-parentId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.channel/GuildChannelSwapBuilder.parentId.<set-parentId>|<set-parentId>(dev.kord.common.entity.Snowflake?){}[0]
    final var position // dev.kord.rest.builder.channel/GuildChannelSwapBuilder.position|{}position[0]
        final fun <get-position>(): kotlin/Int? // dev.kord.rest.builder.channel/GuildChannelSwapBuilder.position.<get-position>|<get-position>(){}[0]
        final fun <set-position>(kotlin/Int?) // dev.kord.rest.builder.channel/GuildChannelSwapBuilder.position.<set-position>|<set-position>(kotlin.Int?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/ChannelPositionSwapRequest // dev.kord.rest.builder.channel/GuildChannelSwapBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.channel/InviteCreateBuilder : dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/InviteCreateRequest> { // dev.kord.rest.builder.channel/InviteCreateBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.channel/InviteCreateBuilder.<init>|<init>(){}[0]

    final var maxAge // dev.kord.rest.builder.channel/InviteCreateBuilder.maxAge|{}maxAge[0]
        final fun <get-maxAge>(): kotlin.time/Duration? // dev.kord.rest.builder.channel/InviteCreateBuilder.maxAge.<get-maxAge>|<get-maxAge>(){}[0]
        final fun <set-maxAge>(kotlin.time/Duration?) // dev.kord.rest.builder.channel/InviteCreateBuilder.maxAge.<set-maxAge>|<set-maxAge>(kotlin.time.Duration?){}[0]
    final var maxUses // dev.kord.rest.builder.channel/InviteCreateBuilder.maxUses|{}maxUses[0]
        final fun <get-maxUses>(): kotlin/Int? // dev.kord.rest.builder.channel/InviteCreateBuilder.maxUses.<get-maxUses>|<get-maxUses>(){}[0]
        final fun <set-maxUses>(kotlin/Int?) // dev.kord.rest.builder.channel/InviteCreateBuilder.maxUses.<set-maxUses>|<set-maxUses>(kotlin.Int?){}[0]
    final var reason // dev.kord.rest.builder.channel/InviteCreateBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.channel/InviteCreateBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.channel/InviteCreateBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]
    final var targetApplicationId // dev.kord.rest.builder.channel/InviteCreateBuilder.targetApplicationId|{}targetApplicationId[0]
        final fun <get-targetApplicationId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.channel/InviteCreateBuilder.targetApplicationId.<get-targetApplicationId>|<get-targetApplicationId>(){}[0]
        final fun <set-targetApplicationId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.channel/InviteCreateBuilder.targetApplicationId.<set-targetApplicationId>|<set-targetApplicationId>(dev.kord.common.entity.Snowflake?){}[0]
    final var targetType // dev.kord.rest.builder.channel/InviteCreateBuilder.targetType|{}targetType[0]
        final fun <get-targetType>(): dev.kord.common.entity/InviteTargetType? // dev.kord.rest.builder.channel/InviteCreateBuilder.targetType.<get-targetType>|<get-targetType>(){}[0]
        final fun <set-targetType>(dev.kord.common.entity/InviteTargetType?) // dev.kord.rest.builder.channel/InviteCreateBuilder.targetType.<set-targetType>|<set-targetType>(dev.kord.common.entity.InviteTargetType?){}[0]
    final var targetUserId // dev.kord.rest.builder.channel/InviteCreateBuilder.targetUserId|{}targetUserId[0]
        final fun <get-targetUserId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.channel/InviteCreateBuilder.targetUserId.<get-targetUserId>|<get-targetUserId>(){}[0]
        final fun <set-targetUserId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.channel/InviteCreateBuilder.targetUserId.<set-targetUserId>|<set-targetUserId>(dev.kord.common.entity.Snowflake?){}[0]
    final var temporary // dev.kord.rest.builder.channel/InviteCreateBuilder.temporary|{}temporary[0]
        final fun <get-temporary>(): kotlin/Boolean? // dev.kord.rest.builder.channel/InviteCreateBuilder.temporary.<get-temporary>|<get-temporary>(){}[0]
        final fun <set-temporary>(kotlin/Boolean?) // dev.kord.rest.builder.channel/InviteCreateBuilder.temporary.<set-temporary>|<set-temporary>(kotlin.Boolean?){}[0]
    final var unique // dev.kord.rest.builder.channel/InviteCreateBuilder.unique|{}unique[0]
        final fun <get-unique>(): kotlin/Boolean? // dev.kord.rest.builder.channel/InviteCreateBuilder.unique.<get-unique>|<get-unique>(){}[0]
        final fun <set-unique>(kotlin/Boolean?) // dev.kord.rest.builder.channel/InviteCreateBuilder.unique.<set-unique>|<set-unique>(kotlin.Boolean?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/InviteCreateRequest // dev.kord.rest.builder.channel/InviteCreateBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.channel/MediaChannelCreateBuilder : dev.kord.rest.builder.channel/PermissionOverwritesCreateBuilder, dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/GuildChannelCreateRequest> { // dev.kord.rest.builder.channel/MediaChannelCreateBuilder|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.<init>|<init>(kotlin.String){}[0]

    final var availableTags // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.availableTags|{}availableTags[0]
        final fun <get-availableTags>(): kotlin.collections/MutableList<dev.kord.rest.json.request/ForumTagRequest>? // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.availableTags.<get-availableTags>|<get-availableTags>(){}[0]
        final fun <set-availableTags>(kotlin.collections/MutableList<dev.kord.rest.json.request/ForumTagRequest>?) // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.availableTags.<set-availableTags>|<set-availableTags>(kotlin.collections.MutableList<dev.kord.rest.json.request.ForumTagRequest>?){}[0]
    final var defaultAutoArchiveDuration // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.defaultAutoArchiveDuration|{}defaultAutoArchiveDuration[0]
        final fun <get-defaultAutoArchiveDuration>(): dev.kord.common.entity/ArchiveDuration? // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.defaultAutoArchiveDuration.<get-defaultAutoArchiveDuration>|<get-defaultAutoArchiveDuration>(){}[0]
        final fun <set-defaultAutoArchiveDuration>(dev.kord.common.entity/ArchiveDuration?) // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.defaultAutoArchiveDuration.<set-defaultAutoArchiveDuration>|<set-defaultAutoArchiveDuration>(dev.kord.common.entity.ArchiveDuration?){}[0]
    final var defaultReactionEmoji // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.defaultReactionEmoji|{}defaultReactionEmoji[0]
        final fun <get-defaultReactionEmoji>(): dev.kord.common.entity/DefaultReaction? // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.defaultReactionEmoji.<get-defaultReactionEmoji>|<get-defaultReactionEmoji>(){}[0]
        final fun <set-defaultReactionEmoji>(dev.kord.common.entity/DefaultReaction?) // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.defaultReactionEmoji.<set-defaultReactionEmoji>|<set-defaultReactionEmoji>(dev.kord.common.entity.DefaultReaction?){}[0]
    final var defaultReactionEmojiId // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.defaultReactionEmojiId|{}defaultReactionEmojiId[0]
        final fun <get-defaultReactionEmojiId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.defaultReactionEmojiId.<get-defaultReactionEmojiId>|<get-defaultReactionEmojiId>(){}[0]
        final fun <set-defaultReactionEmojiId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.defaultReactionEmojiId.<set-defaultReactionEmojiId>|<set-defaultReactionEmojiId>(dev.kord.common.entity.Snowflake?){}[0]
    final var defaultReactionEmojiName // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.defaultReactionEmojiName|{}defaultReactionEmojiName[0]
        final fun <get-defaultReactionEmojiName>(): kotlin/String? // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.defaultReactionEmojiName.<get-defaultReactionEmojiName>|<get-defaultReactionEmojiName>(){}[0]
        final fun <set-defaultReactionEmojiName>(kotlin/String?) // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.defaultReactionEmojiName.<set-defaultReactionEmojiName>|<set-defaultReactionEmojiName>(kotlin.String?){}[0]
    final var defaultSortOrder // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.defaultSortOrder|{}defaultSortOrder[0]
        final fun <get-defaultSortOrder>(): dev.kord.common.entity/SortOrderType? // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.defaultSortOrder.<get-defaultSortOrder>|<get-defaultSortOrder>(){}[0]
        final fun <set-defaultSortOrder>(dev.kord.common.entity/SortOrderType?) // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.defaultSortOrder.<set-defaultSortOrder>|<set-defaultSortOrder>(dev.kord.common.entity.SortOrderType?){}[0]
    final var defaultThreadRateLimitPerUser // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.defaultThreadRateLimitPerUser|{}defaultThreadRateLimitPerUser[0]
        final fun <get-defaultThreadRateLimitPerUser>(): kotlin.time/Duration? // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.defaultThreadRateLimitPerUser.<get-defaultThreadRateLimitPerUser>|<get-defaultThreadRateLimitPerUser>(){}[0]
        final fun <set-defaultThreadRateLimitPerUser>(kotlin.time/Duration?) // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.defaultThreadRateLimitPerUser.<set-defaultThreadRateLimitPerUser>|<set-defaultThreadRateLimitPerUser>(kotlin.time.Duration?){}[0]
    final var flags // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity/ChannelFlags? // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.flags.<get-flags>|<get-flags>(){}[0]
        final fun <set-flags>(dev.kord.common.entity/ChannelFlags?) // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.flags.<set-flags>|<set-flags>(dev.kord.common.entity.ChannelFlags?){}[0]
    final var name // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.name.<set-name>|<set-name>(kotlin.String){}[0]
    final var nsfw // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): kotlin/Boolean? // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
        final fun <set-nsfw>(kotlin/Boolean?) // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.nsfw.<set-nsfw>|<set-nsfw>(kotlin.Boolean?){}[0]
    final var parentId // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.parentId|{}parentId[0]
        final fun <get-parentId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.parentId.<get-parentId>|<get-parentId>(){}[0]
        final fun <set-parentId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.parentId.<set-parentId>|<set-parentId>(dev.kord.common.entity.Snowflake?){}[0]
    final var permissionOverwrites // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.permissionOverwrites|{}permissionOverwrites[0]
        final fun <get-permissionOverwrites>(): kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite> // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.permissionOverwrites.<get-permissionOverwrites>|<get-permissionOverwrites>(){}[0]
        final fun <set-permissionOverwrites>(kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite>) // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.permissionOverwrites.<set-permissionOverwrites>|<set-permissionOverwrites>(kotlin.collections.MutableSet<dev.kord.common.entity.Overwrite>){}[0]
    final var position // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.position|{}position[0]
        final fun <get-position>(): kotlin/Int? // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.position.<get-position>|<get-position>(){}[0]
        final fun <set-position>(kotlin/Int?) // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.position.<set-position>|<set-position>(kotlin.Int?){}[0]
    final var rateLimitPerUser // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.rateLimitPerUser|{}rateLimitPerUser[0]
        final fun <get-rateLimitPerUser>(): kotlin.time/Duration? // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.rateLimitPerUser.<get-rateLimitPerUser>|<get-rateLimitPerUser>(){}[0]
        final fun <set-rateLimitPerUser>(kotlin.time/Duration?) // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.rateLimitPerUser.<set-rateLimitPerUser>|<set-rateLimitPerUser>(kotlin.time.Duration?){}[0]
    final var reason // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]
    final var topic // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.topic|{}topic[0]
        final fun <get-topic>(): kotlin/String? // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.topic.<get-topic>|<get-topic>(){}[0]
        final fun <set-topic>(kotlin/String?) // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.topic.<set-topic>|<set-topic>(kotlin.String?){}[0]

    final fun tag(kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel/ForumTagBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.tag|tag(kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.ForumTagBuilder,kotlin.Unit>){}[0]
    final fun toRequest(): dev.kord.rest.json.request/GuildChannelCreateRequest // dev.kord.rest.builder.channel/MediaChannelCreateBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.channel/MediaChannelModifyBuilder : dev.kord.rest.builder.channel/PermissionOverwritesModifyBuilder, dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/ChannelModifyPatchRequest> { // dev.kord.rest.builder.channel/MediaChannelModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.<init>|<init>(){}[0]

    final var availableTags // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.availableTags|{}availableTags[0]
        final fun <get-availableTags>(): kotlin.collections/MutableList<dev.kord.rest.json.request/ForumTagRequest>? // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.availableTags.<get-availableTags>|<get-availableTags>(){}[0]
        final fun <set-availableTags>(kotlin.collections/MutableList<dev.kord.rest.json.request/ForumTagRequest>?) // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.availableTags.<set-availableTags>|<set-availableTags>(kotlin.collections.MutableList<dev.kord.rest.json.request.ForumTagRequest>?){}[0]
    final var defaultAutoArchiveDuration // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.defaultAutoArchiveDuration|{}defaultAutoArchiveDuration[0]
        final fun <get-defaultAutoArchiveDuration>(): dev.kord.common.entity/ArchiveDuration? // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.defaultAutoArchiveDuration.<get-defaultAutoArchiveDuration>|<get-defaultAutoArchiveDuration>(){}[0]
        final fun <set-defaultAutoArchiveDuration>(dev.kord.common.entity/ArchiveDuration?) // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.defaultAutoArchiveDuration.<set-defaultAutoArchiveDuration>|<set-defaultAutoArchiveDuration>(dev.kord.common.entity.ArchiveDuration?){}[0]
    final var defaultReactionEmoji // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.defaultReactionEmoji|{}defaultReactionEmoji[0]
        final fun <get-defaultReactionEmoji>(): dev.kord.common.entity/DefaultReaction? // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.defaultReactionEmoji.<get-defaultReactionEmoji>|<get-defaultReactionEmoji>(){}[0]
        final fun <set-defaultReactionEmoji>(dev.kord.common.entity/DefaultReaction?) // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.defaultReactionEmoji.<set-defaultReactionEmoji>|<set-defaultReactionEmoji>(dev.kord.common.entity.DefaultReaction?){}[0]
    final var defaultReactionEmojiId // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.defaultReactionEmojiId|{}defaultReactionEmojiId[0]
        final fun <get-defaultReactionEmojiId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.defaultReactionEmojiId.<get-defaultReactionEmojiId>|<get-defaultReactionEmojiId>(){}[0]
        final fun <set-defaultReactionEmojiId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.defaultReactionEmojiId.<set-defaultReactionEmojiId>|<set-defaultReactionEmojiId>(dev.kord.common.entity.Snowflake?){}[0]
    final var defaultReactionEmojiName // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.defaultReactionEmojiName|{}defaultReactionEmojiName[0]
        final fun <get-defaultReactionEmojiName>(): kotlin/String? // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.defaultReactionEmojiName.<get-defaultReactionEmojiName>|<get-defaultReactionEmojiName>(){}[0]
        final fun <set-defaultReactionEmojiName>(kotlin/String?) // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.defaultReactionEmojiName.<set-defaultReactionEmojiName>|<set-defaultReactionEmojiName>(kotlin.String?){}[0]
    final var defaultSortOrder // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.defaultSortOrder|{}defaultSortOrder[0]
        final fun <get-defaultSortOrder>(): dev.kord.common.entity/SortOrderType? // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.defaultSortOrder.<get-defaultSortOrder>|<get-defaultSortOrder>(){}[0]
        final fun <set-defaultSortOrder>(dev.kord.common.entity/SortOrderType?) // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.defaultSortOrder.<set-defaultSortOrder>|<set-defaultSortOrder>(dev.kord.common.entity.SortOrderType?){}[0]
    final var defaultThreadRateLimitPerUser // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.defaultThreadRateLimitPerUser|{}defaultThreadRateLimitPerUser[0]
        final fun <get-defaultThreadRateLimitPerUser>(): kotlin.time/Duration? // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.defaultThreadRateLimitPerUser.<get-defaultThreadRateLimitPerUser>|<get-defaultThreadRateLimitPerUser>(){}[0]
        final fun <set-defaultThreadRateLimitPerUser>(kotlin.time/Duration?) // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.defaultThreadRateLimitPerUser.<set-defaultThreadRateLimitPerUser>|<set-defaultThreadRateLimitPerUser>(kotlin.time.Duration?){}[0]
    final var flags // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity/ChannelFlags? // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.flags.<get-flags>|<get-flags>(){}[0]
        final fun <set-flags>(dev.kord.common.entity/ChannelFlags?) // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.flags.<set-flags>|<set-flags>(dev.kord.common.entity.ChannelFlags?){}[0]
    final var name // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String?) // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.name.<set-name>|<set-name>(kotlin.String?){}[0]
    final var nsfw // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): kotlin/Boolean? // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
        final fun <set-nsfw>(kotlin/Boolean?) // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.nsfw.<set-nsfw>|<set-nsfw>(kotlin.Boolean?){}[0]
    final var parentId // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.parentId|{}parentId[0]
        final fun <get-parentId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.parentId.<get-parentId>|<get-parentId>(){}[0]
        final fun <set-parentId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.parentId.<set-parentId>|<set-parentId>(dev.kord.common.entity.Snowflake?){}[0]
    final var permissionOverwrites // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.permissionOverwrites|{}permissionOverwrites[0]
        final fun <get-permissionOverwrites>(): kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite>? // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.permissionOverwrites.<get-permissionOverwrites>|<get-permissionOverwrites>(){}[0]
        final fun <set-permissionOverwrites>(kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite>?) // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.permissionOverwrites.<set-permissionOverwrites>|<set-permissionOverwrites>(kotlin.collections.MutableSet<dev.kord.common.entity.Overwrite>?){}[0]
    final var position // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.position|{}position[0]
        final fun <get-position>(): kotlin/Int? // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.position.<get-position>|<get-position>(){}[0]
        final fun <set-position>(kotlin/Int?) // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.position.<set-position>|<set-position>(kotlin.Int?){}[0]
    final var rateLimitPerUser // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.rateLimitPerUser|{}rateLimitPerUser[0]
        final fun <get-rateLimitPerUser>(): kotlin.time/Duration? // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.rateLimitPerUser.<get-rateLimitPerUser>|<get-rateLimitPerUser>(){}[0]
        final fun <set-rateLimitPerUser>(kotlin.time/Duration?) // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.rateLimitPerUser.<set-rateLimitPerUser>|<set-rateLimitPerUser>(kotlin.time.Duration?){}[0]
    final var reason // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]
    final var topic // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.topic|{}topic[0]
        final fun <get-topic>(): kotlin/String? // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.topic.<get-topic>|<get-topic>(){}[0]
        final fun <set-topic>(kotlin/String?) // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.topic.<set-topic>|<set-topic>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/ChannelModifyPatchRequest // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.toRequest|toRequest(){}[0]
    final inline fun tag(kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel/ForumTagBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.channel/MediaChannelModifyBuilder.tag|tag(kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.ForumTagBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.rest.builder.channel/NewsChannelCreateBuilder : dev.kord.rest.builder.channel/PermissionOverwritesCreateBuilder, dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/GuildChannelCreateRequest> { // dev.kord.rest.builder.channel/NewsChannelCreateBuilder|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.builder.channel/NewsChannelCreateBuilder.<init>|<init>(kotlin.String){}[0]

    final var defaultAutoArchiveDuration // dev.kord.rest.builder.channel/NewsChannelCreateBuilder.defaultAutoArchiveDuration|{}defaultAutoArchiveDuration[0]
        final fun <get-defaultAutoArchiveDuration>(): dev.kord.common.entity/ArchiveDuration? // dev.kord.rest.builder.channel/NewsChannelCreateBuilder.defaultAutoArchiveDuration.<get-defaultAutoArchiveDuration>|<get-defaultAutoArchiveDuration>(){}[0]
        final fun <set-defaultAutoArchiveDuration>(dev.kord.common.entity/ArchiveDuration?) // dev.kord.rest.builder.channel/NewsChannelCreateBuilder.defaultAutoArchiveDuration.<set-defaultAutoArchiveDuration>|<set-defaultAutoArchiveDuration>(dev.kord.common.entity.ArchiveDuration?){}[0]
    final var name // dev.kord.rest.builder.channel/NewsChannelCreateBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.builder.channel/NewsChannelCreateBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // dev.kord.rest.builder.channel/NewsChannelCreateBuilder.name.<set-name>|<set-name>(kotlin.String){}[0]
    final var nsfw // dev.kord.rest.builder.channel/NewsChannelCreateBuilder.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): kotlin/Boolean? // dev.kord.rest.builder.channel/NewsChannelCreateBuilder.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
        final fun <set-nsfw>(kotlin/Boolean?) // dev.kord.rest.builder.channel/NewsChannelCreateBuilder.nsfw.<set-nsfw>|<set-nsfw>(kotlin.Boolean?){}[0]
    final var parentId // dev.kord.rest.builder.channel/NewsChannelCreateBuilder.parentId|{}parentId[0]
        final fun <get-parentId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.channel/NewsChannelCreateBuilder.parentId.<get-parentId>|<get-parentId>(){}[0]
        final fun <set-parentId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.channel/NewsChannelCreateBuilder.parentId.<set-parentId>|<set-parentId>(dev.kord.common.entity.Snowflake?){}[0]
    final var permissionOverwrites // dev.kord.rest.builder.channel/NewsChannelCreateBuilder.permissionOverwrites|{}permissionOverwrites[0]
        final fun <get-permissionOverwrites>(): kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite> // dev.kord.rest.builder.channel/NewsChannelCreateBuilder.permissionOverwrites.<get-permissionOverwrites>|<get-permissionOverwrites>(){}[0]
        final fun <set-permissionOverwrites>(kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite>) // dev.kord.rest.builder.channel/NewsChannelCreateBuilder.permissionOverwrites.<set-permissionOverwrites>|<set-permissionOverwrites>(kotlin.collections.MutableSet<dev.kord.common.entity.Overwrite>){}[0]
    final var position // dev.kord.rest.builder.channel/NewsChannelCreateBuilder.position|{}position[0]
        final fun <get-position>(): kotlin/Int? // dev.kord.rest.builder.channel/NewsChannelCreateBuilder.position.<get-position>|<get-position>(){}[0]
        final fun <set-position>(kotlin/Int?) // dev.kord.rest.builder.channel/NewsChannelCreateBuilder.position.<set-position>|<set-position>(kotlin.Int?){}[0]
    final var reason // dev.kord.rest.builder.channel/NewsChannelCreateBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.channel/NewsChannelCreateBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.channel/NewsChannelCreateBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]
    final var topic // dev.kord.rest.builder.channel/NewsChannelCreateBuilder.topic|{}topic[0]
        final fun <get-topic>(): kotlin/String? // dev.kord.rest.builder.channel/NewsChannelCreateBuilder.topic.<get-topic>|<get-topic>(){}[0]
        final fun <set-topic>(kotlin/String?) // dev.kord.rest.builder.channel/NewsChannelCreateBuilder.topic.<set-topic>|<set-topic>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/GuildChannelCreateRequest // dev.kord.rest.builder.channel/NewsChannelCreateBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.channel/NewsChannelModifyBuilder : dev.kord.rest.builder.channel/PermissionOverwritesModifyBuilder, dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/ChannelModifyPatchRequest> { // dev.kord.rest.builder.channel/NewsChannelModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.<init>|<init>(){}[0]

    final var defaultAutoArchiveDuration // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.defaultAutoArchiveDuration|{}defaultAutoArchiveDuration[0]
        final fun <get-defaultAutoArchiveDuration>(): dev.kord.common.entity/ArchiveDuration? // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.defaultAutoArchiveDuration.<get-defaultAutoArchiveDuration>|<get-defaultAutoArchiveDuration>(){}[0]
        final fun <set-defaultAutoArchiveDuration>(dev.kord.common.entity/ArchiveDuration?) // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.defaultAutoArchiveDuration.<set-defaultAutoArchiveDuration>|<set-defaultAutoArchiveDuration>(dev.kord.common.entity.ArchiveDuration?){}[0]
    final var name // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String?) // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.name.<set-name>|<set-name>(kotlin.String?){}[0]
    final var nsfw // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): kotlin/Boolean? // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
        final fun <set-nsfw>(kotlin/Boolean?) // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.nsfw.<set-nsfw>|<set-nsfw>(kotlin.Boolean?){}[0]
    final var parentId // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.parentId|{}parentId[0]
        final fun <get-parentId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.parentId.<get-parentId>|<get-parentId>(){}[0]
        final fun <set-parentId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.parentId.<set-parentId>|<set-parentId>(dev.kord.common.entity.Snowflake?){}[0]
    final var permissionOverwrites // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.permissionOverwrites|{}permissionOverwrites[0]
        final fun <get-permissionOverwrites>(): kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite>? // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.permissionOverwrites.<get-permissionOverwrites>|<get-permissionOverwrites>(){}[0]
        final fun <set-permissionOverwrites>(kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite>?) // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.permissionOverwrites.<set-permissionOverwrites>|<set-permissionOverwrites>(kotlin.collections.MutableSet<dev.kord.common.entity.Overwrite>?){}[0]
    final var position // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.position|{}position[0]
        final fun <get-position>(): kotlin/Int? // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.position.<get-position>|<get-position>(){}[0]
        final fun <set-position>(kotlin/Int?) // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.position.<set-position>|<set-position>(kotlin.Int?){}[0]
    final var rateLimitPerUser // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.rateLimitPerUser|{}rateLimitPerUser[0]
        final fun <get-rateLimitPerUser>(): kotlin.time/Duration? // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.rateLimitPerUser.<get-rateLimitPerUser>|<get-rateLimitPerUser>(){}[0]
        final fun <set-rateLimitPerUser>(kotlin.time/Duration?) // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.rateLimitPerUser.<set-rateLimitPerUser>|<set-rateLimitPerUser>(kotlin.time.Duration?){}[0]
    final var reason // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]
    final var topic // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.topic|{}topic[0]
        final fun <get-topic>(): kotlin/String? // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.topic.<get-topic>|<get-topic>(){}[0]
        final fun <set-topic>(kotlin/String?) // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.topic.<set-topic>|<set-topic>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/ChannelModifyPatchRequest // dev.kord.rest.builder.channel/NewsChannelModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.channel/PermissionOverwriteBuilder { // dev.kord.rest.builder.channel/PermissionOverwriteBuilder|null[0]
    constructor <init>(dev.kord.common.entity/OverwriteType, dev.kord.common.entity/Snowflake) // dev.kord.rest.builder.channel/PermissionOverwriteBuilder.<init>|<init>(dev.kord.common.entity.OverwriteType;dev.kord.common.entity.Snowflake){}[0]

    final var allowed // dev.kord.rest.builder.channel/PermissionOverwriteBuilder.allowed|{}allowed[0]
        final fun <get-allowed>(): dev.kord.common.entity/Permissions // dev.kord.rest.builder.channel/PermissionOverwriteBuilder.allowed.<get-allowed>|<get-allowed>(){}[0]
        final fun <set-allowed>(dev.kord.common.entity/Permissions) // dev.kord.rest.builder.channel/PermissionOverwriteBuilder.allowed.<set-allowed>|<set-allowed>(dev.kord.common.entity.Permissions){}[0]
    final var denied // dev.kord.rest.builder.channel/PermissionOverwriteBuilder.denied|{}denied[0]
        final fun <get-denied>(): dev.kord.common.entity/Permissions // dev.kord.rest.builder.channel/PermissionOverwriteBuilder.denied.<get-denied>|<get-denied>(){}[0]
        final fun <set-denied>(dev.kord.common.entity/Permissions) // dev.kord.rest.builder.channel/PermissionOverwriteBuilder.denied.<set-denied>|<set-denied>(dev.kord.common.entity.Permissions){}[0]

    final fun toOverwrite(): dev.kord.common.entity/Overwrite // dev.kord.rest.builder.channel/PermissionOverwriteBuilder.toOverwrite|toOverwrite(){}[0]
}

final class dev.kord.rest.builder.channel/StageChannelCreateBuilder : dev.kord.rest.builder.channel/PermissionOverwritesCreateBuilder, dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/GuildChannelCreateRequest> { // dev.kord.rest.builder.channel/StageChannelCreateBuilder|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.builder.channel/StageChannelCreateBuilder.<init>|<init>(kotlin.String){}[0]

    final var bitrate // dev.kord.rest.builder.channel/StageChannelCreateBuilder.bitrate|{}bitrate[0]
        final fun <get-bitrate>(): kotlin/Int? // dev.kord.rest.builder.channel/StageChannelCreateBuilder.bitrate.<get-bitrate>|<get-bitrate>(){}[0]
        final fun <set-bitrate>(kotlin/Int?) // dev.kord.rest.builder.channel/StageChannelCreateBuilder.bitrate.<set-bitrate>|<set-bitrate>(kotlin.Int?){}[0]
    final var name // dev.kord.rest.builder.channel/StageChannelCreateBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.builder.channel/StageChannelCreateBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // dev.kord.rest.builder.channel/StageChannelCreateBuilder.name.<set-name>|<set-name>(kotlin.String){}[0]
    final var nsfw // dev.kord.rest.builder.channel/StageChannelCreateBuilder.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): kotlin/Boolean? // dev.kord.rest.builder.channel/StageChannelCreateBuilder.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
        final fun <set-nsfw>(kotlin/Boolean?) // dev.kord.rest.builder.channel/StageChannelCreateBuilder.nsfw.<set-nsfw>|<set-nsfw>(kotlin.Boolean?){}[0]
    final var parentId // dev.kord.rest.builder.channel/StageChannelCreateBuilder.parentId|{}parentId[0]
        final fun <get-parentId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.channel/StageChannelCreateBuilder.parentId.<get-parentId>|<get-parentId>(){}[0]
        final fun <set-parentId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.channel/StageChannelCreateBuilder.parentId.<set-parentId>|<set-parentId>(dev.kord.common.entity.Snowflake?){}[0]
    final var permissionOverwrites // dev.kord.rest.builder.channel/StageChannelCreateBuilder.permissionOverwrites|{}permissionOverwrites[0]
        final fun <get-permissionOverwrites>(): kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite> // dev.kord.rest.builder.channel/StageChannelCreateBuilder.permissionOverwrites.<get-permissionOverwrites>|<get-permissionOverwrites>(){}[0]
        final fun <set-permissionOverwrites>(kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite>) // dev.kord.rest.builder.channel/StageChannelCreateBuilder.permissionOverwrites.<set-permissionOverwrites>|<set-permissionOverwrites>(kotlin.collections.MutableSet<dev.kord.common.entity.Overwrite>){}[0]
    final var position // dev.kord.rest.builder.channel/StageChannelCreateBuilder.position|{}position[0]
        final fun <get-position>(): kotlin/Int? // dev.kord.rest.builder.channel/StageChannelCreateBuilder.position.<get-position>|<get-position>(){}[0]
        final fun <set-position>(kotlin/Int?) // dev.kord.rest.builder.channel/StageChannelCreateBuilder.position.<set-position>|<set-position>(kotlin.Int?){}[0]
    final var rateLimitPerUser // dev.kord.rest.builder.channel/StageChannelCreateBuilder.rateLimitPerUser|{}rateLimitPerUser[0]
        final fun <get-rateLimitPerUser>(): kotlin.time/Duration? // dev.kord.rest.builder.channel/StageChannelCreateBuilder.rateLimitPerUser.<get-rateLimitPerUser>|<get-rateLimitPerUser>(){}[0]
        final fun <set-rateLimitPerUser>(kotlin.time/Duration?) // dev.kord.rest.builder.channel/StageChannelCreateBuilder.rateLimitPerUser.<set-rateLimitPerUser>|<set-rateLimitPerUser>(kotlin.time.Duration?){}[0]
    final var reason // dev.kord.rest.builder.channel/StageChannelCreateBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.channel/StageChannelCreateBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.channel/StageChannelCreateBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]
    final var userLimit // dev.kord.rest.builder.channel/StageChannelCreateBuilder.userLimit|{}userLimit[0]
        final fun <get-userLimit>(): kotlin/Int? // dev.kord.rest.builder.channel/StageChannelCreateBuilder.userLimit.<get-userLimit>|<get-userLimit>(){}[0]
        final fun <set-userLimit>(kotlin/Int?) // dev.kord.rest.builder.channel/StageChannelCreateBuilder.userLimit.<set-userLimit>|<set-userLimit>(kotlin.Int?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/GuildChannelCreateRequest // dev.kord.rest.builder.channel/StageChannelCreateBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder : dev.kord.rest.builder.channel/PermissionOverwritesModifyBuilder, dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/ChannelModifyPatchRequest> { // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder.<init>|<init>(){}[0]

    final var bitrate // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder.bitrate|{}bitrate[0]
        final fun <get-bitrate>(): kotlin/Int? // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder.bitrate.<get-bitrate>|<get-bitrate>(){}[0]
        final fun <set-bitrate>(kotlin/Int?) // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder.bitrate.<set-bitrate>|<set-bitrate>(kotlin.Int?){}[0]
    final var name // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String?) // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder.name.<set-name>|<set-name>(kotlin.String?){}[0]
    final var parentId // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder.parentId|{}parentId[0]
        final fun <get-parentId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder.parentId.<get-parentId>|<get-parentId>(){}[0]
        final fun <set-parentId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder.parentId.<set-parentId>|<set-parentId>(dev.kord.common.entity.Snowflake?){}[0]
    final var permissionOverwrites // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder.permissionOverwrites|{}permissionOverwrites[0]
        final fun <get-permissionOverwrites>(): kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite>? // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder.permissionOverwrites.<get-permissionOverwrites>|<get-permissionOverwrites>(){}[0]
        final fun <set-permissionOverwrites>(kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite>?) // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder.permissionOverwrites.<set-permissionOverwrites>|<set-permissionOverwrites>(kotlin.collections.MutableSet<dev.kord.common.entity.Overwrite>?){}[0]
    final var position // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder.position|{}position[0]
        final fun <get-position>(): kotlin/Int? // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder.position.<get-position>|<get-position>(){}[0]
        final fun <set-position>(kotlin/Int?) // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder.position.<set-position>|<set-position>(kotlin.Int?){}[0]
    final var reason // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]
    final var rtcRegion // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder.rtcRegion|{}rtcRegion[0]
        final fun <get-rtcRegion>(): kotlin/String? // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder.rtcRegion.<get-rtcRegion>|<get-rtcRegion>(){}[0]
        final fun <set-rtcRegion>(kotlin/String?) // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder.rtcRegion.<set-rtcRegion>|<set-rtcRegion>(kotlin.String?){}[0]
    final var topic // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder.topic|{}topic[0]
        final fun <get-topic>(): kotlin/String? // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder.topic.<get-topic>|<get-topic>(){}[0]
        final fun <set-topic>(kotlin/String?) // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder.topic.<set-topic>|<set-topic>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/ChannelModifyPatchRequest // dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.channel/TextChannelCreateBuilder : dev.kord.rest.builder.channel/PermissionOverwritesCreateBuilder, dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/GuildChannelCreateRequest> { // dev.kord.rest.builder.channel/TextChannelCreateBuilder|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.builder.channel/TextChannelCreateBuilder.<init>|<init>(kotlin.String){}[0]

    final var defaultAutoArchiveDuration // dev.kord.rest.builder.channel/TextChannelCreateBuilder.defaultAutoArchiveDuration|{}defaultAutoArchiveDuration[0]
        final fun <get-defaultAutoArchiveDuration>(): dev.kord.common.entity/ArchiveDuration? // dev.kord.rest.builder.channel/TextChannelCreateBuilder.defaultAutoArchiveDuration.<get-defaultAutoArchiveDuration>|<get-defaultAutoArchiveDuration>(){}[0]
        final fun <set-defaultAutoArchiveDuration>(dev.kord.common.entity/ArchiveDuration?) // dev.kord.rest.builder.channel/TextChannelCreateBuilder.defaultAutoArchiveDuration.<set-defaultAutoArchiveDuration>|<set-defaultAutoArchiveDuration>(dev.kord.common.entity.ArchiveDuration?){}[0]
    final var defaultThreadRateLimitPerUser // dev.kord.rest.builder.channel/TextChannelCreateBuilder.defaultThreadRateLimitPerUser|{}defaultThreadRateLimitPerUser[0]
        final fun <get-defaultThreadRateLimitPerUser>(): kotlin.time/Duration? // dev.kord.rest.builder.channel/TextChannelCreateBuilder.defaultThreadRateLimitPerUser.<get-defaultThreadRateLimitPerUser>|<get-defaultThreadRateLimitPerUser>(){}[0]
        final fun <set-defaultThreadRateLimitPerUser>(kotlin.time/Duration?) // dev.kord.rest.builder.channel/TextChannelCreateBuilder.defaultThreadRateLimitPerUser.<set-defaultThreadRateLimitPerUser>|<set-defaultThreadRateLimitPerUser>(kotlin.time.Duration?){}[0]
    final var name // dev.kord.rest.builder.channel/TextChannelCreateBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.builder.channel/TextChannelCreateBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // dev.kord.rest.builder.channel/TextChannelCreateBuilder.name.<set-name>|<set-name>(kotlin.String){}[0]
    final var nsfw // dev.kord.rest.builder.channel/TextChannelCreateBuilder.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): kotlin/Boolean? // dev.kord.rest.builder.channel/TextChannelCreateBuilder.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
        final fun <set-nsfw>(kotlin/Boolean?) // dev.kord.rest.builder.channel/TextChannelCreateBuilder.nsfw.<set-nsfw>|<set-nsfw>(kotlin.Boolean?){}[0]
    final var parentId // dev.kord.rest.builder.channel/TextChannelCreateBuilder.parentId|{}parentId[0]
        final fun <get-parentId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.channel/TextChannelCreateBuilder.parentId.<get-parentId>|<get-parentId>(){}[0]
        final fun <set-parentId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.channel/TextChannelCreateBuilder.parentId.<set-parentId>|<set-parentId>(dev.kord.common.entity.Snowflake?){}[0]
    final var permissionOverwrites // dev.kord.rest.builder.channel/TextChannelCreateBuilder.permissionOverwrites|{}permissionOverwrites[0]
        final fun <get-permissionOverwrites>(): kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite> // dev.kord.rest.builder.channel/TextChannelCreateBuilder.permissionOverwrites.<get-permissionOverwrites>|<get-permissionOverwrites>(){}[0]
        final fun <set-permissionOverwrites>(kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite>) // dev.kord.rest.builder.channel/TextChannelCreateBuilder.permissionOverwrites.<set-permissionOverwrites>|<set-permissionOverwrites>(kotlin.collections.MutableSet<dev.kord.common.entity.Overwrite>){}[0]
    final var position // dev.kord.rest.builder.channel/TextChannelCreateBuilder.position|{}position[0]
        final fun <get-position>(): kotlin/Int? // dev.kord.rest.builder.channel/TextChannelCreateBuilder.position.<get-position>|<get-position>(){}[0]
        final fun <set-position>(kotlin/Int?) // dev.kord.rest.builder.channel/TextChannelCreateBuilder.position.<set-position>|<set-position>(kotlin.Int?){}[0]
    final var rateLimitPerUser // dev.kord.rest.builder.channel/TextChannelCreateBuilder.rateLimitPerUser|{}rateLimitPerUser[0]
        final fun <get-rateLimitPerUser>(): kotlin.time/Duration? // dev.kord.rest.builder.channel/TextChannelCreateBuilder.rateLimitPerUser.<get-rateLimitPerUser>|<get-rateLimitPerUser>(){}[0]
        final fun <set-rateLimitPerUser>(kotlin.time/Duration?) // dev.kord.rest.builder.channel/TextChannelCreateBuilder.rateLimitPerUser.<set-rateLimitPerUser>|<set-rateLimitPerUser>(kotlin.time.Duration?){}[0]
    final var reason // dev.kord.rest.builder.channel/TextChannelCreateBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.channel/TextChannelCreateBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.channel/TextChannelCreateBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]
    final var topic // dev.kord.rest.builder.channel/TextChannelCreateBuilder.topic|{}topic[0]
        final fun <get-topic>(): kotlin/String? // dev.kord.rest.builder.channel/TextChannelCreateBuilder.topic.<get-topic>|<get-topic>(){}[0]
        final fun <set-topic>(kotlin/String?) // dev.kord.rest.builder.channel/TextChannelCreateBuilder.topic.<set-topic>|<set-topic>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/GuildChannelCreateRequest // dev.kord.rest.builder.channel/TextChannelCreateBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.channel/TextChannelModifyBuilder : dev.kord.rest.builder.channel/PermissionOverwritesModifyBuilder, dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/ChannelModifyPatchRequest> { // dev.kord.rest.builder.channel/TextChannelModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.channel/TextChannelModifyBuilder.<init>|<init>(){}[0]

    final var defaultAutoArchiveDuration // dev.kord.rest.builder.channel/TextChannelModifyBuilder.defaultAutoArchiveDuration|{}defaultAutoArchiveDuration[0]
        final fun <get-defaultAutoArchiveDuration>(): dev.kord.common.entity/ArchiveDuration? // dev.kord.rest.builder.channel/TextChannelModifyBuilder.defaultAutoArchiveDuration.<get-defaultAutoArchiveDuration>|<get-defaultAutoArchiveDuration>(){}[0]
        final fun <set-defaultAutoArchiveDuration>(dev.kord.common.entity/ArchiveDuration?) // dev.kord.rest.builder.channel/TextChannelModifyBuilder.defaultAutoArchiveDuration.<set-defaultAutoArchiveDuration>|<set-defaultAutoArchiveDuration>(dev.kord.common.entity.ArchiveDuration?){}[0]
    final var defaultThreadRateLimitPerUser // dev.kord.rest.builder.channel/TextChannelModifyBuilder.defaultThreadRateLimitPerUser|{}defaultThreadRateLimitPerUser[0]
        final fun <get-defaultThreadRateLimitPerUser>(): kotlin.time/Duration? // dev.kord.rest.builder.channel/TextChannelModifyBuilder.defaultThreadRateLimitPerUser.<get-defaultThreadRateLimitPerUser>|<get-defaultThreadRateLimitPerUser>(){}[0]
        final fun <set-defaultThreadRateLimitPerUser>(kotlin.time/Duration?) // dev.kord.rest.builder.channel/TextChannelModifyBuilder.defaultThreadRateLimitPerUser.<set-defaultThreadRateLimitPerUser>|<set-defaultThreadRateLimitPerUser>(kotlin.time.Duration?){}[0]
    final var name // dev.kord.rest.builder.channel/TextChannelModifyBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.rest.builder.channel/TextChannelModifyBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String?) // dev.kord.rest.builder.channel/TextChannelModifyBuilder.name.<set-name>|<set-name>(kotlin.String?){}[0]
    final var nsfw // dev.kord.rest.builder.channel/TextChannelModifyBuilder.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): kotlin/Boolean? // dev.kord.rest.builder.channel/TextChannelModifyBuilder.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
        final fun <set-nsfw>(kotlin/Boolean?) // dev.kord.rest.builder.channel/TextChannelModifyBuilder.nsfw.<set-nsfw>|<set-nsfw>(kotlin.Boolean?){}[0]
    final var parentId // dev.kord.rest.builder.channel/TextChannelModifyBuilder.parentId|{}parentId[0]
        final fun <get-parentId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.channel/TextChannelModifyBuilder.parentId.<get-parentId>|<get-parentId>(){}[0]
        final fun <set-parentId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.channel/TextChannelModifyBuilder.parentId.<set-parentId>|<set-parentId>(dev.kord.common.entity.Snowflake?){}[0]
    final var permissionOverwrites // dev.kord.rest.builder.channel/TextChannelModifyBuilder.permissionOverwrites|{}permissionOverwrites[0]
        final fun <get-permissionOverwrites>(): kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite>? // dev.kord.rest.builder.channel/TextChannelModifyBuilder.permissionOverwrites.<get-permissionOverwrites>|<get-permissionOverwrites>(){}[0]
        final fun <set-permissionOverwrites>(kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite>?) // dev.kord.rest.builder.channel/TextChannelModifyBuilder.permissionOverwrites.<set-permissionOverwrites>|<set-permissionOverwrites>(kotlin.collections.MutableSet<dev.kord.common.entity.Overwrite>?){}[0]
    final var position // dev.kord.rest.builder.channel/TextChannelModifyBuilder.position|{}position[0]
        final fun <get-position>(): kotlin/Int? // dev.kord.rest.builder.channel/TextChannelModifyBuilder.position.<get-position>|<get-position>(){}[0]
        final fun <set-position>(kotlin/Int?) // dev.kord.rest.builder.channel/TextChannelModifyBuilder.position.<set-position>|<set-position>(kotlin.Int?){}[0]
    final var rateLimitPerUser // dev.kord.rest.builder.channel/TextChannelModifyBuilder.rateLimitPerUser|{}rateLimitPerUser[0]
        final fun <get-rateLimitPerUser>(): kotlin.time/Duration? // dev.kord.rest.builder.channel/TextChannelModifyBuilder.rateLimitPerUser.<get-rateLimitPerUser>|<get-rateLimitPerUser>(){}[0]
        final fun <set-rateLimitPerUser>(kotlin.time/Duration?) // dev.kord.rest.builder.channel/TextChannelModifyBuilder.rateLimitPerUser.<set-rateLimitPerUser>|<set-rateLimitPerUser>(kotlin.time.Duration?){}[0]
    final var reason // dev.kord.rest.builder.channel/TextChannelModifyBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.channel/TextChannelModifyBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.channel/TextChannelModifyBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]
    final var topic // dev.kord.rest.builder.channel/TextChannelModifyBuilder.topic|{}topic[0]
        final fun <get-topic>(): kotlin/String? // dev.kord.rest.builder.channel/TextChannelModifyBuilder.topic.<get-topic>|<get-topic>(){}[0]
        final fun <set-topic>(kotlin/String?) // dev.kord.rest.builder.channel/TextChannelModifyBuilder.topic.<set-topic>|<set-topic>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/ChannelModifyPatchRequest // dev.kord.rest.builder.channel/TextChannelModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.channel/VoiceChannelCreateBuilder : dev.kord.rest.builder.channel/PermissionOverwritesCreateBuilder, dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/GuildChannelCreateRequest> { // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder.<init>|<init>(kotlin.String){}[0]

    final var bitrate // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder.bitrate|{}bitrate[0]
        final fun <get-bitrate>(): kotlin/Int? // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder.bitrate.<get-bitrate>|<get-bitrate>(){}[0]
        final fun <set-bitrate>(kotlin/Int?) // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder.bitrate.<set-bitrate>|<set-bitrate>(kotlin.Int?){}[0]
    final var name // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder.name.<set-name>|<set-name>(kotlin.String){}[0]
    final var nsfw // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): kotlin/Boolean? // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
        final fun <set-nsfw>(kotlin/Boolean?) // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder.nsfw.<set-nsfw>|<set-nsfw>(kotlin.Boolean?){}[0]
    final var parentId // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder.parentId|{}parentId[0]
        final fun <get-parentId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder.parentId.<get-parentId>|<get-parentId>(){}[0]
        final fun <set-parentId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder.parentId.<set-parentId>|<set-parentId>(dev.kord.common.entity.Snowflake?){}[0]
    final var permissionOverwrites // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder.permissionOverwrites|{}permissionOverwrites[0]
        final fun <get-permissionOverwrites>(): kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite> // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder.permissionOverwrites.<get-permissionOverwrites>|<get-permissionOverwrites>(){}[0]
        final fun <set-permissionOverwrites>(kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite>) // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder.permissionOverwrites.<set-permissionOverwrites>|<set-permissionOverwrites>(kotlin.collections.MutableSet<dev.kord.common.entity.Overwrite>){}[0]
    final var position // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder.position|{}position[0]
        final fun <get-position>(): kotlin/Int? // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder.position.<get-position>|<get-position>(){}[0]
        final fun <set-position>(kotlin/Int?) // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder.position.<set-position>|<set-position>(kotlin.Int?){}[0]
    final var reason // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]
    final var userLimit // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder.userLimit|{}userLimit[0]
        final fun <get-userLimit>(): kotlin/Int? // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder.userLimit.<get-userLimit>|<get-userLimit>(){}[0]
        final fun <set-userLimit>(kotlin/Int?) // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder.userLimit.<set-userLimit>|<set-userLimit>(kotlin.Int?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/GuildChannelCreateRequest // dev.kord.rest.builder.channel/VoiceChannelCreateBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.channel/VoiceChannelModifyBuilder : dev.kord.rest.builder.channel/PermissionOverwritesModifyBuilder, dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/ChannelModifyPatchRequest> { // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.<init>|<init>(){}[0]

    final var bitrate // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.bitrate|{}bitrate[0]
        final fun <get-bitrate>(): kotlin/Int? // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.bitrate.<get-bitrate>|<get-bitrate>(){}[0]
        final fun <set-bitrate>(kotlin/Int?) // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.bitrate.<set-bitrate>|<set-bitrate>(kotlin.Int?){}[0]
    final var name // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String?) // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.name.<set-name>|<set-name>(kotlin.String?){}[0]
    final var nsfw // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): kotlin/Boolean? // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
        final fun <set-nsfw>(kotlin/Boolean?) // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.nsfw.<set-nsfw>|<set-nsfw>(kotlin.Boolean?){}[0]
    final var parentId // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.parentId|{}parentId[0]
        final fun <get-parentId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.parentId.<get-parentId>|<get-parentId>(){}[0]
        final fun <set-parentId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.parentId.<set-parentId>|<set-parentId>(dev.kord.common.entity.Snowflake?){}[0]
    final var permissionOverwrites // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.permissionOverwrites|{}permissionOverwrites[0]
        final fun <get-permissionOverwrites>(): kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite>? // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.permissionOverwrites.<get-permissionOverwrites>|<get-permissionOverwrites>(){}[0]
        final fun <set-permissionOverwrites>(kotlin.collections/MutableSet<dev.kord.common.entity/Overwrite>?) // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.permissionOverwrites.<set-permissionOverwrites>|<set-permissionOverwrites>(kotlin.collections.MutableSet<dev.kord.common.entity.Overwrite>?){}[0]
    final var position // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.position|{}position[0]
        final fun <get-position>(): kotlin/Int? // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.position.<get-position>|<get-position>(){}[0]
        final fun <set-position>(kotlin/Int?) // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.position.<set-position>|<set-position>(kotlin.Int?){}[0]
    final var reason // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]
    final var rtcRegion // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.rtcRegion|{}rtcRegion[0]
        final fun <get-rtcRegion>(): kotlin/String? // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.rtcRegion.<get-rtcRegion>|<get-rtcRegion>(){}[0]
        final fun <set-rtcRegion>(kotlin/String?) // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.rtcRegion.<set-rtcRegion>|<set-rtcRegion>(kotlin.String?){}[0]
    final var topic // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.topic|{}topic[0]
        final fun <get-topic>(): kotlin/String? // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.topic.<get-topic>|<get-topic>(){}[0]
        final fun <set-topic>(kotlin/String?) // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.topic.<set-topic>|<set-topic>(kotlin.String?){}[0]
    final var userLimit // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.userLimit|{}userLimit[0]
        final fun <get-userLimit>(): kotlin/Int? // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.userLimit.<get-userLimit>|<get-userLimit>(){}[0]
        final fun <set-userLimit>(kotlin/Int?) // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.userLimit.<set-userLimit>|<set-userLimit>(kotlin.Int?){}[0]
    final var videoQualityMode // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.videoQualityMode|{}videoQualityMode[0]
        final fun <get-videoQualityMode>(): dev.kord.common.entity/VideoQualityMode? // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.videoQualityMode.<get-videoQualityMode>|<get-videoQualityMode>(){}[0]
        final fun <set-videoQualityMode>(dev.kord.common.entity/VideoQualityMode?) // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.videoQualityMode.<set-videoQualityMode>|<set-videoQualityMode>(dev.kord.common.entity.VideoQualityMode?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/ChannelModifyPatchRequest // dev.kord.rest.builder.channel/VoiceChannelModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.component/ActionRowBuilder : dev.kord.rest.builder.component/MessageComponentBuilder { // dev.kord.rest.builder.component/ActionRowBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.component/ActionRowBuilder.<init>|<init>(){}[0]

    final val components // dev.kord.rest.builder.component/ActionRowBuilder.components|{}components[0]
        final fun <get-components>(): kotlin.collections/MutableList<dev.kord.rest.builder.component/ActionRowComponentBuilder> // dev.kord.rest.builder.component/ActionRowBuilder.components.<get-components>|<get-components>(){}[0]

    final fun build(): dev.kord.common.entity/DiscordChatComponent // dev.kord.rest.builder.component/ActionRowBuilder.build|build(){}[0]
    final inline fun channelSelect(kotlin/String, kotlin/Function1<dev.kord.rest.builder.component/ChannelSelectBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.component/ActionRowBuilder.channelSelect|channelSelect(kotlin.String;kotlin.Function1<dev.kord.rest.builder.component.ChannelSelectBuilder,kotlin.Unit>){}[0]
    final inline fun interactionButton(dev.kord.common.entity/ButtonStyle, kotlin/String, kotlin/Function1<dev.kord.rest.builder.component/ButtonBuilder.InteractionButtonBuilder, kotlin/Unit>) // dev.kord.rest.builder.component/ActionRowBuilder.interactionButton|interactionButton(dev.kord.common.entity.ButtonStyle;kotlin.String;kotlin.Function1<dev.kord.rest.builder.component.ButtonBuilder.InteractionButtonBuilder,kotlin.Unit>){}[0]
    final inline fun linkButton(kotlin/String, kotlin/Function1<dev.kord.rest.builder.component/ButtonBuilder.LinkButtonBuilder, kotlin/Unit>) // dev.kord.rest.builder.component/ActionRowBuilder.linkButton|linkButton(kotlin.String;kotlin.Function1<dev.kord.rest.builder.component.ButtonBuilder.LinkButtonBuilder,kotlin.Unit>){}[0]
    final inline fun mentionableSelect(kotlin/String, kotlin/Function1<dev.kord.rest.builder.component/MentionableSelectBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.component/ActionRowBuilder.mentionableSelect|mentionableSelect(kotlin.String;kotlin.Function1<dev.kord.rest.builder.component.MentionableSelectBuilder,kotlin.Unit>){}[0]
    final inline fun roleSelect(kotlin/String, kotlin/Function1<dev.kord.rest.builder.component/RoleSelectBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.component/ActionRowBuilder.roleSelect|roleSelect(kotlin.String;kotlin.Function1<dev.kord.rest.builder.component.RoleSelectBuilder,kotlin.Unit>){}[0]
    final inline fun stringSelect(kotlin/String, kotlin/Function1<dev.kord.rest.builder.component/StringSelectBuilder, kotlin/Unit>) // dev.kord.rest.builder.component/ActionRowBuilder.stringSelect|stringSelect(kotlin.String;kotlin.Function1<dev.kord.rest.builder.component.StringSelectBuilder,kotlin.Unit>){}[0]
    final inline fun textInput(dev.kord.common.entity/TextInputStyle, kotlin/String, kotlin/String, kotlin/Function1<dev.kord.rest.builder.component/TextInputBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.component/ActionRowBuilder.textInput|textInput(dev.kord.common.entity.TextInputStyle;kotlin.String;kotlin.String;kotlin.Function1<dev.kord.rest.builder.component.TextInputBuilder,kotlin.Unit>){}[0]
    final inline fun userSelect(kotlin/String, kotlin/Function1<dev.kord.rest.builder.component/UserSelectBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.component/ActionRowBuilder.userSelect|userSelect(kotlin.String;kotlin.Function1<dev.kord.rest.builder.component.UserSelectBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.rest.builder.component/ChannelSelectBuilder : dev.kord.rest.builder.component/SelectMenuBuilder { // dev.kord.rest.builder.component/ChannelSelectBuilder|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.builder.component/ChannelSelectBuilder.<init>|<init>(kotlin.String){}[0]

    final val defaultChannels // dev.kord.rest.builder.component/ChannelSelectBuilder.defaultChannels|{}defaultChannels[0]
        final fun <get-defaultChannels>(): kotlin.collections/MutableList<dev.kord.common.entity/Snowflake> // dev.kord.rest.builder.component/ChannelSelectBuilder.defaultChannels.<get-defaultChannels>|<get-defaultChannels>(){}[0]

    final var channelTypes // dev.kord.rest.builder.component/ChannelSelectBuilder.channelTypes|{}channelTypes[0]
        final fun <get-channelTypes>(): kotlin.collections/MutableList<dev.kord.common.entity/ChannelType>? // dev.kord.rest.builder.component/ChannelSelectBuilder.channelTypes.<get-channelTypes>|<get-channelTypes>(){}[0]
        final fun <set-channelTypes>(kotlin.collections/MutableList<dev.kord.common.entity/ChannelType>?) // dev.kord.rest.builder.component/ChannelSelectBuilder.channelTypes.<set-channelTypes>|<set-channelTypes>(kotlin.collections.MutableList<dev.kord.common.entity.ChannelType>?){}[0]
}

final class dev.kord.rest.builder.component/MentionableSelectBuilder : dev.kord.rest.builder.component/SelectMenuBuilder { // dev.kord.rest.builder.component/MentionableSelectBuilder|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.builder.component/MentionableSelectBuilder.<init>|<init>(kotlin.String){}[0]

    final val defaultRoles // dev.kord.rest.builder.component/MentionableSelectBuilder.defaultRoles|{}defaultRoles[0]
        final fun <get-defaultRoles>(): kotlin.collections/MutableList<dev.kord.common.entity/Snowflake> // dev.kord.rest.builder.component/MentionableSelectBuilder.defaultRoles.<get-defaultRoles>|<get-defaultRoles>(){}[0]
    final val defaultUsers // dev.kord.rest.builder.component/MentionableSelectBuilder.defaultUsers|{}defaultUsers[0]
        final fun <get-defaultUsers>(): kotlin.collections/MutableList<dev.kord.common.entity/Snowflake> // dev.kord.rest.builder.component/MentionableSelectBuilder.defaultUsers.<get-defaultUsers>|<get-defaultUsers>(){}[0]
}

final class dev.kord.rest.builder.component/RoleSelectBuilder : dev.kord.rest.builder.component/SelectMenuBuilder { // dev.kord.rest.builder.component/RoleSelectBuilder|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.builder.component/RoleSelectBuilder.<init>|<init>(kotlin.String){}[0]

    final val defaultRoles // dev.kord.rest.builder.component/RoleSelectBuilder.defaultRoles|{}defaultRoles[0]
        final fun <get-defaultRoles>(): kotlin.collections/MutableList<dev.kord.common.entity/Snowflake> // dev.kord.rest.builder.component/RoleSelectBuilder.defaultRoles.<get-defaultRoles>|<get-defaultRoles>(){}[0]
}

final class dev.kord.rest.builder.component/SelectOptionBuilder { // dev.kord.rest.builder.component/SelectOptionBuilder|null[0]
    constructor <init>(kotlin/String, kotlin/String) // dev.kord.rest.builder.component/SelectOptionBuilder.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final var default // dev.kord.rest.builder.component/SelectOptionBuilder.default|{}default[0]
        final fun <get-default>(): kotlin/Boolean? // dev.kord.rest.builder.component/SelectOptionBuilder.default.<get-default>|<get-default>(){}[0]
        final fun <set-default>(kotlin/Boolean?) // dev.kord.rest.builder.component/SelectOptionBuilder.default.<set-default>|<set-default>(kotlin.Boolean?){}[0]
    final var description // dev.kord.rest.builder.component/SelectOptionBuilder.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.rest.builder.component/SelectOptionBuilder.description.<get-description>|<get-description>(){}[0]
        final fun <set-description>(kotlin/String?) // dev.kord.rest.builder.component/SelectOptionBuilder.description.<set-description>|<set-description>(kotlin.String?){}[0]
    final var emoji // dev.kord.rest.builder.component/SelectOptionBuilder.emoji|{}emoji[0]
        final fun <get-emoji>(): dev.kord.common.entity/DiscordPartialEmoji? // dev.kord.rest.builder.component/SelectOptionBuilder.emoji.<get-emoji>|<get-emoji>(){}[0]
        final fun <set-emoji>(dev.kord.common.entity/DiscordPartialEmoji?) // dev.kord.rest.builder.component/SelectOptionBuilder.emoji.<set-emoji>|<set-emoji>(dev.kord.common.entity.DiscordPartialEmoji?){}[0]
    final var label // dev.kord.rest.builder.component/SelectOptionBuilder.label|{}label[0]
        final fun <get-label>(): kotlin/String // dev.kord.rest.builder.component/SelectOptionBuilder.label.<get-label>|<get-label>(){}[0]
        final fun <set-label>(kotlin/String) // dev.kord.rest.builder.component/SelectOptionBuilder.label.<set-label>|<set-label>(kotlin.String){}[0]
    final var value // dev.kord.rest.builder.component/SelectOptionBuilder.value|{}value[0]
        final fun <get-value>(): kotlin/String // dev.kord.rest.builder.component/SelectOptionBuilder.value.<get-value>|<get-value>(){}[0]
        final fun <set-value>(kotlin/String) // dev.kord.rest.builder.component/SelectOptionBuilder.value.<set-value>|<set-value>(kotlin.String){}[0]

    final fun build(): dev.kord.common.entity/DiscordSelectOption // dev.kord.rest.builder.component/SelectOptionBuilder.build|build(){}[0]
}

final class dev.kord.rest.builder.component/StringSelectBuilder : dev.kord.rest.builder.component/SelectMenuBuilder { // dev.kord.rest.builder.component/StringSelectBuilder|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.builder.component/StringSelectBuilder.<init>|<init>(kotlin.String){}[0]

    final var options // dev.kord.rest.builder.component/StringSelectBuilder.options|{}options[0]
        final fun <get-options>(): kotlin.collections/MutableList<dev.kord.rest.builder.component/SelectOptionBuilder> // dev.kord.rest.builder.component/StringSelectBuilder.options.<get-options>|<get-options>(){}[0]
        final fun <set-options>(kotlin.collections/MutableList<dev.kord.rest.builder.component/SelectOptionBuilder>) // dev.kord.rest.builder.component/StringSelectBuilder.options.<set-options>|<set-options>(kotlin.collections.MutableList<dev.kord.rest.builder.component.SelectOptionBuilder>){}[0]
}

final class dev.kord.rest.builder.component/TextInputBuilder : dev.kord.rest.builder.component/ActionRowComponentBuilder { // dev.kord.rest.builder.component/TextInputBuilder|null[0]
    constructor <init>(dev.kord.common.entity/TextInputStyle, kotlin/String, kotlin/String) // dev.kord.rest.builder.component/TextInputBuilder.<init>|<init>(dev.kord.common.entity.TextInputStyle;kotlin.String;kotlin.String){}[0]

    final var allowedLength // dev.kord.rest.builder.component/TextInputBuilder.allowedLength|{}allowedLength[0]
        final fun <get-allowedLength>(): kotlin.ranges/ClosedRange<kotlin/Int>? // dev.kord.rest.builder.component/TextInputBuilder.allowedLength.<get-allowedLength>|<get-allowedLength>(){}[0]
        final fun <set-allowedLength>(kotlin.ranges/ClosedRange<kotlin/Int>?) // dev.kord.rest.builder.component/TextInputBuilder.allowedLength.<set-allowedLength>|<set-allowedLength>(kotlin.ranges.ClosedRange<kotlin.Int>?){}[0]
    final var customId // dev.kord.rest.builder.component/TextInputBuilder.customId|{}customId[0]
        final fun <get-customId>(): kotlin/String // dev.kord.rest.builder.component/TextInputBuilder.customId.<get-customId>|<get-customId>(){}[0]
        final fun <set-customId>(kotlin/String) // dev.kord.rest.builder.component/TextInputBuilder.customId.<set-customId>|<set-customId>(kotlin.String){}[0]
    final var label // dev.kord.rest.builder.component/TextInputBuilder.label|{}label[0]
        final fun <get-label>(): kotlin/String // dev.kord.rest.builder.component/TextInputBuilder.label.<get-label>|<get-label>(){}[0]
        final fun <set-label>(kotlin/String) // dev.kord.rest.builder.component/TextInputBuilder.label.<set-label>|<set-label>(kotlin.String){}[0]
    final var placeholder // dev.kord.rest.builder.component/TextInputBuilder.placeholder|{}placeholder[0]
        final fun <get-placeholder>(): kotlin/String? // dev.kord.rest.builder.component/TextInputBuilder.placeholder.<get-placeholder>|<get-placeholder>(){}[0]
        final fun <set-placeholder>(kotlin/String?) // dev.kord.rest.builder.component/TextInputBuilder.placeholder.<set-placeholder>|<set-placeholder>(kotlin.String?){}[0]
    final var required // dev.kord.rest.builder.component/TextInputBuilder.required|{}required[0]
        final fun <get-required>(): kotlin/Boolean? // dev.kord.rest.builder.component/TextInputBuilder.required.<get-required>|<get-required>(){}[0]
        final fun <set-required>(kotlin/Boolean?) // dev.kord.rest.builder.component/TextInputBuilder.required.<set-required>|<set-required>(kotlin.Boolean?){}[0]
    final var style // dev.kord.rest.builder.component/TextInputBuilder.style|{}style[0]
        final fun <get-style>(): dev.kord.common.entity/TextInputStyle // dev.kord.rest.builder.component/TextInputBuilder.style.<get-style>|<get-style>(){}[0]
        final fun <set-style>(dev.kord.common.entity/TextInputStyle) // dev.kord.rest.builder.component/TextInputBuilder.style.<set-style>|<set-style>(dev.kord.common.entity.TextInputStyle){}[0]
    final var value // dev.kord.rest.builder.component/TextInputBuilder.value|{}value[0]
        final fun <get-value>(): kotlin/String? // dev.kord.rest.builder.component/TextInputBuilder.value.<get-value>|<get-value>(){}[0]
        final fun <set-value>(kotlin/String?) // dev.kord.rest.builder.component/TextInputBuilder.value.<set-value>|<set-value>(kotlin.String?){}[0]

    final fun build(): dev.kord.common.entity/DiscordTextInputComponent // dev.kord.rest.builder.component/TextInputBuilder.build|build(){}[0]
}

final class dev.kord.rest.builder.component/UserSelectBuilder : dev.kord.rest.builder.component/SelectMenuBuilder { // dev.kord.rest.builder.component/UserSelectBuilder|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.builder.component/UserSelectBuilder.<init>|<init>(kotlin.String){}[0]

    final val defaultUsers // dev.kord.rest.builder.component/UserSelectBuilder.defaultUsers|{}defaultUsers[0]
        final fun <get-defaultUsers>(): kotlin.collections/MutableList<dev.kord.common.entity/Snowflake> // dev.kord.rest.builder.component/UserSelectBuilder.defaultUsers.<get-defaultUsers>|<get-defaultUsers>(){}[0]
}

final class dev.kord.rest.builder.guild/CurrentVoiceStateModifyBuilder : dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/CurrentVoiceStateModifyRequest> { // dev.kord.rest.builder.guild/CurrentVoiceStateModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.guild/CurrentVoiceStateModifyBuilder.<init>|<init>(){}[0]

    final var channelId // dev.kord.rest.builder.guild/CurrentVoiceStateModifyBuilder.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.guild/CurrentVoiceStateModifyBuilder.channelId.<get-channelId>|<get-channelId>(){}[0]
        final fun <set-channelId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.guild/CurrentVoiceStateModifyBuilder.channelId.<set-channelId>|<set-channelId>(dev.kord.common.entity.Snowflake?){}[0]
    final var requestToSpeakTimestamp // dev.kord.rest.builder.guild/CurrentVoiceStateModifyBuilder.requestToSpeakTimestamp|{}requestToSpeakTimestamp[0]
        final fun <get-requestToSpeakTimestamp>(): kotlinx.datetime/Instant? // dev.kord.rest.builder.guild/CurrentVoiceStateModifyBuilder.requestToSpeakTimestamp.<get-requestToSpeakTimestamp>|<get-requestToSpeakTimestamp>(){}[0]
        final fun <set-requestToSpeakTimestamp>(kotlinx.datetime/Instant?) // dev.kord.rest.builder.guild/CurrentVoiceStateModifyBuilder.requestToSpeakTimestamp.<set-requestToSpeakTimestamp>|<set-requestToSpeakTimestamp>(kotlinx.datetime.Instant?){}[0]
    final var suppress // dev.kord.rest.builder.guild/CurrentVoiceStateModifyBuilder.suppress|{}suppress[0]
        final fun <get-suppress>(): kotlin/Boolean? // dev.kord.rest.builder.guild/CurrentVoiceStateModifyBuilder.suppress.<get-suppress>|<get-suppress>(){}[0]
        final fun <set-suppress>(kotlin/Boolean?) // dev.kord.rest.builder.guild/CurrentVoiceStateModifyBuilder.suppress.<set-suppress>|<set-suppress>(kotlin.Boolean?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/CurrentVoiceStateModifyRequest // dev.kord.rest.builder.guild/CurrentVoiceStateModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.guild/EmojiCreateBuilder : dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/EmojiCreateRequest> { // dev.kord.rest.builder.guild/EmojiCreateBuilder|null[0]
    constructor <init>(kotlin/String, dev.kord.rest/Image) // dev.kord.rest.builder.guild/EmojiCreateBuilder.<init>|<init>(kotlin.String;dev.kord.rest.Image){}[0]

    final var image // dev.kord.rest.builder.guild/EmojiCreateBuilder.image|{}image[0]
        final fun <get-image>(): dev.kord.rest/Image // dev.kord.rest.builder.guild/EmojiCreateBuilder.image.<get-image>|<get-image>(){}[0]
        final fun <set-image>(dev.kord.rest/Image) // dev.kord.rest.builder.guild/EmojiCreateBuilder.image.<set-image>|<set-image>(dev.kord.rest.Image){}[0]
    final var name // dev.kord.rest.builder.guild/EmojiCreateBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.builder.guild/EmojiCreateBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // dev.kord.rest.builder.guild/EmojiCreateBuilder.name.<set-name>|<set-name>(kotlin.String){}[0]
    final var reason // dev.kord.rest.builder.guild/EmojiCreateBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.guild/EmojiCreateBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.guild/EmojiCreateBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]
    final var roles // dev.kord.rest.builder.guild/EmojiCreateBuilder.roles|{}roles[0]
        final fun <get-roles>(): kotlin.collections/MutableSet<dev.kord.common.entity/Snowflake> // dev.kord.rest.builder.guild/EmojiCreateBuilder.roles.<get-roles>|<get-roles>(){}[0]
        final fun <set-roles>(kotlin.collections/MutableSet<dev.kord.common.entity/Snowflake>) // dev.kord.rest.builder.guild/EmojiCreateBuilder.roles.<set-roles>|<set-roles>(kotlin.collections.MutableSet<dev.kord.common.entity.Snowflake>){}[0]

    final fun toRequest(): dev.kord.rest.json.request/EmojiCreateRequest // dev.kord.rest.builder.guild/EmojiCreateBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.guild/EmojiModifyBuilder : dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/EmojiModifyRequest> { // dev.kord.rest.builder.guild/EmojiModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.guild/EmojiModifyBuilder.<init>|<init>(){}[0]

    final var name // dev.kord.rest.builder.guild/EmojiModifyBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.rest.builder.guild/EmojiModifyBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String?) // dev.kord.rest.builder.guild/EmojiModifyBuilder.name.<set-name>|<set-name>(kotlin.String?){}[0]
    final var reason // dev.kord.rest.builder.guild/EmojiModifyBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.guild/EmojiModifyBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.guild/EmojiModifyBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]
    final var roles // dev.kord.rest.builder.guild/EmojiModifyBuilder.roles|{}roles[0]
        final fun <get-roles>(): kotlin.collections/MutableSet<dev.kord.common.entity/Snowflake>? // dev.kord.rest.builder.guild/EmojiModifyBuilder.roles.<get-roles>|<get-roles>(){}[0]
        final fun <set-roles>(kotlin.collections/MutableSet<dev.kord.common.entity/Snowflake>?) // dev.kord.rest.builder.guild/EmojiModifyBuilder.roles.<set-roles>|<set-roles>(kotlin.collections.MutableSet<dev.kord.common.entity.Snowflake>?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/EmojiModifyRequest // dev.kord.rest.builder.guild/EmojiModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.guild/GuildCreateBuilder : dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/GuildCreateRequest> { // dev.kord.rest.builder.guild/GuildCreateBuilder|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.builder.guild/GuildCreateBuilder.<init>|<init>(kotlin.String){}[0]

    final val channels // dev.kord.rest.builder.guild/GuildCreateBuilder.channels|{}channels[0]
        final fun <get-channels>(): kotlin.collections/MutableList<dev.kord.rest.json.request/GuildChannelCreateRequest> // dev.kord.rest.builder.guild/GuildCreateBuilder.channels.<get-channels>|<get-channels>(){}[0]
    final val roles // dev.kord.rest.builder.guild/GuildCreateBuilder.roles|{}roles[0]
        final fun <get-roles>(): kotlin.collections/MutableList<dev.kord.rest.json.request/GuildRoleCreateRequest> // dev.kord.rest.builder.guild/GuildCreateBuilder.roles.<get-roles>|<get-roles>(){}[0]
    final val snowflakeGenerator // dev.kord.rest.builder.guild/GuildCreateBuilder.snowflakeGenerator|{}snowflakeGenerator[0]
        final fun <get-snowflakeGenerator>(): kotlin.collections/Iterator<dev.kord.common.entity/Snowflake> // dev.kord.rest.builder.guild/GuildCreateBuilder.snowflakeGenerator.<get-snowflakeGenerator>|<get-snowflakeGenerator>(){}[0]

    final var afkChannelId // dev.kord.rest.builder.guild/GuildCreateBuilder.afkChannelId|{}afkChannelId[0]
        final fun <get-afkChannelId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.guild/GuildCreateBuilder.afkChannelId.<get-afkChannelId>|<get-afkChannelId>(){}[0]
        final fun <set-afkChannelId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.guild/GuildCreateBuilder.afkChannelId.<set-afkChannelId>|<set-afkChannelId>(dev.kord.common.entity.Snowflake?){}[0]
    final var afkTimeout // dev.kord.rest.builder.guild/GuildCreateBuilder.afkTimeout|{}afkTimeout[0]
        final fun <get-afkTimeout>(): kotlin.time/Duration? // dev.kord.rest.builder.guild/GuildCreateBuilder.afkTimeout.<get-afkTimeout>|<get-afkTimeout>(){}[0]
        final fun <set-afkTimeout>(kotlin.time/Duration?) // dev.kord.rest.builder.guild/GuildCreateBuilder.afkTimeout.<set-afkTimeout>|<set-afkTimeout>(kotlin.time.Duration?){}[0]
    final var defaultMessageNotificationLevel // dev.kord.rest.builder.guild/GuildCreateBuilder.defaultMessageNotificationLevel|{}defaultMessageNotificationLevel[0]
        final fun <get-defaultMessageNotificationLevel>(): dev.kord.common.entity/DefaultMessageNotificationLevel? // dev.kord.rest.builder.guild/GuildCreateBuilder.defaultMessageNotificationLevel.<get-defaultMessageNotificationLevel>|<get-defaultMessageNotificationLevel>(){}[0]
        final fun <set-defaultMessageNotificationLevel>(dev.kord.common.entity/DefaultMessageNotificationLevel?) // dev.kord.rest.builder.guild/GuildCreateBuilder.defaultMessageNotificationLevel.<set-defaultMessageNotificationLevel>|<set-defaultMessageNotificationLevel>(dev.kord.common.entity.DefaultMessageNotificationLevel?){}[0]
    final var everyoneRole // dev.kord.rest.builder.guild/GuildCreateBuilder.everyoneRole|{}everyoneRole[0]
        final fun <get-everyoneRole>(): dev.kord.rest.builder.role/RoleCreateBuilder? // dev.kord.rest.builder.guild/GuildCreateBuilder.everyoneRole.<get-everyoneRole>|<get-everyoneRole>(){}[0]
        final fun <set-everyoneRole>(dev.kord.rest.builder.role/RoleCreateBuilder?) // dev.kord.rest.builder.guild/GuildCreateBuilder.everyoneRole.<set-everyoneRole>|<set-everyoneRole>(dev.kord.rest.builder.role.RoleCreateBuilder?){}[0]
    final var explicitContentFilter // dev.kord.rest.builder.guild/GuildCreateBuilder.explicitContentFilter|{}explicitContentFilter[0]
        final fun <get-explicitContentFilter>(): dev.kord.common.entity/ExplicitContentFilter? // dev.kord.rest.builder.guild/GuildCreateBuilder.explicitContentFilter.<get-explicitContentFilter>|<get-explicitContentFilter>(){}[0]
        final fun <set-explicitContentFilter>(dev.kord.common.entity/ExplicitContentFilter?) // dev.kord.rest.builder.guild/GuildCreateBuilder.explicitContentFilter.<set-explicitContentFilter>|<set-explicitContentFilter>(dev.kord.common.entity.ExplicitContentFilter?){}[0]
    final var icon // dev.kord.rest.builder.guild/GuildCreateBuilder.icon|{}icon[0]
        final fun <get-icon>(): dev.kord.rest/Image? // dev.kord.rest.builder.guild/GuildCreateBuilder.icon.<get-icon>|<get-icon>(){}[0]
        final fun <set-icon>(dev.kord.rest/Image?) // dev.kord.rest.builder.guild/GuildCreateBuilder.icon.<set-icon>|<set-icon>(dev.kord.rest.Image?){}[0]
    final var name // dev.kord.rest.builder.guild/GuildCreateBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.builder.guild/GuildCreateBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // dev.kord.rest.builder.guild/GuildCreateBuilder.name.<set-name>|<set-name>(kotlin.String){}[0]
    final var region // dev.kord.rest.builder.guild/GuildCreateBuilder.region|{}region[0]
        final fun <get-region>(): kotlin/String? // dev.kord.rest.builder.guild/GuildCreateBuilder.region.<get-region>|<get-region>(){}[0]
        final fun <set-region>(kotlin/String?) // dev.kord.rest.builder.guild/GuildCreateBuilder.region.<set-region>|<set-region>(kotlin.String?){}[0]
    final var systemChannelId // dev.kord.rest.builder.guild/GuildCreateBuilder.systemChannelId|{}systemChannelId[0]
        final fun <get-systemChannelId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.guild/GuildCreateBuilder.systemChannelId.<get-systemChannelId>|<get-systemChannelId>(){}[0]
        final fun <set-systemChannelId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.guild/GuildCreateBuilder.systemChannelId.<set-systemChannelId>|<set-systemChannelId>(dev.kord.common.entity.Snowflake?){}[0]
    final var verificationLevel // dev.kord.rest.builder.guild/GuildCreateBuilder.verificationLevel|{}verificationLevel[0]
        final fun <get-verificationLevel>(): dev.kord.common.entity/VerificationLevel? // dev.kord.rest.builder.guild/GuildCreateBuilder.verificationLevel.<get-verificationLevel>|<get-verificationLevel>(){}[0]
        final fun <set-verificationLevel>(dev.kord.common.entity/VerificationLevel?) // dev.kord.rest.builder.guild/GuildCreateBuilder.verificationLevel.<set-verificationLevel>|<set-verificationLevel>(dev.kord.common.entity.VerificationLevel?){}[0]

    final fun newUniqueSnowflake(): dev.kord.common.entity/Snowflake // dev.kord.rest.builder.guild/GuildCreateBuilder.newUniqueSnowflake|newUniqueSnowflake(){}[0]
    final fun toRequest(): dev.kord.rest.json.request/GuildCreateRequest // dev.kord.rest.builder.guild/GuildCreateBuilder.toRequest|toRequest(){}[0]
    final inline fun category(kotlin/String, dev.kord.common.entity/Snowflake = ..., kotlin/Function1<dev.kord.rest.builder.channel/CategoryCreateBuilder, kotlin/Unit>): dev.kord.common.entity/Snowflake // dev.kord.rest.builder.guild/GuildCreateBuilder.category|category(kotlin.String;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.channel.CategoryCreateBuilder,kotlin.Unit>){}[0]
    final inline fun everyoneRole(kotlin/Function1<dev.kord.rest.builder.role/RoleCreateBuilder, kotlin/Unit>) // dev.kord.rest.builder.guild/GuildCreateBuilder.everyoneRole|everyoneRole(kotlin.Function1<dev.kord.rest.builder.role.RoleCreateBuilder,kotlin.Unit>){}[0]
    final inline fun forumChannel(kotlin/String, dev.kord.common.entity/Snowflake = ..., kotlin/Function1<dev.kord.rest.builder.channel/ForumChannelCreateBuilder, kotlin/Unit>): dev.kord.common.entity/Snowflake // dev.kord.rest.builder.guild/GuildCreateBuilder.forumChannel|forumChannel(kotlin.String;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.channel.ForumChannelCreateBuilder,kotlin.Unit>){}[0]
    final inline fun mediaChannel(kotlin/String, dev.kord.common.entity/Snowflake = ..., kotlin/Function1<dev.kord.rest.builder.channel/MediaChannelCreateBuilder, kotlin/Unit>): dev.kord.common.entity/Snowflake // dev.kord.rest.builder.guild/GuildCreateBuilder.mediaChannel|mediaChannel(kotlin.String;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.channel.MediaChannelCreateBuilder,kotlin.Unit>){}[0]
    final inline fun newsChannel(kotlin/String, dev.kord.common.entity/Snowflake = ..., kotlin/Function1<dev.kord.rest.builder.channel/NewsChannelCreateBuilder, kotlin/Unit>): dev.kord.common.entity/Snowflake // dev.kord.rest.builder.guild/GuildCreateBuilder.newsChannel|newsChannel(kotlin.String;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.channel.NewsChannelCreateBuilder,kotlin.Unit>){}[0]
    final inline fun role(dev.kord.common.entity/Snowflake = ..., kotlin/Function1<dev.kord.rest.builder.role/RoleCreateBuilder, kotlin/Unit>): dev.kord.common.entity/Snowflake // dev.kord.rest.builder.guild/GuildCreateBuilder.role|role(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.role.RoleCreateBuilder,kotlin.Unit>){}[0]
    final inline fun textChannel(kotlin/String, dev.kord.common.entity/Snowflake = ..., kotlin/Function1<dev.kord.rest.builder.channel/TextChannelCreateBuilder, kotlin/Unit>): dev.kord.common.entity/Snowflake // dev.kord.rest.builder.guild/GuildCreateBuilder.textChannel|textChannel(kotlin.String;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.channel.TextChannelCreateBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.rest.builder.guild/GuildModifyBuilder : dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/GuildModifyRequest> { // dev.kord.rest.builder.guild/GuildModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.guild/GuildModifyBuilder.<init>|<init>(){}[0]

    final var afkChannelId // dev.kord.rest.builder.guild/GuildModifyBuilder.afkChannelId|{}afkChannelId[0]
        final fun <get-afkChannelId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.guild/GuildModifyBuilder.afkChannelId.<get-afkChannelId>|<get-afkChannelId>(){}[0]
        final fun <set-afkChannelId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.guild/GuildModifyBuilder.afkChannelId.<set-afkChannelId>|<set-afkChannelId>(dev.kord.common.entity.Snowflake?){}[0]
    final var afkTimeout // dev.kord.rest.builder.guild/GuildModifyBuilder.afkTimeout|{}afkTimeout[0]
        final fun <get-afkTimeout>(): kotlin.time/Duration? // dev.kord.rest.builder.guild/GuildModifyBuilder.afkTimeout.<get-afkTimeout>|<get-afkTimeout>(){}[0]
        final fun <set-afkTimeout>(kotlin.time/Duration?) // dev.kord.rest.builder.guild/GuildModifyBuilder.afkTimeout.<set-afkTimeout>|<set-afkTimeout>(kotlin.time.Duration?){}[0]
    final var banner // dev.kord.rest.builder.guild/GuildModifyBuilder.banner|{}banner[0]
        final fun <get-banner>(): dev.kord.rest/Image? // dev.kord.rest.builder.guild/GuildModifyBuilder.banner.<get-banner>|<get-banner>(){}[0]
        final fun <set-banner>(dev.kord.rest/Image?) // dev.kord.rest.builder.guild/GuildModifyBuilder.banner.<set-banner>|<set-banner>(dev.kord.rest.Image?){}[0]
    final var explicitContentFilter // dev.kord.rest.builder.guild/GuildModifyBuilder.explicitContentFilter|{}explicitContentFilter[0]
        final fun <get-explicitContentFilter>(): dev.kord.common.entity/ExplicitContentFilter? // dev.kord.rest.builder.guild/GuildModifyBuilder.explicitContentFilter.<get-explicitContentFilter>|<get-explicitContentFilter>(){}[0]
        final fun <set-explicitContentFilter>(dev.kord.common.entity/ExplicitContentFilter?) // dev.kord.rest.builder.guild/GuildModifyBuilder.explicitContentFilter.<set-explicitContentFilter>|<set-explicitContentFilter>(dev.kord.common.entity.ExplicitContentFilter?){}[0]
    final var features // dev.kord.rest.builder.guild/GuildModifyBuilder.features|{}features[0]
        final fun <get-features>(): kotlin.collections/Set<dev.kord.common.entity/GuildFeature>? // dev.kord.rest.builder.guild/GuildModifyBuilder.features.<get-features>|<get-features>(){}[0]
        final fun <set-features>(kotlin.collections/Set<dev.kord.common.entity/GuildFeature>?) // dev.kord.rest.builder.guild/GuildModifyBuilder.features.<set-features>|<set-features>(kotlin.collections.Set<dev.kord.common.entity.GuildFeature>?){}[0]
    final var icon // dev.kord.rest.builder.guild/GuildModifyBuilder.icon|{}icon[0]
        final fun <get-icon>(): dev.kord.rest/Image? // dev.kord.rest.builder.guild/GuildModifyBuilder.icon.<get-icon>|<get-icon>(){}[0]
        final fun <set-icon>(dev.kord.rest/Image?) // dev.kord.rest.builder.guild/GuildModifyBuilder.icon.<set-icon>|<set-icon>(dev.kord.rest.Image?){}[0]
    final var name // dev.kord.rest.builder.guild/GuildModifyBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.rest.builder.guild/GuildModifyBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String?) // dev.kord.rest.builder.guild/GuildModifyBuilder.name.<set-name>|<set-name>(kotlin.String?){}[0]
    final var notificationLevel // dev.kord.rest.builder.guild/GuildModifyBuilder.notificationLevel|{}notificationLevel[0]
        final fun <get-notificationLevel>(): dev.kord.common.entity/DefaultMessageNotificationLevel? // dev.kord.rest.builder.guild/GuildModifyBuilder.notificationLevel.<get-notificationLevel>|<get-notificationLevel>(){}[0]
        final fun <set-notificationLevel>(dev.kord.common.entity/DefaultMessageNotificationLevel?) // dev.kord.rest.builder.guild/GuildModifyBuilder.notificationLevel.<set-notificationLevel>|<set-notificationLevel>(dev.kord.common.entity.DefaultMessageNotificationLevel?){}[0]
    final var ownerId // dev.kord.rest.builder.guild/GuildModifyBuilder.ownerId|{}ownerId[0]
        final fun <get-ownerId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.guild/GuildModifyBuilder.ownerId.<get-ownerId>|<get-ownerId>(){}[0]
        final fun <set-ownerId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.guild/GuildModifyBuilder.ownerId.<set-ownerId>|<set-ownerId>(dev.kord.common.entity.Snowflake?){}[0]
    final var preferredLocale // dev.kord.rest.builder.guild/GuildModifyBuilder.preferredLocale|{}preferredLocale[0]
        final fun <get-preferredLocale>(): dev.kord.common/Locale? // dev.kord.rest.builder.guild/GuildModifyBuilder.preferredLocale.<get-preferredLocale>|<get-preferredLocale>(){}[0]
        final fun <set-preferredLocale>(dev.kord.common/Locale?) // dev.kord.rest.builder.guild/GuildModifyBuilder.preferredLocale.<set-preferredLocale>|<set-preferredLocale>(dev.kord.common.Locale?){}[0]
    final var publicUpdatesChannelId // dev.kord.rest.builder.guild/GuildModifyBuilder.publicUpdatesChannelId|{}publicUpdatesChannelId[0]
        final fun <get-publicUpdatesChannelId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.guild/GuildModifyBuilder.publicUpdatesChannelId.<get-publicUpdatesChannelId>|<get-publicUpdatesChannelId>(){}[0]
        final fun <set-publicUpdatesChannelId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.guild/GuildModifyBuilder.publicUpdatesChannelId.<set-publicUpdatesChannelId>|<set-publicUpdatesChannelId>(dev.kord.common.entity.Snowflake?){}[0]
    final var reason // dev.kord.rest.builder.guild/GuildModifyBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.guild/GuildModifyBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.guild/GuildModifyBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]
    final var region // dev.kord.rest.builder.guild/GuildModifyBuilder.region|{}region[0]
        final fun <get-region>(): kotlin/String? // dev.kord.rest.builder.guild/GuildModifyBuilder.region.<get-region>|<get-region>(){}[0]
        final fun <set-region>(kotlin/String?) // dev.kord.rest.builder.guild/GuildModifyBuilder.region.<set-region>|<set-region>(kotlin.String?){}[0]
    final var rulesChannelId // dev.kord.rest.builder.guild/GuildModifyBuilder.rulesChannelId|{}rulesChannelId[0]
        final fun <get-rulesChannelId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.guild/GuildModifyBuilder.rulesChannelId.<get-rulesChannelId>|<get-rulesChannelId>(){}[0]
        final fun <set-rulesChannelId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.guild/GuildModifyBuilder.rulesChannelId.<set-rulesChannelId>|<set-rulesChannelId>(dev.kord.common.entity.Snowflake?){}[0]
    final var safetyAlertsChannelId // dev.kord.rest.builder.guild/GuildModifyBuilder.safetyAlertsChannelId|{}safetyAlertsChannelId[0]
        final fun <get-safetyAlertsChannelId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.guild/GuildModifyBuilder.safetyAlertsChannelId.<get-safetyAlertsChannelId>|<get-safetyAlertsChannelId>(){}[0]
        final fun <set-safetyAlertsChannelId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.guild/GuildModifyBuilder.safetyAlertsChannelId.<set-safetyAlertsChannelId>|<set-safetyAlertsChannelId>(dev.kord.common.entity.Snowflake?){}[0]
    final var splash // dev.kord.rest.builder.guild/GuildModifyBuilder.splash|{}splash[0]
        final fun <get-splash>(): dev.kord.rest/Image? // dev.kord.rest.builder.guild/GuildModifyBuilder.splash.<get-splash>|<get-splash>(){}[0]
        final fun <set-splash>(dev.kord.rest/Image?) // dev.kord.rest.builder.guild/GuildModifyBuilder.splash.<set-splash>|<set-splash>(dev.kord.rest.Image?){}[0]
    final var systemChannelId // dev.kord.rest.builder.guild/GuildModifyBuilder.systemChannelId|{}systemChannelId[0]
        final fun <get-systemChannelId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.guild/GuildModifyBuilder.systemChannelId.<get-systemChannelId>|<get-systemChannelId>(){}[0]
        final fun <set-systemChannelId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.guild/GuildModifyBuilder.systemChannelId.<set-systemChannelId>|<set-systemChannelId>(dev.kord.common.entity.Snowflake?){}[0]
    final var verificationLevel // dev.kord.rest.builder.guild/GuildModifyBuilder.verificationLevel|{}verificationLevel[0]
        final fun <get-verificationLevel>(): dev.kord.common.entity/VerificationLevel? // dev.kord.rest.builder.guild/GuildModifyBuilder.verificationLevel.<get-verificationLevel>|<get-verificationLevel>(){}[0]
        final fun <set-verificationLevel>(dev.kord.common.entity/VerificationLevel?) // dev.kord.rest.builder.guild/GuildModifyBuilder.verificationLevel.<set-verificationLevel>|<set-verificationLevel>(dev.kord.common.entity.VerificationLevel?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/GuildModifyRequest // dev.kord.rest.builder.guild/GuildModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.guild/GuildOnboardingModifyBuilder : dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/GuildOnboardingModifyRequest> { // dev.kord.rest.builder.guild/GuildOnboardingModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.guild/GuildOnboardingModifyBuilder.<init>|<init>(){}[0]

    final var defaultChannelIds // dev.kord.rest.builder.guild/GuildOnboardingModifyBuilder.defaultChannelIds|{}defaultChannelIds[0]
        final fun <get-defaultChannelIds>(): kotlin.collections/MutableList<dev.kord.common.entity/Snowflake>? // dev.kord.rest.builder.guild/GuildOnboardingModifyBuilder.defaultChannelIds.<get-defaultChannelIds>|<get-defaultChannelIds>(){}[0]
        final fun <set-defaultChannelIds>(kotlin.collections/MutableList<dev.kord.common.entity/Snowflake>?) // dev.kord.rest.builder.guild/GuildOnboardingModifyBuilder.defaultChannelIds.<set-defaultChannelIds>|<set-defaultChannelIds>(kotlin.collections.MutableList<dev.kord.common.entity.Snowflake>?){}[0]
    final var enabled // dev.kord.rest.builder.guild/GuildOnboardingModifyBuilder.enabled|{}enabled[0]
        final fun <get-enabled>(): kotlin/Boolean? // dev.kord.rest.builder.guild/GuildOnboardingModifyBuilder.enabled.<get-enabled>|<get-enabled>(){}[0]
        final fun <set-enabled>(kotlin/Boolean?) // dev.kord.rest.builder.guild/GuildOnboardingModifyBuilder.enabled.<set-enabled>|<set-enabled>(kotlin.Boolean?){}[0]
    final var mode // dev.kord.rest.builder.guild/GuildOnboardingModifyBuilder.mode|{}mode[0]
        final fun <get-mode>(): dev.kord.common.entity/OnboardingMode? // dev.kord.rest.builder.guild/GuildOnboardingModifyBuilder.mode.<get-mode>|<get-mode>(){}[0]
        final fun <set-mode>(dev.kord.common.entity/OnboardingMode?) // dev.kord.rest.builder.guild/GuildOnboardingModifyBuilder.mode.<set-mode>|<set-mode>(dev.kord.common.entity.OnboardingMode?){}[0]
    final var prompts // dev.kord.rest.builder.guild/GuildOnboardingModifyBuilder.prompts|{}prompts[0]
        final fun <get-prompts>(): kotlin.collections/MutableList<dev.kord.rest.builder.guild/OnboardingPromptBuilder>? // dev.kord.rest.builder.guild/GuildOnboardingModifyBuilder.prompts.<get-prompts>|<get-prompts>(){}[0]
        final fun <set-prompts>(kotlin.collections/MutableList<dev.kord.rest.builder.guild/OnboardingPromptBuilder>?) // dev.kord.rest.builder.guild/GuildOnboardingModifyBuilder.prompts.<set-prompts>|<set-prompts>(kotlin.collections.MutableList<dev.kord.rest.builder.guild.OnboardingPromptBuilder>?){}[0]
    final var reason // dev.kord.rest.builder.guild/GuildOnboardingModifyBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.guild/GuildOnboardingModifyBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.guild/GuildOnboardingModifyBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/GuildOnboardingModifyRequest // dev.kord.rest.builder.guild/GuildOnboardingModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.guild/GuildWidgetModifyBuilder : dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/GuildWidgetModifyRequest> { // dev.kord.rest.builder.guild/GuildWidgetModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.guild/GuildWidgetModifyBuilder.<init>|<init>(){}[0]

    final var channelId // dev.kord.rest.builder.guild/GuildWidgetModifyBuilder.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.guild/GuildWidgetModifyBuilder.channelId.<get-channelId>|<get-channelId>(){}[0]
        final fun <set-channelId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.guild/GuildWidgetModifyBuilder.channelId.<set-channelId>|<set-channelId>(dev.kord.common.entity.Snowflake?){}[0]
    final var enabled // dev.kord.rest.builder.guild/GuildWidgetModifyBuilder.enabled|{}enabled[0]
        final fun <get-enabled>(): kotlin/Boolean? // dev.kord.rest.builder.guild/GuildWidgetModifyBuilder.enabled.<get-enabled>|<get-enabled>(){}[0]
        final fun <set-enabled>(kotlin/Boolean?) // dev.kord.rest.builder.guild/GuildWidgetModifyBuilder.enabled.<set-enabled>|<set-enabled>(kotlin.Boolean?){}[0]
    final var reason // dev.kord.rest.builder.guild/GuildWidgetModifyBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.guild/GuildWidgetModifyBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.guild/GuildWidgetModifyBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/GuildWidgetModifyRequest // dev.kord.rest.builder.guild/GuildWidgetModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.guild/OnboardingPromptBuilder : dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/OnboardingPromptRequest> { // dev.kord.rest.builder.guild/OnboardingPromptBuilder|null[0]
    constructor <init>(dev.kord.common.entity/OnboardingPromptType, kotlin/String, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean) // dev.kord.rest.builder.guild/OnboardingPromptBuilder.<init>|<init>(dev.kord.common.entity.OnboardingPromptType;kotlin.String;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean){}[0]

    final val options // dev.kord.rest.builder.guild/OnboardingPromptBuilder.options|{}options[0]
        final fun <get-options>(): kotlin.collections/MutableList<dev.kord.rest.builder.guild/OnboardingPromptOptionBuilder> // dev.kord.rest.builder.guild/OnboardingPromptBuilder.options.<get-options>|<get-options>(){}[0]

    final var id // dev.kord.rest.builder.guild/OnboardingPromptBuilder.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.guild/OnboardingPromptBuilder.id.<get-id>|<get-id>(){}[0]
        final fun <set-id>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.guild/OnboardingPromptBuilder.id.<set-id>|<set-id>(dev.kord.common.entity.Snowflake?){}[0]
    final var inOnboarding // dev.kord.rest.builder.guild/OnboardingPromptBuilder.inOnboarding|{}inOnboarding[0]
        final fun <get-inOnboarding>(): kotlin/Boolean // dev.kord.rest.builder.guild/OnboardingPromptBuilder.inOnboarding.<get-inOnboarding>|<get-inOnboarding>(){}[0]
        final fun <set-inOnboarding>(kotlin/Boolean) // dev.kord.rest.builder.guild/OnboardingPromptBuilder.inOnboarding.<set-inOnboarding>|<set-inOnboarding>(kotlin.Boolean){}[0]
    final var required // dev.kord.rest.builder.guild/OnboardingPromptBuilder.required|{}required[0]
        final fun <get-required>(): kotlin/Boolean // dev.kord.rest.builder.guild/OnboardingPromptBuilder.required.<get-required>|<get-required>(){}[0]
        final fun <set-required>(kotlin/Boolean) // dev.kord.rest.builder.guild/OnboardingPromptBuilder.required.<set-required>|<set-required>(kotlin.Boolean){}[0]
    final var singleSelect // dev.kord.rest.builder.guild/OnboardingPromptBuilder.singleSelect|{}singleSelect[0]
        final fun <get-singleSelect>(): kotlin/Boolean // dev.kord.rest.builder.guild/OnboardingPromptBuilder.singleSelect.<get-singleSelect>|<get-singleSelect>(){}[0]
        final fun <set-singleSelect>(kotlin/Boolean) // dev.kord.rest.builder.guild/OnboardingPromptBuilder.singleSelect.<set-singleSelect>|<set-singleSelect>(kotlin.Boolean){}[0]
    final var title // dev.kord.rest.builder.guild/OnboardingPromptBuilder.title|{}title[0]
        final fun <get-title>(): kotlin/String // dev.kord.rest.builder.guild/OnboardingPromptBuilder.title.<get-title>|<get-title>(){}[0]
        final fun <set-title>(kotlin/String) // dev.kord.rest.builder.guild/OnboardingPromptBuilder.title.<set-title>|<set-title>(kotlin.String){}[0]
    final var type // dev.kord.rest.builder.guild/OnboardingPromptBuilder.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/OnboardingPromptType // dev.kord.rest.builder.guild/OnboardingPromptBuilder.type.<get-type>|<get-type>(){}[0]
        final fun <set-type>(dev.kord.common.entity/OnboardingPromptType) // dev.kord.rest.builder.guild/OnboardingPromptBuilder.type.<set-type>|<set-type>(dev.kord.common.entity.OnboardingPromptType){}[0]

    final fun toRequest(): dev.kord.rest.json.request/OnboardingPromptRequest // dev.kord.rest.builder.guild/OnboardingPromptBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.guild/OnboardingPromptOptionBuilder : dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/OnboardingPromptOptionRequest> { // dev.kord.rest.builder.guild/OnboardingPromptOptionBuilder|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.builder.guild/OnboardingPromptOptionBuilder.<init>|<init>(kotlin.String){}[0]

    final val channelIds // dev.kord.rest.builder.guild/OnboardingPromptOptionBuilder.channelIds|{}channelIds[0]
        final fun <get-channelIds>(): kotlin.collections/MutableList<dev.kord.common.entity/Snowflake> // dev.kord.rest.builder.guild/OnboardingPromptOptionBuilder.channelIds.<get-channelIds>|<get-channelIds>(){}[0]
    final val roleIds // dev.kord.rest.builder.guild/OnboardingPromptOptionBuilder.roleIds|{}roleIds[0]
        final fun <get-roleIds>(): kotlin.collections/MutableList<dev.kord.common.entity/Snowflake> // dev.kord.rest.builder.guild/OnboardingPromptOptionBuilder.roleIds.<get-roleIds>|<get-roleIds>(){}[0]

    final var description // dev.kord.rest.builder.guild/OnboardingPromptOptionBuilder.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.rest.builder.guild/OnboardingPromptOptionBuilder.description.<get-description>|<get-description>(){}[0]
        final fun <set-description>(kotlin/String?) // dev.kord.rest.builder.guild/OnboardingPromptOptionBuilder.description.<set-description>|<set-description>(kotlin.String?){}[0]
    final var title // dev.kord.rest.builder.guild/OnboardingPromptOptionBuilder.title|{}title[0]
        final fun <get-title>(): kotlin/String // dev.kord.rest.builder.guild/OnboardingPromptOptionBuilder.title.<get-title>|<get-title>(){}[0]
        final fun <set-title>(kotlin/String) // dev.kord.rest.builder.guild/OnboardingPromptOptionBuilder.title.<set-title>|<set-title>(kotlin.String){}[0]

    final fun toRequest(): dev.kord.rest.json.request/OnboardingPromptOptionRequest // dev.kord.rest.builder.guild/OnboardingPromptOptionBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.guild/ScheduledEventCreateBuilder : dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/GuildScheduledEventCreateRequest> { // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity/GuildScheduledEventPrivacyLevel, kotlinx.datetime/Instant, dev.kord.common.entity/ScheduledEntityType) // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.<init>|<init>(kotlin.String;dev.kord.common.entity.GuildScheduledEventPrivacyLevel;kotlinx.datetime.Instant;dev.kord.common.entity.ScheduledEntityType){}[0]

    final var channelId // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.channelId.<get-channelId>|<get-channelId>(){}[0]
        final fun <set-channelId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.channelId.<set-channelId>|<set-channelId>(dev.kord.common.entity.Snowflake?){}[0]
    final var description // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.description.<get-description>|<get-description>(){}[0]
        final fun <set-description>(kotlin/String?) // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.description.<set-description>|<set-description>(kotlin.String?){}[0]
    final var entityMetadata // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.entityMetadata|{}entityMetadata[0]
        final fun <get-entityMetadata>(): dev.kord.common.entity/GuildScheduledEventEntityMetadata? // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.entityMetadata.<get-entityMetadata>|<get-entityMetadata>(){}[0]
        final fun <set-entityMetadata>(dev.kord.common.entity/GuildScheduledEventEntityMetadata?) // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.entityMetadata.<set-entityMetadata>|<set-entityMetadata>(dev.kord.common.entity.GuildScheduledEventEntityMetadata?){}[0]
    final var entityType // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.entityType|{}entityType[0]
        final fun <get-entityType>(): dev.kord.common.entity/ScheduledEntityType // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.entityType.<get-entityType>|<get-entityType>(){}[0]
        final fun <set-entityType>(dev.kord.common.entity/ScheduledEntityType) // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.entityType.<set-entityType>|<set-entityType>(dev.kord.common.entity.ScheduledEntityType){}[0]
    final var image // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.image|{}image[0]
        final fun <get-image>(): dev.kord.rest/Image? // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.image.<get-image>|<get-image>(){}[0]
        final fun <set-image>(dev.kord.rest/Image?) // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.image.<set-image>|<set-image>(dev.kord.rest.Image?){}[0]
    final var name // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.name.<set-name>|<set-name>(kotlin.String){}[0]
    final var privacyLevel // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.privacyLevel|{}privacyLevel[0]
        final fun <get-privacyLevel>(): dev.kord.common.entity/GuildScheduledEventPrivacyLevel // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.privacyLevel.<get-privacyLevel>|<get-privacyLevel>(){}[0]
        final fun <set-privacyLevel>(dev.kord.common.entity/GuildScheduledEventPrivacyLevel) // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.privacyLevel.<set-privacyLevel>|<set-privacyLevel>(dev.kord.common.entity.GuildScheduledEventPrivacyLevel){}[0]
    final var reason // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]
    final var scheduledEndTime // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.scheduledEndTime|{}scheduledEndTime[0]
        final fun <get-scheduledEndTime>(): kotlinx.datetime/Instant? // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.scheduledEndTime.<get-scheduledEndTime>|<get-scheduledEndTime>(){}[0]
        final fun <set-scheduledEndTime>(kotlinx.datetime/Instant?) // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.scheduledEndTime.<set-scheduledEndTime>|<set-scheduledEndTime>(kotlinx.datetime.Instant?){}[0]
    final var scheduledStartTime // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.scheduledStartTime|{}scheduledStartTime[0]
        final fun <get-scheduledStartTime>(): kotlinx.datetime/Instant // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.scheduledStartTime.<get-scheduledStartTime>|<get-scheduledStartTime>(){}[0]
        final fun <set-scheduledStartTime>(kotlinx.datetime/Instant) // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.scheduledStartTime.<set-scheduledStartTime>|<set-scheduledStartTime>(kotlinx.datetime.Instant){}[0]

    final fun toRequest(): dev.kord.rest.json.request/GuildScheduledEventCreateRequest // dev.kord.rest.builder.guild/ScheduledEventCreateBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.guild/StickerModifyBuilder : dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/GuildStickerModifyRequest> { // dev.kord.rest.builder.guild/StickerModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.guild/StickerModifyBuilder.<init>|<init>(){}[0]

    final var description // dev.kord.rest.builder.guild/StickerModifyBuilder.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.rest.builder.guild/StickerModifyBuilder.description.<get-description>|<get-description>(){}[0]
        final fun <set-description>(kotlin/String?) // dev.kord.rest.builder.guild/StickerModifyBuilder.description.<set-description>|<set-description>(kotlin.String?){}[0]
    final var name // dev.kord.rest.builder.guild/StickerModifyBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.rest.builder.guild/StickerModifyBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String?) // dev.kord.rest.builder.guild/StickerModifyBuilder.name.<set-name>|<set-name>(kotlin.String?){}[0]
    final var tags // dev.kord.rest.builder.guild/StickerModifyBuilder.tags|{}tags[0]
        final fun <get-tags>(): kotlin/String? // dev.kord.rest.builder.guild/StickerModifyBuilder.tags.<get-tags>|<get-tags>(){}[0]
        final fun <set-tags>(kotlin/String?) // dev.kord.rest.builder.guild/StickerModifyBuilder.tags.<set-tags>|<set-tags>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/GuildStickerModifyRequest // dev.kord.rest.builder.guild/StickerModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.guild/VoiceStateModifyBuilder : dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/VoiceStateModifyRequest> { // dev.kord.rest.builder.guild/VoiceStateModifyBuilder|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake) // dev.kord.rest.builder.guild/VoiceStateModifyBuilder.<init>|<init>(dev.kord.common.entity.Snowflake){}[0]

    final var channelId // dev.kord.rest.builder.guild/VoiceStateModifyBuilder.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.rest.builder.guild/VoiceStateModifyBuilder.channelId.<get-channelId>|<get-channelId>(){}[0]
        final fun <set-channelId>(dev.kord.common.entity/Snowflake) // dev.kord.rest.builder.guild/VoiceStateModifyBuilder.channelId.<set-channelId>|<set-channelId>(dev.kord.common.entity.Snowflake){}[0]
    final var suppress // dev.kord.rest.builder.guild/VoiceStateModifyBuilder.suppress|{}suppress[0]
        final fun <get-suppress>(): kotlin/Boolean? // dev.kord.rest.builder.guild/VoiceStateModifyBuilder.suppress.<get-suppress>|<get-suppress>(){}[0]
        final fun <set-suppress>(kotlin/Boolean?) // dev.kord.rest.builder.guild/VoiceStateModifyBuilder.suppress.<set-suppress>|<set-suppress>(kotlin.Boolean?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/VoiceStateModifyRequest // dev.kord.rest.builder.guild/VoiceStateModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.guild/WelcomeScreenChannelBuilder : dev.kord.rest.builder/RequestBuilder<dev.kord.common.entity/DiscordWelcomeScreenChannel> { // dev.kord.rest.builder.guild/WelcomeScreenChannelBuilder|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake?, kotlin/String?) // dev.kord.rest.builder.guild/WelcomeScreenChannelBuilder.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake?;kotlin.String?){}[0]

    final var channelId // dev.kord.rest.builder.guild/WelcomeScreenChannelBuilder.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.rest.builder.guild/WelcomeScreenChannelBuilder.channelId.<get-channelId>|<get-channelId>(){}[0]
        final fun <set-channelId>(dev.kord.common.entity/Snowflake) // dev.kord.rest.builder.guild/WelcomeScreenChannelBuilder.channelId.<set-channelId>|<set-channelId>(dev.kord.common.entity.Snowflake){}[0]
    final var description // dev.kord.rest.builder.guild/WelcomeScreenChannelBuilder.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.rest.builder.guild/WelcomeScreenChannelBuilder.description.<get-description>|<get-description>(){}[0]
        final fun <set-description>(kotlin/String) // dev.kord.rest.builder.guild/WelcomeScreenChannelBuilder.description.<set-description>|<set-description>(kotlin.String){}[0]
    final var emojiId // dev.kord.rest.builder.guild/WelcomeScreenChannelBuilder.emojiId|{}emojiId[0]
        final fun <get-emojiId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.guild/WelcomeScreenChannelBuilder.emojiId.<get-emojiId>|<get-emojiId>(){}[0]
        final fun <set-emojiId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.guild/WelcomeScreenChannelBuilder.emojiId.<set-emojiId>|<set-emojiId>(dev.kord.common.entity.Snowflake?){}[0]
    final var emojiName // dev.kord.rest.builder.guild/WelcomeScreenChannelBuilder.emojiName|{}emojiName[0]
        final fun <get-emojiName>(): kotlin/String? // dev.kord.rest.builder.guild/WelcomeScreenChannelBuilder.emojiName.<get-emojiName>|<get-emojiName>(){}[0]
        final fun <set-emojiName>(kotlin/String?) // dev.kord.rest.builder.guild/WelcomeScreenChannelBuilder.emojiName.<set-emojiName>|<set-emojiName>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.common.entity/DiscordWelcomeScreenChannel // dev.kord.rest.builder.guild/WelcomeScreenChannelBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.guild/WelcomeScreenModifyBuilder : dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest> { // dev.kord.rest.builder.guild/WelcomeScreenModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.guild/WelcomeScreenModifyBuilder.<init>|<init>(){}[0]

    final var description // dev.kord.rest.builder.guild/WelcomeScreenModifyBuilder.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.rest.builder.guild/WelcomeScreenModifyBuilder.description.<get-description>|<get-description>(){}[0]
        final fun <set-description>(kotlin/String?) // dev.kord.rest.builder.guild/WelcomeScreenModifyBuilder.description.<set-description>|<set-description>(kotlin.String?){}[0]
    final var enabled // dev.kord.rest.builder.guild/WelcomeScreenModifyBuilder.enabled|{}enabled[0]
        final fun <get-enabled>(): kotlin/Boolean? // dev.kord.rest.builder.guild/WelcomeScreenModifyBuilder.enabled.<get-enabled>|<get-enabled>(){}[0]
        final fun <set-enabled>(kotlin/Boolean?) // dev.kord.rest.builder.guild/WelcomeScreenModifyBuilder.enabled.<set-enabled>|<set-enabled>(kotlin.Boolean?){}[0]
    final var reason // dev.kord.rest.builder.guild/WelcomeScreenModifyBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.guild/WelcomeScreenModifyBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.guild/WelcomeScreenModifyBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]
    final var welcomeScreenChannels // dev.kord.rest.builder.guild/WelcomeScreenModifyBuilder.welcomeScreenChannels|{}welcomeScreenChannels[0]
        final fun <get-welcomeScreenChannels>(): kotlin.collections/MutableList<dev.kord.rest.builder.guild/WelcomeScreenChannelBuilder>? // dev.kord.rest.builder.guild/WelcomeScreenModifyBuilder.welcomeScreenChannels.<get-welcomeScreenChannels>|<get-welcomeScreenChannels>(){}[0]
        final fun <set-welcomeScreenChannels>(kotlin.collections/MutableList<dev.kord.rest.builder.guild/WelcomeScreenChannelBuilder>?) // dev.kord.rest.builder.guild/WelcomeScreenModifyBuilder.welcomeScreenChannels.<set-welcomeScreenChannels>|<set-welcomeScreenChannels>(kotlin.collections.MutableList<dev.kord.rest.builder.guild.WelcomeScreenChannelBuilder>?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest // dev.kord.rest.builder.guild/WelcomeScreenModifyBuilder.toRequest|toRequest(){}[0]
    final inline fun welcomeChannel(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.guild/WelcomeScreenChannelBuilder, kotlin/Unit>) // dev.kord.rest.builder.guild/WelcomeScreenModifyBuilder.welcomeChannel|welcomeChannel(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.guild.WelcomeScreenChannelBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.rest.builder.integration/IntegrationModifyBuilder : dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/GuildIntegrationModifyRequest> { // dev.kord.rest.builder.integration/IntegrationModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.integration/IntegrationModifyBuilder.<init>|<init>(){}[0]

    final var enableEmoticons // dev.kord.rest.builder.integration/IntegrationModifyBuilder.enableEmoticons|{}enableEmoticons[0]
        final fun <get-enableEmoticons>(): kotlin/Boolean? // dev.kord.rest.builder.integration/IntegrationModifyBuilder.enableEmoticons.<get-enableEmoticons>|<get-enableEmoticons>(){}[0]
        final fun <set-enableEmoticons>(kotlin/Boolean?) // dev.kord.rest.builder.integration/IntegrationModifyBuilder.enableEmoticons.<set-enableEmoticons>|<set-enableEmoticons>(kotlin.Boolean?){}[0]
    final var expireBehavior // dev.kord.rest.builder.integration/IntegrationModifyBuilder.expireBehavior|{}expireBehavior[0]
        final fun <get-expireBehavior>(): dev.kord.common.entity/IntegrationExpireBehavior? // dev.kord.rest.builder.integration/IntegrationModifyBuilder.expireBehavior.<get-expireBehavior>|<get-expireBehavior>(){}[0]
        final fun <set-expireBehavior>(dev.kord.common.entity/IntegrationExpireBehavior?) // dev.kord.rest.builder.integration/IntegrationModifyBuilder.expireBehavior.<set-expireBehavior>|<set-expireBehavior>(dev.kord.common.entity.IntegrationExpireBehavior?){}[0]
    final var expirePeriodInDays // dev.kord.rest.builder.integration/IntegrationModifyBuilder.expirePeriodInDays|{}expirePeriodInDays[0]
        final fun <get-expirePeriodInDays>(): kotlin/Int? // dev.kord.rest.builder.integration/IntegrationModifyBuilder.expirePeriodInDays.<get-expirePeriodInDays>|<get-expirePeriodInDays>(){}[0]
        final fun <set-expirePeriodInDays>(kotlin/Int?) // dev.kord.rest.builder.integration/IntegrationModifyBuilder.expirePeriodInDays.<set-expirePeriodInDays>|<set-expirePeriodInDays>(kotlin.Int?){}[0]
    final var reason // dev.kord.rest.builder.integration/IntegrationModifyBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.integration/IntegrationModifyBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.integration/IntegrationModifyBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/GuildIntegrationModifyRequest // dev.kord.rest.builder.integration/IntegrationModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.interaction/AttachmentBuilder : dev.kord.rest.builder.interaction/OptionsBuilder { // dev.kord.rest.builder.interaction/AttachmentBuilder|null[0]
    constructor <init>(kotlin/String, kotlin/String) // dev.kord.rest.builder.interaction/AttachmentBuilder.<init>|<init>(kotlin.String;kotlin.String){}[0]
}

final class dev.kord.rest.builder.interaction/BooleanBuilder : dev.kord.rest.builder.interaction/OptionsBuilder { // dev.kord.rest.builder.interaction/BooleanBuilder|null[0]
    constructor <init>(kotlin/String, kotlin/String) // dev.kord.rest.builder.interaction/BooleanBuilder.<init>|<init>(kotlin.String;kotlin.String){}[0]
}

final class dev.kord.rest.builder.interaction/ChannelBuilder : dev.kord.rest.builder.interaction/OptionsBuilder { // dev.kord.rest.builder.interaction/ChannelBuilder|null[0]
    constructor <init>(kotlin/String, kotlin/String) // dev.kord.rest.builder.interaction/ChannelBuilder.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final var channelTypes // dev.kord.rest.builder.interaction/ChannelBuilder.channelTypes|{}channelTypes[0]
        final fun <get-channelTypes>(): kotlin.collections/List<dev.kord.common.entity/ChannelType>? // dev.kord.rest.builder.interaction/ChannelBuilder.channelTypes.<get-channelTypes>|<get-channelTypes>(){}[0]
        final fun <set-channelTypes>(kotlin.collections/List<dev.kord.common.entity/ChannelType>?) // dev.kord.rest.builder.interaction/ChannelBuilder.channelTypes.<set-channelTypes>|<set-channelTypes>(kotlin.collections.List<dev.kord.common.entity.ChannelType>?){}[0]

    final fun toRequest(): dev.kord.common.entity/ApplicationCommandOption // dev.kord.rest.builder.interaction/ChannelBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl : dev.kord.rest.builder.interaction/GlobalChatInputCreateBuilder { // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl|null[0]
    constructor <init>(kotlin/String, kotlin/String) // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final val type // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ApplicationCommandType // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.type.<get-type>|<get-type>(){}[0]

    final var defaultMemberPermissions // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.defaultMemberPermissions|{}defaultMemberPermissions[0]
        final fun <get-defaultMemberPermissions>(): dev.kord.common.entity/Permissions? // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.defaultMemberPermissions.<get-defaultMemberPermissions>|<get-defaultMemberPermissions>(){}[0]
        final fun <set-defaultMemberPermissions>(dev.kord.common.entity/Permissions?) // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.defaultMemberPermissions.<set-defaultMemberPermissions>|<set-defaultMemberPermissions>(dev.kord.common.entity.Permissions?){}[0]
    final var defaultPermission // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.defaultPermission|{}defaultPermission[0]
        final fun <get-defaultPermission>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.defaultPermission.<get-defaultPermission>|<get-defaultPermission>(){}[0]
        final fun <set-defaultPermission>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.defaultPermission.<set-defaultPermission>|<set-defaultPermission>(kotlin.Boolean?){}[0]
    final var description // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.description.<get-description>|<get-description>(){}[0]
        final fun <set-description>(kotlin/String) // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.description.<set-description>|<set-description>(kotlin.String){}[0]
    final var descriptionLocalizations // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.descriptionLocalizations|{}descriptionLocalizations[0]
        final fun <get-descriptionLocalizations>(): kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>? // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.descriptionLocalizations.<get-descriptionLocalizations>|<get-descriptionLocalizations>(){}[0]
        final fun <set-descriptionLocalizations>(kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>?) // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.descriptionLocalizations.<set-descriptionLocalizations>|<set-descriptionLocalizations>(kotlin.collections.MutableMap<dev.kord.common.Locale,kotlin.String>?){}[0]
    final var dmPermission // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.dmPermission|{}dmPermission[0]
        final fun <get-dmPermission>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.dmPermission.<get-dmPermission>|<get-dmPermission>(){}[0]
        final fun <set-dmPermission>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.dmPermission.<set-dmPermission>|<set-dmPermission>(kotlin.Boolean?){}[0]
    final var name // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.name.<set-name>|<set-name>(kotlin.String){}[0]
    final var nameLocalizations // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.nameLocalizations|{}nameLocalizations[0]
        final fun <get-nameLocalizations>(): kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>? // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.nameLocalizations.<get-nameLocalizations>|<get-nameLocalizations>(){}[0]
        final fun <set-nameLocalizations>(kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>?) // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.nameLocalizations.<set-nameLocalizations>|<set-nameLocalizations>(kotlin.collections.MutableMap<dev.kord.common.Locale,kotlin.String>?){}[0]
    final var nsfw // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
        final fun <set-nsfw>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.nsfw.<set-nsfw>|<set-nsfw>(kotlin.Boolean?){}[0]
    final var options // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.options|{}options[0]
        final fun <get-options>(): kotlin.collections/MutableList<dev.kord.rest.builder.interaction/OptionsBuilder>? // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.options.<get-options>|<get-options>(){}[0]
        final fun <set-options>(kotlin.collections/MutableList<dev.kord.rest.builder.interaction/OptionsBuilder>?) // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.options.<set-options>|<set-options>(kotlin.collections.MutableList<dev.kord.rest.builder.interaction.OptionsBuilder>?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/ApplicationCommandCreateRequest // dev.kord.rest.builder.interaction/ChatInputCreateBuilderImpl.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl : dev.kord.rest.builder.interaction/GlobalChatInputModifyBuilder { // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl|null[0]
    constructor <init>() // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.<init>|<init>(){}[0]

    final var defaultMemberPermissions // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.defaultMemberPermissions|{}defaultMemberPermissions[0]
        final fun <get-defaultMemberPermissions>(): dev.kord.common.entity/Permissions? // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.defaultMemberPermissions.<get-defaultMemberPermissions>|<get-defaultMemberPermissions>(){}[0]
        final fun <set-defaultMemberPermissions>(dev.kord.common.entity/Permissions?) // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.defaultMemberPermissions.<set-defaultMemberPermissions>|<set-defaultMemberPermissions>(dev.kord.common.entity.Permissions?){}[0]
    final var defaultPermission // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.defaultPermission|{}defaultPermission[0]
        final fun <get-defaultPermission>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.defaultPermission.<get-defaultPermission>|<get-defaultPermission>(){}[0]
        final fun <set-defaultPermission>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.defaultPermission.<set-defaultPermission>|<set-defaultPermission>(kotlin.Boolean?){}[0]
    final var description // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.description.<get-description>|<get-description>(){}[0]
        final fun <set-description>(kotlin/String?) // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.description.<set-description>|<set-description>(kotlin.String?){}[0]
    final var descriptionLocalizations // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.descriptionLocalizations|{}descriptionLocalizations[0]
        final fun <get-descriptionLocalizations>(): kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>? // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.descriptionLocalizations.<get-descriptionLocalizations>|<get-descriptionLocalizations>(){}[0]
        final fun <set-descriptionLocalizations>(kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>?) // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.descriptionLocalizations.<set-descriptionLocalizations>|<set-descriptionLocalizations>(kotlin.collections.MutableMap<dev.kord.common.Locale,kotlin.String>?){}[0]
    final var dmPermission // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.dmPermission|{}dmPermission[0]
        final fun <get-dmPermission>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.dmPermission.<get-dmPermission>|<get-dmPermission>(){}[0]
        final fun <set-dmPermission>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.dmPermission.<set-dmPermission>|<set-dmPermission>(kotlin.Boolean?){}[0]
    final var name // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String?) // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.name.<set-name>|<set-name>(kotlin.String?){}[0]
    final var nameLocalizations // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.nameLocalizations|{}nameLocalizations[0]
        final fun <get-nameLocalizations>(): kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>? // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.nameLocalizations.<get-nameLocalizations>|<get-nameLocalizations>(){}[0]
        final fun <set-nameLocalizations>(kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>?) // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.nameLocalizations.<set-nameLocalizations>|<set-nameLocalizations>(kotlin.collections.MutableMap<dev.kord.common.Locale,kotlin.String>?){}[0]
    final var nsfw // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
        final fun <set-nsfw>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.nsfw.<set-nsfw>|<set-nsfw>(kotlin.Boolean?){}[0]
    final var options // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.options|{}options[0]
        final fun <get-options>(): kotlin.collections/MutableList<dev.kord.rest.builder.interaction/OptionsBuilder>? // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.options.<get-options>|<get-options>(){}[0]
        final fun <set-options>(kotlin.collections/MutableList<dev.kord.rest.builder.interaction/OptionsBuilder>?) // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.options.<set-options>|<set-options>(kotlin.collections.MutableList<dev.kord.rest.builder.interaction.OptionsBuilder>?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/ApplicationCommandModifyRequest // dev.kord.rest.builder.interaction/ChatInputModifyBuilderImpl.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.interaction/ChoiceLocalizationsBuilder : dev.kord.rest.builder.interaction/LocalizedNameCreateBuilder { // dev.kord.rest.builder.interaction/ChoiceLocalizationsBuilder|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.builder.interaction/ChoiceLocalizationsBuilder.<init>|<init>(kotlin.String){}[0]

    final var _nameLocalizations // dev.kord.rest.builder.interaction/ChoiceLocalizationsBuilder._nameLocalizations|{}_nameLocalizations[0]
        final fun <get-_nameLocalizations>(): dev.kord.common.entity.optional/Optional<kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>?> // dev.kord.rest.builder.interaction/ChoiceLocalizationsBuilder._nameLocalizations.<get-_nameLocalizations>|<get-_nameLocalizations>(){}[0]
        final fun <set-_nameLocalizations>(dev.kord.common.entity.optional/Optional<kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>?>) // dev.kord.rest.builder.interaction/ChoiceLocalizationsBuilder._nameLocalizations.<set-_nameLocalizations>|<set-_nameLocalizations>(dev.kord.common.entity.optional.Optional<kotlin.collections.MutableMap<dev.kord.common.Locale,kotlin.String>?>){}[0]
    final var name // dev.kord.rest.builder.interaction/ChoiceLocalizationsBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.builder.interaction/ChoiceLocalizationsBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // dev.kord.rest.builder.interaction/ChoiceLocalizationsBuilder.name.<set-name>|<set-name>(kotlin.String){}[0]
    final var nameLocalizations // dev.kord.rest.builder.interaction/ChoiceLocalizationsBuilder.nameLocalizations|{}nameLocalizations[0]
        final fun <get-nameLocalizations>(): kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>? // dev.kord.rest.builder.interaction/ChoiceLocalizationsBuilder.nameLocalizations.<get-nameLocalizations>|<get-nameLocalizations>(){}[0]
        final fun <set-nameLocalizations>(kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>?) // dev.kord.rest.builder.interaction/ChoiceLocalizationsBuilder.nameLocalizations.<set-nameLocalizations>|<set-nameLocalizations>(kotlin.collections.MutableMap<dev.kord.common.Locale,kotlin.String>?){}[0]
}

final class dev.kord.rest.builder.interaction/GlobalMultiApplicationCommandBuilder : dev.kord.rest.builder.interaction/MultiApplicationCommandBuilder { // dev.kord.rest.builder.interaction/GlobalMultiApplicationCommandBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.interaction/GlobalMultiApplicationCommandBuilder.<init>|<init>(){}[0]

    final inline fun input(kotlin/String, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/GlobalChatInputCreateBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.interaction/GlobalMultiApplicationCommandBuilder.input|input(kotlin.String;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.GlobalChatInputCreateBuilder,kotlin.Unit>){}[0]
    final inline fun message(kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/GlobalMessageCommandCreateBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.interaction/GlobalMultiApplicationCommandBuilder.message|message(kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.GlobalMessageCommandCreateBuilder,kotlin.Unit>){}[0]
    final inline fun user(kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/GlobalUserCommandCreateBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.interaction/GlobalMultiApplicationCommandBuilder.user|user(kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.GlobalUserCommandCreateBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.rest.builder.interaction/GroupCommandBuilder : dev.kord.rest.builder.interaction/BaseCommandOptionBuilder { // dev.kord.rest.builder.interaction/GroupCommandBuilder|null[0]
    constructor <init>(kotlin/String, kotlin/String) // dev.kord.rest.builder.interaction/GroupCommandBuilder.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final inline fun subCommand(kotlin/String, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/SubCommandBuilder, kotlin/Unit>) // dev.kord.rest.builder.interaction/GroupCommandBuilder.subCommand|subCommand(kotlin.String;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.SubCommandBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.rest.builder.interaction/GuildMultiApplicationCommandBuilder : dev.kord.rest.builder.interaction/MultiApplicationCommandBuilder { // dev.kord.rest.builder.interaction/GuildMultiApplicationCommandBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.interaction/GuildMultiApplicationCommandBuilder.<init>|<init>(){}[0]

    final inline fun input(kotlin/String, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/ChatInputCreateBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.interaction/GuildMultiApplicationCommandBuilder.input|input(kotlin.String;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.ChatInputCreateBuilder,kotlin.Unit>){}[0]
    final inline fun message(kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/MessageCommandCreateBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.interaction/GuildMultiApplicationCommandBuilder.message|message(kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.MessageCommandCreateBuilder,kotlin.Unit>){}[0]
    final inline fun user(kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/UserCommandCreateBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.interaction/GuildMultiApplicationCommandBuilder.user|user(kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.UserCommandCreateBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.rest.builder.interaction/IntegerOptionBuilder : dev.kord.rest.builder.interaction/NumericOptionBuilder<kotlin/Long, dev.kord.common.entity/Choice.IntegerChoice> { // dev.kord.rest.builder.interaction/IntegerOptionBuilder|null[0]
    constructor <init>(kotlin/String, kotlin/String) // dev.kord.rest.builder.interaction/IntegerOptionBuilder.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final fun choice(kotlin/String, kotlin/Long, dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?>) // dev.kord.rest.builder.interaction/IntegerOptionBuilder.choice|choice(kotlin.String;kotlin.Long;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>){}[0]
}

final class dev.kord.rest.builder.interaction/MentionableBuilder : dev.kord.rest.builder.interaction/OptionsBuilder { // dev.kord.rest.builder.interaction/MentionableBuilder|null[0]
    constructor <init>(kotlin/String, kotlin/String) // dev.kord.rest.builder.interaction/MentionableBuilder.<init>|<init>(kotlin.String;kotlin.String){}[0]
}

final class dev.kord.rest.builder.interaction/MessageCommandCreateBuilderImpl : dev.kord.rest.builder.interaction/GlobalMessageCommandCreateBuilder { // dev.kord.rest.builder.interaction/MessageCommandCreateBuilderImpl|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.builder.interaction/MessageCommandCreateBuilderImpl.<init>|<init>(kotlin.String){}[0]

    final val type // dev.kord.rest.builder.interaction/MessageCommandCreateBuilderImpl.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ApplicationCommandType // dev.kord.rest.builder.interaction/MessageCommandCreateBuilderImpl.type.<get-type>|<get-type>(){}[0]

    final var defaultMemberPermissions // dev.kord.rest.builder.interaction/MessageCommandCreateBuilderImpl.defaultMemberPermissions|{}defaultMemberPermissions[0]
        final fun <get-defaultMemberPermissions>(): dev.kord.common.entity/Permissions? // dev.kord.rest.builder.interaction/MessageCommandCreateBuilderImpl.defaultMemberPermissions.<get-defaultMemberPermissions>|<get-defaultMemberPermissions>(){}[0]
        final fun <set-defaultMemberPermissions>(dev.kord.common.entity/Permissions?) // dev.kord.rest.builder.interaction/MessageCommandCreateBuilderImpl.defaultMemberPermissions.<set-defaultMemberPermissions>|<set-defaultMemberPermissions>(dev.kord.common.entity.Permissions?){}[0]
    final var defaultPermission // dev.kord.rest.builder.interaction/MessageCommandCreateBuilderImpl.defaultPermission|{}defaultPermission[0]
        final fun <get-defaultPermission>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/MessageCommandCreateBuilderImpl.defaultPermission.<get-defaultPermission>|<get-defaultPermission>(){}[0]
        final fun <set-defaultPermission>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/MessageCommandCreateBuilderImpl.defaultPermission.<set-defaultPermission>|<set-defaultPermission>(kotlin.Boolean?){}[0]
    final var dmPermission // dev.kord.rest.builder.interaction/MessageCommandCreateBuilderImpl.dmPermission|{}dmPermission[0]
        final fun <get-dmPermission>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/MessageCommandCreateBuilderImpl.dmPermission.<get-dmPermission>|<get-dmPermission>(){}[0]
        final fun <set-dmPermission>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/MessageCommandCreateBuilderImpl.dmPermission.<set-dmPermission>|<set-dmPermission>(kotlin.Boolean?){}[0]
    final var name // dev.kord.rest.builder.interaction/MessageCommandCreateBuilderImpl.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.builder.interaction/MessageCommandCreateBuilderImpl.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // dev.kord.rest.builder.interaction/MessageCommandCreateBuilderImpl.name.<set-name>|<set-name>(kotlin.String){}[0]
    final var nameLocalizations // dev.kord.rest.builder.interaction/MessageCommandCreateBuilderImpl.nameLocalizations|{}nameLocalizations[0]
        final fun <get-nameLocalizations>(): kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>? // dev.kord.rest.builder.interaction/MessageCommandCreateBuilderImpl.nameLocalizations.<get-nameLocalizations>|<get-nameLocalizations>(){}[0]
        final fun <set-nameLocalizations>(kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>?) // dev.kord.rest.builder.interaction/MessageCommandCreateBuilderImpl.nameLocalizations.<set-nameLocalizations>|<set-nameLocalizations>(kotlin.collections.MutableMap<dev.kord.common.Locale,kotlin.String>?){}[0]
    final var nsfw // dev.kord.rest.builder.interaction/MessageCommandCreateBuilderImpl.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/MessageCommandCreateBuilderImpl.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
        final fun <set-nsfw>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/MessageCommandCreateBuilderImpl.nsfw.<set-nsfw>|<set-nsfw>(kotlin.Boolean?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/ApplicationCommandCreateRequest // dev.kord.rest.builder.interaction/MessageCommandCreateBuilderImpl.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.interaction/MessageCommandModifyBuilderImpl : dev.kord.rest.builder.interaction/GlobalMessageCommandModifyBuilder { // dev.kord.rest.builder.interaction/MessageCommandModifyBuilderImpl|null[0]
    constructor <init>() // dev.kord.rest.builder.interaction/MessageCommandModifyBuilderImpl.<init>|<init>(){}[0]

    final var defaultMemberPermissions // dev.kord.rest.builder.interaction/MessageCommandModifyBuilderImpl.defaultMemberPermissions|{}defaultMemberPermissions[0]
        final fun <get-defaultMemberPermissions>(): dev.kord.common.entity/Permissions? // dev.kord.rest.builder.interaction/MessageCommandModifyBuilderImpl.defaultMemberPermissions.<get-defaultMemberPermissions>|<get-defaultMemberPermissions>(){}[0]
        final fun <set-defaultMemberPermissions>(dev.kord.common.entity/Permissions?) // dev.kord.rest.builder.interaction/MessageCommandModifyBuilderImpl.defaultMemberPermissions.<set-defaultMemberPermissions>|<set-defaultMemberPermissions>(dev.kord.common.entity.Permissions?){}[0]
    final var defaultPermission // dev.kord.rest.builder.interaction/MessageCommandModifyBuilderImpl.defaultPermission|{}defaultPermission[0]
        final fun <get-defaultPermission>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/MessageCommandModifyBuilderImpl.defaultPermission.<get-defaultPermission>|<get-defaultPermission>(){}[0]
        final fun <set-defaultPermission>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/MessageCommandModifyBuilderImpl.defaultPermission.<set-defaultPermission>|<set-defaultPermission>(kotlin.Boolean?){}[0]
    final var dmPermission // dev.kord.rest.builder.interaction/MessageCommandModifyBuilderImpl.dmPermission|{}dmPermission[0]
        final fun <get-dmPermission>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/MessageCommandModifyBuilderImpl.dmPermission.<get-dmPermission>|<get-dmPermission>(){}[0]
        final fun <set-dmPermission>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/MessageCommandModifyBuilderImpl.dmPermission.<set-dmPermission>|<set-dmPermission>(kotlin.Boolean?){}[0]
    final var name // dev.kord.rest.builder.interaction/MessageCommandModifyBuilderImpl.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.rest.builder.interaction/MessageCommandModifyBuilderImpl.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String?) // dev.kord.rest.builder.interaction/MessageCommandModifyBuilderImpl.name.<set-name>|<set-name>(kotlin.String?){}[0]
    final var nameLocalizations // dev.kord.rest.builder.interaction/MessageCommandModifyBuilderImpl.nameLocalizations|{}nameLocalizations[0]
        final fun <get-nameLocalizations>(): kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>? // dev.kord.rest.builder.interaction/MessageCommandModifyBuilderImpl.nameLocalizations.<get-nameLocalizations>|<get-nameLocalizations>(){}[0]
        final fun <set-nameLocalizations>(kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>?) // dev.kord.rest.builder.interaction/MessageCommandModifyBuilderImpl.nameLocalizations.<set-nameLocalizations>|<set-nameLocalizations>(kotlin.collections.MutableMap<dev.kord.common.Locale,kotlin.String>?){}[0]
    final var nsfw // dev.kord.rest.builder.interaction/MessageCommandModifyBuilderImpl.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/MessageCommandModifyBuilderImpl.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
        final fun <set-nsfw>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/MessageCommandModifyBuilderImpl.nsfw.<set-nsfw>|<set-nsfw>(kotlin.Boolean?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/ApplicationCommandModifyRequest // dev.kord.rest.builder.interaction/MessageCommandModifyBuilderImpl.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.interaction/ModalBuilder : dev.kord.rest.builder/RequestBuilder<dev.kord.common.entity/DiscordModal> { // dev.kord.rest.builder.interaction/ModalBuilder|null[0]
    constructor <init>(kotlin/String, kotlin/String) // dev.kord.rest.builder.interaction/ModalBuilder.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final val components // dev.kord.rest.builder.interaction/ModalBuilder.components|{}components[0]
        final fun <get-components>(): kotlin.collections/MutableList<dev.kord.rest.builder.component/ActionRowBuilder> // dev.kord.rest.builder.interaction/ModalBuilder.components.<get-components>|<get-components>(){}[0]

    final var customId // dev.kord.rest.builder.interaction/ModalBuilder.customId|{}customId[0]
        final fun <get-customId>(): kotlin/String // dev.kord.rest.builder.interaction/ModalBuilder.customId.<get-customId>|<get-customId>(){}[0]
        final fun <set-customId>(kotlin/String) // dev.kord.rest.builder.interaction/ModalBuilder.customId.<set-customId>|<set-customId>(kotlin.String){}[0]
    final var title // dev.kord.rest.builder.interaction/ModalBuilder.title|{}title[0]
        final fun <get-title>(): kotlin/String // dev.kord.rest.builder.interaction/ModalBuilder.title.<get-title>|<get-title>(){}[0]
        final fun <set-title>(kotlin/String) // dev.kord.rest.builder.interaction/ModalBuilder.title.<set-title>|<set-title>(kotlin.String){}[0]

    final fun toRequest(): dev.kord.common.entity/DiscordModal // dev.kord.rest.builder.interaction/ModalBuilder.toRequest|toRequest(){}[0]
    final inline fun actionRow(kotlin/Function1<dev.kord.rest.builder.component/ActionRowBuilder, kotlin/Unit>) // dev.kord.rest.builder.interaction/ModalBuilder.actionRow|actionRow(kotlin.Function1<dev.kord.rest.builder.component.ActionRowBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.rest.builder.interaction/NumberOptionBuilder : dev.kord.rest.builder.interaction/NumericOptionBuilder<kotlin/Double, dev.kord.common.entity/Choice.NumberChoice> { // dev.kord.rest.builder.interaction/NumberOptionBuilder|null[0]
    constructor <init>(kotlin/String, kotlin/String) // dev.kord.rest.builder.interaction/NumberOptionBuilder.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final fun choice(kotlin/String, kotlin/Double, dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?>) // dev.kord.rest.builder.interaction/NumberOptionBuilder.choice|choice(kotlin.String;kotlin.Double;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>){}[0]
}

final class dev.kord.rest.builder.interaction/RoleBuilder : dev.kord.rest.builder.interaction/OptionsBuilder { // dev.kord.rest.builder.interaction/RoleBuilder|null[0]
    constructor <init>(kotlin/String, kotlin/String) // dev.kord.rest.builder.interaction/RoleBuilder.<init>|<init>(kotlin.String;kotlin.String){}[0]
}

final class dev.kord.rest.builder.interaction/StringChoiceBuilder : dev.kord.rest.builder.interaction/BaseChoiceBuilder<kotlin/String, dev.kord.common.entity/Choice.StringChoice> { // dev.kord.rest.builder.interaction/StringChoiceBuilder|null[0]
    constructor <init>(kotlin/String, kotlin/String) // dev.kord.rest.builder.interaction/StringChoiceBuilder.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final var maxLength // dev.kord.rest.builder.interaction/StringChoiceBuilder.maxLength|{}maxLength[0]
        final fun <get-maxLength>(): kotlin/Int? // dev.kord.rest.builder.interaction/StringChoiceBuilder.maxLength.<get-maxLength>|<get-maxLength>(){}[0]
        final fun <set-maxLength>(kotlin/Int?) // dev.kord.rest.builder.interaction/StringChoiceBuilder.maxLength.<set-maxLength>|<set-maxLength>(kotlin.Int?){}[0]
    final var minLength // dev.kord.rest.builder.interaction/StringChoiceBuilder.minLength|{}minLength[0]
        final fun <get-minLength>(): kotlin/Int? // dev.kord.rest.builder.interaction/StringChoiceBuilder.minLength.<get-minLength>|<get-minLength>(){}[0]
        final fun <set-minLength>(kotlin/Int?) // dev.kord.rest.builder.interaction/StringChoiceBuilder.minLength.<set-minLength>|<set-minLength>(kotlin.Int?){}[0]

    final fun choice(kotlin/String, kotlin/String, dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?>) // dev.kord.rest.builder.interaction/StringChoiceBuilder.choice|choice(kotlin.String;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>){}[0]
    final fun toRequest(): dev.kord.common.entity/ApplicationCommandOption // dev.kord.rest.builder.interaction/StringChoiceBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.interaction/SubCommandBuilder : dev.kord.rest.builder.interaction/BaseCommandOptionBuilder, dev.kord.rest.builder.interaction/BaseInputChatBuilder { // dev.kord.rest.builder.interaction/SubCommandBuilder|null[0]
    constructor <init>(kotlin/String, kotlin/String) // dev.kord.rest.builder.interaction/SubCommandBuilder.<init>|<init>(kotlin.String;kotlin.String){}[0]
}

final class dev.kord.rest.builder.interaction/UserBuilder : dev.kord.rest.builder.interaction/OptionsBuilder { // dev.kord.rest.builder.interaction/UserBuilder|null[0]
    constructor <init>(kotlin/String, kotlin/String) // dev.kord.rest.builder.interaction/UserBuilder.<init>|<init>(kotlin.String;kotlin.String){}[0]
}

final class dev.kord.rest.builder.interaction/UserCommandCreateBuilderImpl : dev.kord.rest.builder.interaction/GlobalUserCommandCreateBuilder { // dev.kord.rest.builder.interaction/UserCommandCreateBuilderImpl|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.builder.interaction/UserCommandCreateBuilderImpl.<init>|<init>(kotlin.String){}[0]

    final val type // dev.kord.rest.builder.interaction/UserCommandCreateBuilderImpl.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ApplicationCommandType // dev.kord.rest.builder.interaction/UserCommandCreateBuilderImpl.type.<get-type>|<get-type>(){}[0]

    final var defaultMemberPermissions // dev.kord.rest.builder.interaction/UserCommandCreateBuilderImpl.defaultMemberPermissions|{}defaultMemberPermissions[0]
        final fun <get-defaultMemberPermissions>(): dev.kord.common.entity/Permissions? // dev.kord.rest.builder.interaction/UserCommandCreateBuilderImpl.defaultMemberPermissions.<get-defaultMemberPermissions>|<get-defaultMemberPermissions>(){}[0]
        final fun <set-defaultMemberPermissions>(dev.kord.common.entity/Permissions?) // dev.kord.rest.builder.interaction/UserCommandCreateBuilderImpl.defaultMemberPermissions.<set-defaultMemberPermissions>|<set-defaultMemberPermissions>(dev.kord.common.entity.Permissions?){}[0]
    final var defaultPermission // dev.kord.rest.builder.interaction/UserCommandCreateBuilderImpl.defaultPermission|{}defaultPermission[0]
        final fun <get-defaultPermission>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/UserCommandCreateBuilderImpl.defaultPermission.<get-defaultPermission>|<get-defaultPermission>(){}[0]
        final fun <set-defaultPermission>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/UserCommandCreateBuilderImpl.defaultPermission.<set-defaultPermission>|<set-defaultPermission>(kotlin.Boolean?){}[0]
    final var dmPermission // dev.kord.rest.builder.interaction/UserCommandCreateBuilderImpl.dmPermission|{}dmPermission[0]
        final fun <get-dmPermission>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/UserCommandCreateBuilderImpl.dmPermission.<get-dmPermission>|<get-dmPermission>(){}[0]
        final fun <set-dmPermission>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/UserCommandCreateBuilderImpl.dmPermission.<set-dmPermission>|<set-dmPermission>(kotlin.Boolean?){}[0]
    final var name // dev.kord.rest.builder.interaction/UserCommandCreateBuilderImpl.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.builder.interaction/UserCommandCreateBuilderImpl.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // dev.kord.rest.builder.interaction/UserCommandCreateBuilderImpl.name.<set-name>|<set-name>(kotlin.String){}[0]
    final var nameLocalizations // dev.kord.rest.builder.interaction/UserCommandCreateBuilderImpl.nameLocalizations|{}nameLocalizations[0]
        final fun <get-nameLocalizations>(): kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>? // dev.kord.rest.builder.interaction/UserCommandCreateBuilderImpl.nameLocalizations.<get-nameLocalizations>|<get-nameLocalizations>(){}[0]
        final fun <set-nameLocalizations>(kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>?) // dev.kord.rest.builder.interaction/UserCommandCreateBuilderImpl.nameLocalizations.<set-nameLocalizations>|<set-nameLocalizations>(kotlin.collections.MutableMap<dev.kord.common.Locale,kotlin.String>?){}[0]
    final var nsfw // dev.kord.rest.builder.interaction/UserCommandCreateBuilderImpl.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/UserCommandCreateBuilderImpl.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
        final fun <set-nsfw>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/UserCommandCreateBuilderImpl.nsfw.<set-nsfw>|<set-nsfw>(kotlin.Boolean?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/ApplicationCommandCreateRequest // dev.kord.rest.builder.interaction/UserCommandCreateBuilderImpl.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.interaction/UserCommandModifyBuilderImpl : dev.kord.rest.builder.interaction/GlobalUserCommandModifyBuilder { // dev.kord.rest.builder.interaction/UserCommandModifyBuilderImpl|null[0]
    constructor <init>() // dev.kord.rest.builder.interaction/UserCommandModifyBuilderImpl.<init>|<init>(){}[0]

    final var defaultMemberPermissions // dev.kord.rest.builder.interaction/UserCommandModifyBuilderImpl.defaultMemberPermissions|{}defaultMemberPermissions[0]
        final fun <get-defaultMemberPermissions>(): dev.kord.common.entity/Permissions? // dev.kord.rest.builder.interaction/UserCommandModifyBuilderImpl.defaultMemberPermissions.<get-defaultMemberPermissions>|<get-defaultMemberPermissions>(){}[0]
        final fun <set-defaultMemberPermissions>(dev.kord.common.entity/Permissions?) // dev.kord.rest.builder.interaction/UserCommandModifyBuilderImpl.defaultMemberPermissions.<set-defaultMemberPermissions>|<set-defaultMemberPermissions>(dev.kord.common.entity.Permissions?){}[0]
    final var defaultPermission // dev.kord.rest.builder.interaction/UserCommandModifyBuilderImpl.defaultPermission|{}defaultPermission[0]
        final fun <get-defaultPermission>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/UserCommandModifyBuilderImpl.defaultPermission.<get-defaultPermission>|<get-defaultPermission>(){}[0]
        final fun <set-defaultPermission>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/UserCommandModifyBuilderImpl.defaultPermission.<set-defaultPermission>|<set-defaultPermission>(kotlin.Boolean?){}[0]
    final var dmPermission // dev.kord.rest.builder.interaction/UserCommandModifyBuilderImpl.dmPermission|{}dmPermission[0]
        final fun <get-dmPermission>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/UserCommandModifyBuilderImpl.dmPermission.<get-dmPermission>|<get-dmPermission>(){}[0]
        final fun <set-dmPermission>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/UserCommandModifyBuilderImpl.dmPermission.<set-dmPermission>|<set-dmPermission>(kotlin.Boolean?){}[0]
    final var name // dev.kord.rest.builder.interaction/UserCommandModifyBuilderImpl.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.rest.builder.interaction/UserCommandModifyBuilderImpl.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String?) // dev.kord.rest.builder.interaction/UserCommandModifyBuilderImpl.name.<set-name>|<set-name>(kotlin.String?){}[0]
    final var nameLocalizations // dev.kord.rest.builder.interaction/UserCommandModifyBuilderImpl.nameLocalizations|{}nameLocalizations[0]
        final fun <get-nameLocalizations>(): kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>? // dev.kord.rest.builder.interaction/UserCommandModifyBuilderImpl.nameLocalizations.<get-nameLocalizations>|<get-nameLocalizations>(){}[0]
        final fun <set-nameLocalizations>(kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>?) // dev.kord.rest.builder.interaction/UserCommandModifyBuilderImpl.nameLocalizations.<set-nameLocalizations>|<set-nameLocalizations>(kotlin.collections.MutableMap<dev.kord.common.Locale,kotlin.String>?){}[0]
    final var nsfw // dev.kord.rest.builder.interaction/UserCommandModifyBuilderImpl.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/UserCommandModifyBuilderImpl.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
        final fun <set-nsfw>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/UserCommandModifyBuilderImpl.nsfw.<set-nsfw>|<set-nsfw>(kotlin.Boolean?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/ApplicationCommandModifyRequest // dev.kord.rest.builder.interaction/UserCommandModifyBuilderImpl.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.member/MemberAddBuilder : dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/GuildMemberAddRequest> { // dev.kord.rest.builder.member/MemberAddBuilder|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.builder.member/MemberAddBuilder.<init>|<init>(kotlin.String){}[0]

    final var deafened // dev.kord.rest.builder.member/MemberAddBuilder.deafened|{}deafened[0]
        final fun <get-deafened>(): kotlin/Boolean? // dev.kord.rest.builder.member/MemberAddBuilder.deafened.<get-deafened>|<get-deafened>(){}[0]
        final fun <set-deafened>(kotlin/Boolean?) // dev.kord.rest.builder.member/MemberAddBuilder.deafened.<set-deafened>|<set-deafened>(kotlin.Boolean?){}[0]
    final var muted // dev.kord.rest.builder.member/MemberAddBuilder.muted|{}muted[0]
        final fun <get-muted>(): kotlin/Boolean? // dev.kord.rest.builder.member/MemberAddBuilder.muted.<get-muted>|<get-muted>(){}[0]
        final fun <set-muted>(kotlin/Boolean?) // dev.kord.rest.builder.member/MemberAddBuilder.muted.<set-muted>|<set-muted>(kotlin.Boolean?){}[0]
    final var nickname // dev.kord.rest.builder.member/MemberAddBuilder.nickname|{}nickname[0]
        final fun <get-nickname>(): kotlin/String? // dev.kord.rest.builder.member/MemberAddBuilder.nickname.<get-nickname>|<get-nickname>(){}[0]
        final fun <set-nickname>(kotlin/String?) // dev.kord.rest.builder.member/MemberAddBuilder.nickname.<set-nickname>|<set-nickname>(kotlin.String?){}[0]
    final var roles // dev.kord.rest.builder.member/MemberAddBuilder.roles|{}roles[0]
        final fun <get-roles>(): kotlin.collections/MutableSet<dev.kord.common.entity/Snowflake> // dev.kord.rest.builder.member/MemberAddBuilder.roles.<get-roles>|<get-roles>(){}[0]
        final fun <set-roles>(kotlin.collections/MutableSet<dev.kord.common.entity/Snowflake>) // dev.kord.rest.builder.member/MemberAddBuilder.roles.<set-roles>|<set-roles>(kotlin.collections.MutableSet<dev.kord.common.entity.Snowflake>){}[0]
    final var token // dev.kord.rest.builder.member/MemberAddBuilder.token|{}token[0]
        final fun <get-token>(): kotlin/String // dev.kord.rest.builder.member/MemberAddBuilder.token.<get-token>|<get-token>(){}[0]
        final fun <set-token>(kotlin/String) // dev.kord.rest.builder.member/MemberAddBuilder.token.<set-token>|<set-token>(kotlin.String){}[0]

    final fun toRequest(): dev.kord.rest.json.request/GuildMemberAddRequest // dev.kord.rest.builder.member/MemberAddBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.member/MemberModifyBuilder : dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/GuildMemberModifyRequest> { // dev.kord.rest.builder.member/MemberModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.member/MemberModifyBuilder.<init>|<init>(){}[0]

    final var communicationDisabledUntil // dev.kord.rest.builder.member/MemberModifyBuilder.communicationDisabledUntil|{}communicationDisabledUntil[0]
        final fun <get-communicationDisabledUntil>(): kotlinx.datetime/Instant? // dev.kord.rest.builder.member/MemberModifyBuilder.communicationDisabledUntil.<get-communicationDisabledUntil>|<get-communicationDisabledUntil>(){}[0]
        final fun <set-communicationDisabledUntil>(kotlinx.datetime/Instant?) // dev.kord.rest.builder.member/MemberModifyBuilder.communicationDisabledUntil.<set-communicationDisabledUntil>|<set-communicationDisabledUntil>(kotlinx.datetime.Instant?){}[0]
    final var deafened // dev.kord.rest.builder.member/MemberModifyBuilder.deafened|{}deafened[0]
        final fun <get-deafened>(): kotlin/Boolean? // dev.kord.rest.builder.member/MemberModifyBuilder.deafened.<get-deafened>|<get-deafened>(){}[0]
        final fun <set-deafened>(kotlin/Boolean?) // dev.kord.rest.builder.member/MemberModifyBuilder.deafened.<set-deafened>|<set-deafened>(kotlin.Boolean?){}[0]
    final var flags // dev.kord.rest.builder.member/MemberModifyBuilder.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity/GuildMemberFlags? // dev.kord.rest.builder.member/MemberModifyBuilder.flags.<get-flags>|<get-flags>(){}[0]
        final fun <set-flags>(dev.kord.common.entity/GuildMemberFlags?) // dev.kord.rest.builder.member/MemberModifyBuilder.flags.<set-flags>|<set-flags>(dev.kord.common.entity.GuildMemberFlags?){}[0]
    final var muted // dev.kord.rest.builder.member/MemberModifyBuilder.muted|{}muted[0]
        final fun <get-muted>(): kotlin/Boolean? // dev.kord.rest.builder.member/MemberModifyBuilder.muted.<get-muted>|<get-muted>(){}[0]
        final fun <set-muted>(kotlin/Boolean?) // dev.kord.rest.builder.member/MemberModifyBuilder.muted.<set-muted>|<set-muted>(kotlin.Boolean?){}[0]
    final var nickname // dev.kord.rest.builder.member/MemberModifyBuilder.nickname|{}nickname[0]
        final fun <get-nickname>(): kotlin/String? // dev.kord.rest.builder.member/MemberModifyBuilder.nickname.<get-nickname>|<get-nickname>(){}[0]
        final fun <set-nickname>(kotlin/String?) // dev.kord.rest.builder.member/MemberModifyBuilder.nickname.<set-nickname>|<set-nickname>(kotlin.String?){}[0]
    final var reason // dev.kord.rest.builder.member/MemberModifyBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.member/MemberModifyBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.member/MemberModifyBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]
    final var roles // dev.kord.rest.builder.member/MemberModifyBuilder.roles|{}roles[0]
        final fun <get-roles>(): kotlin.collections/MutableSet<dev.kord.common.entity/Snowflake>? // dev.kord.rest.builder.member/MemberModifyBuilder.roles.<get-roles>|<get-roles>(){}[0]
        final fun <set-roles>(kotlin.collections/MutableSet<dev.kord.common.entity/Snowflake>?) // dev.kord.rest.builder.member/MemberModifyBuilder.roles.<set-roles>|<set-roles>(kotlin.collections.MutableSet<dev.kord.common.entity.Snowflake>?){}[0]
    final var voiceChannelId // dev.kord.rest.builder.member/MemberModifyBuilder.voiceChannelId|{}voiceChannelId[0]
        final fun <get-voiceChannelId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.member/MemberModifyBuilder.voiceChannelId.<get-voiceChannelId>|<get-voiceChannelId>(){}[0]
        final fun <set-voiceChannelId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.member/MemberModifyBuilder.voiceChannelId.<set-voiceChannelId>|<set-voiceChannelId>(dev.kord.common.entity.Snowflake?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/GuildMemberModifyRequest // dev.kord.rest.builder.member/MemberModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.message.create/FollowupMessageCreateBuilder : dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder, dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/MultipartFollowupMessageCreateRequest> { // dev.kord.rest.builder.message.create/FollowupMessageCreateBuilder|null[0]
    constructor <init>(kotlin/Boolean) // dev.kord.rest.builder.message.create/FollowupMessageCreateBuilder.<init>|<init>(kotlin.Boolean){}[0]

    final val ephemeral // dev.kord.rest.builder.message.create/FollowupMessageCreateBuilder.ephemeral|{}ephemeral[0]
        final fun <get-ephemeral>(): kotlin/Boolean // dev.kord.rest.builder.message.create/FollowupMessageCreateBuilder.ephemeral.<get-ephemeral>|<get-ephemeral>(){}[0]

    final fun toRequest(): dev.kord.rest.json.request/MultipartFollowupMessageCreateRequest // dev.kord.rest.builder.message.create/FollowupMessageCreateBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.message.create/ForumMessageCreateBuilder : dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder, dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/MultipartForumThreadMessageCreateRequest> { // dev.kord.rest.builder.message.create/ForumMessageCreateBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.message.create/ForumMessageCreateBuilder.<init>|<init>(){}[0]

    final var stickerIds // dev.kord.rest.builder.message.create/ForumMessageCreateBuilder.stickerIds|{}stickerIds[0]
        final fun <get-stickerIds>(): kotlin.collections/MutableList<dev.kord.common.entity/Snowflake>? // dev.kord.rest.builder.message.create/ForumMessageCreateBuilder.stickerIds.<get-stickerIds>|<get-stickerIds>(){}[0]
        final fun <set-stickerIds>(kotlin.collections/MutableList<dev.kord.common.entity/Snowflake>?) // dev.kord.rest.builder.message.create/ForumMessageCreateBuilder.stickerIds.<set-stickerIds>|<set-stickerIds>(kotlin.collections.MutableList<dev.kord.common.entity.Snowflake>?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/MultipartForumThreadMessageCreateRequest // dev.kord.rest.builder.message.create/ForumMessageCreateBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.message.create/InteractionResponseCreateBuilder : dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder, dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/MultipartInteractionResponseCreateRequest> { // dev.kord.rest.builder.message.create/InteractionResponseCreateBuilder|null[0]
    constructor <init>(kotlin/Boolean = ...) // dev.kord.rest.builder.message.create/InteractionResponseCreateBuilder.<init>|<init>(kotlin.Boolean){}[0]

    final val ephemeral // dev.kord.rest.builder.message.create/InteractionResponseCreateBuilder.ephemeral|{}ephemeral[0]
        final fun <get-ephemeral>(): kotlin/Boolean // dev.kord.rest.builder.message.create/InteractionResponseCreateBuilder.ephemeral.<get-ephemeral>|<get-ephemeral>(){}[0]

    final fun toRequest(): dev.kord.rest.json.request/MultipartInteractionResponseCreateRequest // dev.kord.rest.builder.message.create/InteractionResponseCreateBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.message.create/UpdateMessageInteractionResponseCreateBuilder : dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder, dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/MultipartInteractionResponseCreateRequest> { // dev.kord.rest.builder.message.create/UpdateMessageInteractionResponseCreateBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.message.create/UpdateMessageInteractionResponseCreateBuilder.<init>|<init>(){}[0]

    final fun toRequest(): dev.kord.rest.json.request/MultipartInteractionResponseCreateRequest // dev.kord.rest.builder.message.create/UpdateMessageInteractionResponseCreateBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.message.create/UserMessageCreateBuilder : dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder, dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/MultipartMessageCreateRequest> { // dev.kord.rest.builder.message.create/UserMessageCreateBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.message.create/UserMessageCreateBuilder.<init>|<init>(){}[0]

    final var failIfNotExists // dev.kord.rest.builder.message.create/UserMessageCreateBuilder.failIfNotExists|{}failIfNotExists[0]
        final fun <get-failIfNotExists>(): kotlin/Boolean? // dev.kord.rest.builder.message.create/UserMessageCreateBuilder.failIfNotExists.<get-failIfNotExists>|<get-failIfNotExists>(){}[0]
        final fun <set-failIfNotExists>(kotlin/Boolean?) // dev.kord.rest.builder.message.create/UserMessageCreateBuilder.failIfNotExists.<set-failIfNotExists>|<set-failIfNotExists>(kotlin.Boolean?){}[0]
    final var messageReference // dev.kord.rest.builder.message.create/UserMessageCreateBuilder.messageReference|{}messageReference[0]
        final fun <get-messageReference>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.message.create/UserMessageCreateBuilder.messageReference.<get-messageReference>|<get-messageReference>(){}[0]
        final fun <set-messageReference>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.message.create/UserMessageCreateBuilder.messageReference.<set-messageReference>|<set-messageReference>(dev.kord.common.entity.Snowflake?){}[0]
    final var nonce // dev.kord.rest.builder.message.create/UserMessageCreateBuilder.nonce|{}nonce[0]
        final fun <get-nonce>(): kotlin/String? // dev.kord.rest.builder.message.create/UserMessageCreateBuilder.nonce.<get-nonce>|<get-nonce>(){}[0]
        final fun <set-nonce>(kotlin/String?) // dev.kord.rest.builder.message.create/UserMessageCreateBuilder.nonce.<set-nonce>|<set-nonce>(kotlin.String?){}[0]
    final var stickerIds // dev.kord.rest.builder.message.create/UserMessageCreateBuilder.stickerIds|{}stickerIds[0]
        final fun <get-stickerIds>(): kotlin.collections/MutableList<dev.kord.common.entity/Snowflake>? // dev.kord.rest.builder.message.create/UserMessageCreateBuilder.stickerIds.<get-stickerIds>|<get-stickerIds>(){}[0]
        final fun <set-stickerIds>(kotlin.collections/MutableList<dev.kord.common.entity/Snowflake>?) // dev.kord.rest.builder.message.create/UserMessageCreateBuilder.stickerIds.<set-stickerIds>|<set-stickerIds>(kotlin.collections.MutableList<dev.kord.common.entity.Snowflake>?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/MultipartMessageCreateRequest // dev.kord.rest.builder.message.create/UserMessageCreateBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.message.create/WebhookMessageCreateBuilder : dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder, dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/MultiPartWebhookExecuteRequest> { // dev.kord.rest.builder.message.create/WebhookMessageCreateBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.message.create/WebhookMessageCreateBuilder.<init>|<init>(){}[0]

    final var appliedTags // dev.kord.rest.builder.message.create/WebhookMessageCreateBuilder.appliedTags|{}appliedTags[0]
        final fun <get-appliedTags>(): kotlin.collections/MutableList<dev.kord.common.entity/Snowflake>? // dev.kord.rest.builder.message.create/WebhookMessageCreateBuilder.appliedTags.<get-appliedTags>|<get-appliedTags>(){}[0]
        final fun <set-appliedTags>(kotlin.collections/MutableList<dev.kord.common.entity/Snowflake>?) // dev.kord.rest.builder.message.create/WebhookMessageCreateBuilder.appliedTags.<set-appliedTags>|<set-appliedTags>(kotlin.collections.MutableList<dev.kord.common.entity.Snowflake>?){}[0]
    final var avatarUrl // dev.kord.rest.builder.message.create/WebhookMessageCreateBuilder.avatarUrl|{}avatarUrl[0]
        final fun <get-avatarUrl>(): kotlin/String? // dev.kord.rest.builder.message.create/WebhookMessageCreateBuilder.avatarUrl.<get-avatarUrl>|<get-avatarUrl>(){}[0]
        final fun <set-avatarUrl>(kotlin/String?) // dev.kord.rest.builder.message.create/WebhookMessageCreateBuilder.avatarUrl.<set-avatarUrl>|<set-avatarUrl>(kotlin.String?){}[0]
    final var threadName // dev.kord.rest.builder.message.create/WebhookMessageCreateBuilder.threadName|{}threadName[0]
        final fun <get-threadName>(): kotlin/String? // dev.kord.rest.builder.message.create/WebhookMessageCreateBuilder.threadName.<get-threadName>|<get-threadName>(){}[0]
        final fun <set-threadName>(kotlin/String?) // dev.kord.rest.builder.message.create/WebhookMessageCreateBuilder.threadName.<set-threadName>|<set-threadName>(kotlin.String?){}[0]
    final var username // dev.kord.rest.builder.message.create/WebhookMessageCreateBuilder.username|{}username[0]
        final fun <get-username>(): kotlin/String? // dev.kord.rest.builder.message.create/WebhookMessageCreateBuilder.username.<get-username>|<get-username>(){}[0]
        final fun <set-username>(kotlin/String?) // dev.kord.rest.builder.message.create/WebhookMessageCreateBuilder.username.<set-username>|<set-username>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/MultiPartWebhookExecuteRequest // dev.kord.rest.builder.message.create/WebhookMessageCreateBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.message.modify/FollowupMessageModifyBuilder : dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder, dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/MultipartFollowupMessageModifyRequest> { // dev.kord.rest.builder.message.modify/FollowupMessageModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.message.modify/FollowupMessageModifyBuilder.<init>|<init>(){}[0]

    final fun toRequest(): dev.kord.rest.json.request/MultipartFollowupMessageModifyRequest // dev.kord.rest.builder.message.modify/FollowupMessageModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.message.modify/InteractionResponseModifyBuilder : dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder, dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/MultipartInteractionResponseModifyRequest> { // dev.kord.rest.builder.message.modify/InteractionResponseModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.message.modify/InteractionResponseModifyBuilder.<init>|<init>(){}[0]

    final fun toRequest(): dev.kord.rest.json.request/MultipartInteractionResponseModifyRequest // dev.kord.rest.builder.message.modify/InteractionResponseModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.message.modify/UserMessageModifyBuilder : dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder, dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/MultipartMessagePatchRequest> { // dev.kord.rest.builder.message.modify/UserMessageModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.message.modify/UserMessageModifyBuilder.<init>|<init>(){}[0]

    final fun toRequest(): dev.kord.rest.json.request/MultipartMessagePatchRequest // dev.kord.rest.builder.message.modify/UserMessageModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.message.modify/WebhookMessageModifyBuilder : dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder, dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/MultipartWebhookEditMessageRequest> { // dev.kord.rest.builder.message.modify/WebhookMessageModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.message.modify/WebhookMessageModifyBuilder.<init>|<init>(){}[0]

    final fun toRequest(): dev.kord.rest.json.request/MultipartWebhookEditMessageRequest // dev.kord.rest.builder.message.modify/WebhookMessageModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.message/AllowedMentionsBuilder { // dev.kord.rest.builder.message/AllowedMentionsBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.message/AllowedMentionsBuilder.<init>|<init>(){}[0]

    final val roles // dev.kord.rest.builder.message/AllowedMentionsBuilder.roles|{}roles[0]
        final fun <get-roles>(): kotlin.collections/MutableSet<dev.kord.common.entity/Snowflake> // dev.kord.rest.builder.message/AllowedMentionsBuilder.roles.<get-roles>|<get-roles>(){}[0]
    final val types // dev.kord.rest.builder.message/AllowedMentionsBuilder.types|{}types[0]
        final fun <get-types>(): kotlin.collections/MutableSet<dev.kord.common.entity/AllowedMentionType> // dev.kord.rest.builder.message/AllowedMentionsBuilder.types.<get-types>|<get-types>(){}[0]
    final val users // dev.kord.rest.builder.message/AllowedMentionsBuilder.users|{}users[0]
        final fun <get-users>(): kotlin.collections/MutableSet<dev.kord.common.entity/Snowflake> // dev.kord.rest.builder.message/AllowedMentionsBuilder.users.<get-users>|<get-users>(){}[0]

    final var repliedUser // dev.kord.rest.builder.message/AllowedMentionsBuilder.repliedUser|{}repliedUser[0]
        final fun <get-repliedUser>(): kotlin/Boolean? // dev.kord.rest.builder.message/AllowedMentionsBuilder.repliedUser.<get-repliedUser>|<get-repliedUser>(){}[0]
        final fun <set-repliedUser>(kotlin/Boolean?) // dev.kord.rest.builder.message/AllowedMentionsBuilder.repliedUser.<set-repliedUser>|<set-repliedUser>(kotlin.Boolean?){}[0]

    final fun (dev.kord.common.entity/AllowedMentionType).unaryPlus() // dev.kord.rest.builder.message/AllowedMentionsBuilder.unaryPlus|unaryPlus@dev.kord.common.entity.AllowedMentionType(){}[0]
    final fun add(dev.kord.common.entity/AllowedMentionType) // dev.kord.rest.builder.message/AllowedMentionsBuilder.add|add(dev.kord.common.entity.AllowedMentionType){}[0]
    final fun build(): dev.kord.common.entity/AllowedMentions // dev.kord.rest.builder.message/AllowedMentionsBuilder.build|build(){}[0]
}

final class dev.kord.rest.builder.message/AttachmentBuilder : dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/AttachmentRequest> { // dev.kord.rest.builder.message/AttachmentBuilder|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake) // dev.kord.rest.builder.message/AttachmentBuilder.<init>|<init>(dev.kord.common.entity.Snowflake){}[0]

    final var description // dev.kord.rest.builder.message/AttachmentBuilder.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.rest.builder.message/AttachmentBuilder.description.<get-description>|<get-description>(){}[0]
        final fun <set-description>(kotlin/String?) // dev.kord.rest.builder.message/AttachmentBuilder.description.<set-description>|<set-description>(kotlin.String?){}[0]
    final var filename // dev.kord.rest.builder.message/AttachmentBuilder.filename|{}filename[0]
        final fun <get-filename>(): kotlin/String? // dev.kord.rest.builder.message/AttachmentBuilder.filename.<get-filename>|<get-filename>(){}[0]
        final fun <set-filename>(kotlin/String?) // dev.kord.rest.builder.message/AttachmentBuilder.filename.<set-filename>|<set-filename>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/AttachmentRequest // dev.kord.rest.builder.message/AttachmentBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.message/EmbedBuilder : dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/EmbedRequest> { // dev.kord.rest.builder.message/EmbedBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.message/EmbedBuilder.<init>|<init>(){}[0]

    final var author // dev.kord.rest.builder.message/EmbedBuilder.author|{}author[0]
        final fun <get-author>(): dev.kord.rest.builder.message/EmbedBuilder.Author? // dev.kord.rest.builder.message/EmbedBuilder.author.<get-author>|<get-author>(){}[0]
        final fun <set-author>(dev.kord.rest.builder.message/EmbedBuilder.Author?) // dev.kord.rest.builder.message/EmbedBuilder.author.<set-author>|<set-author>(dev.kord.rest.builder.message.EmbedBuilder.Author?){}[0]
    final var color // dev.kord.rest.builder.message/EmbedBuilder.color|{}color[0]
        final fun <get-color>(): dev.kord.common/Color? // dev.kord.rest.builder.message/EmbedBuilder.color.<get-color>|<get-color>(){}[0]
        final fun <set-color>(dev.kord.common/Color?) // dev.kord.rest.builder.message/EmbedBuilder.color.<set-color>|<set-color>(dev.kord.common.Color?){}[0]
    final var description // dev.kord.rest.builder.message/EmbedBuilder.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.rest.builder.message/EmbedBuilder.description.<get-description>|<get-description>(){}[0]
        final fun <set-description>(kotlin/String?) // dev.kord.rest.builder.message/EmbedBuilder.description.<set-description>|<set-description>(kotlin.String?){}[0]
    final var fields // dev.kord.rest.builder.message/EmbedBuilder.fields|{}fields[0]
        final fun <get-fields>(): kotlin.collections/MutableList<dev.kord.rest.builder.message/EmbedBuilder.Field> // dev.kord.rest.builder.message/EmbedBuilder.fields.<get-fields>|<get-fields>(){}[0]
        final fun <set-fields>(kotlin.collections/MutableList<dev.kord.rest.builder.message/EmbedBuilder.Field>) // dev.kord.rest.builder.message/EmbedBuilder.fields.<set-fields>|<set-fields>(kotlin.collections.MutableList<dev.kord.rest.builder.message.EmbedBuilder.Field>){}[0]
    final var footer // dev.kord.rest.builder.message/EmbedBuilder.footer|{}footer[0]
        final fun <get-footer>(): dev.kord.rest.builder.message/EmbedBuilder.Footer? // dev.kord.rest.builder.message/EmbedBuilder.footer.<get-footer>|<get-footer>(){}[0]
        final fun <set-footer>(dev.kord.rest.builder.message/EmbedBuilder.Footer?) // dev.kord.rest.builder.message/EmbedBuilder.footer.<set-footer>|<set-footer>(dev.kord.rest.builder.message.EmbedBuilder.Footer?){}[0]
    final var image // dev.kord.rest.builder.message/EmbedBuilder.image|{}image[0]
        final fun <get-image>(): kotlin/String? // dev.kord.rest.builder.message/EmbedBuilder.image.<get-image>|<get-image>(){}[0]
        final fun <set-image>(kotlin/String?) // dev.kord.rest.builder.message/EmbedBuilder.image.<set-image>|<set-image>(kotlin.String?){}[0]
    final var thumbnail // dev.kord.rest.builder.message/EmbedBuilder.thumbnail|{}thumbnail[0]
        final fun <get-thumbnail>(): dev.kord.rest.builder.message/EmbedBuilder.Thumbnail? // dev.kord.rest.builder.message/EmbedBuilder.thumbnail.<get-thumbnail>|<get-thumbnail>(){}[0]
        final fun <set-thumbnail>(dev.kord.rest.builder.message/EmbedBuilder.Thumbnail?) // dev.kord.rest.builder.message/EmbedBuilder.thumbnail.<set-thumbnail>|<set-thumbnail>(dev.kord.rest.builder.message.EmbedBuilder.Thumbnail?){}[0]
    final var timestamp // dev.kord.rest.builder.message/EmbedBuilder.timestamp|{}timestamp[0]
        final fun <get-timestamp>(): kotlinx.datetime/Instant? // dev.kord.rest.builder.message/EmbedBuilder.timestamp.<get-timestamp>|<get-timestamp>(){}[0]
        final fun <set-timestamp>(kotlinx.datetime/Instant?) // dev.kord.rest.builder.message/EmbedBuilder.timestamp.<set-timestamp>|<set-timestamp>(kotlinx.datetime.Instant?){}[0]
    final var title // dev.kord.rest.builder.message/EmbedBuilder.title|{}title[0]
        final fun <get-title>(): kotlin/String? // dev.kord.rest.builder.message/EmbedBuilder.title.<get-title>|<get-title>(){}[0]
        final fun <set-title>(kotlin/String?) // dev.kord.rest.builder.message/EmbedBuilder.title.<set-title>|<set-title>(kotlin.String?){}[0]
    final var url // dev.kord.rest.builder.message/EmbedBuilder.url|{}url[0]
        final fun <get-url>(): kotlin/String? // dev.kord.rest.builder.message/EmbedBuilder.url.<get-url>|<get-url>(){}[0]
        final fun <set-url>(kotlin/String?) // dev.kord.rest.builder.message/EmbedBuilder.url.<set-url>|<set-url>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/EmbedRequest // dev.kord.rest.builder.message/EmbedBuilder.toRequest|toRequest(){}[0]
    final inline fun author(kotlin/Function1<dev.kord.rest.builder.message/EmbedBuilder.Author, kotlin/Unit>) // dev.kord.rest.builder.message/EmbedBuilder.author|author(kotlin.Function1<dev.kord.rest.builder.message.EmbedBuilder.Author,kotlin.Unit>){}[0]
    final inline fun field(kotlin/Function1<dev.kord.rest.builder.message/EmbedBuilder.Field, kotlin/Unit>) // dev.kord.rest.builder.message/EmbedBuilder.field|field(kotlin.Function1<dev.kord.rest.builder.message.EmbedBuilder.Field,kotlin.Unit>){}[0]
    final inline fun field(kotlin/String, kotlin/Boolean = ..., kotlin/Function0<kotlin/String> = ...) // dev.kord.rest.builder.message/EmbedBuilder.field|field(kotlin.String;kotlin.Boolean;kotlin.Function0<kotlin.String>){}[0]
    final inline fun footer(kotlin/Function1<dev.kord.rest.builder.message/EmbedBuilder.Footer, kotlin/Unit>) // dev.kord.rest.builder.message/EmbedBuilder.footer|footer(kotlin.Function1<dev.kord.rest.builder.message.EmbedBuilder.Footer,kotlin.Unit>){}[0]
    final inline fun thumbnail(kotlin/Function1<dev.kord.rest.builder.message/EmbedBuilder.Thumbnail, kotlin/Unit>) // dev.kord.rest.builder.message/EmbedBuilder.thumbnail|thumbnail(kotlin.Function1<dev.kord.rest.builder.message.EmbedBuilder.Thumbnail,kotlin.Unit>){}[0]

    final class Author : dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/EmbedAuthorRequest> { // dev.kord.rest.builder.message/EmbedBuilder.Author|null[0]
        constructor <init>() // dev.kord.rest.builder.message/EmbedBuilder.Author.<init>|<init>(){}[0]

        final var icon // dev.kord.rest.builder.message/EmbedBuilder.Author.icon|{}icon[0]
            final fun <get-icon>(): kotlin/String? // dev.kord.rest.builder.message/EmbedBuilder.Author.icon.<get-icon>|<get-icon>(){}[0]
            final fun <set-icon>(kotlin/String?) // dev.kord.rest.builder.message/EmbedBuilder.Author.icon.<set-icon>|<set-icon>(kotlin.String?){}[0]
        final var name // dev.kord.rest.builder.message/EmbedBuilder.Author.name|{}name[0]
            final fun <get-name>(): kotlin/String? // dev.kord.rest.builder.message/EmbedBuilder.Author.name.<get-name>|<get-name>(){}[0]
            final fun <set-name>(kotlin/String?) // dev.kord.rest.builder.message/EmbedBuilder.Author.name.<set-name>|<set-name>(kotlin.String?){}[0]
        final var url // dev.kord.rest.builder.message/EmbedBuilder.Author.url|{}url[0]
            final fun <get-url>(): kotlin/String? // dev.kord.rest.builder.message/EmbedBuilder.Author.url.<get-url>|<get-url>(){}[0]
            final fun <set-url>(kotlin/String?) // dev.kord.rest.builder.message/EmbedBuilder.Author.url.<set-url>|<set-url>(kotlin.String?){}[0]

        final fun toRequest(): dev.kord.rest.json.request/EmbedAuthorRequest // dev.kord.rest.builder.message/EmbedBuilder.Author.toRequest|toRequest(){}[0]

        final object Limits { // dev.kord.rest.builder.message/EmbedBuilder.Author.Limits|null[0]
            final const val name // dev.kord.rest.builder.message/EmbedBuilder.Author.Limits.name|{}name[0]
                final fun <get-name>(): kotlin/Int // dev.kord.rest.builder.message/EmbedBuilder.Author.Limits.name.<get-name>|<get-name>(){}[0]
        }
    }

    final class Field : dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/EmbedFieldRequest> { // dev.kord.rest.builder.message/EmbedBuilder.Field|null[0]
        constructor <init>() // dev.kord.rest.builder.message/EmbedBuilder.Field.<init>|<init>(){}[0]

        final var inline // dev.kord.rest.builder.message/EmbedBuilder.Field.inline|{}inline[0]
            final fun <get-inline>(): kotlin/Boolean? // dev.kord.rest.builder.message/EmbedBuilder.Field.inline.<get-inline>|<get-inline>(){}[0]
            final fun <set-inline>(kotlin/Boolean?) // dev.kord.rest.builder.message/EmbedBuilder.Field.inline.<set-inline>|<set-inline>(kotlin.Boolean?){}[0]
        final var name // dev.kord.rest.builder.message/EmbedBuilder.Field.name|{}name[0]
            final fun <get-name>(): kotlin/String // dev.kord.rest.builder.message/EmbedBuilder.Field.name.<get-name>|<get-name>(){}[0]
            final fun <set-name>(kotlin/String) // dev.kord.rest.builder.message/EmbedBuilder.Field.name.<set-name>|<set-name>(kotlin.String){}[0]
        final var value // dev.kord.rest.builder.message/EmbedBuilder.Field.value|{}value[0]
            final fun <get-value>(): kotlin/String // dev.kord.rest.builder.message/EmbedBuilder.Field.value.<get-value>|<get-value>(){}[0]
            final fun <set-value>(kotlin/String) // dev.kord.rest.builder.message/EmbedBuilder.Field.value.<set-value>|<set-value>(kotlin.String){}[0]

        final fun toRequest(): dev.kord.rest.json.request/EmbedFieldRequest // dev.kord.rest.builder.message/EmbedBuilder.Field.toRequest|toRequest(){}[0]

        final object Limits { // dev.kord.rest.builder.message/EmbedBuilder.Field.Limits|null[0]
            final const val name // dev.kord.rest.builder.message/EmbedBuilder.Field.Limits.name|{}name[0]
                final fun <get-name>(): kotlin/Int // dev.kord.rest.builder.message/EmbedBuilder.Field.Limits.name.<get-name>|<get-name>(){}[0]
            final const val value // dev.kord.rest.builder.message/EmbedBuilder.Field.Limits.value|{}value[0]
                final fun <get-value>(): kotlin/Int // dev.kord.rest.builder.message/EmbedBuilder.Field.Limits.value.<get-value>|<get-value>(){}[0]
        }
    }

    final class Footer : dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/EmbedFooterRequest> { // dev.kord.rest.builder.message/EmbedBuilder.Footer|null[0]
        constructor <init>() // dev.kord.rest.builder.message/EmbedBuilder.Footer.<init>|<init>(){}[0]

        final var icon // dev.kord.rest.builder.message/EmbedBuilder.Footer.icon|{}icon[0]
            final fun <get-icon>(): kotlin/String? // dev.kord.rest.builder.message/EmbedBuilder.Footer.icon.<get-icon>|<get-icon>(){}[0]
            final fun <set-icon>(kotlin/String?) // dev.kord.rest.builder.message/EmbedBuilder.Footer.icon.<set-icon>|<set-icon>(kotlin.String?){}[0]
        final var text // dev.kord.rest.builder.message/EmbedBuilder.Footer.text|{}text[0]
            final fun <get-text>(): kotlin/String // dev.kord.rest.builder.message/EmbedBuilder.Footer.text.<get-text>|<get-text>(){}[0]
            final fun <set-text>(kotlin/String) // dev.kord.rest.builder.message/EmbedBuilder.Footer.text.<set-text>|<set-text>(kotlin.String){}[0]

        final fun toRequest(): dev.kord.rest.json.request/EmbedFooterRequest // dev.kord.rest.builder.message/EmbedBuilder.Footer.toRequest|toRequest(){}[0]

        final object Limits { // dev.kord.rest.builder.message/EmbedBuilder.Footer.Limits|null[0]
            final const val text // dev.kord.rest.builder.message/EmbedBuilder.Footer.Limits.text|{}text[0]
                final fun <get-text>(): kotlin/Int // dev.kord.rest.builder.message/EmbedBuilder.Footer.Limits.text.<get-text>|<get-text>(){}[0]
        }
    }

    final class Thumbnail : dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/EmbedThumbnailRequest> { // dev.kord.rest.builder.message/EmbedBuilder.Thumbnail|null[0]
        constructor <init>() // dev.kord.rest.builder.message/EmbedBuilder.Thumbnail.<init>|<init>(){}[0]

        final var url // dev.kord.rest.builder.message/EmbedBuilder.Thumbnail.url|{}url[0]
            final fun <get-url>(): kotlin/String // dev.kord.rest.builder.message/EmbedBuilder.Thumbnail.url.<get-url>|<get-url>(){}[0]
            final fun <set-url>(kotlin/String) // dev.kord.rest.builder.message/EmbedBuilder.Thumbnail.url.<set-url>|<set-url>(kotlin.String){}[0]

        final fun toRequest(): dev.kord.rest.json.request/EmbedThumbnailRequest // dev.kord.rest.builder.message/EmbedBuilder.Thumbnail.toRequest|toRequest(){}[0]
    }

    final object Companion { // dev.kord.rest.builder.message/EmbedBuilder.Companion|null[0]
        final const val ZERO_WIDTH_SPACE // dev.kord.rest.builder.message/EmbedBuilder.Companion.ZERO_WIDTH_SPACE|{}ZERO_WIDTH_SPACE[0]
            final fun <get-ZERO_WIDTH_SPACE>(): kotlin/String // dev.kord.rest.builder.message/EmbedBuilder.Companion.ZERO_WIDTH_SPACE.<get-ZERO_WIDTH_SPACE>|<get-ZERO_WIDTH_SPACE>(){}[0]
    }

    final object Limits { // dev.kord.rest.builder.message/EmbedBuilder.Limits|null[0]
        final const val description // dev.kord.rest.builder.message/EmbedBuilder.Limits.description|{}description[0]
            final fun <get-description>(): kotlin/Int // dev.kord.rest.builder.message/EmbedBuilder.Limits.description.<get-description>|<get-description>(){}[0]
        final const val fieldCount // dev.kord.rest.builder.message/EmbedBuilder.Limits.fieldCount|{}fieldCount[0]
            final fun <get-fieldCount>(): kotlin/Int // dev.kord.rest.builder.message/EmbedBuilder.Limits.fieldCount.<get-fieldCount>|<get-fieldCount>(){}[0]
        final const val title // dev.kord.rest.builder.message/EmbedBuilder.Limits.title|{}title[0]
            final fun <get-title>(): kotlin/Int // dev.kord.rest.builder.message/EmbedBuilder.Limits.title.<get-title>|<get-title>(){}[0]
        final const val total // dev.kord.rest.builder.message/EmbedBuilder.Limits.total|{}total[0]
            final fun <get-total>(): kotlin/Int // dev.kord.rest.builder.message/EmbedBuilder.Limits.total.<get-total>|<get-total>(){}[0]
    }
}

final class dev.kord.rest.builder.role/RoleCreateBuilder : dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/GuildRoleCreateRequest> { // dev.kord.rest.builder.role/RoleCreateBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.role/RoleCreateBuilder.<init>|<init>(){}[0]

    final var color // dev.kord.rest.builder.role/RoleCreateBuilder.color|{}color[0]
        final fun <get-color>(): dev.kord.common/Color? // dev.kord.rest.builder.role/RoleCreateBuilder.color.<get-color>|<get-color>(){}[0]
        final fun <set-color>(dev.kord.common/Color?) // dev.kord.rest.builder.role/RoleCreateBuilder.color.<set-color>|<set-color>(dev.kord.common.Color?){}[0]
    final var hoist // dev.kord.rest.builder.role/RoleCreateBuilder.hoist|{}hoist[0]
        final fun <get-hoist>(): kotlin/Boolean? // dev.kord.rest.builder.role/RoleCreateBuilder.hoist.<get-hoist>|<get-hoist>(){}[0]
        final fun <set-hoist>(kotlin/Boolean?) // dev.kord.rest.builder.role/RoleCreateBuilder.hoist.<set-hoist>|<set-hoist>(kotlin.Boolean?){}[0]
    final var icon // dev.kord.rest.builder.role/RoleCreateBuilder.icon|{}icon[0]
        final fun <get-icon>(): dev.kord.rest/Image? // dev.kord.rest.builder.role/RoleCreateBuilder.icon.<get-icon>|<get-icon>(){}[0]
        final fun <set-icon>(dev.kord.rest/Image?) // dev.kord.rest.builder.role/RoleCreateBuilder.icon.<set-icon>|<set-icon>(dev.kord.rest.Image?){}[0]
    final var mentionable // dev.kord.rest.builder.role/RoleCreateBuilder.mentionable|{}mentionable[0]
        final fun <get-mentionable>(): kotlin/Boolean? // dev.kord.rest.builder.role/RoleCreateBuilder.mentionable.<get-mentionable>|<get-mentionable>(){}[0]
        final fun <set-mentionable>(kotlin/Boolean?) // dev.kord.rest.builder.role/RoleCreateBuilder.mentionable.<set-mentionable>|<set-mentionable>(kotlin.Boolean?){}[0]
    final var name // dev.kord.rest.builder.role/RoleCreateBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.rest.builder.role/RoleCreateBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String?) // dev.kord.rest.builder.role/RoleCreateBuilder.name.<set-name>|<set-name>(kotlin.String?){}[0]
    final var permissions // dev.kord.rest.builder.role/RoleCreateBuilder.permissions|{}permissions[0]
        final fun <get-permissions>(): dev.kord.common.entity/Permissions? // dev.kord.rest.builder.role/RoleCreateBuilder.permissions.<get-permissions>|<get-permissions>(){}[0]
        final fun <set-permissions>(dev.kord.common.entity/Permissions?) // dev.kord.rest.builder.role/RoleCreateBuilder.permissions.<set-permissions>|<set-permissions>(dev.kord.common.entity.Permissions?){}[0]
    final var reason // dev.kord.rest.builder.role/RoleCreateBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.role/RoleCreateBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.role/RoleCreateBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]
    final var unicodeEmoji // dev.kord.rest.builder.role/RoleCreateBuilder.unicodeEmoji|{}unicodeEmoji[0]
        final fun <get-unicodeEmoji>(): kotlin/String? // dev.kord.rest.builder.role/RoleCreateBuilder.unicodeEmoji.<get-unicodeEmoji>|<get-unicodeEmoji>(){}[0]
        final fun <set-unicodeEmoji>(kotlin/String?) // dev.kord.rest.builder.role/RoleCreateBuilder.unicodeEmoji.<set-unicodeEmoji>|<set-unicodeEmoji>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/GuildRoleCreateRequest // dev.kord.rest.builder.role/RoleCreateBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.role/RoleModifyBuilder : dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/GuildRoleModifyRequest> { // dev.kord.rest.builder.role/RoleModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.role/RoleModifyBuilder.<init>|<init>(){}[0]

    final var color // dev.kord.rest.builder.role/RoleModifyBuilder.color|{}color[0]
        final fun <get-color>(): dev.kord.common/Color? // dev.kord.rest.builder.role/RoleModifyBuilder.color.<get-color>|<get-color>(){}[0]
        final fun <set-color>(dev.kord.common/Color?) // dev.kord.rest.builder.role/RoleModifyBuilder.color.<set-color>|<set-color>(dev.kord.common.Color?){}[0]
    final var hoist // dev.kord.rest.builder.role/RoleModifyBuilder.hoist|{}hoist[0]
        final fun <get-hoist>(): kotlin/Boolean? // dev.kord.rest.builder.role/RoleModifyBuilder.hoist.<get-hoist>|<get-hoist>(){}[0]
        final fun <set-hoist>(kotlin/Boolean?) // dev.kord.rest.builder.role/RoleModifyBuilder.hoist.<set-hoist>|<set-hoist>(kotlin.Boolean?){}[0]
    final var icon // dev.kord.rest.builder.role/RoleModifyBuilder.icon|{}icon[0]
        final fun <get-icon>(): dev.kord.rest/Image? // dev.kord.rest.builder.role/RoleModifyBuilder.icon.<get-icon>|<get-icon>(){}[0]
        final fun <set-icon>(dev.kord.rest/Image?) // dev.kord.rest.builder.role/RoleModifyBuilder.icon.<set-icon>|<set-icon>(dev.kord.rest.Image?){}[0]
    final var mentionable // dev.kord.rest.builder.role/RoleModifyBuilder.mentionable|{}mentionable[0]
        final fun <get-mentionable>(): kotlin/Boolean? // dev.kord.rest.builder.role/RoleModifyBuilder.mentionable.<get-mentionable>|<get-mentionable>(){}[0]
        final fun <set-mentionable>(kotlin/Boolean?) // dev.kord.rest.builder.role/RoleModifyBuilder.mentionable.<set-mentionable>|<set-mentionable>(kotlin.Boolean?){}[0]
    final var name // dev.kord.rest.builder.role/RoleModifyBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.rest.builder.role/RoleModifyBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String?) // dev.kord.rest.builder.role/RoleModifyBuilder.name.<set-name>|<set-name>(kotlin.String?){}[0]
    final var permissions // dev.kord.rest.builder.role/RoleModifyBuilder.permissions|{}permissions[0]
        final fun <get-permissions>(): dev.kord.common.entity/Permissions? // dev.kord.rest.builder.role/RoleModifyBuilder.permissions.<get-permissions>|<get-permissions>(){}[0]
        final fun <set-permissions>(dev.kord.common.entity/Permissions?) // dev.kord.rest.builder.role/RoleModifyBuilder.permissions.<set-permissions>|<set-permissions>(dev.kord.common.entity.Permissions?){}[0]
    final var reason // dev.kord.rest.builder.role/RoleModifyBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.role/RoleModifyBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.role/RoleModifyBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]
    final var unicodeEmoji // dev.kord.rest.builder.role/RoleModifyBuilder.unicodeEmoji|{}unicodeEmoji[0]
        final fun <get-unicodeEmoji>(): kotlin/String? // dev.kord.rest.builder.role/RoleModifyBuilder.unicodeEmoji.<get-unicodeEmoji>|<get-unicodeEmoji>(){}[0]
        final fun <set-unicodeEmoji>(kotlin/String?) // dev.kord.rest.builder.role/RoleModifyBuilder.unicodeEmoji.<set-unicodeEmoji>|<set-unicodeEmoji>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/GuildRoleModifyRequest // dev.kord.rest.builder.role/RoleModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.role/RolePositionsModifyBuilder : dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/GuildRolePositionModifyRequest> { // dev.kord.rest.builder.role/RolePositionsModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.role/RolePositionsModifyBuilder.<init>|<init>(){}[0]

    final var reason // dev.kord.rest.builder.role/RolePositionsModifyBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.role/RolePositionsModifyBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.role/RolePositionsModifyBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]

    final fun move(kotlin/Array<out kotlin/Pair<dev.kord.common.entity/Snowflake, kotlin/Int>>...) // dev.kord.rest.builder.role/RolePositionsModifyBuilder.move|move(kotlin.Array<out|kotlin.Pair<dev.kord.common.entity.Snowflake,kotlin.Int>>...){}[0]
    final fun move(kotlin/Pair<dev.kord.common.entity/Snowflake, kotlin/Int>) // dev.kord.rest.builder.role/RolePositionsModifyBuilder.move|move(kotlin.Pair<dev.kord.common.entity.Snowflake,kotlin.Int>){}[0]
    final fun toRequest(): dev.kord.rest.json.request/GuildRolePositionModifyRequest // dev.kord.rest.builder.role/RolePositionsModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder : dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/ScheduledEventModifyRequest> { // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.<init>|<init>(){}[0]

    final var channelId // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.channelId.<get-channelId>|<get-channelId>(){}[0]
        final fun <set-channelId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.channelId.<set-channelId>|<set-channelId>(dev.kord.common.entity.Snowflake?){}[0]
    final var description // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.description.<get-description>|<get-description>(){}[0]
        final fun <set-description>(kotlin/String?) // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.description.<set-description>|<set-description>(kotlin.String?){}[0]
    final var entityMetadata // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.entityMetadata|{}entityMetadata[0]
        final fun <get-entityMetadata>(): dev.kord.common.entity/GuildScheduledEventEntityMetadata? // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.entityMetadata.<get-entityMetadata>|<get-entityMetadata>(){}[0]
        final fun <set-entityMetadata>(dev.kord.common.entity/GuildScheduledEventEntityMetadata?) // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.entityMetadata.<set-entityMetadata>|<set-entityMetadata>(dev.kord.common.entity.GuildScheduledEventEntityMetadata?){}[0]
    final var entityType // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.entityType|{}entityType[0]
        final fun <get-entityType>(): dev.kord.common.entity/ScheduledEntityType? // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.entityType.<get-entityType>|<get-entityType>(){}[0]
        final fun <set-entityType>(dev.kord.common.entity/ScheduledEntityType?) // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.entityType.<set-entityType>|<set-entityType>(dev.kord.common.entity.ScheduledEntityType?){}[0]
    final var image // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.image|{}image[0]
        final fun <get-image>(): dev.kord.rest/Image? // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.image.<get-image>|<get-image>(){}[0]
        final fun <set-image>(dev.kord.rest/Image?) // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.image.<set-image>|<set-image>(dev.kord.rest.Image?){}[0]
    final var name // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String?) // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.name.<set-name>|<set-name>(kotlin.String?){}[0]
    final var privacyLevel // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.privacyLevel|{}privacyLevel[0]
        final fun <get-privacyLevel>(): dev.kord.common.entity/GuildScheduledEventPrivacyLevel? // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.privacyLevel.<get-privacyLevel>|<get-privacyLevel>(){}[0]
        final fun <set-privacyLevel>(dev.kord.common.entity/GuildScheduledEventPrivacyLevel?) // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.privacyLevel.<set-privacyLevel>|<set-privacyLevel>(dev.kord.common.entity.GuildScheduledEventPrivacyLevel?){}[0]
    final var reason // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]
    final var scheduledEndTime // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.scheduledEndTime|{}scheduledEndTime[0]
        final fun <get-scheduledEndTime>(): kotlinx.datetime/Instant? // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.scheduledEndTime.<get-scheduledEndTime>|<get-scheduledEndTime>(){}[0]
        final fun <set-scheduledEndTime>(kotlinx.datetime/Instant?) // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.scheduledEndTime.<set-scheduledEndTime>|<set-scheduledEndTime>(kotlinx.datetime.Instant?){}[0]
    final var scheduledStartTime // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.scheduledStartTime|{}scheduledStartTime[0]
        final fun <get-scheduledStartTime>(): kotlinx.datetime/Instant? // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.scheduledStartTime.<get-scheduledStartTime>|<get-scheduledStartTime>(){}[0]
        final fun <set-scheduledStartTime>(kotlinx.datetime/Instant?) // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.scheduledStartTime.<set-scheduledStartTime>|<set-scheduledStartTime>(kotlinx.datetime.Instant?){}[0]
    final var status // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.status|{}status[0]
        final fun <get-status>(): dev.kord.common.entity/GuildScheduledEventStatus? // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.status.<get-status>|<get-status>(){}[0]
        final fun <set-status>(dev.kord.common.entity/GuildScheduledEventStatus?) // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.status.<set-status>|<set-status>(dev.kord.common.entity.GuildScheduledEventStatus?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/ScheduledEventModifyRequest // dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.stage/StageInstanceCreateBuilder : dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/StageInstanceCreateRequest> { // dev.kord.rest.builder.stage/StageInstanceCreateBuilder|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String) // dev.kord.rest.builder.stage/StageInstanceCreateBuilder.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String){}[0]

    final var channelId // dev.kord.rest.builder.stage/StageInstanceCreateBuilder.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.rest.builder.stage/StageInstanceCreateBuilder.channelId.<get-channelId>|<get-channelId>(){}[0]
        final fun <set-channelId>(dev.kord.common.entity/Snowflake) // dev.kord.rest.builder.stage/StageInstanceCreateBuilder.channelId.<set-channelId>|<set-channelId>(dev.kord.common.entity.Snowflake){}[0]
    final var guildScheduledEventId // dev.kord.rest.builder.stage/StageInstanceCreateBuilder.guildScheduledEventId|{}guildScheduledEventId[0]
        final fun <get-guildScheduledEventId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.stage/StageInstanceCreateBuilder.guildScheduledEventId.<get-guildScheduledEventId>|<get-guildScheduledEventId>(){}[0]
        final fun <set-guildScheduledEventId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.stage/StageInstanceCreateBuilder.guildScheduledEventId.<set-guildScheduledEventId>|<set-guildScheduledEventId>(dev.kord.common.entity.Snowflake?){}[0]
    final var privacyLevel // dev.kord.rest.builder.stage/StageInstanceCreateBuilder.privacyLevel|{}privacyLevel[0]
        final fun <get-privacyLevel>(): dev.kord.common.entity/StageInstancePrivacyLevel? // dev.kord.rest.builder.stage/StageInstanceCreateBuilder.privacyLevel.<get-privacyLevel>|<get-privacyLevel>(){}[0]
        final fun <set-privacyLevel>(dev.kord.common.entity/StageInstancePrivacyLevel?) // dev.kord.rest.builder.stage/StageInstanceCreateBuilder.privacyLevel.<set-privacyLevel>|<set-privacyLevel>(dev.kord.common.entity.StageInstancePrivacyLevel?){}[0]
    final var reason // dev.kord.rest.builder.stage/StageInstanceCreateBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.stage/StageInstanceCreateBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.stage/StageInstanceCreateBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]
    final var sendStartNotification // dev.kord.rest.builder.stage/StageInstanceCreateBuilder.sendStartNotification|{}sendStartNotification[0]
        final fun <get-sendStartNotification>(): kotlin/Boolean? // dev.kord.rest.builder.stage/StageInstanceCreateBuilder.sendStartNotification.<get-sendStartNotification>|<get-sendStartNotification>(){}[0]
        final fun <set-sendStartNotification>(kotlin/Boolean?) // dev.kord.rest.builder.stage/StageInstanceCreateBuilder.sendStartNotification.<set-sendStartNotification>|<set-sendStartNotification>(kotlin.Boolean?){}[0]
    final var topic // dev.kord.rest.builder.stage/StageInstanceCreateBuilder.topic|{}topic[0]
        final fun <get-topic>(): kotlin/String // dev.kord.rest.builder.stage/StageInstanceCreateBuilder.topic.<get-topic>|<get-topic>(){}[0]
        final fun <set-topic>(kotlin/String) // dev.kord.rest.builder.stage/StageInstanceCreateBuilder.topic.<set-topic>|<set-topic>(kotlin.String){}[0]

    final fun toRequest(): dev.kord.rest.json.request/StageInstanceCreateRequest // dev.kord.rest.builder.stage/StageInstanceCreateBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.stage/StageInstanceModifyBuilder : dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/StageInstanceModifyRequest> { // dev.kord.rest.builder.stage/StageInstanceModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.stage/StageInstanceModifyBuilder.<init>|<init>(){}[0]

    final var privacyLevel // dev.kord.rest.builder.stage/StageInstanceModifyBuilder.privacyLevel|{}privacyLevel[0]
        final fun <get-privacyLevel>(): dev.kord.common.entity/StageInstancePrivacyLevel? // dev.kord.rest.builder.stage/StageInstanceModifyBuilder.privacyLevel.<get-privacyLevel>|<get-privacyLevel>(){}[0]
        final fun <set-privacyLevel>(dev.kord.common.entity/StageInstancePrivacyLevel?) // dev.kord.rest.builder.stage/StageInstanceModifyBuilder.privacyLevel.<set-privacyLevel>|<set-privacyLevel>(dev.kord.common.entity.StageInstancePrivacyLevel?){}[0]
    final var reason // dev.kord.rest.builder.stage/StageInstanceModifyBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.stage/StageInstanceModifyBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.stage/StageInstanceModifyBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]
    final var topic // dev.kord.rest.builder.stage/StageInstanceModifyBuilder.topic|{}topic[0]
        final fun <get-topic>(): kotlin/String? // dev.kord.rest.builder.stage/StageInstanceModifyBuilder.topic.<get-topic>|<get-topic>(){}[0]
        final fun <set-topic>(kotlin/String?) // dev.kord.rest.builder.stage/StageInstanceModifyBuilder.topic.<set-topic>|<set-topic>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/StageInstanceModifyRequest // dev.kord.rest.builder.stage/StageInstanceModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.template/GuildFromTemplateCreateBuilder : dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/GuildFromTemplateCreateRequest> { // dev.kord.rest.builder.template/GuildFromTemplateCreateBuilder|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.builder.template/GuildFromTemplateCreateBuilder.<init>|<init>(kotlin.String){}[0]

    final var image // dev.kord.rest.builder.template/GuildFromTemplateCreateBuilder.image|{}image[0]
        final fun <get-image>(): dev.kord.rest/Image? // dev.kord.rest.builder.template/GuildFromTemplateCreateBuilder.image.<get-image>|<get-image>(){}[0]
        final fun <set-image>(dev.kord.rest/Image?) // dev.kord.rest.builder.template/GuildFromTemplateCreateBuilder.image.<set-image>|<set-image>(dev.kord.rest.Image?){}[0]
    final var name // dev.kord.rest.builder.template/GuildFromTemplateCreateBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.builder.template/GuildFromTemplateCreateBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // dev.kord.rest.builder.template/GuildFromTemplateCreateBuilder.name.<set-name>|<set-name>(kotlin.String){}[0]

    final fun toRequest(): dev.kord.rest.json.request/GuildFromTemplateCreateRequest // dev.kord.rest.builder.template/GuildFromTemplateCreateBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.template/GuildTemplateCreateBuilder : dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/GuildTemplateCreateRequest> { // dev.kord.rest.builder.template/GuildTemplateCreateBuilder|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.builder.template/GuildTemplateCreateBuilder.<init>|<init>(kotlin.String){}[0]

    final var description // dev.kord.rest.builder.template/GuildTemplateCreateBuilder.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.rest.builder.template/GuildTemplateCreateBuilder.description.<get-description>|<get-description>(){}[0]
        final fun <set-description>(kotlin/String?) // dev.kord.rest.builder.template/GuildTemplateCreateBuilder.description.<set-description>|<set-description>(kotlin.String?){}[0]
    final var name // dev.kord.rest.builder.template/GuildTemplateCreateBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.builder.template/GuildTemplateCreateBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // dev.kord.rest.builder.template/GuildTemplateCreateBuilder.name.<set-name>|<set-name>(kotlin.String){}[0]

    final fun toRequest(): dev.kord.rest.json.request/GuildTemplateCreateRequest // dev.kord.rest.builder.template/GuildTemplateCreateBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.template/GuildTemplateModifyBuilder : dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/GuildTemplateModifyRequest> { // dev.kord.rest.builder.template/GuildTemplateModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.template/GuildTemplateModifyBuilder.<init>|<init>(){}[0]

    final var description // dev.kord.rest.builder.template/GuildTemplateModifyBuilder.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.rest.builder.template/GuildTemplateModifyBuilder.description.<get-description>|<get-description>(){}[0]
        final fun <set-description>(kotlin/String?) // dev.kord.rest.builder.template/GuildTemplateModifyBuilder.description.<set-description>|<set-description>(kotlin.String?){}[0]
    final var name // dev.kord.rest.builder.template/GuildTemplateModifyBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.rest.builder.template/GuildTemplateModifyBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String?) // dev.kord.rest.builder.template/GuildTemplateModifyBuilder.name.<set-name>|<set-name>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/GuildTemplateModifyRequest // dev.kord.rest.builder.template/GuildTemplateModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.user/CurrentUserModifyBuilder : dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/CurrentUserModifyRequest> { // dev.kord.rest.builder.user/CurrentUserModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.user/CurrentUserModifyBuilder.<init>|<init>(){}[0]

    final var avatar // dev.kord.rest.builder.user/CurrentUserModifyBuilder.avatar|{}avatar[0]
        final fun <get-avatar>(): dev.kord.rest/Image? // dev.kord.rest.builder.user/CurrentUserModifyBuilder.avatar.<get-avatar>|<get-avatar>(){}[0]
        final fun <set-avatar>(dev.kord.rest/Image?) // dev.kord.rest.builder.user/CurrentUserModifyBuilder.avatar.<set-avatar>|<set-avatar>(dev.kord.rest.Image?){}[0]
    final var username // dev.kord.rest.builder.user/CurrentUserModifyBuilder.username|{}username[0]
        final fun <get-username>(): kotlin/String? // dev.kord.rest.builder.user/CurrentUserModifyBuilder.username.<get-username>|<get-username>(){}[0]
        final fun <set-username>(kotlin/String?) // dev.kord.rest.builder.user/CurrentUserModifyBuilder.username.<set-username>|<set-username>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/CurrentUserModifyRequest // dev.kord.rest.builder.user/CurrentUserModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.user/GroupDMCreateBuilder : dev.kord.rest.builder/RequestBuilder<dev.kord.rest.json.request/GroupDMCreateRequest> { // dev.kord.rest.builder.user/GroupDMCreateBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.user/GroupDMCreateBuilder.<init>|<init>(){}[0]

    final val nicknames // dev.kord.rest.builder.user/GroupDMCreateBuilder.nicknames|{}nicknames[0]
        final fun <get-nicknames>(): kotlin.collections/MutableMap<dev.kord.common.entity/Snowflake, kotlin/String> // dev.kord.rest.builder.user/GroupDMCreateBuilder.nicknames.<get-nicknames>|<get-nicknames>(){}[0]
    final val tokens // dev.kord.rest.builder.user/GroupDMCreateBuilder.tokens|{}tokens[0]
        final fun <get-tokens>(): kotlin.collections/MutableList<kotlin/String> // dev.kord.rest.builder.user/GroupDMCreateBuilder.tokens.<get-tokens>|<get-tokens>(){}[0]

    final fun toRequest(): dev.kord.rest.json.request/GroupDMCreateRequest // dev.kord.rest.builder.user/GroupDMCreateBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.webhook/WebhookCreateBuilder : dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/WebhookCreateRequest> { // dev.kord.rest.builder.webhook/WebhookCreateBuilder|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.builder.webhook/WebhookCreateBuilder.<init>|<init>(kotlin.String){}[0]

    final var avatar // dev.kord.rest.builder.webhook/WebhookCreateBuilder.avatar|{}avatar[0]
        final fun <get-avatar>(): dev.kord.rest/Image? // dev.kord.rest.builder.webhook/WebhookCreateBuilder.avatar.<get-avatar>|<get-avatar>(){}[0]
        final fun <set-avatar>(dev.kord.rest/Image?) // dev.kord.rest.builder.webhook/WebhookCreateBuilder.avatar.<set-avatar>|<set-avatar>(dev.kord.rest.Image?){}[0]
    final var name // dev.kord.rest.builder.webhook/WebhookCreateBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.builder.webhook/WebhookCreateBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // dev.kord.rest.builder.webhook/WebhookCreateBuilder.name.<set-name>|<set-name>(kotlin.String){}[0]
    final var reason // dev.kord.rest.builder.webhook/WebhookCreateBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.webhook/WebhookCreateBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.webhook/WebhookCreateBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/WebhookCreateRequest // dev.kord.rest.builder.webhook/WebhookCreateBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.builder.webhook/WebhookModifyBuilder : dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/WebhookModifyRequest> { // dev.kord.rest.builder.webhook/WebhookModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.webhook/WebhookModifyBuilder.<init>|<init>(){}[0]

    final var avatar // dev.kord.rest.builder.webhook/WebhookModifyBuilder.avatar|{}avatar[0]
        final fun <get-avatar>(): dev.kord.rest/Image? // dev.kord.rest.builder.webhook/WebhookModifyBuilder.avatar.<get-avatar>|<get-avatar>(){}[0]
        final fun <set-avatar>(dev.kord.rest/Image?) // dev.kord.rest.builder.webhook/WebhookModifyBuilder.avatar.<set-avatar>|<set-avatar>(dev.kord.rest.Image?){}[0]
    final var channelId // dev.kord.rest.builder.webhook/WebhookModifyBuilder.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.builder.webhook/WebhookModifyBuilder.channelId.<get-channelId>|<get-channelId>(){}[0]
        final fun <set-channelId>(dev.kord.common.entity/Snowflake?) // dev.kord.rest.builder.webhook/WebhookModifyBuilder.channelId.<set-channelId>|<set-channelId>(dev.kord.common.entity.Snowflake?){}[0]
    final var name // dev.kord.rest.builder.webhook/WebhookModifyBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.rest.builder.webhook/WebhookModifyBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String?) // dev.kord.rest.builder.webhook/WebhookModifyBuilder.name.<set-name>|<set-name>(kotlin.String?){}[0]
    final var reason // dev.kord.rest.builder.webhook/WebhookModifyBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.webhook/WebhookModifyBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.webhook/WebhookModifyBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]

    final fun toRequest(): dev.kord.rest.json.request/WebhookModifyRequest // dev.kord.rest.builder.webhook/WebhookModifyBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.rest.json.request/ApplicationCommandCreateRequest { // dev.kord.rest.json.request/ApplicationCommandCreateRequest|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> = ..., dev.kord.common.entity/ApplicationCommandType, dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ApplicationCommandOption>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions?> = ..., dev.kord.common.entity.optional/OptionalBoolean? = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.rest.json.request/ApplicationCommandCreateRequest.<init>|<init>(kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>;dev.kord.common.entity.ApplicationCommandType;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.ApplicationCommandOption>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions?>;dev.kord.common.entity.optional.OptionalBoolean?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean){}[0]

    final val defaultMemberPermissions // dev.kord.rest.json.request/ApplicationCommandCreateRequest.defaultMemberPermissions|{}defaultMemberPermissions[0]
        final fun <get-defaultMemberPermissions>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions?> // dev.kord.rest.json.request/ApplicationCommandCreateRequest.defaultMemberPermissions.<get-defaultMemberPermissions>|<get-defaultMemberPermissions>(){}[0]
    final val defaultPermission // dev.kord.rest.json.request/ApplicationCommandCreateRequest.defaultPermission|{}defaultPermission[0]
        final fun <get-defaultPermission>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/ApplicationCommandCreateRequest.defaultPermission.<get-defaultPermission>|<get-defaultPermission>(){}[0]
    final val description // dev.kord.rest.json.request/ApplicationCommandCreateRequest.description|{}description[0]
        final fun <get-description>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/ApplicationCommandCreateRequest.description.<get-description>|<get-description>(){}[0]
    final val descriptionLocalizations // dev.kord.rest.json.request/ApplicationCommandCreateRequest.descriptionLocalizations|{}descriptionLocalizations[0]
        final fun <get-descriptionLocalizations>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.rest.json.request/ApplicationCommandCreateRequest.descriptionLocalizations.<get-descriptionLocalizations>|<get-descriptionLocalizations>(){}[0]
    final val dmPermission // dev.kord.rest.json.request/ApplicationCommandCreateRequest.dmPermission|{}dmPermission[0]
        final fun <get-dmPermission>(): dev.kord.common.entity.optional/OptionalBoolean? // dev.kord.rest.json.request/ApplicationCommandCreateRequest.dmPermission.<get-dmPermission>|<get-dmPermission>(){}[0]
    final val name // dev.kord.rest.json.request/ApplicationCommandCreateRequest.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.json.request/ApplicationCommandCreateRequest.name.<get-name>|<get-name>(){}[0]
    final val nameLocalizations // dev.kord.rest.json.request/ApplicationCommandCreateRequest.nameLocalizations|{}nameLocalizations[0]
        final fun <get-nameLocalizations>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.rest.json.request/ApplicationCommandCreateRequest.nameLocalizations.<get-nameLocalizations>|<get-nameLocalizations>(){}[0]
    final val nsfw // dev.kord.rest.json.request/ApplicationCommandCreateRequest.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/ApplicationCommandCreateRequest.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
    final val options // dev.kord.rest.json.request/ApplicationCommandCreateRequest.options|{}options[0]
        final fun <get-options>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ApplicationCommandOption>> // dev.kord.rest.json.request/ApplicationCommandCreateRequest.options.<get-options>|<get-options>(){}[0]
    final val type // dev.kord.rest.json.request/ApplicationCommandCreateRequest.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ApplicationCommandType // dev.kord.rest.json.request/ApplicationCommandCreateRequest.type.<get-type>|<get-type>(){}[0]

    final fun component1(): kotlin/String // dev.kord.rest.json.request/ApplicationCommandCreateRequest.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/ApplicationCommandCreateRequest.component10|component10(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.rest.json.request/ApplicationCommandCreateRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/ApplicationCommandType // dev.kord.rest.json.request/ApplicationCommandCreateRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/ApplicationCommandCreateRequest.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.rest.json.request/ApplicationCommandCreateRequest.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ApplicationCommandOption>> // dev.kord.rest.json.request/ApplicationCommandCreateRequest.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions?> // dev.kord.rest.json.request/ApplicationCommandCreateRequest.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/OptionalBoolean? // dev.kord.rest.json.request/ApplicationCommandCreateRequest.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/ApplicationCommandCreateRequest.component9|component9(){}[0]
    final fun copy(kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> = ..., dev.kord.common.entity/ApplicationCommandType = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ApplicationCommandOption>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions?> = ..., dev.kord.common.entity.optional/OptionalBoolean? = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.rest.json.request/ApplicationCommandCreateRequest // dev.kord.rest.json.request/ApplicationCommandCreateRequest.copy|copy(kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>;dev.kord.common.entity.ApplicationCommandType;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.ApplicationCommandOption>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions?>;dev.kord.common.entity.optional.OptionalBoolean?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/ApplicationCommandCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/ApplicationCommandCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/ApplicationCommandCreateRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/ApplicationCommandCreateRequest> { // dev.kord.rest.json.request/ApplicationCommandCreateRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/ApplicationCommandCreateRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/ApplicationCommandCreateRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/ApplicationCommandCreateRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/ApplicationCommandCreateRequest // dev.kord.rest.json.request/ApplicationCommandCreateRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/ApplicationCommandCreateRequest) // dev.kord.rest.json.request/ApplicationCommandCreateRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.ApplicationCommandCreateRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/ApplicationCommandCreateRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/ApplicationCommandCreateRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/ApplicationCommandCreateRequest> // dev.kord.rest.json.request/ApplicationCommandCreateRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/ApplicationCommandModifyRequest { // dev.kord.rest.json.request/ApplicationCommandModifyRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ApplicationCommandOption>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions?> = ..., dev.kord.common.entity.optional/OptionalBoolean? = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.rest.json.request/ApplicationCommandModifyRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.ApplicationCommandOption>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions?>;dev.kord.common.entity.optional.OptionalBoolean?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean){}[0]

    final val defaultMemberPermissions // dev.kord.rest.json.request/ApplicationCommandModifyRequest.defaultMemberPermissions|{}defaultMemberPermissions[0]
        final fun <get-defaultMemberPermissions>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions?> // dev.kord.rest.json.request/ApplicationCommandModifyRequest.defaultMemberPermissions.<get-defaultMemberPermissions>|<get-defaultMemberPermissions>(){}[0]
    final val defaultPermission // dev.kord.rest.json.request/ApplicationCommandModifyRequest.defaultPermission|{}defaultPermission[0]
        final fun <get-defaultPermission>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/ApplicationCommandModifyRequest.defaultPermission.<get-defaultPermission>|<get-defaultPermission>(){}[0]
    final val description // dev.kord.rest.json.request/ApplicationCommandModifyRequest.description|{}description[0]
        final fun <get-description>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/ApplicationCommandModifyRequest.description.<get-description>|<get-description>(){}[0]
    final val descriptionLocalizations // dev.kord.rest.json.request/ApplicationCommandModifyRequest.descriptionLocalizations|{}descriptionLocalizations[0]
        final fun <get-descriptionLocalizations>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.rest.json.request/ApplicationCommandModifyRequest.descriptionLocalizations.<get-descriptionLocalizations>|<get-descriptionLocalizations>(){}[0]
    final val dmPermission // dev.kord.rest.json.request/ApplicationCommandModifyRequest.dmPermission|{}dmPermission[0]
        final fun <get-dmPermission>(): dev.kord.common.entity.optional/OptionalBoolean? // dev.kord.rest.json.request/ApplicationCommandModifyRequest.dmPermission.<get-dmPermission>|<get-dmPermission>(){}[0]
    final val name // dev.kord.rest.json.request/ApplicationCommandModifyRequest.name|{}name[0]
        final fun <get-name>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/ApplicationCommandModifyRequest.name.<get-name>|<get-name>(){}[0]
    final val nameLocalizations // dev.kord.rest.json.request/ApplicationCommandModifyRequest.nameLocalizations|{}nameLocalizations[0]
        final fun <get-nameLocalizations>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.rest.json.request/ApplicationCommandModifyRequest.nameLocalizations.<get-nameLocalizations>|<get-nameLocalizations>(){}[0]
    final val nsfw // dev.kord.rest.json.request/ApplicationCommandModifyRequest.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/ApplicationCommandModifyRequest.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
    final val options // dev.kord.rest.json.request/ApplicationCommandModifyRequest.options|{}options[0]
        final fun <get-options>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ApplicationCommandOption>> // dev.kord.rest.json.request/ApplicationCommandModifyRequest.options.<get-options>|<get-options>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/ApplicationCommandModifyRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.rest.json.request/ApplicationCommandModifyRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/ApplicationCommandModifyRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.rest.json.request/ApplicationCommandModifyRequest.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ApplicationCommandOption>> // dev.kord.rest.json.request/ApplicationCommandModifyRequest.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions?> // dev.kord.rest.json.request/ApplicationCommandModifyRequest.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalBoolean? // dev.kord.rest.json.request/ApplicationCommandModifyRequest.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/ApplicationCommandModifyRequest.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/ApplicationCommandModifyRequest.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ApplicationCommandOption>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions?> = ..., dev.kord.common.entity.optional/OptionalBoolean? = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.rest.json.request/ApplicationCommandModifyRequest // dev.kord.rest.json.request/ApplicationCommandModifyRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.ApplicationCommandOption>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions?>;dev.kord.common.entity.optional.OptionalBoolean?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/ApplicationCommandModifyRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/ApplicationCommandModifyRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/ApplicationCommandModifyRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/ApplicationCommandModifyRequest> { // dev.kord.rest.json.request/ApplicationCommandModifyRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/ApplicationCommandModifyRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/ApplicationCommandModifyRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/ApplicationCommandModifyRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/ApplicationCommandModifyRequest // dev.kord.rest.json.request/ApplicationCommandModifyRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/ApplicationCommandModifyRequest) // dev.kord.rest.json.request/ApplicationCommandModifyRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.ApplicationCommandModifyRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/ApplicationCommandModifyRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/ApplicationCommandModifyRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/ApplicationCommandModifyRequest> // dev.kord.rest.json.request/ApplicationCommandModifyRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/AttachmentRequest { // dev.kord.rest.json.request/AttachmentRequest|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...) // dev.kord.rest.json.request/AttachmentRequest.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]

    final val description // dev.kord.rest.json.request/AttachmentRequest.description|{}description[0]
        final fun <get-description>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/AttachmentRequest.description.<get-description>|<get-description>(){}[0]
    final val filename // dev.kord.rest.json.request/AttachmentRequest.filename|{}filename[0]
        final fun <get-filename>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/AttachmentRequest.filename.<get-filename>|<get-filename>(){}[0]
    final val id // dev.kord.rest.json.request/AttachmentRequest.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.rest.json.request/AttachmentRequest.id.<get-id>|<get-id>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.rest.json.request/AttachmentRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/AttachmentRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/AttachmentRequest.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...): dev.kord.rest.json.request/AttachmentRequest // dev.kord.rest.json.request/AttachmentRequest.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/AttachmentRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/AttachmentRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/AttachmentRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/AttachmentRequest> { // dev.kord.rest.json.request/AttachmentRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/AttachmentRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/AttachmentRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/AttachmentRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/AttachmentRequest // dev.kord.rest.json.request/AttachmentRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/AttachmentRequest) // dev.kord.rest.json.request/AttachmentRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.AttachmentRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/AttachmentRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/AttachmentRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/AttachmentRequest> // dev.kord.rest.json.request/AttachmentRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/AuditLogGetRequest { // dev.kord.rest.json.request/AuditLogGetRequest|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake? = ..., dev.kord.common.entity/AuditLogEvent? = ..., dev.kord.common.entity/Snowflake? = ..., dev.kord.common.entity/Snowflake? = ..., kotlin/Int? = ...) // dev.kord.rest.json.request/AuditLogGetRequest.<init>|<init>(dev.kord.common.entity.Snowflake?;dev.kord.common.entity.AuditLogEvent?;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.Snowflake?;kotlin.Int?){}[0]

    final val action // dev.kord.rest.json.request/AuditLogGetRequest.action|{}action[0]
        final fun <get-action>(): dev.kord.common.entity/AuditLogEvent? // dev.kord.rest.json.request/AuditLogGetRequest.action.<get-action>|<get-action>(){}[0]
    final val after // dev.kord.rest.json.request/AuditLogGetRequest.after|{}after[0]
        final fun <get-after>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.json.request/AuditLogGetRequest.after.<get-after>|<get-after>(){}[0]
    final val before // dev.kord.rest.json.request/AuditLogGetRequest.before|{}before[0]
        final fun <get-before>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.json.request/AuditLogGetRequest.before.<get-before>|<get-before>(){}[0]
    final val limit // dev.kord.rest.json.request/AuditLogGetRequest.limit|{}limit[0]
        final fun <get-limit>(): kotlin/Int? // dev.kord.rest.json.request/AuditLogGetRequest.limit.<get-limit>|<get-limit>(){}[0]
    final val userId // dev.kord.rest.json.request/AuditLogGetRequest.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.json.request/AuditLogGetRequest.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake? // dev.kord.rest.json.request/AuditLogGetRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/AuditLogEvent? // dev.kord.rest.json.request/AuditLogGetRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake? // dev.kord.rest.json.request/AuditLogGetRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity/Snowflake? // dev.kord.rest.json.request/AuditLogGetRequest.component4|component4(){}[0]
    final fun component5(): kotlin/Int? // dev.kord.rest.json.request/AuditLogGetRequest.component5|component5(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake? = ..., dev.kord.common.entity/AuditLogEvent? = ..., dev.kord.common.entity/Snowflake? = ..., dev.kord.common.entity/Snowflake? = ..., kotlin/Int? = ...): dev.kord.rest.json.request/AuditLogGetRequest // dev.kord.rest.json.request/AuditLogGetRequest.copy|copy(dev.kord.common.entity.Snowflake?;dev.kord.common.entity.AuditLogEvent?;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.Snowflake?;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/AuditLogGetRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/AuditLogGetRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/AuditLogGetRequest.toString|toString(){}[0]
}

final class dev.kord.rest.json.request/AutoCompleteResponseCreateRequest { // dev.kord.rest.json.request/AutoCompleteResponseCreateRequest|null[0]
    constructor <init>(dev.kord.common.entity/InteractionResponseType, dev.kord.common.entity/DiscordAutoComplete) // dev.kord.rest.json.request/AutoCompleteResponseCreateRequest.<init>|<init>(dev.kord.common.entity.InteractionResponseType;dev.kord.common.entity.DiscordAutoComplete){}[0]

    final val data // dev.kord.rest.json.request/AutoCompleteResponseCreateRequest.data|{}data[0]
        final fun <get-data>(): dev.kord.common.entity/DiscordAutoComplete // dev.kord.rest.json.request/AutoCompleteResponseCreateRequest.data.<get-data>|<get-data>(){}[0]
    final val type // dev.kord.rest.json.request/AutoCompleteResponseCreateRequest.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/InteractionResponseType // dev.kord.rest.json.request/AutoCompleteResponseCreateRequest.type.<get-type>|<get-type>(){}[0]

    final fun component1(): dev.kord.common.entity/InteractionResponseType // dev.kord.rest.json.request/AutoCompleteResponseCreateRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/DiscordAutoComplete // dev.kord.rest.json.request/AutoCompleteResponseCreateRequest.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/InteractionResponseType = ..., dev.kord.common.entity/DiscordAutoComplete = ...): dev.kord.rest.json.request/AutoCompleteResponseCreateRequest // dev.kord.rest.json.request/AutoCompleteResponseCreateRequest.copy|copy(dev.kord.common.entity.InteractionResponseType;dev.kord.common.entity.DiscordAutoComplete){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/AutoCompleteResponseCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/AutoCompleteResponseCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/AutoCompleteResponseCreateRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/AutoCompleteResponseCreateRequest> { // dev.kord.rest.json.request/AutoCompleteResponseCreateRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/AutoCompleteResponseCreateRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/AutoCompleteResponseCreateRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/AutoCompleteResponseCreateRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/AutoCompleteResponseCreateRequest // dev.kord.rest.json.request/AutoCompleteResponseCreateRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/AutoCompleteResponseCreateRequest) // dev.kord.rest.json.request/AutoCompleteResponseCreateRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.AutoCompleteResponseCreateRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/AutoCompleteResponseCreateRequest.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/AutoCompleteResponseCreateRequest> // dev.kord.rest.json.request/AutoCompleteResponseCreateRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/AutoModerationRuleCreateRequest { // dev.kord.rest.json.request/AutoModerationRuleCreateRequest|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity/AutoModerationRuleEventType, dev.kord.common.entity/AutoModerationRuleTriggerType, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata> = ..., kotlin.collections/List<dev.kord.common.entity/DiscordAutoModerationAction>, dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ...) // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.<init>|<init>(kotlin.String;dev.kord.common.entity.AutoModerationRuleEventType;dev.kord.common.entity.AutoModerationRuleTriggerType;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordAutoModerationRuleTriggerMetadata>;kotlin.collections.List<dev.kord.common.entity.DiscordAutoModerationAction>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>){}[0]

    final val actions // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.actions|{}actions[0]
        final fun <get-actions>(): kotlin.collections/List<dev.kord.common.entity/DiscordAutoModerationAction> // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.actions.<get-actions>|<get-actions>(){}[0]
    final val enabled // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.enabled|{}enabled[0]
        final fun <get-enabled>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.enabled.<get-enabled>|<get-enabled>(){}[0]
    final val eventType // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.eventType|{}eventType[0]
        final fun <get-eventType>(): dev.kord.common.entity/AutoModerationRuleEventType // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.eventType.<get-eventType>|<get-eventType>(){}[0]
    final val exemptChannels // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.exemptChannels|{}exemptChannels[0]
        final fun <get-exemptChannels>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.exemptChannels.<get-exemptChannels>|<get-exemptChannels>(){}[0]
    final val exemptRoles // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.exemptRoles|{}exemptRoles[0]
        final fun <get-exemptRoles>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.exemptRoles.<get-exemptRoles>|<get-exemptRoles>(){}[0]
    final val name // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.name.<get-name>|<get-name>(){}[0]
    final val triggerMetadata // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.triggerMetadata|{}triggerMetadata[0]
        final fun <get-triggerMetadata>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata> // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.triggerMetadata.<get-triggerMetadata>|<get-triggerMetadata>(){}[0]
    final val triggerType // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.triggerType|{}triggerType[0]
        final fun <get-triggerType>(): dev.kord.common.entity/AutoModerationRuleTriggerType // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.triggerType.<get-triggerType>|<get-triggerType>(){}[0]

    final fun component1(): kotlin/String // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/AutoModerationRuleEventType // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/AutoModerationRuleTriggerType // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata> // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.component4|component4(){}[0]
    final fun component5(): kotlin.collections/List<dev.kord.common.entity/DiscordAutoModerationAction> // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.component8|component8(){}[0]
    final fun copy(kotlin/String = ..., dev.kord.common.entity/AutoModerationRuleEventType = ..., dev.kord.common.entity/AutoModerationRuleTriggerType = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata> = ..., kotlin.collections/List<dev.kord.common.entity/DiscordAutoModerationAction> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ...): dev.kord.rest.json.request/AutoModerationRuleCreateRequest // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.copy|copy(kotlin.String;dev.kord.common.entity.AutoModerationRuleEventType;dev.kord.common.entity.AutoModerationRuleTriggerType;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordAutoModerationRuleTriggerMetadata>;kotlin.collections.List<dev.kord.common.entity.DiscordAutoModerationAction>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/AutoModerationRuleCreateRequest> { // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/AutoModerationRuleCreateRequest // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/AutoModerationRuleCreateRequest) // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.AutoModerationRuleCreateRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/AutoModerationRuleCreateRequest> // dev.kord.rest.json.request/AutoModerationRuleCreateRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/AutoModerationRuleModifyRequest { // dev.kord.rest.json.request/AutoModerationRuleModifyRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AutoModerationRuleEventType> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordAutoModerationAction>> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ...) // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.AutoModerationRuleEventType>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordAutoModerationRuleTriggerMetadata>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordAutoModerationAction>>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>){}[0]

    final val actions // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.actions|{}actions[0]
        final fun <get-actions>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordAutoModerationAction>> // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.actions.<get-actions>|<get-actions>(){}[0]
    final val enabled // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.enabled|{}enabled[0]
        final fun <get-enabled>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.enabled.<get-enabled>|<get-enabled>(){}[0]
    final val eventType // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.eventType|{}eventType[0]
        final fun <get-eventType>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AutoModerationRuleEventType> // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.eventType.<get-eventType>|<get-eventType>(){}[0]
    final val exemptChannels // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.exemptChannels|{}exemptChannels[0]
        final fun <get-exemptChannels>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.exemptChannels.<get-exemptChannels>|<get-exemptChannels>(){}[0]
    final val exemptRoles // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.exemptRoles|{}exemptRoles[0]
        final fun <get-exemptRoles>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.exemptRoles.<get-exemptRoles>|<get-exemptRoles>(){}[0]
    final val name // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.name|{}name[0]
        final fun <get-name>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.name.<get-name>|<get-name>(){}[0]
    final val triggerMetadata // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.triggerMetadata|{}triggerMetadata[0]
        final fun <get-triggerMetadata>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata> // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.triggerMetadata.<get-triggerMetadata>|<get-triggerMetadata>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AutoModerationRuleEventType> // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata> // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordAutoModerationAction>> // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.component7|component7(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AutoModerationRuleEventType> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordAutoModerationAction>> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ...): dev.kord.rest.json.request/AutoModerationRuleModifyRequest // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.AutoModerationRuleEventType>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordAutoModerationRuleTriggerMetadata>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordAutoModerationAction>>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/AutoModerationRuleModifyRequest> { // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/AutoModerationRuleModifyRequest // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/AutoModerationRuleModifyRequest) // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.AutoModerationRuleModifyRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/AutoModerationRuleModifyRequest> // dev.kord.rest.json.request/AutoModerationRuleModifyRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/BulkDeleteRequest { // dev.kord.rest.json.request/BulkDeleteRequest|null[0]
    constructor <init>(kotlin.collections/List<dev.kord.common.entity/Snowflake>) // dev.kord.rest.json.request/BulkDeleteRequest.<init>|<init>(kotlin.collections.List<dev.kord.common.entity.Snowflake>){}[0]

    final val messages // dev.kord.rest.json.request/BulkDeleteRequest.messages|{}messages[0]
        final fun <get-messages>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.rest.json.request/BulkDeleteRequest.messages.<get-messages>|<get-messages>(){}[0]

    final fun component1(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.rest.json.request/BulkDeleteRequest.component1|component1(){}[0]
    final fun copy(kotlin.collections/List<dev.kord.common.entity/Snowflake> = ...): dev.kord.rest.json.request/BulkDeleteRequest // dev.kord.rest.json.request/BulkDeleteRequest.copy|copy(kotlin.collections.List<dev.kord.common.entity.Snowflake>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/BulkDeleteRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/BulkDeleteRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/BulkDeleteRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/BulkDeleteRequest> { // dev.kord.rest.json.request/BulkDeleteRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/BulkDeleteRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/BulkDeleteRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/BulkDeleteRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/BulkDeleteRequest // dev.kord.rest.json.request/BulkDeleteRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/BulkDeleteRequest) // dev.kord.rest.json.request/BulkDeleteRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.BulkDeleteRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/BulkDeleteRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/BulkDeleteRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/BulkDeleteRequest> // dev.kord.rest.json.request/BulkDeleteRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/ChannelFollowRequest { // dev.kord.rest.json.request/ChannelFollowRequest|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake) // dev.kord.rest.json.request/ChannelFollowRequest.<init>|<init>(dev.kord.common.entity.Snowflake){}[0]

    final val webhookChannelId // dev.kord.rest.json.request/ChannelFollowRequest.webhookChannelId|{}webhookChannelId[0]
        final fun <get-webhookChannelId>(): dev.kord.common.entity/Snowflake // dev.kord.rest.json.request/ChannelFollowRequest.webhookChannelId.<get-webhookChannelId>|<get-webhookChannelId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.rest.json.request/ChannelFollowRequest.component1|component1(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ...): dev.kord.rest.json.request/ChannelFollowRequest // dev.kord.rest.json.request/ChannelFollowRequest.copy|copy(dev.kord.common.entity.Snowflake){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/ChannelFollowRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/ChannelFollowRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/ChannelFollowRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/ChannelFollowRequest> { // dev.kord.rest.json.request/ChannelFollowRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/ChannelFollowRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/ChannelFollowRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/ChannelFollowRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/ChannelFollowRequest // dev.kord.rest.json.request/ChannelFollowRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/ChannelFollowRequest) // dev.kord.rest.json.request/ChannelFollowRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.ChannelFollowRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/ChannelFollowRequest.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/ChannelFollowRequest> // dev.kord.rest.json.request/ChannelFollowRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/ChannelModifyPatchRequest { // dev.kord.rest.json.request/ChannelModifyPatchRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalInt? = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/OptionalBoolean? = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration?> = ..., dev.kord.common.entity.optional/OptionalInt? = ..., dev.kord.common.entity.optional/OptionalInt? = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Overwrite>?> = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ArchiveDuration> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/VideoQualityMode?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ArchiveDuration?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DefaultReaction?> = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ChannelFlags> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/ForumTagRequest>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/SortOrderType?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ForumLayoutType> = ...) // dev.kord.rest.json.request/ChannelModifyPatchRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalInt?;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.OptionalBoolean?;dev.kord.common.entity.optional.Optional<kotlin.time.Duration?>;dev.kord.common.entity.optional.OptionalInt?;dev.kord.common.entity.optional.OptionalInt?;dev.kord.common.entity.optional.Optional<kotlin.collections.Set<dev.kord.common.entity.Overwrite>?>;dev.kord.common.entity.optional.OptionalSnowflake?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ArchiveDuration>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.VideoQualityMode?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ArchiveDuration?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DefaultReaction?>;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ChannelFlags>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.ForumTagRequest>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.SortOrderType?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ForumLayoutType>){}[0]

    final val appliedTags // dev.kord.rest.json.request/ChannelModifyPatchRequest.appliedTags|{}appliedTags[0]
        final fun <get-appliedTags>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.rest.json.request/ChannelModifyPatchRequest.appliedTags.<get-appliedTags>|<get-appliedTags>(){}[0]
    final val archived // dev.kord.rest.json.request/ChannelModifyPatchRequest.archived|{}archived[0]
        final fun <get-archived>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/ChannelModifyPatchRequest.archived.<get-archived>|<get-archived>(){}[0]
    final val autoArchiveDuration // dev.kord.rest.json.request/ChannelModifyPatchRequest.autoArchiveDuration|{}autoArchiveDuration[0]
        final fun <get-autoArchiveDuration>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ArchiveDuration> // dev.kord.rest.json.request/ChannelModifyPatchRequest.autoArchiveDuration.<get-autoArchiveDuration>|<get-autoArchiveDuration>(){}[0]
    final val availableTags // dev.kord.rest.json.request/ChannelModifyPatchRequest.availableTags|{}availableTags[0]
        final fun <get-availableTags>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/ForumTagRequest>> // dev.kord.rest.json.request/ChannelModifyPatchRequest.availableTags.<get-availableTags>|<get-availableTags>(){}[0]
    final val bitrate // dev.kord.rest.json.request/ChannelModifyPatchRequest.bitrate|{}bitrate[0]
        final fun <get-bitrate>(): dev.kord.common.entity.optional/OptionalInt? // dev.kord.rest.json.request/ChannelModifyPatchRequest.bitrate.<get-bitrate>|<get-bitrate>(){}[0]
    final val defaultAutoArchiveDuration // dev.kord.rest.json.request/ChannelModifyPatchRequest.defaultAutoArchiveDuration|{}defaultAutoArchiveDuration[0]
        final fun <get-defaultAutoArchiveDuration>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ArchiveDuration?> // dev.kord.rest.json.request/ChannelModifyPatchRequest.defaultAutoArchiveDuration.<get-defaultAutoArchiveDuration>|<get-defaultAutoArchiveDuration>(){}[0]
    final val defaultForumLayout // dev.kord.rest.json.request/ChannelModifyPatchRequest.defaultForumLayout|{}defaultForumLayout[0]
        final fun <get-defaultForumLayout>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ForumLayoutType> // dev.kord.rest.json.request/ChannelModifyPatchRequest.defaultForumLayout.<get-defaultForumLayout>|<get-defaultForumLayout>(){}[0]
    final val defaultReactionEmoji // dev.kord.rest.json.request/ChannelModifyPatchRequest.defaultReactionEmoji|{}defaultReactionEmoji[0]
        final fun <get-defaultReactionEmoji>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DefaultReaction?> // dev.kord.rest.json.request/ChannelModifyPatchRequest.defaultReactionEmoji.<get-defaultReactionEmoji>|<get-defaultReactionEmoji>(){}[0]
    final val defaultSortOrder // dev.kord.rest.json.request/ChannelModifyPatchRequest.defaultSortOrder|{}defaultSortOrder[0]
        final fun <get-defaultSortOrder>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/SortOrderType?> // dev.kord.rest.json.request/ChannelModifyPatchRequest.defaultSortOrder.<get-defaultSortOrder>|<get-defaultSortOrder>(){}[0]
    final val defaultThreadRateLimitPerUser // dev.kord.rest.json.request/ChannelModifyPatchRequest.defaultThreadRateLimitPerUser|{}defaultThreadRateLimitPerUser[0]
        final fun <get-defaultThreadRateLimitPerUser>(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.rest.json.request/ChannelModifyPatchRequest.defaultThreadRateLimitPerUser.<get-defaultThreadRateLimitPerUser>|<get-defaultThreadRateLimitPerUser>(){}[0]
    final val flags // dev.kord.rest.json.request/ChannelModifyPatchRequest.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ChannelFlags> // dev.kord.rest.json.request/ChannelModifyPatchRequest.flags.<get-flags>|<get-flags>(){}[0]
    final val invitable // dev.kord.rest.json.request/ChannelModifyPatchRequest.invitable|{}invitable[0]
        final fun <get-invitable>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/ChannelModifyPatchRequest.invitable.<get-invitable>|<get-invitable>(){}[0]
    final val locked // dev.kord.rest.json.request/ChannelModifyPatchRequest.locked|{}locked[0]
        final fun <get-locked>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/ChannelModifyPatchRequest.locked.<get-locked>|<get-locked>(){}[0]
    final val name // dev.kord.rest.json.request/ChannelModifyPatchRequest.name|{}name[0]
        final fun <get-name>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/ChannelModifyPatchRequest.name.<get-name>|<get-name>(){}[0]
    final val nsfw // dev.kord.rest.json.request/ChannelModifyPatchRequest.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): dev.kord.common.entity.optional/OptionalBoolean? // dev.kord.rest.json.request/ChannelModifyPatchRequest.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
    final val parentId // dev.kord.rest.json.request/ChannelModifyPatchRequest.parentId|{}parentId[0]
        final fun <get-parentId>(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.rest.json.request/ChannelModifyPatchRequest.parentId.<get-parentId>|<get-parentId>(){}[0]
    final val permissionOverwrites // dev.kord.rest.json.request/ChannelModifyPatchRequest.permissionOverwrites|{}permissionOverwrites[0]
        final fun <get-permissionOverwrites>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Overwrite>?> // dev.kord.rest.json.request/ChannelModifyPatchRequest.permissionOverwrites.<get-permissionOverwrites>|<get-permissionOverwrites>(){}[0]
    final val position // dev.kord.rest.json.request/ChannelModifyPatchRequest.position|{}position[0]
        final fun <get-position>(): dev.kord.common.entity.optional/OptionalInt? // dev.kord.rest.json.request/ChannelModifyPatchRequest.position.<get-position>|<get-position>(){}[0]
    final val rateLimitPerUser // dev.kord.rest.json.request/ChannelModifyPatchRequest.rateLimitPerUser|{}rateLimitPerUser[0]
        final fun <get-rateLimitPerUser>(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration?> // dev.kord.rest.json.request/ChannelModifyPatchRequest.rateLimitPerUser.<get-rateLimitPerUser>|<get-rateLimitPerUser>(){}[0]
    final val rtcRegion // dev.kord.rest.json.request/ChannelModifyPatchRequest.rtcRegion|{}rtcRegion[0]
        final fun <get-rtcRegion>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/ChannelModifyPatchRequest.rtcRegion.<get-rtcRegion>|<get-rtcRegion>(){}[0]
    final val topic // dev.kord.rest.json.request/ChannelModifyPatchRequest.topic|{}topic[0]
        final fun <get-topic>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/ChannelModifyPatchRequest.topic.<get-topic>|<get-topic>(){}[0]
    final val userLimit // dev.kord.rest.json.request/ChannelModifyPatchRequest.userLimit|{}userLimit[0]
        final fun <get-userLimit>(): dev.kord.common.entity.optional/OptionalInt? // dev.kord.rest.json.request/ChannelModifyPatchRequest.userLimit.<get-userLimit>|<get-userLimit>(){}[0]
    final val videoQualityMode // dev.kord.rest.json.request/ChannelModifyPatchRequest.videoQualityMode|{}videoQualityMode[0]
        final fun <get-videoQualityMode>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/VideoQualityMode?> // dev.kord.rest.json.request/ChannelModifyPatchRequest.videoQualityMode.<get-videoQualityMode>|<get-videoQualityMode>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/ChannelModifyPatchRequest.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/ChannelModifyPatchRequest.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ArchiveDuration> // dev.kord.rest.json.request/ChannelModifyPatchRequest.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/ChannelModifyPatchRequest.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/ChannelModifyPatchRequest.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/ChannelModifyPatchRequest.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/VideoQualityMode?> // dev.kord.rest.json.request/ChannelModifyPatchRequest.component15|component15(){}[0]
    final fun component16(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ArchiveDuration?> // dev.kord.rest.json.request/ChannelModifyPatchRequest.component16|component16(){}[0]
    final fun component17(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DefaultReaction?> // dev.kord.rest.json.request/ChannelModifyPatchRequest.component17|component17(){}[0]
    final fun component18(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.rest.json.request/ChannelModifyPatchRequest.component18|component18(){}[0]
    final fun component19(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ChannelFlags> // dev.kord.rest.json.request/ChannelModifyPatchRequest.component19|component19(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalInt? // dev.kord.rest.json.request/ChannelModifyPatchRequest.component2|component2(){}[0]
    final fun component20(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/ForumTagRequest>> // dev.kord.rest.json.request/ChannelModifyPatchRequest.component20|component20(){}[0]
    final fun component21(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.rest.json.request/ChannelModifyPatchRequest.component21|component21(){}[0]
    final fun component22(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/SortOrderType?> // dev.kord.rest.json.request/ChannelModifyPatchRequest.component22|component22(){}[0]
    final fun component23(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ForumLayoutType> // dev.kord.rest.json.request/ChannelModifyPatchRequest.component23|component23(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/ChannelModifyPatchRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalBoolean? // dev.kord.rest.json.request/ChannelModifyPatchRequest.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration?> // dev.kord.rest.json.request/ChannelModifyPatchRequest.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/OptionalInt? // dev.kord.rest.json.request/ChannelModifyPatchRequest.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalInt? // dev.kord.rest.json.request/ChannelModifyPatchRequest.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Overwrite>?> // dev.kord.rest.json.request/ChannelModifyPatchRequest.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.rest.json.request/ChannelModifyPatchRequest.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalInt? = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/OptionalBoolean? = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration?> = ..., dev.kord.common.entity.optional/OptionalInt? = ..., dev.kord.common.entity.optional/OptionalInt? = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Overwrite>?> = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ArchiveDuration> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/VideoQualityMode?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ArchiveDuration?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DefaultReaction?> = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ChannelFlags> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/ForumTagRequest>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/SortOrderType?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ForumLayoutType> = ...): dev.kord.rest.json.request/ChannelModifyPatchRequest // dev.kord.rest.json.request/ChannelModifyPatchRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalInt?;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.OptionalBoolean?;dev.kord.common.entity.optional.Optional<kotlin.time.Duration?>;dev.kord.common.entity.optional.OptionalInt?;dev.kord.common.entity.optional.OptionalInt?;dev.kord.common.entity.optional.Optional<kotlin.collections.Set<dev.kord.common.entity.Overwrite>?>;dev.kord.common.entity.optional.OptionalSnowflake?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ArchiveDuration>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.VideoQualityMode?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ArchiveDuration?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DefaultReaction?>;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ChannelFlags>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.ForumTagRequest>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.SortOrderType?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ForumLayoutType>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/ChannelModifyPatchRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/ChannelModifyPatchRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/ChannelModifyPatchRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/ChannelModifyPatchRequest> { // dev.kord.rest.json.request/ChannelModifyPatchRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/ChannelModifyPatchRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/ChannelModifyPatchRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/ChannelModifyPatchRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/ChannelModifyPatchRequest // dev.kord.rest.json.request/ChannelModifyPatchRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/ChannelModifyPatchRequest) // dev.kord.rest.json.request/ChannelModifyPatchRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.ChannelModifyPatchRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/ChannelModifyPatchRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/ChannelModifyPatchRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/ChannelModifyPatchRequest> // dev.kord.rest.json.request/ChannelModifyPatchRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/ChannelModifyPutRequest { // dev.kord.rest.json.request/ChannelModifyPutRequest|null[0]
    constructor <init>(kotlin/String, kotlin/Int, kotlin/String? = ..., kotlin/Boolean? = ..., kotlin/Int? = ..., kotlin/Int? = ..., kotlin/Int? = ..., kotlin.collections/List<dev.kord.common.entity/Overwrite>, kotlin/String? = ...) // dev.kord.rest.json.request/ChannelModifyPutRequest.<init>|<init>(kotlin.String;kotlin.Int;kotlin.String?;kotlin.Boolean?;kotlin.Int?;kotlin.Int?;kotlin.Int?;kotlin.collections.List<dev.kord.common.entity.Overwrite>;kotlin.String?){}[0]

    final val bitrate // dev.kord.rest.json.request/ChannelModifyPutRequest.bitrate|{}bitrate[0]
        final fun <get-bitrate>(): kotlin/Int? // dev.kord.rest.json.request/ChannelModifyPutRequest.bitrate.<get-bitrate>|<get-bitrate>(){}[0]
    final val name // dev.kord.rest.json.request/ChannelModifyPutRequest.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.json.request/ChannelModifyPutRequest.name.<get-name>|<get-name>(){}[0]
    final val nsfw // dev.kord.rest.json.request/ChannelModifyPutRequest.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): kotlin/Boolean? // dev.kord.rest.json.request/ChannelModifyPutRequest.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
    final val parentId // dev.kord.rest.json.request/ChannelModifyPutRequest.parentId|{}parentId[0]
        final fun <get-parentId>(): kotlin/String? // dev.kord.rest.json.request/ChannelModifyPutRequest.parentId.<get-parentId>|<get-parentId>(){}[0]
    final val permissionOverwrites // dev.kord.rest.json.request/ChannelModifyPutRequest.permissionOverwrites|{}permissionOverwrites[0]
        final fun <get-permissionOverwrites>(): kotlin.collections/List<dev.kord.common.entity/Overwrite> // dev.kord.rest.json.request/ChannelModifyPutRequest.permissionOverwrites.<get-permissionOverwrites>|<get-permissionOverwrites>(){}[0]
    final val position // dev.kord.rest.json.request/ChannelModifyPutRequest.position|{}position[0]
        final fun <get-position>(): kotlin/Int // dev.kord.rest.json.request/ChannelModifyPutRequest.position.<get-position>|<get-position>(){}[0]
    final val rateLimitPerUser // dev.kord.rest.json.request/ChannelModifyPutRequest.rateLimitPerUser|{}rateLimitPerUser[0]
        final fun <get-rateLimitPerUser>(): kotlin/Int? // dev.kord.rest.json.request/ChannelModifyPutRequest.rateLimitPerUser.<get-rateLimitPerUser>|<get-rateLimitPerUser>(){}[0]
    final val topic // dev.kord.rest.json.request/ChannelModifyPutRequest.topic|{}topic[0]
        final fun <get-topic>(): kotlin/String? // dev.kord.rest.json.request/ChannelModifyPutRequest.topic.<get-topic>|<get-topic>(){}[0]
    final val userLimit // dev.kord.rest.json.request/ChannelModifyPutRequest.userLimit|{}userLimit[0]
        final fun <get-userLimit>(): kotlin/Int? // dev.kord.rest.json.request/ChannelModifyPutRequest.userLimit.<get-userLimit>|<get-userLimit>(){}[0]

    final fun component1(): kotlin/String // dev.kord.rest.json.request/ChannelModifyPutRequest.component1|component1(){}[0]
    final fun component2(): kotlin/Int // dev.kord.rest.json.request/ChannelModifyPutRequest.component2|component2(){}[0]
    final fun component3(): kotlin/String? // dev.kord.rest.json.request/ChannelModifyPutRequest.component3|component3(){}[0]
    final fun component4(): kotlin/Boolean? // dev.kord.rest.json.request/ChannelModifyPutRequest.component4|component4(){}[0]
    final fun component5(): kotlin/Int? // dev.kord.rest.json.request/ChannelModifyPutRequest.component5|component5(){}[0]
    final fun component6(): kotlin/Int? // dev.kord.rest.json.request/ChannelModifyPutRequest.component6|component6(){}[0]
    final fun component7(): kotlin/Int? // dev.kord.rest.json.request/ChannelModifyPutRequest.component7|component7(){}[0]
    final fun component8(): kotlin.collections/List<dev.kord.common.entity/Overwrite> // dev.kord.rest.json.request/ChannelModifyPutRequest.component8|component8(){}[0]
    final fun component9(): kotlin/String? // dev.kord.rest.json.request/ChannelModifyPutRequest.component9|component9(){}[0]
    final fun copy(kotlin/String = ..., kotlin/Int = ..., kotlin/String? = ..., kotlin/Boolean? = ..., kotlin/Int? = ..., kotlin/Int? = ..., kotlin/Int? = ..., kotlin.collections/List<dev.kord.common.entity/Overwrite> = ..., kotlin/String? = ...): dev.kord.rest.json.request/ChannelModifyPutRequest // dev.kord.rest.json.request/ChannelModifyPutRequest.copy|copy(kotlin.String;kotlin.Int;kotlin.String?;kotlin.Boolean?;kotlin.Int?;kotlin.Int?;kotlin.Int?;kotlin.collections.List<dev.kord.common.entity.Overwrite>;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/ChannelModifyPutRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/ChannelModifyPutRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/ChannelModifyPutRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/ChannelModifyPutRequest> { // dev.kord.rest.json.request/ChannelModifyPutRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/ChannelModifyPutRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/ChannelModifyPutRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/ChannelModifyPutRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/ChannelModifyPutRequest // dev.kord.rest.json.request/ChannelModifyPutRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/ChannelModifyPutRequest) // dev.kord.rest.json.request/ChannelModifyPutRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.ChannelModifyPutRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/ChannelModifyPutRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/ChannelModifyPutRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/ChannelModifyPutRequest> // dev.kord.rest.json.request/ChannelModifyPutRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/ChannelPermissionEditRequest { // dev.kord.rest.json.request/ChannelPermissionEditRequest|null[0]
    constructor <init>(dev.kord.common.entity/Permissions, dev.kord.common.entity/Permissions, dev.kord.common.entity/OverwriteType) // dev.kord.rest.json.request/ChannelPermissionEditRequest.<init>|<init>(dev.kord.common.entity.Permissions;dev.kord.common.entity.Permissions;dev.kord.common.entity.OverwriteType){}[0]

    final val allow // dev.kord.rest.json.request/ChannelPermissionEditRequest.allow|{}allow[0]
        final fun <get-allow>(): dev.kord.common.entity/Permissions // dev.kord.rest.json.request/ChannelPermissionEditRequest.allow.<get-allow>|<get-allow>(){}[0]
    final val deny // dev.kord.rest.json.request/ChannelPermissionEditRequest.deny|{}deny[0]
        final fun <get-deny>(): dev.kord.common.entity/Permissions // dev.kord.rest.json.request/ChannelPermissionEditRequest.deny.<get-deny>|<get-deny>(){}[0]
    final val type // dev.kord.rest.json.request/ChannelPermissionEditRequest.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/OverwriteType // dev.kord.rest.json.request/ChannelPermissionEditRequest.type.<get-type>|<get-type>(){}[0]

    final fun component1(): dev.kord.common.entity/Permissions // dev.kord.rest.json.request/ChannelPermissionEditRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Permissions // dev.kord.rest.json.request/ChannelPermissionEditRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/OverwriteType // dev.kord.rest.json.request/ChannelPermissionEditRequest.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity/Permissions = ..., dev.kord.common.entity/Permissions = ..., dev.kord.common.entity/OverwriteType = ...): dev.kord.rest.json.request/ChannelPermissionEditRequest // dev.kord.rest.json.request/ChannelPermissionEditRequest.copy|copy(dev.kord.common.entity.Permissions;dev.kord.common.entity.Permissions;dev.kord.common.entity.OverwriteType){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/ChannelPermissionEditRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/ChannelPermissionEditRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/ChannelPermissionEditRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/ChannelPermissionEditRequest> { // dev.kord.rest.json.request/ChannelPermissionEditRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/ChannelPermissionEditRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/ChannelPermissionEditRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/ChannelPermissionEditRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/ChannelPermissionEditRequest // dev.kord.rest.json.request/ChannelPermissionEditRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/ChannelPermissionEditRequest) // dev.kord.rest.json.request/ChannelPermissionEditRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.ChannelPermissionEditRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/ChannelPermissionEditRequest.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/ChannelPermissionEditRequest> // dev.kord.rest.json.request/ChannelPermissionEditRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/ChannelPositionSwapRequest { // dev.kord.rest.json.request/ChannelPositionSwapRequest|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalInt? = ..., dev.kord.common.entity.optional/OptionalBoolean? = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ...) // dev.kord.rest.json.request/ChannelPositionSwapRequest.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalInt?;dev.kord.common.entity.optional.OptionalBoolean?;dev.kord.common.entity.optional.OptionalSnowflake?){}[0]

    final val id // dev.kord.rest.json.request/ChannelPositionSwapRequest.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.rest.json.request/ChannelPositionSwapRequest.id.<get-id>|<get-id>(){}[0]
    final val lockPermissions // dev.kord.rest.json.request/ChannelPositionSwapRequest.lockPermissions|{}lockPermissions[0]
        final fun <get-lockPermissions>(): dev.kord.common.entity.optional/OptionalBoolean? // dev.kord.rest.json.request/ChannelPositionSwapRequest.lockPermissions.<get-lockPermissions>|<get-lockPermissions>(){}[0]
    final val parentId // dev.kord.rest.json.request/ChannelPositionSwapRequest.parentId|{}parentId[0]
        final fun <get-parentId>(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.rest.json.request/ChannelPositionSwapRequest.parentId.<get-parentId>|<get-parentId>(){}[0]
    final val position // dev.kord.rest.json.request/ChannelPositionSwapRequest.position|{}position[0]
        final fun <get-position>(): dev.kord.common.entity.optional/OptionalInt? // dev.kord.rest.json.request/ChannelPositionSwapRequest.position.<get-position>|<get-position>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.rest.json.request/ChannelPositionSwapRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalInt? // dev.kord.rest.json.request/ChannelPositionSwapRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalBoolean? // dev.kord.rest.json.request/ChannelPositionSwapRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.rest.json.request/ChannelPositionSwapRequest.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalInt? = ..., dev.kord.common.entity.optional/OptionalBoolean? = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ...): dev.kord.rest.json.request/ChannelPositionSwapRequest // dev.kord.rest.json.request/ChannelPositionSwapRequest.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalInt?;dev.kord.common.entity.optional.OptionalBoolean?;dev.kord.common.entity.optional.OptionalSnowflake?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/ChannelPositionSwapRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/ChannelPositionSwapRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/ChannelPositionSwapRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/ChannelPositionSwapRequest> { // dev.kord.rest.json.request/ChannelPositionSwapRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/ChannelPositionSwapRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/ChannelPositionSwapRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/ChannelPositionSwapRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/ChannelPositionSwapRequest // dev.kord.rest.json.request/ChannelPositionSwapRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/ChannelPositionSwapRequest) // dev.kord.rest.json.request/ChannelPositionSwapRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.ChannelPositionSwapRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/ChannelPositionSwapRequest.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/ChannelPositionSwapRequest> // dev.kord.rest.json.request/ChannelPositionSwapRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/CurrentUserModifyRequest { // dev.kord.rest.json.request/CurrentUserModifyRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...) // dev.kord.rest.json.request/CurrentUserModifyRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]

    final val avatar // dev.kord.rest.json.request/CurrentUserModifyRequest.avatar|{}avatar[0]
        final fun <get-avatar>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/CurrentUserModifyRequest.avatar.<get-avatar>|<get-avatar>(){}[0]
    final val username // dev.kord.rest.json.request/CurrentUserModifyRequest.username|{}username[0]
        final fun <get-username>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/CurrentUserModifyRequest.username.<get-username>|<get-username>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/CurrentUserModifyRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/CurrentUserModifyRequest.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...): dev.kord.rest.json.request/CurrentUserModifyRequest // dev.kord.rest.json.request/CurrentUserModifyRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/CurrentUserModifyRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/CurrentUserModifyRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/CurrentUserModifyRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/CurrentUserModifyRequest> { // dev.kord.rest.json.request/CurrentUserModifyRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/CurrentUserModifyRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/CurrentUserModifyRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/CurrentUserModifyRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/CurrentUserModifyRequest // dev.kord.rest.json.request/CurrentUserModifyRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/CurrentUserModifyRequest) // dev.kord.rest.json.request/CurrentUserModifyRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.CurrentUserModifyRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/CurrentUserModifyRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/CurrentUserModifyRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/CurrentUserModifyRequest> // dev.kord.rest.json.request/CurrentUserModifyRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/CurrentUserNicknameModifyRequest { // dev.kord.rest.json.request/CurrentUserNicknameModifyRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String?> = ...) // dev.kord.rest.json.request/CurrentUserNicknameModifyRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]

    final val nick // dev.kord.rest.json.request/CurrentUserNicknameModifyRequest.nick|{}nick[0]
        final fun <get-nick>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/CurrentUserNicknameModifyRequest.nick.<get-nick>|<get-nick>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/CurrentUserNicknameModifyRequest.component1|component1(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String?> = ...): dev.kord.rest.json.request/CurrentUserNicknameModifyRequest // dev.kord.rest.json.request/CurrentUserNicknameModifyRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/CurrentUserNicknameModifyRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/CurrentUserNicknameModifyRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/CurrentUserNicknameModifyRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/CurrentUserNicknameModifyRequest> { // dev.kord.rest.json.request/CurrentUserNicknameModifyRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/CurrentUserNicknameModifyRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/CurrentUserNicknameModifyRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/CurrentUserNicknameModifyRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/CurrentUserNicknameModifyRequest // dev.kord.rest.json.request/CurrentUserNicknameModifyRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/CurrentUserNicknameModifyRequest) // dev.kord.rest.json.request/CurrentUserNicknameModifyRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.CurrentUserNicknameModifyRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/CurrentUserNicknameModifyRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/CurrentUserNicknameModifyRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/CurrentUserNicknameModifyRequest> // dev.kord.rest.json.request/CurrentUserNicknameModifyRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/CurrentVoiceStateModifyRequest { // dev.kord.rest.json.request/CurrentVoiceStateModifyRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ...) // dev.kord.rest.json.request/CurrentVoiceStateModifyRequest.<init>|<init>(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>){}[0]

    final val channelId // dev.kord.rest.json.request/CurrentVoiceStateModifyRequest.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.rest.json.request/CurrentVoiceStateModifyRequest.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val requestToSpeakTimestamp // dev.kord.rest.json.request/CurrentVoiceStateModifyRequest.requestToSpeakTimestamp|{}requestToSpeakTimestamp[0]
        final fun <get-requestToSpeakTimestamp>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.rest.json.request/CurrentVoiceStateModifyRequest.requestToSpeakTimestamp.<get-requestToSpeakTimestamp>|<get-requestToSpeakTimestamp>(){}[0]
    final val suppress // dev.kord.rest.json.request/CurrentVoiceStateModifyRequest.suppress|{}suppress[0]
        final fun <get-suppress>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/CurrentVoiceStateModifyRequest.suppress.<get-suppress>|<get-suppress>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.rest.json.request/CurrentVoiceStateModifyRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/CurrentVoiceStateModifyRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.rest.json.request/CurrentVoiceStateModifyRequest.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ...): dev.kord.rest.json.request/CurrentVoiceStateModifyRequest // dev.kord.rest.json.request/CurrentVoiceStateModifyRequest.copy|copy(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/CurrentVoiceStateModifyRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/CurrentVoiceStateModifyRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/CurrentVoiceStateModifyRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/CurrentVoiceStateModifyRequest> { // dev.kord.rest.json.request/CurrentVoiceStateModifyRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/CurrentVoiceStateModifyRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/CurrentVoiceStateModifyRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/CurrentVoiceStateModifyRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/CurrentVoiceStateModifyRequest // dev.kord.rest.json.request/CurrentVoiceStateModifyRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/CurrentVoiceStateModifyRequest) // dev.kord.rest.json.request/CurrentVoiceStateModifyRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.CurrentVoiceStateModifyRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/CurrentVoiceStateModifyRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/CurrentVoiceStateModifyRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/CurrentVoiceStateModifyRequest> // dev.kord.rest.json.request/CurrentVoiceStateModifyRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/DMCreateRequest { // dev.kord.rest.json.request/DMCreateRequest|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake) // dev.kord.rest.json.request/DMCreateRequest.<init>|<init>(dev.kord.common.entity.Snowflake){}[0]

    final val userId // dev.kord.rest.json.request/DMCreateRequest.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake // dev.kord.rest.json.request/DMCreateRequest.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.rest.json.request/DMCreateRequest.component1|component1(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ...): dev.kord.rest.json.request/DMCreateRequest // dev.kord.rest.json.request/DMCreateRequest.copy|copy(dev.kord.common.entity.Snowflake){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/DMCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/DMCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/DMCreateRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/DMCreateRequest> { // dev.kord.rest.json.request/DMCreateRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/DMCreateRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/DMCreateRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/DMCreateRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/DMCreateRequest // dev.kord.rest.json.request/DMCreateRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/DMCreateRequest) // dev.kord.rest.json.request/DMCreateRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.DMCreateRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/DMCreateRequest.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/DMCreateRequest> // dev.kord.rest.json.request/DMCreateRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/EmbedAuthorRequest { // dev.kord.rest.json.request/EmbedAuthorRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...) // dev.kord.rest.json.request/EmbedAuthorRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]

    final val iconUrl // dev.kord.rest.json.request/EmbedAuthorRequest.iconUrl|{}iconUrl[0]
        final fun <get-iconUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/EmbedAuthorRequest.iconUrl.<get-iconUrl>|<get-iconUrl>(){}[0]
    final val name // dev.kord.rest.json.request/EmbedAuthorRequest.name|{}name[0]
        final fun <get-name>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/EmbedAuthorRequest.name.<get-name>|<get-name>(){}[0]
    final val url // dev.kord.rest.json.request/EmbedAuthorRequest.url|{}url[0]
        final fun <get-url>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/EmbedAuthorRequest.url.<get-url>|<get-url>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/EmbedAuthorRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/EmbedAuthorRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/EmbedAuthorRequest.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...): dev.kord.rest.json.request/EmbedAuthorRequest // dev.kord.rest.json.request/EmbedAuthorRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/EmbedAuthorRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/EmbedAuthorRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/EmbedAuthorRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/EmbedAuthorRequest> { // dev.kord.rest.json.request/EmbedAuthorRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/EmbedAuthorRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/EmbedAuthorRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/EmbedAuthorRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/EmbedAuthorRequest // dev.kord.rest.json.request/EmbedAuthorRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/EmbedAuthorRequest) // dev.kord.rest.json.request/EmbedAuthorRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.EmbedAuthorRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/EmbedAuthorRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/EmbedAuthorRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/EmbedAuthorRequest> // dev.kord.rest.json.request/EmbedAuthorRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/EmbedFieldRequest { // dev.kord.rest.json.request/EmbedFieldRequest|null[0]
    constructor <init>(kotlin/String, kotlin/String, dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.rest.json.request/EmbedFieldRequest.<init>|<init>(kotlin.String;kotlin.String;dev.kord.common.entity.optional.OptionalBoolean){}[0]

    final val inline // dev.kord.rest.json.request/EmbedFieldRequest.inline|{}inline[0]
        final fun <get-inline>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/EmbedFieldRequest.inline.<get-inline>|<get-inline>(){}[0]
    final val name // dev.kord.rest.json.request/EmbedFieldRequest.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.json.request/EmbedFieldRequest.name.<get-name>|<get-name>(){}[0]
    final val value // dev.kord.rest.json.request/EmbedFieldRequest.value|{}value[0]
        final fun <get-value>(): kotlin/String // dev.kord.rest.json.request/EmbedFieldRequest.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/String // dev.kord.rest.json.request/EmbedFieldRequest.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.rest.json.request/EmbedFieldRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/EmbedFieldRequest.component3|component3(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.rest.json.request/EmbedFieldRequest // dev.kord.rest.json.request/EmbedFieldRequest.copy|copy(kotlin.String;kotlin.String;dev.kord.common.entity.optional.OptionalBoolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/EmbedFieldRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/EmbedFieldRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/EmbedFieldRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/EmbedFieldRequest> { // dev.kord.rest.json.request/EmbedFieldRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/EmbedFieldRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/EmbedFieldRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/EmbedFieldRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/EmbedFieldRequest // dev.kord.rest.json.request/EmbedFieldRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/EmbedFieldRequest) // dev.kord.rest.json.request/EmbedFieldRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.EmbedFieldRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/EmbedFieldRequest.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/EmbedFieldRequest> // dev.kord.rest.json.request/EmbedFieldRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/EmbedFooterRequest { // dev.kord.rest.json.request/EmbedFooterRequest|null[0]
    constructor <init>(kotlin/String, kotlin/String? = ...) // dev.kord.rest.json.request/EmbedFooterRequest.<init>|<init>(kotlin.String;kotlin.String?){}[0]

    final val iconUrl // dev.kord.rest.json.request/EmbedFooterRequest.iconUrl|{}iconUrl[0]
        final fun <get-iconUrl>(): kotlin/String? // dev.kord.rest.json.request/EmbedFooterRequest.iconUrl.<get-iconUrl>|<get-iconUrl>(){}[0]
    final val text // dev.kord.rest.json.request/EmbedFooterRequest.text|{}text[0]
        final fun <get-text>(): kotlin/String // dev.kord.rest.json.request/EmbedFooterRequest.text.<get-text>|<get-text>(){}[0]

    final fun component1(): kotlin/String // dev.kord.rest.json.request/EmbedFooterRequest.component1|component1(){}[0]
    final fun component2(): kotlin/String? // dev.kord.rest.json.request/EmbedFooterRequest.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String? = ...): dev.kord.rest.json.request/EmbedFooterRequest // dev.kord.rest.json.request/EmbedFooterRequest.copy|copy(kotlin.String;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/EmbedFooterRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/EmbedFooterRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/EmbedFooterRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/EmbedFooterRequest> { // dev.kord.rest.json.request/EmbedFooterRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/EmbedFooterRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/EmbedFooterRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/EmbedFooterRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/EmbedFooterRequest // dev.kord.rest.json.request/EmbedFooterRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/EmbedFooterRequest) // dev.kord.rest.json.request/EmbedFooterRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.EmbedFooterRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/EmbedFooterRequest.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/EmbedFooterRequest> // dev.kord.rest.json.request/EmbedFooterRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/EmbedImageRequest { // dev.kord.rest.json.request/EmbedImageRequest|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.json.request/EmbedImageRequest.<init>|<init>(kotlin.String){}[0]

    final val url // dev.kord.rest.json.request/EmbedImageRequest.url|{}url[0]
        final fun <get-url>(): kotlin/String // dev.kord.rest.json.request/EmbedImageRequest.url.<get-url>|<get-url>(){}[0]

    final fun component1(): kotlin/String // dev.kord.rest.json.request/EmbedImageRequest.component1|component1(){}[0]
    final fun copy(kotlin/String = ...): dev.kord.rest.json.request/EmbedImageRequest // dev.kord.rest.json.request/EmbedImageRequest.copy|copy(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/EmbedImageRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/EmbedImageRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/EmbedImageRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/EmbedImageRequest> { // dev.kord.rest.json.request/EmbedImageRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/EmbedImageRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/EmbedImageRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/EmbedImageRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/EmbedImageRequest // dev.kord.rest.json.request/EmbedImageRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/EmbedImageRequest) // dev.kord.rest.json.request/EmbedImageRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.EmbedImageRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/EmbedImageRequest.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/EmbedImageRequest> // dev.kord.rest.json.request/EmbedImageRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/EmbedRequest { // dev.kord.rest.json.request/EmbedRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common/Color> = ..., dev.kord.common.entity.optional/Optional<dev.kord.rest.json.request/EmbedFooterRequest> = ..., dev.kord.common.entity.optional/Optional<dev.kord.rest.json.request/EmbedImageRequest> = ..., dev.kord.common.entity.optional/Optional<dev.kord.rest.json.request/EmbedThumbnailRequest> = ..., dev.kord.common.entity.optional/Optional<dev.kord.rest.json.request/EmbedAuthorRequest> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedFieldRequest>> = ...) // dev.kord.rest.json.request/EmbedRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>;dev.kord.common.entity.optional.Optional<dev.kord.common.Color>;dev.kord.common.entity.optional.Optional<dev.kord.rest.json.request.EmbedFooterRequest>;dev.kord.common.entity.optional.Optional<dev.kord.rest.json.request.EmbedImageRequest>;dev.kord.common.entity.optional.Optional<dev.kord.rest.json.request.EmbedThumbnailRequest>;dev.kord.common.entity.optional.Optional<dev.kord.rest.json.request.EmbedAuthorRequest>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.EmbedFieldRequest>>){}[0]

    final val author // dev.kord.rest.json.request/EmbedRequest.author|{}author[0]
        final fun <get-author>(): dev.kord.common.entity.optional/Optional<dev.kord.rest.json.request/EmbedAuthorRequest> // dev.kord.rest.json.request/EmbedRequest.author.<get-author>|<get-author>(){}[0]
    final val color // dev.kord.rest.json.request/EmbedRequest.color|{}color[0]
        final fun <get-color>(): dev.kord.common.entity.optional/Optional<dev.kord.common/Color> // dev.kord.rest.json.request/EmbedRequest.color.<get-color>|<get-color>(){}[0]
    final val description // dev.kord.rest.json.request/EmbedRequest.description|{}description[0]
        final fun <get-description>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/EmbedRequest.description.<get-description>|<get-description>(){}[0]
    final val fields // dev.kord.rest.json.request/EmbedRequest.fields|{}fields[0]
        final fun <get-fields>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedFieldRequest>> // dev.kord.rest.json.request/EmbedRequest.fields.<get-fields>|<get-fields>(){}[0]
    final val footer // dev.kord.rest.json.request/EmbedRequest.footer|{}footer[0]
        final fun <get-footer>(): dev.kord.common.entity.optional/Optional<dev.kord.rest.json.request/EmbedFooterRequest> // dev.kord.rest.json.request/EmbedRequest.footer.<get-footer>|<get-footer>(){}[0]
    final val image // dev.kord.rest.json.request/EmbedRequest.image|{}image[0]
        final fun <get-image>(): dev.kord.common.entity.optional/Optional<dev.kord.rest.json.request/EmbedImageRequest> // dev.kord.rest.json.request/EmbedRequest.image.<get-image>|<get-image>(){}[0]
    final val thumbnail // dev.kord.rest.json.request/EmbedRequest.thumbnail|{}thumbnail[0]
        final fun <get-thumbnail>(): dev.kord.common.entity.optional/Optional<dev.kord.rest.json.request/EmbedThumbnailRequest> // dev.kord.rest.json.request/EmbedRequest.thumbnail.<get-thumbnail>|<get-thumbnail>(){}[0]
    final val timestamp // dev.kord.rest.json.request/EmbedRequest.timestamp|{}timestamp[0]
        final fun <get-timestamp>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.rest.json.request/EmbedRequest.timestamp.<get-timestamp>|<get-timestamp>(){}[0]
    final val title // dev.kord.rest.json.request/EmbedRequest.title|{}title[0]
        final fun <get-title>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/EmbedRequest.title.<get-title>|<get-title>(){}[0]
    final val type // dev.kord.rest.json.request/EmbedRequest.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/EmbedRequest.type.<get-type>|<get-type>(){}[0]
    final val url // dev.kord.rest.json.request/EmbedRequest.url|{}url[0]
        final fun <get-url>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/EmbedRequest.url.<get-url>|<get-url>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/EmbedRequest.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<dev.kord.rest.json.request/EmbedAuthorRequest> // dev.kord.rest.json.request/EmbedRequest.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedFieldRequest>> // dev.kord.rest.json.request/EmbedRequest.component11|component11(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/EmbedRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/EmbedRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/EmbedRequest.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.rest.json.request/EmbedRequest.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<dev.kord.common/Color> // dev.kord.rest.json.request/EmbedRequest.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<dev.kord.rest.json.request/EmbedFooterRequest> // dev.kord.rest.json.request/EmbedRequest.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<dev.kord.rest.json.request/EmbedImageRequest> // dev.kord.rest.json.request/EmbedRequest.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<dev.kord.rest.json.request/EmbedThumbnailRequest> // dev.kord.rest.json.request/EmbedRequest.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common/Color> = ..., dev.kord.common.entity.optional/Optional<dev.kord.rest.json.request/EmbedFooterRequest> = ..., dev.kord.common.entity.optional/Optional<dev.kord.rest.json.request/EmbedImageRequest> = ..., dev.kord.common.entity.optional/Optional<dev.kord.rest.json.request/EmbedThumbnailRequest> = ..., dev.kord.common.entity.optional/Optional<dev.kord.rest.json.request/EmbedAuthorRequest> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedFieldRequest>> = ...): dev.kord.rest.json.request/EmbedRequest // dev.kord.rest.json.request/EmbedRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>;dev.kord.common.entity.optional.Optional<dev.kord.common.Color>;dev.kord.common.entity.optional.Optional<dev.kord.rest.json.request.EmbedFooterRequest>;dev.kord.common.entity.optional.Optional<dev.kord.rest.json.request.EmbedImageRequest>;dev.kord.common.entity.optional.Optional<dev.kord.rest.json.request.EmbedThumbnailRequest>;dev.kord.common.entity.optional.Optional<dev.kord.rest.json.request.EmbedAuthorRequest>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.EmbedFieldRequest>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/EmbedRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/EmbedRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/EmbedRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/EmbedRequest> { // dev.kord.rest.json.request/EmbedRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/EmbedRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/EmbedRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/EmbedRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/EmbedRequest // dev.kord.rest.json.request/EmbedRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/EmbedRequest) // dev.kord.rest.json.request/EmbedRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.EmbedRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/EmbedRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/EmbedRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/EmbedRequest> // dev.kord.rest.json.request/EmbedRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/EmbedThumbnailRequest { // dev.kord.rest.json.request/EmbedThumbnailRequest|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.json.request/EmbedThumbnailRequest.<init>|<init>(kotlin.String){}[0]

    final val url // dev.kord.rest.json.request/EmbedThumbnailRequest.url|{}url[0]
        final fun <get-url>(): kotlin/String // dev.kord.rest.json.request/EmbedThumbnailRequest.url.<get-url>|<get-url>(){}[0]

    final fun component1(): kotlin/String // dev.kord.rest.json.request/EmbedThumbnailRequest.component1|component1(){}[0]
    final fun copy(kotlin/String = ...): dev.kord.rest.json.request/EmbedThumbnailRequest // dev.kord.rest.json.request/EmbedThumbnailRequest.copy|copy(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/EmbedThumbnailRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/EmbedThumbnailRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/EmbedThumbnailRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/EmbedThumbnailRequest> { // dev.kord.rest.json.request/EmbedThumbnailRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/EmbedThumbnailRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/EmbedThumbnailRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/EmbedThumbnailRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/EmbedThumbnailRequest // dev.kord.rest.json.request/EmbedThumbnailRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/EmbedThumbnailRequest) // dev.kord.rest.json.request/EmbedThumbnailRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.EmbedThumbnailRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/EmbedThumbnailRequest.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/EmbedThumbnailRequest> // dev.kord.rest.json.request/EmbedThumbnailRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/EmojiCreateRequest { // dev.kord.rest.json.request/EmojiCreateRequest|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin.collections/Set<dev.kord.common.entity/Snowflake>) // dev.kord.rest.json.request/EmojiCreateRequest.<init>|<init>(kotlin.String;kotlin.String;kotlin.collections.Set<dev.kord.common.entity.Snowflake>){}[0]

    final val image // dev.kord.rest.json.request/EmojiCreateRequest.image|{}image[0]
        final fun <get-image>(): kotlin/String // dev.kord.rest.json.request/EmojiCreateRequest.image.<get-image>|<get-image>(){}[0]
    final val name // dev.kord.rest.json.request/EmojiCreateRequest.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.json.request/EmojiCreateRequest.name.<get-name>|<get-name>(){}[0]
    final val roles // dev.kord.rest.json.request/EmojiCreateRequest.roles|{}roles[0]
        final fun <get-roles>(): kotlin.collections/Set<dev.kord.common.entity/Snowflake> // dev.kord.rest.json.request/EmojiCreateRequest.roles.<get-roles>|<get-roles>(){}[0]

    final fun component1(): kotlin/String // dev.kord.rest.json.request/EmojiCreateRequest.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.rest.json.request/EmojiCreateRequest.component2|component2(){}[0]
    final fun component3(): kotlin.collections/Set<dev.kord.common.entity/Snowflake> // dev.kord.rest.json.request/EmojiCreateRequest.component3|component3(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin.collections/Set<dev.kord.common.entity/Snowflake> = ...): dev.kord.rest.json.request/EmojiCreateRequest // dev.kord.rest.json.request/EmojiCreateRequest.copy|copy(kotlin.String;kotlin.String;kotlin.collections.Set<dev.kord.common.entity.Snowflake>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/EmojiCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/EmojiCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/EmojiCreateRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/EmojiCreateRequest> { // dev.kord.rest.json.request/EmojiCreateRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/EmojiCreateRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/EmojiCreateRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/EmojiCreateRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/EmojiCreateRequest // dev.kord.rest.json.request/EmojiCreateRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/EmojiCreateRequest) // dev.kord.rest.json.request/EmojiCreateRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.EmojiCreateRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/EmojiCreateRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/EmojiCreateRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/EmojiCreateRequest> // dev.kord.rest.json.request/EmojiCreateRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/EmojiModifyRequest { // dev.kord.rest.json.request/EmojiModifyRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Snowflake>?> = ...) // dev.kord.rest.json.request/EmojiModifyRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.Set<dev.kord.common.entity.Snowflake>?>){}[0]

    final val name // dev.kord.rest.json.request/EmojiModifyRequest.name|{}name[0]
        final fun <get-name>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/EmojiModifyRequest.name.<get-name>|<get-name>(){}[0]
    final val roles // dev.kord.rest.json.request/EmojiModifyRequest.roles|{}roles[0]
        final fun <get-roles>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Snowflake>?> // dev.kord.rest.json.request/EmojiModifyRequest.roles.<get-roles>|<get-roles>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/EmojiModifyRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Snowflake>?> // dev.kord.rest.json.request/EmojiModifyRequest.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Snowflake>?> = ...): dev.kord.rest.json.request/EmojiModifyRequest // dev.kord.rest.json.request/EmojiModifyRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.Set<dev.kord.common.entity.Snowflake>?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/EmojiModifyRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/EmojiModifyRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/EmojiModifyRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/EmojiModifyRequest> { // dev.kord.rest.json.request/EmojiModifyRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/EmojiModifyRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/EmojiModifyRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/EmojiModifyRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/EmojiModifyRequest // dev.kord.rest.json.request/EmojiModifyRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/EmojiModifyRequest) // dev.kord.rest.json.request/EmojiModifyRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.EmojiModifyRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/EmojiModifyRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/EmojiModifyRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/EmojiModifyRequest> // dev.kord.rest.json.request/EmojiModifyRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/FollowupMessageCreateRequest { // dev.kord.rest.json.request/FollowupMessageCreateRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> = ...) // dev.kord.rest.json.request/FollowupMessageCreateRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.EmbedRequest>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.AllowedMentions>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordComponent>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.AttachmentRequest>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageFlags>){}[0]

    final val allowedMentions // dev.kord.rest.json.request/FollowupMessageCreateRequest.allowedMentions|{}allowedMentions[0]
        final fun <get-allowedMentions>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions> // dev.kord.rest.json.request/FollowupMessageCreateRequest.allowedMentions.<get-allowedMentions>|<get-allowedMentions>(){}[0]
    final val attachments // dev.kord.rest.json.request/FollowupMessageCreateRequest.attachments|{}attachments[0]
        final fun <get-attachments>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>> // dev.kord.rest.json.request/FollowupMessageCreateRequest.attachments.<get-attachments>|<get-attachments>(){}[0]
    final val components // dev.kord.rest.json.request/FollowupMessageCreateRequest.components|{}components[0]
        final fun <get-components>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> // dev.kord.rest.json.request/FollowupMessageCreateRequest.components.<get-components>|<get-components>(){}[0]
    final val content // dev.kord.rest.json.request/FollowupMessageCreateRequest.content|{}content[0]
        final fun <get-content>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/FollowupMessageCreateRequest.content.<get-content>|<get-content>(){}[0]
    final val embeds // dev.kord.rest.json.request/FollowupMessageCreateRequest.embeds|{}embeds[0]
        final fun <get-embeds>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>> // dev.kord.rest.json.request/FollowupMessageCreateRequest.embeds.<get-embeds>|<get-embeds>(){}[0]
    final val flags // dev.kord.rest.json.request/FollowupMessageCreateRequest.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> // dev.kord.rest.json.request/FollowupMessageCreateRequest.flags.<get-flags>|<get-flags>(){}[0]
    final val tts // dev.kord.rest.json.request/FollowupMessageCreateRequest.tts|{}tts[0]
        final fun <get-tts>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/FollowupMessageCreateRequest.tts.<get-tts>|<get-tts>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/FollowupMessageCreateRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/FollowupMessageCreateRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>> // dev.kord.rest.json.request/FollowupMessageCreateRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions> // dev.kord.rest.json.request/FollowupMessageCreateRequest.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> // dev.kord.rest.json.request/FollowupMessageCreateRequest.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>> // dev.kord.rest.json.request/FollowupMessageCreateRequest.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> // dev.kord.rest.json.request/FollowupMessageCreateRequest.component7|component7(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> = ...): dev.kord.rest.json.request/FollowupMessageCreateRequest // dev.kord.rest.json.request/FollowupMessageCreateRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.EmbedRequest>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.AllowedMentions>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordComponent>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.AttachmentRequest>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageFlags>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/FollowupMessageCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/FollowupMessageCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/FollowupMessageCreateRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/FollowupMessageCreateRequest> { // dev.kord.rest.json.request/FollowupMessageCreateRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/FollowupMessageCreateRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/FollowupMessageCreateRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/FollowupMessageCreateRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/FollowupMessageCreateRequest // dev.kord.rest.json.request/FollowupMessageCreateRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/FollowupMessageCreateRequest) // dev.kord.rest.json.request/FollowupMessageCreateRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.FollowupMessageCreateRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/FollowupMessageCreateRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/FollowupMessageCreateRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/FollowupMessageCreateRequest> // dev.kord.rest.json.request/FollowupMessageCreateRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/FollowupMessageModifyRequest { // dev.kord.rest.json.request/FollowupMessageModifyRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags?> = ...) // dev.kord.rest.json.request/FollowupMessageModifyRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.EmbedRequest>?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.AllowedMentions?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordComponent>?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.AttachmentRequest>?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageFlags?>){}[0]

    final val allowedMentions // dev.kord.rest.json.request/FollowupMessageModifyRequest.allowedMentions|{}allowedMentions[0]
        final fun <get-allowedMentions>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions?> // dev.kord.rest.json.request/FollowupMessageModifyRequest.allowedMentions.<get-allowedMentions>|<get-allowedMentions>(){}[0]
    final val attachments // dev.kord.rest.json.request/FollowupMessageModifyRequest.attachments|{}attachments[0]
        final fun <get-attachments>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>?> // dev.kord.rest.json.request/FollowupMessageModifyRequest.attachments.<get-attachments>|<get-attachments>(){}[0]
    final val components // dev.kord.rest.json.request/FollowupMessageModifyRequest.components|{}components[0]
        final fun <get-components>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>?> // dev.kord.rest.json.request/FollowupMessageModifyRequest.components.<get-components>|<get-components>(){}[0]
    final val content // dev.kord.rest.json.request/FollowupMessageModifyRequest.content|{}content[0]
        final fun <get-content>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/FollowupMessageModifyRequest.content.<get-content>|<get-content>(){}[0]
    final val embeds // dev.kord.rest.json.request/FollowupMessageModifyRequest.embeds|{}embeds[0]
        final fun <get-embeds>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>?> // dev.kord.rest.json.request/FollowupMessageModifyRequest.embeds.<get-embeds>|<get-embeds>(){}[0]
    final val flags // dev.kord.rest.json.request/FollowupMessageModifyRequest.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags?> // dev.kord.rest.json.request/FollowupMessageModifyRequest.flags.<get-flags>|<get-flags>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/FollowupMessageModifyRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>?> // dev.kord.rest.json.request/FollowupMessageModifyRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions?> // dev.kord.rest.json.request/FollowupMessageModifyRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>?> // dev.kord.rest.json.request/FollowupMessageModifyRequest.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>?> // dev.kord.rest.json.request/FollowupMessageModifyRequest.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags?> // dev.kord.rest.json.request/FollowupMessageModifyRequest.component6|component6(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags?> = ...): dev.kord.rest.json.request/FollowupMessageModifyRequest // dev.kord.rest.json.request/FollowupMessageModifyRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.EmbedRequest>?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.AllowedMentions?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordComponent>?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.AttachmentRequest>?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageFlags?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/FollowupMessageModifyRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/FollowupMessageModifyRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/FollowupMessageModifyRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/FollowupMessageModifyRequest> { // dev.kord.rest.json.request/FollowupMessageModifyRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/FollowupMessageModifyRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/FollowupMessageModifyRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/FollowupMessageModifyRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/FollowupMessageModifyRequest // dev.kord.rest.json.request/FollowupMessageModifyRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/FollowupMessageModifyRequest) // dev.kord.rest.json.request/FollowupMessageModifyRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.FollowupMessageModifyRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/FollowupMessageModifyRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/FollowupMessageModifyRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/FollowupMessageModifyRequest> // dev.kord.rest.json.request/FollowupMessageModifyRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/ForumTagRequest { // dev.kord.rest.json.request/ForumTagRequest|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Snowflake?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...) // dev.kord.rest.json.request/ForumTagRequest.<init>|<init>(kotlin.String;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Snowflake?>;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]

    final val emojiId // dev.kord.rest.json.request/ForumTagRequest.emojiId|{}emojiId[0]
        final fun <get-emojiId>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Snowflake?> // dev.kord.rest.json.request/ForumTagRequest.emojiId.<get-emojiId>|<get-emojiId>(){}[0]
    final val emojiName // dev.kord.rest.json.request/ForumTagRequest.emojiName|{}emojiName[0]
        final fun <get-emojiName>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/ForumTagRequest.emojiName.<get-emojiName>|<get-emojiName>(){}[0]
    final val moderated // dev.kord.rest.json.request/ForumTagRequest.moderated|{}moderated[0]
        final fun <get-moderated>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/ForumTagRequest.moderated.<get-moderated>|<get-moderated>(){}[0]
    final val name // dev.kord.rest.json.request/ForumTagRequest.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.json.request/ForumTagRequest.name.<get-name>|<get-name>(){}[0]

    final fun component1(): kotlin/String // dev.kord.rest.json.request/ForumTagRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/ForumTagRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Snowflake?> // dev.kord.rest.json.request/ForumTagRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/ForumTagRequest.component4|component4(){}[0]
    final fun copy(kotlin/String = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Snowflake?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...): dev.kord.rest.json.request/ForumTagRequest // dev.kord.rest.json.request/ForumTagRequest.copy|copy(kotlin.String;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Snowflake?>;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/ForumTagRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/ForumTagRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/ForumTagRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/ForumTagRequest> { // dev.kord.rest.json.request/ForumTagRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/ForumTagRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/ForumTagRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/ForumTagRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/ForumTagRequest // dev.kord.rest.json.request/ForumTagRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/ForumTagRequest) // dev.kord.rest.json.request/ForumTagRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.ForumTagRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/ForumTagRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/ForumTagRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/ForumTagRequest> // dev.kord.rest.json.request/ForumTagRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/ForumThreadMessageRequest { // dev.kord.rest.json.request/ForumThreadMessageRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> = ...) // dev.kord.rest.json.request/ForumThreadMessageRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.EmbedRequest>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.AllowedMentions>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordComponent>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.AttachmentRequest>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageFlags>){}[0]

    final val allowedMentions // dev.kord.rest.json.request/ForumThreadMessageRequest.allowedMentions|{}allowedMentions[0]
        final fun <get-allowedMentions>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions> // dev.kord.rest.json.request/ForumThreadMessageRequest.allowedMentions.<get-allowedMentions>|<get-allowedMentions>(){}[0]
    final val attachments // dev.kord.rest.json.request/ForumThreadMessageRequest.attachments|{}attachments[0]
        final fun <get-attachments>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>> // dev.kord.rest.json.request/ForumThreadMessageRequest.attachments.<get-attachments>|<get-attachments>(){}[0]
    final val components // dev.kord.rest.json.request/ForumThreadMessageRequest.components|{}components[0]
        final fun <get-components>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> // dev.kord.rest.json.request/ForumThreadMessageRequest.components.<get-components>|<get-components>(){}[0]
    final val content // dev.kord.rest.json.request/ForumThreadMessageRequest.content|{}content[0]
        final fun <get-content>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/ForumThreadMessageRequest.content.<get-content>|<get-content>(){}[0]
    final val embeds // dev.kord.rest.json.request/ForumThreadMessageRequest.embeds|{}embeds[0]
        final fun <get-embeds>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>> // dev.kord.rest.json.request/ForumThreadMessageRequest.embeds.<get-embeds>|<get-embeds>(){}[0]
    final val flags // dev.kord.rest.json.request/ForumThreadMessageRequest.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> // dev.kord.rest.json.request/ForumThreadMessageRequest.flags.<get-flags>|<get-flags>(){}[0]
    final val stickerIds // dev.kord.rest.json.request/ForumThreadMessageRequest.stickerIds|{}stickerIds[0]
        final fun <get-stickerIds>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.rest.json.request/ForumThreadMessageRequest.stickerIds.<get-stickerIds>|<get-stickerIds>(){}[0]
    final val tts // dev.kord.rest.json.request/ForumThreadMessageRequest.tts|{}tts[0]
        final fun <get-tts>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/ForumThreadMessageRequest.tts.<get-tts>|<get-tts>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/ForumThreadMessageRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/ForumThreadMessageRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>> // dev.kord.rest.json.request/ForumThreadMessageRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions> // dev.kord.rest.json.request/ForumThreadMessageRequest.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> // dev.kord.rest.json.request/ForumThreadMessageRequest.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.rest.json.request/ForumThreadMessageRequest.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>> // dev.kord.rest.json.request/ForumThreadMessageRequest.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> // dev.kord.rest.json.request/ForumThreadMessageRequest.component8|component8(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> = ...): dev.kord.rest.json.request/ForumThreadMessageRequest // dev.kord.rest.json.request/ForumThreadMessageRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.EmbedRequest>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.AllowedMentions>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordComponent>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.AttachmentRequest>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageFlags>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/ForumThreadMessageRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/ForumThreadMessageRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/ForumThreadMessageRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/ForumThreadMessageRequest> { // dev.kord.rest.json.request/ForumThreadMessageRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/ForumThreadMessageRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/ForumThreadMessageRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/ForumThreadMessageRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/ForumThreadMessageRequest // dev.kord.rest.json.request/ForumThreadMessageRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/ForumThreadMessageRequest) // dev.kord.rest.json.request/ForumThreadMessageRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.ForumThreadMessageRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/ForumThreadMessageRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/ForumThreadMessageRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/ForumThreadMessageRequest> // dev.kord.rest.json.request/ForumThreadMessageRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/GroupDMCreateRequest { // dev.kord.rest.json.request/GroupDMCreateRequest|null[0]
    constructor <init>(kotlin.collections/List<kotlin/String>, kotlin.collections/Map<kotlin/String, kotlin/String>) // dev.kord.rest.json.request/GroupDMCreateRequest.<init>|<init>(kotlin.collections.List<kotlin.String>;kotlin.collections.Map<kotlin.String,kotlin.String>){}[0]

    final val nick // dev.kord.rest.json.request/GroupDMCreateRequest.nick|{}nick[0]
        final fun <get-nick>(): kotlin.collections/Map<kotlin/String, kotlin/String> // dev.kord.rest.json.request/GroupDMCreateRequest.nick.<get-nick>|<get-nick>(){}[0]
    final val tokens // dev.kord.rest.json.request/GroupDMCreateRequest.tokens|{}tokens[0]
        final fun <get-tokens>(): kotlin.collections/List<kotlin/String> // dev.kord.rest.json.request/GroupDMCreateRequest.tokens.<get-tokens>|<get-tokens>(){}[0]

    final fun component1(): kotlin.collections/List<kotlin/String> // dev.kord.rest.json.request/GroupDMCreateRequest.component1|component1(){}[0]
    final fun component2(): kotlin.collections/Map<kotlin/String, kotlin/String> // dev.kord.rest.json.request/GroupDMCreateRequest.component2|component2(){}[0]
    final fun copy(kotlin.collections/List<kotlin/String> = ..., kotlin.collections/Map<kotlin/String, kotlin/String> = ...): dev.kord.rest.json.request/GroupDMCreateRequest // dev.kord.rest.json.request/GroupDMCreateRequest.copy|copy(kotlin.collections.List<kotlin.String>;kotlin.collections.Map<kotlin.String,kotlin.String>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/GroupDMCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/GroupDMCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/GroupDMCreateRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/GroupDMCreateRequest> { // dev.kord.rest.json.request/GroupDMCreateRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/GroupDMCreateRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/GroupDMCreateRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/GroupDMCreateRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/GroupDMCreateRequest // dev.kord.rest.json.request/GroupDMCreateRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/GroupDMCreateRequest) // dev.kord.rest.json.request/GroupDMCreateRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.GroupDMCreateRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/GroupDMCreateRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/GroupDMCreateRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/GroupDMCreateRequest> // dev.kord.rest.json.request/GroupDMCreateRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/GuildBanCreateRequest { // dev.kord.rest.json.request/GuildBanCreateRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ...) // dev.kord.rest.json.request/GuildBanCreateRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.time.Duration>){}[0]

    final val deleteMessageSeconds // dev.kord.rest.json.request/GuildBanCreateRequest.deleteMessageSeconds|{}deleteMessageSeconds[0]
        final fun <get-deleteMessageSeconds>(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.rest.json.request/GuildBanCreateRequest.deleteMessageSeconds.<get-deleteMessageSeconds>|<get-deleteMessageSeconds>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.rest.json.request/GuildBanCreateRequest.component1|component1(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ...): dev.kord.rest.json.request/GuildBanCreateRequest // dev.kord.rest.json.request/GuildBanCreateRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.time.Duration>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/GuildBanCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/GuildBanCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/GuildBanCreateRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/GuildBanCreateRequest> { // dev.kord.rest.json.request/GuildBanCreateRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/GuildBanCreateRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/GuildBanCreateRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/GuildBanCreateRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/GuildBanCreateRequest // dev.kord.rest.json.request/GuildBanCreateRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/GuildBanCreateRequest) // dev.kord.rest.json.request/GuildBanCreateRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.GuildBanCreateRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/GuildBanCreateRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/GuildBanCreateRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/GuildBanCreateRequest> // dev.kord.rest.json.request/GuildBanCreateRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/GuildChannelCreateRequest { // dev.kord.rest.json.request/GuildChannelCreateRequest|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity/ChannelType, dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Overwrite>> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ArchiveDuration> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DefaultReaction?> = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ChannelFlags> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/ForumTagRequest>?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/SortOrderType?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ForumLayoutType> = ...) // dev.kord.rest.json.request/GuildChannelCreateRequest.<init>|<init>(kotlin.String;dev.kord.common.entity.ChannelType;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlin.collections.Set<dev.kord.common.entity.Overwrite>>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ArchiveDuration>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DefaultReaction?>;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ChannelFlags>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.ForumTagRequest>?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.SortOrderType?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ForumLayoutType>){}[0]

    final val availableTags // dev.kord.rest.json.request/GuildChannelCreateRequest.availableTags|{}availableTags[0]
        final fun <get-availableTags>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/ForumTagRequest>?> // dev.kord.rest.json.request/GuildChannelCreateRequest.availableTags.<get-availableTags>|<get-availableTags>(){}[0]
    final val bitrate // dev.kord.rest.json.request/GuildChannelCreateRequest.bitrate|{}bitrate[0]
        final fun <get-bitrate>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.rest.json.request/GuildChannelCreateRequest.bitrate.<get-bitrate>|<get-bitrate>(){}[0]
    final val defaultAutoArchiveDuration // dev.kord.rest.json.request/GuildChannelCreateRequest.defaultAutoArchiveDuration|{}defaultAutoArchiveDuration[0]
        final fun <get-defaultAutoArchiveDuration>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ArchiveDuration> // dev.kord.rest.json.request/GuildChannelCreateRequest.defaultAutoArchiveDuration.<get-defaultAutoArchiveDuration>|<get-defaultAutoArchiveDuration>(){}[0]
    final val defaultForumLayout // dev.kord.rest.json.request/GuildChannelCreateRequest.defaultForumLayout|{}defaultForumLayout[0]
        final fun <get-defaultForumLayout>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ForumLayoutType> // dev.kord.rest.json.request/GuildChannelCreateRequest.defaultForumLayout.<get-defaultForumLayout>|<get-defaultForumLayout>(){}[0]
    final val defaultReactionEmoji // dev.kord.rest.json.request/GuildChannelCreateRequest.defaultReactionEmoji|{}defaultReactionEmoji[0]
        final fun <get-defaultReactionEmoji>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DefaultReaction?> // dev.kord.rest.json.request/GuildChannelCreateRequest.defaultReactionEmoji.<get-defaultReactionEmoji>|<get-defaultReactionEmoji>(){}[0]
    final val defaultSortOrder // dev.kord.rest.json.request/GuildChannelCreateRequest.defaultSortOrder|{}defaultSortOrder[0]
        final fun <get-defaultSortOrder>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/SortOrderType?> // dev.kord.rest.json.request/GuildChannelCreateRequest.defaultSortOrder.<get-defaultSortOrder>|<get-defaultSortOrder>(){}[0]
    final val defaultThreadRateLimitPerUser // dev.kord.rest.json.request/GuildChannelCreateRequest.defaultThreadRateLimitPerUser|{}defaultThreadRateLimitPerUser[0]
        final fun <get-defaultThreadRateLimitPerUser>(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.rest.json.request/GuildChannelCreateRequest.defaultThreadRateLimitPerUser.<get-defaultThreadRateLimitPerUser>|<get-defaultThreadRateLimitPerUser>(){}[0]
    final val flags // dev.kord.rest.json.request/GuildChannelCreateRequest.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ChannelFlags> // dev.kord.rest.json.request/GuildChannelCreateRequest.flags.<get-flags>|<get-flags>(){}[0]
    final val id // dev.kord.rest.json.request/GuildChannelCreateRequest.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.rest.json.request/GuildChannelCreateRequest.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.rest.json.request/GuildChannelCreateRequest.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.json.request/GuildChannelCreateRequest.name.<get-name>|<get-name>(){}[0]
    final val nsfw // dev.kord.rest.json.request/GuildChannelCreateRequest.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/GuildChannelCreateRequest.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
    final val parentId // dev.kord.rest.json.request/GuildChannelCreateRequest.parentId|{}parentId[0]
        final fun <get-parentId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.rest.json.request/GuildChannelCreateRequest.parentId.<get-parentId>|<get-parentId>(){}[0]
    final val permissionOverwrite // dev.kord.rest.json.request/GuildChannelCreateRequest.permissionOverwrite|{}permissionOverwrite[0]
        final fun <get-permissionOverwrite>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Overwrite>> // dev.kord.rest.json.request/GuildChannelCreateRequest.permissionOverwrite.<get-permissionOverwrite>|<get-permissionOverwrite>(){}[0]
    final val position // dev.kord.rest.json.request/GuildChannelCreateRequest.position|{}position[0]
        final fun <get-position>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.rest.json.request/GuildChannelCreateRequest.position.<get-position>|<get-position>(){}[0]
    final val rateLimitPerUser // dev.kord.rest.json.request/GuildChannelCreateRequest.rateLimitPerUser|{}rateLimitPerUser[0]
        final fun <get-rateLimitPerUser>(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.rest.json.request/GuildChannelCreateRequest.rateLimitPerUser.<get-rateLimitPerUser>|<get-rateLimitPerUser>(){}[0]
    final val topic // dev.kord.rest.json.request/GuildChannelCreateRequest.topic|{}topic[0]
        final fun <get-topic>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildChannelCreateRequest.topic.<get-topic>|<get-topic>(){}[0]
    final val type // dev.kord.rest.json.request/GuildChannelCreateRequest.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ChannelType // dev.kord.rest.json.request/GuildChannelCreateRequest.type.<get-type>|<get-type>(){}[0]
    final val userLimit // dev.kord.rest.json.request/GuildChannelCreateRequest.userLimit|{}userLimit[0]
        final fun <get-userLimit>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.rest.json.request/GuildChannelCreateRequest.userLimit.<get-userLimit>|<get-userLimit>(){}[0]

    final fun component1(): kotlin/String // dev.kord.rest.json.request/GuildChannelCreateRequest.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/GuildChannelCreateRequest.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.rest.json.request/GuildChannelCreateRequest.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ArchiveDuration> // dev.kord.rest.json.request/GuildChannelCreateRequest.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DefaultReaction?> // dev.kord.rest.json.request/GuildChannelCreateRequest.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.rest.json.request/GuildChannelCreateRequest.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ChannelFlags> // dev.kord.rest.json.request/GuildChannelCreateRequest.component15|component15(){}[0]
    final fun component16(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/ForumTagRequest>?> // dev.kord.rest.json.request/GuildChannelCreateRequest.component16|component16(){}[0]
    final fun component17(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/SortOrderType?> // dev.kord.rest.json.request/GuildChannelCreateRequest.component17|component17(){}[0]
    final fun component18(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ForumLayoutType> // dev.kord.rest.json.request/GuildChannelCreateRequest.component18|component18(){}[0]
    final fun component2(): dev.kord.common.entity/ChannelType // dev.kord.rest.json.request/GuildChannelCreateRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildChannelCreateRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalInt // dev.kord.rest.json.request/GuildChannelCreateRequest.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/OptionalInt // dev.kord.rest.json.request/GuildChannelCreateRequest.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.rest.json.request/GuildChannelCreateRequest.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalInt // dev.kord.rest.json.request/GuildChannelCreateRequest.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Overwrite>> // dev.kord.rest.json.request/GuildChannelCreateRequest.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.rest.json.request/GuildChannelCreateRequest.component9|component9(){}[0]
    final fun copy(kotlin/String = ..., dev.kord.common.entity/ChannelType = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Overwrite>> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ArchiveDuration> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DefaultReaction?> = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ChannelFlags> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/ForumTagRequest>?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/SortOrderType?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ForumLayoutType> = ...): dev.kord.rest.json.request/GuildChannelCreateRequest // dev.kord.rest.json.request/GuildChannelCreateRequest.copy|copy(kotlin.String;dev.kord.common.entity.ChannelType;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlin.collections.Set<dev.kord.common.entity.Overwrite>>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ArchiveDuration>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DefaultReaction?>;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ChannelFlags>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.ForumTagRequest>?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.SortOrderType?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ForumLayoutType>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/GuildChannelCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/GuildChannelCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/GuildChannelCreateRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/GuildChannelCreateRequest> { // dev.kord.rest.json.request/GuildChannelCreateRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/GuildChannelCreateRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/GuildChannelCreateRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/GuildChannelCreateRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/GuildChannelCreateRequest // dev.kord.rest.json.request/GuildChannelCreateRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/GuildChannelCreateRequest) // dev.kord.rest.json.request/GuildChannelCreateRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.GuildChannelCreateRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/GuildChannelCreateRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/GuildChannelCreateRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/GuildChannelCreateRequest> // dev.kord.rest.json.request/GuildChannelCreateRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/GuildChannelPositionModifyRequest { // dev.kord.rest.json.request/GuildChannelPositionModifyRequest|null[0]
    constructor <init>(kotlin.collections/List<dev.kord.rest.json.request/ChannelPositionSwapRequest>) // dev.kord.rest.json.request/GuildChannelPositionModifyRequest.<init>|<init>(kotlin.collections.List<dev.kord.rest.json.request.ChannelPositionSwapRequest>){}[0]

    final val swaps // dev.kord.rest.json.request/GuildChannelPositionModifyRequest.swaps|{}swaps[0]
        final fun <get-swaps>(): kotlin.collections/List<dev.kord.rest.json.request/ChannelPositionSwapRequest> // dev.kord.rest.json.request/GuildChannelPositionModifyRequest.swaps.<get-swaps>|<get-swaps>(){}[0]

    final fun component1(): kotlin.collections/List<dev.kord.rest.json.request/ChannelPositionSwapRequest> // dev.kord.rest.json.request/GuildChannelPositionModifyRequest.component1|component1(){}[0]
    final fun copy(kotlin.collections/List<dev.kord.rest.json.request/ChannelPositionSwapRequest> = ...): dev.kord.rest.json.request/GuildChannelPositionModifyRequest // dev.kord.rest.json.request/GuildChannelPositionModifyRequest.copy|copy(kotlin.collections.List<dev.kord.rest.json.request.ChannelPositionSwapRequest>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/GuildChannelPositionModifyRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/GuildChannelPositionModifyRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/GuildChannelPositionModifyRequest.toString|toString(){}[0]

    final object Companion { // dev.kord.rest.json.request/GuildChannelPositionModifyRequest.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/GuildChannelPositionModifyRequest> // dev.kord.rest.json.request/GuildChannelPositionModifyRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/GuildCreateRequest { // dev.kord.rest.json.request/GuildCreateRequest|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/VerificationLevel> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DefaultMessageNotificationLevel> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ExplicitContentFilter> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/GuildRoleCreateRequest>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/GuildChannelCreateRequest>> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ...) // dev.kord.rest.json.request/GuildCreateRequest.<init>|<init>(kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.VerificationLevel>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DefaultMessageNotificationLevel>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ExplicitContentFilter>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.GuildRoleCreateRequest>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.GuildChannelCreateRequest>>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.OptionalSnowflake){}[0]

    final val afkChannelId // dev.kord.rest.json.request/GuildCreateRequest.afkChannelId|{}afkChannelId[0]
        final fun <get-afkChannelId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.rest.json.request/GuildCreateRequest.afkChannelId.<get-afkChannelId>|<get-afkChannelId>(){}[0]
    final val afkTimeout // dev.kord.rest.json.request/GuildCreateRequest.afkTimeout|{}afkTimeout[0]
        final fun <get-afkTimeout>(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.rest.json.request/GuildCreateRequest.afkTimeout.<get-afkTimeout>|<get-afkTimeout>(){}[0]
    final val channels // dev.kord.rest.json.request/GuildCreateRequest.channels|{}channels[0]
        final fun <get-channels>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/GuildChannelCreateRequest>> // dev.kord.rest.json.request/GuildCreateRequest.channels.<get-channels>|<get-channels>(){}[0]
    final val defaultNotificationLevel // dev.kord.rest.json.request/GuildCreateRequest.defaultNotificationLevel|{}defaultNotificationLevel[0]
        final fun <get-defaultNotificationLevel>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DefaultMessageNotificationLevel> // dev.kord.rest.json.request/GuildCreateRequest.defaultNotificationLevel.<get-defaultNotificationLevel>|<get-defaultNotificationLevel>(){}[0]
    final val explicitContentFilter // dev.kord.rest.json.request/GuildCreateRequest.explicitContentFilter|{}explicitContentFilter[0]
        final fun <get-explicitContentFilter>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ExplicitContentFilter> // dev.kord.rest.json.request/GuildCreateRequest.explicitContentFilter.<get-explicitContentFilter>|<get-explicitContentFilter>(){}[0]
    final val icon // dev.kord.rest.json.request/GuildCreateRequest.icon|{}icon[0]
        final fun <get-icon>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildCreateRequest.icon.<get-icon>|<get-icon>(){}[0]
    final val name // dev.kord.rest.json.request/GuildCreateRequest.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.json.request/GuildCreateRequest.name.<get-name>|<get-name>(){}[0]
    final val region // dev.kord.rest.json.request/GuildCreateRequest.region|{}region[0]
        final fun <get-region>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildCreateRequest.region.<get-region>|<get-region>(){}[0]
    final val roles // dev.kord.rest.json.request/GuildCreateRequest.roles|{}roles[0]
        final fun <get-roles>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/GuildRoleCreateRequest>> // dev.kord.rest.json.request/GuildCreateRequest.roles.<get-roles>|<get-roles>(){}[0]
    final val systemChannelId // dev.kord.rest.json.request/GuildCreateRequest.systemChannelId|{}systemChannelId[0]
        final fun <get-systemChannelId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.rest.json.request/GuildCreateRequest.systemChannelId.<get-systemChannelId>|<get-systemChannelId>(){}[0]
    final val verificationLevel // dev.kord.rest.json.request/GuildCreateRequest.verificationLevel|{}verificationLevel[0]
        final fun <get-verificationLevel>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/VerificationLevel> // dev.kord.rest.json.request/GuildCreateRequest.verificationLevel.<get-verificationLevel>|<get-verificationLevel>(){}[0]

    final fun component1(): kotlin/String // dev.kord.rest.json.request/GuildCreateRequest.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.rest.json.request/GuildCreateRequest.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.rest.json.request/GuildCreateRequest.component11|component11(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildCreateRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildCreateRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/VerificationLevel> // dev.kord.rest.json.request/GuildCreateRequest.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DefaultMessageNotificationLevel> // dev.kord.rest.json.request/GuildCreateRequest.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ExplicitContentFilter> // dev.kord.rest.json.request/GuildCreateRequest.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/GuildRoleCreateRequest>> // dev.kord.rest.json.request/GuildCreateRequest.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/GuildChannelCreateRequest>> // dev.kord.rest.json.request/GuildCreateRequest.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.rest.json.request/GuildCreateRequest.component9|component9(){}[0]
    final fun copy(kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/VerificationLevel> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DefaultMessageNotificationLevel> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ExplicitContentFilter> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/GuildRoleCreateRequest>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/GuildChannelCreateRequest>> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ...): dev.kord.rest.json.request/GuildCreateRequest // dev.kord.rest.json.request/GuildCreateRequest.copy|copy(kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.VerificationLevel>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DefaultMessageNotificationLevel>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ExplicitContentFilter>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.GuildRoleCreateRequest>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.GuildChannelCreateRequest>>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.OptionalSnowflake){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/GuildCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/GuildCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/GuildCreateRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/GuildCreateRequest> { // dev.kord.rest.json.request/GuildCreateRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/GuildCreateRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/GuildCreateRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/GuildCreateRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/GuildCreateRequest // dev.kord.rest.json.request/GuildCreateRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/GuildCreateRequest) // dev.kord.rest.json.request/GuildCreateRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.GuildCreateRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/GuildCreateRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/GuildCreateRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/GuildCreateRequest> // dev.kord.rest.json.request/GuildCreateRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/GuildFromTemplateCreateRequest { // dev.kord.rest.json.request/GuildFromTemplateCreateRequest|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity.optional/Optional<kotlin/String> = ...) // dev.kord.rest.json.request/GuildFromTemplateCreateRequest.<init>|<init>(kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]

    final val image // dev.kord.rest.json.request/GuildFromTemplateCreateRequest.image|{}image[0]
        final fun <get-image>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildFromTemplateCreateRequest.image.<get-image>|<get-image>(){}[0]
    final val name // dev.kord.rest.json.request/GuildFromTemplateCreateRequest.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.json.request/GuildFromTemplateCreateRequest.name.<get-name>|<get-name>(){}[0]

    final fun component1(): kotlin/String // dev.kord.rest.json.request/GuildFromTemplateCreateRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildFromTemplateCreateRequest.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...): dev.kord.rest.json.request/GuildFromTemplateCreateRequest // dev.kord.rest.json.request/GuildFromTemplateCreateRequest.copy|copy(kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/GuildFromTemplateCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/GuildFromTemplateCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/GuildFromTemplateCreateRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/GuildFromTemplateCreateRequest> { // dev.kord.rest.json.request/GuildFromTemplateCreateRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/GuildFromTemplateCreateRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/GuildFromTemplateCreateRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/GuildFromTemplateCreateRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/GuildFromTemplateCreateRequest // dev.kord.rest.json.request/GuildFromTemplateCreateRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/GuildFromTemplateCreateRequest) // dev.kord.rest.json.request/GuildFromTemplateCreateRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.GuildFromTemplateCreateRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/GuildFromTemplateCreateRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/GuildFromTemplateCreateRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/GuildFromTemplateCreateRequest> // dev.kord.rest.json.request/GuildFromTemplateCreateRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/GuildIntegrationCreateRequest { // dev.kord.rest.json.request/GuildIntegrationCreateRequest|null[0]
    constructor <init>(kotlin/Int, kotlin/String) // dev.kord.rest.json.request/GuildIntegrationCreateRequest.<init>|<init>(kotlin.Int;kotlin.String){}[0]

    final val id // dev.kord.rest.json.request/GuildIntegrationCreateRequest.id|{}id[0]
        final fun <get-id>(): kotlin/String // dev.kord.rest.json.request/GuildIntegrationCreateRequest.id.<get-id>|<get-id>(){}[0]
    final val type // dev.kord.rest.json.request/GuildIntegrationCreateRequest.type|{}type[0]
        final fun <get-type>(): kotlin/Int // dev.kord.rest.json.request/GuildIntegrationCreateRequest.type.<get-type>|<get-type>(){}[0]

    final fun component1(): kotlin/Int // dev.kord.rest.json.request/GuildIntegrationCreateRequest.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.rest.json.request/GuildIntegrationCreateRequest.component2|component2(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/String = ...): dev.kord.rest.json.request/GuildIntegrationCreateRequest // dev.kord.rest.json.request/GuildIntegrationCreateRequest.copy|copy(kotlin.Int;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/GuildIntegrationCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/GuildIntegrationCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/GuildIntegrationCreateRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/GuildIntegrationCreateRequest> { // dev.kord.rest.json.request/GuildIntegrationCreateRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/GuildIntegrationCreateRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/GuildIntegrationCreateRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/GuildIntegrationCreateRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/GuildIntegrationCreateRequest // dev.kord.rest.json.request/GuildIntegrationCreateRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/GuildIntegrationCreateRequest) // dev.kord.rest.json.request/GuildIntegrationCreateRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.GuildIntegrationCreateRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/GuildIntegrationCreateRequest.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/GuildIntegrationCreateRequest> // dev.kord.rest.json.request/GuildIntegrationCreateRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/GuildIntegrationModifyRequest { // dev.kord.rest.json.request/GuildIntegrationModifyRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<dev.kord.common.entity/IntegrationExpireBehavior> = ..., dev.kord.common.entity.optional/OptionalInt? = ..., dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.rest.json.request/GuildIntegrationModifyRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<dev.kord.common.entity.IntegrationExpireBehavior>;dev.kord.common.entity.optional.OptionalInt?;dev.kord.common.entity.optional.OptionalBoolean){}[0]

    final val emoticons // dev.kord.rest.json.request/GuildIntegrationModifyRequest.emoticons|{}emoticons[0]
        final fun <get-emoticons>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/GuildIntegrationModifyRequest.emoticons.<get-emoticons>|<get-emoticons>(){}[0]
    final val expireBehavior // dev.kord.rest.json.request/GuildIntegrationModifyRequest.expireBehavior|{}expireBehavior[0]
        final fun <get-expireBehavior>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/IntegrationExpireBehavior> // dev.kord.rest.json.request/GuildIntegrationModifyRequest.expireBehavior.<get-expireBehavior>|<get-expireBehavior>(){}[0]
    final val expirePeriod // dev.kord.rest.json.request/GuildIntegrationModifyRequest.expirePeriod|{}expirePeriod[0]
        final fun <get-expirePeriod>(): dev.kord.common.entity.optional/OptionalInt? // dev.kord.rest.json.request/GuildIntegrationModifyRequest.expirePeriod.<get-expirePeriod>|<get-expirePeriod>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/IntegrationExpireBehavior> // dev.kord.rest.json.request/GuildIntegrationModifyRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalInt? // dev.kord.rest.json.request/GuildIntegrationModifyRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/GuildIntegrationModifyRequest.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<dev.kord.common.entity/IntegrationExpireBehavior> = ..., dev.kord.common.entity.optional/OptionalInt? = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.rest.json.request/GuildIntegrationModifyRequest // dev.kord.rest.json.request/GuildIntegrationModifyRequest.copy|copy(dev.kord.common.entity.optional.Optional<dev.kord.common.entity.IntegrationExpireBehavior>;dev.kord.common.entity.optional.OptionalInt?;dev.kord.common.entity.optional.OptionalBoolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/GuildIntegrationModifyRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/GuildIntegrationModifyRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/GuildIntegrationModifyRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/GuildIntegrationModifyRequest> { // dev.kord.rest.json.request/GuildIntegrationModifyRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/GuildIntegrationModifyRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/GuildIntegrationModifyRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/GuildIntegrationModifyRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/GuildIntegrationModifyRequest // dev.kord.rest.json.request/GuildIntegrationModifyRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/GuildIntegrationModifyRequest) // dev.kord.rest.json.request/GuildIntegrationModifyRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.GuildIntegrationModifyRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/GuildIntegrationModifyRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/GuildIntegrationModifyRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/GuildIntegrationModifyRequest> // dev.kord.rest.json.request/GuildIntegrationModifyRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/GuildMFALevelModifyRequest { // dev.kord.rest.json.request/GuildMFALevelModifyRequest|null[0]
    constructor <init>(dev.kord.common.entity/MFALevel) // dev.kord.rest.json.request/GuildMFALevelModifyRequest.<init>|<init>(dev.kord.common.entity.MFALevel){}[0]

    final val level // dev.kord.rest.json.request/GuildMFALevelModifyRequest.level|{}level[0]
        final fun <get-level>(): dev.kord.common.entity/MFALevel // dev.kord.rest.json.request/GuildMFALevelModifyRequest.level.<get-level>|<get-level>(){}[0]

    final fun component1(): dev.kord.common.entity/MFALevel // dev.kord.rest.json.request/GuildMFALevelModifyRequest.component1|component1(){}[0]
    final fun copy(dev.kord.common.entity/MFALevel = ...): dev.kord.rest.json.request/GuildMFALevelModifyRequest // dev.kord.rest.json.request/GuildMFALevelModifyRequest.copy|copy(dev.kord.common.entity.MFALevel){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/GuildMFALevelModifyRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/GuildMFALevelModifyRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/GuildMFALevelModifyRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/GuildMFALevelModifyRequest> { // dev.kord.rest.json.request/GuildMFALevelModifyRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/GuildMFALevelModifyRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/GuildMFALevelModifyRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/GuildMFALevelModifyRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/GuildMFALevelModifyRequest // dev.kord.rest.json.request/GuildMFALevelModifyRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/GuildMFALevelModifyRequest) // dev.kord.rest.json.request/GuildMFALevelModifyRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.GuildMFALevelModifyRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/GuildMFALevelModifyRequest.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/GuildMFALevelModifyRequest> // dev.kord.rest.json.request/GuildMFALevelModifyRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/GuildMemberAddRequest { // dev.kord.rest.json.request/GuildMemberAddRequest|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ...) // dev.kord.rest.json.request/GuildMemberAddRequest.<init>|<init>(kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.Set<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>){}[0]

    final val communicationDisabledUntil // dev.kord.rest.json.request/GuildMemberAddRequest.communicationDisabledUntil|{}communicationDisabledUntil[0]
        final fun <get-communicationDisabledUntil>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.rest.json.request/GuildMemberAddRequest.communicationDisabledUntil.<get-communicationDisabledUntil>|<get-communicationDisabledUntil>(){}[0]
    final val deaf // dev.kord.rest.json.request/GuildMemberAddRequest.deaf|{}deaf[0]
        final fun <get-deaf>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/GuildMemberAddRequest.deaf.<get-deaf>|<get-deaf>(){}[0]
    final val mute // dev.kord.rest.json.request/GuildMemberAddRequest.mute|{}mute[0]
        final fun <get-mute>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/GuildMemberAddRequest.mute.<get-mute>|<get-mute>(){}[0]
    final val nick // dev.kord.rest.json.request/GuildMemberAddRequest.nick|{}nick[0]
        final fun <get-nick>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildMemberAddRequest.nick.<get-nick>|<get-nick>(){}[0]
    final val roles // dev.kord.rest.json.request/GuildMemberAddRequest.roles|{}roles[0]
        final fun <get-roles>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Snowflake>> // dev.kord.rest.json.request/GuildMemberAddRequest.roles.<get-roles>|<get-roles>(){}[0]
    final val token // dev.kord.rest.json.request/GuildMemberAddRequest.token|{}token[0]
        final fun <get-token>(): kotlin/String // dev.kord.rest.json.request/GuildMemberAddRequest.token.<get-token>|<get-token>(){}[0]

    final fun component1(): kotlin/String // dev.kord.rest.json.request/GuildMemberAddRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildMemberAddRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Snowflake>> // dev.kord.rest.json.request/GuildMemberAddRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/GuildMemberAddRequest.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/GuildMemberAddRequest.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.rest.json.request/GuildMemberAddRequest.component6|component6(){}[0]
    final fun copy(kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ...): dev.kord.rest.json.request/GuildMemberAddRequest // dev.kord.rest.json.request/GuildMemberAddRequest.copy|copy(kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.Set<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/GuildMemberAddRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/GuildMemberAddRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/GuildMemberAddRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/GuildMemberAddRequest> { // dev.kord.rest.json.request/GuildMemberAddRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/GuildMemberAddRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/GuildMemberAddRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/GuildMemberAddRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/GuildMemberAddRequest // dev.kord.rest.json.request/GuildMemberAddRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/GuildMemberAddRequest) // dev.kord.rest.json.request/GuildMemberAddRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.GuildMemberAddRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/GuildMemberAddRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/GuildMemberAddRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/GuildMemberAddRequest> // dev.kord.rest.json.request/GuildMemberAddRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/GuildMemberModifyRequest { // dev.kord.rest.json.request/GuildMemberModifyRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Snowflake>?> = ..., dev.kord.common.entity.optional/OptionalBoolean? = ..., dev.kord.common.entity.optional/OptionalBoolean? = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/GuildMemberFlags?> = ...) // dev.kord.rest.json.request/GuildMemberModifyRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.collections.Set<dev.kord.common.entity.Snowflake>?>;dev.kord.common.entity.optional.OptionalBoolean?;dev.kord.common.entity.optional.OptionalBoolean?;dev.kord.common.entity.optional.OptionalSnowflake?;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.GuildMemberFlags?>){}[0]

    final val channelId // dev.kord.rest.json.request/GuildMemberModifyRequest.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.rest.json.request/GuildMemberModifyRequest.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val communicationDisabledUntil // dev.kord.rest.json.request/GuildMemberModifyRequest.communicationDisabledUntil|{}communicationDisabledUntil[0]
        final fun <get-communicationDisabledUntil>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.rest.json.request/GuildMemberModifyRequest.communicationDisabledUntil.<get-communicationDisabledUntil>|<get-communicationDisabledUntil>(){}[0]
    final val deaf // dev.kord.rest.json.request/GuildMemberModifyRequest.deaf|{}deaf[0]
        final fun <get-deaf>(): dev.kord.common.entity.optional/OptionalBoolean? // dev.kord.rest.json.request/GuildMemberModifyRequest.deaf.<get-deaf>|<get-deaf>(){}[0]
    final val flags // dev.kord.rest.json.request/GuildMemberModifyRequest.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/GuildMemberFlags?> // dev.kord.rest.json.request/GuildMemberModifyRequest.flags.<get-flags>|<get-flags>(){}[0]
    final val mute // dev.kord.rest.json.request/GuildMemberModifyRequest.mute|{}mute[0]
        final fun <get-mute>(): dev.kord.common.entity.optional/OptionalBoolean? // dev.kord.rest.json.request/GuildMemberModifyRequest.mute.<get-mute>|<get-mute>(){}[0]
    final val nick // dev.kord.rest.json.request/GuildMemberModifyRequest.nick|{}nick[0]
        final fun <get-nick>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/GuildMemberModifyRequest.nick.<get-nick>|<get-nick>(){}[0]
    final val roles // dev.kord.rest.json.request/GuildMemberModifyRequest.roles|{}roles[0]
        final fun <get-roles>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Snowflake>?> // dev.kord.rest.json.request/GuildMemberModifyRequest.roles.<get-roles>|<get-roles>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/GuildMemberModifyRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Snowflake>?> // dev.kord.rest.json.request/GuildMemberModifyRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalBoolean? // dev.kord.rest.json.request/GuildMemberModifyRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalBoolean? // dev.kord.rest.json.request/GuildMemberModifyRequest.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.rest.json.request/GuildMemberModifyRequest.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.rest.json.request/GuildMemberModifyRequest.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/GuildMemberFlags?> // dev.kord.rest.json.request/GuildMemberModifyRequest.component7|component7(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Snowflake>?> = ..., dev.kord.common.entity.optional/OptionalBoolean? = ..., dev.kord.common.entity.optional/OptionalBoolean? = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/GuildMemberFlags?> = ...): dev.kord.rest.json.request/GuildMemberModifyRequest // dev.kord.rest.json.request/GuildMemberModifyRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.collections.Set<dev.kord.common.entity.Snowflake>?>;dev.kord.common.entity.optional.OptionalBoolean?;dev.kord.common.entity.optional.OptionalBoolean?;dev.kord.common.entity.optional.OptionalSnowflake?;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.GuildMemberFlags?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/GuildMemberModifyRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/GuildMemberModifyRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/GuildMemberModifyRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/GuildMemberModifyRequest> { // dev.kord.rest.json.request/GuildMemberModifyRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/GuildMemberModifyRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/GuildMemberModifyRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/GuildMemberModifyRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/GuildMemberModifyRequest // dev.kord.rest.json.request/GuildMemberModifyRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/GuildMemberModifyRequest) // dev.kord.rest.json.request/GuildMemberModifyRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.GuildMemberModifyRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/GuildMemberModifyRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/GuildMemberModifyRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/GuildMemberModifyRequest> // dev.kord.rest.json.request/GuildMemberModifyRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/GuildModifyRequest { // dev.kord.rest.json.request/GuildModifyRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/VerificationLevel?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DefaultMessageNotificationLevel?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ExplicitContentFilter?> = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/GuildFeature>> = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ...) // dev.kord.rest.json.request/GuildModifyRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.VerificationLevel?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DefaultMessageNotificationLevel?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ExplicitContentFilter?>;dev.kord.common.entity.optional.OptionalSnowflake?;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.OptionalSnowflake?;dev.kord.common.entity.optional.OptionalSnowflake?;dev.kord.common.entity.optional.OptionalSnowflake?;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.collections.Set<dev.kord.common.entity.GuildFeature>>;dev.kord.common.entity.optional.OptionalSnowflake?){}[0]

    final val afkChannelId // dev.kord.rest.json.request/GuildModifyRequest.afkChannelId|{}afkChannelId[0]
        final fun <get-afkChannelId>(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.rest.json.request/GuildModifyRequest.afkChannelId.<get-afkChannelId>|<get-afkChannelId>(){}[0]
    final val afkTimeout // dev.kord.rest.json.request/GuildModifyRequest.afkTimeout|{}afkTimeout[0]
        final fun <get-afkTimeout>(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.rest.json.request/GuildModifyRequest.afkTimeout.<get-afkTimeout>|<get-afkTimeout>(){}[0]
    final val banner // dev.kord.rest.json.request/GuildModifyRequest.banner|{}banner[0]
        final fun <get-banner>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/GuildModifyRequest.banner.<get-banner>|<get-banner>(){}[0]
    final val contentFilter // dev.kord.rest.json.request/GuildModifyRequest.contentFilter|{}contentFilter[0]
        final fun <get-contentFilter>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ExplicitContentFilter?> // dev.kord.rest.json.request/GuildModifyRequest.contentFilter.<get-contentFilter>|<get-contentFilter>(){}[0]
    final val defaultMessageNotificationLevel // dev.kord.rest.json.request/GuildModifyRequest.defaultMessageNotificationLevel|{}defaultMessageNotificationLevel[0]
        final fun <get-defaultMessageNotificationLevel>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DefaultMessageNotificationLevel?> // dev.kord.rest.json.request/GuildModifyRequest.defaultMessageNotificationLevel.<get-defaultMessageNotificationLevel>|<get-defaultMessageNotificationLevel>(){}[0]
    final val features // dev.kord.rest.json.request/GuildModifyRequest.features|{}features[0]
        final fun <get-features>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/GuildFeature>> // dev.kord.rest.json.request/GuildModifyRequest.features.<get-features>|<get-features>(){}[0]
    final val icon // dev.kord.rest.json.request/GuildModifyRequest.icon|{}icon[0]
        final fun <get-icon>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/GuildModifyRequest.icon.<get-icon>|<get-icon>(){}[0]
    final val name // dev.kord.rest.json.request/GuildModifyRequest.name|{}name[0]
        final fun <get-name>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildModifyRequest.name.<get-name>|<get-name>(){}[0]
    final val ownerId // dev.kord.rest.json.request/GuildModifyRequest.ownerId|{}ownerId[0]
        final fun <get-ownerId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.rest.json.request/GuildModifyRequest.ownerId.<get-ownerId>|<get-ownerId>(){}[0]
    final val preferredLocale // dev.kord.rest.json.request/GuildModifyRequest.preferredLocale|{}preferredLocale[0]
        final fun <get-preferredLocale>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/GuildModifyRequest.preferredLocale.<get-preferredLocale>|<get-preferredLocale>(){}[0]
    final val publicUpdatesChannelId // dev.kord.rest.json.request/GuildModifyRequest.publicUpdatesChannelId|{}publicUpdatesChannelId[0]
        final fun <get-publicUpdatesChannelId>(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.rest.json.request/GuildModifyRequest.publicUpdatesChannelId.<get-publicUpdatesChannelId>|<get-publicUpdatesChannelId>(){}[0]
    final val region // dev.kord.rest.json.request/GuildModifyRequest.region|{}region[0]
        final fun <get-region>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/GuildModifyRequest.region.<get-region>|<get-region>(){}[0]
    final val rulesChannelId // dev.kord.rest.json.request/GuildModifyRequest.rulesChannelId|{}rulesChannelId[0]
        final fun <get-rulesChannelId>(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.rest.json.request/GuildModifyRequest.rulesChannelId.<get-rulesChannelId>|<get-rulesChannelId>(){}[0]
    final val safetyAlertsChannelId // dev.kord.rest.json.request/GuildModifyRequest.safetyAlertsChannelId|{}safetyAlertsChannelId[0]
        final fun <get-safetyAlertsChannelId>(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.rest.json.request/GuildModifyRequest.safetyAlertsChannelId.<get-safetyAlertsChannelId>|<get-safetyAlertsChannelId>(){}[0]
    final val splash // dev.kord.rest.json.request/GuildModifyRequest.splash|{}splash[0]
        final fun <get-splash>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/GuildModifyRequest.splash.<get-splash>|<get-splash>(){}[0]
    final val systemChannelId // dev.kord.rest.json.request/GuildModifyRequest.systemChannelId|{}systemChannelId[0]
        final fun <get-systemChannelId>(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.rest.json.request/GuildModifyRequest.systemChannelId.<get-systemChannelId>|<get-systemChannelId>(){}[0]
    final val verificationLevel // dev.kord.rest.json.request/GuildModifyRequest.verificationLevel|{}verificationLevel[0]
        final fun <get-verificationLevel>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/VerificationLevel?> // dev.kord.rest.json.request/GuildModifyRequest.verificationLevel.<get-verificationLevel>|<get-verificationLevel>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildModifyRequest.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/GuildModifyRequest.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/GuildModifyRequest.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.rest.json.request/GuildModifyRequest.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.rest.json.request/GuildModifyRequest.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.rest.json.request/GuildModifyRequest.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/GuildModifyRequest.component15|component15(){}[0]
    final fun component16(): dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/GuildFeature>> // dev.kord.rest.json.request/GuildModifyRequest.component16|component16(){}[0]
    final fun component17(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.rest.json.request/GuildModifyRequest.component17|component17(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/GuildModifyRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/VerificationLevel?> // dev.kord.rest.json.request/GuildModifyRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DefaultMessageNotificationLevel?> // dev.kord.rest.json.request/GuildModifyRequest.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ExplicitContentFilter?> // dev.kord.rest.json.request/GuildModifyRequest.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.rest.json.request/GuildModifyRequest.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.rest.json.request/GuildModifyRequest.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/GuildModifyRequest.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.rest.json.request/GuildModifyRequest.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/VerificationLevel?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DefaultMessageNotificationLevel?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ExplicitContentFilter?> = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/GuildFeature>> = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ...): dev.kord.rest.json.request/GuildModifyRequest // dev.kord.rest.json.request/GuildModifyRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.VerificationLevel?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DefaultMessageNotificationLevel?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ExplicitContentFilter?>;dev.kord.common.entity.optional.OptionalSnowflake?;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.OptionalSnowflake?;dev.kord.common.entity.optional.OptionalSnowflake?;dev.kord.common.entity.optional.OptionalSnowflake?;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.collections.Set<dev.kord.common.entity.GuildFeature>>;dev.kord.common.entity.optional.OptionalSnowflake?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/GuildModifyRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/GuildModifyRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/GuildModifyRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/GuildModifyRequest> { // dev.kord.rest.json.request/GuildModifyRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/GuildModifyRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/GuildModifyRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/GuildModifyRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/GuildModifyRequest // dev.kord.rest.json.request/GuildModifyRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/GuildModifyRequest) // dev.kord.rest.json.request/GuildModifyRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.GuildModifyRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/GuildModifyRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/GuildModifyRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/GuildModifyRequest> // dev.kord.rest.json.request/GuildModifyRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/GuildOnboardingModifyRequest { // dev.kord.rest.json.request/GuildOnboardingModifyRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/OnboardingPromptRequest>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/OnboardingMode> = ...) // dev.kord.rest.json.request/GuildOnboardingModifyRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.OnboardingPromptRequest>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.OnboardingMode>){}[0]

    final val defaultChannelIds // dev.kord.rest.json.request/GuildOnboardingModifyRequest.defaultChannelIds|{}defaultChannelIds[0]
        final fun <get-defaultChannelIds>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.rest.json.request/GuildOnboardingModifyRequest.defaultChannelIds.<get-defaultChannelIds>|<get-defaultChannelIds>(){}[0]
    final val enabled // dev.kord.rest.json.request/GuildOnboardingModifyRequest.enabled|{}enabled[0]
        final fun <get-enabled>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/GuildOnboardingModifyRequest.enabled.<get-enabled>|<get-enabled>(){}[0]
    final val mode // dev.kord.rest.json.request/GuildOnboardingModifyRequest.mode|{}mode[0]
        final fun <get-mode>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/OnboardingMode> // dev.kord.rest.json.request/GuildOnboardingModifyRequest.mode.<get-mode>|<get-mode>(){}[0]
    final val prompts // dev.kord.rest.json.request/GuildOnboardingModifyRequest.prompts|{}prompts[0]
        final fun <get-prompts>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/OnboardingPromptRequest>> // dev.kord.rest.json.request/GuildOnboardingModifyRequest.prompts.<get-prompts>|<get-prompts>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/OnboardingPromptRequest>> // dev.kord.rest.json.request/GuildOnboardingModifyRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.rest.json.request/GuildOnboardingModifyRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/GuildOnboardingModifyRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/OnboardingMode> // dev.kord.rest.json.request/GuildOnboardingModifyRequest.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/OnboardingPromptRequest>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/OnboardingMode> = ...): dev.kord.rest.json.request/GuildOnboardingModifyRequest // dev.kord.rest.json.request/GuildOnboardingModifyRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.OnboardingPromptRequest>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.OnboardingMode>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/GuildOnboardingModifyRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/GuildOnboardingModifyRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/GuildOnboardingModifyRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/GuildOnboardingModifyRequest> { // dev.kord.rest.json.request/GuildOnboardingModifyRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/GuildOnboardingModifyRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/GuildOnboardingModifyRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/GuildOnboardingModifyRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/GuildOnboardingModifyRequest // dev.kord.rest.json.request/GuildOnboardingModifyRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/GuildOnboardingModifyRequest) // dev.kord.rest.json.request/GuildOnboardingModifyRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.GuildOnboardingModifyRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/GuildOnboardingModifyRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/GuildOnboardingModifyRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/GuildOnboardingModifyRequest> // dev.kord.rest.json.request/GuildOnboardingModifyRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/GuildRoleCreateRequest { // dev.kord.rest.json.request/GuildRoleCreateRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common/Color> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalSnowflake = ...) // dev.kord.rest.json.request/GuildRoleCreateRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions>;dev.kord.common.entity.optional.Optional<dev.kord.common.Color>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalSnowflake){}[0]

    final val color // dev.kord.rest.json.request/GuildRoleCreateRequest.color|{}color[0]
        final fun <get-color>(): dev.kord.common.entity.optional/Optional<dev.kord.common/Color> // dev.kord.rest.json.request/GuildRoleCreateRequest.color.<get-color>|<get-color>(){}[0]
    final val hoist // dev.kord.rest.json.request/GuildRoleCreateRequest.hoist|{}hoist[0]
        final fun <get-hoist>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/GuildRoleCreateRequest.hoist.<get-hoist>|<get-hoist>(){}[0]
    final val icon // dev.kord.rest.json.request/GuildRoleCreateRequest.icon|{}icon[0]
        final fun <get-icon>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/GuildRoleCreateRequest.icon.<get-icon>|<get-icon>(){}[0]
    final val id // dev.kord.rest.json.request/GuildRoleCreateRequest.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.rest.json.request/GuildRoleCreateRequest.id.<get-id>|<get-id>(){}[0]
    final val mentionable // dev.kord.rest.json.request/GuildRoleCreateRequest.mentionable|{}mentionable[0]
        final fun <get-mentionable>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/GuildRoleCreateRequest.mentionable.<get-mentionable>|<get-mentionable>(){}[0]
    final val name // dev.kord.rest.json.request/GuildRoleCreateRequest.name|{}name[0]
        final fun <get-name>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildRoleCreateRequest.name.<get-name>|<get-name>(){}[0]
    final val permissions // dev.kord.rest.json.request/GuildRoleCreateRequest.permissions|{}permissions[0]
        final fun <get-permissions>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> // dev.kord.rest.json.request/GuildRoleCreateRequest.permissions.<get-permissions>|<get-permissions>(){}[0]
    final val unicodeEmoji // dev.kord.rest.json.request/GuildRoleCreateRequest.unicodeEmoji|{}unicodeEmoji[0]
        final fun <get-unicodeEmoji>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/GuildRoleCreateRequest.unicodeEmoji.<get-unicodeEmoji>|<get-unicodeEmoji>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildRoleCreateRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> // dev.kord.rest.json.request/GuildRoleCreateRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<dev.kord.common/Color> // dev.kord.rest.json.request/GuildRoleCreateRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/GuildRoleCreateRequest.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/GuildRoleCreateRequest.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/GuildRoleCreateRequest.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/GuildRoleCreateRequest.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.rest.json.request/GuildRoleCreateRequest.component8|component8(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common/Color> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalSnowflake = ...): dev.kord.rest.json.request/GuildRoleCreateRequest // dev.kord.rest.json.request/GuildRoleCreateRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions>;dev.kord.common.entity.optional.Optional<dev.kord.common.Color>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalSnowflake){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/GuildRoleCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/GuildRoleCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/GuildRoleCreateRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/GuildRoleCreateRequest> { // dev.kord.rest.json.request/GuildRoleCreateRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/GuildRoleCreateRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/GuildRoleCreateRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/GuildRoleCreateRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/GuildRoleCreateRequest // dev.kord.rest.json.request/GuildRoleCreateRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/GuildRoleCreateRequest) // dev.kord.rest.json.request/GuildRoleCreateRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.GuildRoleCreateRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/GuildRoleCreateRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/GuildRoleCreateRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/GuildRoleCreateRequest> // dev.kord.rest.json.request/GuildRoleCreateRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/GuildRoleModifyRequest { // dev.kord.rest.json.request/GuildRoleModifyRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common/Color?> = ..., dev.kord.common.entity.optional/OptionalBoolean? = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/OptionalBoolean? = ...) // dev.kord.rest.json.request/GuildRoleModifyRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions?>;dev.kord.common.entity.optional.Optional<dev.kord.common.Color?>;dev.kord.common.entity.optional.OptionalBoolean?;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.OptionalBoolean?){}[0]

    final val color // dev.kord.rest.json.request/GuildRoleModifyRequest.color|{}color[0]
        final fun <get-color>(): dev.kord.common.entity.optional/Optional<dev.kord.common/Color?> // dev.kord.rest.json.request/GuildRoleModifyRequest.color.<get-color>|<get-color>(){}[0]
    final val hoist // dev.kord.rest.json.request/GuildRoleModifyRequest.hoist|{}hoist[0]
        final fun <get-hoist>(): dev.kord.common.entity.optional/OptionalBoolean? // dev.kord.rest.json.request/GuildRoleModifyRequest.hoist.<get-hoist>|<get-hoist>(){}[0]
    final val icon // dev.kord.rest.json.request/GuildRoleModifyRequest.icon|{}icon[0]
        final fun <get-icon>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/GuildRoleModifyRequest.icon.<get-icon>|<get-icon>(){}[0]
    final val mentionable // dev.kord.rest.json.request/GuildRoleModifyRequest.mentionable|{}mentionable[0]
        final fun <get-mentionable>(): dev.kord.common.entity.optional/OptionalBoolean? // dev.kord.rest.json.request/GuildRoleModifyRequest.mentionable.<get-mentionable>|<get-mentionable>(){}[0]
    final val name // dev.kord.rest.json.request/GuildRoleModifyRequest.name|{}name[0]
        final fun <get-name>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/GuildRoleModifyRequest.name.<get-name>|<get-name>(){}[0]
    final val permissions // dev.kord.rest.json.request/GuildRoleModifyRequest.permissions|{}permissions[0]
        final fun <get-permissions>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions?> // dev.kord.rest.json.request/GuildRoleModifyRequest.permissions.<get-permissions>|<get-permissions>(){}[0]
    final val unicodeEmoji // dev.kord.rest.json.request/GuildRoleModifyRequest.unicodeEmoji|{}unicodeEmoji[0]
        final fun <get-unicodeEmoji>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/GuildRoleModifyRequest.unicodeEmoji.<get-unicodeEmoji>|<get-unicodeEmoji>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/GuildRoleModifyRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions?> // dev.kord.rest.json.request/GuildRoleModifyRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<dev.kord.common/Color?> // dev.kord.rest.json.request/GuildRoleModifyRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalBoolean? // dev.kord.rest.json.request/GuildRoleModifyRequest.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/GuildRoleModifyRequest.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/GuildRoleModifyRequest.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalBoolean? // dev.kord.rest.json.request/GuildRoleModifyRequest.component7|component7(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common/Color?> = ..., dev.kord.common.entity.optional/OptionalBoolean? = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/OptionalBoolean? = ...): dev.kord.rest.json.request/GuildRoleModifyRequest // dev.kord.rest.json.request/GuildRoleModifyRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions?>;dev.kord.common.entity.optional.Optional<dev.kord.common.Color?>;dev.kord.common.entity.optional.OptionalBoolean?;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.OptionalBoolean?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/GuildRoleModifyRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/GuildRoleModifyRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/GuildRoleModifyRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/GuildRoleModifyRequest> { // dev.kord.rest.json.request/GuildRoleModifyRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/GuildRoleModifyRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/GuildRoleModifyRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/GuildRoleModifyRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/GuildRoleModifyRequest // dev.kord.rest.json.request/GuildRoleModifyRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/GuildRoleModifyRequest) // dev.kord.rest.json.request/GuildRoleModifyRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.GuildRoleModifyRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/GuildRoleModifyRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/GuildRoleModifyRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/GuildRoleModifyRequest> // dev.kord.rest.json.request/GuildRoleModifyRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/GuildRolePositionModifyRequest { // dev.kord.rest.json.request/GuildRolePositionModifyRequest|null[0]
    constructor <init>(kotlin.collections/List<kotlin/Pair<dev.kord.common.entity/Snowflake, kotlin/Int>>) // dev.kord.rest.json.request/GuildRolePositionModifyRequest.<init>|<init>(kotlin.collections.List<kotlin.Pair<dev.kord.common.entity.Snowflake,kotlin.Int>>){}[0]

    final val swaps // dev.kord.rest.json.request/GuildRolePositionModifyRequest.swaps|{}swaps[0]
        final fun <get-swaps>(): kotlin.collections/List<kotlin/Pair<dev.kord.common.entity/Snowflake, kotlin/Int>> // dev.kord.rest.json.request/GuildRolePositionModifyRequest.swaps.<get-swaps>|<get-swaps>(){}[0]

    final fun component1(): kotlin.collections/List<kotlin/Pair<dev.kord.common.entity/Snowflake, kotlin/Int>> // dev.kord.rest.json.request/GuildRolePositionModifyRequest.component1|component1(){}[0]
    final fun copy(kotlin.collections/List<kotlin/Pair<dev.kord.common.entity/Snowflake, kotlin/Int>> = ...): dev.kord.rest.json.request/GuildRolePositionModifyRequest // dev.kord.rest.json.request/GuildRolePositionModifyRequest.copy|copy(kotlin.collections.List<kotlin.Pair<dev.kord.common.entity.Snowflake,kotlin.Int>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/GuildRolePositionModifyRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/GuildRolePositionModifyRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/GuildRolePositionModifyRequest.toString|toString(){}[0]

    final object Companion { // dev.kord.rest.json.request/GuildRolePositionModifyRequest.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/GuildRolePositionModifyRequest> // dev.kord.rest.json.request/GuildRolePositionModifyRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/GuildScheduledEventCreateRequest { // dev.kord.rest.json.request/GuildScheduledEventCreateRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/GuildScheduledEventEntityMetadata> = ..., kotlin/String, dev.kord.common.entity/GuildScheduledEventPrivacyLevel, kotlinx.datetime/Instant, dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity/ScheduledEntityType, dev.kord.common.entity.optional/Optional<kotlin/String> = ...) // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.<init>|<init>(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.GuildScheduledEventEntityMetadata>;kotlin.String;dev.kord.common.entity.GuildScheduledEventPrivacyLevel;kotlinx.datetime.Instant;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.ScheduledEntityType;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]

    final val channelId // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val description // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.description|{}description[0]
        final fun <get-description>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.description.<get-description>|<get-description>(){}[0]
    final val entityMetadata // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.entityMetadata|{}entityMetadata[0]
        final fun <get-entityMetadata>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/GuildScheduledEventEntityMetadata> // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.entityMetadata.<get-entityMetadata>|<get-entityMetadata>(){}[0]
    final val entityType // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.entityType|{}entityType[0]
        final fun <get-entityType>(): dev.kord.common.entity/ScheduledEntityType // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.entityType.<get-entityType>|<get-entityType>(){}[0]
    final val image // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.image|{}image[0]
        final fun <get-image>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.image.<get-image>|<get-image>(){}[0]
    final val name // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.name.<get-name>|<get-name>(){}[0]
    final val privacyLevel // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.privacyLevel|{}privacyLevel[0]
        final fun <get-privacyLevel>(): dev.kord.common.entity/GuildScheduledEventPrivacyLevel // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.privacyLevel.<get-privacyLevel>|<get-privacyLevel>(){}[0]
    final val scheduledEndTime // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.scheduledEndTime|{}scheduledEndTime[0]
        final fun <get-scheduledEndTime>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.scheduledEndTime.<get-scheduledEndTime>|<get-scheduledEndTime>(){}[0]
    final val scheduledStartTime // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.scheduledStartTime|{}scheduledStartTime[0]
        final fun <get-scheduledStartTime>(): kotlinx.datetime/Instant // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.scheduledStartTime.<get-scheduledStartTime>|<get-scheduledStartTime>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/GuildScheduledEventEntityMetadata> // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.component2|component2(){}[0]
    final fun component3(): kotlin/String // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity/GuildScheduledEventPrivacyLevel // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.component4|component4(){}[0]
    final fun component5(): kotlinx.datetime/Instant // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity/ScheduledEntityType // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/GuildScheduledEventEntityMetadata> = ..., kotlin/String = ..., dev.kord.common.entity/GuildScheduledEventPrivacyLevel = ..., kotlinx.datetime/Instant = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity/ScheduledEntityType = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...): dev.kord.rest.json.request/GuildScheduledEventCreateRequest // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.copy|copy(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.GuildScheduledEventEntityMetadata>;kotlin.String;dev.kord.common.entity.GuildScheduledEventPrivacyLevel;kotlinx.datetime.Instant;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.ScheduledEntityType;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/GuildScheduledEventCreateRequest> { // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/GuildScheduledEventCreateRequest // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/GuildScheduledEventCreateRequest) // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.GuildScheduledEventCreateRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/GuildScheduledEventCreateRequest> // dev.kord.rest.json.request/GuildScheduledEventCreateRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/GuildScheduledEventUsersResponse { // dev.kord.rest.json.request/GuildScheduledEventUsersResponse|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordUser, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> = ...) // dev.kord.rest.json.request/GuildScheduledEventUsersResponse.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.DiscordUser;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordGuildMember>){}[0]

    final val guildScheduledEventId // dev.kord.rest.json.request/GuildScheduledEventUsersResponse.guildScheduledEventId|{}guildScheduledEventId[0]
        final fun <get-guildScheduledEventId>(): dev.kord.common.entity/Snowflake // dev.kord.rest.json.request/GuildScheduledEventUsersResponse.guildScheduledEventId.<get-guildScheduledEventId>|<get-guildScheduledEventId>(){}[0]
    final val member // dev.kord.rest.json.request/GuildScheduledEventUsersResponse.member|{}member[0]
        final fun <get-member>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> // dev.kord.rest.json.request/GuildScheduledEventUsersResponse.member.<get-member>|<get-member>(){}[0]
    final val user // dev.kord.rest.json.request/GuildScheduledEventUsersResponse.user|{}user[0]
        final fun <get-user>(): dev.kord.common.entity/DiscordUser // dev.kord.rest.json.request/GuildScheduledEventUsersResponse.user.<get-user>|<get-user>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.rest.json.request/GuildScheduledEventUsersResponse.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/DiscordUser // dev.kord.rest.json.request/GuildScheduledEventUsersResponse.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> // dev.kord.rest.json.request/GuildScheduledEventUsersResponse.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/DiscordUser = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> = ...): dev.kord.rest.json.request/GuildScheduledEventUsersResponse // dev.kord.rest.json.request/GuildScheduledEventUsersResponse.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.DiscordUser;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordGuildMember>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/GuildScheduledEventUsersResponse.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/GuildScheduledEventUsersResponse.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/GuildScheduledEventUsersResponse.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/GuildScheduledEventUsersResponse> { // dev.kord.rest.json.request/GuildScheduledEventUsersResponse.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/GuildScheduledEventUsersResponse.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/GuildScheduledEventUsersResponse.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/GuildScheduledEventUsersResponse.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/GuildScheduledEventUsersResponse // dev.kord.rest.json.request/GuildScheduledEventUsersResponse.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/GuildScheduledEventUsersResponse) // dev.kord.rest.json.request/GuildScheduledEventUsersResponse.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.GuildScheduledEventUsersResponse){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/GuildScheduledEventUsersResponse.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/GuildScheduledEventUsersResponse.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/GuildScheduledEventUsersResponse> // dev.kord.rest.json.request/GuildScheduledEventUsersResponse.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/GuildStickerCreateRequest { // dev.kord.rest.json.request/GuildStickerCreateRequest|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/String) // dev.kord.rest.json.request/GuildStickerCreateRequest.<init>|<init>(kotlin.String;kotlin.String;kotlin.String){}[0]

    final val description // dev.kord.rest.json.request/GuildStickerCreateRequest.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.rest.json.request/GuildStickerCreateRequest.description.<get-description>|<get-description>(){}[0]
    final val name // dev.kord.rest.json.request/GuildStickerCreateRequest.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.json.request/GuildStickerCreateRequest.name.<get-name>|<get-name>(){}[0]
    final val tags // dev.kord.rest.json.request/GuildStickerCreateRequest.tags|{}tags[0]
        final fun <get-tags>(): kotlin/String // dev.kord.rest.json.request/GuildStickerCreateRequest.tags.<get-tags>|<get-tags>(){}[0]

    final fun component1(): kotlin/String // dev.kord.rest.json.request/GuildStickerCreateRequest.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.rest.json.request/GuildStickerCreateRequest.component2|component2(){}[0]
    final fun component3(): kotlin/String // dev.kord.rest.json.request/GuildStickerCreateRequest.component3|component3(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/String = ...): dev.kord.rest.json.request/GuildStickerCreateRequest // dev.kord.rest.json.request/GuildStickerCreateRequest.copy|copy(kotlin.String;kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/GuildStickerCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/GuildStickerCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/GuildStickerCreateRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/GuildStickerCreateRequest> { // dev.kord.rest.json.request/GuildStickerCreateRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/GuildStickerCreateRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/GuildStickerCreateRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/GuildStickerCreateRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/GuildStickerCreateRequest // dev.kord.rest.json.request/GuildStickerCreateRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/GuildStickerCreateRequest) // dev.kord.rest.json.request/GuildStickerCreateRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.GuildStickerCreateRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/GuildStickerCreateRequest.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/GuildStickerCreateRequest> // dev.kord.rest.json.request/GuildStickerCreateRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/GuildStickerModifyRequest { // dev.kord.rest.json.request/GuildStickerModifyRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...) // dev.kord.rest.json.request/GuildStickerModifyRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]

    final val description // dev.kord.rest.json.request/GuildStickerModifyRequest.description|{}description[0]
        final fun <get-description>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildStickerModifyRequest.description.<get-description>|<get-description>(){}[0]
    final val name // dev.kord.rest.json.request/GuildStickerModifyRequest.name|{}name[0]
        final fun <get-name>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildStickerModifyRequest.name.<get-name>|<get-name>(){}[0]
    final val tags // dev.kord.rest.json.request/GuildStickerModifyRequest.tags|{}tags[0]
        final fun <get-tags>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildStickerModifyRequest.tags.<get-tags>|<get-tags>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildStickerModifyRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildStickerModifyRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildStickerModifyRequest.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...): dev.kord.rest.json.request/GuildStickerModifyRequest // dev.kord.rest.json.request/GuildStickerModifyRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/GuildStickerModifyRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/GuildStickerModifyRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/GuildStickerModifyRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/GuildStickerModifyRequest> { // dev.kord.rest.json.request/GuildStickerModifyRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/GuildStickerModifyRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/GuildStickerModifyRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/GuildStickerModifyRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/GuildStickerModifyRequest // dev.kord.rest.json.request/GuildStickerModifyRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/GuildStickerModifyRequest) // dev.kord.rest.json.request/GuildStickerModifyRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.GuildStickerModifyRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/GuildStickerModifyRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/GuildStickerModifyRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/GuildStickerModifyRequest> // dev.kord.rest.json.request/GuildStickerModifyRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/GuildTemplateCreateRequest { // dev.kord.rest.json.request/GuildTemplateCreateRequest|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity.optional/Optional<kotlin/String?> = ...) // dev.kord.rest.json.request/GuildTemplateCreateRequest.<init>|<init>(kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]

    final val description // dev.kord.rest.json.request/GuildTemplateCreateRequest.description|{}description[0]
        final fun <get-description>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/GuildTemplateCreateRequest.description.<get-description>|<get-description>(){}[0]
    final val name // dev.kord.rest.json.request/GuildTemplateCreateRequest.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.json.request/GuildTemplateCreateRequest.name.<get-name>|<get-name>(){}[0]

    final fun component1(): kotlin/String // dev.kord.rest.json.request/GuildTemplateCreateRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/GuildTemplateCreateRequest.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...): dev.kord.rest.json.request/GuildTemplateCreateRequest // dev.kord.rest.json.request/GuildTemplateCreateRequest.copy|copy(kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/GuildTemplateCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/GuildTemplateCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/GuildTemplateCreateRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/GuildTemplateCreateRequest> { // dev.kord.rest.json.request/GuildTemplateCreateRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/GuildTemplateCreateRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/GuildTemplateCreateRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/GuildTemplateCreateRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/GuildTemplateCreateRequest // dev.kord.rest.json.request/GuildTemplateCreateRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/GuildTemplateCreateRequest) // dev.kord.rest.json.request/GuildTemplateCreateRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.GuildTemplateCreateRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/GuildTemplateCreateRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/GuildTemplateCreateRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/GuildTemplateCreateRequest> // dev.kord.rest.json.request/GuildTemplateCreateRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/GuildTemplateModifyRequest { // dev.kord.rest.json.request/GuildTemplateModifyRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...) // dev.kord.rest.json.request/GuildTemplateModifyRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]

    final val description // dev.kord.rest.json.request/GuildTemplateModifyRequest.description|{}description[0]
        final fun <get-description>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/GuildTemplateModifyRequest.description.<get-description>|<get-description>(){}[0]
    final val name // dev.kord.rest.json.request/GuildTemplateModifyRequest.name|{}name[0]
        final fun <get-name>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildTemplateModifyRequest.name.<get-name>|<get-name>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildTemplateModifyRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/GuildTemplateModifyRequest.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...): dev.kord.rest.json.request/GuildTemplateModifyRequest // dev.kord.rest.json.request/GuildTemplateModifyRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/GuildTemplateModifyRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/GuildTemplateModifyRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/GuildTemplateModifyRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/GuildTemplateModifyRequest> { // dev.kord.rest.json.request/GuildTemplateModifyRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/GuildTemplateModifyRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/GuildTemplateModifyRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/GuildTemplateModifyRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/GuildTemplateModifyRequest // dev.kord.rest.json.request/GuildTemplateModifyRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/GuildTemplateModifyRequest) // dev.kord.rest.json.request/GuildTemplateModifyRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.GuildTemplateModifyRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/GuildTemplateModifyRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/GuildTemplateModifyRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/GuildTemplateModifyRequest> // dev.kord.rest.json.request/GuildTemplateModifyRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest { // dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordWelcomeScreenChannel>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...) // dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest.<init>|<init>(dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordWelcomeScreenChannel>>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]

    final val description // dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest.description|{}description[0]
        final fun <get-description>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest.description.<get-description>|<get-description>(){}[0]
    final val enabled // dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest.enabled|{}enabled[0]
        final fun <get-enabled>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest.enabled.<get-enabled>|<get-enabled>(){}[0]
    final val welcomeScreenChannels // dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest.welcomeScreenChannels|{}welcomeScreenChannels[0]
        final fun <get-welcomeScreenChannels>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordWelcomeScreenChannel>> // dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest.welcomeScreenChannels.<get-welcomeScreenChannels>|<get-welcomeScreenChannels>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordWelcomeScreenChannel>> // dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordWelcomeScreenChannel>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...): dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest // dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest.copy|copy(dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordWelcomeScreenChannel>>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest> { // dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest // dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest) // dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.GuildWelcomeScreenModifyRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest> // dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/GuildWidgetModifyRequest { // dev.kord.rest.json.request/GuildWidgetModifyRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ...) // dev.kord.rest.json.request/GuildWidgetModifyRequest.<init>|<init>(dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalSnowflake?){}[0]

    final val channelId // dev.kord.rest.json.request/GuildWidgetModifyRequest.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.rest.json.request/GuildWidgetModifyRequest.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val enabled // dev.kord.rest.json.request/GuildWidgetModifyRequest.enabled|{}enabled[0]
        final fun <get-enabled>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/GuildWidgetModifyRequest.enabled.<get-enabled>|<get-enabled>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/GuildWidgetModifyRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.rest.json.request/GuildWidgetModifyRequest.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ...): dev.kord.rest.json.request/GuildWidgetModifyRequest // dev.kord.rest.json.request/GuildWidgetModifyRequest.copy|copy(dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalSnowflake?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/GuildWidgetModifyRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/GuildWidgetModifyRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/GuildWidgetModifyRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/GuildWidgetModifyRequest> { // dev.kord.rest.json.request/GuildWidgetModifyRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/GuildWidgetModifyRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/GuildWidgetModifyRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/GuildWidgetModifyRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/GuildWidgetModifyRequest // dev.kord.rest.json.request/GuildWidgetModifyRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/GuildWidgetModifyRequest) // dev.kord.rest.json.request/GuildWidgetModifyRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.GuildWidgetModifyRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/GuildWidgetModifyRequest.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/GuildWidgetModifyRequest> // dev.kord.rest.json.request/GuildWidgetModifyRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/InteractionApplicationCommandCallbackData { // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData|null[0]
    constructor <init>(dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>> = ...) // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.<init>|<init>(dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.EmbedRequest>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.AllowedMentions>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageFlags>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordComponent>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.AttachmentRequest>>){}[0]

    final val allowedMentions // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.allowedMentions|{}allowedMentions[0]
        final fun <get-allowedMentions>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions> // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.allowedMentions.<get-allowedMentions>|<get-allowedMentions>(){}[0]
    final val attachments // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.attachments|{}attachments[0]
        final fun <get-attachments>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>> // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.attachments.<get-attachments>|<get-attachments>(){}[0]
    final val components // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.components|{}components[0]
        final fun <get-components>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.components.<get-components>|<get-components>(){}[0]
    final val content // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.content|{}content[0]
        final fun <get-content>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.content.<get-content>|<get-content>(){}[0]
    final val embeds // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.embeds|{}embeds[0]
        final fun <get-embeds>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>> // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.embeds.<get-embeds>|<get-embeds>(){}[0]
    final val flags // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.flags.<get-flags>|<get-flags>(){}[0]
    final val tts // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.tts|{}tts[0]
        final fun <get-tts>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.tts.<get-tts>|<get-tts>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>> // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions> // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>> // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.component7|component7(){}[0]
    final fun copy(dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>> = ...): dev.kord.rest.json.request/InteractionApplicationCommandCallbackData // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.copy|copy(dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.EmbedRequest>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.AllowedMentions>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageFlags>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordComponent>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.AttachmentRequest>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/InteractionApplicationCommandCallbackData> { // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/InteractionApplicationCommandCallbackData // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/InteractionApplicationCommandCallbackData) // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.InteractionApplicationCommandCallbackData){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/InteractionApplicationCommandCallbackData> // dev.kord.rest.json.request/InteractionApplicationCommandCallbackData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/InteractionResponseCreateRequest { // dev.kord.rest.json.request/InteractionResponseCreateRequest|null[0]
    constructor <init>(dev.kord.common.entity/InteractionResponseType, dev.kord.common.entity.optional/Optional<dev.kord.rest.json.request/InteractionApplicationCommandCallbackData> = ...) // dev.kord.rest.json.request/InteractionResponseCreateRequest.<init>|<init>(dev.kord.common.entity.InteractionResponseType;dev.kord.common.entity.optional.Optional<dev.kord.rest.json.request.InteractionApplicationCommandCallbackData>){}[0]

    final val data // dev.kord.rest.json.request/InteractionResponseCreateRequest.data|{}data[0]
        final fun <get-data>(): dev.kord.common.entity.optional/Optional<dev.kord.rest.json.request/InteractionApplicationCommandCallbackData> // dev.kord.rest.json.request/InteractionResponseCreateRequest.data.<get-data>|<get-data>(){}[0]
    final val type // dev.kord.rest.json.request/InteractionResponseCreateRequest.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/InteractionResponseType // dev.kord.rest.json.request/InteractionResponseCreateRequest.type.<get-type>|<get-type>(){}[0]

    final fun component1(): dev.kord.common.entity/InteractionResponseType // dev.kord.rest.json.request/InteractionResponseCreateRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.rest.json.request/InteractionApplicationCommandCallbackData> // dev.kord.rest.json.request/InteractionResponseCreateRequest.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/InteractionResponseType = ..., dev.kord.common.entity.optional/Optional<dev.kord.rest.json.request/InteractionApplicationCommandCallbackData> = ...): dev.kord.rest.json.request/InteractionResponseCreateRequest // dev.kord.rest.json.request/InteractionResponseCreateRequest.copy|copy(dev.kord.common.entity.InteractionResponseType;dev.kord.common.entity.optional.Optional<dev.kord.rest.json.request.InteractionApplicationCommandCallbackData>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/InteractionResponseCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/InteractionResponseCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/InteractionResponseCreateRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/InteractionResponseCreateRequest> { // dev.kord.rest.json.request/InteractionResponseCreateRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/InteractionResponseCreateRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/InteractionResponseCreateRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/InteractionResponseCreateRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/InteractionResponseCreateRequest // dev.kord.rest.json.request/InteractionResponseCreateRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/InteractionResponseCreateRequest) // dev.kord.rest.json.request/InteractionResponseCreateRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.InteractionResponseCreateRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/InteractionResponseCreateRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/InteractionResponseCreateRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/InteractionResponseCreateRequest> // dev.kord.rest.json.request/InteractionResponseCreateRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/InteractionResponseModifyRequest { // dev.kord.rest.json.request/InteractionResponseModifyRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>?> = ...) // dev.kord.rest.json.request/InteractionResponseModifyRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.EmbedRequest>?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.AllowedMentions?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageFlags?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordComponent>?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.AttachmentRequest>?>){}[0]

    final val allowedMentions // dev.kord.rest.json.request/InteractionResponseModifyRequest.allowedMentions|{}allowedMentions[0]
        final fun <get-allowedMentions>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions?> // dev.kord.rest.json.request/InteractionResponseModifyRequest.allowedMentions.<get-allowedMentions>|<get-allowedMentions>(){}[0]
    final val attachments // dev.kord.rest.json.request/InteractionResponseModifyRequest.attachments|{}attachments[0]
        final fun <get-attachments>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>?> // dev.kord.rest.json.request/InteractionResponseModifyRequest.attachments.<get-attachments>|<get-attachments>(){}[0]
    final val components // dev.kord.rest.json.request/InteractionResponseModifyRequest.components|{}components[0]
        final fun <get-components>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>?> // dev.kord.rest.json.request/InteractionResponseModifyRequest.components.<get-components>|<get-components>(){}[0]
    final val content // dev.kord.rest.json.request/InteractionResponseModifyRequest.content|{}content[0]
        final fun <get-content>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/InteractionResponseModifyRequest.content.<get-content>|<get-content>(){}[0]
    final val embeds // dev.kord.rest.json.request/InteractionResponseModifyRequest.embeds|{}embeds[0]
        final fun <get-embeds>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>?> // dev.kord.rest.json.request/InteractionResponseModifyRequest.embeds.<get-embeds>|<get-embeds>(){}[0]
    final val flags // dev.kord.rest.json.request/InteractionResponseModifyRequest.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags?> // dev.kord.rest.json.request/InteractionResponseModifyRequest.flags.<get-flags>|<get-flags>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/InteractionResponseModifyRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>?> // dev.kord.rest.json.request/InteractionResponseModifyRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions?> // dev.kord.rest.json.request/InteractionResponseModifyRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags?> // dev.kord.rest.json.request/InteractionResponseModifyRequest.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>?> // dev.kord.rest.json.request/InteractionResponseModifyRequest.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>?> // dev.kord.rest.json.request/InteractionResponseModifyRequest.component6|component6(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>?> = ...): dev.kord.rest.json.request/InteractionResponseModifyRequest // dev.kord.rest.json.request/InteractionResponseModifyRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.EmbedRequest>?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.AllowedMentions?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageFlags?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordComponent>?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.AttachmentRequest>?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/InteractionResponseModifyRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/InteractionResponseModifyRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/InteractionResponseModifyRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/InteractionResponseModifyRequest> { // dev.kord.rest.json.request/InteractionResponseModifyRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/InteractionResponseModifyRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/InteractionResponseModifyRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/InteractionResponseModifyRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/InteractionResponseModifyRequest // dev.kord.rest.json.request/InteractionResponseModifyRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/InteractionResponseModifyRequest) // dev.kord.rest.json.request/InteractionResponseModifyRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.InteractionResponseModifyRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/InteractionResponseModifyRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/InteractionResponseModifyRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/InteractionResponseModifyRequest> // dev.kord.rest.json.request/InteractionResponseModifyRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/InviteCreateRequest { // dev.kord.rest.json.request/InviteCreateRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ...) // dev.kord.rest.json.request/InviteCreateRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.InviteTargetType>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake){}[0]

    final val maxAge // dev.kord.rest.json.request/InviteCreateRequest.maxAge|{}maxAge[0]
        final fun <get-maxAge>(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.rest.json.request/InviteCreateRequest.maxAge.<get-maxAge>|<get-maxAge>(){}[0]
    final val maxUses // dev.kord.rest.json.request/InviteCreateRequest.maxUses|{}maxUses[0]
        final fun <get-maxUses>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.rest.json.request/InviteCreateRequest.maxUses.<get-maxUses>|<get-maxUses>(){}[0]
    final val targetApplicationId // dev.kord.rest.json.request/InviteCreateRequest.targetApplicationId|{}targetApplicationId[0]
        final fun <get-targetApplicationId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.rest.json.request/InviteCreateRequest.targetApplicationId.<get-targetApplicationId>|<get-targetApplicationId>(){}[0]
    final val targetType // dev.kord.rest.json.request/InviteCreateRequest.targetType|{}targetType[0]
        final fun <get-targetType>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> // dev.kord.rest.json.request/InviteCreateRequest.targetType.<get-targetType>|<get-targetType>(){}[0]
    final val targetUserId // dev.kord.rest.json.request/InviteCreateRequest.targetUserId|{}targetUserId[0]
        final fun <get-targetUserId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.rest.json.request/InviteCreateRequest.targetUserId.<get-targetUserId>|<get-targetUserId>(){}[0]
    final val temporary // dev.kord.rest.json.request/InviteCreateRequest.temporary|{}temporary[0]
        final fun <get-temporary>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/InviteCreateRequest.temporary.<get-temporary>|<get-temporary>(){}[0]
    final val unique // dev.kord.rest.json.request/InviteCreateRequest.unique|{}unique[0]
        final fun <get-unique>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/InviteCreateRequest.unique.<get-unique>|<get-unique>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.rest.json.request/InviteCreateRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalInt // dev.kord.rest.json.request/InviteCreateRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/InviteCreateRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/InviteCreateRequest.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> // dev.kord.rest.json.request/InviteCreateRequest.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.rest.json.request/InviteCreateRequest.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.rest.json.request/InviteCreateRequest.component7|component7(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ...): dev.kord.rest.json.request/InviteCreateRequest // dev.kord.rest.json.request/InviteCreateRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.InviteTargetType>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/InviteCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/InviteCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/InviteCreateRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/InviteCreateRequest> { // dev.kord.rest.json.request/InviteCreateRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/InviteCreateRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/InviteCreateRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/InviteCreateRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/InviteCreateRequest // dev.kord.rest.json.request/InviteCreateRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/InviteCreateRequest) // dev.kord.rest.json.request/InviteCreateRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.InviteCreateRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/InviteCreateRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/InviteCreateRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/InviteCreateRequest> // dev.kord.rest.json.request/InviteCreateRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/ListThreadsBySnowflakeRequest { // dev.kord.rest.json.request/ListThreadsBySnowflakeRequest|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake? = ..., kotlin/Int? = ...) // dev.kord.rest.json.request/ListThreadsBySnowflakeRequest.<init>|<init>(dev.kord.common.entity.Snowflake?;kotlin.Int?){}[0]

    final val before // dev.kord.rest.json.request/ListThreadsBySnowflakeRequest.before|{}before[0]
        final fun <get-before>(): dev.kord.common.entity/Snowflake? // dev.kord.rest.json.request/ListThreadsBySnowflakeRequest.before.<get-before>|<get-before>(){}[0]
    final val limit // dev.kord.rest.json.request/ListThreadsBySnowflakeRequest.limit|{}limit[0]
        final fun <get-limit>(): kotlin/Int? // dev.kord.rest.json.request/ListThreadsBySnowflakeRequest.limit.<get-limit>|<get-limit>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake? // dev.kord.rest.json.request/ListThreadsBySnowflakeRequest.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.rest.json.request/ListThreadsBySnowflakeRequest.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake? = ..., kotlin/Int? = ...): dev.kord.rest.json.request/ListThreadsBySnowflakeRequest // dev.kord.rest.json.request/ListThreadsBySnowflakeRequest.copy|copy(dev.kord.common.entity.Snowflake?;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/ListThreadsBySnowflakeRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/ListThreadsBySnowflakeRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/ListThreadsBySnowflakeRequest.toString|toString(){}[0]
}

final class dev.kord.rest.json.request/ListThreadsByTimestampRequest { // dev.kord.rest.json.request/ListThreadsByTimestampRequest|null[0]
    constructor <init>(kotlinx.datetime/Instant? = ..., kotlin/Int? = ...) // dev.kord.rest.json.request/ListThreadsByTimestampRequest.<init>|<init>(kotlinx.datetime.Instant?;kotlin.Int?){}[0]

    final val before // dev.kord.rest.json.request/ListThreadsByTimestampRequest.before|{}before[0]
        final fun <get-before>(): kotlinx.datetime/Instant? // dev.kord.rest.json.request/ListThreadsByTimestampRequest.before.<get-before>|<get-before>(){}[0]
    final val limit // dev.kord.rest.json.request/ListThreadsByTimestampRequest.limit|{}limit[0]
        final fun <get-limit>(): kotlin/Int? // dev.kord.rest.json.request/ListThreadsByTimestampRequest.limit.<get-limit>|<get-limit>(){}[0]

    final fun component1(): kotlinx.datetime/Instant? // dev.kord.rest.json.request/ListThreadsByTimestampRequest.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.rest.json.request/ListThreadsByTimestampRequest.component2|component2(){}[0]
    final fun copy(kotlinx.datetime/Instant? = ..., kotlin/Int? = ...): dev.kord.rest.json.request/ListThreadsByTimestampRequest // dev.kord.rest.json.request/ListThreadsByTimestampRequest.copy|copy(kotlinx.datetime.Instant?;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/ListThreadsByTimestampRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/ListThreadsByTimestampRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/ListThreadsByTimestampRequest.toString|toString(){}[0]
}

final class dev.kord.rest.json.request/MessageCreateRequest { // dev.kord.rest.json.request/MessageCreateRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessageReference> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> = ...) // dev.kord.rest.json.request/MessageCreateRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.EmbedRequest>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.AllowedMentions>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordMessageReference>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordComponent>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.AttachmentRequest>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageFlags>){}[0]

    final val allowedMentions // dev.kord.rest.json.request/MessageCreateRequest.allowedMentions|{}allowedMentions[0]
        final fun <get-allowedMentions>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions> // dev.kord.rest.json.request/MessageCreateRequest.allowedMentions.<get-allowedMentions>|<get-allowedMentions>(){}[0]
    final val attachments // dev.kord.rest.json.request/MessageCreateRequest.attachments|{}attachments[0]
        final fun <get-attachments>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>> // dev.kord.rest.json.request/MessageCreateRequest.attachments.<get-attachments>|<get-attachments>(){}[0]
    final val components // dev.kord.rest.json.request/MessageCreateRequest.components|{}components[0]
        final fun <get-components>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> // dev.kord.rest.json.request/MessageCreateRequest.components.<get-components>|<get-components>(){}[0]
    final val content // dev.kord.rest.json.request/MessageCreateRequest.content|{}content[0]
        final fun <get-content>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/MessageCreateRequest.content.<get-content>|<get-content>(){}[0]
    final val embeds // dev.kord.rest.json.request/MessageCreateRequest.embeds|{}embeds[0]
        final fun <get-embeds>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>> // dev.kord.rest.json.request/MessageCreateRequest.embeds.<get-embeds>|<get-embeds>(){}[0]
    final val flags // dev.kord.rest.json.request/MessageCreateRequest.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> // dev.kord.rest.json.request/MessageCreateRequest.flags.<get-flags>|<get-flags>(){}[0]
    final val messageReference // dev.kord.rest.json.request/MessageCreateRequest.messageReference|{}messageReference[0]
        final fun <get-messageReference>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessageReference> // dev.kord.rest.json.request/MessageCreateRequest.messageReference.<get-messageReference>|<get-messageReference>(){}[0]
    final val nonce // dev.kord.rest.json.request/MessageCreateRequest.nonce|{}nonce[0]
        final fun <get-nonce>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/MessageCreateRequest.nonce.<get-nonce>|<get-nonce>(){}[0]
    final val stickerIds // dev.kord.rest.json.request/MessageCreateRequest.stickerIds|{}stickerIds[0]
        final fun <get-stickerIds>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.rest.json.request/MessageCreateRequest.stickerIds.<get-stickerIds>|<get-stickerIds>(){}[0]
    final val tts // dev.kord.rest.json.request/MessageCreateRequest.tts|{}tts[0]
        final fun <get-tts>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/MessageCreateRequest.tts.<get-tts>|<get-tts>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/MessageCreateRequest.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> // dev.kord.rest.json.request/MessageCreateRequest.component10|component10(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/MessageCreateRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/MessageCreateRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>> // dev.kord.rest.json.request/MessageCreateRequest.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions> // dev.kord.rest.json.request/MessageCreateRequest.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessageReference> // dev.kord.rest.json.request/MessageCreateRequest.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> // dev.kord.rest.json.request/MessageCreateRequest.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.rest.json.request/MessageCreateRequest.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>> // dev.kord.rest.json.request/MessageCreateRequest.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessageReference> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> = ...): dev.kord.rest.json.request/MessageCreateRequest // dev.kord.rest.json.request/MessageCreateRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.EmbedRequest>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.AllowedMentions>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordMessageReference>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordComponent>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.AttachmentRequest>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageFlags>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/MessageCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/MessageCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/MessageCreateRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/MessageCreateRequest> { // dev.kord.rest.json.request/MessageCreateRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/MessageCreateRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/MessageCreateRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/MessageCreateRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/MessageCreateRequest // dev.kord.rest.json.request/MessageCreateRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/MessageCreateRequest) // dev.kord.rest.json.request/MessageCreateRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.MessageCreateRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/MessageCreateRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/MessageCreateRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/MessageCreateRequest> // dev.kord.rest.json.request/MessageCreateRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/MessageEditPatchRequest { // dev.kord.rest.json.request/MessageEditPatchRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>?> = ...) // dev.kord.rest.json.request/MessageEditPatchRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.EmbedRequest>?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageFlags?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.AllowedMentions?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordComponent>?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.AttachmentRequest>?>){}[0]

    final val allowedMentions // dev.kord.rest.json.request/MessageEditPatchRequest.allowedMentions|{}allowedMentions[0]
        final fun <get-allowedMentions>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions?> // dev.kord.rest.json.request/MessageEditPatchRequest.allowedMentions.<get-allowedMentions>|<get-allowedMentions>(){}[0]
    final val attachments // dev.kord.rest.json.request/MessageEditPatchRequest.attachments|{}attachments[0]
        final fun <get-attachments>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>?> // dev.kord.rest.json.request/MessageEditPatchRequest.attachments.<get-attachments>|<get-attachments>(){}[0]
    final val components // dev.kord.rest.json.request/MessageEditPatchRequest.components|{}components[0]
        final fun <get-components>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>?> // dev.kord.rest.json.request/MessageEditPatchRequest.components.<get-components>|<get-components>(){}[0]
    final val content // dev.kord.rest.json.request/MessageEditPatchRequest.content|{}content[0]
        final fun <get-content>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/MessageEditPatchRequest.content.<get-content>|<get-content>(){}[0]
    final val embeds // dev.kord.rest.json.request/MessageEditPatchRequest.embeds|{}embeds[0]
        final fun <get-embeds>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>?> // dev.kord.rest.json.request/MessageEditPatchRequest.embeds.<get-embeds>|<get-embeds>(){}[0]
    final val flags // dev.kord.rest.json.request/MessageEditPatchRequest.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags?> // dev.kord.rest.json.request/MessageEditPatchRequest.flags.<get-flags>|<get-flags>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/MessageEditPatchRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>?> // dev.kord.rest.json.request/MessageEditPatchRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags?> // dev.kord.rest.json.request/MessageEditPatchRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions?> // dev.kord.rest.json.request/MessageEditPatchRequest.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>?> // dev.kord.rest.json.request/MessageEditPatchRequest.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>?> // dev.kord.rest.json.request/MessageEditPatchRequest.component6|component6(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>?> = ...): dev.kord.rest.json.request/MessageEditPatchRequest // dev.kord.rest.json.request/MessageEditPatchRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.EmbedRequest>?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageFlags?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.AllowedMentions?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordComponent>?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.AttachmentRequest>?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/MessageEditPatchRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/MessageEditPatchRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/MessageEditPatchRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/MessageEditPatchRequest> { // dev.kord.rest.json.request/MessageEditPatchRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/MessageEditPatchRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/MessageEditPatchRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/MessageEditPatchRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/MessageEditPatchRequest // dev.kord.rest.json.request/MessageEditPatchRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/MessageEditPatchRequest) // dev.kord.rest.json.request/MessageEditPatchRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.MessageEditPatchRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/MessageEditPatchRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/MessageEditPatchRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/MessageEditPatchRequest> // dev.kord.rest.json.request/MessageEditPatchRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/ModalResponseCreateRequest { // dev.kord.rest.json.request/ModalResponseCreateRequest|null[0]
    constructor <init>(dev.kord.common.entity/InteractionResponseType, dev.kord.common.entity/DiscordModal) // dev.kord.rest.json.request/ModalResponseCreateRequest.<init>|<init>(dev.kord.common.entity.InteractionResponseType;dev.kord.common.entity.DiscordModal){}[0]

    final val data // dev.kord.rest.json.request/ModalResponseCreateRequest.data|{}data[0]
        final fun <get-data>(): dev.kord.common.entity/DiscordModal // dev.kord.rest.json.request/ModalResponseCreateRequest.data.<get-data>|<get-data>(){}[0]
    final val type // dev.kord.rest.json.request/ModalResponseCreateRequest.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/InteractionResponseType // dev.kord.rest.json.request/ModalResponseCreateRequest.type.<get-type>|<get-type>(){}[0]

    final fun component1(): dev.kord.common.entity/InteractionResponseType // dev.kord.rest.json.request/ModalResponseCreateRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/DiscordModal // dev.kord.rest.json.request/ModalResponseCreateRequest.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/InteractionResponseType = ..., dev.kord.common.entity/DiscordModal = ...): dev.kord.rest.json.request/ModalResponseCreateRequest // dev.kord.rest.json.request/ModalResponseCreateRequest.copy|copy(dev.kord.common.entity.InteractionResponseType;dev.kord.common.entity.DiscordModal){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/ModalResponseCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/ModalResponseCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/ModalResponseCreateRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/ModalResponseCreateRequest> { // dev.kord.rest.json.request/ModalResponseCreateRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/ModalResponseCreateRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/ModalResponseCreateRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/ModalResponseCreateRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/ModalResponseCreateRequest // dev.kord.rest.json.request/ModalResponseCreateRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/ModalResponseCreateRequest) // dev.kord.rest.json.request/ModalResponseCreateRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.ModalResponseCreateRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/ModalResponseCreateRequest.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/ModalResponseCreateRequest> // dev.kord.rest.json.request/ModalResponseCreateRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/MultiPartWebhookExecuteRequest { // dev.kord.rest.json.request/MultiPartWebhookExecuteRequest|null[0]
    constructor <init>(dev.kord.rest.json.request/WebhookExecuteRequest, kotlin.collections/List<dev.kord.rest/NamedFile> = ...) // dev.kord.rest.json.request/MultiPartWebhookExecuteRequest.<init>|<init>(dev.kord.rest.json.request.WebhookExecuteRequest;kotlin.collections.List<dev.kord.rest.NamedFile>){}[0]

    final val files // dev.kord.rest.json.request/MultiPartWebhookExecuteRequest.files|{}files[0]
        final fun <get-files>(): kotlin.collections/List<dev.kord.rest/NamedFile> // dev.kord.rest.json.request/MultiPartWebhookExecuteRequest.files.<get-files>|<get-files>(){}[0]
    final val request // dev.kord.rest.json.request/MultiPartWebhookExecuteRequest.request|{}request[0]
        final fun <get-request>(): dev.kord.rest.json.request/WebhookExecuteRequest // dev.kord.rest.json.request/MultiPartWebhookExecuteRequest.request.<get-request>|<get-request>(){}[0]

    final fun component1(): dev.kord.rest.json.request/WebhookExecuteRequest // dev.kord.rest.json.request/MultiPartWebhookExecuteRequest.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<dev.kord.rest/NamedFile> // dev.kord.rest.json.request/MultiPartWebhookExecuteRequest.component2|component2(){}[0]
    final fun copy(dev.kord.rest.json.request/WebhookExecuteRequest = ..., kotlin.collections/List<dev.kord.rest/NamedFile> = ...): dev.kord.rest.json.request/MultiPartWebhookExecuteRequest // dev.kord.rest.json.request/MultiPartWebhookExecuteRequest.copy|copy(dev.kord.rest.json.request.WebhookExecuteRequest;kotlin.collections.List<dev.kord.rest.NamedFile>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/MultiPartWebhookExecuteRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/MultiPartWebhookExecuteRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/MultiPartWebhookExecuteRequest.toString|toString(){}[0]
}

final class dev.kord.rest.json.request/MultipartFollowupMessageCreateRequest { // dev.kord.rest.json.request/MultipartFollowupMessageCreateRequest|null[0]
    constructor <init>(dev.kord.rest.json.request/FollowupMessageCreateRequest, kotlin.collections/List<dev.kord.rest/NamedFile> = ...) // dev.kord.rest.json.request/MultipartFollowupMessageCreateRequest.<init>|<init>(dev.kord.rest.json.request.FollowupMessageCreateRequest;kotlin.collections.List<dev.kord.rest.NamedFile>){}[0]

    final val files // dev.kord.rest.json.request/MultipartFollowupMessageCreateRequest.files|{}files[0]
        final fun <get-files>(): kotlin.collections/List<dev.kord.rest/NamedFile> // dev.kord.rest.json.request/MultipartFollowupMessageCreateRequest.files.<get-files>|<get-files>(){}[0]
    final val request // dev.kord.rest.json.request/MultipartFollowupMessageCreateRequest.request|{}request[0]
        final fun <get-request>(): dev.kord.rest.json.request/FollowupMessageCreateRequest // dev.kord.rest.json.request/MultipartFollowupMessageCreateRequest.request.<get-request>|<get-request>(){}[0]

    final fun component1(): dev.kord.rest.json.request/FollowupMessageCreateRequest // dev.kord.rest.json.request/MultipartFollowupMessageCreateRequest.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<dev.kord.rest/NamedFile> // dev.kord.rest.json.request/MultipartFollowupMessageCreateRequest.component2|component2(){}[0]
    final fun copy(dev.kord.rest.json.request/FollowupMessageCreateRequest = ..., kotlin.collections/List<dev.kord.rest/NamedFile> = ...): dev.kord.rest.json.request/MultipartFollowupMessageCreateRequest // dev.kord.rest.json.request/MultipartFollowupMessageCreateRequest.copy|copy(dev.kord.rest.json.request.FollowupMessageCreateRequest;kotlin.collections.List<dev.kord.rest.NamedFile>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/MultipartFollowupMessageCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/MultipartFollowupMessageCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/MultipartFollowupMessageCreateRequest.toString|toString(){}[0]
}

final class dev.kord.rest.json.request/MultipartFollowupMessageModifyRequest { // dev.kord.rest.json.request/MultipartFollowupMessageModifyRequest|null[0]
    constructor <init>(dev.kord.rest.json.request/FollowupMessageModifyRequest, kotlin.collections/List<dev.kord.rest/NamedFile> = ...) // dev.kord.rest.json.request/MultipartFollowupMessageModifyRequest.<init>|<init>(dev.kord.rest.json.request.FollowupMessageModifyRequest;kotlin.collections.List<dev.kord.rest.NamedFile>){}[0]

    final val files // dev.kord.rest.json.request/MultipartFollowupMessageModifyRequest.files|{}files[0]
        final fun <get-files>(): kotlin.collections/List<dev.kord.rest/NamedFile> // dev.kord.rest.json.request/MultipartFollowupMessageModifyRequest.files.<get-files>|<get-files>(){}[0]
    final val request // dev.kord.rest.json.request/MultipartFollowupMessageModifyRequest.request|{}request[0]
        final fun <get-request>(): dev.kord.rest.json.request/FollowupMessageModifyRequest // dev.kord.rest.json.request/MultipartFollowupMessageModifyRequest.request.<get-request>|<get-request>(){}[0]

    final fun component1(): dev.kord.rest.json.request/FollowupMessageModifyRequest // dev.kord.rest.json.request/MultipartFollowupMessageModifyRequest.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<dev.kord.rest/NamedFile> // dev.kord.rest.json.request/MultipartFollowupMessageModifyRequest.component2|component2(){}[0]
    final fun copy(dev.kord.rest.json.request/FollowupMessageModifyRequest = ..., kotlin.collections/List<dev.kord.rest/NamedFile> = ...): dev.kord.rest.json.request/MultipartFollowupMessageModifyRequest // dev.kord.rest.json.request/MultipartFollowupMessageModifyRequest.copy|copy(dev.kord.rest.json.request.FollowupMessageModifyRequest;kotlin.collections.List<dev.kord.rest.NamedFile>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/MultipartFollowupMessageModifyRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/MultipartFollowupMessageModifyRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/MultipartFollowupMessageModifyRequest.toString|toString(){}[0]
}

final class dev.kord.rest.json.request/MultipartForumThreadMessageCreateRequest { // dev.kord.rest.json.request/MultipartForumThreadMessageCreateRequest|null[0]
    constructor <init>(dev.kord.rest.json.request/ForumThreadMessageRequest, kotlin.collections/List<dev.kord.rest/NamedFile> = ...) // dev.kord.rest.json.request/MultipartForumThreadMessageCreateRequest.<init>|<init>(dev.kord.rest.json.request.ForumThreadMessageRequest;kotlin.collections.List<dev.kord.rest.NamedFile>){}[0]

    final val files // dev.kord.rest.json.request/MultipartForumThreadMessageCreateRequest.files|{}files[0]
        final fun <get-files>(): kotlin.collections/List<dev.kord.rest/NamedFile> // dev.kord.rest.json.request/MultipartForumThreadMessageCreateRequest.files.<get-files>|<get-files>(){}[0]
    final val request // dev.kord.rest.json.request/MultipartForumThreadMessageCreateRequest.request|{}request[0]
        final fun <get-request>(): dev.kord.rest.json.request/ForumThreadMessageRequest // dev.kord.rest.json.request/MultipartForumThreadMessageCreateRequest.request.<get-request>|<get-request>(){}[0]

    final fun component1(): dev.kord.rest.json.request/ForumThreadMessageRequest // dev.kord.rest.json.request/MultipartForumThreadMessageCreateRequest.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<dev.kord.rest/NamedFile> // dev.kord.rest.json.request/MultipartForumThreadMessageCreateRequest.component2|component2(){}[0]
    final fun copy(dev.kord.rest.json.request/ForumThreadMessageRequest = ..., kotlin.collections/List<dev.kord.rest/NamedFile> = ...): dev.kord.rest.json.request/MultipartForumThreadMessageCreateRequest // dev.kord.rest.json.request/MultipartForumThreadMessageCreateRequest.copy|copy(dev.kord.rest.json.request.ForumThreadMessageRequest;kotlin.collections.List<dev.kord.rest.NamedFile>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/MultipartForumThreadMessageCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/MultipartForumThreadMessageCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/MultipartForumThreadMessageCreateRequest.toString|toString(){}[0]
}

final class dev.kord.rest.json.request/MultipartGuildStickerCreateRequest { // dev.kord.rest.json.request/MultipartGuildStickerCreateRequest|null[0]
    constructor <init>(dev.kord.rest.json.request/GuildStickerCreateRequest, dev.kord.rest/NamedFile) // dev.kord.rest.json.request/MultipartGuildStickerCreateRequest.<init>|<init>(dev.kord.rest.json.request.GuildStickerCreateRequest;dev.kord.rest.NamedFile){}[0]

    final val file // dev.kord.rest.json.request/MultipartGuildStickerCreateRequest.file|{}file[0]
        final fun <get-file>(): dev.kord.rest/NamedFile // dev.kord.rest.json.request/MultipartGuildStickerCreateRequest.file.<get-file>|<get-file>(){}[0]
    final val request // dev.kord.rest.json.request/MultipartGuildStickerCreateRequest.request|{}request[0]
        final fun <get-request>(): dev.kord.rest.json.request/GuildStickerCreateRequest // dev.kord.rest.json.request/MultipartGuildStickerCreateRequest.request.<get-request>|<get-request>(){}[0]

    final fun component1(): dev.kord.rest.json.request/GuildStickerCreateRequest // dev.kord.rest.json.request/MultipartGuildStickerCreateRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.rest/NamedFile // dev.kord.rest.json.request/MultipartGuildStickerCreateRequest.component2|component2(){}[0]
    final fun copy(dev.kord.rest.json.request/GuildStickerCreateRequest = ..., dev.kord.rest/NamedFile = ...): dev.kord.rest.json.request/MultipartGuildStickerCreateRequest // dev.kord.rest.json.request/MultipartGuildStickerCreateRequest.copy|copy(dev.kord.rest.json.request.GuildStickerCreateRequest;dev.kord.rest.NamedFile){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/MultipartGuildStickerCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/MultipartGuildStickerCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/MultipartGuildStickerCreateRequest.toString|toString(){}[0]
}

final class dev.kord.rest.json.request/MultipartInteractionResponseCreateRequest { // dev.kord.rest.json.request/MultipartInteractionResponseCreateRequest|null[0]
    constructor <init>(dev.kord.rest.json.request/InteractionResponseCreateRequest, kotlin.collections/List<dev.kord.rest/NamedFile> = ...) // dev.kord.rest.json.request/MultipartInteractionResponseCreateRequest.<init>|<init>(dev.kord.rest.json.request.InteractionResponseCreateRequest;kotlin.collections.List<dev.kord.rest.NamedFile>){}[0]

    final val files // dev.kord.rest.json.request/MultipartInteractionResponseCreateRequest.files|{}files[0]
        final fun <get-files>(): kotlin.collections/List<dev.kord.rest/NamedFile> // dev.kord.rest.json.request/MultipartInteractionResponseCreateRequest.files.<get-files>|<get-files>(){}[0]
    final val request // dev.kord.rest.json.request/MultipartInteractionResponseCreateRequest.request|{}request[0]
        final fun <get-request>(): dev.kord.rest.json.request/InteractionResponseCreateRequest // dev.kord.rest.json.request/MultipartInteractionResponseCreateRequest.request.<get-request>|<get-request>(){}[0]

    final fun component1(): dev.kord.rest.json.request/InteractionResponseCreateRequest // dev.kord.rest.json.request/MultipartInteractionResponseCreateRequest.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<dev.kord.rest/NamedFile> // dev.kord.rest.json.request/MultipartInteractionResponseCreateRequest.component2|component2(){}[0]
    final fun copy(dev.kord.rest.json.request/InteractionResponseCreateRequest = ..., kotlin.collections/List<dev.kord.rest/NamedFile> = ...): dev.kord.rest.json.request/MultipartInteractionResponseCreateRequest // dev.kord.rest.json.request/MultipartInteractionResponseCreateRequest.copy|copy(dev.kord.rest.json.request.InteractionResponseCreateRequest;kotlin.collections.List<dev.kord.rest.NamedFile>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/MultipartInteractionResponseCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/MultipartInteractionResponseCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/MultipartInteractionResponseCreateRequest.toString|toString(){}[0]
}

final class dev.kord.rest.json.request/MultipartInteractionResponseModifyRequest { // dev.kord.rest.json.request/MultipartInteractionResponseModifyRequest|null[0]
    constructor <init>(dev.kord.rest.json.request/InteractionResponseModifyRequest, kotlin.collections/List<dev.kord.rest/NamedFile> = ...) // dev.kord.rest.json.request/MultipartInteractionResponseModifyRequest.<init>|<init>(dev.kord.rest.json.request.InteractionResponseModifyRequest;kotlin.collections.List<dev.kord.rest.NamedFile>){}[0]

    final val files // dev.kord.rest.json.request/MultipartInteractionResponseModifyRequest.files|{}files[0]
        final fun <get-files>(): kotlin.collections/List<dev.kord.rest/NamedFile> // dev.kord.rest.json.request/MultipartInteractionResponseModifyRequest.files.<get-files>|<get-files>(){}[0]
    final val request // dev.kord.rest.json.request/MultipartInteractionResponseModifyRequest.request|{}request[0]
        final fun <get-request>(): dev.kord.rest.json.request/InteractionResponseModifyRequest // dev.kord.rest.json.request/MultipartInteractionResponseModifyRequest.request.<get-request>|<get-request>(){}[0]

    final fun component1(): dev.kord.rest.json.request/InteractionResponseModifyRequest // dev.kord.rest.json.request/MultipartInteractionResponseModifyRequest.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<dev.kord.rest/NamedFile> // dev.kord.rest.json.request/MultipartInteractionResponseModifyRequest.component2|component2(){}[0]
    final fun copy(dev.kord.rest.json.request/InteractionResponseModifyRequest = ..., kotlin.collections/List<dev.kord.rest/NamedFile> = ...): dev.kord.rest.json.request/MultipartInteractionResponseModifyRequest // dev.kord.rest.json.request/MultipartInteractionResponseModifyRequest.copy|copy(dev.kord.rest.json.request.InteractionResponseModifyRequest;kotlin.collections.List<dev.kord.rest.NamedFile>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/MultipartInteractionResponseModifyRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/MultipartInteractionResponseModifyRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/MultipartInteractionResponseModifyRequest.toString|toString(){}[0]
}

final class dev.kord.rest.json.request/MultipartMessageCreateRequest { // dev.kord.rest.json.request/MultipartMessageCreateRequest|null[0]
    constructor <init>(dev.kord.rest.json.request/MessageCreateRequest, kotlin.collections/List<dev.kord.rest/NamedFile> = ...) // dev.kord.rest.json.request/MultipartMessageCreateRequest.<init>|<init>(dev.kord.rest.json.request.MessageCreateRequest;kotlin.collections.List<dev.kord.rest.NamedFile>){}[0]

    final val files // dev.kord.rest.json.request/MultipartMessageCreateRequest.files|{}files[0]
        final fun <get-files>(): kotlin.collections/List<dev.kord.rest/NamedFile> // dev.kord.rest.json.request/MultipartMessageCreateRequest.files.<get-files>|<get-files>(){}[0]
    final val request // dev.kord.rest.json.request/MultipartMessageCreateRequest.request|{}request[0]
        final fun <get-request>(): dev.kord.rest.json.request/MessageCreateRequest // dev.kord.rest.json.request/MultipartMessageCreateRequest.request.<get-request>|<get-request>(){}[0]

    final fun component1(): dev.kord.rest.json.request/MessageCreateRequest // dev.kord.rest.json.request/MultipartMessageCreateRequest.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<dev.kord.rest/NamedFile> // dev.kord.rest.json.request/MultipartMessageCreateRequest.component2|component2(){}[0]
    final fun copy(dev.kord.rest.json.request/MessageCreateRequest = ..., kotlin.collections/List<dev.kord.rest/NamedFile> = ...): dev.kord.rest.json.request/MultipartMessageCreateRequest // dev.kord.rest.json.request/MultipartMessageCreateRequest.copy|copy(dev.kord.rest.json.request.MessageCreateRequest;kotlin.collections.List<dev.kord.rest.NamedFile>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/MultipartMessageCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/MultipartMessageCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/MultipartMessageCreateRequest.toString|toString(){}[0]
}

final class dev.kord.rest.json.request/MultipartMessagePatchRequest { // dev.kord.rest.json.request/MultipartMessagePatchRequest|null[0]
    constructor <init>(dev.kord.rest.json.request/MessageEditPatchRequest, kotlin.collections/List<dev.kord.rest/NamedFile> = ...) // dev.kord.rest.json.request/MultipartMessagePatchRequest.<init>|<init>(dev.kord.rest.json.request.MessageEditPatchRequest;kotlin.collections.List<dev.kord.rest.NamedFile>){}[0]

    final val files // dev.kord.rest.json.request/MultipartMessagePatchRequest.files|{}files[0]
        final fun <get-files>(): kotlin.collections/List<dev.kord.rest/NamedFile> // dev.kord.rest.json.request/MultipartMessagePatchRequest.files.<get-files>|<get-files>(){}[0]
    final val requests // dev.kord.rest.json.request/MultipartMessagePatchRequest.requests|{}requests[0]
        final fun <get-requests>(): dev.kord.rest.json.request/MessageEditPatchRequest // dev.kord.rest.json.request/MultipartMessagePatchRequest.requests.<get-requests>|<get-requests>(){}[0]

    final fun component1(): dev.kord.rest.json.request/MessageEditPatchRequest // dev.kord.rest.json.request/MultipartMessagePatchRequest.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<dev.kord.rest/NamedFile> // dev.kord.rest.json.request/MultipartMessagePatchRequest.component2|component2(){}[0]
    final fun copy(dev.kord.rest.json.request/MessageEditPatchRequest = ..., kotlin.collections/List<dev.kord.rest/NamedFile> = ...): dev.kord.rest.json.request/MultipartMessagePatchRequest // dev.kord.rest.json.request/MultipartMessagePatchRequest.copy|copy(dev.kord.rest.json.request.MessageEditPatchRequest;kotlin.collections.List<dev.kord.rest.NamedFile>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/MultipartMessagePatchRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/MultipartMessagePatchRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/MultipartMessagePatchRequest.toString|toString(){}[0]
}

final class dev.kord.rest.json.request/MultipartStartThreadRequest { // dev.kord.rest.json.request/MultipartStartThreadRequest|null[0]
    constructor <init>(dev.kord.rest.json.request/StartThreadRequest, kotlin.collections/List<dev.kord.rest/NamedFile> = ...) // dev.kord.rest.json.request/MultipartStartThreadRequest.<init>|<init>(dev.kord.rest.json.request.StartThreadRequest;kotlin.collections.List<dev.kord.rest.NamedFile>){}[0]

    final val files // dev.kord.rest.json.request/MultipartStartThreadRequest.files|{}files[0]
        final fun <get-files>(): kotlin.collections/List<dev.kord.rest/NamedFile> // dev.kord.rest.json.request/MultipartStartThreadRequest.files.<get-files>|<get-files>(){}[0]
    final val request // dev.kord.rest.json.request/MultipartStartThreadRequest.request|{}request[0]
        final fun <get-request>(): dev.kord.rest.json.request/StartThreadRequest // dev.kord.rest.json.request/MultipartStartThreadRequest.request.<get-request>|<get-request>(){}[0]

    final fun component1(): dev.kord.rest.json.request/StartThreadRequest // dev.kord.rest.json.request/MultipartStartThreadRequest.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<dev.kord.rest/NamedFile> // dev.kord.rest.json.request/MultipartStartThreadRequest.component2|component2(){}[0]
    final fun copy(dev.kord.rest.json.request/StartThreadRequest = ..., kotlin.collections/List<dev.kord.rest/NamedFile> = ...): dev.kord.rest.json.request/MultipartStartThreadRequest // dev.kord.rest.json.request/MultipartStartThreadRequest.copy|copy(dev.kord.rest.json.request.StartThreadRequest;kotlin.collections.List<dev.kord.rest.NamedFile>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/MultipartStartThreadRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/MultipartStartThreadRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/MultipartStartThreadRequest.toString|toString(){}[0]
}

final class dev.kord.rest.json.request/MultipartWebhookEditMessageRequest { // dev.kord.rest.json.request/MultipartWebhookEditMessageRequest|null[0]
    constructor <init>(dev.kord.rest.json.request/WebhookEditMessageRequest, kotlin.collections/List<dev.kord.rest/NamedFile> = ...) // dev.kord.rest.json.request/MultipartWebhookEditMessageRequest.<init>|<init>(dev.kord.rest.json.request.WebhookEditMessageRequest;kotlin.collections.List<dev.kord.rest.NamedFile>){}[0]

    final val files // dev.kord.rest.json.request/MultipartWebhookEditMessageRequest.files|{}files[0]
        final fun <get-files>(): kotlin.collections/List<dev.kord.rest/NamedFile> // dev.kord.rest.json.request/MultipartWebhookEditMessageRequest.files.<get-files>|<get-files>(){}[0]
    final val request // dev.kord.rest.json.request/MultipartWebhookEditMessageRequest.request|{}request[0]
        final fun <get-request>(): dev.kord.rest.json.request/WebhookEditMessageRequest // dev.kord.rest.json.request/MultipartWebhookEditMessageRequest.request.<get-request>|<get-request>(){}[0]

    final fun component1(): dev.kord.rest.json.request/WebhookEditMessageRequest // dev.kord.rest.json.request/MultipartWebhookEditMessageRequest.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<dev.kord.rest/NamedFile> // dev.kord.rest.json.request/MultipartWebhookEditMessageRequest.component2|component2(){}[0]
    final fun copy(dev.kord.rest.json.request/WebhookEditMessageRequest = ..., kotlin.collections/List<dev.kord.rest/NamedFile> = ...): dev.kord.rest.json.request/MultipartWebhookEditMessageRequest // dev.kord.rest.json.request/MultipartWebhookEditMessageRequest.copy|copy(dev.kord.rest.json.request.WebhookEditMessageRequest;kotlin.collections.List<dev.kord.rest.NamedFile>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/MultipartWebhookEditMessageRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/MultipartWebhookEditMessageRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/MultipartWebhookEditMessageRequest.toString|toString(){}[0]
}

final class dev.kord.rest.json.request/OnboardingPromptOptionRequest { // dev.kord.rest.json.request/OnboardingPromptOptionRequest|null[0]
    constructor <init>(kotlin.collections/List<dev.kord.common.entity/Snowflake>, kotlin.collections/List<dev.kord.common.entity/Snowflake>, kotlin/String, kotlin/String?) // dev.kord.rest.json.request/OnboardingPromptOptionRequest.<init>|<init>(kotlin.collections.List<dev.kord.common.entity.Snowflake>;kotlin.collections.List<dev.kord.common.entity.Snowflake>;kotlin.String;kotlin.String?){}[0]

    final val channelIds // dev.kord.rest.json.request/OnboardingPromptOptionRequest.channelIds|{}channelIds[0]
        final fun <get-channelIds>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.rest.json.request/OnboardingPromptOptionRequest.channelIds.<get-channelIds>|<get-channelIds>(){}[0]
    final val description // dev.kord.rest.json.request/OnboardingPromptOptionRequest.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.rest.json.request/OnboardingPromptOptionRequest.description.<get-description>|<get-description>(){}[0]
    final val roleIds // dev.kord.rest.json.request/OnboardingPromptOptionRequest.roleIds|{}roleIds[0]
        final fun <get-roleIds>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.rest.json.request/OnboardingPromptOptionRequest.roleIds.<get-roleIds>|<get-roleIds>(){}[0]
    final val title // dev.kord.rest.json.request/OnboardingPromptOptionRequest.title|{}title[0]
        final fun <get-title>(): kotlin/String // dev.kord.rest.json.request/OnboardingPromptOptionRequest.title.<get-title>|<get-title>(){}[0]

    final fun component1(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.rest.json.request/OnboardingPromptOptionRequest.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.rest.json.request/OnboardingPromptOptionRequest.component2|component2(){}[0]
    final fun component3(): kotlin/String // dev.kord.rest.json.request/OnboardingPromptOptionRequest.component3|component3(){}[0]
    final fun component4(): kotlin/String? // dev.kord.rest.json.request/OnboardingPromptOptionRequest.component4|component4(){}[0]
    final fun copy(kotlin.collections/List<dev.kord.common.entity/Snowflake> = ..., kotlin.collections/List<dev.kord.common.entity/Snowflake> = ..., kotlin/String = ..., kotlin/String? = ...): dev.kord.rest.json.request/OnboardingPromptOptionRequest // dev.kord.rest.json.request/OnboardingPromptOptionRequest.copy|copy(kotlin.collections.List<dev.kord.common.entity.Snowflake>;kotlin.collections.List<dev.kord.common.entity.Snowflake>;kotlin.String;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/OnboardingPromptOptionRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/OnboardingPromptOptionRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/OnboardingPromptOptionRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/OnboardingPromptOptionRequest> { // dev.kord.rest.json.request/OnboardingPromptOptionRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/OnboardingPromptOptionRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/OnboardingPromptOptionRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/OnboardingPromptOptionRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/OnboardingPromptOptionRequest // dev.kord.rest.json.request/OnboardingPromptOptionRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/OnboardingPromptOptionRequest) // dev.kord.rest.json.request/OnboardingPromptOptionRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.OnboardingPromptOptionRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/OnboardingPromptOptionRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/OnboardingPromptOptionRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/OnboardingPromptOptionRequest> // dev.kord.rest.json.request/OnboardingPromptOptionRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/OnboardingPromptRequest { // dev.kord.rest.json.request/OnboardingPromptRequest|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/OnboardingPromptType, kotlin.collections/List<dev.kord.rest.json.request/OnboardingPromptOptionRequest>, kotlin/String, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean) // dev.kord.rest.json.request/OnboardingPromptRequest.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.OnboardingPromptType;kotlin.collections.List<dev.kord.rest.json.request.OnboardingPromptOptionRequest>;kotlin.String;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean){}[0]

    final val id // dev.kord.rest.json.request/OnboardingPromptRequest.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.rest.json.request/OnboardingPromptRequest.id.<get-id>|<get-id>(){}[0]
    final val inOnboarding // dev.kord.rest.json.request/OnboardingPromptRequest.inOnboarding|{}inOnboarding[0]
        final fun <get-inOnboarding>(): kotlin/Boolean // dev.kord.rest.json.request/OnboardingPromptRequest.inOnboarding.<get-inOnboarding>|<get-inOnboarding>(){}[0]
    final val options // dev.kord.rest.json.request/OnboardingPromptRequest.options|{}options[0]
        final fun <get-options>(): kotlin.collections/List<dev.kord.rest.json.request/OnboardingPromptOptionRequest> // dev.kord.rest.json.request/OnboardingPromptRequest.options.<get-options>|<get-options>(){}[0]
    final val required // dev.kord.rest.json.request/OnboardingPromptRequest.required|{}required[0]
        final fun <get-required>(): kotlin/Boolean // dev.kord.rest.json.request/OnboardingPromptRequest.required.<get-required>|<get-required>(){}[0]
    final val singleSelect // dev.kord.rest.json.request/OnboardingPromptRequest.singleSelect|{}singleSelect[0]
        final fun <get-singleSelect>(): kotlin/Boolean // dev.kord.rest.json.request/OnboardingPromptRequest.singleSelect.<get-singleSelect>|<get-singleSelect>(){}[0]
    final val title // dev.kord.rest.json.request/OnboardingPromptRequest.title|{}title[0]
        final fun <get-title>(): kotlin/String // dev.kord.rest.json.request/OnboardingPromptRequest.title.<get-title>|<get-title>(){}[0]
    final val type // dev.kord.rest.json.request/OnboardingPromptRequest.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/OnboardingPromptType // dev.kord.rest.json.request/OnboardingPromptRequest.type.<get-type>|<get-type>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.rest.json.request/OnboardingPromptRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/OnboardingPromptType // dev.kord.rest.json.request/OnboardingPromptRequest.component2|component2(){}[0]
    final fun component3(): kotlin.collections/List<dev.kord.rest.json.request/OnboardingPromptOptionRequest> // dev.kord.rest.json.request/OnboardingPromptRequest.component3|component3(){}[0]
    final fun component4(): kotlin/String // dev.kord.rest.json.request/OnboardingPromptRequest.component4|component4(){}[0]
    final fun component5(): kotlin/Boolean // dev.kord.rest.json.request/OnboardingPromptRequest.component5|component5(){}[0]
    final fun component6(): kotlin/Boolean // dev.kord.rest.json.request/OnboardingPromptRequest.component6|component6(){}[0]
    final fun component7(): kotlin/Boolean // dev.kord.rest.json.request/OnboardingPromptRequest.component7|component7(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/OnboardingPromptType = ..., kotlin.collections/List<dev.kord.rest.json.request/OnboardingPromptOptionRequest> = ..., kotlin/String = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ...): dev.kord.rest.json.request/OnboardingPromptRequest // dev.kord.rest.json.request/OnboardingPromptRequest.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.OnboardingPromptType;kotlin.collections.List<dev.kord.rest.json.request.OnboardingPromptOptionRequest>;kotlin.String;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/OnboardingPromptRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/OnboardingPromptRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/OnboardingPromptRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/OnboardingPromptRequest> { // dev.kord.rest.json.request/OnboardingPromptRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/OnboardingPromptRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/OnboardingPromptRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/OnboardingPromptRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/OnboardingPromptRequest // dev.kord.rest.json.request/OnboardingPromptRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/OnboardingPromptRequest) // dev.kord.rest.json.request/OnboardingPromptRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.OnboardingPromptRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/OnboardingPromptRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/OnboardingPromptRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/OnboardingPromptRequest> // dev.kord.rest.json.request/OnboardingPromptRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/ScheduledEventModifyRequest { // dev.kord.rest.json.request/ScheduledEventModifyRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/OptionalSnowflake? = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/GuildScheduledEventEntityMetadata?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/GuildScheduledEventPrivacyLevel> = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ScheduledEntityType> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/GuildScheduledEventStatus> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...) // dev.kord.rest.json.request/ScheduledEventModifyRequest.<init>|<init>(dev.kord.common.entity.optional.OptionalSnowflake?;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.GuildScheduledEventEntityMetadata?>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.GuildScheduledEventPrivacyLevel>;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ScheduledEntityType>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.GuildScheduledEventStatus>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]

    final val channelId // dev.kord.rest.json.request/ScheduledEventModifyRequest.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.rest.json.request/ScheduledEventModifyRequest.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val description // dev.kord.rest.json.request/ScheduledEventModifyRequest.description|{}description[0]
        final fun <get-description>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/ScheduledEventModifyRequest.description.<get-description>|<get-description>(){}[0]
    final val entityMetadata // dev.kord.rest.json.request/ScheduledEventModifyRequest.entityMetadata|{}entityMetadata[0]
        final fun <get-entityMetadata>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/GuildScheduledEventEntityMetadata?> // dev.kord.rest.json.request/ScheduledEventModifyRequest.entityMetadata.<get-entityMetadata>|<get-entityMetadata>(){}[0]
    final val entityType // dev.kord.rest.json.request/ScheduledEventModifyRequest.entityType|{}entityType[0]
        final fun <get-entityType>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ScheduledEntityType> // dev.kord.rest.json.request/ScheduledEventModifyRequest.entityType.<get-entityType>|<get-entityType>(){}[0]
    final val image // dev.kord.rest.json.request/ScheduledEventModifyRequest.image|{}image[0]
        final fun <get-image>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/ScheduledEventModifyRequest.image.<get-image>|<get-image>(){}[0]
    final val name // dev.kord.rest.json.request/ScheduledEventModifyRequest.name|{}name[0]
        final fun <get-name>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/ScheduledEventModifyRequest.name.<get-name>|<get-name>(){}[0]
    final val privacyLevel // dev.kord.rest.json.request/ScheduledEventModifyRequest.privacyLevel|{}privacyLevel[0]
        final fun <get-privacyLevel>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/GuildScheduledEventPrivacyLevel> // dev.kord.rest.json.request/ScheduledEventModifyRequest.privacyLevel.<get-privacyLevel>|<get-privacyLevel>(){}[0]
    final val scheduledEndTime // dev.kord.rest.json.request/ScheduledEventModifyRequest.scheduledEndTime|{}scheduledEndTime[0]
        final fun <get-scheduledEndTime>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.rest.json.request/ScheduledEventModifyRequest.scheduledEndTime.<get-scheduledEndTime>|<get-scheduledEndTime>(){}[0]
    final val scheduledStartTime // dev.kord.rest.json.request/ScheduledEventModifyRequest.scheduledStartTime|{}scheduledStartTime[0]
        final fun <get-scheduledStartTime>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.rest.json.request/ScheduledEventModifyRequest.scheduledStartTime.<get-scheduledStartTime>|<get-scheduledStartTime>(){}[0]
    final val status // dev.kord.rest.json.request/ScheduledEventModifyRequest.status|{}status[0]
        final fun <get-status>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/GuildScheduledEventStatus> // dev.kord.rest.json.request/ScheduledEventModifyRequest.status.<get-status>|<get-status>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.rest.json.request/ScheduledEventModifyRequest.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/ScheduledEventModifyRequest.component10|component10(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/GuildScheduledEventEntityMetadata?> // dev.kord.rest.json.request/ScheduledEventModifyRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/ScheduledEventModifyRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/GuildScheduledEventPrivacyLevel> // dev.kord.rest.json.request/ScheduledEventModifyRequest.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.rest.json.request/ScheduledEventModifyRequest.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.rest.json.request/ScheduledEventModifyRequest.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/ScheduledEventModifyRequest.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ScheduledEntityType> // dev.kord.rest.json.request/ScheduledEventModifyRequest.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/GuildScheduledEventStatus> // dev.kord.rest.json.request/ScheduledEventModifyRequest.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity.optional/OptionalSnowflake? = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/GuildScheduledEventEntityMetadata?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/GuildScheduledEventPrivacyLevel> = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ScheduledEntityType> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/GuildScheduledEventStatus> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...): dev.kord.rest.json.request/ScheduledEventModifyRequest // dev.kord.rest.json.request/ScheduledEventModifyRequest.copy|copy(dev.kord.common.entity.optional.OptionalSnowflake?;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.GuildScheduledEventEntityMetadata?>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.GuildScheduledEventPrivacyLevel>;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ScheduledEntityType>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.GuildScheduledEventStatus>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/ScheduledEventModifyRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/ScheduledEventModifyRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/ScheduledEventModifyRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/ScheduledEventModifyRequest> { // dev.kord.rest.json.request/ScheduledEventModifyRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/ScheduledEventModifyRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/ScheduledEventModifyRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/ScheduledEventModifyRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/ScheduledEventModifyRequest // dev.kord.rest.json.request/ScheduledEventModifyRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/ScheduledEventModifyRequest) // dev.kord.rest.json.request/ScheduledEventModifyRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.ScheduledEventModifyRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/ScheduledEventModifyRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/ScheduledEventModifyRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/ScheduledEventModifyRequest> // dev.kord.rest.json.request/ScheduledEventModifyRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/StageInstanceCreateRequest { // dev.kord.rest.json.request/StageInstanceCreateRequest|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/StageInstancePrivacyLevel> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalSnowflake = ...) // dev.kord.rest.json.request/StageInstanceCreateRequest.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.StageInstancePrivacyLevel>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalSnowflake){}[0]

    final val channelId // dev.kord.rest.json.request/StageInstanceCreateRequest.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.rest.json.request/StageInstanceCreateRequest.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val guildScheduledEventId // dev.kord.rest.json.request/StageInstanceCreateRequest.guildScheduledEventId|{}guildScheduledEventId[0]
        final fun <get-guildScheduledEventId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.rest.json.request/StageInstanceCreateRequest.guildScheduledEventId.<get-guildScheduledEventId>|<get-guildScheduledEventId>(){}[0]
    final val privacyLevel // dev.kord.rest.json.request/StageInstanceCreateRequest.privacyLevel|{}privacyLevel[0]
        final fun <get-privacyLevel>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/StageInstancePrivacyLevel> // dev.kord.rest.json.request/StageInstanceCreateRequest.privacyLevel.<get-privacyLevel>|<get-privacyLevel>(){}[0]
    final val sendStartNotification // dev.kord.rest.json.request/StageInstanceCreateRequest.sendStartNotification|{}sendStartNotification[0]
        final fun <get-sendStartNotification>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/StageInstanceCreateRequest.sendStartNotification.<get-sendStartNotification>|<get-sendStartNotification>(){}[0]
    final val topic // dev.kord.rest.json.request/StageInstanceCreateRequest.topic|{}topic[0]
        final fun <get-topic>(): kotlin/String // dev.kord.rest.json.request/StageInstanceCreateRequest.topic.<get-topic>|<get-topic>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.rest.json.request/StageInstanceCreateRequest.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.rest.json.request/StageInstanceCreateRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/StageInstancePrivacyLevel> // dev.kord.rest.json.request/StageInstanceCreateRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/StageInstanceCreateRequest.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.rest.json.request/StageInstanceCreateRequest.component5|component5(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/StageInstancePrivacyLevel> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalSnowflake = ...): dev.kord.rest.json.request/StageInstanceCreateRequest // dev.kord.rest.json.request/StageInstanceCreateRequest.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.StageInstancePrivacyLevel>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalSnowflake){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/StageInstanceCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/StageInstanceCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/StageInstanceCreateRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/StageInstanceCreateRequest> { // dev.kord.rest.json.request/StageInstanceCreateRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/StageInstanceCreateRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/StageInstanceCreateRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/StageInstanceCreateRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/StageInstanceCreateRequest // dev.kord.rest.json.request/StageInstanceCreateRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/StageInstanceCreateRequest) // dev.kord.rest.json.request/StageInstanceCreateRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.StageInstanceCreateRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/StageInstanceCreateRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/StageInstanceCreateRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/StageInstanceCreateRequest> // dev.kord.rest.json.request/StageInstanceCreateRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/StageInstanceModifyRequest { // dev.kord.rest.json.request/StageInstanceModifyRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/StageInstancePrivacyLevel> = ...) // dev.kord.rest.json.request/StageInstanceModifyRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.StageInstancePrivacyLevel>){}[0]

    final val privacyLevel // dev.kord.rest.json.request/StageInstanceModifyRequest.privacyLevel|{}privacyLevel[0]
        final fun <get-privacyLevel>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/StageInstancePrivacyLevel> // dev.kord.rest.json.request/StageInstanceModifyRequest.privacyLevel.<get-privacyLevel>|<get-privacyLevel>(){}[0]
    final val topic // dev.kord.rest.json.request/StageInstanceModifyRequest.topic|{}topic[0]
        final fun <get-topic>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/StageInstanceModifyRequest.topic.<get-topic>|<get-topic>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/StageInstanceModifyRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/StageInstancePrivacyLevel> // dev.kord.rest.json.request/StageInstanceModifyRequest.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/StageInstancePrivacyLevel> = ...): dev.kord.rest.json.request/StageInstanceModifyRequest // dev.kord.rest.json.request/StageInstanceModifyRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.StageInstancePrivacyLevel>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/StageInstanceModifyRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/StageInstanceModifyRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/StageInstanceModifyRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/StageInstanceModifyRequest> { // dev.kord.rest.json.request/StageInstanceModifyRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/StageInstanceModifyRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/StageInstanceModifyRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/StageInstanceModifyRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/StageInstanceModifyRequest // dev.kord.rest.json.request/StageInstanceModifyRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/StageInstanceModifyRequest) // dev.kord.rest.json.request/StageInstanceModifyRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.StageInstanceModifyRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/StageInstanceModifyRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/StageInstanceModifyRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/StageInstanceModifyRequest> // dev.kord.rest.json.request/StageInstanceModifyRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/StartThreadRequest { // dev.kord.rest.json.request/StartThreadRequest|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ArchiveDuration> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ChannelType> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.rest.json.request/ForumThreadMessageRequest> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ...) // dev.kord.rest.json.request/StartThreadRequest.<init>|<init>(kotlin.String;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ArchiveDuration>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ChannelType>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.time.Duration?>;dev.kord.common.entity.optional.Optional<dev.kord.rest.json.request.ForumThreadMessageRequest>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>){}[0]

    final val appliedTags // dev.kord.rest.json.request/StartThreadRequest.appliedTags|{}appliedTags[0]
        final fun <get-appliedTags>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.rest.json.request/StartThreadRequest.appliedTags.<get-appliedTags>|<get-appliedTags>(){}[0]
    final val autoArchiveDuration // dev.kord.rest.json.request/StartThreadRequest.autoArchiveDuration|{}autoArchiveDuration[0]
        final fun <get-autoArchiveDuration>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ArchiveDuration> // dev.kord.rest.json.request/StartThreadRequest.autoArchiveDuration.<get-autoArchiveDuration>|<get-autoArchiveDuration>(){}[0]
    final val invitable // dev.kord.rest.json.request/StartThreadRequest.invitable|{}invitable[0]
        final fun <get-invitable>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/StartThreadRequest.invitable.<get-invitable>|<get-invitable>(){}[0]
    final val message // dev.kord.rest.json.request/StartThreadRequest.message|{}message[0]
        final fun <get-message>(): dev.kord.common.entity.optional/Optional<dev.kord.rest.json.request/ForumThreadMessageRequest> // dev.kord.rest.json.request/StartThreadRequest.message.<get-message>|<get-message>(){}[0]
    final val name // dev.kord.rest.json.request/StartThreadRequest.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.json.request/StartThreadRequest.name.<get-name>|<get-name>(){}[0]
    final val rateLimitPerUser // dev.kord.rest.json.request/StartThreadRequest.rateLimitPerUser|{}rateLimitPerUser[0]
        final fun <get-rateLimitPerUser>(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration?> // dev.kord.rest.json.request/StartThreadRequest.rateLimitPerUser.<get-rateLimitPerUser>|<get-rateLimitPerUser>(){}[0]
    final val type // dev.kord.rest.json.request/StartThreadRequest.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ChannelType> // dev.kord.rest.json.request/StartThreadRequest.type.<get-type>|<get-type>(){}[0]

    final fun component1(): kotlin/String // dev.kord.rest.json.request/StartThreadRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ArchiveDuration> // dev.kord.rest.json.request/StartThreadRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ChannelType> // dev.kord.rest.json.request/StartThreadRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/StartThreadRequest.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration?> // dev.kord.rest.json.request/StartThreadRequest.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<dev.kord.rest.json.request/ForumThreadMessageRequest> // dev.kord.rest.json.request/StartThreadRequest.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.rest.json.request/StartThreadRequest.component7|component7(){}[0]
    final fun copy(kotlin/String = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ArchiveDuration> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ChannelType> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.rest.json.request/ForumThreadMessageRequest> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ...): dev.kord.rest.json.request/StartThreadRequest // dev.kord.rest.json.request/StartThreadRequest.copy|copy(kotlin.String;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ArchiveDuration>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ChannelType>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.time.Duration?>;dev.kord.common.entity.optional.Optional<dev.kord.rest.json.request.ForumThreadMessageRequest>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/StartThreadRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/StartThreadRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/StartThreadRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/StartThreadRequest> { // dev.kord.rest.json.request/StartThreadRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/StartThreadRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/StartThreadRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/StartThreadRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/StartThreadRequest // dev.kord.rest.json.request/StartThreadRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/StartThreadRequest) // dev.kord.rest.json.request/StartThreadRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.StartThreadRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/StartThreadRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/StartThreadRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/StartThreadRequest> // dev.kord.rest.json.request/StartThreadRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/UserAddDMRequest { // dev.kord.rest.json.request/UserAddDMRequest|null[0]
    constructor <init>(kotlin/String, kotlin/String) // dev.kord.rest.json.request/UserAddDMRequest.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final val nick // dev.kord.rest.json.request/UserAddDMRequest.nick|{}nick[0]
        final fun <get-nick>(): kotlin/String // dev.kord.rest.json.request/UserAddDMRequest.nick.<get-nick>|<get-nick>(){}[0]
    final val token // dev.kord.rest.json.request/UserAddDMRequest.token|{}token[0]
        final fun <get-token>(): kotlin/String // dev.kord.rest.json.request/UserAddDMRequest.token.<get-token>|<get-token>(){}[0]

    final fun component1(): kotlin/String // dev.kord.rest.json.request/UserAddDMRequest.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.rest.json.request/UserAddDMRequest.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ...): dev.kord.rest.json.request/UserAddDMRequest // dev.kord.rest.json.request/UserAddDMRequest.copy|copy(kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/UserAddDMRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/UserAddDMRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/UserAddDMRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/UserAddDMRequest> { // dev.kord.rest.json.request/UserAddDMRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/UserAddDMRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/UserAddDMRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/UserAddDMRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/UserAddDMRequest // dev.kord.rest.json.request/UserAddDMRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/UserAddDMRequest) // dev.kord.rest.json.request/UserAddDMRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.UserAddDMRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/UserAddDMRequest.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/UserAddDMRequest> // dev.kord.rest.json.request/UserAddDMRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/VoiceStateModifyRequest { // dev.kord.rest.json.request/VoiceStateModifyRequest|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.rest.json.request/VoiceStateModifyRequest.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalBoolean){}[0]

    final val channelId // dev.kord.rest.json.request/VoiceStateModifyRequest.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.rest.json.request/VoiceStateModifyRequest.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val suppress // dev.kord.rest.json.request/VoiceStateModifyRequest.suppress|{}suppress[0]
        final fun <get-suppress>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/VoiceStateModifyRequest.suppress.<get-suppress>|<get-suppress>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.rest.json.request/VoiceStateModifyRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/VoiceStateModifyRequest.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.rest.json.request/VoiceStateModifyRequest // dev.kord.rest.json.request/VoiceStateModifyRequest.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalBoolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/VoiceStateModifyRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/VoiceStateModifyRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/VoiceStateModifyRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/VoiceStateModifyRequest> { // dev.kord.rest.json.request/VoiceStateModifyRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/VoiceStateModifyRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/VoiceStateModifyRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/VoiceStateModifyRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/VoiceStateModifyRequest // dev.kord.rest.json.request/VoiceStateModifyRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/VoiceStateModifyRequest) // dev.kord.rest.json.request/VoiceStateModifyRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.VoiceStateModifyRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/VoiceStateModifyRequest.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/VoiceStateModifyRequest> // dev.kord.rest.json.request/VoiceStateModifyRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/WebhookCreateRequest { // dev.kord.rest.json.request/WebhookCreateRequest|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity.optional/Optional<kotlin/String> = ...) // dev.kord.rest.json.request/WebhookCreateRequest.<init>|<init>(kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]

    final val avatar // dev.kord.rest.json.request/WebhookCreateRequest.avatar|{}avatar[0]
        final fun <get-avatar>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/WebhookCreateRequest.avatar.<get-avatar>|<get-avatar>(){}[0]
    final val name // dev.kord.rest.json.request/WebhookCreateRequest.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.json.request/WebhookCreateRequest.name.<get-name>|<get-name>(){}[0]

    final fun component1(): kotlin/String // dev.kord.rest.json.request/WebhookCreateRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/WebhookCreateRequest.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...): dev.kord.rest.json.request/WebhookCreateRequest // dev.kord.rest.json.request/WebhookCreateRequest.copy|copy(kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/WebhookCreateRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/WebhookCreateRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/WebhookCreateRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/WebhookCreateRequest> { // dev.kord.rest.json.request/WebhookCreateRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/WebhookCreateRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/WebhookCreateRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/WebhookCreateRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/WebhookCreateRequest // dev.kord.rest.json.request/WebhookCreateRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/WebhookCreateRequest) // dev.kord.rest.json.request/WebhookCreateRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.WebhookCreateRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/WebhookCreateRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/WebhookCreateRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/WebhookCreateRequest> // dev.kord.rest.json.request/WebhookCreateRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/WebhookEditMessageRequest { // dev.kord.rest.json.request/WebhookEditMessageRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags?> = ...) // dev.kord.rest.json.request/WebhookEditMessageRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.EmbedRequest>?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.AllowedMentions?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordComponent>?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.AttachmentRequest>?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageFlags?>){}[0]

    final val allowedMentions // dev.kord.rest.json.request/WebhookEditMessageRequest.allowedMentions|{}allowedMentions[0]
        final fun <get-allowedMentions>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions?> // dev.kord.rest.json.request/WebhookEditMessageRequest.allowedMentions.<get-allowedMentions>|<get-allowedMentions>(){}[0]
    final val attachments // dev.kord.rest.json.request/WebhookEditMessageRequest.attachments|{}attachments[0]
        final fun <get-attachments>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>?> // dev.kord.rest.json.request/WebhookEditMessageRequest.attachments.<get-attachments>|<get-attachments>(){}[0]
    final val components // dev.kord.rest.json.request/WebhookEditMessageRequest.components|{}components[0]
        final fun <get-components>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>?> // dev.kord.rest.json.request/WebhookEditMessageRequest.components.<get-components>|<get-components>(){}[0]
    final val content // dev.kord.rest.json.request/WebhookEditMessageRequest.content|{}content[0]
        final fun <get-content>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/WebhookEditMessageRequest.content.<get-content>|<get-content>(){}[0]
    final val embeds // dev.kord.rest.json.request/WebhookEditMessageRequest.embeds|{}embeds[0]
        final fun <get-embeds>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>?> // dev.kord.rest.json.request/WebhookEditMessageRequest.embeds.<get-embeds>|<get-embeds>(){}[0]
    final val flags // dev.kord.rest.json.request/WebhookEditMessageRequest.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags?> // dev.kord.rest.json.request/WebhookEditMessageRequest.flags.<get-flags>|<get-flags>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/WebhookEditMessageRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>?> // dev.kord.rest.json.request/WebhookEditMessageRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions?> // dev.kord.rest.json.request/WebhookEditMessageRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>?> // dev.kord.rest.json.request/WebhookEditMessageRequest.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>?> // dev.kord.rest.json.request/WebhookEditMessageRequest.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags?> // dev.kord.rest.json.request/WebhookEditMessageRequest.component6|component6(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>?> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags?> = ...): dev.kord.rest.json.request/WebhookEditMessageRequest // dev.kord.rest.json.request/WebhookEditMessageRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.EmbedRequest>?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.AllowedMentions?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordComponent>?>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.AttachmentRequest>?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageFlags?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/WebhookEditMessageRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/WebhookEditMessageRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/WebhookEditMessageRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/WebhookEditMessageRequest> { // dev.kord.rest.json.request/WebhookEditMessageRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/WebhookEditMessageRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/WebhookEditMessageRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/WebhookEditMessageRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/WebhookEditMessageRequest // dev.kord.rest.json.request/WebhookEditMessageRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/WebhookEditMessageRequest) // dev.kord.rest.json.request/WebhookEditMessageRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.WebhookEditMessageRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/WebhookEditMessageRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/WebhookEditMessageRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/WebhookEditMessageRequest> // dev.kord.rest.json.request/WebhookEditMessageRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/WebhookExecuteRequest { // dev.kord.rest.json.request/WebhookExecuteRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ...) // dev.kord.rest.json.request/WebhookExecuteRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.EmbedRequest>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.AllowedMentions>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordComponent>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.AttachmentRequest>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageFlags>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>){}[0]

    final val allowedMentions // dev.kord.rest.json.request/WebhookExecuteRequest.allowedMentions|{}allowedMentions[0]
        final fun <get-allowedMentions>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions> // dev.kord.rest.json.request/WebhookExecuteRequest.allowedMentions.<get-allowedMentions>|<get-allowedMentions>(){}[0]
    final val appliedTags // dev.kord.rest.json.request/WebhookExecuteRequest.appliedTags|{}appliedTags[0]
        final fun <get-appliedTags>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.rest.json.request/WebhookExecuteRequest.appliedTags.<get-appliedTags>|<get-appliedTags>(){}[0]
    final val attachments // dev.kord.rest.json.request/WebhookExecuteRequest.attachments|{}attachments[0]
        final fun <get-attachments>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>> // dev.kord.rest.json.request/WebhookExecuteRequest.attachments.<get-attachments>|<get-attachments>(){}[0]
    final val avatar // dev.kord.rest.json.request/WebhookExecuteRequest.avatar|{}avatar[0]
        final fun <get-avatar>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/WebhookExecuteRequest.avatar.<get-avatar>|<get-avatar>(){}[0]
    final val components // dev.kord.rest.json.request/WebhookExecuteRequest.components|{}components[0]
        final fun <get-components>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> // dev.kord.rest.json.request/WebhookExecuteRequest.components.<get-components>|<get-components>(){}[0]
    final val content // dev.kord.rest.json.request/WebhookExecuteRequest.content|{}content[0]
        final fun <get-content>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/WebhookExecuteRequest.content.<get-content>|<get-content>(){}[0]
    final val embeds // dev.kord.rest.json.request/WebhookExecuteRequest.embeds|{}embeds[0]
        final fun <get-embeds>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>> // dev.kord.rest.json.request/WebhookExecuteRequest.embeds.<get-embeds>|<get-embeds>(){}[0]
    final val flags // dev.kord.rest.json.request/WebhookExecuteRequest.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> // dev.kord.rest.json.request/WebhookExecuteRequest.flags.<get-flags>|<get-flags>(){}[0]
    final val threadName // dev.kord.rest.json.request/WebhookExecuteRequest.threadName|{}threadName[0]
        final fun <get-threadName>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/WebhookExecuteRequest.threadName.<get-threadName>|<get-threadName>(){}[0]
    final val tts // dev.kord.rest.json.request/WebhookExecuteRequest.tts|{}tts[0]
        final fun <get-tts>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/WebhookExecuteRequest.tts.<get-tts>|<get-tts>(){}[0]
    final val username // dev.kord.rest.json.request/WebhookExecuteRequest.username|{}username[0]
        final fun <get-username>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/WebhookExecuteRequest.username.<get-username>|<get-username>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/WebhookExecuteRequest.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/WebhookExecuteRequest.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.rest.json.request/WebhookExecuteRequest.component11|component11(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/WebhookExecuteRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/WebhookExecuteRequest.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.json.request/WebhookExecuteRequest.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>> // dev.kord.rest.json.request/WebhookExecuteRequest.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions> // dev.kord.rest.json.request/WebhookExecuteRequest.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> // dev.kord.rest.json.request/WebhookExecuteRequest.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>> // dev.kord.rest.json.request/WebhookExecuteRequest.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> // dev.kord.rest.json.request/WebhookExecuteRequest.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/EmbedRequest>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AllowedMentions> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.rest.json.request/AttachmentRequest>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ...): dev.kord.rest.json.request/WebhookExecuteRequest // dev.kord.rest.json.request/WebhookExecuteRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.EmbedRequest>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.AllowedMentions>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordComponent>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.rest.json.request.AttachmentRequest>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageFlags>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/WebhookExecuteRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/WebhookExecuteRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/WebhookExecuteRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/WebhookExecuteRequest> { // dev.kord.rest.json.request/WebhookExecuteRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/WebhookExecuteRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/WebhookExecuteRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/WebhookExecuteRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/WebhookExecuteRequest // dev.kord.rest.json.request/WebhookExecuteRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/WebhookExecuteRequest) // dev.kord.rest.json.request/WebhookExecuteRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.WebhookExecuteRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/WebhookExecuteRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/WebhookExecuteRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/WebhookExecuteRequest> // dev.kord.rest.json.request/WebhookExecuteRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.request/WebhookModifyRequest { // dev.kord.rest.json.request/WebhookModifyRequest|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ...) // dev.kord.rest.json.request/WebhookModifyRequest.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.OptionalSnowflake){}[0]

    final val avatar // dev.kord.rest.json.request/WebhookModifyRequest.avatar|{}avatar[0]
        final fun <get-avatar>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/WebhookModifyRequest.avatar.<get-avatar>|<get-avatar>(){}[0]
    final val channelId // dev.kord.rest.json.request/WebhookModifyRequest.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.rest.json.request/WebhookModifyRequest.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val name // dev.kord.rest.json.request/WebhookModifyRequest.name|{}name[0]
        final fun <get-name>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/WebhookModifyRequest.name.<get-name>|<get-name>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.json.request/WebhookModifyRequest.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.rest.json.request/WebhookModifyRequest.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.rest.json.request/WebhookModifyRequest.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ...): dev.kord.rest.json.request/WebhookModifyRequest // dev.kord.rest.json.request/WebhookModifyRequest.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.OptionalSnowflake){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.request/WebhookModifyRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.request/WebhookModifyRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.request/WebhookModifyRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.request/WebhookModifyRequest> { // dev.kord.rest.json.request/WebhookModifyRequest.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.request/WebhookModifyRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.request/WebhookModifyRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.request/WebhookModifyRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.request/WebhookModifyRequest // dev.kord.rest.json.request/WebhookModifyRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.request/WebhookModifyRequest) // dev.kord.rest.json.request/WebhookModifyRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.request.WebhookModifyRequest){}[0]
    }

    final object Companion { // dev.kord.rest.json.request/WebhookModifyRequest.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.request/WebhookModifyRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.request/WebhookModifyRequest> // dev.kord.rest.json.request/WebhookModifyRequest.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.response/BanResponse { // dev.kord.rest.json.response/BanResponse|null[0]
    constructor <init>(kotlin/String?, dev.kord.common.entity/DiscordUser) // dev.kord.rest.json.response/BanResponse.<init>|<init>(kotlin.String?;dev.kord.common.entity.DiscordUser){}[0]

    final val reason // dev.kord.rest.json.response/BanResponse.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.json.response/BanResponse.reason.<get-reason>|<get-reason>(){}[0]
    final val user // dev.kord.rest.json.response/BanResponse.user|{}user[0]
        final fun <get-user>(): dev.kord.common.entity/DiscordUser // dev.kord.rest.json.response/BanResponse.user.<get-user>|<get-user>(){}[0]

    final fun component1(): kotlin/String? // dev.kord.rest.json.response/BanResponse.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/DiscordUser // dev.kord.rest.json.response/BanResponse.component2|component2(){}[0]
    final fun copy(kotlin/String? = ..., dev.kord.common.entity/DiscordUser = ...): dev.kord.rest.json.response/BanResponse // dev.kord.rest.json.response/BanResponse.copy|copy(kotlin.String?;dev.kord.common.entity.DiscordUser){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.response/BanResponse.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.response/BanResponse.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.response/BanResponse.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.response/BanResponse> { // dev.kord.rest.json.response/BanResponse.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.response/BanResponse.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.response/BanResponse.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.response/BanResponse.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.response/BanResponse // dev.kord.rest.json.response/BanResponse.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.response/BanResponse) // dev.kord.rest.json.response/BanResponse.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.response.BanResponse){}[0]
    }

    final object Companion { // dev.kord.rest.json.response/BanResponse.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.response/BanResponse> // dev.kord.rest.json.response/BanResponse.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.response/BotGatewayResponse { // dev.kord.rest.json.response/BotGatewayResponse|null[0]
    constructor <init>(kotlin/String, kotlin/Int, dev.kord.rest.json.response/SessionStartLimitResponse) // dev.kord.rest.json.response/BotGatewayResponse.<init>|<init>(kotlin.String;kotlin.Int;dev.kord.rest.json.response.SessionStartLimitResponse){}[0]

    final val sessionStartLimit // dev.kord.rest.json.response/BotGatewayResponse.sessionStartLimit|{}sessionStartLimit[0]
        final fun <get-sessionStartLimit>(): dev.kord.rest.json.response/SessionStartLimitResponse // dev.kord.rest.json.response/BotGatewayResponse.sessionStartLimit.<get-sessionStartLimit>|<get-sessionStartLimit>(){}[0]
    final val shards // dev.kord.rest.json.response/BotGatewayResponse.shards|{}shards[0]
        final fun <get-shards>(): kotlin/Int // dev.kord.rest.json.response/BotGatewayResponse.shards.<get-shards>|<get-shards>(){}[0]
    final val url // dev.kord.rest.json.response/BotGatewayResponse.url|{}url[0]
        final fun <get-url>(): kotlin/String // dev.kord.rest.json.response/BotGatewayResponse.url.<get-url>|<get-url>(){}[0]

    final fun component1(): kotlin/String // dev.kord.rest.json.response/BotGatewayResponse.component1|component1(){}[0]
    final fun component2(): kotlin/Int // dev.kord.rest.json.response/BotGatewayResponse.component2|component2(){}[0]
    final fun component3(): dev.kord.rest.json.response/SessionStartLimitResponse // dev.kord.rest.json.response/BotGatewayResponse.component3|component3(){}[0]
    final fun copy(kotlin/String = ..., kotlin/Int = ..., dev.kord.rest.json.response/SessionStartLimitResponse = ...): dev.kord.rest.json.response/BotGatewayResponse // dev.kord.rest.json.response/BotGatewayResponse.copy|copy(kotlin.String;kotlin.Int;dev.kord.rest.json.response.SessionStartLimitResponse){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.response/BotGatewayResponse.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.response/BotGatewayResponse.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.response/BotGatewayResponse.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.response/BotGatewayResponse> { // dev.kord.rest.json.response/BotGatewayResponse.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.response/BotGatewayResponse.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.response/BotGatewayResponse.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.response/BotGatewayResponse.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.response/BotGatewayResponse // dev.kord.rest.json.response/BotGatewayResponse.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.response/BotGatewayResponse) // dev.kord.rest.json.response/BotGatewayResponse.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.response.BotGatewayResponse){}[0]
    }

    final object Companion { // dev.kord.rest.json.response/BotGatewayResponse.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.response/BotGatewayResponse> // dev.kord.rest.json.response/BotGatewayResponse.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.response/Connection { // dev.kord.rest.json.response/Connection|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/String, kotlin/Boolean, kotlin.collections/List<dev.kord.common.entity/DiscordGuildIntegrations>, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, kotlin/Int) // dev.kord.rest.json.response/Connection.<init>|<init>(kotlin.String;kotlin.String;kotlin.String;kotlin.Boolean;kotlin.collections.List<dev.kord.common.entity.DiscordGuildIntegrations>;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}[0]

    final val friendSync // dev.kord.rest.json.response/Connection.friendSync|{}friendSync[0]
        final fun <get-friendSync>(): kotlin/Boolean // dev.kord.rest.json.response/Connection.friendSync.<get-friendSync>|<get-friendSync>(){}[0]
    final val id // dev.kord.rest.json.response/Connection.id|{}id[0]
        final fun <get-id>(): kotlin/String // dev.kord.rest.json.response/Connection.id.<get-id>|<get-id>(){}[0]
    final val integrations // dev.kord.rest.json.response/Connection.integrations|{}integrations[0]
        final fun <get-integrations>(): kotlin.collections/List<dev.kord.common.entity/DiscordGuildIntegrations> // dev.kord.rest.json.response/Connection.integrations.<get-integrations>|<get-integrations>(){}[0]
    final val name // dev.kord.rest.json.response/Connection.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.json.response/Connection.name.<get-name>|<get-name>(){}[0]
    final val revoked // dev.kord.rest.json.response/Connection.revoked|{}revoked[0]
        final fun <get-revoked>(): kotlin/Boolean // dev.kord.rest.json.response/Connection.revoked.<get-revoked>|<get-revoked>(){}[0]
    final val showActivity // dev.kord.rest.json.response/Connection.showActivity|{}showActivity[0]
        final fun <get-showActivity>(): kotlin/Boolean // dev.kord.rest.json.response/Connection.showActivity.<get-showActivity>|<get-showActivity>(){}[0]
    final val type // dev.kord.rest.json.response/Connection.type|{}type[0]
        final fun <get-type>(): kotlin/String // dev.kord.rest.json.response/Connection.type.<get-type>|<get-type>(){}[0]
    final val verified // dev.kord.rest.json.response/Connection.verified|{}verified[0]
        final fun <get-verified>(): kotlin/Boolean // dev.kord.rest.json.response/Connection.verified.<get-verified>|<get-verified>(){}[0]
    final val visibility // dev.kord.rest.json.response/Connection.visibility|{}visibility[0]
        final fun <get-visibility>(): kotlin/Int // dev.kord.rest.json.response/Connection.visibility.<get-visibility>|<get-visibility>(){}[0]

    final fun component1(): kotlin/String // dev.kord.rest.json.response/Connection.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.rest.json.response/Connection.component2|component2(){}[0]
    final fun component3(): kotlin/String // dev.kord.rest.json.response/Connection.component3|component3(){}[0]
    final fun component4(): kotlin/Boolean // dev.kord.rest.json.response/Connection.component4|component4(){}[0]
    final fun component5(): kotlin.collections/List<dev.kord.common.entity/DiscordGuildIntegrations> // dev.kord.rest.json.response/Connection.component5|component5(){}[0]
    final fun component6(): kotlin/Boolean // dev.kord.rest.json.response/Connection.component6|component6(){}[0]
    final fun component7(): kotlin/Boolean // dev.kord.rest.json.response/Connection.component7|component7(){}[0]
    final fun component8(): kotlin/Boolean // dev.kord.rest.json.response/Connection.component8|component8(){}[0]
    final fun component9(): kotlin/Int // dev.kord.rest.json.response/Connection.component9|component9(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/Boolean = ..., kotlin.collections/List<dev.kord.common.entity/DiscordGuildIntegrations> = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Int = ...): dev.kord.rest.json.response/Connection // dev.kord.rest.json.response/Connection.copy|copy(kotlin.String;kotlin.String;kotlin.String;kotlin.Boolean;kotlin.collections.List<dev.kord.common.entity.DiscordGuildIntegrations>;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.response/Connection.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.response/Connection.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.response/Connection.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.response/Connection> { // dev.kord.rest.json.response/Connection.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.response/Connection.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.response/Connection.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.response/Connection.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.response/Connection // dev.kord.rest.json.response/Connection.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.response/Connection) // dev.kord.rest.json.response/Connection.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.response.Connection){}[0]
    }

    final object Companion { // dev.kord.rest.json.response/Connection.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.response/Connection.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.response/Connection> // dev.kord.rest.json.response/Connection.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.response/CurrentUserNicknameModifyResponse { // dev.kord.rest.json.response/CurrentUserNicknameModifyResponse|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.json.response/CurrentUserNicknameModifyResponse.<init>|<init>(kotlin.String){}[0]

    final val nick // dev.kord.rest.json.response/CurrentUserNicknameModifyResponse.nick|{}nick[0]
        final fun <get-nick>(): kotlin/String // dev.kord.rest.json.response/CurrentUserNicknameModifyResponse.nick.<get-nick>|<get-nick>(){}[0]

    final fun component1(): kotlin/String // dev.kord.rest.json.response/CurrentUserNicknameModifyResponse.component1|component1(){}[0]
    final fun copy(kotlin/String = ...): dev.kord.rest.json.response/CurrentUserNicknameModifyResponse // dev.kord.rest.json.response/CurrentUserNicknameModifyResponse.copy|copy(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.response/CurrentUserNicknameModifyResponse.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.response/CurrentUserNicknameModifyResponse.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.response/CurrentUserNicknameModifyResponse.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.response/CurrentUserNicknameModifyResponse> { // dev.kord.rest.json.response/CurrentUserNicknameModifyResponse.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.response/CurrentUserNicknameModifyResponse.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.response/CurrentUserNicknameModifyResponse.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.response/CurrentUserNicknameModifyResponse.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.response/CurrentUserNicknameModifyResponse // dev.kord.rest.json.response/CurrentUserNicknameModifyResponse.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.response/CurrentUserNicknameModifyResponse) // dev.kord.rest.json.response/CurrentUserNicknameModifyResponse.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.response.CurrentUserNicknameModifyResponse){}[0]
    }

    final object Companion { // dev.kord.rest.json.response/CurrentUserNicknameModifyResponse.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.response/CurrentUserNicknameModifyResponse> // dev.kord.rest.json.response/CurrentUserNicknameModifyResponse.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.response/DiscordErrorResponse { // dev.kord.rest.json.response/DiscordErrorResponse|null[0]
    constructor <init>(dev.kord.rest.json/JsonErrorCode = ..., kotlinx.serialization.json/JsonElement? = ..., kotlin/String? = ...) // dev.kord.rest.json.response/DiscordErrorResponse.<init>|<init>(dev.kord.rest.json.JsonErrorCode;kotlinx.serialization.json.JsonElement?;kotlin.String?){}[0]

    final val code // dev.kord.rest.json.response/DiscordErrorResponse.code|{}code[0]
        final fun <get-code>(): dev.kord.rest.json/JsonErrorCode // dev.kord.rest.json.response/DiscordErrorResponse.code.<get-code>|<get-code>(){}[0]
    final val errors // dev.kord.rest.json.response/DiscordErrorResponse.errors|{}errors[0]
        final fun <get-errors>(): kotlinx.serialization.json/JsonElement? // dev.kord.rest.json.response/DiscordErrorResponse.errors.<get-errors>|<get-errors>(){}[0]
    final val message // dev.kord.rest.json.response/DiscordErrorResponse.message|{}message[0]
        final fun <get-message>(): kotlin/String? // dev.kord.rest.json.response/DiscordErrorResponse.message.<get-message>|<get-message>(){}[0]

    final fun component1(): dev.kord.rest.json/JsonErrorCode // dev.kord.rest.json.response/DiscordErrorResponse.component1|component1(){}[0]
    final fun component2(): kotlinx.serialization.json/JsonElement? // dev.kord.rest.json.response/DiscordErrorResponse.component2|component2(){}[0]
    final fun component3(): kotlin/String? // dev.kord.rest.json.response/DiscordErrorResponse.component3|component3(){}[0]
    final fun copy(dev.kord.rest.json/JsonErrorCode = ..., kotlinx.serialization.json/JsonElement? = ..., kotlin/String? = ...): dev.kord.rest.json.response/DiscordErrorResponse // dev.kord.rest.json.response/DiscordErrorResponse.copy|copy(dev.kord.rest.json.JsonErrorCode;kotlinx.serialization.json.JsonElement?;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.response/DiscordErrorResponse.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.response/DiscordErrorResponse.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.response/DiscordErrorResponse.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.response/DiscordErrorResponse> { // dev.kord.rest.json.response/DiscordErrorResponse.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.response/DiscordErrorResponse.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.response/DiscordErrorResponse.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.response/DiscordErrorResponse.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.response/DiscordErrorResponse // dev.kord.rest.json.response/DiscordErrorResponse.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.response/DiscordErrorResponse) // dev.kord.rest.json.response/DiscordErrorResponse.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.response.DiscordErrorResponse){}[0]
    }

    final object Companion { // dev.kord.rest.json.response/DiscordErrorResponse.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.response/DiscordErrorResponse> // dev.kord.rest.json.response/DiscordErrorResponse.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.response/FollowedChannelResponse { // dev.kord.rest.json.response/FollowedChannelResponse|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake) // dev.kord.rest.json.response/FollowedChannelResponse.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]

    final val channelId // dev.kord.rest.json.response/FollowedChannelResponse.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.rest.json.response/FollowedChannelResponse.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val webhookId // dev.kord.rest.json.response/FollowedChannelResponse.webhookId|{}webhookId[0]
        final fun <get-webhookId>(): dev.kord.common.entity/Snowflake // dev.kord.rest.json.response/FollowedChannelResponse.webhookId.<get-webhookId>|<get-webhookId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.rest.json.response/FollowedChannelResponse.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.rest.json.response/FollowedChannelResponse.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ...): dev.kord.rest.json.response/FollowedChannelResponse // dev.kord.rest.json.response/FollowedChannelResponse.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.response/FollowedChannelResponse.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.response/FollowedChannelResponse.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.response/FollowedChannelResponse.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.response/FollowedChannelResponse> { // dev.kord.rest.json.response/FollowedChannelResponse.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.response/FollowedChannelResponse.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.response/FollowedChannelResponse.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.response/FollowedChannelResponse.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.response/FollowedChannelResponse // dev.kord.rest.json.response/FollowedChannelResponse.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.response/FollowedChannelResponse) // dev.kord.rest.json.response/FollowedChannelResponse.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.response.FollowedChannelResponse){}[0]
    }

    final object Companion { // dev.kord.rest.json.response/FollowedChannelResponse.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.response/FollowedChannelResponse> // dev.kord.rest.json.response/FollowedChannelResponse.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.response/GatewayResponse { // dev.kord.rest.json.response/GatewayResponse|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.json.response/GatewayResponse.<init>|<init>(kotlin.String){}[0]

    final val url // dev.kord.rest.json.response/GatewayResponse.url|{}url[0]
        final fun <get-url>(): kotlin/String // dev.kord.rest.json.response/GatewayResponse.url.<get-url>|<get-url>(){}[0]

    final fun component1(): kotlin/String // dev.kord.rest.json.response/GatewayResponse.component1|component1(){}[0]
    final fun copy(kotlin/String = ...): dev.kord.rest.json.response/GatewayResponse // dev.kord.rest.json.response/GatewayResponse.copy|copy(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.response/GatewayResponse.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.response/GatewayResponse.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.response/GatewayResponse.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.response/GatewayResponse> { // dev.kord.rest.json.response/GatewayResponse.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.response/GatewayResponse.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.response/GatewayResponse.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.response/GatewayResponse.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.response/GatewayResponse // dev.kord.rest.json.response/GatewayResponse.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.response/GatewayResponse) // dev.kord.rest.json.response/GatewayResponse.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.response.GatewayResponse){}[0]
    }

    final object Companion { // dev.kord.rest.json.response/GatewayResponse.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.response/GatewayResponse> // dev.kord.rest.json.response/GatewayResponse.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.response/GetPruneResponse { // dev.kord.rest.json.response/GetPruneResponse|null[0]
    constructor <init>(kotlin/Int) // dev.kord.rest.json.response/GetPruneResponse.<init>|<init>(kotlin.Int){}[0]

    final val pruned // dev.kord.rest.json.response/GetPruneResponse.pruned|{}pruned[0]
        final fun <get-pruned>(): kotlin/Int // dev.kord.rest.json.response/GetPruneResponse.pruned.<get-pruned>|<get-pruned>(){}[0]

    final fun component1(): kotlin/Int // dev.kord.rest.json.response/GetPruneResponse.component1|component1(){}[0]
    final fun copy(kotlin/Int = ...): dev.kord.rest.json.response/GetPruneResponse // dev.kord.rest.json.response/GetPruneResponse.copy|copy(kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.response/GetPruneResponse.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.response/GetPruneResponse.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.response/GetPruneResponse.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.response/GetPruneResponse> { // dev.kord.rest.json.response/GetPruneResponse.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.response/GetPruneResponse.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.response/GetPruneResponse.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.response/GetPruneResponse.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.response/GetPruneResponse // dev.kord.rest.json.response/GetPruneResponse.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.response/GetPruneResponse) // dev.kord.rest.json.response/GetPruneResponse.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.response.GetPruneResponse){}[0]
    }

    final object Companion { // dev.kord.rest.json.response/GetPruneResponse.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.response/GetPruneResponse> // dev.kord.rest.json.response/GetPruneResponse.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.response/GuildMFALevelModifyResponse { // dev.kord.rest.json.response/GuildMFALevelModifyResponse|null[0]
    constructor <init>(dev.kord.common.entity/MFALevel) // dev.kord.rest.json.response/GuildMFALevelModifyResponse.<init>|<init>(dev.kord.common.entity.MFALevel){}[0]

    final val level // dev.kord.rest.json.response/GuildMFALevelModifyResponse.level|{}level[0]
        final fun <get-level>(): dev.kord.common.entity/MFALevel // dev.kord.rest.json.response/GuildMFALevelModifyResponse.level.<get-level>|<get-level>(){}[0]

    final fun component1(): dev.kord.common.entity/MFALevel // dev.kord.rest.json.response/GuildMFALevelModifyResponse.component1|component1(){}[0]
    final fun copy(dev.kord.common.entity/MFALevel = ...): dev.kord.rest.json.response/GuildMFALevelModifyResponse // dev.kord.rest.json.response/GuildMFALevelModifyResponse.copy|copy(dev.kord.common.entity.MFALevel){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.response/GuildMFALevelModifyResponse.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.response/GuildMFALevelModifyResponse.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.response/GuildMFALevelModifyResponse.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.response/GuildMFALevelModifyResponse> { // dev.kord.rest.json.response/GuildMFALevelModifyResponse.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.response/GuildMFALevelModifyResponse.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.response/GuildMFALevelModifyResponse.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.response/GuildMFALevelModifyResponse.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.response/GuildMFALevelModifyResponse // dev.kord.rest.json.response/GuildMFALevelModifyResponse.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.response/GuildMFALevelModifyResponse) // dev.kord.rest.json.response/GuildMFALevelModifyResponse.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.response.GuildMFALevelModifyResponse){}[0]
    }

    final object Companion { // dev.kord.rest.json.response/GuildMFALevelModifyResponse.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.response/GuildMFALevelModifyResponse> // dev.kord.rest.json.response/GuildMFALevelModifyResponse.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.response/ListThreadsResponse { // dev.kord.rest.json.response/ListThreadsResponse|null[0]
    constructor <init>(kotlin.collections/List<dev.kord.common.entity/DiscordChannel>, kotlin.collections/List<dev.kord.common.entity/DiscordThreadMember>) // dev.kord.rest.json.response/ListThreadsResponse.<init>|<init>(kotlin.collections.List<dev.kord.common.entity.DiscordChannel>;kotlin.collections.List<dev.kord.common.entity.DiscordThreadMember>){}[0]

    final val members // dev.kord.rest.json.response/ListThreadsResponse.members|{}members[0]
        final fun <get-members>(): kotlin.collections/List<dev.kord.common.entity/DiscordThreadMember> // dev.kord.rest.json.response/ListThreadsResponse.members.<get-members>|<get-members>(){}[0]
    final val threads // dev.kord.rest.json.response/ListThreadsResponse.threads|{}threads[0]
        final fun <get-threads>(): kotlin.collections/List<dev.kord.common.entity/DiscordChannel> // dev.kord.rest.json.response/ListThreadsResponse.threads.<get-threads>|<get-threads>(){}[0]

    final fun component1(): kotlin.collections/List<dev.kord.common.entity/DiscordChannel> // dev.kord.rest.json.response/ListThreadsResponse.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<dev.kord.common.entity/DiscordThreadMember> // dev.kord.rest.json.response/ListThreadsResponse.component2|component2(){}[0]
    final fun copy(kotlin.collections/List<dev.kord.common.entity/DiscordChannel> = ..., kotlin.collections/List<dev.kord.common.entity/DiscordThreadMember> = ...): dev.kord.rest.json.response/ListThreadsResponse // dev.kord.rest.json.response/ListThreadsResponse.copy|copy(kotlin.collections.List<dev.kord.common.entity.DiscordChannel>;kotlin.collections.List<dev.kord.common.entity.DiscordThreadMember>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.response/ListThreadsResponse.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.response/ListThreadsResponse.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.response/ListThreadsResponse.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.response/ListThreadsResponse> { // dev.kord.rest.json.response/ListThreadsResponse.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.response/ListThreadsResponse.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.response/ListThreadsResponse.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.response/ListThreadsResponse.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.response/ListThreadsResponse // dev.kord.rest.json.response/ListThreadsResponse.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.response/ListThreadsResponse) // dev.kord.rest.json.response/ListThreadsResponse.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.response.ListThreadsResponse){}[0]
    }

    final object Companion { // dev.kord.rest.json.response/ListThreadsResponse.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.response/ListThreadsResponse.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.response/ListThreadsResponse> // dev.kord.rest.json.response/ListThreadsResponse.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.response/NitroStickerPacksResponse { // dev.kord.rest.json.response/NitroStickerPacksResponse|null[0]
    constructor <init>(kotlin.collections/List<dev.kord.common.entity/DiscordStickerPack>) // dev.kord.rest.json.response/NitroStickerPacksResponse.<init>|<init>(kotlin.collections.List<dev.kord.common.entity.DiscordStickerPack>){}[0]

    final val stickerPacks // dev.kord.rest.json.response/NitroStickerPacksResponse.stickerPacks|{}stickerPacks[0]
        final fun <get-stickerPacks>(): kotlin.collections/List<dev.kord.common.entity/DiscordStickerPack> // dev.kord.rest.json.response/NitroStickerPacksResponse.stickerPacks.<get-stickerPacks>|<get-stickerPacks>(){}[0]

    final fun component1(): kotlin.collections/List<dev.kord.common.entity/DiscordStickerPack> // dev.kord.rest.json.response/NitroStickerPacksResponse.component1|component1(){}[0]
    final fun copy(kotlin.collections/List<dev.kord.common.entity/DiscordStickerPack> = ...): dev.kord.rest.json.response/NitroStickerPacksResponse // dev.kord.rest.json.response/NitroStickerPacksResponse.copy|copy(kotlin.collections.List<dev.kord.common.entity.DiscordStickerPack>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.response/NitroStickerPacksResponse.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.response/NitroStickerPacksResponse.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.response/NitroStickerPacksResponse.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.response/NitroStickerPacksResponse> { // dev.kord.rest.json.response/NitroStickerPacksResponse.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.response/NitroStickerPacksResponse.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.response/NitroStickerPacksResponse.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.response/NitroStickerPacksResponse.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.response/NitroStickerPacksResponse // dev.kord.rest.json.response/NitroStickerPacksResponse.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.response/NitroStickerPacksResponse) // dev.kord.rest.json.response/NitroStickerPacksResponse.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.response.NitroStickerPacksResponse){}[0]
    }

    final object Companion { // dev.kord.rest.json.response/NitroStickerPacksResponse.Companion|null[0]
        final val $childSerializers // dev.kord.rest.json.response/NitroStickerPacksResponse.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.response/NitroStickerPacksResponse> // dev.kord.rest.json.response/NitroStickerPacksResponse.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.response/PartialChannelResponse { // dev.kord.rest.json.response/PartialChannelResponse|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity/ChannelType) // dev.kord.rest.json.response/PartialChannelResponse.<init>|<init>(kotlin.String;dev.kord.common.entity.ChannelType){}[0]

    final val name // dev.kord.rest.json.response/PartialChannelResponse.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.json.response/PartialChannelResponse.name.<get-name>|<get-name>(){}[0]
    final val type // dev.kord.rest.json.response/PartialChannelResponse.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ChannelType // dev.kord.rest.json.response/PartialChannelResponse.type.<get-type>|<get-type>(){}[0]

    final fun component1(): kotlin/String // dev.kord.rest.json.response/PartialChannelResponse.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/ChannelType // dev.kord.rest.json.response/PartialChannelResponse.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., dev.kord.common.entity/ChannelType = ...): dev.kord.rest.json.response/PartialChannelResponse // dev.kord.rest.json.response/PartialChannelResponse.copy|copy(kotlin.String;dev.kord.common.entity.ChannelType){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.response/PartialChannelResponse.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.response/PartialChannelResponse.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.response/PartialChannelResponse.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.response/PartialChannelResponse> { // dev.kord.rest.json.response/PartialChannelResponse.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.response/PartialChannelResponse.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.response/PartialChannelResponse.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.response/PartialChannelResponse.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.response/PartialChannelResponse // dev.kord.rest.json.response/PartialChannelResponse.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.response/PartialChannelResponse) // dev.kord.rest.json.response/PartialChannelResponse.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.response.PartialChannelResponse){}[0]
    }

    final object Companion { // dev.kord.rest.json.response/PartialChannelResponse.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.response/PartialChannelResponse> // dev.kord.rest.json.response/PartialChannelResponse.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.response/PruneResponse { // dev.kord.rest.json.response/PruneResponse|null[0]
    constructor <init>(kotlin/Int?) // dev.kord.rest.json.response/PruneResponse.<init>|<init>(kotlin.Int?){}[0]

    final val pruned // dev.kord.rest.json.response/PruneResponse.pruned|{}pruned[0]
        final fun <get-pruned>(): kotlin/Int? // dev.kord.rest.json.response/PruneResponse.pruned.<get-pruned>|<get-pruned>(){}[0]

    final fun component1(): kotlin/Int? // dev.kord.rest.json.response/PruneResponse.component1|component1(){}[0]
    final fun copy(kotlin/Int? = ...): dev.kord.rest.json.response/PruneResponse // dev.kord.rest.json.response/PruneResponse.copy|copy(kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.response/PruneResponse.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.response/PruneResponse.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.response/PruneResponse.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.response/PruneResponse> { // dev.kord.rest.json.response/PruneResponse.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.response/PruneResponse.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.response/PruneResponse.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.response/PruneResponse.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.response/PruneResponse // dev.kord.rest.json.response/PruneResponse.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.response/PruneResponse) // dev.kord.rest.json.response/PruneResponse.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.response.PruneResponse){}[0]
    }

    final object Companion { // dev.kord.rest.json.response/PruneResponse.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.response/PruneResponse> // dev.kord.rest.json.response/PruneResponse.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.json.response/SessionStartLimitResponse { // dev.kord.rest.json.response/SessionStartLimitResponse|null[0]
    constructor <init>(kotlin/Int, kotlin/Int, kotlin.time/Duration, kotlin/Int) // dev.kord.rest.json.response/SessionStartLimitResponse.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.time.Duration;kotlin.Int){}[0]

    final val maxConcurrency // dev.kord.rest.json.response/SessionStartLimitResponse.maxConcurrency|{}maxConcurrency[0]
        final fun <get-maxConcurrency>(): kotlin/Int // dev.kord.rest.json.response/SessionStartLimitResponse.maxConcurrency.<get-maxConcurrency>|<get-maxConcurrency>(){}[0]
    final val remaining // dev.kord.rest.json.response/SessionStartLimitResponse.remaining|{}remaining[0]
        final fun <get-remaining>(): kotlin/Int // dev.kord.rest.json.response/SessionStartLimitResponse.remaining.<get-remaining>|<get-remaining>(){}[0]
    final val resetAfter // dev.kord.rest.json.response/SessionStartLimitResponse.resetAfter|{}resetAfter[0]
        final fun <get-resetAfter>(): kotlin.time/Duration // dev.kord.rest.json.response/SessionStartLimitResponse.resetAfter.<get-resetAfter>|<get-resetAfter>(){}[0]
    final val total // dev.kord.rest.json.response/SessionStartLimitResponse.total|{}total[0]
        final fun <get-total>(): kotlin/Int // dev.kord.rest.json.response/SessionStartLimitResponse.total.<get-total>|<get-total>(){}[0]

    final fun component1(): kotlin/Int // dev.kord.rest.json.response/SessionStartLimitResponse.component1|component1(){}[0]
    final fun component2(): kotlin/Int // dev.kord.rest.json.response/SessionStartLimitResponse.component2|component2(){}[0]
    final fun component3(): kotlin.time/Duration // dev.kord.rest.json.response/SessionStartLimitResponse.component3|component3(){}[0]
    final fun component4(): kotlin/Int // dev.kord.rest.json.response/SessionStartLimitResponse.component4|component4(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/Int = ..., kotlin.time/Duration = ..., kotlin/Int = ...): dev.kord.rest.json.response/SessionStartLimitResponse // dev.kord.rest.json.response/SessionStartLimitResponse.copy|copy(kotlin.Int;kotlin.Int;kotlin.time.Duration;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.json.response/SessionStartLimitResponse.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.json.response/SessionStartLimitResponse.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.json.response/SessionStartLimitResponse.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.rest.json.response/SessionStartLimitResponse> { // dev.kord.rest.json.response/SessionStartLimitResponse.$serializer|null[0]
        final val descriptor // dev.kord.rest.json.response/SessionStartLimitResponse.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.rest.json.response/SessionStartLimitResponse.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.rest.json.response/SessionStartLimitResponse.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.rest.json.response/SessionStartLimitResponse // dev.kord.rest.json.response/SessionStartLimitResponse.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.rest.json.response/SessionStartLimitResponse) // dev.kord.rest.json.response/SessionStartLimitResponse.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.rest.json.response.SessionStartLimitResponse){}[0]
    }

    final object Companion { // dev.kord.rest.json.response/SessionStartLimitResponse.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.rest.json.response/SessionStartLimitResponse> // dev.kord.rest.json.response/SessionStartLimitResponse.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.rest.ratelimit/ExclusionRequestRateLimiter : dev.kord.rest.ratelimit/AbstractRateLimiter { // dev.kord.rest.ratelimit/ExclusionRequestRateLimiter|null[0]
    constructor <init>(kotlinx.datetime/Clock = ...) // dev.kord.rest.ratelimit/ExclusionRequestRateLimiter.<init>|<init>(kotlinx.datetime.Clock){}[0]

    final suspend fun await(dev.kord.rest.request/Request<*, *>): dev.kord.rest.ratelimit/RequestToken // dev.kord.rest.ratelimit/ExclusionRequestRateLimiter.await|await(dev.kord.rest.request.Request<*,*>){}[0]
}

final class dev.kord.rest.ratelimit/ParallelRequestRateLimiter : dev.kord.rest.ratelimit/AbstractRateLimiter { // dev.kord.rest.ratelimit/ParallelRequestRateLimiter|null[0]
    constructor <init>(kotlinx.datetime/Clock = ...) // dev.kord.rest.ratelimit/ParallelRequestRateLimiter.<init>|<init>(kotlinx.datetime.Clock){}[0]
}

final class dev.kord.rest.ratelimit/RateLimit { // dev.kord.rest.ratelimit/RateLimit|null[0]
    constructor <init>(dev.kord.rest.ratelimit/Total, dev.kord.rest.ratelimit/Remaining) // dev.kord.rest.ratelimit/RateLimit.<init>|<init>(dev.kord.rest.ratelimit.Total;dev.kord.rest.ratelimit.Remaining){}[0]

    final val isExhausted // dev.kord.rest.ratelimit/RateLimit.isExhausted|{}isExhausted[0]
        final fun <get-isExhausted>(): kotlin/Boolean // dev.kord.rest.ratelimit/RateLimit.isExhausted.<get-isExhausted>|<get-isExhausted>(){}[0]
    final val remaining // dev.kord.rest.ratelimit/RateLimit.remaining|{}remaining[0]
        final fun <get-remaining>(): dev.kord.rest.ratelimit/Remaining // dev.kord.rest.ratelimit/RateLimit.remaining.<get-remaining>|<get-remaining>(){}[0]
    final val total // dev.kord.rest.ratelimit/RateLimit.total|{}total[0]
        final fun <get-total>(): dev.kord.rest.ratelimit/Total // dev.kord.rest.ratelimit/RateLimit.total.<get-total>|<get-total>(){}[0]

    final fun component1(): dev.kord.rest.ratelimit/Total // dev.kord.rest.ratelimit/RateLimit.component1|component1(){}[0]
    final fun component2(): dev.kord.rest.ratelimit/Remaining // dev.kord.rest.ratelimit/RateLimit.component2|component2(){}[0]
    final fun copy(dev.kord.rest.ratelimit/Total = ..., dev.kord.rest.ratelimit/Remaining = ...): dev.kord.rest.ratelimit/RateLimit // dev.kord.rest.ratelimit/RateLimit.copy|copy(dev.kord.rest.ratelimit.Total;dev.kord.rest.ratelimit.Remaining){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.ratelimit/RateLimit.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.ratelimit/RateLimit.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.ratelimit/RateLimit.toString|toString(){}[0]

    final object Companion // dev.kord.rest.ratelimit/RateLimit.Companion|null[0]
}

final class dev.kord.rest.request/HttpStatus { // dev.kord.rest.request/HttpStatus|null[0]
    constructor <init>(kotlin/Int, kotlin/String) // dev.kord.rest.request/HttpStatus.<init>|<init>(kotlin.Int;kotlin.String){}[0]

    final val code // dev.kord.rest.request/HttpStatus.code|{}code[0]
        final fun <get-code>(): kotlin/Int // dev.kord.rest.request/HttpStatus.code.<get-code>|<get-code>(){}[0]
    final val message // dev.kord.rest.request/HttpStatus.message|{}message[0]
        final fun <get-message>(): kotlin/String // dev.kord.rest.request/HttpStatus.message.<get-message>|<get-message>(){}[0]

    final fun component1(): kotlin/Int // dev.kord.rest.request/HttpStatus.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.rest.request/HttpStatus.component2|component2(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/String = ...): dev.kord.rest.request/HttpStatus // dev.kord.rest.request/HttpStatus.copy|copy(kotlin.Int;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.request/HttpStatus.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.request/HttpStatus.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.request/HttpStatus.toString|toString(){}[0]
}

final class dev.kord.rest.request/KtorRequestException : dev.kord.rest.request/RestRequestException { // dev.kord.rest.request/KtorRequestException|null[0]
    constructor <init>(io.ktor.client.statement/HttpResponse, dev.kord.rest.request/Request<*, *>, dev.kord.rest.json.response/DiscordErrorResponse?) // dev.kord.rest.request/KtorRequestException.<init>|<init>(io.ktor.client.statement.HttpResponse;dev.kord.rest.request.Request<*,*>;dev.kord.rest.json.response.DiscordErrorResponse?){}[0]

    final val httpResponse // dev.kord.rest.request/KtorRequestException.httpResponse|{}httpResponse[0]
        final fun <get-httpResponse>(): io.ktor.client.statement/HttpResponse // dev.kord.rest.request/KtorRequestException.httpResponse.<get-httpResponse>|<get-httpResponse>(){}[0]
}

final class dev.kord.rest.request/KtorRequestHandler : dev.kord.rest.request/RequestHandler { // dev.kord.rest.request/KtorRequestHandler|null[0]
    constructor <init>(io.ktor.client/HttpClient, dev.kord.rest.ratelimit/RequestRateLimiter = ..., kotlinx.datetime/Clock = ..., kotlinx.serialization.json/Json = ..., kotlin/String) // dev.kord.rest.request/KtorRequestHandler.<init>|<init>(io.ktor.client.HttpClient;dev.kord.rest.ratelimit.RequestRateLimiter;kotlinx.datetime.Clock;kotlinx.serialization.json.Json;kotlin.String){}[0]

    final val token // dev.kord.rest.request/KtorRequestHandler.token|{}token[0]
        final fun <get-token>(): kotlin/String // dev.kord.rest.request/KtorRequestHandler.token.<get-token>|<get-token>(){}[0]

    final suspend fun <#A1: kotlin/Any, #B1: kotlin/Any?> handle(dev.kord.rest.request/Request<#A1, #B1>): #B1 // dev.kord.rest.request/KtorRequestHandler.handle|handle(dev.kord.rest.request.Request<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
}

final class dev.kord.rest.request/StackTraceRecoveringKtorRequestHandler : dev.kord.rest.request/RequestHandler { // dev.kord.rest.request/StackTraceRecoveringKtorRequestHandler|null[0]
    constructor <init>(dev.kord.rest.request/KtorRequestHandler) // dev.kord.rest.request/StackTraceRecoveringKtorRequestHandler.<init>|<init>(dev.kord.rest.request.KtorRequestHandler){}[0]

    final val token // dev.kord.rest.request/StackTraceRecoveringKtorRequestHandler.token|{}token[0]
        final fun <get-token>(): kotlin/String // dev.kord.rest.request/StackTraceRecoveringKtorRequestHandler.token.<get-token>|<get-token>(){}[0]

    final suspend fun <#A1: kotlin/Any, #B1: kotlin/Any?> handle(dev.kord.rest.request/Request<#A1, #B1>): #B1 // dev.kord.rest.request/StackTraceRecoveringKtorRequestHandler.handle|handle(dev.kord.rest.request.Request<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
    final suspend fun <#A1: kotlin/Any?> intercept(dev.kord.rest.request/RequestBuilder<#A1>) // dev.kord.rest.request/StackTraceRecoveringKtorRequestHandler.intercept|intercept(dev.kord.rest.request.RequestBuilder<0:0>){0§<kotlin.Any?>}[0]
}

final class dev.kord.rest.route/CdnUrl { // dev.kord.rest.route/CdnUrl|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.route/CdnUrl.<init>|<init>(kotlin.String){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.route/CdnUrl.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.route/CdnUrl.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.route/CdnUrl.toString|toString(){}[0]
    final fun toUrl(): kotlin/String // dev.kord.rest.route/CdnUrl.toUrl|toUrl(){}[0]
    final fun toUrl(dev.kord.rest.route/CdnUrl.UrlFormatBuilder): kotlin/String // dev.kord.rest.route/CdnUrl.toUrl|toUrl(dev.kord.rest.route.CdnUrl.UrlFormatBuilder){}[0]
    final inline fun toUrl(kotlin/Function1<dev.kord.rest.route/CdnUrl.UrlFormatBuilder, kotlin/Unit>): kotlin/String // dev.kord.rest.route/CdnUrl.toUrl|toUrl(kotlin.Function1<dev.kord.rest.route.CdnUrl.UrlFormatBuilder,kotlin.Unit>){}[0]

    final class UrlFormatBuilder { // dev.kord.rest.route/CdnUrl.UrlFormatBuilder|null[0]
        constructor <init>() // dev.kord.rest.route/CdnUrl.UrlFormatBuilder.<init>|<init>(){}[0]

        final var format // dev.kord.rest.route/CdnUrl.UrlFormatBuilder.format|{}format[0]
            final fun <get-format>(): dev.kord.rest/Image.Format // dev.kord.rest.route/CdnUrl.UrlFormatBuilder.format.<get-format>|<get-format>(){}[0]
            final fun <set-format>(dev.kord.rest/Image.Format) // dev.kord.rest.route/CdnUrl.UrlFormatBuilder.format.<set-format>|<set-format>(dev.kord.rest.Image.Format){}[0]
        final var size // dev.kord.rest.route/CdnUrl.UrlFormatBuilder.size|{}size[0]
            final fun <get-size>(): dev.kord.rest/Image.Size? // dev.kord.rest.route/CdnUrl.UrlFormatBuilder.size.<get-size>|<get-size>(){}[0]
            final fun <set-size>(dev.kord.rest/Image.Size?) // dev.kord.rest.route/CdnUrl.UrlFormatBuilder.size.<set-size>|<set-size>(dev.kord.rest.Image.Size?){}[0]
    }
}

final class dev.kord.rest.service/ApplicationRoleConnectionMetadataService : dev.kord.rest.service/RestService { // dev.kord.rest.service/ApplicationRoleConnectionMetadataService|null[0]
    constructor <init>(dev.kord.rest.request/RequestHandler) // dev.kord.rest.service/ApplicationRoleConnectionMetadataService.<init>|<init>(dev.kord.rest.request.RequestHandler){}[0]

    final suspend fun getApplicationRoleConnectionMetadataRecords(dev.kord.common.entity/Snowflake): kotlin.collections/List<dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata> // dev.kord.rest.service/ApplicationRoleConnectionMetadataService.getApplicationRoleConnectionMetadataRecords|getApplicationRoleConnectionMetadataRecords(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun updateApplicationRoleConnectionMetadataRecords(dev.kord.common.entity/Snowflake, kotlin.collections/List<dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata>): kotlin.collections/List<dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata> // dev.kord.rest.service/ApplicationRoleConnectionMetadataService.updateApplicationRoleConnectionMetadataRecords|updateApplicationRoleConnectionMetadataRecords(dev.kord.common.entity.Snowflake;kotlin.collections.List<dev.kord.common.entity.DiscordApplicationRoleConnectionMetadata>){}[0]
    final suspend inline fun updateApplicationRoleConnectionMetadataRecords(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataRecordsBuilder, kotlin/Unit>): kotlin.collections/List<dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata> // dev.kord.rest.service/ApplicationRoleConnectionMetadataService.updateApplicationRoleConnectionMetadataRecords|updateApplicationRoleConnectionMetadataRecords(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.application.ApplicationRoleConnectionMetadataRecordsBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.rest.service/ApplicationService : dev.kord.rest.service/RestService { // dev.kord.rest.service/ApplicationService|null[0]
    constructor <init>(dev.kord.rest.request/RequestHandler) // dev.kord.rest.service/ApplicationService.<init>|<init>(dev.kord.rest.request.RequestHandler){}[0]

    final suspend fun getCurrentApplicationInfo(): dev.kord.common.entity/DiscordApplication // dev.kord.rest.service/ApplicationService.getCurrentApplicationInfo|getCurrentApplicationInfo(){}[0]
}

final class dev.kord.rest.service/AuditLogService : dev.kord.rest.service/RestService { // dev.kord.rest.service/AuditLogService|null[0]
    constructor <init>(dev.kord.rest.request/RequestHandler) // dev.kord.rest.service/AuditLogService.<init>|<init>(dev.kord.rest.request.RequestHandler){}[0]

    final suspend fun getAuditLogs(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/AuditLogGetRequest): dev.kord.common.entity/DiscordAuditLog // dev.kord.rest.service/AuditLogService.getAuditLogs|getAuditLogs(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.AuditLogGetRequest){}[0]
    final suspend inline fun getAuditLogs(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.auditlog/AuditLogGetRequestBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordAuditLog // dev.kord.rest.service/AuditLogService.getAuditLogs|getAuditLogs(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.auditlog.AuditLogGetRequestBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.rest.service/AutoModerationService : dev.kord.rest.service/RestService { // dev.kord.rest.service/AutoModerationService|null[0]
    constructor <init>(dev.kord.rest.request/RequestHandler) // dev.kord.rest.service/AutoModerationService.<init>|<init>(dev.kord.rest.request.RequestHandler){}[0]

    final suspend fun createAutoModerationRule(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/AutoModerationRuleCreateRequest, kotlin/String? = ...): dev.kord.common.entity/DiscordAutoModerationRule // dev.kord.rest.service/AutoModerationService.createAutoModerationRule|createAutoModerationRule(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.AutoModerationRuleCreateRequest;kotlin.String?){}[0]
    final suspend fun deleteAutoModerationRule(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String? = ...) // dev.kord.rest.service/AutoModerationService.deleteAutoModerationRule|deleteAutoModerationRule(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String?){}[0]
    final suspend fun getAutoModerationRule(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.common.entity/DiscordAutoModerationRule // dev.kord.rest.service/AutoModerationService.getAutoModerationRule|getAutoModerationRule(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun listAutoModerationRulesForGuild(dev.kord.common.entity/Snowflake): kotlin.collections/List<dev.kord.common.entity/DiscordAutoModerationRule> // dev.kord.rest.service/AutoModerationService.listAutoModerationRulesForGuild|listAutoModerationRulesForGuild(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun modifyAutoModerationRule(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/AutoModerationRuleModifyRequest, kotlin/String? = ...): dev.kord.common.entity/DiscordAutoModerationRule // dev.kord.rest.service/AutoModerationService.modifyAutoModerationRule|modifyAutoModerationRule(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.AutoModerationRuleModifyRequest;kotlin.String?){}[0]
    final suspend inline fun createKeywordAutoModerationRule(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/AutoModerationRuleEventType, kotlin/Function1<dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleCreateBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordAutoModerationRule // dev.kord.rest.service/AutoModerationService.createKeywordAutoModerationRule|createKeywordAutoModerationRule(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.AutoModerationRuleEventType;kotlin.Function1<dev.kord.rest.builder.automoderation.KeywordAutoModerationRuleCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createKeywordPresetAutoModerationRule(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/AutoModerationRuleEventType, kotlin/Function1<dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleCreateBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordAutoModerationRule // dev.kord.rest.service/AutoModerationService.createKeywordPresetAutoModerationRule|createKeywordPresetAutoModerationRule(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.AutoModerationRuleEventType;kotlin.Function1<dev.kord.rest.builder.automoderation.KeywordPresetAutoModerationRuleCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createMentionSpamAutoModerationRule(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/AutoModerationRuleEventType, kotlin/Function1<dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleCreateBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordAutoModerationRule // dev.kord.rest.service/AutoModerationService.createMentionSpamAutoModerationRule|createMentionSpamAutoModerationRule(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.AutoModerationRuleEventType;kotlin.Function1<dev.kord.rest.builder.automoderation.MentionSpamAutoModerationRuleCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createSpamAutoModerationRule(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/AutoModerationRuleEventType, kotlin/Function1<dev.kord.rest.builder.automoderation/SpamAutoModerationRuleCreateBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordAutoModerationRule // dev.kord.rest.service/AutoModerationService.createSpamAutoModerationRule|createSpamAutoModerationRule(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.AutoModerationRuleEventType;kotlin.Function1<dev.kord.rest.builder.automoderation.SpamAutoModerationRuleCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifyKeywordAutoModerationRule(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordAutoModerationRule // dev.kord.rest.service/AutoModerationService.modifyKeywordAutoModerationRule|modifyKeywordAutoModerationRule(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.automoderation.KeywordAutoModerationRuleModifyBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifyKeywordPresetAutoModerationRule(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordAutoModerationRule // dev.kord.rest.service/AutoModerationService.modifyKeywordPresetAutoModerationRule|modifyKeywordPresetAutoModerationRule(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.automoderation.KeywordPresetAutoModerationRuleModifyBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifyMentionSpamAutoModerationRule(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordAutoModerationRule // dev.kord.rest.service/AutoModerationService.modifyMentionSpamAutoModerationRule|modifyMentionSpamAutoModerationRule(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.automoderation.MentionSpamAutoModerationRuleModifyBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifySpamAutoModerationRule(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.automoderation/SpamAutoModerationRuleModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordAutoModerationRule // dev.kord.rest.service/AutoModerationService.modifySpamAutoModerationRule|modifySpamAutoModerationRule(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.automoderation.SpamAutoModerationRuleModifyBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifyUntypedAutoModerationRule(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.automoderation/UntypedAutoModerationRuleModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordAutoModerationRule // dev.kord.rest.service/AutoModerationService.modifyUntypedAutoModerationRule|modifyUntypedAutoModerationRule(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.automoderation.UntypedAutoModerationRuleModifyBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.rest.service/ChannelService : dev.kord.rest.service/RestService { // dev.kord.rest.service/ChannelService|null[0]
    constructor <init>(dev.kord.rest.request/RequestHandler) // dev.kord.rest.service/ChannelService.<init>|<init>(dev.kord.rest.request.RequestHandler){}[0]

    final suspend fun addPinnedMessage(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String? = ...) // dev.kord.rest.service/ChannelService.addPinnedMessage|addPinnedMessage(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String?){}[0]
    final suspend fun addToGroup(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/UserAddDMRequest) // dev.kord.rest.service/ChannelService.addToGroup|addToGroup(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.UserAddDMRequest){}[0]
    final suspend fun addUserToThread(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake) // dev.kord.rest.service/ChannelService.addUserToThread|addUserToThread(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun bulkDelete(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/BulkDeleteRequest, kotlin/String? = ...) // dev.kord.rest.service/ChannelService.bulkDelete|bulkDelete(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.BulkDeleteRequest;kotlin.String?){}[0]
    final suspend fun createMessage(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/MultipartMessageCreateRequest): dev.kord.common.entity/DiscordMessage // dev.kord.rest.service/ChannelService.createMessage|createMessage(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.MultipartMessageCreateRequest){}[0]
    final suspend fun createReaction(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String) // dev.kord.rest.service/ChannelService.createReaction|createReaction(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    final suspend fun crossPost(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.common.entity/DiscordMessage // dev.kord.rest.service/ChannelService.crossPost|crossPost(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun deleteAllReactions(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake) // dev.kord.rest.service/ChannelService.deleteAllReactions|deleteAllReactions(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun deleteAllReactionsForEmoji(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String) // dev.kord.rest.service/ChannelService.deleteAllReactionsForEmoji|deleteAllReactionsForEmoji(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    final suspend fun deleteChannel(dev.kord.common.entity/Snowflake, kotlin/String? = ...): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/ChannelService.deleteChannel|deleteChannel(dev.kord.common.entity.Snowflake;kotlin.String?){}[0]
    final suspend fun deleteChannelPermission(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String? = ...) // dev.kord.rest.service/ChannelService.deleteChannelPermission|deleteChannelPermission(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String?){}[0]
    final suspend fun deleteMessage(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String? = ...) // dev.kord.rest.service/ChannelService.deleteMessage|deleteMessage(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String?){}[0]
    final suspend fun deleteOwnReaction(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String) // dev.kord.rest.service/ChannelService.deleteOwnReaction|deleteOwnReaction(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    final suspend fun deletePinnedMessage(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String? = ...) // dev.kord.rest.service/ChannelService.deletePinnedMessage|deletePinnedMessage(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String?){}[0]
    final suspend fun deleteReaction(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String) // dev.kord.rest.service/ChannelService.deleteReaction|deleteReaction(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    final suspend fun editChannelPermissions(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/ChannelPermissionEditRequest, kotlin/String? = ...) // dev.kord.rest.service/ChannelService.editChannelPermissions|editChannelPermissions(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.ChannelPermissionEditRequest;kotlin.String?){}[0]
    final suspend fun editMessage(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/MessageEditPatchRequest): dev.kord.common.entity/DiscordMessage // dev.kord.rest.service/ChannelService.editMessage|editMessage(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.MessageEditPatchRequest){}[0]
    final suspend fun editMessage(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/MultipartMessagePatchRequest): dev.kord.common.entity/DiscordMessage // dev.kord.rest.service/ChannelService.editMessage|editMessage(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.MultipartMessagePatchRequest){}[0]
    final suspend fun editMessage(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/MultipartWebhookEditMessageRequest): dev.kord.common.entity/DiscordMessage // dev.kord.rest.service/ChannelService.editMessage|editMessage(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.MultipartWebhookEditMessageRequest){}[0]
    final suspend fun followNewsChannel(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/ChannelFollowRequest): dev.kord.rest.json.response/FollowedChannelResponse // dev.kord.rest.service/ChannelService.followNewsChannel|followNewsChannel(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.ChannelFollowRequest){}[0]
    final suspend fun getChannel(dev.kord.common.entity/Snowflake): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/ChannelService.getChannel|getChannel(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getChannelInvites(dev.kord.common.entity/Snowflake): kotlin.collections/List<dev.kord.common.entity/DiscordInviteWithMetadata> // dev.kord.rest.service/ChannelService.getChannelInvites|getChannelInvites(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getChannelPins(dev.kord.common.entity/Snowflake): kotlin.collections/List<dev.kord.common.entity/DiscordMessage> // dev.kord.rest.service/ChannelService.getChannelPins|getChannelPins(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getMessage(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.common.entity/DiscordMessage // dev.kord.rest.service/ChannelService.getMessage|getMessage(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getMessages(dev.kord.common.entity/Snowflake, dev.kord.rest.route/Position? = ..., kotlin/Int? = ...): kotlin.collections/List<dev.kord.common.entity/DiscordMessage> // dev.kord.rest.service/ChannelService.getMessages|getMessages(dev.kord.common.entity.Snowflake;dev.kord.rest.route.Position?;kotlin.Int?){}[0]
    final suspend fun getReactions(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.rest.route/Position.After? = ..., kotlin/Int? = ...): kotlin.collections/List<dev.kord.common.entity/DiscordUser> // dev.kord.rest.service/ChannelService.getReactions|getReactions(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.rest.route.Position.After?;kotlin.Int?){}[0]
    final suspend fun joinThread(dev.kord.common.entity/Snowflake) // dev.kord.rest.service/ChannelService.joinThread|joinThread(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun leaveThread(dev.kord.common.entity/Snowflake) // dev.kord.rest.service/ChannelService.leaveThread|leaveThread(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun listJoinedPrivateArchivedThreads(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/ListThreadsBySnowflakeRequest): dev.kord.rest.json.response/ListThreadsResponse // dev.kord.rest.service/ChannelService.listJoinedPrivateArchivedThreads|listJoinedPrivateArchivedThreads(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.ListThreadsBySnowflakeRequest){}[0]
    final suspend fun listPrivateArchivedThreads(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/ListThreadsByTimestampRequest): dev.kord.rest.json.response/ListThreadsResponse // dev.kord.rest.service/ChannelService.listPrivateArchivedThreads|listPrivateArchivedThreads(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.ListThreadsByTimestampRequest){}[0]
    final suspend fun listPublicArchivedThreads(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/ListThreadsByTimestampRequest): dev.kord.rest.json.response/ListThreadsResponse // dev.kord.rest.service/ChannelService.listPublicArchivedThreads|listPublicArchivedThreads(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.ListThreadsByTimestampRequest){}[0]
    final suspend fun listThreadMembers(dev.kord.common.entity/Snowflake): kotlin.collections/List<dev.kord.common.entity/DiscordThreadMember> // dev.kord.rest.service/ChannelService.listThreadMembers|listThreadMembers(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun patchChannel(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/ChannelModifyPatchRequest, kotlin/String? = ...): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/ChannelService.patchChannel|patchChannel(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.ChannelModifyPatchRequest;kotlin.String?){}[0]
    final suspend fun patchThread(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/ChannelModifyPatchRequest, kotlin/String? = ...): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/ChannelService.patchThread|patchThread(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.ChannelModifyPatchRequest;kotlin.String?){}[0]
    final suspend fun putChannel(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/ChannelModifyPutRequest, kotlin/String? = ...): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/ChannelService.putChannel|putChannel(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.ChannelModifyPutRequest;kotlin.String?){}[0]
    final suspend fun removeFromGroup(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake) // dev.kord.rest.service/ChannelService.removeFromGroup|removeFromGroup(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun removeUserFromThread(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake) // dev.kord.rest.service/ChannelService.removeUserFromThread|removeUserFromThread(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun startForumThread(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel.thread/StartForumThreadBuilder, kotlin/Unit> = ...): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/ChannelService.startForumThread|startForumThread(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.thread.StartForumThreadBuilder,kotlin.Unit>){}[0]
    final suspend fun startThread(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/MultipartStartThreadRequest, kotlin/String? = ...): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/ChannelService.startThread|startThread(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.MultipartStartThreadRequest;kotlin.String?){}[0]
    final suspend fun startThread(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/StartThreadRequest, kotlin/String? = ...): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/ChannelService.startThread|startThread(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.StartThreadRequest;kotlin.String?){}[0]
    final suspend fun startThread(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/ArchiveDuration, dev.kord.common.entity/ChannelType, kotlin/Function1<dev.kord.rest.builder.channel.thread/StartThreadBuilder, kotlin/Unit> = ...): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/ChannelService.startThread|startThread(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.ArchiveDuration;dev.kord.common.entity.ChannelType;kotlin.Function1<dev.kord.rest.builder.channel.thread.StartThreadBuilder,kotlin.Unit>){}[0]
    final suspend fun startThreadWithMessage(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/StartThreadRequest, kotlin/String? = ...): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/ChannelService.startThreadWithMessage|startThreadWithMessage(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.StartThreadRequest;kotlin.String?){}[0]
    final suspend fun startThreadWithMessage(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/ArchiveDuration, kotlin/Function1<dev.kord.rest.builder.channel.thread/StartThreadWithMessageBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/ChannelService.startThreadWithMessage|startThreadWithMessage(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.ArchiveDuration;kotlin.Function1<dev.kord.rest.builder.channel.thread.StartThreadWithMessageBuilder,kotlin.Unit>){}[0]
    final suspend fun triggerTypingIndicator(dev.kord.common.entity/Snowflake) // dev.kord.rest.service/ChannelService.triggerTypingIndicator|triggerTypingIndicator(dev.kord.common.entity.Snowflake){}[0]
    final suspend inline fun createInvite(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.channel/InviteCreateBuilder, kotlin/Unit> = ...): dev.kord.common.entity/DiscordInviteWithMetadata // dev.kord.rest.service/ChannelService.createInvite|createInvite(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.channel.InviteCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createMessage(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.message.create/UserMessageCreateBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordMessage // dev.kord.rest.service/ChannelService.createMessage|createMessage(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.message.create.UserMessageCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun editMessage(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.message.modify/UserMessageModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordMessage // dev.kord.rest.service/ChannelService.editMessage|editMessage(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.message.modify.UserMessageModifyBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.rest.service/EmojiService : dev.kord.rest.service/RestService { // dev.kord.rest.service/EmojiService|null[0]
    constructor <init>(dev.kord.rest.request/RequestHandler) // dev.kord.rest.service/EmojiService.<init>|<init>(dev.kord.rest.request.RequestHandler){}[0]

    final suspend fun createEmoji(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/EmojiCreateRequest, kotlin/String? = ...): dev.kord.common.entity/DiscordEmoji // dev.kord.rest.service/EmojiService.createEmoji|createEmoji(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.EmojiCreateRequest;kotlin.String?){}[0]
    final suspend fun deleteEmoji(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String? = ...) // dev.kord.rest.service/EmojiService.deleteEmoji|deleteEmoji(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String?){}[0]
    final suspend fun getEmoji(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.common.entity/DiscordEmoji // dev.kord.rest.service/EmojiService.getEmoji|getEmoji(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getEmojis(dev.kord.common.entity/Snowflake): kotlin.collections/List<dev.kord.common.entity/DiscordEmoji> // dev.kord.rest.service/EmojiService.getEmojis|getEmojis(dev.kord.common.entity.Snowflake){}[0]
    final suspend inline fun createEmoji(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.rest/Image, kotlin/Function1<dev.kord.rest.builder.guild/EmojiCreateBuilder, kotlin/Unit> = ...): dev.kord.common.entity/DiscordEmoji // dev.kord.rest.service/EmojiService.createEmoji|createEmoji(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.rest.Image;kotlin.Function1<dev.kord.rest.builder.guild.EmojiCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifyEmoji(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.guild/EmojiModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordEmoji // dev.kord.rest.service/EmojiService.modifyEmoji|modifyEmoji(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.guild.EmojiModifyBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.rest.service/GuildService : dev.kord.rest.service/RestService { // dev.kord.rest.service/GuildService|null[0]
    constructor <init>(dev.kord.rest.request/RequestHandler) // dev.kord.rest.service/GuildService.<init>|<init>(dev.kord.rest.request.RequestHandler){}[0]

    final suspend fun addGuildMember(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.member/MemberAddBuilder, kotlin/Unit>) // dev.kord.rest.service/GuildService.addGuildMember|addGuildMember(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.member.MemberAddBuilder,kotlin.Unit>){}[0]
    final suspend fun addRoleToGuildMember(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String? = ...) // dev.kord.rest.service/GuildService.addRoleToGuildMember|addRoleToGuildMember(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String?){}[0]
    final suspend fun beginGuildPrune(dev.kord.common.entity/Snowflake, kotlin/Int = ..., kotlin/Boolean = ..., kotlin/String? = ...): dev.kord.rest.json.response/PruneResponse // dev.kord.rest.service/GuildService.beginGuildPrune|beginGuildPrune(dev.kord.common.entity.Snowflake;kotlin.Int;kotlin.Boolean;kotlin.String?){}[0]
    final suspend fun createGuildChannel(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/GuildChannelCreateRequest, kotlin/String? = ...): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/GuildService.createGuildChannel|createGuildChannel(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.GuildChannelCreateRequest;kotlin.String?){}[0]
    final suspend fun createGuildIntegration(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/GuildIntegrationCreateRequest) // dev.kord.rest.service/GuildService.createGuildIntegration|createGuildIntegration(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.GuildIntegrationCreateRequest){}[0]
    final suspend fun createScheduledEvent(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/GuildScheduledEventCreateRequest, kotlin/String? = ...): dev.kord.common.entity/DiscordGuildScheduledEvent // dev.kord.rest.service/GuildService.createScheduledEvent|createScheduledEvent(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.GuildScheduledEventCreateRequest;kotlin.String?){}[0]
    final suspend fun deleteGuild(dev.kord.common.entity/Snowflake) // dev.kord.rest.service/GuildService.deleteGuild|deleteGuild(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun deleteGuildBan(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String? = ...) // dev.kord.rest.service/GuildService.deleteGuildBan|deleteGuildBan(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String?){}[0]
    final suspend fun deleteGuildIntegration(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String? = ...) // dev.kord.rest.service/GuildService.deleteGuildIntegration|deleteGuildIntegration(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String?){}[0]
    final suspend fun deleteGuildMember(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String? = ...) // dev.kord.rest.service/GuildService.deleteGuildMember|deleteGuildMember(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String?){}[0]
    final suspend fun deleteGuildRole(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String? = ...) // dev.kord.rest.service/GuildService.deleteGuildRole|deleteGuildRole(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String?){}[0]
    final suspend fun deleteRoleFromGuildMember(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String? = ...) // dev.kord.rest.service/GuildService.deleteRoleFromGuildMember|deleteRoleFromGuildMember(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String?){}[0]
    final suspend fun deleteScheduledEvent(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake) // dev.kord.rest.service/GuildService.deleteScheduledEvent|deleteScheduledEvent(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuild(dev.kord.common.entity/Snowflake, kotlin/Boolean = ...): dev.kord.common.entity/DiscordGuild // dev.kord.rest.service/GuildService.getGuild|getGuild(dev.kord.common.entity.Snowflake;kotlin.Boolean){}[0]
    final suspend fun getGuildBan(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.rest.json.response/BanResponse // dev.kord.rest.service/GuildService.getGuildBan|getGuildBan(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildBans(dev.kord.common.entity/Snowflake, dev.kord.rest.route/Position.BeforeOrAfter? = ..., kotlin/Int? = ...): kotlin.collections/List<dev.kord.rest.json.response/BanResponse> // dev.kord.rest.service/GuildService.getGuildBans|getGuildBans(dev.kord.common.entity.Snowflake;dev.kord.rest.route.Position.BeforeOrAfter?;kotlin.Int?){}[0]
    final suspend fun getGuildChannels(dev.kord.common.entity/Snowflake): kotlin.collections/List<dev.kord.common.entity/DiscordChannel> // dev.kord.rest.service/GuildService.getGuildChannels|getGuildChannels(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildIntegrations(dev.kord.common.entity/Snowflake): kotlin.collections/List<dev.kord.common.entity/DiscordIntegration> // dev.kord.rest.service/GuildService.getGuildIntegrations|getGuildIntegrations(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildInvites(dev.kord.common.entity/Snowflake): kotlin.collections/List<dev.kord.common.entity/DiscordInviteWithMetadata> // dev.kord.rest.service/GuildService.getGuildInvites|getGuildInvites(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildMember(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.common.entity/DiscordGuildMember // dev.kord.rest.service/GuildService.getGuildMember|getGuildMember(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildMembers(dev.kord.common.entity/Snowflake, dev.kord.rest.route/Position.After? = ..., kotlin/Int? = ...): kotlin.collections/List<dev.kord.common.entity/DiscordGuildMember> // dev.kord.rest.service/GuildService.getGuildMembers|getGuildMembers(dev.kord.common.entity.Snowflake;dev.kord.rest.route.Position.After?;kotlin.Int?){}[0]
    final suspend fun getGuildMembers(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Int? = ...): kotlin.collections/List<dev.kord.common.entity/DiscordGuildMember> // dev.kord.rest.service/GuildService.getGuildMembers|getGuildMembers(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Int?){}[0]
    final suspend fun getGuildOnboarding(dev.kord.common.entity/Snowflake): dev.kord.common.entity/DiscordGuildOnboarding // dev.kord.rest.service/GuildService.getGuildOnboarding|getGuildOnboarding(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildPreview(dev.kord.common.entity/Snowflake): dev.kord.common.entity/DiscordGuildPreview // dev.kord.rest.service/GuildService.getGuildPreview|getGuildPreview(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildPruneCount(dev.kord.common.entity/Snowflake, kotlin/Int = ...): dev.kord.rest.json.response/GetPruneResponse // dev.kord.rest.service/GuildService.getGuildPruneCount|getGuildPruneCount(dev.kord.common.entity.Snowflake;kotlin.Int){}[0]
    final suspend fun getGuildRoles(dev.kord.common.entity/Snowflake): kotlin.collections/List<dev.kord.common.entity/DiscordRole> // dev.kord.rest.service/GuildService.getGuildRoles|getGuildRoles(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildVoiceRegions(dev.kord.common.entity/Snowflake): kotlin.collections/List<dev.kord.common.entity/DiscordVoiceRegion> // dev.kord.rest.service/GuildService.getGuildVoiceRegions|getGuildVoiceRegions(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildWelcomeScreen(dev.kord.common.entity/Snowflake): dev.kord.common.entity/DiscordWelcomeScreen // dev.kord.rest.service/GuildService.getGuildWelcomeScreen|getGuildWelcomeScreen(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildWidget(dev.kord.common.entity/Snowflake): dev.kord.common.entity/DiscordGuildWidget // dev.kord.rest.service/GuildService.getGuildWidget|getGuildWidget(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getScheduledEvent(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.common.entity/DiscordGuildScheduledEvent // dev.kord.rest.service/GuildService.getScheduledEvent|getScheduledEvent(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getScheduledEventUsers(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.rest.route/Position.BeforeOrAfter? = ..., kotlin/Boolean? = ..., kotlin/Int? = ...): kotlin.collections/List<dev.kord.rest.json.request/GuildScheduledEventUsersResponse> // dev.kord.rest.service/GuildService.getScheduledEventUsers|getScheduledEventUsers(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.rest.route.Position.BeforeOrAfter?;kotlin.Boolean?;kotlin.Int?){}[0]
    final suspend fun getScheduledEventUsersAfter(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Boolean? = ..., kotlin/Int? = ...): kotlin.collections/List<dev.kord.rest.json.request/GuildScheduledEventUsersResponse> // dev.kord.rest.service/GuildService.getScheduledEventUsersAfter|getScheduledEventUsersAfter(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Boolean?;kotlin.Int?){}[0]
    final suspend fun getScheduledEventUsersBefore(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Boolean? = ..., kotlin/Int? = ...): kotlin.collections/List<dev.kord.rest.json.request/GuildScheduledEventUsersResponse> // dev.kord.rest.service/GuildService.getScheduledEventUsersBefore|getScheduledEventUsersBefore(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Boolean?;kotlin.Int?){}[0]
    final suspend fun getVanityInvite(dev.kord.common.entity/Snowflake): dev.kord.common.entity/DiscordPartialInvite // dev.kord.rest.service/GuildService.getVanityInvite|getVanityInvite(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun listActiveThreads(dev.kord.common.entity/Snowflake): dev.kord.rest.json.response/ListThreadsResponse // dev.kord.rest.service/GuildService.listActiveThreads|listActiveThreads(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun listScheduledEvents(dev.kord.common.entity/Snowflake, kotlin/Boolean? = ...): kotlin.collections/List<dev.kord.common.entity/DiscordGuildScheduledEvent> // dev.kord.rest.service/GuildService.listScheduledEvents|listScheduledEvents(dev.kord.common.entity.Snowflake;kotlin.Boolean?){}[0]
    final suspend fun modifyCurrentUserNickname(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/CurrentUserNicknameModifyRequest, kotlin/String? = ...): dev.kord.rest.json.response/CurrentUserNicknameModifyResponse // dev.kord.rest.service/GuildService.modifyCurrentUserNickname|modifyCurrentUserNickname(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.CurrentUserNicknameModifyRequest;kotlin.String?){}[0]
    final suspend fun modifyCurrentVoiceState(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/CurrentVoiceStateModifyRequest) // dev.kord.rest.service/GuildService.modifyCurrentVoiceState|modifyCurrentVoiceState(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.CurrentVoiceStateModifyRequest){}[0]
    final suspend fun modifyGuildMFALevel(dev.kord.common.entity/Snowflake, dev.kord.common.entity/MFALevel, kotlin/String? = ...): dev.kord.rest.json.response/GuildMFALevelModifyResponse // dev.kord.rest.service/GuildService.modifyGuildMFALevel|modifyGuildMFALevel(dev.kord.common.entity.Snowflake;dev.kord.common.entity.MFALevel;kotlin.String?){}[0]
    final suspend fun modifyGuildOnboarding(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/GuildOnboardingModifyRequest, kotlin/String? = ...): dev.kord.common.entity/DiscordGuildOnboarding // dev.kord.rest.service/GuildService.modifyGuildOnboarding|modifyGuildOnboarding(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.GuildOnboardingModifyRequest;kotlin.String?){}[0]
    final suspend fun modifyGuildWelcomeScreen(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/GuildWelcomeScreenModifyRequest, kotlin/String? = ...): dev.kord.common.entity/DiscordWelcomeScreen // dev.kord.rest.service/GuildService.modifyGuildWelcomeScreen|modifyGuildWelcomeScreen(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.GuildWelcomeScreenModifyRequest;kotlin.String?){}[0]
    final suspend fun modifyGuildWidget(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/GuildWidgetModifyRequest, kotlin/String? = ...): dev.kord.common.entity/DiscordGuildWidget // dev.kord.rest.service/GuildService.modifyGuildWidget|modifyGuildWidget(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.GuildWidgetModifyRequest;kotlin.String?){}[0]
    final suspend fun modifyScheduledEvent(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/ScheduledEventModifyRequest, kotlin/String? = ...): dev.kord.common.entity/DiscordGuildScheduledEvent // dev.kord.rest.service/GuildService.modifyScheduledEvent|modifyScheduledEvent(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.ScheduledEventModifyRequest;kotlin.String?){}[0]
    final suspend fun modifyVoiceState(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/VoiceStateModifyRequest) // dev.kord.rest.service/GuildService.modifyVoiceState|modifyVoiceState(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.VoiceStateModifyRequest){}[0]
    final suspend fun syncGuildIntegration(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake) // dev.kord.rest.service/GuildService.syncGuildIntegration|syncGuildIntegration(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend inline fun addGuildBan(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.ban/BanCreateBuilder, kotlin/Unit>) // dev.kord.rest.service/GuildService.addGuildBan|addGuildBan(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.ban.BanCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createGuild(kotlin/String, kotlin/Function1<dev.kord.rest.builder.guild/GuildCreateBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordGuild // dev.kord.rest.service/GuildService.createGuild|createGuild(kotlin.String;kotlin.Function1<dev.kord.rest.builder.guild.GuildCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createGuildRole(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.role/RoleCreateBuilder, kotlin/Unit> = ...): dev.kord.common.entity/DiscordRole // dev.kord.rest.service/GuildService.createGuildRole|createGuildRole(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.role.RoleCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifyGuild(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.guild/GuildModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordGuild // dev.kord.rest.service/GuildService.modifyGuild|modifyGuild(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.guild.GuildModifyBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifyGuildChannelPosition(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.channel/GuildChannelPositionModifyBuilder, kotlin/Unit>) // dev.kord.rest.service/GuildService.modifyGuildChannelPosition|modifyGuildChannelPosition(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.channel.GuildChannelPositionModifyBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifyGuildIntegration(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.integration/IntegrationModifyBuilder, kotlin/Unit>) // dev.kord.rest.service/GuildService.modifyGuildIntegration|modifyGuildIntegration(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.integration.IntegrationModifyBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifyGuildMember(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.member/MemberModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordGuildMember // dev.kord.rest.service/GuildService.modifyGuildMember|modifyGuildMember(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.member.MemberModifyBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifyGuildOnboarding(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.guild/GuildOnboardingModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordGuildOnboarding // dev.kord.rest.service/GuildService.modifyGuildOnboarding|modifyGuildOnboarding(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.guild.GuildOnboardingModifyBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifyGuildRole(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.role/RoleModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordRole // dev.kord.rest.service/GuildService.modifyGuildRole|modifyGuildRole(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.role.RoleModifyBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifyGuildRolePosition(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.role/RolePositionsModifyBuilder, kotlin/Unit>): kotlin.collections/List<dev.kord.common.entity/DiscordRole> // dev.kord.rest.service/GuildService.modifyGuildRolePosition|modifyGuildRolePosition(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.role.RolePositionsModifyBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifyGuildWidget(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.guild/GuildWidgetModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordGuildWidget // dev.kord.rest.service/GuildService.modifyGuildWidget|modifyGuildWidget(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.guild.GuildWidgetModifyBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.rest.service/InteractionService : dev.kord.rest.service/RestService { // dev.kord.rest.service/InteractionService|null[0]
    constructor <init>(dev.kord.rest.request/RequestHandler) // dev.kord.rest.service/InteractionService.<init>|<init>(dev.kord.rest.request.RequestHandler){}[0]

    final suspend fun createAutoCompleteInteractionResponse(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/DiscordAutoComplete) // dev.kord.rest.service/InteractionService.createAutoCompleteInteractionResponse|createAutoCompleteInteractionResponse(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.DiscordAutoComplete){}[0]
    final suspend fun createFollowupMessage(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.rest.json.request/MultipartFollowupMessageCreateRequest): dev.kord.common.entity/DiscordMessage // dev.kord.rest.service/InteractionService.createFollowupMessage|createFollowupMessage(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.rest.json.request.MultipartFollowupMessageCreateRequest){}[0]
    final suspend fun createGlobalApplicationCommand(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/ApplicationCommandCreateRequest): dev.kord.common.entity/DiscordApplicationCommand // dev.kord.rest.service/InteractionService.createGlobalApplicationCommand|createGlobalApplicationCommand(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.ApplicationCommandCreateRequest){}[0]
    final suspend fun createGlobalApplicationCommands(dev.kord.common.entity/Snowflake, kotlin.collections/List<dev.kord.rest.json.request/ApplicationCommandCreateRequest>): kotlin.collections/List<dev.kord.common.entity/DiscordApplicationCommand> // dev.kord.rest.service/InteractionService.createGlobalApplicationCommands|createGlobalApplicationCommands(dev.kord.common.entity.Snowflake;kotlin.collections.List<dev.kord.rest.json.request.ApplicationCommandCreateRequest>){}[0]
    final suspend fun createGuildApplicationCommand(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/ApplicationCommandCreateRequest): dev.kord.common.entity/DiscordApplicationCommand // dev.kord.rest.service/InteractionService.createGuildApplicationCommand|createGuildApplicationCommand(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.ApplicationCommandCreateRequest){}[0]
    final suspend fun createGuildApplicationCommands(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin.collections/List<dev.kord.rest.json.request/ApplicationCommandCreateRequest>): kotlin.collections/List<dev.kord.common.entity/DiscordApplicationCommand> // dev.kord.rest.service/InteractionService.createGuildApplicationCommands|createGuildApplicationCommands(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.collections.List<dev.kord.rest.json.request.ApplicationCommandCreateRequest>){}[0]
    final suspend fun createInteractionResponse(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.rest.json.request/InteractionResponseCreateRequest) // dev.kord.rest.service/InteractionService.createInteractionResponse|createInteractionResponse(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.rest.json.request.InteractionResponseCreateRequest){}[0]
    final suspend fun createInteractionResponse(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.rest.json.request/MultipartInteractionResponseCreateRequest) // dev.kord.rest.service/InteractionService.createInteractionResponse|createInteractionResponse(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.rest.json.request.MultipartInteractionResponseCreateRequest){}[0]
    final suspend fun createModalInteractionResponse(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/DiscordModal) // dev.kord.rest.service/InteractionService.createModalInteractionResponse|createModalInteractionResponse(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.DiscordModal){}[0]
    final suspend fun deferMessage(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Boolean = ...) // dev.kord.rest.service/InteractionService.deferMessage|deferMessage(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Boolean){}[0]
    final suspend fun deferMessageUpdate(dev.kord.common.entity/Snowflake, kotlin/String) // dev.kord.rest.service/InteractionService.deferMessageUpdate|deferMessageUpdate(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    final suspend fun deleteFollowupMessage(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake) // dev.kord.rest.service/InteractionService.deleteFollowupMessage|deleteFollowupMessage(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun deleteGlobalApplicationCommand(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake) // dev.kord.rest.service/InteractionService.deleteGlobalApplicationCommand|deleteGlobalApplicationCommand(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun deleteGuildApplicationCommand(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake) // dev.kord.rest.service/InteractionService.deleteGuildApplicationCommand|deleteGuildApplicationCommand(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun deleteOriginalInteractionResponse(dev.kord.common.entity/Snowflake, kotlin/String) // dev.kord.rest.service/InteractionService.deleteOriginalInteractionResponse|deleteOriginalInteractionResponse(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    final suspend fun getApplicationCommandPermissions(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.common.entity/DiscordGuildApplicationCommandPermissions // dev.kord.rest.service/InteractionService.getApplicationCommandPermissions|getApplicationCommandPermissions(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getFollowupMessage(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake): dev.kord.common.entity/DiscordMessage // dev.kord.rest.service/InteractionService.getFollowupMessage|getFollowupMessage(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGlobalApplicationCommands(dev.kord.common.entity/Snowflake, kotlin/Boolean? = ...): kotlin.collections/List<dev.kord.common.entity/DiscordApplicationCommand> // dev.kord.rest.service/InteractionService.getGlobalApplicationCommands|getGlobalApplicationCommands(dev.kord.common.entity.Snowflake;kotlin.Boolean?){}[0]
    final suspend fun getGlobalCommand(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.common.entity/DiscordApplicationCommand // dev.kord.rest.service/InteractionService.getGlobalCommand|getGlobalCommand(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildApplicationCommandPermissions(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): kotlin.collections/List<dev.kord.common.entity/DiscordGuildApplicationCommandPermissions> // dev.kord.rest.service/InteractionService.getGuildApplicationCommandPermissions|getGuildApplicationCommandPermissions(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildApplicationCommands(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Boolean? = ...): kotlin.collections/List<dev.kord.common.entity/DiscordApplicationCommand> // dev.kord.rest.service/InteractionService.getGuildApplicationCommands|getGuildApplicationCommands(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Boolean?){}[0]
    final suspend fun getGuildCommand(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.common.entity/DiscordApplicationCommand // dev.kord.rest.service/InteractionService.getGuildCommand|getGuildCommand(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getInteractionResponse(dev.kord.common.entity/Snowflake, kotlin/String): dev.kord.common.entity/DiscordMessage // dev.kord.rest.service/InteractionService.getInteractionResponse|getInteractionResponse(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    final suspend fun modifyFollowupMessage(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/FollowupMessageModifyRequest): dev.kord.common.entity/DiscordMessage // dev.kord.rest.service/InteractionService.modifyFollowupMessage|modifyFollowupMessage(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.FollowupMessageModifyRequest){}[0]
    final suspend fun modifyFollowupMessage(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/MultipartFollowupMessageModifyRequest): dev.kord.common.entity/DiscordMessage // dev.kord.rest.service/InteractionService.modifyFollowupMessage|modifyFollowupMessage(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.MultipartFollowupMessageModifyRequest){}[0]
    final suspend fun modifyGlobalApplicationCommand(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/ApplicationCommandModifyRequest): dev.kord.common.entity/DiscordApplicationCommand // dev.kord.rest.service/InteractionService.modifyGlobalApplicationCommand|modifyGlobalApplicationCommand(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.ApplicationCommandModifyRequest){}[0]
    final suspend fun modifyGuildApplicationCommand(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/ApplicationCommandModifyRequest): dev.kord.common.entity/DiscordApplicationCommand // dev.kord.rest.service/InteractionService.modifyGuildApplicationCommand|modifyGuildApplicationCommand(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.ApplicationCommandModifyRequest){}[0]
    final suspend fun modifyInteractionResponse(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.rest.json.request/InteractionResponseModifyRequest): dev.kord.common.entity/DiscordMessage // dev.kord.rest.service/InteractionService.modifyInteractionResponse|modifyInteractionResponse(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.rest.json.request.InteractionResponseModifyRequest){}[0]
    final suspend fun modifyInteractionResponse(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.rest.json.request/MultipartInteractionResponseModifyRequest): dev.kord.common.entity/DiscordMessage // dev.kord.rest.service/InteractionService.modifyInteractionResponse|modifyInteractionResponse(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.rest.json.request.MultipartInteractionResponseModifyRequest){}[0]
    final suspend inline fun <#A1: dev.kord.rest.builder.interaction/BaseChoiceBuilder<*, *>> createBuilderAutoCompleteInteractionResponse(dev.kord.common.entity/Snowflake, kotlin/String, #A1, kotlin/Function1<#A1, kotlin/Unit>) // dev.kord.rest.service/InteractionService.createBuilderAutoCompleteInteractionResponse|createBuilderAutoCompleteInteractionResponse(dev.kord.common.entity.Snowflake;kotlin.String;0:0;kotlin.Function1<0:0,kotlin.Unit>){0§<dev.kord.rest.builder.interaction.BaseChoiceBuilder<*,*>>}[0]
    final suspend inline fun createFollowupMessage(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Boolean = ..., kotlin/Function1<dev.kord.rest.builder.message.create/FollowupMessageCreateBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordMessage // dev.kord.rest.service/InteractionService.createFollowupMessage|createFollowupMessage(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Boolean;kotlin.Function1<dev.kord.rest.builder.message.create.FollowupMessageCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createGlobalApplicationCommands(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.interaction/GlobalMultiApplicationCommandBuilder, kotlin/Unit>): kotlin.collections/List<dev.kord.common.entity/DiscordApplicationCommand> // dev.kord.rest.service/InteractionService.createGlobalApplicationCommands|createGlobalApplicationCommands(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.interaction.GlobalMultiApplicationCommandBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createGlobalChatInputApplicationCommand(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/GlobalChatInputCreateBuilder, kotlin/Unit> = ...): dev.kord.common.entity/DiscordApplicationCommand // dev.kord.rest.service/InteractionService.createGlobalChatInputApplicationCommand|createGlobalChatInputApplicationCommand(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.GlobalChatInputCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createGlobalMessageCommandApplicationCommand(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/GlobalMessageCommandCreateBuilder, kotlin/Unit> = ...): dev.kord.common.entity/DiscordApplicationCommand // dev.kord.rest.service/InteractionService.createGlobalMessageCommandApplicationCommand|createGlobalMessageCommandApplicationCommand(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.GlobalMessageCommandCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createGlobalUserCommandApplicationCommand(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/GlobalUserCommandCreateBuilder, kotlin/Unit> = ...): dev.kord.common.entity/DiscordApplicationCommand // dev.kord.rest.service/InteractionService.createGlobalUserCommandApplicationCommand|createGlobalUserCommandApplicationCommand(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.GlobalUserCommandCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createGuildApplicationCommands(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.interaction/GuildMultiApplicationCommandBuilder, kotlin/Unit>): kotlin.collections/List<dev.kord.common.entity/DiscordApplicationCommand> // dev.kord.rest.service/InteractionService.createGuildApplicationCommands|createGuildApplicationCommands(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.interaction.GuildMultiApplicationCommandBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createGuildChatInputApplicationCommand(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/ChatInputCreateBuilder, kotlin/Unit> = ...): dev.kord.common.entity/DiscordApplicationCommand // dev.kord.rest.service/InteractionService.createGuildChatInputApplicationCommand|createGuildChatInputApplicationCommand(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.ChatInputCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createGuildMessageCommandApplicationCommand(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/MessageCommandCreateBuilder, kotlin/Unit> = ...): dev.kord.common.entity/DiscordApplicationCommand // dev.kord.rest.service/InteractionService.createGuildMessageCommandApplicationCommand|createGuildMessageCommandApplicationCommand(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.MessageCommandCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createGuildUserCommandApplicationCommand(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/UserCommandCreateBuilder, kotlin/Unit> = ...): dev.kord.common.entity/DiscordApplicationCommand // dev.kord.rest.service/InteractionService.createGuildUserCommandApplicationCommand|createGuildUserCommandApplicationCommand(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.UserCommandCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createIntAutoCompleteInteractionResponse(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/IntegerOptionBuilder, kotlin/Unit>) // dev.kord.rest.service/InteractionService.createIntAutoCompleteInteractionResponse|createIntAutoCompleteInteractionResponse(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.IntegerOptionBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createInteractionResponse(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Boolean = ..., kotlin/Function1<dev.kord.rest.builder.message.create/InteractionResponseCreateBuilder, kotlin/Unit>) // dev.kord.rest.service/InteractionService.createInteractionResponse|createInteractionResponse(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Boolean;kotlin.Function1<dev.kord.rest.builder.message.create.InteractionResponseCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createModalInteractionResponse(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/String, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/ModalBuilder, kotlin/Unit>) // dev.kord.rest.service/InteractionService.createModalInteractionResponse|createModalInteractionResponse(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.ModalBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createNumberAutoCompleteInteractionResponse(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/NumberOptionBuilder, kotlin/Unit>) // dev.kord.rest.service/InteractionService.createNumberAutoCompleteInteractionResponse|createNumberAutoCompleteInteractionResponse(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.NumberOptionBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createStringAutoCompleteInteractionResponse(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/StringChoiceBuilder, kotlin/Unit>) // dev.kord.rest.service/InteractionService.createStringAutoCompleteInteractionResponse|createStringAutoCompleteInteractionResponse(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.StringChoiceBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifyFollowupMessage(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.message.modify/FollowupMessageModifyBuilder, kotlin/Unit> = ...): dev.kord.common.entity/DiscordMessage // dev.kord.rest.service/InteractionService.modifyFollowupMessage|modifyFollowupMessage(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.message.modify.FollowupMessageModifyBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifyGlobalChatInputApplicationCommand(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.interaction/GlobalChatInputModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordApplicationCommand // dev.kord.rest.service/InteractionService.modifyGlobalChatInputApplicationCommand|modifyGlobalChatInputApplicationCommand(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.interaction.GlobalChatInputModifyBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifyGlobalMessageApplicationCommand(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.interaction/GlobalMessageCommandModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordApplicationCommand // dev.kord.rest.service/InteractionService.modifyGlobalMessageApplicationCommand|modifyGlobalMessageApplicationCommand(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.interaction.GlobalMessageCommandModifyBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifyGlobalUserApplicationCommand(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.interaction/GlobalUserCommandModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordApplicationCommand // dev.kord.rest.service/InteractionService.modifyGlobalUserApplicationCommand|modifyGlobalUserApplicationCommand(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.interaction.GlobalUserCommandModifyBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifyGuildChatInputApplicationCommand(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.interaction/ChatInputModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordApplicationCommand // dev.kord.rest.service/InteractionService.modifyGuildChatInputApplicationCommand|modifyGuildChatInputApplicationCommand(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.interaction.ChatInputModifyBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifyGuildMessageApplicationCommand(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.interaction/MessageCommandModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordApplicationCommand // dev.kord.rest.service/InteractionService.modifyGuildMessageApplicationCommand|modifyGuildMessageApplicationCommand(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.interaction.MessageCommandModifyBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifyGuildUserApplicationCommand(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.interaction/UserCommandModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordApplicationCommand // dev.kord.rest.service/InteractionService.modifyGuildUserApplicationCommand|modifyGuildUserApplicationCommand(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.interaction.UserCommandModifyBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifyInteractionResponse(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.message.modify/InteractionResponseModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordMessage // dev.kord.rest.service/InteractionService.modifyInteractionResponse|modifyInteractionResponse(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.message.modify.InteractionResponseModifyBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.rest.service/InviteService : dev.kord.rest.service/RestService { // dev.kord.rest.service/InviteService|null[0]
    constructor <init>(dev.kord.rest.request/RequestHandler) // dev.kord.rest.service/InviteService.<init>|<init>(dev.kord.rest.request.RequestHandler){}[0]

    final suspend fun deleteInvite(kotlin/String, kotlin/String? = ...): dev.kord.common.entity/DiscordInvite // dev.kord.rest.service/InviteService.deleteInvite|deleteInvite(kotlin.String;kotlin.String?){}[0]
    final suspend fun getInvite(kotlin/String, kotlin/Boolean? = ..., kotlin/Boolean? = ..., dev.kord.common.entity/Snowflake? = ...): dev.kord.common.entity/DiscordInvite // dev.kord.rest.service/InviteService.getInvite|getInvite(kotlin.String;kotlin.Boolean?;kotlin.Boolean?;dev.kord.common.entity.Snowflake?){}[0]
}

final class dev.kord.rest.service/RestClient : dev.kord.rest.service/RestService { // dev.kord.rest.service/RestClient|null[0]
    constructor <init>(dev.kord.rest.request/RequestHandler) // dev.kord.rest.service/RestClient.<init>|<init>(dev.kord.rest.request.RequestHandler){}[0]

    final val application // dev.kord.rest.service/RestClient.application|{}application[0]
        final fun <get-application>(): dev.kord.rest.service/ApplicationService // dev.kord.rest.service/RestClient.application.<get-application>|<get-application>(){}[0]
    final val applicationRoleConnectionMetadata // dev.kord.rest.service/RestClient.applicationRoleConnectionMetadata|{}applicationRoleConnectionMetadata[0]
        final fun <get-applicationRoleConnectionMetadata>(): dev.kord.rest.service/ApplicationRoleConnectionMetadataService // dev.kord.rest.service/RestClient.applicationRoleConnectionMetadata.<get-applicationRoleConnectionMetadata>|<get-applicationRoleConnectionMetadata>(){}[0]
    final val auditLog // dev.kord.rest.service/RestClient.auditLog|{}auditLog[0]
        final fun <get-auditLog>(): dev.kord.rest.service/AuditLogService // dev.kord.rest.service/RestClient.auditLog.<get-auditLog>|<get-auditLog>(){}[0]
    final val autoModeration // dev.kord.rest.service/RestClient.autoModeration|{}autoModeration[0]
        final fun <get-autoModeration>(): dev.kord.rest.service/AutoModerationService // dev.kord.rest.service/RestClient.autoModeration.<get-autoModeration>|<get-autoModeration>(){}[0]
    final val channel // dev.kord.rest.service/RestClient.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.rest.service/ChannelService // dev.kord.rest.service/RestClient.channel.<get-channel>|<get-channel>(){}[0]
    final val emoji // dev.kord.rest.service/RestClient.emoji|{}emoji[0]
        final fun <get-emoji>(): dev.kord.rest.service/EmojiService // dev.kord.rest.service/RestClient.emoji.<get-emoji>|<get-emoji>(){}[0]
    final val guild // dev.kord.rest.service/RestClient.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.rest.service/GuildService // dev.kord.rest.service/RestClient.guild.<get-guild>|<get-guild>(){}[0]
    final val interaction // dev.kord.rest.service/RestClient.interaction|{}interaction[0]
        final fun <get-interaction>(): dev.kord.rest.service/InteractionService // dev.kord.rest.service/RestClient.interaction.<get-interaction>|<get-interaction>(){}[0]
    final val invite // dev.kord.rest.service/RestClient.invite|{}invite[0]
        final fun <get-invite>(): dev.kord.rest.service/InviteService // dev.kord.rest.service/RestClient.invite.<get-invite>|<get-invite>(){}[0]
    final val stageInstance // dev.kord.rest.service/RestClient.stageInstance|{}stageInstance[0]
        final fun <get-stageInstance>(): dev.kord.rest.service/StageInstanceService // dev.kord.rest.service/RestClient.stageInstance.<get-stageInstance>|<get-stageInstance>(){}[0]
    final val sticker // dev.kord.rest.service/RestClient.sticker|{}sticker[0]
        final fun <get-sticker>(): dev.kord.rest.service/StickerService // dev.kord.rest.service/RestClient.sticker.<get-sticker>|<get-sticker>(){}[0]
    final val template // dev.kord.rest.service/RestClient.template|{}template[0]
        final fun <get-template>(): dev.kord.rest.service/TemplateService // dev.kord.rest.service/RestClient.template.<get-template>|<get-template>(){}[0]
    final val user // dev.kord.rest.service/RestClient.user|{}user[0]
        final fun <get-user>(): dev.kord.rest.service/UserService // dev.kord.rest.service/RestClient.user.<get-user>|<get-user>(){}[0]
    final val voice // dev.kord.rest.service/RestClient.voice|{}voice[0]
        final fun <get-voice>(): dev.kord.rest.service/VoiceService // dev.kord.rest.service/RestClient.voice.<get-voice>|<get-voice>(){}[0]
    final val webhook // dev.kord.rest.service/RestClient.webhook|{}webhook[0]
        final fun <get-webhook>(): dev.kord.rest.service/WebhookService // dev.kord.rest.service/RestClient.webhook.<get-webhook>|<get-webhook>(){}[0]

    final suspend inline fun <#A1: kotlin/Any?> unsafe(dev.kord.rest.route/Route<#A1>, kotlin/Function1<dev.kord.rest.request/RequestBuilder<#A1>, kotlin/Unit>): #A1 // dev.kord.rest.service/RestClient.unsafe|unsafe(dev.kord.rest.route.Route<0:0>;kotlin.Function1<dev.kord.rest.request.RequestBuilder<0:0>,kotlin.Unit>){0§<kotlin.Any?>}[0]
}

final class dev.kord.rest.service/StageInstanceService : dev.kord.rest.service/RestService { // dev.kord.rest.service/StageInstanceService|null[0]
    constructor <init>(dev.kord.rest.request/RequestHandler) // dev.kord.rest.service/StageInstanceService.<init>|<init>(dev.kord.rest.request.RequestHandler){}[0]

    final suspend fun createStageInstance(dev.kord.rest.json.request/StageInstanceCreateRequest, kotlin/String? = ...): dev.kord.common.entity/DiscordStageInstance // dev.kord.rest.service/StageInstanceService.createStageInstance|createStageInstance(dev.kord.rest.json.request.StageInstanceCreateRequest;kotlin.String?){}[0]
    final suspend fun deleteStageInstance(dev.kord.common.entity/Snowflake, kotlin/String? = ...) // dev.kord.rest.service/StageInstanceService.deleteStageInstance|deleteStageInstance(dev.kord.common.entity.Snowflake;kotlin.String?){}[0]
    final suspend fun getStageInstance(dev.kord.common.entity/Snowflake): dev.kord.common.entity/DiscordStageInstance // dev.kord.rest.service/StageInstanceService.getStageInstance|getStageInstance(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun modifyStageInstance(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/StageInstanceModifyRequest, kotlin/String? = ...): dev.kord.common.entity/DiscordStageInstance // dev.kord.rest.service/StageInstanceService.modifyStageInstance|modifyStageInstance(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.StageInstanceModifyRequest;kotlin.String?){}[0]
    final suspend inline fun createStageInstance(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.stage/StageInstanceCreateBuilder, kotlin/Unit> = ...): dev.kord.common.entity/DiscordStageInstance // dev.kord.rest.service/StageInstanceService.createStageInstance|createStageInstance(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.stage.StageInstanceCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifyStageInstance(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.stage/StageInstanceModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordStageInstance // dev.kord.rest.service/StageInstanceService.modifyStageInstance|modifyStageInstance(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.stage.StageInstanceModifyBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.rest.service/StickerService : dev.kord.rest.service/RestService { // dev.kord.rest.service/StickerService|null[0]
    constructor <init>(dev.kord.rest.request/RequestHandler) // dev.kord.rest.service/StickerService.<init>|<init>(dev.kord.rest.request.RequestHandler){}[0]

    final suspend fun createGuildSticker(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/MultipartGuildStickerCreateRequest): dev.kord.common.entity/DiscordMessageSticker // dev.kord.rest.service/StickerService.createGuildSticker|createGuildSticker(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.MultipartGuildStickerCreateRequest){}[0]
    final suspend fun deleteSticker(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake) // dev.kord.rest.service/StickerService.deleteSticker|deleteSticker(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildSticker(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.common.entity/DiscordMessageSticker // dev.kord.rest.service/StickerService.getGuildSticker|getGuildSticker(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildStickers(dev.kord.common.entity/Snowflake): kotlin.collections/List<dev.kord.common.entity/DiscordMessageSticker> // dev.kord.rest.service/StickerService.getGuildStickers|getGuildStickers(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getNitroStickerPacks(): dev.kord.rest.json.response/NitroStickerPacksResponse // dev.kord.rest.service/StickerService.getNitroStickerPacks|getNitroStickerPacks(){}[0]
    final suspend fun getSticker(dev.kord.common.entity/Snowflake): dev.kord.common.entity/DiscordMessageSticker // dev.kord.rest.service/StickerService.getSticker|getSticker(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun modifyGuildSticker(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/GuildStickerModifyRequest): dev.kord.common.entity/DiscordMessageSticker // dev.kord.rest.service/StickerService.modifyGuildSticker|modifyGuildSticker(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.GuildStickerModifyRequest){}[0]
    final suspend inline fun modifyGuildSticker(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.guild/StickerModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordMessageSticker // dev.kord.rest.service/StickerService.modifyGuildSticker|modifyGuildSticker(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.guild.StickerModifyBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.rest.service/TemplateService : dev.kord.rest.service/RestService { // dev.kord.rest.service/TemplateService|null[0]
    constructor <init>(dev.kord.rest.request/RequestHandler) // dev.kord.rest.service/TemplateService.<init>|<init>(dev.kord.rest.request.RequestHandler){}[0]

    final suspend fun createGuildFromTemplate(kotlin/String, dev.kord.rest.json.request/GuildFromTemplateCreateRequest): dev.kord.common.entity/DiscordGuild // dev.kord.rest.service/TemplateService.createGuildFromTemplate|createGuildFromTemplate(kotlin.String;dev.kord.rest.json.request.GuildFromTemplateCreateRequest){}[0]
    final suspend fun createGuildTemplate(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/GuildTemplateCreateRequest): dev.kord.common.entity/DiscordTemplate // dev.kord.rest.service/TemplateService.createGuildTemplate|createGuildTemplate(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.GuildTemplateCreateRequest){}[0]
    final suspend fun deleteGuildTemplate(dev.kord.common.entity/Snowflake, kotlin/String): dev.kord.common.entity/DiscordTemplate // dev.kord.rest.service/TemplateService.deleteGuildTemplate|deleteGuildTemplate(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    final suspend fun getGuildTemplate(kotlin/String): dev.kord.common.entity/DiscordTemplate // dev.kord.rest.service/TemplateService.getGuildTemplate|getGuildTemplate(kotlin.String){}[0]
    final suspend fun getGuildTemplates(dev.kord.common.entity/Snowflake): kotlin.collections/List<dev.kord.common.entity/DiscordTemplate> // dev.kord.rest.service/TemplateService.getGuildTemplates|getGuildTemplates(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun modifyGuildTemplate(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.rest.json.request/GuildTemplateModifyRequest): dev.kord.common.entity/DiscordTemplate // dev.kord.rest.service/TemplateService.modifyGuildTemplate|modifyGuildTemplate(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.rest.json.request.GuildTemplateModifyRequest){}[0]
    final suspend fun syncGuildTemplate(dev.kord.common.entity/Snowflake, kotlin/String): dev.kord.common.entity/DiscordTemplate // dev.kord.rest.service/TemplateService.syncGuildTemplate|syncGuildTemplate(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    final suspend inline fun createGuildFromTemplate(kotlin/String, kotlin/String, kotlin/Function1<dev.kord.rest.builder.template/GuildFromTemplateCreateBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordGuild // dev.kord.rest.service/TemplateService.createGuildFromTemplate|createGuildFromTemplate(kotlin.String;kotlin.String;kotlin.Function1<dev.kord.rest.builder.template.GuildFromTemplateCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createGuildTemplate(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.template/GuildTemplateCreateBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordTemplate // dev.kord.rest.service/TemplateService.createGuildTemplate|createGuildTemplate(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.template.GuildTemplateCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifyGuildTemplate(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.template/GuildTemplateModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordTemplate // dev.kord.rest.service/TemplateService.modifyGuildTemplate|modifyGuildTemplate(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.template.GuildTemplateModifyBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.rest.service/UserService : dev.kord.rest.service/RestService { // dev.kord.rest.service/UserService|null[0]
    constructor <init>(dev.kord.rest.request/RequestHandler) // dev.kord.rest.service/UserService.<init>|<init>(dev.kord.rest.request.RequestHandler){}[0]

    final suspend fun createDM(dev.kord.rest.json.request/DMCreateRequest): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/UserService.createDM|createDM(dev.kord.rest.json.request.DMCreateRequest){}[0]
    final suspend fun getCurrentUser(): dev.kord.common.entity/DiscordUser // dev.kord.rest.service/UserService.getCurrentUser|getCurrentUser(){}[0]
    final suspend fun getCurrentUserGuilds(dev.kord.rest.route/Position.BeforeOrAfter? = ..., kotlin/Int? = ..., kotlin/Boolean? = ...): kotlin.collections/List<dev.kord.common.entity/DiscordPartialGuild> // dev.kord.rest.service/UserService.getCurrentUserGuilds|getCurrentUserGuilds(dev.kord.rest.route.Position.BeforeOrAfter?;kotlin.Int?;kotlin.Boolean?){}[0]
    final suspend fun getUser(dev.kord.common.entity/Snowflake): dev.kord.common.entity/DiscordUser // dev.kord.rest.service/UserService.getUser|getUser(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getUserConnections(): kotlin.collections/List<dev.kord.rest.json.response/Connection> // dev.kord.rest.service/UserService.getUserConnections|getUserConnections(){}[0]
    final suspend fun leaveGuild(dev.kord.common.entity/Snowflake) // dev.kord.rest.service/UserService.leaveGuild|leaveGuild(dev.kord.common.entity.Snowflake){}[0]
    final suspend inline fun createGroupDM(kotlin/Function1<dev.kord.rest.builder.user/GroupDMCreateBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/UserService.createGroupDM|createGroupDM(kotlin.Function1<dev.kord.rest.builder.user.GroupDMCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifyCurrentUser(kotlin/Function1<dev.kord.rest.builder.user/CurrentUserModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordUser // dev.kord.rest.service/UserService.modifyCurrentUser|modifyCurrentUser(kotlin.Function1<dev.kord.rest.builder.user.CurrentUserModifyBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.rest.service/VoiceService : dev.kord.rest.service/RestService { // dev.kord.rest.service/VoiceService|null[0]
    constructor <init>(dev.kord.rest.request/RequestHandler) // dev.kord.rest.service/VoiceService.<init>|<init>(dev.kord.rest.request.RequestHandler){}[0]

    final suspend fun getVoiceRegions(): kotlin.collections/List<dev.kord.common.entity/DiscordVoiceRegion> // dev.kord.rest.service/VoiceService.getVoiceRegions|getVoiceRegions(){}[0]
}

final class dev.kord.rest.service/WebhookService : dev.kord.rest.service/RestService { // dev.kord.rest.service/WebhookService|null[0]
    constructor <init>(dev.kord.rest.request/RequestHandler) // dev.kord.rest.service/WebhookService.<init>|<init>(dev.kord.rest.request.RequestHandler){}[0]

    final suspend fun deleteWebhook(dev.kord.common.entity/Snowflake, kotlin/String? = ...) // dev.kord.rest.service/WebhookService.deleteWebhook|deleteWebhook(dev.kord.common.entity.Snowflake;kotlin.String?){}[0]
    final suspend fun deleteWebhookMessage(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake? = ...) // dev.kord.rest.service/WebhookService.deleteWebhookMessage|deleteWebhookMessage(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?){}[0]
    final suspend fun deleteWebhookWithToken(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/String? = ...) // dev.kord.rest.service/WebhookService.deleteWebhookWithToken|deleteWebhookWithToken(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String?){}[0]
    final suspend fun executeGithubWebhook(dev.kord.common.entity/Snowflake, kotlin/String, kotlinx.serialization.json/JsonObject, kotlin/Boolean? = ..., dev.kord.common.entity/Snowflake? = ...) // dev.kord.rest.service/WebhookService.executeGithubWebhook|executeGithubWebhook(dev.kord.common.entity.Snowflake;kotlin.String;kotlinx.serialization.json.JsonObject;kotlin.Boolean?;dev.kord.common.entity.Snowflake?){}[0]
    final suspend fun executeSlackWebhook(dev.kord.common.entity/Snowflake, kotlin/String, kotlinx.serialization.json/JsonObject, kotlin/Boolean? = ..., dev.kord.common.entity/Snowflake? = ...) // dev.kord.rest.service/WebhookService.executeSlackWebhook|executeSlackWebhook(dev.kord.common.entity.Snowflake;kotlin.String;kotlinx.serialization.json.JsonObject;kotlin.Boolean?;dev.kord.common.entity.Snowflake?){}[0]
    final suspend fun getChannelWebhooks(dev.kord.common.entity/Snowflake): kotlin.collections/List<dev.kord.common.entity/DiscordWebhook> // dev.kord.rest.service/WebhookService.getChannelWebhooks|getChannelWebhooks(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildWebhooks(dev.kord.common.entity/Snowflake): kotlin.collections/List<dev.kord.common.entity/DiscordWebhook> // dev.kord.rest.service/WebhookService.getGuildWebhooks|getGuildWebhooks(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getWebhook(dev.kord.common.entity/Snowflake): dev.kord.common.entity/DiscordWebhook // dev.kord.rest.service/WebhookService.getWebhook|getWebhook(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getWebhookMessage(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake? = ...): dev.kord.common.entity/DiscordMessage // dev.kord.rest.service/WebhookService.getWebhookMessage|getWebhookMessage(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?){}[0]
    final suspend fun getWebhookWithToken(dev.kord.common.entity/Snowflake, kotlin/String): dev.kord.common.entity/DiscordWebhook // dev.kord.rest.service/WebhookService.getWebhookWithToken|getWebhookWithToken(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    final suspend inline fun createWebhook(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.webhook/WebhookCreateBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordWebhook // dev.kord.rest.service/WebhookService.createWebhook|createWebhook(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.webhook.WebhookCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun editWebhookMessage(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake? = ..., kotlin/Function1<dev.kord.rest.builder.message.modify/WebhookMessageModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordMessage // dev.kord.rest.service/WebhookService.editWebhookMessage|editWebhookMessage(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?;kotlin.Function1<dev.kord.rest.builder.message.modify.WebhookMessageModifyBuilder,kotlin.Unit>){}[0]
    final suspend inline fun executeWebhook(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Boolean? = ..., dev.kord.common.entity/Snowflake? = ..., kotlin/Function1<dev.kord.rest.builder.message.create/WebhookMessageCreateBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordMessage? // dev.kord.rest.service/WebhookService.executeWebhook|executeWebhook(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Boolean?;dev.kord.common.entity.Snowflake?;kotlin.Function1<dev.kord.rest.builder.message.create.WebhookMessageCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifyWebhook(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.webhook/WebhookModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordWebhook // dev.kord.rest.service/WebhookService.modifyWebhook|modifyWebhook(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.webhook.WebhookModifyBuilder,kotlin.Unit>){}[0]
    final suspend inline fun modifyWebhookWithToken(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.webhook/WebhookModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordWebhook // dev.kord.rest.service/WebhookService.modifyWebhookWithToken|modifyWebhookWithToken(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.webhook.WebhookModifyBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.rest/Image { // dev.kord.rest/Image|null[0]
    final val data // dev.kord.rest/Image.data|{}data[0]
        final fun <get-data>(): kotlin/ByteArray // dev.kord.rest/Image.data.<get-data>|<get-data>(){}[0]
    final val dataUri // dev.kord.rest/Image.dataUri|{}dataUri[0]
        final fun <get-dataUri>(): kotlin/String // dev.kord.rest/Image.dataUri.<get-dataUri>|<get-dataUri>(){}[0]
    final val format // dev.kord.rest/Image.format|{}format[0]
        final fun <get-format>(): dev.kord.rest/Image.Format // dev.kord.rest/Image.format.<get-format>|<get-format>(){}[0]

    final enum class Size : kotlin/Enum<dev.kord.rest/Image.Size> { // dev.kord.rest/Image.Size|null[0]
        enum entry Size1024 // dev.kord.rest/Image.Size.Size1024|null[0]
        enum entry Size128 // dev.kord.rest/Image.Size.Size128|null[0]
        enum entry Size16 // dev.kord.rest/Image.Size.Size16|null[0]
        enum entry Size2048 // dev.kord.rest/Image.Size.Size2048|null[0]
        enum entry Size256 // dev.kord.rest/Image.Size.Size256|null[0]
        enum entry Size32 // dev.kord.rest/Image.Size.Size32|null[0]
        enum entry Size4096 // dev.kord.rest/Image.Size.Size4096|null[0]
        enum entry Size512 // dev.kord.rest/Image.Size.Size512|null[0]
        enum entry Size64 // dev.kord.rest/Image.Size.Size64|null[0]

        final val entries // dev.kord.rest/Image.Size.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<dev.kord.rest/Image.Size> // dev.kord.rest/Image.Size.entries.<get-entries>|<get-entries>#static(){}[0]
        final val maxRes // dev.kord.rest/Image.Size.maxRes|{}maxRes[0]
            final fun <get-maxRes>(): kotlin/Int // dev.kord.rest/Image.Size.maxRes.<get-maxRes>|<get-maxRes>(){}[0]

        final fun valueOf(kotlin/String): dev.kord.rest/Image.Size // dev.kord.rest/Image.Size.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<dev.kord.rest/Image.Size> // dev.kord.rest/Image.Size.values|values#static(){}[0]
    }

    sealed class Format { // dev.kord.rest/Image.Format|null[0]
        constructor <init>(kotlin.collections/List<kotlin/String>) // dev.kord.rest/Image.Format.<init>|<init>(kotlin.collections.List<kotlin.String>){}[0]
        constructor <init>(kotlin/Array<out kotlin/String>...) // dev.kord.rest/Image.Format.<init>|<init>(kotlin.Array<out|kotlin.String>...){}[0]

        final val extension // dev.kord.rest/Image.Format.extension|{}extension[0]
            final fun <get-extension>(): kotlin/String // dev.kord.rest/Image.Format.extension.<get-extension>|<get-extension>(){}[0]
        final val extensions // dev.kord.rest/Image.Format.extensions|{}extensions[0]
            final fun <get-extensions>(): kotlin.collections/List<kotlin/String> // dev.kord.rest/Image.Format.extensions.<get-extensions>|<get-extensions>(){}[0]

        final object Companion { // dev.kord.rest/Image.Format.Companion|null[0]
            final val values // dev.kord.rest/Image.Format.Companion.values|{}values[0]
                final fun <get-values>(): kotlin.collections/Set<dev.kord.rest/Image.Format> // dev.kord.rest/Image.Format.Companion.values.<get-values>|<get-values>(){}[0]

            final fun fromContentType(kotlin/String): dev.kord.rest/Image.Format // dev.kord.rest/Image.Format.Companion.fromContentType|fromContentType(kotlin.String){}[0]
            final fun isSupported(kotlin/String): kotlin/Boolean // dev.kord.rest/Image.Format.Companion.isSupported|isSupported(kotlin.String){}[0]
        }

        final object GIF : dev.kord.rest/Image.Format // dev.kord.rest/Image.Format.GIF|null[0]

        final object JPEG : dev.kord.rest/Image.Format // dev.kord.rest/Image.Format.JPEG|null[0]

        final object LOTTIE : dev.kord.rest/Image.Format // dev.kord.rest/Image.Format.LOTTIE|null[0]

        final object PNG : dev.kord.rest/Image.Format // dev.kord.rest/Image.Format.PNG|null[0]

        final object WEBP : dev.kord.rest/Image.Format // dev.kord.rest/Image.Format.WEBP|null[0]
    }

    final object Companion { // dev.kord.rest/Image.Companion|null[0]
        final fun raw(kotlin/ByteArray, dev.kord.rest/Image.Format): dev.kord.rest/Image // dev.kord.rest/Image.Companion.raw|raw(kotlin.ByteArray;dev.kord.rest.Image.Format){}[0]
        final suspend fun fromUrl(io.ktor.client/HttpClient, kotlin/String): dev.kord.rest/Image // dev.kord.rest/Image.Companion.fromUrl|fromUrl(io.ktor.client.HttpClient;kotlin.String){}[0]
    }
}

final class dev.kord.rest/NamedFile { // dev.kord.rest/NamedFile|null[0]
    constructor <init>(kotlin/String, io.ktor.client.request.forms/ChannelProvider) // dev.kord.rest/NamedFile.<init>|<init>(kotlin.String;io.ktor.client.request.forms.ChannelProvider){}[0]

    final val contentProvider // dev.kord.rest/NamedFile.contentProvider|{}contentProvider[0]
        final fun <get-contentProvider>(): io.ktor.client.request.forms/ChannelProvider // dev.kord.rest/NamedFile.contentProvider.<get-contentProvider>|<get-contentProvider>(){}[0]
    final val name // dev.kord.rest/NamedFile.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest/NamedFile.name.<get-name>|<get-name>(){}[0]
    final val url // dev.kord.rest/NamedFile.url|{}url[0]
        final fun <get-url>(): kotlin/String // dev.kord.rest/NamedFile.url.<get-url>|<get-url>(){}[0]

    final fun component1(): kotlin/String // dev.kord.rest/NamedFile.component1|component1(){}[0]
    final fun component2(): io.ktor.client.request.forms/ChannelProvider // dev.kord.rest/NamedFile.component2|component2(){}[0]
    final fun component3(): kotlin/String // dev.kord.rest/NamedFile.component3|component3(){}[0]
}

final value class dev.kord.rest.ratelimit/BucketKey { // dev.kord.rest.ratelimit/BucketKey|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.ratelimit/BucketKey.<init>|<init>(kotlin.String){}[0]

    final val value // dev.kord.rest.ratelimit/BucketKey.value|{}value[0]
        final fun <get-value>(): kotlin/String // dev.kord.rest.ratelimit/BucketKey.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.ratelimit/BucketKey.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.ratelimit/BucketKey.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.ratelimit/BucketKey.toString|toString(){}[0]
}

final value class dev.kord.rest.ratelimit/Remaining { // dev.kord.rest.ratelimit/Remaining|null[0]
    constructor <init>(kotlin/Long) // dev.kord.rest.ratelimit/Remaining.<init>|<init>(kotlin.Long){}[0]

    final val value // dev.kord.rest.ratelimit/Remaining.value|{}value[0]
        final fun <get-value>(): kotlin/Long // dev.kord.rest.ratelimit/Remaining.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.ratelimit/Remaining.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.ratelimit/Remaining.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.ratelimit/Remaining.toString|toString(){}[0]
}

final value class dev.kord.rest.ratelimit/Reset { // dev.kord.rest.ratelimit/Reset|null[0]
    constructor <init>(kotlinx.datetime/Instant) // dev.kord.rest.ratelimit/Reset.<init>|<init>(kotlinx.datetime.Instant){}[0]

    final val value // dev.kord.rest.ratelimit/Reset.value|{}value[0]
        final fun <get-value>(): kotlinx.datetime/Instant // dev.kord.rest.ratelimit/Reset.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.ratelimit/Reset.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.ratelimit/Reset.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.ratelimit/Reset.toString|toString(){}[0]
}

final value class dev.kord.rest.ratelimit/Total { // dev.kord.rest.ratelimit/Total|null[0]
    constructor <init>(kotlin/Long) // dev.kord.rest.ratelimit/Total.<init>|<init>(kotlin.Long){}[0]

    final val value // dev.kord.rest.ratelimit/Total.value|{}value[0]
        final fun <get-value>(): kotlin/Long // dev.kord.rest.ratelimit/Total.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.ratelimit/Total.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.rest.ratelimit/Total.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.rest.ratelimit/Total.toString|toString(){}[0]
}

sealed class <#A: kotlin/Any, #B: kotlin/Any?> dev.kord.rest.request/Request { // dev.kord.rest.request/Request|null[0]
    constructor <init>(kotlin/String = ...) // dev.kord.rest.request/Request.<init>|<init>(kotlin.String){}[0]

    abstract val body // dev.kord.rest.request/Request.body|{}body[0]
        abstract fun <get-body>(): dev.kord.rest.request/RequestBody<#A>? // dev.kord.rest.request/Request.body.<get-body>|<get-body>(){}[0]
    abstract val files // dev.kord.rest.request/Request.files|{}files[0]
        abstract fun <get-files>(): kotlin.collections/List<dev.kord.rest/NamedFile>? // dev.kord.rest.request/Request.files.<get-files>|<get-files>(){}[0]
    abstract val headers // dev.kord.rest.request/Request.headers|{}headers[0]
        abstract fun <get-headers>(): io.ktor.util/StringValues // dev.kord.rest.request/Request.headers.<get-headers>|<get-headers>(){}[0]
    abstract val parameters // dev.kord.rest.request/Request.parameters|{}parameters[0]
        abstract fun <get-parameters>(): io.ktor.util/StringValues // dev.kord.rest.request/Request.parameters.<get-parameters>|<get-parameters>(){}[0]
    abstract val route // dev.kord.rest.request/Request.route|{}route[0]
        abstract fun <get-route>(): dev.kord.rest.route/Route<#B> // dev.kord.rest.request/Request.route.<get-route>|<get-route>(){}[0]
    abstract val routeParams // dev.kord.rest.request/Request.routeParams|{}routeParams[0]
        abstract fun <get-routeParams>(): kotlin.collections/Map<dev.kord.rest.route/Route.Key, kotlin/String> // dev.kord.rest.request/Request.routeParams.<get-routeParams>|<get-routeParams>(){}[0]
    final val baseUrl // dev.kord.rest.request/Request.baseUrl|{}baseUrl[0]
        final fun <get-baseUrl>(): kotlin/String // dev.kord.rest.request/Request.baseUrl.<get-baseUrl>|<get-baseUrl>(){}[0]
    final val path // dev.kord.rest.request/Request.path|{}path[0]
        final fun <get-path>(): kotlin/String // dev.kord.rest.request/Request.path.<get-path>|<get-path>(){}[0]
}

sealed class <#A: kotlin/Any?, #B: dev.kord.common.entity/Choice> dev.kord.rest.builder.interaction/BaseChoiceBuilder : dev.kord.rest.builder.interaction/OptionsBuilder { // dev.kord.rest.builder.interaction/BaseChoiceBuilder|null[0]
    constructor <init>(kotlin/String, kotlin/String, dev.kord.common.entity/ApplicationCommandOptionType) // dev.kord.rest.builder.interaction/BaseChoiceBuilder.<init>|<init>(kotlin.String;kotlin.String;dev.kord.common.entity.ApplicationCommandOptionType){}[0]

    final var choices // dev.kord.rest.builder.interaction/BaseChoiceBuilder.choices|{}choices[0]
        final fun <get-choices>(): kotlin.collections/MutableList<#B>? // dev.kord.rest.builder.interaction/BaseChoiceBuilder.choices.<get-choices>|<get-choices>(){}[0]
        final fun <set-choices>(kotlin.collections/MutableList<#B>?) // dev.kord.rest.builder.interaction/BaseChoiceBuilder.choices.<set-choices>|<set-choices>(kotlin.collections.MutableList<1:1>?){}[0]

    abstract fun choice(kotlin/String, #A, dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> = ...) // dev.kord.rest.builder.interaction/BaseChoiceBuilder.choice|choice(kotlin.String;1:0;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>){}[0]
    final inline fun choice(kotlin/String, #A, kotlin/Function1<dev.kord.rest.builder.interaction/ChoiceLocalizationsBuilder, kotlin/Unit>) // dev.kord.rest.builder.interaction/BaseChoiceBuilder.choice|choice(kotlin.String;1:0;kotlin.Function1<dev.kord.rest.builder.interaction.ChoiceLocalizationsBuilder,kotlin.Unit>){}[0]
    open fun toRequest(): dev.kord.common.entity/ApplicationCommandOption // dev.kord.rest.builder.interaction/BaseChoiceBuilder.toRequest|toRequest(){}[0]
}

sealed class <#A: kotlin/Any?> dev.kord.rest.route/Route { // dev.kord.rest.route/Route|null[0]
    constructor <init>(io.ktor.http/HttpMethod, kotlin/String, dev.kord.rest.route/ResponseMapper<#A>, kotlin/Boolean = ...) // dev.kord.rest.route/Route.<init>|<init>(io.ktor.http.HttpMethod;kotlin.String;dev.kord.rest.route.ResponseMapper<1:0>;kotlin.Boolean){}[0]
    constructor <init>(io.ktor.http/HttpMethod, kotlin/String, kotlinx.serialization/DeserializationStrategy<#A>, kotlin/Boolean = ...) // dev.kord.rest.route/Route.<init>|<init>(io.ktor.http.HttpMethod;kotlin.String;kotlinx.serialization.DeserializationStrategy<1:0>;kotlin.Boolean){}[0]

    final val mapper // dev.kord.rest.route/Route.mapper|{}mapper[0]
        final fun <get-mapper>(): dev.kord.rest.route/ResponseMapper<#A> // dev.kord.rest.route/Route.mapper.<get-mapper>|<get-mapper>(){}[0]
    final val method // dev.kord.rest.route/Route.method|{}method[0]
        final fun <get-method>(): io.ktor.http/HttpMethod // dev.kord.rest.route/Route.method.<get-method>|<get-method>(){}[0]
    final val path // dev.kord.rest.route/Route.path|{}path[0]
        final fun <get-path>(): kotlin/String // dev.kord.rest.route/Route.path.<get-path>|<get-path>(){}[0]
    final val requiresAuthorizationHeader // dev.kord.rest.route/Route.requiresAuthorizationHeader|{}requiresAuthorizationHeader[0]
        final fun <get-requiresAuthorizationHeader>(): kotlin/Boolean // dev.kord.rest.route/Route.requiresAuthorizationHeader.<get-requiresAuthorizationHeader>|<get-requiresAuthorizationHeader>(){}[0]

    open fun toString(): kotlin/String // dev.kord.rest.route/Route.toString|toString(){}[0]

    open class Key { // dev.kord.rest.route/Route.Key|null[0]
        constructor <init>(kotlin/String, kotlin/Boolean = ...) // dev.kord.rest.route/Route.Key.<init>|<init>(kotlin.String;kotlin.Boolean){}[0]

        final val identifier // dev.kord.rest.route/Route.Key.identifier|{}identifier[0]
            final fun <get-identifier>(): kotlin/String // dev.kord.rest.route/Route.Key.identifier.<get-identifier>|<get-identifier>(){}[0]
        final val isMajor // dev.kord.rest.route/Route.Key.isMajor|{}isMajor[0]
            final fun <get-isMajor>(): kotlin/Boolean // dev.kord.rest.route/Route.Key.isMajor.<get-isMajor>|<get-isMajor>(){}[0]

        open fun toString(): kotlin/String // dev.kord.rest.route/Route.Key.toString|toString(){}[0]
    }

    final object ActiveThreadsGet : dev.kord.rest.route/Route<dev.kord.rest.json.response/ListThreadsResponse> // dev.kord.rest.route/Route.ActiveThreadsGet|null[0]

    final object AddThreadMemberPut : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.AddThreadMemberPut|null[0]

    final object AllReactionsDelete : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.AllReactionsDelete|null[0]

    final object ApplicationCommandPermissionsGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordGuildApplicationCommandPermissions> // dev.kord.rest.route/Route.ApplicationCommandPermissionsGet|null[0]

    final object ApplicationId : dev.kord.rest.route/Route.Key // dev.kord.rest.route/Route.ApplicationId|null[0]

    final object ApplicationRoleConnectionMetadataRecordsGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata>> // dev.kord.rest.route/Route.ApplicationRoleConnectionMetadataRecordsGet|null[0]

    final object ApplicationRoleConnectionMetadataRecordsUpdate : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata>> // dev.kord.rest.route/Route.ApplicationRoleConnectionMetadataRecordsUpdate|null[0]

    final object AuditLogGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordAuditLog> // dev.kord.rest.route/Route.AuditLogGet|null[0]

    final object AutoModerationRuleCreate : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordAutoModerationRule> // dev.kord.rest.route/Route.AutoModerationRuleCreate|null[0]

    final object AutoModerationRuleDelete : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.AutoModerationRuleDelete|null[0]

    final object AutoModerationRuleGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordAutoModerationRule> // dev.kord.rest.route/Route.AutoModerationRuleGet|null[0]

    final object AutoModerationRuleId : dev.kord.rest.route/Route.Key // dev.kord.rest.route/Route.AutoModerationRuleId|null[0]

    final object AutoModerationRuleModify : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordAutoModerationRule> // dev.kord.rest.route/Route.AutoModerationRuleModify|null[0]

    final object AutoModerationRulesForGuildList : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordAutoModerationRule>> // dev.kord.rest.route/Route.AutoModerationRulesForGuildList|null[0]

    final object BulkMessageDeletePost : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.BulkMessageDeletePost|null[0]

    final object ChannelDelete : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordChannel> // dev.kord.rest.route/Route.ChannelDelete|null[0]

    final object ChannelGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordChannel> // dev.kord.rest.route/Route.ChannelGet|null[0]

    final object ChannelId : dev.kord.rest.route/Route.Key // dev.kord.rest.route/Route.ChannelId|null[0]

    final object ChannelPatch : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordChannel> // dev.kord.rest.route/Route.ChannelPatch|null[0]

    final object ChannelPermissionDelete : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.ChannelPermissionDelete|null[0]

    final object ChannelPermissionPut : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.ChannelPermissionPut|null[0]

    final object ChannelPut : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordChannel> // dev.kord.rest.route/Route.ChannelPut|null[0]

    final object ChannelWebhooksGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordWebhook>> // dev.kord.rest.route/Route.ChannelWebhooksGet|null[0]

    final object CommandId : dev.kord.rest.route/Route.Key // dev.kord.rest.route/Route.CommandId|null[0]

    final object Companion { // dev.kord.rest.route/Route.Companion|null[0]
        final val baseUrl // dev.kord.rest.route/Route.Companion.baseUrl|{}baseUrl[0]
            final fun <get-baseUrl>(): kotlin/String // dev.kord.rest.route/Route.Companion.baseUrl.<get-baseUrl>|<get-baseUrl>(){}[0]
    }

    final object CurrentApplicationInfo : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordApplication> // dev.kord.rest.route/Route.CurrentApplicationInfo|null[0]

    final object CurrentUserGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordUser> // dev.kord.rest.route/Route.CurrentUserGet|null[0]

    final object CurrentUserPatch : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordUser> // dev.kord.rest.route/Route.CurrentUserPatch|null[0]

    final object CurrentUsersGuildsGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordPartialGuild>> // dev.kord.rest.route/Route.CurrentUsersGuildsGet|null[0]

    final object DMPost : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordChannel> // dev.kord.rest.route/Route.DMPost|null[0]

    final object DeleteAllReactionsForEmoji : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.DeleteAllReactionsForEmoji|null[0]

    final object DeleteWebhookMessage : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.DeleteWebhookMessage|null[0]

    final object EditMessagePatch : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordMessage> // dev.kord.rest.route/Route.EditMessagePatch|null[0]

    final object EditWebhookMessage : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordMessage> // dev.kord.rest.route/Route.EditWebhookMessage|null[0]

    final object Emoji : dev.kord.rest.route/Route.Key // dev.kord.rest.route/Route.Emoji|null[0]

    final object EmojiId : dev.kord.rest.route/Route.Key // dev.kord.rest.route/Route.EmojiId|null[0]

    final object ExecuteGithubWebhookPost : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.ExecuteGithubWebhookPost|null[0]

    final object ExecuteSlackWebhookPost : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.ExecuteSlackWebhookPost|null[0]

    final object ExecuteWebhookPost : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordMessage?> // dev.kord.rest.route/Route.ExecuteWebhookPost|null[0]

    final object FollowupMessageCreate : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordMessage> // dev.kord.rest.route/Route.FollowupMessageCreate|null[0]

    final object FollowupMessageDelete : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.FollowupMessageDelete|null[0]

    final object FollowupMessageGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordMessage> // dev.kord.rest.route/Route.FollowupMessageGet|null[0]

    final object FollowupMessageModify : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordMessage> // dev.kord.rest.route/Route.FollowupMessageModify|null[0]

    final object GatewayBotGet : dev.kord.rest.route/Route<dev.kord.rest.json.response/BotGatewayResponse> // dev.kord.rest.route/Route.GatewayBotGet|null[0]

    final object GatewayGet : dev.kord.rest.route/Route<dev.kord.rest.json.response/GatewayResponse> // dev.kord.rest.route/Route.GatewayGet|null[0]

    final object GetWebhookMessage : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordMessage> // dev.kord.rest.route/Route.GetWebhookMessage|null[0]

    final object GlobalApplicationCommandCreate : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordApplicationCommand> // dev.kord.rest.route/Route.GlobalApplicationCommandCreate|null[0]

    final object GlobalApplicationCommandDelete : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.GlobalApplicationCommandDelete|null[0]

    final object GlobalApplicationCommandGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordApplicationCommand> // dev.kord.rest.route/Route.GlobalApplicationCommandGet|null[0]

    final object GlobalApplicationCommandModify : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordApplicationCommand> // dev.kord.rest.route/Route.GlobalApplicationCommandModify|null[0]

    final object GlobalApplicationCommandsCreate : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordApplicationCommand>> // dev.kord.rest.route/Route.GlobalApplicationCommandsCreate|null[0]

    final object GlobalApplicationCommandsGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordApplicationCommand>> // dev.kord.rest.route/Route.GlobalApplicationCommandsGet|null[0]

    final object GroupDMUserDelete : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.GroupDMUserDelete|null[0]

    final object GroupDMUserPut : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.GroupDMUserPut|null[0]

    final object GuildApplicationCommandCreate : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordApplicationCommand> // dev.kord.rest.route/Route.GuildApplicationCommandCreate|null[0]

    final object GuildApplicationCommandDelete : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.GuildApplicationCommandDelete|null[0]

    final object GuildApplicationCommandGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordApplicationCommand> // dev.kord.rest.route/Route.GuildApplicationCommandGet|null[0]

    final object GuildApplicationCommandModify : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordApplicationCommand> // dev.kord.rest.route/Route.GuildApplicationCommandModify|null[0]

    final object GuildApplicationCommandPermissionsGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordGuildApplicationCommandPermissions>> // dev.kord.rest.route/Route.GuildApplicationCommandPermissionsGet|null[0]

    final object GuildApplicationCommandsCreate : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordApplicationCommand>> // dev.kord.rest.route/Route.GuildApplicationCommandsCreate|null[0]

    final object GuildApplicationCommandsGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordApplicationCommand>> // dev.kord.rest.route/Route.GuildApplicationCommandsGet|null[0]

    final object GuildBanDelete : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.GuildBanDelete|null[0]

    final object GuildBanGet : dev.kord.rest.route/Route<dev.kord.rest.json.response/BanResponse> // dev.kord.rest.route/Route.GuildBanGet|null[0]

    final object GuildBanPut : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.GuildBanPut|null[0]

    final object GuildBansGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.rest.json.response/BanResponse>> // dev.kord.rest.route/Route.GuildBansGet|null[0]

    final object GuildChannelsGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordChannel>> // dev.kord.rest.route/Route.GuildChannelsGet|null[0]

    final object GuildChannelsPatch : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.GuildChannelsPatch|null[0]

    final object GuildChannelsPost : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordChannel> // dev.kord.rest.route/Route.GuildChannelsPost|null[0]

    final object GuildCurrentUserNickPatch : dev.kord.rest.route/Route<dev.kord.rest.json.response/CurrentUserNicknameModifyResponse> // dev.kord.rest.route/Route.GuildCurrentUserNickPatch|null[0]

    final object GuildDelete : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.GuildDelete|null[0]

    final object GuildEmojiDelete : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.GuildEmojiDelete|null[0]

    final object GuildEmojiGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordEmoji> // dev.kord.rest.route/Route.GuildEmojiGet|null[0]

    final object GuildEmojiPatch : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordEmoji> // dev.kord.rest.route/Route.GuildEmojiPatch|null[0]

    final object GuildEmojiPost : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordEmoji> // dev.kord.rest.route/Route.GuildEmojiPost|null[0]

    final object GuildEmojisGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordEmoji>> // dev.kord.rest.route/Route.GuildEmojisGet|null[0]

    final object GuildFromTemplatePost : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordGuild> // dev.kord.rest.route/Route.GuildFromTemplatePost|null[0]

    final object GuildGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordGuild> // dev.kord.rest.route/Route.GuildGet|null[0]

    final object GuildId : dev.kord.rest.route/Route.Key // dev.kord.rest.route/Route.GuildId|null[0]

    final object GuildIntegrationDelete : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.GuildIntegrationDelete|null[0]

    final object GuildIntegrationGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordIntegration>> // dev.kord.rest.route/Route.GuildIntegrationGet|null[0]

    final object GuildIntegrationPatch : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.GuildIntegrationPatch|null[0]

    final object GuildIntegrationPost : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.GuildIntegrationPost|null[0]

    final object GuildIntegrationSyncPost : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.GuildIntegrationSyncPost|null[0]

    final object GuildInvitesGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordInviteWithMetadata>> // dev.kord.rest.route/Route.GuildInvitesGet|null[0]

    final object GuildLeave : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.GuildLeave|null[0]

    final object GuildMFALevelModify : dev.kord.rest.route/Route<dev.kord.rest.json.response/GuildMFALevelModifyResponse> // dev.kord.rest.route/Route.GuildMFALevelModify|null[0]

    final object GuildMemberDelete : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.GuildMemberDelete|null[0]

    final object GuildMemberGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordGuildMember> // dev.kord.rest.route/Route.GuildMemberGet|null[0]

    final object GuildMemberPatch : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordGuildMember> // dev.kord.rest.route/Route.GuildMemberPatch|null[0]

    final object GuildMemberPut : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordGuildMember?> // dev.kord.rest.route/Route.GuildMemberPut|null[0]

    final object GuildMemberRoleDelete : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.GuildMemberRoleDelete|null[0]

    final object GuildMemberRolePut : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.GuildMemberRolePut|null[0]

    final object GuildMembersGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordGuildMember>> // dev.kord.rest.route/Route.GuildMembersGet|null[0]

    final object GuildMembersSearchGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordGuildMember>> // dev.kord.rest.route/Route.GuildMembersSearchGet|null[0]

    final object GuildOnboardingGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordGuildOnboarding> // dev.kord.rest.route/Route.GuildOnboardingGet|null[0]

    final object GuildOnboardingModify : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordGuildOnboarding> // dev.kord.rest.route/Route.GuildOnboardingModify|null[0]

    final object GuildPatch : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordGuild> // dev.kord.rest.route/Route.GuildPatch|null[0]

    final object GuildPost : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordGuild> // dev.kord.rest.route/Route.GuildPost|null[0]

    final object GuildPreviewGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordGuildPreview> // dev.kord.rest.route/Route.GuildPreviewGet|null[0]

    final object GuildPruneCountGet : dev.kord.rest.route/Route<dev.kord.rest.json.response/GetPruneResponse> // dev.kord.rest.route/Route.GuildPruneCountGet|null[0]

    final object GuildPrunePost : dev.kord.rest.route/Route<dev.kord.rest.json.response/PruneResponse> // dev.kord.rest.route/Route.GuildPrunePost|null[0]

    final object GuildRoleDelete : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.GuildRoleDelete|null[0]

    final object GuildRolePatch : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordRole> // dev.kord.rest.route/Route.GuildRolePatch|null[0]

    final object GuildRolePost : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordRole> // dev.kord.rest.route/Route.GuildRolePost|null[0]

    final object GuildRolesGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordRole>> // dev.kord.rest.route/Route.GuildRolesGet|null[0]

    final object GuildRolesPatch : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordRole>> // dev.kord.rest.route/Route.GuildRolesPatch|null[0]

    final object GuildScheduledEventDelete : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.GuildScheduledEventDelete|null[0]

    final object GuildScheduledEventGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordGuildScheduledEvent> // dev.kord.rest.route/Route.GuildScheduledEventGet|null[0]

    final object GuildScheduledEventPatch : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordGuildScheduledEvent> // dev.kord.rest.route/Route.GuildScheduledEventPatch|null[0]

    final object GuildScheduledEventUsersGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.rest.json.request/GuildScheduledEventUsersResponse>> // dev.kord.rest.route/Route.GuildScheduledEventUsersGet|null[0]

    final object GuildScheduledEventsGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordGuildScheduledEvent>> // dev.kord.rest.route/Route.GuildScheduledEventsGet|null[0]

    final object GuildScheduledEventsPost : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordGuildScheduledEvent> // dev.kord.rest.route/Route.GuildScheduledEventsPost|null[0]

    final object GuildStickerDelete : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.GuildStickerDelete|null[0]

    final object GuildStickerGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordMessageSticker> // dev.kord.rest.route/Route.GuildStickerGet|null[0]

    final object GuildStickerPatch : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordMessageSticker> // dev.kord.rest.route/Route.GuildStickerPatch|null[0]

    final object GuildStickerPost : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordMessageSticker> // dev.kord.rest.route/Route.GuildStickerPost|null[0]

    final object GuildStickersGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordMessageSticker>> // dev.kord.rest.route/Route.GuildStickersGet|null[0]

    final object GuildTemplatePost : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordTemplate> // dev.kord.rest.route/Route.GuildTemplatePost|null[0]

    final object GuildTemplatesGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordTemplate>> // dev.kord.rest.route/Route.GuildTemplatesGet|null[0]

    final object GuildVanityInviteGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordPartialInvite> // dev.kord.rest.route/Route.GuildVanityInviteGet|null[0]

    final object GuildVoiceRegionsGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordVoiceRegion>> // dev.kord.rest.route/Route.GuildVoiceRegionsGet|null[0]

    final object GuildWebhooksGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordWebhook>> // dev.kord.rest.route/Route.GuildWebhooksGet|null[0]

    final object GuildWelcomeScreenGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordWelcomeScreen> // dev.kord.rest.route/Route.GuildWelcomeScreenGet|null[0]

    final object GuildWelcomeScreenPatch : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordWelcomeScreen> // dev.kord.rest.route/Route.GuildWelcomeScreenPatch|null[0]

    final object GuildWidgetGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordGuildWidget> // dev.kord.rest.route/Route.GuildWidgetGet|null[0]

    final object GuildWidgetPatch : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordGuildWidget> // dev.kord.rest.route/Route.GuildWidgetPatch|null[0]

    final object IntegrationId : dev.kord.rest.route/Route.Key // dev.kord.rest.route/Route.IntegrationId|null[0]

    final object InteractionId : dev.kord.rest.route/Route.Key // dev.kord.rest.route/Route.InteractionId|null[0]

    final object InteractionResponseCreate : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.InteractionResponseCreate|null[0]

    final object InteractionToken : dev.kord.rest.route/Route.Key // dev.kord.rest.route/Route.InteractionToken|null[0]

    final object InviteCode : dev.kord.rest.route/Route.Key // dev.kord.rest.route/Route.InviteCode|null[0]

    final object InviteDelete : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordInvite> // dev.kord.rest.route/Route.InviteDelete|null[0]

    final object InviteGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordInvite> // dev.kord.rest.route/Route.InviteGet|null[0]

    final object InvitePost : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordInviteWithMetadata> // dev.kord.rest.route/Route.InvitePost|null[0]

    final object InvitesGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordInviteWithMetadata>> // dev.kord.rest.route/Route.InvitesGet|null[0]

    final object JoinThreadPut : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.JoinThreadPut|null[0]

    final object JoinedPrivateArchivedThreadsGet : dev.kord.rest.route/Route<dev.kord.rest.json.response/ListThreadsResponse> // dev.kord.rest.route/Route.JoinedPrivateArchivedThreadsGet|null[0]

    final object LeaveThreadDelete : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.LeaveThreadDelete|null[0]

    final object MessageCrosspost : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordMessage> // dev.kord.rest.route/Route.MessageCrosspost|null[0]

    final object MessageDelete : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.MessageDelete|null[0]

    final object MessageGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordMessage> // dev.kord.rest.route/Route.MessageGet|null[0]

    final object MessageId : dev.kord.rest.route/Route.Key // dev.kord.rest.route/Route.MessageId|null[0]

    final object MessagePost : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordMessage> // dev.kord.rest.route/Route.MessagePost|null[0]

    final object MessagesGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordMessage>> // dev.kord.rest.route/Route.MessagesGet|null[0]

    final object NewsChannelFollow : dev.kord.rest.route/Route<dev.kord.rest.json.response/FollowedChannelResponse> // dev.kord.rest.route/Route.NewsChannelFollow|null[0]

    final object NitroStickerPacks : dev.kord.rest.route/Route<dev.kord.rest.json.response/NitroStickerPacksResponse> // dev.kord.rest.route/Route.NitroStickerPacks|null[0]

    final object OriginalInteractionResponseDelete : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.OriginalInteractionResponseDelete|null[0]

    final object OriginalInteractionResponseGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordMessage> // dev.kord.rest.route/Route.OriginalInteractionResponseGet|null[0]

    final object OriginalInteractionResponseModify : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordMessage> // dev.kord.rest.route/Route.OriginalInteractionResponseModify|null[0]

    final object OthersVoiceStatePatch : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.OthersVoiceStatePatch|null[0]

    final object OverwriteId : dev.kord.rest.route/Route.Key // dev.kord.rest.route/Route.OverwriteId|null[0]

    final object OwnReactionDelete : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.OwnReactionDelete|null[0]

    final object PinDelete : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.PinDelete|null[0]

    final object PinPut : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.PinPut|null[0]

    final object PinsGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordMessage>> // dev.kord.rest.route/Route.PinsGet|null[0]

    final object PrivateArchivedThreadsGet : dev.kord.rest.route/Route<dev.kord.rest.json.response/ListThreadsResponse> // dev.kord.rest.route/Route.PrivateArchivedThreadsGet|null[0]

    final object PrivateThreadsGet : dev.kord.rest.route/Route<dev.kord.rest.json.response/ListThreadsResponse> // dev.kord.rest.route/Route.PrivateThreadsGet|null[0]

    final object PublicArchivedThreadsGet : dev.kord.rest.route/Route<dev.kord.rest.json.response/ListThreadsResponse> // dev.kord.rest.route/Route.PublicArchivedThreadsGet|null[0]

    final object ReactionDelete : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.ReactionDelete|null[0]

    final object ReactionPut : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.ReactionPut|null[0]

    final object ReactionsGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordUser>> // dev.kord.rest.route/Route.ReactionsGet|null[0]

    final object RemoveUserFromThreadDelete : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.RemoveUserFromThreadDelete|null[0]

    final object RoleId : dev.kord.rest.route/Route.Key // dev.kord.rest.route/Route.RoleId|null[0]

    final object ScheduledEventId : dev.kord.rest.route/Route.Key // dev.kord.rest.route/Route.ScheduledEventId|null[0]

    final object SelfVoiceStatePatch : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.SelfVoiceStatePatch|null[0]

    final object StageInstanceDelete : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.StageInstanceDelete|null[0]

    final object StageInstanceGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordStageInstance> // dev.kord.rest.route/Route.StageInstanceGet|null[0]

    final object StageInstancePatch : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordStageInstance> // dev.kord.rest.route/Route.StageInstancePatch|null[0]

    final object StageInstancePost : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordStageInstance> // dev.kord.rest.route/Route.StageInstancePost|null[0]

    final object StartPublicThreadWithMessagePost : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordChannel> // dev.kord.rest.route/Route.StartPublicThreadWithMessagePost|null[0]

    final object StartThreadPost : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordChannel> // dev.kord.rest.route/Route.StartThreadPost|null[0]

    final object StickerGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordMessageSticker> // dev.kord.rest.route/Route.StickerGet|null[0]

    final object StickerId : dev.kord.rest.route/Route.Key // dev.kord.rest.route/Route.StickerId|null[0]

    final object TemplateCode : dev.kord.rest.route/Route.Key // dev.kord.rest.route/Route.TemplateCode|null[0]

    final object TemplateDelete : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordTemplate> // dev.kord.rest.route/Route.TemplateDelete|null[0]

    final object TemplateGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordTemplate> // dev.kord.rest.route/Route.TemplateGet|null[0]

    final object TemplatePatch : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordTemplate> // dev.kord.rest.route/Route.TemplatePatch|null[0]

    final object TemplateSyncPut : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordTemplate> // dev.kord.rest.route/Route.TemplateSyncPut|null[0]

    final object ThreadMembersGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordThreadMember>> // dev.kord.rest.route/Route.ThreadMembersGet|null[0]

    final object TypingIndicatorPost : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.TypingIndicatorPost|null[0]

    final object UserConnectionsGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.rest.json.response/Connection>> // dev.kord.rest.route/Route.UserConnectionsGet|null[0]

    final object UserGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordUser> // dev.kord.rest.route/Route.UserGet|null[0]

    final object UserId : dev.kord.rest.route/Route.Key // dev.kord.rest.route/Route.UserId|null[0]

    final object VoiceRegionsGet : dev.kord.rest.route/Route<kotlin.collections/List<dev.kord.common.entity/DiscordVoiceRegion>> // dev.kord.rest.route/Route.VoiceRegionsGet|null[0]

    final object WebhookByTokenDelete : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.WebhookByTokenDelete|null[0]

    final object WebhookByTokenGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordWebhook> // dev.kord.rest.route/Route.WebhookByTokenGet|null[0]

    final object WebhookByTokenPatch : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordWebhook> // dev.kord.rest.route/Route.WebhookByTokenPatch|null[0]

    final object WebhookDelete : dev.kord.rest.route/Route<kotlin/Unit> // dev.kord.rest.route/Route.WebhookDelete|null[0]

    final object WebhookGet : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordWebhook> // dev.kord.rest.route/Route.WebhookGet|null[0]

    final object WebhookId : dev.kord.rest.route/Route.Key // dev.kord.rest.route/Route.WebhookId|null[0]

    final object WebhookPatch : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordWebhook> // dev.kord.rest.route/Route.WebhookPatch|null[0]

    final object WebhookPost : dev.kord.rest.route/Route<dev.kord.common.entity/DiscordWebhook> // dev.kord.rest.route/Route.WebhookPost|null[0]

    final object WebhookToken : dev.kord.rest.route/Route.Key // dev.kord.rest.route/Route.WebhookToken|null[0]
}

sealed class <#A: kotlin/Number, #B: dev.kord.common.entity/Choice> dev.kord.rest.builder.interaction/NumericOptionBuilder : dev.kord.rest.builder.interaction/BaseChoiceBuilder<#A, #B> { // dev.kord.rest.builder.interaction/NumericOptionBuilder|null[0]
    constructor <init>(kotlin/String, kotlin/String, dev.kord.common.entity/ApplicationCommandOptionType) // dev.kord.rest.builder.interaction/NumericOptionBuilder.<init>|<init>(kotlin.String;kotlin.String;dev.kord.common.entity.ApplicationCommandOptionType){}[0]

    final var maxValue // dev.kord.rest.builder.interaction/NumericOptionBuilder.maxValue|{}maxValue[0]
        final fun <get-maxValue>(): #A? // dev.kord.rest.builder.interaction/NumericOptionBuilder.maxValue.<get-maxValue>|<get-maxValue>(){}[0]
        final fun <set-maxValue>(#A?) // dev.kord.rest.builder.interaction/NumericOptionBuilder.maxValue.<set-maxValue>|<set-maxValue>(1:0?){}[0]
    final var minValue // dev.kord.rest.builder.interaction/NumericOptionBuilder.minValue|{}minValue[0]
        final fun <get-minValue>(): #A? // dev.kord.rest.builder.interaction/NumericOptionBuilder.minValue.<get-minValue>|<get-minValue>(){}[0]
        final fun <set-minValue>(#A?) // dev.kord.rest.builder.interaction/NumericOptionBuilder.minValue.<set-minValue>|<set-minValue>(1:0?){}[0]

    open fun toRequest(): dev.kord.common.entity/ApplicationCommandOption // dev.kord.rest.builder.interaction/NumericOptionBuilder.toRequest|toRequest(){}[0]
}

sealed class dev.kord.rest.builder.automoderation/AutoModerationActionBuilder : dev.kord.rest.builder/RequestBuilder<dev.kord.common.entity/DiscordAutoModerationAction> { // dev.kord.rest.builder.automoderation/AutoModerationActionBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.automoderation/AutoModerationActionBuilder.<init>|<init>(){}[0]

    abstract val type // dev.kord.rest.builder.automoderation/AutoModerationActionBuilder.type|{}type[0]
        abstract fun <get-type>(): dev.kord.common.entity/AutoModerationActionType // dev.kord.rest.builder.automoderation/AutoModerationActionBuilder.type.<get-type>|<get-type>(){}[0]

    final fun toRequest(): dev.kord.common.entity/DiscordAutoModerationAction // dev.kord.rest.builder.automoderation/AutoModerationActionBuilder.toRequest|toRequest(){}[0]
    open fun buildMetadata(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordAutoModerationActionMetadata> // dev.kord.rest.builder.automoderation/AutoModerationActionBuilder.buildMetadata|buildMetadata(){}[0]
}

sealed class dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder : dev.kord.rest.builder.automoderation/TypedAutoModerationRuleBuilder, dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/AutoModerationRuleCreateRequest> { // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity/AutoModerationRuleEventType) // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.<init>|<init>(kotlin.String;dev.kord.common.entity.AutoModerationRuleEventType){}[0]

    final var actions // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.actions|{}actions[0]
        final fun <get-actions>(): kotlin.collections/MutableList<dev.kord.rest.builder.automoderation/AutoModerationActionBuilder> // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.actions.<get-actions>|<get-actions>(){}[0]
        final fun <set-actions>(kotlin.collections/MutableList<dev.kord.rest.builder.automoderation/AutoModerationActionBuilder>) // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.actions.<set-actions>|<set-actions>(kotlin.collections.MutableList<dev.kord.rest.builder.automoderation.AutoModerationActionBuilder>){}[0]
    final var enabled // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.enabled|{}enabled[0]
        final fun <get-enabled>(): kotlin/Boolean? // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.enabled.<get-enabled>|<get-enabled>(){}[0]
        final fun <set-enabled>(kotlin/Boolean?) // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.enabled.<set-enabled>|<set-enabled>(kotlin.Boolean?){}[0]
    final var eventType // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.eventType|{}eventType[0]
        final fun <get-eventType>(): dev.kord.common.entity/AutoModerationRuleEventType // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.eventType.<get-eventType>|<get-eventType>(){}[0]
        final fun <set-eventType>(dev.kord.common.entity/AutoModerationRuleEventType) // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.eventType.<set-eventType>|<set-eventType>(dev.kord.common.entity.AutoModerationRuleEventType){}[0]
    final var exemptChannels // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.exemptChannels|{}exemptChannels[0]
        final fun <get-exemptChannels>(): kotlin.collections/MutableList<dev.kord.common.entity/Snowflake>? // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.exemptChannels.<get-exemptChannels>|<get-exemptChannels>(){}[0]
        final fun <set-exemptChannels>(kotlin.collections/MutableList<dev.kord.common.entity/Snowflake>?) // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.exemptChannels.<set-exemptChannels>|<set-exemptChannels>(kotlin.collections.MutableList<dev.kord.common.entity.Snowflake>?){}[0]
    final var exemptRoles // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.exemptRoles|{}exemptRoles[0]
        final fun <get-exemptRoles>(): kotlin.collections/MutableList<dev.kord.common.entity/Snowflake>? // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.exemptRoles.<get-exemptRoles>|<get-exemptRoles>(){}[0]
        final fun <set-exemptRoles>(kotlin.collections/MutableList<dev.kord.common.entity/Snowflake>?) // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.exemptRoles.<set-exemptRoles>|<set-exemptRoles>(kotlin.collections.MutableList<dev.kord.common.entity.Snowflake>?){}[0]
    final var name // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.name.<set-name>|<set-name>(kotlin.String){}[0]
    final var reason // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]

    final fun assignActions(kotlin.collections/MutableList<dev.kord.rest.builder.automoderation/AutoModerationActionBuilder>) // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.assignActions|assignActions(kotlin.collections.MutableList<dev.kord.rest.builder.automoderation.AutoModerationActionBuilder>){}[0]
    final fun assignEventType(dev.kord.common.entity/AutoModerationRuleEventType) // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.assignEventType|assignEventType(dev.kord.common.entity.AutoModerationRuleEventType){}[0]
    final fun assignName(kotlin/String) // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.assignName|assignName(kotlin.String){}[0]
    final fun toRequest(): dev.kord.rest.json.request/AutoModerationRuleCreateRequest // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.toRequest|toRequest(){}[0]
    open fun buildTriggerMetadata(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata> // dev.kord.rest.builder.automoderation/AutoModerationRuleCreateBuilder.buildTriggerMetadata|buildTriggerMetadata(){}[0]
}

sealed class dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder : dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder, dev.kord.rest.builder/AuditRequestBuilder<dev.kord.rest.json.request/AutoModerationRuleModifyRequest> { // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.<init>|<init>(){}[0]

    final var actions // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.actions|{}actions[0]
        final fun <get-actions>(): kotlin.collections/MutableList<dev.kord.rest.builder.automoderation/AutoModerationActionBuilder>? // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.actions.<get-actions>|<get-actions>(){}[0]
        final fun <set-actions>(kotlin.collections/MutableList<dev.kord.rest.builder.automoderation/AutoModerationActionBuilder>?) // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.actions.<set-actions>|<set-actions>(kotlin.collections.MutableList<dev.kord.rest.builder.automoderation.AutoModerationActionBuilder>?){}[0]
    final var enabled // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.enabled|{}enabled[0]
        final fun <get-enabled>(): kotlin/Boolean? // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.enabled.<get-enabled>|<get-enabled>(){}[0]
        final fun <set-enabled>(kotlin/Boolean?) // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.enabled.<set-enabled>|<set-enabled>(kotlin.Boolean?){}[0]
    final var eventType // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.eventType|{}eventType[0]
        final fun <get-eventType>(): dev.kord.common.entity/AutoModerationRuleEventType? // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.eventType.<get-eventType>|<get-eventType>(){}[0]
        final fun <set-eventType>(dev.kord.common.entity/AutoModerationRuleEventType?) // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.eventType.<set-eventType>|<set-eventType>(dev.kord.common.entity.AutoModerationRuleEventType?){}[0]
    final var exemptChannels // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.exemptChannels|{}exemptChannels[0]
        final fun <get-exemptChannels>(): kotlin.collections/MutableList<dev.kord.common.entity/Snowflake>? // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.exemptChannels.<get-exemptChannels>|<get-exemptChannels>(){}[0]
        final fun <set-exemptChannels>(kotlin.collections/MutableList<dev.kord.common.entity/Snowflake>?) // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.exemptChannels.<set-exemptChannels>|<set-exemptChannels>(kotlin.collections.MutableList<dev.kord.common.entity.Snowflake>?){}[0]
    final var exemptRoles // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.exemptRoles|{}exemptRoles[0]
        final fun <get-exemptRoles>(): kotlin.collections/MutableList<dev.kord.common.entity/Snowflake>? // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.exemptRoles.<get-exemptRoles>|<get-exemptRoles>(){}[0]
        final fun <set-exemptRoles>(kotlin.collections/MutableList<dev.kord.common.entity/Snowflake>?) // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.exemptRoles.<set-exemptRoles>|<set-exemptRoles>(kotlin.collections.MutableList<dev.kord.common.entity.Snowflake>?){}[0]
    final var name // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String?) // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.name.<set-name>|<set-name>(kotlin.String?){}[0]
    final var reason // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.reason.<get-reason>|<get-reason>(){}[0]
        final fun <set-reason>(kotlin/String?) // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.reason.<set-reason>|<set-reason>(kotlin.String?){}[0]

    final fun assignActions(kotlin.collections/MutableList<dev.kord.rest.builder.automoderation/AutoModerationActionBuilder>) // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.assignActions|assignActions(kotlin.collections.MutableList<dev.kord.rest.builder.automoderation.AutoModerationActionBuilder>){}[0]
    final fun assignEventType(dev.kord.common.entity/AutoModerationRuleEventType) // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.assignEventType|assignEventType(dev.kord.common.entity.AutoModerationRuleEventType){}[0]
    final fun assignName(kotlin/String) // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.assignName|assignName(kotlin.String){}[0]
    final fun toRequest(): dev.kord.rest.json.request/AutoModerationRuleModifyRequest // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.toRequest|toRequest(){}[0]
    open fun buildTriggerMetadata(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata> // dev.kord.rest.builder.automoderation/AutoModerationRuleModifyBuilder.buildTriggerMetadata|buildTriggerMetadata(){}[0]
}

sealed class dev.kord.rest.builder.component/ActionRowComponentBuilder : dev.kord.rest.builder.component/ComponentBuilder { // dev.kord.rest.builder.component/ActionRowComponentBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.component/ActionRowComponentBuilder.<init>|<init>(){}[0]

    final var _disabled // dev.kord.rest.builder.component/ActionRowComponentBuilder._disabled|{}_disabled[0]
        final fun <get-_disabled>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.rest.builder.component/ActionRowComponentBuilder._disabled.<get-_disabled>|<get-_disabled>(){}[0]
    final var disabled // dev.kord.rest.builder.component/ActionRowComponentBuilder.disabled|{}disabled[0]
        final fun <get-disabled>(): kotlin/Boolean? // dev.kord.rest.builder.component/ActionRowComponentBuilder.disabled.<get-disabled>|<get-disabled>(){}[0]
        final fun <set-disabled>(kotlin/Boolean?) // dev.kord.rest.builder.component/ActionRowComponentBuilder.disabled.<set-disabled>|<set-disabled>(kotlin.Boolean?){}[0]
}

sealed class dev.kord.rest.builder.component/ButtonBuilder : dev.kord.rest.builder.component/ActionRowComponentBuilder { // dev.kord.rest.builder.component/ButtonBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.component/ButtonBuilder.<init>|<init>(){}[0]

    final var _emoji // dev.kord.rest.builder.component/ButtonBuilder._emoji|{}_emoji[0]
        final fun <get-_emoji>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> // dev.kord.rest.builder.component/ButtonBuilder._emoji.<get-_emoji>|<get-_emoji>(){}[0]
    final var _label // dev.kord.rest.builder.component/ButtonBuilder._label|{}_label[0]
        final fun <get-_label>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.rest.builder.component/ButtonBuilder._label.<get-_label>|<get-_label>(){}[0]
    final var emoji // dev.kord.rest.builder.component/ButtonBuilder.emoji|{}emoji[0]
        final fun <get-emoji>(): dev.kord.common.entity/DiscordPartialEmoji? // dev.kord.rest.builder.component/ButtonBuilder.emoji.<get-emoji>|<get-emoji>(){}[0]
        final fun <set-emoji>(dev.kord.common.entity/DiscordPartialEmoji?) // dev.kord.rest.builder.component/ButtonBuilder.emoji.<set-emoji>|<set-emoji>(dev.kord.common.entity.DiscordPartialEmoji?){}[0]
    final var label // dev.kord.rest.builder.component/ButtonBuilder.label|{}label[0]
        final fun <get-label>(): kotlin/String? // dev.kord.rest.builder.component/ButtonBuilder.label.<get-label>|<get-label>(){}[0]
        final fun <set-label>(kotlin/String?) // dev.kord.rest.builder.component/ButtonBuilder.label.<set-label>|<set-label>(kotlin.String?){}[0]

    abstract fun build(): dev.kord.common.entity/DiscordChatComponent // dev.kord.rest.builder.component/ButtonBuilder.build|build(){}[0]

    final class InteractionButtonBuilder : dev.kord.rest.builder.component/ButtonBuilder { // dev.kord.rest.builder.component/ButtonBuilder.InteractionButtonBuilder|null[0]
        constructor <init>(dev.kord.common.entity/ButtonStyle, kotlin/String) // dev.kord.rest.builder.component/ButtonBuilder.InteractionButtonBuilder.<init>|<init>(dev.kord.common.entity.ButtonStyle;kotlin.String){}[0]

        final var customId // dev.kord.rest.builder.component/ButtonBuilder.InteractionButtonBuilder.customId|{}customId[0]
            final fun <get-customId>(): kotlin/String // dev.kord.rest.builder.component/ButtonBuilder.InteractionButtonBuilder.customId.<get-customId>|<get-customId>(){}[0]
            final fun <set-customId>(kotlin/String) // dev.kord.rest.builder.component/ButtonBuilder.InteractionButtonBuilder.customId.<set-customId>|<set-customId>(kotlin.String){}[0]
        final var style // dev.kord.rest.builder.component/ButtonBuilder.InteractionButtonBuilder.style|{}style[0]
            final fun <get-style>(): dev.kord.common.entity/ButtonStyle // dev.kord.rest.builder.component/ButtonBuilder.InteractionButtonBuilder.style.<get-style>|<get-style>(){}[0]
            final fun <set-style>(dev.kord.common.entity/ButtonStyle) // dev.kord.rest.builder.component/ButtonBuilder.InteractionButtonBuilder.style.<set-style>|<set-style>(dev.kord.common.entity.ButtonStyle){}[0]

        final fun build(): dev.kord.common.entity/DiscordChatComponent // dev.kord.rest.builder.component/ButtonBuilder.InteractionButtonBuilder.build|build(){}[0]
    }

    final class LinkButtonBuilder : dev.kord.rest.builder.component/ButtonBuilder { // dev.kord.rest.builder.component/ButtonBuilder.LinkButtonBuilder|null[0]
        constructor <init>(kotlin/String) // dev.kord.rest.builder.component/ButtonBuilder.LinkButtonBuilder.<init>|<init>(kotlin.String){}[0]

        final var url // dev.kord.rest.builder.component/ButtonBuilder.LinkButtonBuilder.url|{}url[0]
            final fun <get-url>(): kotlin/String // dev.kord.rest.builder.component/ButtonBuilder.LinkButtonBuilder.url.<get-url>|<get-url>(){}[0]
            final fun <set-url>(kotlin/String) // dev.kord.rest.builder.component/ButtonBuilder.LinkButtonBuilder.url.<set-url>|<set-url>(kotlin.String){}[0]

        final fun build(): dev.kord.common.entity/DiscordChatComponent // dev.kord.rest.builder.component/ButtonBuilder.LinkButtonBuilder.build|build(){}[0]
    }
}

sealed class dev.kord.rest.builder.component/SelectMenuBuilder : dev.kord.rest.builder.component/ActionRowComponentBuilder { // dev.kord.rest.builder.component/SelectMenuBuilder|null[0]
    constructor <init>(kotlin/String) // dev.kord.rest.builder.component/SelectMenuBuilder.<init>|<init>(kotlin.String){}[0]

    abstract val type // dev.kord.rest.builder.component/SelectMenuBuilder.type|{}type[0]
        abstract fun <get-type>(): dev.kord.common.entity/ComponentType // dev.kord.rest.builder.component/SelectMenuBuilder.type.<get-type>|<get-type>(){}[0]

    final var allowedValues // dev.kord.rest.builder.component/SelectMenuBuilder.allowedValues|{}allowedValues[0]
        final fun <get-allowedValues>(): kotlin.ranges/ClosedRange<kotlin/Int> // dev.kord.rest.builder.component/SelectMenuBuilder.allowedValues.<get-allowedValues>|<get-allowedValues>(){}[0]
        final fun <set-allowedValues>(kotlin.ranges/ClosedRange<kotlin/Int>) // dev.kord.rest.builder.component/SelectMenuBuilder.allowedValues.<set-allowedValues>|<set-allowedValues>(kotlin.ranges.ClosedRange<kotlin.Int>){}[0]
    final var customId // dev.kord.rest.builder.component/SelectMenuBuilder.customId|{}customId[0]
        final fun <get-customId>(): kotlin/String // dev.kord.rest.builder.component/SelectMenuBuilder.customId.<get-customId>|<get-customId>(){}[0]
        final fun <set-customId>(kotlin/String) // dev.kord.rest.builder.component/SelectMenuBuilder.customId.<set-customId>|<set-customId>(kotlin.String){}[0]
    final var placeholder // dev.kord.rest.builder.component/SelectMenuBuilder.placeholder|{}placeholder[0]
        final fun <get-placeholder>(): kotlin/String? // dev.kord.rest.builder.component/SelectMenuBuilder.placeholder.<get-placeholder>|<get-placeholder>(){}[0]
        final fun <set-placeholder>(kotlin/String?) // dev.kord.rest.builder.component/SelectMenuBuilder.placeholder.<set-placeholder>|<set-placeholder>(kotlin.String?){}[0]

    final fun build(): dev.kord.common.entity/DiscordChatComponent // dev.kord.rest.builder.component/SelectMenuBuilder.build|build(){}[0]
    open fun buildChannelTypes(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> // dev.kord.rest.builder.component/SelectMenuBuilder.buildChannelTypes|buildChannelTypes(){}[0]
    open fun buildDefaultValues(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectDefaultValue>> // dev.kord.rest.builder.component/SelectMenuBuilder.buildDefaultValues|buildDefaultValues(){}[0]
    open fun buildOptions(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectOption>> // dev.kord.rest.builder.component/SelectMenuBuilder.buildOptions|buildOptions(){}[0]
}

sealed class dev.kord.rest.builder.interaction/BaseCommandOptionBuilder : dev.kord.rest.builder.interaction/OptionsBuilder { // dev.kord.rest.builder.interaction/BaseCommandOptionBuilder|null[0]
    constructor <init>(kotlin/String, kotlin/String, dev.kord.common.entity/ApplicationCommandOptionType) // dev.kord.rest.builder.interaction/BaseCommandOptionBuilder.<init>|<init>(kotlin.String;kotlin.String;dev.kord.common.entity.ApplicationCommandOptionType){}[0]

    final var options // dev.kord.rest.builder.interaction/BaseCommandOptionBuilder.options|{}options[0]
        final fun <get-options>(): kotlin.collections/MutableList<dev.kord.rest.builder.interaction/OptionsBuilder>? // dev.kord.rest.builder.interaction/BaseCommandOptionBuilder.options.<get-options>|<get-options>(){}[0]
        final fun <set-options>(kotlin.collections/MutableList<dev.kord.rest.builder.interaction/OptionsBuilder>?) // dev.kord.rest.builder.interaction/BaseCommandOptionBuilder.options.<set-options>|<set-options>(kotlin.collections.MutableList<dev.kord.rest.builder.interaction.OptionsBuilder>?){}[0]

    open fun toRequest(): dev.kord.common.entity/ApplicationCommandOption // dev.kord.rest.builder.interaction/BaseCommandOptionBuilder.toRequest|toRequest(){}[0]
}

sealed class dev.kord.rest.builder.interaction/MultiApplicationCommandBuilder { // dev.kord.rest.builder.interaction/MultiApplicationCommandBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.interaction/MultiApplicationCommandBuilder.<init>|<init>(){}[0]

    final val commands // dev.kord.rest.builder.interaction/MultiApplicationCommandBuilder.commands|{}commands[0]
        final fun <get-commands>(): kotlin.collections/MutableList<dev.kord.rest.builder.interaction/ApplicationCommandCreateBuilder> // dev.kord.rest.builder.interaction/MultiApplicationCommandBuilder.commands.<get-commands>|<get-commands>(){}[0]

    final fun build(): kotlin.collections/List<dev.kord.rest.json.request/ApplicationCommandCreateRequest> // dev.kord.rest.builder.interaction/MultiApplicationCommandBuilder.build|build(){}[0]
}

sealed class dev.kord.rest.builder.interaction/OptionsBuilder : dev.kord.rest.builder.interaction/LocalizedDescriptionCreateBuilder, dev.kord.rest.builder.interaction/LocalizedNameCreateBuilder, dev.kord.rest.builder/RequestBuilder<dev.kord.common.entity/ApplicationCommandOption> { // dev.kord.rest.builder.interaction/OptionsBuilder|null[0]
    constructor <init>(kotlin/String, kotlin/String, dev.kord.common.entity/ApplicationCommandOptionType) // dev.kord.rest.builder.interaction/OptionsBuilder.<init>|<init>(kotlin.String;kotlin.String;dev.kord.common.entity.ApplicationCommandOptionType){}[0]

    final val type // dev.kord.rest.builder.interaction/OptionsBuilder.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.rest.builder.interaction/OptionsBuilder.type.<get-type>|<get-type>(){}[0]

    final var autocomplete // dev.kord.rest.builder.interaction/OptionsBuilder.autocomplete|{}autocomplete[0]
        final fun <get-autocomplete>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/OptionsBuilder.autocomplete.<get-autocomplete>|<get-autocomplete>(){}[0]
        final fun <set-autocomplete>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/OptionsBuilder.autocomplete.<set-autocomplete>|<set-autocomplete>(kotlin.Boolean?){}[0]
    final var default // dev.kord.rest.builder.interaction/OptionsBuilder.default|{}default[0]
        final fun <get-default>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/OptionsBuilder.default.<get-default>|<get-default>(){}[0]
        final fun <set-default>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/OptionsBuilder.default.<set-default>|<set-default>(kotlin.Boolean?){}[0]
    final var required // dev.kord.rest.builder.interaction/OptionsBuilder.required|{}required[0]
        final fun <get-required>(): kotlin/Boolean? // dev.kord.rest.builder.interaction/OptionsBuilder.required.<get-required>|<get-required>(){}[0]
        final fun <set-required>(kotlin/Boolean?) // dev.kord.rest.builder.interaction/OptionsBuilder.required.<set-required>|<set-required>(kotlin.Boolean?){}[0]
    open var description // dev.kord.rest.builder.interaction/OptionsBuilder.description|{}description[0]
        open fun <get-description>(): kotlin/String // dev.kord.rest.builder.interaction/OptionsBuilder.description.<get-description>|<get-description>(){}[0]
        open fun <set-description>(kotlin/String) // dev.kord.rest.builder.interaction/OptionsBuilder.description.<set-description>|<set-description>(kotlin.String){}[0]
    open var descriptionLocalizations // dev.kord.rest.builder.interaction/OptionsBuilder.descriptionLocalizations|{}descriptionLocalizations[0]
        open fun <get-descriptionLocalizations>(): kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>? // dev.kord.rest.builder.interaction/OptionsBuilder.descriptionLocalizations.<get-descriptionLocalizations>|<get-descriptionLocalizations>(){}[0]
        open fun <set-descriptionLocalizations>(kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>?) // dev.kord.rest.builder.interaction/OptionsBuilder.descriptionLocalizations.<set-descriptionLocalizations>|<set-descriptionLocalizations>(kotlin.collections.MutableMap<dev.kord.common.Locale,kotlin.String>?){}[0]
    open var name // dev.kord.rest.builder.interaction/OptionsBuilder.name|{}name[0]
        open fun <get-name>(): kotlin/String // dev.kord.rest.builder.interaction/OptionsBuilder.name.<get-name>|<get-name>(){}[0]
        open fun <set-name>(kotlin/String) // dev.kord.rest.builder.interaction/OptionsBuilder.name.<set-name>|<set-name>(kotlin.String){}[0]
    open var nameLocalizations // dev.kord.rest.builder.interaction/OptionsBuilder.nameLocalizations|{}nameLocalizations[0]
        open fun <get-nameLocalizations>(): kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>? // dev.kord.rest.builder.interaction/OptionsBuilder.nameLocalizations.<get-nameLocalizations>|<get-nameLocalizations>(){}[0]
        open fun <set-nameLocalizations>(kotlin.collections/MutableMap<dev.kord.common/Locale, kotlin/String>?) // dev.kord.rest.builder.interaction/OptionsBuilder.nameLocalizations.<set-nameLocalizations>|<set-nameLocalizations>(kotlin.collections.MutableMap<dev.kord.common.Locale,kotlin.String>?){}[0]

    open fun toRequest(): dev.kord.common.entity/ApplicationCommandOption // dev.kord.rest.builder.interaction/OptionsBuilder.toRequest|toRequest(){}[0]
}

sealed class dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder : dev.kord.rest.builder.message.create/MessageCreateBuilder { // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.<init>|<init>(){}[0]

    final val files // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.files|{}files[0]
        final fun <get-files>(): kotlin.collections/MutableList<dev.kord.rest/NamedFile> // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.files.<get-files>|<get-files>(){}[0]

    final var allowedMentions // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.allowedMentions|{}allowedMentions[0]
        final fun <get-allowedMentions>(): dev.kord.rest.builder.message/AllowedMentionsBuilder? // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.allowedMentions.<get-allowedMentions>|<get-allowedMentions>(){}[0]
        final fun <set-allowedMentions>(dev.kord.rest.builder.message/AllowedMentionsBuilder?) // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.allowedMentions.<set-allowedMentions>|<set-allowedMentions>(dev.kord.rest.builder.message.AllowedMentionsBuilder?){}[0]
    final var attachments // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.attachments|{}attachments[0]
        final fun <get-attachments>(): kotlin.collections/MutableList<dev.kord.rest.builder.message/AttachmentBuilder>? // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.attachments.<get-attachments>|<get-attachments>(){}[0]
        final fun <set-attachments>(kotlin.collections/MutableList<dev.kord.rest.builder.message/AttachmentBuilder>?) // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.attachments.<set-attachments>|<set-attachments>(kotlin.collections.MutableList<dev.kord.rest.builder.message.AttachmentBuilder>?){}[0]
    final var components // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.components|{}components[0]
        final fun <get-components>(): kotlin.collections/MutableList<dev.kord.rest.builder.component/MessageComponentBuilder>? // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.components.<get-components>|<get-components>(){}[0]
        final fun <set-components>(kotlin.collections/MutableList<dev.kord.rest.builder.component/MessageComponentBuilder>?) // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.components.<set-components>|<set-components>(kotlin.collections.MutableList<dev.kord.rest.builder.component.MessageComponentBuilder>?){}[0]
    final var content // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.content|{}content[0]
        final fun <get-content>(): kotlin/String? // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.content.<get-content>|<get-content>(){}[0]
        final fun <set-content>(kotlin/String?) // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.content.<set-content>|<set-content>(kotlin.String?){}[0]
    final var embeds // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.embeds|{}embeds[0]
        final fun <get-embeds>(): kotlin.collections/MutableList<dev.kord.rest.builder.message/EmbedBuilder>? // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.embeds.<get-embeds>|<get-embeds>(){}[0]
        final fun <set-embeds>(kotlin.collections/MutableList<dev.kord.rest.builder.message/EmbedBuilder>?) // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.embeds.<set-embeds>|<set-embeds>(kotlin.collections.MutableList<dev.kord.rest.builder.message.EmbedBuilder>?){}[0]
    final var flags // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity/MessageFlags? // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.flags.<get-flags>|<get-flags>(){}[0]
        final fun <set-flags>(dev.kord.common.entity/MessageFlags?) // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.flags.<set-flags>|<set-flags>(dev.kord.common.entity.MessageFlags?){}[0]
    final var suppressEmbeds // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.suppressEmbeds|{}suppressEmbeds[0]
        final fun <get-suppressEmbeds>(): kotlin/Boolean? // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.suppressEmbeds.<get-suppressEmbeds>|<get-suppressEmbeds>(){}[0]
        final fun <set-suppressEmbeds>(kotlin/Boolean?) // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.suppressEmbeds.<set-suppressEmbeds>|<set-suppressEmbeds>(kotlin.Boolean?){}[0]
    final var suppressNotifications // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.suppressNotifications|{}suppressNotifications[0]
        final fun <get-suppressNotifications>(): kotlin/Boolean? // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.suppressNotifications.<get-suppressNotifications>|<get-suppressNotifications>(){}[0]
        final fun <set-suppressNotifications>(kotlin/Boolean?) // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.suppressNotifications.<set-suppressNotifications>|<set-suppressNotifications>(kotlin.Boolean?){}[0]
    final var tts // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.tts|{}tts[0]
        final fun <get-tts>(): kotlin/Boolean? // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.tts.<get-tts>|<get-tts>(){}[0]
        final fun <set-tts>(kotlin/Boolean?) // dev.kord.rest.builder.message.create/AbstractMessageCreateBuilder.tts.<set-tts>|<set-tts>(kotlin.Boolean?){}[0]
}

sealed class dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder : dev.kord.rest.builder.message.modify/MessageModifyBuilder { // dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder|null[0]
    constructor <init>() // dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder.<init>|<init>(){}[0]

    final val files // dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder.files|{}files[0]
        final fun <get-files>(): kotlin.collections/MutableList<dev.kord.rest/NamedFile> // dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder.files.<get-files>|<get-files>(){}[0]

    final var allowedMentions // dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder.allowedMentions|{}allowedMentions[0]
        final fun <get-allowedMentions>(): dev.kord.rest.builder.message/AllowedMentionsBuilder? // dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder.allowedMentions.<get-allowedMentions>|<get-allowedMentions>(){}[0]
        final fun <set-allowedMentions>(dev.kord.rest.builder.message/AllowedMentionsBuilder?) // dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder.allowedMentions.<set-allowedMentions>|<set-allowedMentions>(dev.kord.rest.builder.message.AllowedMentionsBuilder?){}[0]
    final var attachments // dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder.attachments|{}attachments[0]
        final fun <get-attachments>(): kotlin.collections/MutableList<dev.kord.rest.builder.message/AttachmentBuilder>? // dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder.attachments.<get-attachments>|<get-attachments>(){}[0]
        final fun <set-attachments>(kotlin.collections/MutableList<dev.kord.rest.builder.message/AttachmentBuilder>?) // dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder.attachments.<set-attachments>|<set-attachments>(kotlin.collections.MutableList<dev.kord.rest.builder.message.AttachmentBuilder>?){}[0]
    final var components // dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder.components|{}components[0]
        final fun <get-components>(): kotlin.collections/MutableList<dev.kord.rest.builder.component/MessageComponentBuilder>? // dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder.components.<get-components>|<get-components>(){}[0]
        final fun <set-components>(kotlin.collections/MutableList<dev.kord.rest.builder.component/MessageComponentBuilder>?) // dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder.components.<set-components>|<set-components>(kotlin.collections.MutableList<dev.kord.rest.builder.component.MessageComponentBuilder>?){}[0]
    final var content // dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder.content|{}content[0]
        final fun <get-content>(): kotlin/String? // dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder.content.<get-content>|<get-content>(){}[0]
        final fun <set-content>(kotlin/String?) // dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder.content.<set-content>|<set-content>(kotlin.String?){}[0]
    final var embeds // dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder.embeds|{}embeds[0]
        final fun <get-embeds>(): kotlin.collections/MutableList<dev.kord.rest.builder.message/EmbedBuilder>? // dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder.embeds.<get-embeds>|<get-embeds>(){}[0]
        final fun <set-embeds>(kotlin.collections/MutableList<dev.kord.rest.builder.message/EmbedBuilder>?) // dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder.embeds.<set-embeds>|<set-embeds>(kotlin.collections.MutableList<dev.kord.rest.builder.message.EmbedBuilder>?){}[0]
    final var flags // dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity/MessageFlags? // dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder.flags.<get-flags>|<get-flags>(){}[0]
        final fun <set-flags>(dev.kord.common.entity/MessageFlags?) // dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder.flags.<set-flags>|<set-flags>(dev.kord.common.entity.MessageFlags?){}[0]
    final var suppressEmbeds // dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder.suppressEmbeds|{}suppressEmbeds[0]
        final fun <get-suppressEmbeds>(): kotlin/Boolean? // dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder.suppressEmbeds.<get-suppressEmbeds>|<get-suppressEmbeds>(){}[0]
        final fun <set-suppressEmbeds>(kotlin/Boolean?) // dev.kord.rest.builder.message.modify/AbstractMessageModifyBuilder.suppressEmbeds.<set-suppressEmbeds>|<set-suppressEmbeds>(kotlin.Boolean?){}[0]
}

sealed class dev.kord.rest.ratelimit/RequestResponse { // dev.kord.rest.ratelimit/RequestResponse|null[0]
    constructor <init>() // dev.kord.rest.ratelimit/RequestResponse.<init>|<init>(){}[0]

    abstract val bucketKey // dev.kord.rest.ratelimit/RequestResponse.bucketKey|{}bucketKey[0]
        abstract fun <get-bucketKey>(): dev.kord.rest.ratelimit/BucketKey? // dev.kord.rest.ratelimit/RequestResponse.bucketKey.<get-bucketKey>|<get-bucketKey>(){}[0]
    abstract val rateLimit // dev.kord.rest.ratelimit/RequestResponse.rateLimit|{}rateLimit[0]
        abstract fun <get-rateLimit>(): dev.kord.rest.ratelimit/RateLimit? // dev.kord.rest.ratelimit/RequestResponse.rateLimit.<get-rateLimit>|<get-rateLimit>(){}[0]
    abstract val reset // dev.kord.rest.ratelimit/RequestResponse.reset|{}reset[0]
        abstract fun <get-reset>(): dev.kord.rest.ratelimit/Reset? // dev.kord.rest.ratelimit/RequestResponse.reset.<get-reset>|<get-reset>(){}[0]

    final class Accepted : dev.kord.rest.ratelimit/RequestResponse { // dev.kord.rest.ratelimit/RequestResponse.Accepted|null[0]
        constructor <init>(dev.kord.rest.ratelimit/BucketKey?, dev.kord.rest.ratelimit/RateLimit?, dev.kord.rest.ratelimit/Reset) // dev.kord.rest.ratelimit/RequestResponse.Accepted.<init>|<init>(dev.kord.rest.ratelimit.BucketKey?;dev.kord.rest.ratelimit.RateLimit?;dev.kord.rest.ratelimit.Reset){}[0]

        final val bucketKey // dev.kord.rest.ratelimit/RequestResponse.Accepted.bucketKey|{}bucketKey[0]
            final fun <get-bucketKey>(): dev.kord.rest.ratelimit/BucketKey? // dev.kord.rest.ratelimit/RequestResponse.Accepted.bucketKey.<get-bucketKey>|<get-bucketKey>(){}[0]
        final val rateLimit // dev.kord.rest.ratelimit/RequestResponse.Accepted.rateLimit|{}rateLimit[0]
            final fun <get-rateLimit>(): dev.kord.rest.ratelimit/RateLimit? // dev.kord.rest.ratelimit/RequestResponse.Accepted.rateLimit.<get-rateLimit>|<get-rateLimit>(){}[0]
        final val reset // dev.kord.rest.ratelimit/RequestResponse.Accepted.reset|{}reset[0]
            final fun <get-reset>(): dev.kord.rest.ratelimit/Reset // dev.kord.rest.ratelimit/RequestResponse.Accepted.reset.<get-reset>|<get-reset>(){}[0]

        final fun component1(): dev.kord.rest.ratelimit/BucketKey? // dev.kord.rest.ratelimit/RequestResponse.Accepted.component1|component1(){}[0]
        final fun component2(): dev.kord.rest.ratelimit/RateLimit? // dev.kord.rest.ratelimit/RequestResponse.Accepted.component2|component2(){}[0]
        final fun component3(): dev.kord.rest.ratelimit/Reset // dev.kord.rest.ratelimit/RequestResponse.Accepted.component3|component3(){}[0]
        final fun copy(dev.kord.rest.ratelimit/BucketKey? = ..., dev.kord.rest.ratelimit/RateLimit? = ..., dev.kord.rest.ratelimit/Reset = ...): dev.kord.rest.ratelimit/RequestResponse.Accepted // dev.kord.rest.ratelimit/RequestResponse.Accepted.copy|copy(dev.kord.rest.ratelimit.BucketKey?;dev.kord.rest.ratelimit.RateLimit?;dev.kord.rest.ratelimit.Reset){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.ratelimit/RequestResponse.Accepted.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.rest.ratelimit/RequestResponse.Accepted.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.rest.ratelimit/RequestResponse.Accepted.toString|toString(){}[0]
    }

    final class BucketRateLimit : dev.kord.rest.ratelimit/RequestResponse { // dev.kord.rest.ratelimit/RequestResponse.BucketRateLimit|null[0]
        constructor <init>(dev.kord.rest.ratelimit/BucketKey, dev.kord.rest.ratelimit/RateLimit?, dev.kord.rest.ratelimit/Reset) // dev.kord.rest.ratelimit/RequestResponse.BucketRateLimit.<init>|<init>(dev.kord.rest.ratelimit.BucketKey;dev.kord.rest.ratelimit.RateLimit?;dev.kord.rest.ratelimit.Reset){}[0]

        final val bucketKey // dev.kord.rest.ratelimit/RequestResponse.BucketRateLimit.bucketKey|{}bucketKey[0]
            final fun <get-bucketKey>(): dev.kord.rest.ratelimit/BucketKey // dev.kord.rest.ratelimit/RequestResponse.BucketRateLimit.bucketKey.<get-bucketKey>|<get-bucketKey>(){}[0]
        final val rateLimit // dev.kord.rest.ratelimit/RequestResponse.BucketRateLimit.rateLimit|{}rateLimit[0]
            final fun <get-rateLimit>(): dev.kord.rest.ratelimit/RateLimit? // dev.kord.rest.ratelimit/RequestResponse.BucketRateLimit.rateLimit.<get-rateLimit>|<get-rateLimit>(){}[0]
        final val reset // dev.kord.rest.ratelimit/RequestResponse.BucketRateLimit.reset|{}reset[0]
            final fun <get-reset>(): dev.kord.rest.ratelimit/Reset // dev.kord.rest.ratelimit/RequestResponse.BucketRateLimit.reset.<get-reset>|<get-reset>(){}[0]

        final fun component1(): dev.kord.rest.ratelimit/BucketKey // dev.kord.rest.ratelimit/RequestResponse.BucketRateLimit.component1|component1(){}[0]
        final fun component2(): dev.kord.rest.ratelimit/RateLimit? // dev.kord.rest.ratelimit/RequestResponse.BucketRateLimit.component2|component2(){}[0]
        final fun component3(): dev.kord.rest.ratelimit/Reset // dev.kord.rest.ratelimit/RequestResponse.BucketRateLimit.component3|component3(){}[0]
        final fun copy(dev.kord.rest.ratelimit/BucketKey = ..., dev.kord.rest.ratelimit/RateLimit? = ..., dev.kord.rest.ratelimit/Reset = ...): dev.kord.rest.ratelimit/RequestResponse.BucketRateLimit // dev.kord.rest.ratelimit/RequestResponse.BucketRateLimit.copy|copy(dev.kord.rest.ratelimit.BucketKey;dev.kord.rest.ratelimit.RateLimit?;dev.kord.rest.ratelimit.Reset){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.ratelimit/RequestResponse.BucketRateLimit.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.rest.ratelimit/RequestResponse.BucketRateLimit.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.rest.ratelimit/RequestResponse.BucketRateLimit.toString|toString(){}[0]
    }

    final class GlobalRateLimit : dev.kord.rest.ratelimit/RequestResponse { // dev.kord.rest.ratelimit/RequestResponse.GlobalRateLimit|null[0]
        constructor <init>(dev.kord.rest.ratelimit/BucketKey?, dev.kord.rest.ratelimit/RateLimit?, dev.kord.rest.ratelimit/Reset) // dev.kord.rest.ratelimit/RequestResponse.GlobalRateLimit.<init>|<init>(dev.kord.rest.ratelimit.BucketKey?;dev.kord.rest.ratelimit.RateLimit?;dev.kord.rest.ratelimit.Reset){}[0]

        final val bucketKey // dev.kord.rest.ratelimit/RequestResponse.GlobalRateLimit.bucketKey|{}bucketKey[0]
            final fun <get-bucketKey>(): dev.kord.rest.ratelimit/BucketKey? // dev.kord.rest.ratelimit/RequestResponse.GlobalRateLimit.bucketKey.<get-bucketKey>|<get-bucketKey>(){}[0]
        final val rateLimit // dev.kord.rest.ratelimit/RequestResponse.GlobalRateLimit.rateLimit|{}rateLimit[0]
            final fun <get-rateLimit>(): dev.kord.rest.ratelimit/RateLimit? // dev.kord.rest.ratelimit/RequestResponse.GlobalRateLimit.rateLimit.<get-rateLimit>|<get-rateLimit>(){}[0]
        final val reset // dev.kord.rest.ratelimit/RequestResponse.GlobalRateLimit.reset|{}reset[0]
            final fun <get-reset>(): dev.kord.rest.ratelimit/Reset // dev.kord.rest.ratelimit/RequestResponse.GlobalRateLimit.reset.<get-reset>|<get-reset>(){}[0]

        final fun component1(): dev.kord.rest.ratelimit/BucketKey? // dev.kord.rest.ratelimit/RequestResponse.GlobalRateLimit.component1|component1(){}[0]
        final fun component2(): dev.kord.rest.ratelimit/RateLimit? // dev.kord.rest.ratelimit/RequestResponse.GlobalRateLimit.component2|component2(){}[0]
        final fun component3(): dev.kord.rest.ratelimit/Reset // dev.kord.rest.ratelimit/RequestResponse.GlobalRateLimit.component3|component3(){}[0]
        final fun copy(dev.kord.rest.ratelimit/BucketKey? = ..., dev.kord.rest.ratelimit/RateLimit? = ..., dev.kord.rest.ratelimit/Reset = ...): dev.kord.rest.ratelimit/RequestResponse.GlobalRateLimit // dev.kord.rest.ratelimit/RequestResponse.GlobalRateLimit.copy|copy(dev.kord.rest.ratelimit.BucketKey?;dev.kord.rest.ratelimit.RateLimit?;dev.kord.rest.ratelimit.Reset){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.ratelimit/RequestResponse.GlobalRateLimit.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.rest.ratelimit/RequestResponse.GlobalRateLimit.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.rest.ratelimit/RequestResponse.GlobalRateLimit.toString|toString(){}[0]
    }

    final object Companion // dev.kord.rest.ratelimit/RequestResponse.Companion|null[0]

    final object Error : dev.kord.rest.ratelimit/RequestResponse { // dev.kord.rest.ratelimit/RequestResponse.Error|null[0]
        final val bucketKey // dev.kord.rest.ratelimit/RequestResponse.Error.bucketKey|{}bucketKey[0]
            final fun <get-bucketKey>(): dev.kord.rest.ratelimit/BucketKey? // dev.kord.rest.ratelimit/RequestResponse.Error.bucketKey.<get-bucketKey>|<get-bucketKey>(){}[0]
        final val rateLimit // dev.kord.rest.ratelimit/RequestResponse.Error.rateLimit|{}rateLimit[0]
            final fun <get-rateLimit>(): dev.kord.rest.ratelimit/RateLimit? // dev.kord.rest.ratelimit/RequestResponse.Error.rateLimit.<get-rateLimit>|<get-rateLimit>(){}[0]
        final val reset // dev.kord.rest.ratelimit/RequestResponse.Error.reset|{}reset[0]
            final fun <get-reset>(): dev.kord.rest.ratelimit/Reset? // dev.kord.rest.ratelimit/RequestResponse.Error.reset.<get-reset>|<get-reset>(){}[0]
    }
}

sealed class dev.kord.rest.request/RequestIdentifier { // dev.kord.rest.request/RequestIdentifier|null[0]
    constructor <init>() // dev.kord.rest.request/RequestIdentifier.<init>|<init>(){}[0]

    final class MajorParamIdentifier : dev.kord.rest.request/RequestIdentifier { // dev.kord.rest.request/RequestIdentifier.MajorParamIdentifier|null[0]
        constructor <init>(dev.kord.rest.route/Route<*>, kotlin/String) // dev.kord.rest.request/RequestIdentifier.MajorParamIdentifier.<init>|<init>(dev.kord.rest.route.Route<*>;kotlin.String){}[0]

        final val param // dev.kord.rest.request/RequestIdentifier.MajorParamIdentifier.param|{}param[0]
            final fun <get-param>(): kotlin/String // dev.kord.rest.request/RequestIdentifier.MajorParamIdentifier.param.<get-param>|<get-param>(){}[0]
        final val route // dev.kord.rest.request/RequestIdentifier.MajorParamIdentifier.route|{}route[0]
            final fun <get-route>(): dev.kord.rest.route/Route<*> // dev.kord.rest.request/RequestIdentifier.MajorParamIdentifier.route.<get-route>|<get-route>(){}[0]

        final fun component1(): dev.kord.rest.route/Route<*> // dev.kord.rest.request/RequestIdentifier.MajorParamIdentifier.component1|component1(){}[0]
        final fun component2(): kotlin/String // dev.kord.rest.request/RequestIdentifier.MajorParamIdentifier.component2|component2(){}[0]
        final fun copy(dev.kord.rest.route/Route<*> = ..., kotlin/String = ...): dev.kord.rest.request/RequestIdentifier.MajorParamIdentifier // dev.kord.rest.request/RequestIdentifier.MajorParamIdentifier.copy|copy(dev.kord.rest.route.Route<*>;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.request/RequestIdentifier.MajorParamIdentifier.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.rest.request/RequestIdentifier.MajorParamIdentifier.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.rest.request/RequestIdentifier.MajorParamIdentifier.toString|toString(){}[0]
    }

    final class RouteIdentifier : dev.kord.rest.request/RequestIdentifier { // dev.kord.rest.request/RequestIdentifier.RouteIdentifier|null[0]
        constructor <init>(dev.kord.rest.route/Route<*>) // dev.kord.rest.request/RequestIdentifier.RouteIdentifier.<init>|<init>(dev.kord.rest.route.Route<*>){}[0]

        final val route // dev.kord.rest.request/RequestIdentifier.RouteIdentifier.route|{}route[0]
            final fun <get-route>(): dev.kord.rest.route/Route<*> // dev.kord.rest.request/RequestIdentifier.RouteIdentifier.route.<get-route>|<get-route>(){}[0]

        final fun component1(): dev.kord.rest.route/Route<*> // dev.kord.rest.request/RequestIdentifier.RouteIdentifier.component1|component1(){}[0]
        final fun copy(dev.kord.rest.route/Route<*> = ...): dev.kord.rest.request/RequestIdentifier.RouteIdentifier // dev.kord.rest.request/RequestIdentifier.RouteIdentifier.copy|copy(dev.kord.rest.route.Route<*>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.rest.request/RequestIdentifier.RouteIdentifier.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.rest.request/RequestIdentifier.RouteIdentifier.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.rest.request/RequestIdentifier.RouteIdentifier.toString|toString(){}[0]
    }
}

final object dev.kord.rest.route/DiscordCdn { // dev.kord.rest.route/DiscordCdn|null[0]
    final fun applicationCover(dev.kord.common.entity/Snowflake, kotlin/String): dev.kord.rest.route/CdnUrl // dev.kord.rest.route/DiscordCdn.applicationCover|applicationCover(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    final fun applicationIcon(dev.kord.common.entity/Snowflake, kotlin/String): dev.kord.rest.route/CdnUrl // dev.kord.rest.route/DiscordCdn.applicationIcon|applicationIcon(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    final fun defaultAvatar(kotlin/Int): dev.kord.rest.route/CdnUrl // dev.kord.rest.route/DiscordCdn.defaultAvatar|defaultAvatar(kotlin.Int){}[0]
    final fun defaultUserAvatar(dev.kord.common.entity/Snowflake): dev.kord.rest.route/CdnUrl // dev.kord.rest.route/DiscordCdn.defaultUserAvatar|defaultUserAvatar(dev.kord.common.entity.Snowflake){}[0]
    final fun defaultUserAvatar(kotlin/Int): dev.kord.rest.route/CdnUrl // dev.kord.rest.route/DiscordCdn.defaultUserAvatar|defaultUserAvatar(kotlin.Int){}[0]
    final fun emoji(dev.kord.common.entity/Snowflake): dev.kord.rest.route/CdnUrl // dev.kord.rest.route/DiscordCdn.emoji|emoji(dev.kord.common.entity.Snowflake){}[0]
    final fun guildBanner(dev.kord.common.entity/Snowflake, kotlin/String): dev.kord.rest.route/CdnUrl // dev.kord.rest.route/DiscordCdn.guildBanner|guildBanner(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    final fun guildDiscoverySplash(dev.kord.common.entity/Snowflake, kotlin/String): dev.kord.rest.route/CdnUrl // dev.kord.rest.route/DiscordCdn.guildDiscoverySplash|guildDiscoverySplash(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    final fun guildIcon(dev.kord.common.entity/Snowflake, kotlin/String): dev.kord.rest.route/CdnUrl // dev.kord.rest.route/DiscordCdn.guildIcon|guildIcon(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    final fun guildScheduledEventCover(dev.kord.common.entity/Snowflake, kotlin/String): dev.kord.rest.route/CdnUrl // dev.kord.rest.route/DiscordCdn.guildScheduledEventCover|guildScheduledEventCover(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    final fun guildSplash(dev.kord.common.entity/Snowflake, kotlin/String): dev.kord.rest.route/CdnUrl // dev.kord.rest.route/DiscordCdn.guildSplash|guildSplash(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    final fun memberAvatar(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String): dev.kord.rest.route/CdnUrl // dev.kord.rest.route/DiscordCdn.memberAvatar|memberAvatar(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    final fun memberBanner(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String): dev.kord.rest.route/CdnUrl // dev.kord.rest.route/DiscordCdn.memberBanner|memberBanner(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    final fun roleIcon(dev.kord.common.entity/Snowflake, kotlin/String): dev.kord.rest.route/CdnUrl // dev.kord.rest.route/DiscordCdn.roleIcon|roleIcon(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    final fun sticker(dev.kord.common.entity/Snowflake): dev.kord.rest.route/CdnUrl // dev.kord.rest.route/DiscordCdn.sticker|sticker(dev.kord.common.entity.Snowflake){}[0]
    final fun stickerPackBanner(dev.kord.common.entity/Snowflake): dev.kord.rest.route/CdnUrl // dev.kord.rest.route/DiscordCdn.stickerPackBanner|stickerPackBanner(dev.kord.common.entity.Snowflake){}[0]
    final fun teamIcon(dev.kord.common.entity/Snowflake, kotlin/String): dev.kord.rest.route/CdnUrl // dev.kord.rest.route/DiscordCdn.teamIcon|teamIcon(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    final fun userAvatar(dev.kord.common.entity/Snowflake, kotlin/String): dev.kord.rest.route/CdnUrl // dev.kord.rest.route/DiscordCdn.userAvatar|userAvatar(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    final fun userAvatarDecoration(dev.kord.common.entity/Snowflake, kotlin/String): dev.kord.rest.route/CdnUrl // dev.kord.rest.route/DiscordCdn.userAvatarDecoration|userAvatarDecoration(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    final fun userBanner(dev.kord.common.entity/Snowflake, kotlin/String): dev.kord.rest.route/CdnUrl // dev.kord.rest.route/DiscordCdn.userBanner|userBanner(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
}

final val dev.kord.rest.request/bucket // dev.kord.rest.request/bucket|@io.ktor.client.statement.HttpResponse{}bucket[0]
    final fun (io.ktor.client.statement/HttpResponse).<get-bucket>(): dev.kord.rest.ratelimit/BucketKey? // dev.kord.rest.request/bucket.<get-bucket>|<get-bucket>@io.ktor.client.statement.HttpResponse(){}[0]
final val dev.kord.rest.request/channelResetPoint // dev.kord.rest.request/channelResetPoint|@io.ktor.client.statement.HttpResponse{}channelResetPoint[0]
    final fun (io.ktor.client.statement/HttpResponse).<get-channelResetPoint>(): kotlinx.datetime/Instant // dev.kord.rest.request/channelResetPoint.<get-channelResetPoint>|<get-channelResetPoint>@io.ktor.client.statement.HttpResponse(){}[0]
final val dev.kord.rest.request/identifier // dev.kord.rest.request/identifier|@dev.kord.rest.request.Request<*,*>{}identifier[0]
    final fun (dev.kord.rest.request/Request<*, *>).<get-identifier>(): dev.kord.rest.request/RequestIdentifier // dev.kord.rest.request/identifier.<get-identifier>|<get-identifier>@dev.kord.rest.request.Request<*,*>(){}[0]
final val dev.kord.rest.request/isChannelRateLimit // dev.kord.rest.request/isChannelRateLimit|@io.ktor.client.statement.HttpResponse{}isChannelRateLimit[0]
    final fun (io.ktor.client.statement/HttpResponse).<get-isChannelRateLimit>(): kotlin/Boolean // dev.kord.rest.request/isChannelRateLimit.<get-isChannelRateLimit>|<get-isChannelRateLimit>@io.ktor.client.statement.HttpResponse(){}[0]
final val dev.kord.rest.request/isError // dev.kord.rest.request/isError|@io.ktor.client.statement.HttpResponse{}isError[0]
    final fun (io.ktor.client.statement/HttpResponse).<get-isError>(): kotlin/Boolean // dev.kord.rest.request/isError.<get-isError>|<get-isError>@io.ktor.client.statement.HttpResponse(){}[0]
final val dev.kord.rest.request/isErrorWithRateLimit // dev.kord.rest.request/isErrorWithRateLimit|@io.ktor.client.statement.HttpResponse{}isErrorWithRateLimit[0]
    final fun (io.ktor.client.statement/HttpResponse).<get-isErrorWithRateLimit>(): kotlin/Boolean // dev.kord.rest.request/isErrorWithRateLimit.<get-isErrorWithRateLimit>|<get-isErrorWithRateLimit>@io.ktor.client.statement.HttpResponse(){}[0]
final val dev.kord.rest.request/isGlobalRateLimit // dev.kord.rest.request/isGlobalRateLimit|@io.ktor.client.statement.HttpResponse{}isGlobalRateLimit[0]
    final fun (io.ktor.client.statement/HttpResponse).<get-isGlobalRateLimit>(): kotlin/Boolean // dev.kord.rest.request/isGlobalRateLimit.<get-isGlobalRateLimit>|<get-isGlobalRateLimit>@io.ktor.client.statement.HttpResponse(){}[0]
final val dev.kord.rest.request/isRateLimit // dev.kord.rest.request/isRateLimit|@io.ktor.client.statement.HttpResponse{}isRateLimit[0]
    final fun (io.ktor.client.statement/HttpResponse).<get-isRateLimit>(): kotlin/Boolean // dev.kord.rest.request/isRateLimit.<get-isRateLimit>|<get-isRateLimit>@io.ktor.client.statement.HttpResponse(){}[0]
final val dev.kord.rest.request/rateLimitRemaining // dev.kord.rest.request/rateLimitRemaining|@io.ktor.client.statement.HttpResponse{}rateLimitRemaining[0]
    final fun (io.ktor.client.statement/HttpResponse).<get-rateLimitRemaining>(): kotlin/Long? // dev.kord.rest.request/rateLimitRemaining.<get-rateLimitRemaining>|<get-rateLimitRemaining>@io.ktor.client.statement.HttpResponse(){}[0]
final val dev.kord.rest.request/rateLimitTotal // dev.kord.rest.request/rateLimitTotal|@io.ktor.client.statement.HttpResponse{}rateLimitTotal[0]
    final fun (io.ktor.client.statement/HttpResponse).<get-rateLimitTotal>(): kotlin/Long? // dev.kord.rest.request/rateLimitTotal.<get-rateLimitTotal>|<get-rateLimitTotal>@io.ktor.client.statement.HttpResponse(){}[0]

final fun (dev.kord.rest.builder.automoderation/AllowedKeywordsAutoModerationRuleBuilder).dev.kord.rest.builder.automoderation/allowAnywhereKeyword(kotlin/String) // dev.kord.rest.builder.automoderation/allowAnywhereKeyword|allowAnywhereKeyword@dev.kord.rest.builder.automoderation.AllowedKeywordsAutoModerationRuleBuilder(kotlin.String){}[0]
final fun (dev.kord.rest.builder.automoderation/AllowedKeywordsAutoModerationRuleBuilder).dev.kord.rest.builder.automoderation/allowKeyword(kotlin/String) // dev.kord.rest.builder.automoderation/allowKeyword|allowKeyword@dev.kord.rest.builder.automoderation.AllowedKeywordsAutoModerationRuleBuilder(kotlin.String){}[0]
final fun (dev.kord.rest.builder.automoderation/AllowedKeywordsAutoModerationRuleBuilder).dev.kord.rest.builder.automoderation/allowPrefixKeyword(kotlin/String) // dev.kord.rest.builder.automoderation/allowPrefixKeyword|allowPrefixKeyword@dev.kord.rest.builder.automoderation.AllowedKeywordsAutoModerationRuleBuilder(kotlin.String){}[0]
final fun (dev.kord.rest.builder.automoderation/AllowedKeywordsAutoModerationRuleBuilder).dev.kord.rest.builder.automoderation/allowSuffixKeyword(kotlin/String) // dev.kord.rest.builder.automoderation/allowSuffixKeyword|allowSuffixKeyword@dev.kord.rest.builder.automoderation.AllowedKeywordsAutoModerationRuleBuilder(kotlin.String){}[0]
final fun (dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder).dev.kord.rest.builder.automoderation/exemptChannel(dev.kord.common.entity/Snowflake) // dev.kord.rest.builder.automoderation/exemptChannel|exemptChannel@dev.kord.rest.builder.automoderation.AutoModerationRuleBuilder(dev.kord.common.entity.Snowflake){}[0]
final fun (dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder).dev.kord.rest.builder.automoderation/exemptRole(dev.kord.common.entity/Snowflake) // dev.kord.rest.builder.automoderation/exemptRole|exemptRole@dev.kord.rest.builder.automoderation.AutoModerationRuleBuilder(dev.kord.common.entity.Snowflake){}[0]
final fun (dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleBuilder).dev.kord.rest.builder.automoderation/anywhereKeyword(kotlin/String) // dev.kord.rest.builder.automoderation/anywhereKeyword|anywhereKeyword@dev.kord.rest.builder.automoderation.KeywordAutoModerationRuleBuilder(kotlin.String){}[0]
final fun (dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleBuilder).dev.kord.rest.builder.automoderation/keyword(kotlin/String) // dev.kord.rest.builder.automoderation/keyword|keyword@dev.kord.rest.builder.automoderation.KeywordAutoModerationRuleBuilder(kotlin.String){}[0]
final fun (dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleBuilder).dev.kord.rest.builder.automoderation/prefixKeyword(kotlin/String) // dev.kord.rest.builder.automoderation/prefixKeyword|prefixKeyword@dev.kord.rest.builder.automoderation.KeywordAutoModerationRuleBuilder(kotlin.String){}[0]
final fun (dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleBuilder).dev.kord.rest.builder.automoderation/regexPattern(kotlin/String) // dev.kord.rest.builder.automoderation/regexPattern|regexPattern@dev.kord.rest.builder.automoderation.KeywordAutoModerationRuleBuilder(kotlin.String){}[0]
final fun (dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleBuilder).dev.kord.rest.builder.automoderation/suffixKeyword(kotlin/String) // dev.kord.rest.builder.automoderation/suffixKeyword|suffixKeyword@dev.kord.rest.builder.automoderation.KeywordAutoModerationRuleBuilder(kotlin.String){}[0]
final fun (dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleBuilder).dev.kord.rest.builder.automoderation/preset(dev.kord.common.entity/AutoModerationRuleKeywordPresetType) // dev.kord.rest.builder.automoderation/preset|preset@dev.kord.rest.builder.automoderation.KeywordPresetAutoModerationRuleBuilder(dev.kord.common.entity.AutoModerationRuleKeywordPresetType){}[0]
final fun (dev.kord.rest.builder.channel.thread/StartForumThreadBuilder).dev.kord.rest.builder.channel.thread/applyTag(dev.kord.common.entity/Snowflake) // dev.kord.rest.builder.channel.thread/applyTag|applyTag@dev.kord.rest.builder.channel.thread.StartForumThreadBuilder(dev.kord.common.entity.Snowflake){}[0]
final fun (dev.kord.rest.builder.channel.thread/ThreadModifyBuilder).dev.kord.rest.builder.channel.thread/applyTag(dev.kord.common.entity/Snowflake) // dev.kord.rest.builder.channel.thread/applyTag|applyTag@dev.kord.rest.builder.channel.thread.ThreadModifyBuilder(dev.kord.common.entity.Snowflake){}[0]
final fun (dev.kord.rest.builder.component/ChannelSelectBuilder).dev.kord.rest.builder.component/channelType(dev.kord.common.entity/ChannelType) // dev.kord.rest.builder.component/channelType|channelType@dev.kord.rest.builder.component.ChannelSelectBuilder(dev.kord.common.entity.ChannelType){}[0]
final fun (dev.kord.rest.builder.guild/GuildOnboardingModifyBuilder).dev.kord.rest.builder.guild/defaultChannelId(dev.kord.common.entity/Snowflake) // dev.kord.rest.builder.guild/defaultChannelId|defaultChannelId@dev.kord.rest.builder.guild.GuildOnboardingModifyBuilder(dev.kord.common.entity.Snowflake){}[0]
final fun (dev.kord.rest.builder.message.create/ForumMessageCreateBuilder).dev.kord.rest.builder.message.create/stickerId(dev.kord.common.entity/Snowflake) // dev.kord.rest.builder.message.create/stickerId|stickerId@dev.kord.rest.builder.message.create.ForumMessageCreateBuilder(dev.kord.common.entity.Snowflake){}[0]
final fun (dev.kord.rest.builder.message.create/UserMessageCreateBuilder).dev.kord.rest.builder.message.create/stickerId(dev.kord.common.entity/Snowflake) // dev.kord.rest.builder.message.create/stickerId|stickerId@dev.kord.rest.builder.message.create.UserMessageCreateBuilder(dev.kord.common.entity.Snowflake){}[0]
final fun (dev.kord.rest.builder.message.create/WebhookMessageCreateBuilder).dev.kord.rest.builder.message.create/applyTag(dev.kord.common.entity/Snowflake) // dev.kord.rest.builder.message.create/applyTag|applyTag@dev.kord.rest.builder.message.create.WebhookMessageCreateBuilder(dev.kord.common.entity.Snowflake){}[0]
final fun (dev.kord.rest.ratelimit/RequestResponse.Companion).dev.kord.rest.request/from(io.ktor.client.statement/HttpResponse, kotlinx.datetime/Clock): dev.kord.rest.ratelimit/RequestResponse // dev.kord.rest.request/from|from@dev.kord.rest.ratelimit.RequestResponse.Companion(io.ktor.client.statement.HttpResponse;kotlinx.datetime.Clock){}[0]
final fun (dev.kord.rest.request/KtorRequestHandler).dev.kord.rest.request/withStackTraceRecovery(): dev.kord.rest.request/StackTraceRecoveringKtorRequestHandler // dev.kord.rest.request/withStackTraceRecovery|withStackTraceRecovery@dev.kord.rest.request.KtorRequestHandler(){}[0]
final fun (dev.kord.rest.request/Request<*, *>).dev.kord.rest.request/logString(kotlin/String): kotlin/String // dev.kord.rest.request/logString|logString@dev.kord.rest.request.Request<*,*>(kotlin.String){}[0]
final fun (dev.kord.rest.request/RequestBuilder<*>).dev.kord.rest.service/interactionIdInteractionToken(dev.kord.common.entity/Snowflake, kotlin/String) // dev.kord.rest.service/interactionIdInteractionToken|interactionIdInteractionToken@dev.kord.rest.request.RequestBuilder<*>(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
final fun (dev.kord.rest.request/RequestBuilder<*>).dev.kord.rest.service/webhookIdToken(dev.kord.common.entity/Snowflake, kotlin/String) // dev.kord.rest.service/webhookIdToken|webhookIdToken@dev.kord.rest.request.RequestBuilder<*>(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
final fun (dev.kord.rest.request/RequestBuilder<*>).dev.kord.rest.service/webhookIdTokenMessageIdThreadId(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake?) // dev.kord.rest.service/webhookIdTokenMessageIdThreadId|webhookIdTokenMessageIdThreadId@dev.kord.rest.request.RequestBuilder<*>(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?){}[0]
final fun (dev.kord.rest.request/RequestBuilder<*>).dev.kord.rest.service/webhookIdTokenWaitThreadId(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Boolean?, dev.kord.common.entity/Snowflake?) // dev.kord.rest.service/webhookIdTokenWaitThreadId|webhookIdTokenWaitThreadId@dev.kord.rest.request.RequestBuilder<*>(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Boolean?;dev.kord.common.entity.Snowflake?){}[0]
final fun (io.ktor.client.statement/HttpResponse).dev.kord.rest.request/channelResetPoint(kotlinx.datetime/Clock): kotlinx.datetime/Instant // dev.kord.rest.request/channelResetPoint|channelResetPoint@io.ktor.client.statement.HttpResponse(kotlinx.datetime.Clock){}[0]
final fun (io.ktor.client.statement/HttpResponse).dev.kord.rest.request/globalSuspensionPoint(kotlinx.datetime/Clock): kotlin/Long // dev.kord.rest.request/globalSuspensionPoint|globalSuspensionPoint@io.ktor.client.statement.HttpResponse(kotlinx.datetime.Clock){}[0]
final fun (io.ktor.client.statement/HttpResponse).dev.kord.rest.request/logString(kotlin/String): kotlin/String // dev.kord.rest.request/logString|logString@io.ktor.client.statement.HttpResponse(kotlin.String){}[0]
final fun <#A: kotlin/Any?> (dev.kord.rest.request/RequestBuilder<#A>).dev.kord.rest.request/auditLogReason(kotlin/String?) // dev.kord.rest.request/auditLogReason|auditLogReason@dev.kord.rest.request.RequestBuilder<0:0>(kotlin.String?){0§<kotlin.Any?>}[0]
final fun dev.kord.rest.request/KtorRequestHandler(kotlin/String, dev.kord.rest.ratelimit/RequestRateLimiter = ..., kotlinx.datetime/Clock = ..., kotlinx.serialization.json/Json = ...): dev.kord.rest.request/KtorRequestHandler // dev.kord.rest.request/KtorRequestHandler|KtorRequestHandler(kotlin.String;dev.kord.rest.ratelimit.RequestRateLimiter;kotlinx.datetime.Clock;kotlinx.serialization.json.Json){}[0]
final fun dev.kord.rest.service/RestClient(kotlin/String): dev.kord.rest.service/RestClient // dev.kord.rest.service/RestClient|RestClient(kotlin.String){}[0]
final inline fun (dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder).dev.kord.rest.builder.automoderation/blockMessage(kotlin/Function1<dev.kord.rest.builder.automoderation/BlockMessageAutoModerationActionBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.automoderation/blockMessage|blockMessage@dev.kord.rest.builder.automoderation.AutoModerationRuleBuilder(kotlin.Function1<dev.kord.rest.builder.automoderation.BlockMessageAutoModerationActionBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.automoderation/AutoModerationRuleBuilder).dev.kord.rest.builder.automoderation/sendAlertMessage(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.automoderation/SendAlertMessageAutoModerationActionBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.automoderation/sendAlertMessage|sendAlertMessage@dev.kord.rest.builder.automoderation.AutoModerationRuleBuilder(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.automoderation.SendAlertMessageAutoModerationActionBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.automoderation/TimeoutAutoModerationRuleBuilder).dev.kord.rest.builder.automoderation/timeout(kotlin.time/Duration, kotlin/Function1<dev.kord.rest.builder.automoderation/TimeoutAutoModerationActionBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.automoderation/timeout|timeout@dev.kord.rest.builder.automoderation.TimeoutAutoModerationRuleBuilder(kotlin.time.Duration;kotlin.Function1<dev.kord.rest.builder.automoderation.TimeoutAutoModerationActionBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.channel/PermissionOverwritesBuilder).dev.kord.rest.builder.channel/addMemberOverwrite(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.channel/PermissionOverwriteBuilder, kotlin/Unit>) // dev.kord.rest.builder.channel/addMemberOverwrite|addMemberOverwrite@dev.kord.rest.builder.channel.PermissionOverwritesBuilder(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.channel.PermissionOverwriteBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.channel/PermissionOverwritesBuilder).dev.kord.rest.builder.channel/addRoleOverwrite(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.channel/PermissionOverwriteBuilder, kotlin/Unit>) // dev.kord.rest.builder.channel/addRoleOverwrite|addRoleOverwrite@dev.kord.rest.builder.channel.PermissionOverwritesBuilder(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.channel.PermissionOverwriteBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.component/StringSelectBuilder).dev.kord.rest.builder.component/option(kotlin/String, kotlin/String, kotlin/Function1<dev.kord.rest.builder.component/SelectOptionBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.component/option|option@dev.kord.rest.builder.component.StringSelectBuilder(kotlin.String;kotlin.String;kotlin.Function1<dev.kord.rest.builder.component.SelectOptionBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.guild/GuildOnboardingModifyBuilder).dev.kord.rest.builder.guild/prompt(dev.kord.common.entity/OnboardingPromptType, kotlin/String, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, kotlin/Function1<dev.kord.rest.builder.guild/OnboardingPromptBuilder, kotlin/Unit>) // dev.kord.rest.builder.guild/prompt|prompt@dev.kord.rest.builder.guild.GuildOnboardingModifyBuilder(dev.kord.common.entity.OnboardingPromptType;kotlin.String;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Function1<dev.kord.rest.builder.guild.OnboardingPromptBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.guild/OnboardingPromptBuilder).dev.kord.rest.builder.guild/option(kotlin/String, kotlin/Function1<dev.kord.rest.builder.guild/OnboardingPromptOptionBuilder, kotlin/Unit>) // dev.kord.rest.builder.guild/option|option@dev.kord.rest.builder.guild.OnboardingPromptBuilder(kotlin.String;kotlin.Function1<dev.kord.rest.builder.guild.OnboardingPromptOptionBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.interaction/BaseInputChatBuilder).dev.kord.rest.builder.interaction/attachment(kotlin/String, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/AttachmentBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.interaction/attachment|attachment@dev.kord.rest.builder.interaction.BaseInputChatBuilder(kotlin.String;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.AttachmentBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.interaction/BaseInputChatBuilder).dev.kord.rest.builder.interaction/boolean(kotlin/String, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/BooleanBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.interaction/boolean|boolean@dev.kord.rest.builder.interaction.BaseInputChatBuilder(kotlin.String;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.BooleanBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.interaction/BaseInputChatBuilder).dev.kord.rest.builder.interaction/channel(kotlin/String, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/ChannelBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.interaction/channel|channel@dev.kord.rest.builder.interaction.BaseInputChatBuilder(kotlin.String;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.ChannelBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.interaction/BaseInputChatBuilder).dev.kord.rest.builder.interaction/integer(kotlin/String, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/IntegerOptionBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.interaction/integer|integer@dev.kord.rest.builder.interaction.BaseInputChatBuilder(kotlin.String;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.IntegerOptionBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.interaction/BaseInputChatBuilder).dev.kord.rest.builder.interaction/mentionable(kotlin/String, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/MentionableBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.interaction/mentionable|mentionable@dev.kord.rest.builder.interaction.BaseInputChatBuilder(kotlin.String;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.MentionableBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.interaction/BaseInputChatBuilder).dev.kord.rest.builder.interaction/number(kotlin/String, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/NumberOptionBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.interaction/number|number@dev.kord.rest.builder.interaction.BaseInputChatBuilder(kotlin.String;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.NumberOptionBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.interaction/BaseInputChatBuilder).dev.kord.rest.builder.interaction/role(kotlin/String, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/RoleBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.interaction/role|role@dev.kord.rest.builder.interaction.BaseInputChatBuilder(kotlin.String;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.RoleBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.interaction/BaseInputChatBuilder).dev.kord.rest.builder.interaction/string(kotlin/String, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/StringChoiceBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.interaction/string|string@dev.kord.rest.builder.interaction.BaseInputChatBuilder(kotlin.String;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.StringChoiceBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.interaction/BaseInputChatBuilder).dev.kord.rest.builder.interaction/user(kotlin/String, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/UserBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.interaction/user|user@dev.kord.rest.builder.interaction.BaseInputChatBuilder(kotlin.String;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.UserBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.interaction/MultiApplicationCommandBuilder).dev.kord.rest.builder.interaction/input(kotlin/String, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/ChatInputCreateBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.interaction/input|input@dev.kord.rest.builder.interaction.MultiApplicationCommandBuilder(kotlin.String;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.ChatInputCreateBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.interaction/MultiApplicationCommandBuilder).dev.kord.rest.builder.interaction/message(kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/MessageCommandCreateBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.interaction/message|message@dev.kord.rest.builder.interaction.MultiApplicationCommandBuilder(kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.MessageCommandCreateBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.interaction/MultiApplicationCommandBuilder).dev.kord.rest.builder.interaction/user(kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/UserCommandCreateBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.interaction/user|user@dev.kord.rest.builder.interaction.MultiApplicationCommandBuilder(kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.UserCommandCreateBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.interaction/RootInputChatBuilder).dev.kord.rest.builder.interaction/group(kotlin/String, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/GroupCommandBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.interaction/group|group@dev.kord.rest.builder.interaction.RootInputChatBuilder(kotlin.String;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.GroupCommandBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.interaction/RootInputChatBuilder).dev.kord.rest.builder.interaction/subCommand(kotlin/String, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/SubCommandBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.interaction/subCommand|subCommand@dev.kord.rest.builder.interaction.RootInputChatBuilder(kotlin.String;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.SubCommandBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.message.modify/MessageModifyBuilder).dev.kord.rest.builder.message.modify/keepAttachment(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.message/AttachmentBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.message.modify/keepAttachment|keepAttachment@dev.kord.rest.builder.message.modify.MessageModifyBuilder(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.message.AttachmentBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.message/MessageBuilder).dev.kord.rest.builder.message/actionRow(kotlin/Function1<dev.kord.rest.builder.component/ActionRowBuilder, kotlin/Unit>) // dev.kord.rest.builder.message/actionRow|actionRow@dev.kord.rest.builder.message.MessageBuilder(kotlin.Function1<dev.kord.rest.builder.component.ActionRowBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.message/MessageBuilder).dev.kord.rest.builder.message/addFile(kotlin/String, io.ktor.client.request.forms/ChannelProvider, kotlin/Function1<dev.kord.rest.builder.message/AttachmentBuilder, kotlin/Unit>): dev.kord.rest/NamedFile // dev.kord.rest.builder.message/addFile|addFile@dev.kord.rest.builder.message.MessageBuilder(kotlin.String;io.ktor.client.request.forms.ChannelProvider;kotlin.Function1<dev.kord.rest.builder.message.AttachmentBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.message/MessageBuilder).dev.kord.rest.builder.message/allowedMentions(kotlin/Function1<dev.kord.rest.builder.message/AllowedMentionsBuilder, kotlin/Unit> = ...) // dev.kord.rest.builder.message/allowedMentions|allowedMentions@dev.kord.rest.builder.message.MessageBuilder(kotlin.Function1<dev.kord.rest.builder.message.AllowedMentionsBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.message/MessageBuilder).dev.kord.rest.builder.message/embed(kotlin/Function1<dev.kord.rest.builder.message/EmbedBuilder, kotlin/Unit>) // dev.kord.rest.builder.message/embed|embed@dev.kord.rest.builder.message.MessageBuilder(kotlin.Function1<dev.kord.rest.builder.message.EmbedBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.rest.builder.message/MessageBuilder).dev.kord.rest.builder.message/messageFlags(kotlin/Function1<dev.kord.common.entity/MessageFlags.Builder, kotlin/Unit>) // dev.kord.rest.builder.message/messageFlags|messageFlags@dev.kord.rest.builder.message.MessageBuilder(kotlin.Function1<dev.kord.common.entity.MessageFlags.Builder,kotlin.Unit>){}[0]
final suspend fun (io.ktor.client.statement/HttpResponse).dev.kord.rest.request/errorString(): kotlin/String // dev.kord.rest.request/errorString|errorString@io.ktor.client.statement.HttpResponse(){}[0]
final suspend inline fun (dev.kord.rest.service/ChannelService).dev.kord.rest.service/editMemberPermissions(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.channel/ChannelPermissionModifyBuilder, kotlin/Unit>) // dev.kord.rest.service/editMemberPermissions|editMemberPermissions@dev.kord.rest.service.ChannelService(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.channel.ChannelPermissionModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.rest.service/ChannelService).dev.kord.rest.service/editRolePermission(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.channel/ChannelPermissionModifyBuilder, kotlin/Unit>) // dev.kord.rest.service/editRolePermission|editRolePermission@dev.kord.rest.service.ChannelService(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.channel.ChannelPermissionModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.rest.service/ChannelService).dev.kord.rest.service/patchCategory(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.channel/CategoryModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/patchCategory|patchCategory@dev.kord.rest.service.ChannelService(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.channel.CategoryModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.rest.service/ChannelService).dev.kord.rest.service/patchForumChannel(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.channel/ForumChannelModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/patchForumChannel|patchForumChannel@dev.kord.rest.service.ChannelService(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.channel.ForumChannelModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.rest.service/ChannelService).dev.kord.rest.service/patchMediaChannel(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.channel/MediaChannelModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/patchMediaChannel|patchMediaChannel@dev.kord.rest.service.ChannelService(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.channel.MediaChannelModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.rest.service/ChannelService).dev.kord.rest.service/patchNewsChannel(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.channel/NewsChannelModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/patchNewsChannel|patchNewsChannel@dev.kord.rest.service.ChannelService(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.channel.NewsChannelModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.rest.service/ChannelService).dev.kord.rest.service/patchStageVoiceChannel(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/patchStageVoiceChannel|patchStageVoiceChannel@dev.kord.rest.service.ChannelService(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.channel.StageVoiceChannelModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.rest.service/ChannelService).dev.kord.rest.service/patchTextChannel(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.channel/TextChannelModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/patchTextChannel|patchTextChannel@dev.kord.rest.service.ChannelService(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.channel.TextChannelModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.rest.service/ChannelService).dev.kord.rest.service/patchVoiceChannel(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.channel/VoiceChannelModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/patchVoiceChannel|patchVoiceChannel@dev.kord.rest.service.ChannelService(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.channel.VoiceChannelModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.rest.service/GuildService).dev.kord.rest.service/createCategory(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel/CategoryCreateBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/createCategory|createCategory@dev.kord.rest.service.GuildService(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.CategoryCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.rest.service/GuildService).dev.kord.rest.service/createForumChannel(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel/ForumChannelCreateBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/createForumChannel|createForumChannel@dev.kord.rest.service.GuildService(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.ForumChannelCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.rest.service/GuildService).dev.kord.rest.service/createMediaChannel(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel/MediaChannelCreateBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/createMediaChannel|createMediaChannel@dev.kord.rest.service.GuildService(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.MediaChannelCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.rest.service/GuildService).dev.kord.rest.service/createNewsChannel(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel/NewsChannelCreateBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/createNewsChannel|createNewsChannel@dev.kord.rest.service.GuildService(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.NewsChannelCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.rest.service/GuildService).dev.kord.rest.service/createScheduledEvent(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/GuildScheduledEventPrivacyLevel, kotlinx.datetime/Instant, dev.kord.common.entity/ScheduledEntityType, kotlin/Function1<dev.kord.rest.builder.guild/ScheduledEventCreateBuilder, kotlin/Unit> = ...): dev.kord.common.entity/DiscordGuildScheduledEvent // dev.kord.rest.service/createScheduledEvent|createScheduledEvent@dev.kord.rest.service.GuildService(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.GuildScheduledEventPrivacyLevel;kotlinx.datetime.Instant;dev.kord.common.entity.ScheduledEntityType;kotlin.Function1<dev.kord.rest.builder.guild.ScheduledEventCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.rest.service/GuildService).dev.kord.rest.service/createStageChannel(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel/StageChannelCreateBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/createStageChannel|createStageChannel@dev.kord.rest.service.GuildService(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.StageChannelCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.rest.service/GuildService).dev.kord.rest.service/createTextChannel(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel/TextChannelCreateBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/createTextChannel|createTextChannel@dev.kord.rest.service.GuildService(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.TextChannelCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.rest.service/GuildService).dev.kord.rest.service/createVoiceChannel(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel/VoiceChannelCreateBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordChannel // dev.kord.rest.service/createVoiceChannel|createVoiceChannel@dev.kord.rest.service.GuildService(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.VoiceChannelCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.rest.service/GuildService).dev.kord.rest.service/modifyCurrentVoiceState(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.guild/CurrentVoiceStateModifyBuilder, kotlin/Unit>) // dev.kord.rest.service/modifyCurrentVoiceState|modifyCurrentVoiceState@dev.kord.rest.service.GuildService(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.guild.CurrentVoiceStateModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.rest.service/GuildService).dev.kord.rest.service/modifyGuildWelcomeScreen(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.guild/WelcomeScreenModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordWelcomeScreen // dev.kord.rest.service/modifyGuildWelcomeScreen|modifyGuildWelcomeScreen@dev.kord.rest.service.GuildService(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.guild.WelcomeScreenModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.rest.service/GuildService).dev.kord.rest.service/modifyScheduledEvent(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder, kotlin/Unit>): dev.kord.common.entity/DiscordGuildScheduledEvent // dev.kord.rest.service/modifyScheduledEvent|modifyScheduledEvent@dev.kord.rest.service.GuildService(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.scheduled_events.ScheduledEventModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.rest.service/GuildService).dev.kord.rest.service/modifyVoiceState(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.guild/VoiceStateModifyBuilder, kotlin/Unit>) // dev.kord.rest.service/modifyVoiceState|modifyVoiceState@dev.kord.rest.service.GuildService(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.guild.VoiceStateModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun <#A: kotlin/Any?> (dev.kord.rest.ratelimit/RequestRateLimiter).dev.kord.rest.ratelimit/consume(dev.kord.rest.request/Request<*, *>, kotlin/Function1<dev.kord.rest.ratelimit/RequestToken, #A>): #A // dev.kord.rest.ratelimit/consume|consume@dev.kord.rest.ratelimit.RequestRateLimiter(dev.kord.rest.request.Request<*,*>;kotlin.Function1<dev.kord.rest.ratelimit.RequestToken,0:0>){0§<kotlin.Any?>}[0]
