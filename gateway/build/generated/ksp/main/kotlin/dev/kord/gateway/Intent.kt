// THIS FILE IS AUTO-GENERATED BY KordEnumProcessor, DO NOT EDIT!
@file:Suppress(names = arrayOf("RedundantVisibilityModifier", "IncorrectFormatting",
                "ReplaceArrayOfWithLiteral", "SpellCheckingInspection", "GrazieInspection"))

package dev.kord.gateway

import dev.kord.common.DiscordBitSet
import dev.kord.common.EmptyBitSet
import dev.kord.common.`annotation`.KordUnsafe
import dev.kord.common.entity.DiscordMessage
import dev.kord.common.entity.flags.BitFlags
import dev.kord.common.entity.flags.DiscordBitSetFlag
import dev.kord.common.entity.flags.DiscordBitSetFlags
import kotlin.LazyThreadSafetyMode.PUBLICATION
import kotlinx.serialization.Serializable
import kotlinx.serialization.descriptors.PrimitiveKind

/**
 * Convenience container of multiple [Intents][Intent] which can be combined into one.
 *
 * ## Creating a collection of message flags
 * You can create an [Intents] object using the following methods
 * ```kotlin
 * // From flags
 * val flags1 = Intents(Intent.Guilds, Intent.GuildMembers)
 * // From an iterable
 * val flags2 = Intents(listOf(Intent.Guilds, Intent.GuildMembers))
 * // Using a builder
 * val flags3 = Intents {
 *  +Intent.Guilds
 *  -Intent.GuildMembers
 * }
 * ```
 *
 * ## Modifying existing intents
 * You can crate a modified copy of a [Intents] instance using the
 * [dev.kord.common.entity.flags.copy] method
 *
 * ```kotlin
 * flags.copy {
 *  +Intent.Guilds
 * }
 * ```
 *
 * ## Mathematical operators
 * All [Intents] objects can use +/- operators
 *
 * ```kotlin
 * val flags = Intents(Intent.Guilds)
 * val flags2 = flags + Intent.GuildMembers
 * val otherFlags = flags - Intent.GuildMembers
 * val flags3 = flags + otherFlags
 * ```
 *
 * ## Checking for an intent
 * You can use the [contains] operator to check whether a collection contains a specific flag
 * ```kotlin
 * val hasFlag = Intent.Guilds in gateway.intents
 * val hasFlags = Intent(Intent.GuildMembers, Intent.GuildMembers) in gateway.intents
 * ```
 *
 * ## Unknown intent
 *
 * Whenever a newly added flag has not been added to Kord yet it will get deserialized as
 * [Intent.Unknown].
 * You can also use that to check for an yet unsupported flag
 * ```kotlin
 * val hasFlags = Intent.Unknown(1 shl 69) in gateway.intents
 * ```
 * @see Intent
 * @see Intents.Builder
 * @property code numeric value of all [Intents]s
 */
@Serializable(with = Intents.Serializer::class)
public class Intents(
    code: DiscordBitSet = EmptyBitSet(),
) : DiscordBitSetFlags<Intent, Intents, Intents.Builder>(Intent.entries, code) {
    protected override val name: String = "Intents"

    public override fun equals(other: Any?): Boolean = this === other ||
            (other is Intents && this.code == other.code)

    public override fun hashCode(): Int = code.hashCode()

    public override fun buildUpon(): Builder = Builder(code)

    protected override fun Implementation(flags: DiscordBitSet): Intents = Intents(flags)

    public class Builder(
        code: DiscordBitSet = EmptyBitSet(),
    ) : DiscordBitSetFlags.Builder<Intent, Intents>(code) {
        public override fun flags(): Intents = Intents(code)
    }

    public class Serializer :
            BitFlags.Serializer<DiscordBitSet, Intent, Intents>(PrimitiveKind.STRING, "code",
            DiscordBitSet.serializer()) {
        public override fun Implementation(code: DiscordBitSet): Intents = Intents(code)
    }

    public companion object : DiscordBitSetFlags.Companion<Intent, Intents, Builder>() {
        public override fun Builder(): Builder = Intents.Builder()

        protected override fun Implementation(flags: DiscordBitSet): Intents = Intents(flags)
    }
}

/**
 * Values that enable a group of events as [defined by
 * Discord](https://discord.com/developers/docs/topics/gateway#gateway-intents).
 */
public sealed class Intent(
    /**
     * The raw code used by Discord.
     */
    public override val code: DiscordBitSet,
) : DiscordBitSetFlag {
    protected constructor(vararg values: Long) : this(DiscordBitSet(values))

    public final override fun equals(other: Any?): Boolean = this === other ||
            (other is Intent && this.code == other.code)

    public final override fun hashCode(): Int = code.hashCode()

    public final override fun toString(): String = "Intent.${this::class.simpleName}(code=$code)"

    /**
     * An unknown [Intent].
     *
     * This is used as a fallback for [Intent]s that haven't been added to Kord yet.
     */
    public class Unknown @KordUnsafe constructor(
        code: DiscordBitSet,
    ) : Intent(code) {
        @KordUnsafe
        public constructor(vararg code: Long) : this(DiscordBitSet(code))
    }

    /**
     * Enables the following events:
     * - [GuildCreate]
     * - [GuildUpdate]
     * - [GuildDelete]
     * - [GuildRoleCreate]
     * - [GuildRoleUpdate]
     * - [GuildRoleDelete]
     * - [ChannelCreate]
     * - [ChannelUpdate]
     * - [ChannelDelete]
     * - [ChannelPinsUpdate]
     * - [ThreadCreate]
     * - [ThreadUpdate]
     * - [ThreadDelete]
     * - [ThreadListSync]
     * - [ThreadMemberUpdate]
     * - [ThreadMembersUpdate] (contains different data depending on which intents are used, see
     * [here](https://discord.com/developers/docs/topics/gateway#thread-members-update))
     */
    public object Guilds : Intent(1L)

    /**
     * Enables the following events:
     * - [GuildMemberAdd]
     * - [GuildMemberUpdate]
     * - [GuildMemberRemove]
     * - [ThreadMembersUpdate] (contains different data depending on which intents are used, see
     * [here](https://discord.com/developers/docs/topics/gateway#thread-members-update))
     */
    @PrivilegedIntent
    public object GuildMembers : Intent(2L)

    /**
     * Enables the following events:
     * - [GuildBanAdd]
     * - [GuildBanRemove]
     * - [GuildAuditLogEntryCreate]
     */
    public object GuildBans : Intent(4L)

    /**
     * Enables the following events:
     * - [GuildEmojisUpdate]
     */
    public object GuildEmojis : Intent(8L)

    /**
     * Enables the following events:
     * - [GuildIntegrationsUpdate]
     */
    public object GuildIntegrations : Intent(16L)

    /**
     * Enables the following events:
     * - [WebhooksUpdate]
     */
    public object GuildWebhooks : Intent(32L)

    /**
     * Enables the following events:
     * - [InviteCreate]
     * - [InviteDelete]
     */
    public object GuildInvites : Intent(64L)

    /**
     * Enables the following events:
     * - [VoiceStateUpdate]
     */
    public object GuildVoiceStates : Intent(128L)

    /**
     * Enables the following events:
     * - [PresenceUpdate]
     */
    @PrivilegedIntent
    public object GuildPresences : Intent(256L)

    /**
     * Enables the following events:
     * - [MessageCreate]
     * - [MessageUpdate]
     * - [MessageDelete]
     * - [MessageDeleteBulk]
     */
    public object GuildMessages : Intent(512L)

    /**
     * Enables the following events:
     * - [MessageReactionAdd]
     * - [MessageReactionRemove]
     * - [MessageReactionRemoveAll]
     * - [MessageReactionRemoveEmoji]
     */
    public object GuildMessageReactions : Intent(1024L)

    /**
     * Enables the following events:
     * - [TypingStart]
     */
    public object GuildMessageTyping : Intent(2048L)

    /**
     * Enables the following events:
     * - [MessageCreate]
     * - [MessageUpdate]
     * - [MessageDelete]
     * - [ChannelPinsUpdate]
     */
    public object DirectMessages : Intent(4096L)

    /**
     * Enables the following events:
     * - [MessageReactionAdd]
     * - [MessageReactionRemove]
     * - [MessageReactionRemoveAll]
     * - [MessageReactionRemoveEmoji]
     */
    public object DirectMessagesReactions : Intent(8192L)

    /**
     * Enables the following events:
     * - [TypingStart]
     */
    public object DirectMessageTyping : Intent(16384L)

    /**
     * [MessageContent] is a unique [privileged intent][PrivilegedIntent] that isn't directly
     * associated with any
     * Gateway [event][Event]s. Instead, access to [MessageContent] permits your app to receive
     * message content data
     * across the APIs.
     *
     * For example, the [content][DiscordMessage.content], [embeds][DiscordMessage.embeds],
     * [attachments][DiscordMessage.attachments], and [components][DiscordMessage.components] fields
     * in
     * [message objects][DiscordMessage] all contain message content and therefore require this
     * intent.
     *
     * Apps **without** this intent will receive empty values in fields that contain user-inputted
     * content with a few
     * exceptions:
     * - content in messages that an app sends
     * - content in DMs with the app
     * - content in which the app is mentioned
     */
    @PrivilegedIntent
    public object MessageContent : Intent(32768L)

    /**
     * Enables the following events:
     * - [GuildScheduledEventCreate]
     * - [GuildScheduledEventUpdate]
     * - [GuildScheduledEventDelete]
     * - [GuildScheduledEventUserAdd]
     * - [GuildScheduledEventUserRemove]
     */
    public object GuildScheduledEvents : Intent(65536L)

    /**
     * Enables the following events:
     * - [AutoModerationRuleCreate]
     * - [AutoModerationRuleUpdate]
     * - [AutoModerationRuleDelete]
     */
    public object AutoModerationConfiguration : Intent(1048576L)

    /**
     * Enables the following events:
     * - [AutoModerationActionExecution]
     */
    public object AutoModerationExecution : Intent(2097152L)

    public companion object {
        /**
         * A [List] of all known [Intent]s.
         */
        @OptIn(PrivilegedIntent::class)
        public val entries: List<Intent> by lazy(mode = PUBLICATION) {
            listOf(
                Guilds,
                GuildMembers,
                GuildBans,
                GuildEmojis,
                GuildIntegrations,
                GuildWebhooks,
                GuildInvites,
                GuildVoiceStates,
                GuildPresences,
                GuildMessages,
                GuildMessageReactions,
                GuildMessageTyping,
                DirectMessages,
                DirectMessagesReactions,
                DirectMessageTyping,
                MessageContent,
                GuildScheduledEvents,
                AutoModerationConfiguration,
                AutoModerationExecution,
            )
        }

    }
}
