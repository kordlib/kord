// Klib ABI Dump
// Targets: [js]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <kord:gateway>
open annotation class dev.kord.gateway/PrivilegedIntent : kotlin/Annotation { // dev.kord.gateway/PrivilegedIntent|null[0]
    constructor <init>() // dev.kord.gateway/PrivilegedIntent.<init>|<init>(){}[0]
}

final enum class dev.kord.gateway/GatewayCloseCode : kotlin/Enum<dev.kord.gateway/GatewayCloseCode> { // dev.kord.gateway/GatewayCloseCode|null[0]
    enum entry AlreadyAuthenticated // dev.kord.gateway/GatewayCloseCode.AlreadyAuthenticated|null[0]
    enum entry AuthenticationFailed // dev.kord.gateway/GatewayCloseCode.AuthenticationFailed|null[0]
    enum entry DecodeError // dev.kord.gateway/GatewayCloseCode.DecodeError|null[0]
    enum entry DisallowedIntents // dev.kord.gateway/GatewayCloseCode.DisallowedIntents|null[0]
    enum entry InvalidApiVersion // dev.kord.gateway/GatewayCloseCode.InvalidApiVersion|null[0]
    enum entry InvalidIntents // dev.kord.gateway/GatewayCloseCode.InvalidIntents|null[0]
    enum entry InvalidSeq // dev.kord.gateway/GatewayCloseCode.InvalidSeq|null[0]
    enum entry InvalidShard // dev.kord.gateway/GatewayCloseCode.InvalidShard|null[0]
    enum entry NotAuthenticated // dev.kord.gateway/GatewayCloseCode.NotAuthenticated|null[0]
    enum entry RateLimited // dev.kord.gateway/GatewayCloseCode.RateLimited|null[0]
    enum entry SessionTimeout // dev.kord.gateway/GatewayCloseCode.SessionTimeout|null[0]
    enum entry ShardingRequired // dev.kord.gateway/GatewayCloseCode.ShardingRequired|null[0]
    enum entry Unknown // dev.kord.gateway/GatewayCloseCode.Unknown|null[0]
    enum entry UnknownOpCode // dev.kord.gateway/GatewayCloseCode.UnknownOpCode|null[0]

    final val code // dev.kord.gateway/GatewayCloseCode.code|{}code[0]
        final fun <get-code>(): kotlin/Int // dev.kord.gateway/GatewayCloseCode.code.<get-code>|<get-code>(){}[0]
    final val entries // dev.kord.gateway/GatewayCloseCode.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<dev.kord.gateway/GatewayCloseCode> // dev.kord.gateway/GatewayCloseCode.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): dev.kord.gateway/GatewayCloseCode // dev.kord.gateway/GatewayCloseCode.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<dev.kord.gateway/GatewayCloseCode> // dev.kord.gateway/GatewayCloseCode.values|values#static(){}[0]
}

final enum class dev.kord.gateway/OpCode : kotlin/Enum<dev.kord.gateway/OpCode> { // dev.kord.gateway/OpCode|null[0]
    enum entry Dispatch // dev.kord.gateway/OpCode.Dispatch|null[0]
    enum entry Heartbeat // dev.kord.gateway/OpCode.Heartbeat|null[0]
    enum entry HeartbeatACK // dev.kord.gateway/OpCode.HeartbeatACK|null[0]
    enum entry Hello // dev.kord.gateway/OpCode.Hello|null[0]
    enum entry Identify // dev.kord.gateway/OpCode.Identify|null[0]
    enum entry InvalidSession // dev.kord.gateway/OpCode.InvalidSession|null[0]
    enum entry Reconnect // dev.kord.gateway/OpCode.Reconnect|null[0]
    enum entry RequestGuildMembers // dev.kord.gateway/OpCode.RequestGuildMembers|null[0]
    enum entry Resume // dev.kord.gateway/OpCode.Resume|null[0]
    enum entry StatusUpdate // dev.kord.gateway/OpCode.StatusUpdate|null[0]
    enum entry Unknown // dev.kord.gateway/OpCode.Unknown|null[0]
    enum entry VoiceStateUpdate // dev.kord.gateway/OpCode.VoiceStateUpdate|null[0]

    final val code // dev.kord.gateway/OpCode.code|{}code[0]
        final fun <get-code>(): kotlin/Int // dev.kord.gateway/OpCode.code.<get-code>|<get-code>(){}[0]
    final val entries // dev.kord.gateway/OpCode.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<dev.kord.gateway/OpCode> // dev.kord.gateway/OpCode.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): dev.kord.gateway/OpCode // dev.kord.gateway/OpCode.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<dev.kord.gateway/OpCode> // dev.kord.gateway/OpCode.values|values#static(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // dev.kord.gateway/OpCode.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.gateway/OpCode> // dev.kord.gateway/OpCode.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // dev.kord.gateway/OpCode.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

abstract interface dev.kord.gateway.ratelimit/IdentifyRateLimiter { // dev.kord.gateway.ratelimit/IdentifyRateLimiter|null[0]
    abstract val maxConcurrency // dev.kord.gateway.ratelimit/IdentifyRateLimiter.maxConcurrency|{}maxConcurrency[0]
        abstract fun <get-maxConcurrency>(): kotlin/Int // dev.kord.gateway.ratelimit/IdentifyRateLimiter.maxConcurrency.<get-maxConcurrency>|<get-maxConcurrency>(){}[0]

    abstract suspend fun consume(kotlin/Int, kotlinx.coroutines.flow/SharedFlow<dev.kord.gateway/Event>) // dev.kord.gateway.ratelimit/IdentifyRateLimiter.consume|consume(kotlin.Int;kotlinx.coroutines.flow.SharedFlow<dev.kord.gateway.Event>){}[0]
}

abstract interface dev.kord.gateway.retry/Retry { // dev.kord.gateway.retry/Retry|null[0]
    abstract val hasNext // dev.kord.gateway.retry/Retry.hasNext|{}hasNext[0]
        abstract fun <get-hasNext>(): kotlin/Boolean // dev.kord.gateway.retry/Retry.hasNext.<get-hasNext>|<get-hasNext>(){}[0]

    abstract fun reset() // dev.kord.gateway.retry/Retry.reset|reset(){}[0]
    abstract suspend fun retry() // dev.kord.gateway.retry/Retry.retry|retry(){}[0]
}

abstract interface dev.kord.gateway/Gateway : kotlinx.coroutines/CoroutineScope { // dev.kord.gateway/Gateway|null[0]
    abstract val events // dev.kord.gateway/Gateway.events|{}events[0]
        abstract fun <get-events>(): kotlinx.coroutines.flow/SharedFlow<dev.kord.gateway/Event> // dev.kord.gateway/Gateway.events.<get-events>|<get-events>(){}[0]
    abstract val ping // dev.kord.gateway/Gateway.ping|{}ping[0]
        abstract fun <get-ping>(): kotlinx.coroutines.flow/StateFlow<kotlin.time/Duration?> // dev.kord.gateway/Gateway.ping.<get-ping>|<get-ping>(){}[0]

    abstract suspend fun detach() // dev.kord.gateway/Gateway.detach|detach(){}[0]
    abstract suspend fun send(dev.kord.gateway/Command) // dev.kord.gateway/Gateway.send|send(dev.kord.gateway.Command){}[0]
    abstract suspend fun start(dev.kord.gateway/GatewayConfiguration) // dev.kord.gateway/Gateway.start|start(dev.kord.gateway.GatewayConfiguration){}[0]
    abstract suspend fun stop() // dev.kord.gateway/Gateway.stop|stop(){}[0]

    final object Companion { // dev.kord.gateway/Gateway.Companion|null[0]
        final fun none(): dev.kord.gateway/Gateway // dev.kord.gateway/Gateway.Companion.none|none(){}[0]
    }
}

final class dev.kord.gateway.builder/LoginBuilder { // dev.kord.gateway.builder/LoginBuilder|null[0]
    constructor <init>() // dev.kord.gateway.builder/LoginBuilder.<init>|<init>(){}[0]

    final var intents // dev.kord.gateway.builder/LoginBuilder.intents|{}intents[0]
        final fun <get-intents>(): dev.kord.gateway/Intents // dev.kord.gateway.builder/LoginBuilder.intents.<get-intents>|<get-intents>(){}[0]
        final fun <set-intents>(dev.kord.gateway/Intents) // dev.kord.gateway.builder/LoginBuilder.intents.<set-intents>|<set-intents>(dev.kord.gateway.Intents){}[0]
    final var name // dev.kord.gateway.builder/LoginBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.gateway.builder/LoginBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // dev.kord.gateway.builder/LoginBuilder.name.<set-name>|<set-name>(kotlin.String){}[0]
    final var presence // dev.kord.gateway.builder/LoginBuilder.presence|{}presence[0]
        final fun <get-presence>(): dev.kord.gateway/DiscordPresence // dev.kord.gateway.builder/LoginBuilder.presence.<get-presence>|<get-presence>(){}[0]
        final fun <set-presence>(dev.kord.gateway/DiscordPresence) // dev.kord.gateway.builder/LoginBuilder.presence.<set-presence>|<set-presence>(dev.kord.gateway.DiscordPresence){}[0]

    final inline fun intents(kotlin/Function1<dev.kord.gateway/Intents.Builder, kotlin/Unit>) // dev.kord.gateway.builder/LoginBuilder.intents|intents(kotlin.Function1<dev.kord.gateway.Intents.Builder,kotlin.Unit>){}[0]
    final inline fun intents0(kotlin/Function1<dev.kord.gateway/Intents.Builder, kotlin/Unit>) // dev.kord.gateway.builder/LoginBuilder.intents0|intents0(kotlin.Function1<dev.kord.gateway.Intents.Builder,kotlin.Unit>){}[0]
    final inline fun presence(kotlin/Function1<dev.kord.gateway.builder/PresenceBuilder, kotlin/Unit>) // dev.kord.gateway.builder/LoginBuilder.presence|presence(kotlin.Function1<dev.kord.gateway.builder.PresenceBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.gateway.builder/PresenceBuilder { // dev.kord.gateway.builder/PresenceBuilder|null[0]
    constructor <init>() // dev.kord.gateway.builder/PresenceBuilder.<init>|<init>(){}[0]

    final var afk // dev.kord.gateway.builder/PresenceBuilder.afk|{}afk[0]
        final fun <get-afk>(): kotlin/Boolean // dev.kord.gateway.builder/PresenceBuilder.afk.<get-afk>|<get-afk>(){}[0]
        final fun <set-afk>(kotlin/Boolean) // dev.kord.gateway.builder/PresenceBuilder.afk.<set-afk>|<set-afk>(kotlin.Boolean){}[0]
    final var since // dev.kord.gateway.builder/PresenceBuilder.since|{}since[0]
        final fun <get-since>(): kotlinx.datetime/Instant? // dev.kord.gateway.builder/PresenceBuilder.since.<get-since>|<get-since>(){}[0]
        final fun <set-since>(kotlinx.datetime/Instant?) // dev.kord.gateway.builder/PresenceBuilder.since.<set-since>|<set-since>(kotlinx.datetime.Instant?){}[0]
    final var state // dev.kord.gateway.builder/PresenceBuilder.state|{}state[0]
        final fun <get-state>(): kotlin/String? // dev.kord.gateway.builder/PresenceBuilder.state.<get-state>|<get-state>(){}[0]
        final fun <set-state>(kotlin/String?) // dev.kord.gateway.builder/PresenceBuilder.state.<set-state>|<set-state>(kotlin.String?){}[0]
    final var status // dev.kord.gateway.builder/PresenceBuilder.status|{}status[0]
        final fun <get-status>(): dev.kord.common.entity/PresenceStatus // dev.kord.gateway.builder/PresenceBuilder.status.<get-status>|<get-status>(){}[0]
        final fun <set-status>(dev.kord.common.entity/PresenceStatus) // dev.kord.gateway.builder/PresenceBuilder.status.<set-status>|<set-status>(dev.kord.common.entity.PresenceStatus){}[0]

    final fun competing(kotlin/String) // dev.kord.gateway.builder/PresenceBuilder.competing|competing(kotlin.String){}[0]
    final fun listening(kotlin/String) // dev.kord.gateway.builder/PresenceBuilder.listening|listening(kotlin.String){}[0]
    final fun playing(kotlin/String) // dev.kord.gateway.builder/PresenceBuilder.playing|playing(kotlin.String){}[0]
    final fun streaming(kotlin/String, kotlin/String) // dev.kord.gateway.builder/PresenceBuilder.streaming|streaming(kotlin.String;kotlin.String){}[0]
    final fun toPresence(): dev.kord.gateway/DiscordPresence // dev.kord.gateway.builder/PresenceBuilder.toPresence|toPresence(){}[0]
    final fun toUpdateStatus(): dev.kord.gateway/UpdateStatus // dev.kord.gateway.builder/PresenceBuilder.toUpdateStatus|toUpdateStatus(){}[0]
    final fun watching(kotlin/String) // dev.kord.gateway.builder/PresenceBuilder.watching|watching(kotlin.String){}[0]
}

final class dev.kord.gateway.builder/RequestGuildMembersBuilder { // dev.kord.gateway.builder/RequestGuildMembersBuilder|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake) // dev.kord.gateway.builder/RequestGuildMembersBuilder.<init>|<init>(dev.kord.common.entity.Snowflake){}[0]

    final var guildId // dev.kord.gateway.builder/RequestGuildMembersBuilder.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.gateway.builder/RequestGuildMembersBuilder.guildId.<get-guildId>|<get-guildId>(){}[0]
        final fun <set-guildId>(dev.kord.common.entity/Snowflake) // dev.kord.gateway.builder/RequestGuildMembersBuilder.guildId.<set-guildId>|<set-guildId>(dev.kord.common.entity.Snowflake){}[0]
    final var limit // dev.kord.gateway.builder/RequestGuildMembersBuilder.limit|{}limit[0]
        final fun <get-limit>(): kotlin/Int? // dev.kord.gateway.builder/RequestGuildMembersBuilder.limit.<get-limit>|<get-limit>(){}[0]
        final fun <set-limit>(kotlin/Int?) // dev.kord.gateway.builder/RequestGuildMembersBuilder.limit.<set-limit>|<set-limit>(kotlin.Int?){}[0]
    final var nonce // dev.kord.gateway.builder/RequestGuildMembersBuilder.nonce|{}nonce[0]
        final fun <get-nonce>(): kotlin/String? // dev.kord.gateway.builder/RequestGuildMembersBuilder.nonce.<get-nonce>|<get-nonce>(){}[0]
        final fun <set-nonce>(kotlin/String?) // dev.kord.gateway.builder/RequestGuildMembersBuilder.nonce.<set-nonce>|<set-nonce>(kotlin.String?){}[0]
    final var presences // dev.kord.gateway.builder/RequestGuildMembersBuilder.presences|{}presences[0]
        final fun <get-presences>(): kotlin/Boolean? // dev.kord.gateway.builder/RequestGuildMembersBuilder.presences.<get-presences>|<get-presences>(){}[0]
        final fun <set-presences>(kotlin/Boolean?) // dev.kord.gateway.builder/RequestGuildMembersBuilder.presences.<set-presences>|<set-presences>(kotlin.Boolean?){}[0]
    final var query // dev.kord.gateway.builder/RequestGuildMembersBuilder.query|{}query[0]
        final fun <get-query>(): kotlin/String? // dev.kord.gateway.builder/RequestGuildMembersBuilder.query.<get-query>|<get-query>(){}[0]
        final fun <set-query>(kotlin/String?) // dev.kord.gateway.builder/RequestGuildMembersBuilder.query.<set-query>|<set-query>(kotlin.String?){}[0]
    final var userIds // dev.kord.gateway.builder/RequestGuildMembersBuilder.userIds|{}userIds[0]
        final fun <get-userIds>(): kotlin.collections/MutableSet<dev.kord.common.entity/Snowflake> // dev.kord.gateway.builder/RequestGuildMembersBuilder.userIds.<get-userIds>|<get-userIds>(){}[0]
        final fun <set-userIds>(kotlin.collections/MutableSet<dev.kord.common.entity/Snowflake>) // dev.kord.gateway.builder/RequestGuildMembersBuilder.userIds.<set-userIds>|<set-userIds>(kotlin.collections.MutableSet<dev.kord.common.entity.Snowflake>){}[0]

    final fun requestAllMembers() // dev.kord.gateway.builder/RequestGuildMembersBuilder.requestAllMembers|requestAllMembers(){}[0]
    final fun toRequest(): dev.kord.gateway/RequestGuildMembers // dev.kord.gateway.builder/RequestGuildMembersBuilder.toRequest|toRequest(){}[0]
}

final class dev.kord.gateway.builder/Shards { // dev.kord.gateway.builder/Shards|null[0]
    constructor <init>(kotlin/Int, kotlin.collections/Iterable<kotlin/Int> = ...) // dev.kord.gateway.builder/Shards.<init>|<init>(kotlin.Int;kotlin.collections.Iterable<kotlin.Int>){}[0]

    final val indices // dev.kord.gateway.builder/Shards.indices|{}indices[0]
        final fun <get-indices>(): kotlin.collections/Iterable<kotlin/Int> // dev.kord.gateway.builder/Shards.indices.<get-indices>|<get-indices>(){}[0]
    final val totalShards // dev.kord.gateway.builder/Shards.totalShards|{}totalShards[0]
        final fun <get-totalShards>(): kotlin/Int // dev.kord.gateway.builder/Shards.totalShards.<get-totalShards>|<get-totalShards>(){}[0]

    final fun component1(): kotlin/Int // dev.kord.gateway.builder/Shards.component1|component1(){}[0]
    final fun component2(): kotlin.collections/Iterable<kotlin/Int> // dev.kord.gateway.builder/Shards.component2|component2(){}[0]
    final fun copy(kotlin/Int = ..., kotlin.collections/Iterable<kotlin/Int> = ...): dev.kord.gateway.builder/Shards // dev.kord.gateway.builder/Shards.copy|copy(kotlin.Int;kotlin.collections.Iterable<kotlin.Int>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway.builder/Shards.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway.builder/Shards.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway.builder/Shards.toString|toString(){}[0]
}

final class dev.kord.gateway.retry/LinearRetry : dev.kord.gateway.retry/Retry { // dev.kord.gateway.retry/LinearRetry|null[0]
    constructor <init>(kotlin.time/Duration, kotlin.time/Duration, kotlin/Int) // dev.kord.gateway.retry/LinearRetry.<init>|<init>(kotlin.time.Duration;kotlin.time.Duration;kotlin.Int){}[0]

    final val hasNext // dev.kord.gateway.retry/LinearRetry.hasNext|{}hasNext[0]
        final fun <get-hasNext>(): kotlin/Boolean // dev.kord.gateway.retry/LinearRetry.hasNext.<get-hasNext>|<get-hasNext>(){}[0]

    final fun reset() // dev.kord.gateway.retry/LinearRetry.reset|reset(){}[0]
    final suspend fun retry() // dev.kord.gateway.retry/LinearRetry.retry|retry(){}[0]
}

final class dev.kord.gateway/ApplicationCommandCreate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/ApplicationCommandCreate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordApplicationCommand, kotlin/Int?) // dev.kord.gateway/ApplicationCommandCreate.<init>|<init>(dev.kord.common.entity.DiscordApplicationCommand;kotlin.Int?){}[0]

    final val application // dev.kord.gateway/ApplicationCommandCreate.application|{}application[0]
        final fun <get-application>(): dev.kord.common.entity/DiscordApplicationCommand // dev.kord.gateway/ApplicationCommandCreate.application.<get-application>|<get-application>(){}[0]
    final val sequence // dev.kord.gateway/ApplicationCommandCreate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/ApplicationCommandCreate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordApplicationCommand // dev.kord.gateway/ApplicationCommandCreate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/ApplicationCommandCreate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordApplicationCommand = ..., kotlin/Int? = ...): dev.kord.gateway/ApplicationCommandCreate // dev.kord.gateway/ApplicationCommandCreate.copy|copy(dev.kord.common.entity.DiscordApplicationCommand;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/ApplicationCommandCreate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/ApplicationCommandCreate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/ApplicationCommandCreate.toString|toString(){}[0]
}

final class dev.kord.gateway/ApplicationCommandDelete : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/ApplicationCommandDelete|null[0]
    constructor <init>(dev.kord.common.entity/DiscordApplicationCommand, kotlin/Int?) // dev.kord.gateway/ApplicationCommandDelete.<init>|<init>(dev.kord.common.entity.DiscordApplicationCommand;kotlin.Int?){}[0]

    final val application // dev.kord.gateway/ApplicationCommandDelete.application|{}application[0]
        final fun <get-application>(): dev.kord.common.entity/DiscordApplicationCommand // dev.kord.gateway/ApplicationCommandDelete.application.<get-application>|<get-application>(){}[0]
    final val sequence // dev.kord.gateway/ApplicationCommandDelete.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/ApplicationCommandDelete.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordApplicationCommand // dev.kord.gateway/ApplicationCommandDelete.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/ApplicationCommandDelete.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordApplicationCommand = ..., kotlin/Int? = ...): dev.kord.gateway/ApplicationCommandDelete // dev.kord.gateway/ApplicationCommandDelete.copy|copy(dev.kord.common.entity.DiscordApplicationCommand;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/ApplicationCommandDelete.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/ApplicationCommandDelete.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/ApplicationCommandDelete.toString|toString(){}[0]
}

final class dev.kord.gateway/ApplicationCommandPermissionsUpdate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/ApplicationCommandPermissionsUpdate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordGuildApplicationCommandPermissions, kotlin/Int?) // dev.kord.gateway/ApplicationCommandPermissionsUpdate.<init>|<init>(dev.kord.common.entity.DiscordGuildApplicationCommandPermissions;kotlin.Int?){}[0]

    final val permissions // dev.kord.gateway/ApplicationCommandPermissionsUpdate.permissions|{}permissions[0]
        final fun <get-permissions>(): dev.kord.common.entity/DiscordGuildApplicationCommandPermissions // dev.kord.gateway/ApplicationCommandPermissionsUpdate.permissions.<get-permissions>|<get-permissions>(){}[0]
    final val sequence // dev.kord.gateway/ApplicationCommandPermissionsUpdate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/ApplicationCommandPermissionsUpdate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordGuildApplicationCommandPermissions // dev.kord.gateway/ApplicationCommandPermissionsUpdate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/ApplicationCommandPermissionsUpdate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordGuildApplicationCommandPermissions = ..., kotlin/Int? = ...): dev.kord.gateway/ApplicationCommandPermissionsUpdate // dev.kord.gateway/ApplicationCommandPermissionsUpdate.copy|copy(dev.kord.common.entity.DiscordGuildApplicationCommandPermissions;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/ApplicationCommandPermissionsUpdate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/ApplicationCommandPermissionsUpdate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/ApplicationCommandPermissionsUpdate.toString|toString(){}[0]
}

final class dev.kord.gateway/ApplicationCommandUpdate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/ApplicationCommandUpdate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordApplicationCommand, kotlin/Int?) // dev.kord.gateway/ApplicationCommandUpdate.<init>|<init>(dev.kord.common.entity.DiscordApplicationCommand;kotlin.Int?){}[0]

    final val application // dev.kord.gateway/ApplicationCommandUpdate.application|{}application[0]
        final fun <get-application>(): dev.kord.common.entity/DiscordApplicationCommand // dev.kord.gateway/ApplicationCommandUpdate.application.<get-application>|<get-application>(){}[0]
    final val sequence // dev.kord.gateway/ApplicationCommandUpdate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/ApplicationCommandUpdate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordApplicationCommand // dev.kord.gateway/ApplicationCommandUpdate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/ApplicationCommandUpdate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordApplicationCommand = ..., kotlin/Int? = ...): dev.kord.gateway/ApplicationCommandUpdate // dev.kord.gateway/ApplicationCommandUpdate.copy|copy(dev.kord.common.entity.DiscordApplicationCommand;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/ApplicationCommandUpdate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/ApplicationCommandUpdate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/ApplicationCommandUpdate.toString|toString(){}[0]
}

final class dev.kord.gateway/AutoModerationActionExecution : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/AutoModerationActionExecution|null[0]
    constructor <init>(dev.kord.gateway/DiscordAutoModerationActionExecution, kotlin/Int?) // dev.kord.gateway/AutoModerationActionExecution.<init>|<init>(dev.kord.gateway.DiscordAutoModerationActionExecution;kotlin.Int?){}[0]

    final val actionExecution // dev.kord.gateway/AutoModerationActionExecution.actionExecution|{}actionExecution[0]
        final fun <get-actionExecution>(): dev.kord.gateway/DiscordAutoModerationActionExecution // dev.kord.gateway/AutoModerationActionExecution.actionExecution.<get-actionExecution>|<get-actionExecution>(){}[0]
    final val sequence // dev.kord.gateway/AutoModerationActionExecution.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/AutoModerationActionExecution.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.gateway/DiscordAutoModerationActionExecution // dev.kord.gateway/AutoModerationActionExecution.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/AutoModerationActionExecution.component2|component2(){}[0]
    final fun copy(dev.kord.gateway/DiscordAutoModerationActionExecution = ..., kotlin/Int? = ...): dev.kord.gateway/AutoModerationActionExecution // dev.kord.gateway/AutoModerationActionExecution.copy|copy(dev.kord.gateway.DiscordAutoModerationActionExecution;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/AutoModerationActionExecution.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/AutoModerationActionExecution.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/AutoModerationActionExecution.toString|toString(){}[0]
}

final class dev.kord.gateway/AutoModerationRuleCreate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/AutoModerationRuleCreate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordAutoModerationRule, kotlin/Int?) // dev.kord.gateway/AutoModerationRuleCreate.<init>|<init>(dev.kord.common.entity.DiscordAutoModerationRule;kotlin.Int?){}[0]

    final val rule // dev.kord.gateway/AutoModerationRuleCreate.rule|{}rule[0]
        final fun <get-rule>(): dev.kord.common.entity/DiscordAutoModerationRule // dev.kord.gateway/AutoModerationRuleCreate.rule.<get-rule>|<get-rule>(){}[0]
    final val sequence // dev.kord.gateway/AutoModerationRuleCreate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/AutoModerationRuleCreate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordAutoModerationRule // dev.kord.gateway/AutoModerationRuleCreate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/AutoModerationRuleCreate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordAutoModerationRule = ..., kotlin/Int? = ...): dev.kord.gateway/AutoModerationRuleCreate // dev.kord.gateway/AutoModerationRuleCreate.copy|copy(dev.kord.common.entity.DiscordAutoModerationRule;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/AutoModerationRuleCreate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/AutoModerationRuleCreate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/AutoModerationRuleCreate.toString|toString(){}[0]
}

final class dev.kord.gateway/AutoModerationRuleDelete : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/AutoModerationRuleDelete|null[0]
    constructor <init>(dev.kord.common.entity/DiscordAutoModerationRule, kotlin/Int?) // dev.kord.gateway/AutoModerationRuleDelete.<init>|<init>(dev.kord.common.entity.DiscordAutoModerationRule;kotlin.Int?){}[0]

    final val rule // dev.kord.gateway/AutoModerationRuleDelete.rule|{}rule[0]
        final fun <get-rule>(): dev.kord.common.entity/DiscordAutoModerationRule // dev.kord.gateway/AutoModerationRuleDelete.rule.<get-rule>|<get-rule>(){}[0]
    final val sequence // dev.kord.gateway/AutoModerationRuleDelete.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/AutoModerationRuleDelete.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordAutoModerationRule // dev.kord.gateway/AutoModerationRuleDelete.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/AutoModerationRuleDelete.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordAutoModerationRule = ..., kotlin/Int? = ...): dev.kord.gateway/AutoModerationRuleDelete // dev.kord.gateway/AutoModerationRuleDelete.copy|copy(dev.kord.common.entity.DiscordAutoModerationRule;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/AutoModerationRuleDelete.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/AutoModerationRuleDelete.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/AutoModerationRuleDelete.toString|toString(){}[0]
}

final class dev.kord.gateway/AutoModerationRuleUpdate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/AutoModerationRuleUpdate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordAutoModerationRule, kotlin/Int?) // dev.kord.gateway/AutoModerationRuleUpdate.<init>|<init>(dev.kord.common.entity.DiscordAutoModerationRule;kotlin.Int?){}[0]

    final val rule // dev.kord.gateway/AutoModerationRuleUpdate.rule|{}rule[0]
        final fun <get-rule>(): dev.kord.common.entity/DiscordAutoModerationRule // dev.kord.gateway/AutoModerationRuleUpdate.rule.<get-rule>|<get-rule>(){}[0]
    final val sequence // dev.kord.gateway/AutoModerationRuleUpdate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/AutoModerationRuleUpdate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordAutoModerationRule // dev.kord.gateway/AutoModerationRuleUpdate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/AutoModerationRuleUpdate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordAutoModerationRule = ..., kotlin/Int? = ...): dev.kord.gateway/AutoModerationRuleUpdate // dev.kord.gateway/AutoModerationRuleUpdate.copy|copy(dev.kord.common.entity.DiscordAutoModerationRule;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/AutoModerationRuleUpdate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/AutoModerationRuleUpdate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/AutoModerationRuleUpdate.toString|toString(){}[0]
}

final class dev.kord.gateway/ChannelCreate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/ChannelCreate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordChannel, kotlin/Int?) // dev.kord.gateway/ChannelCreate.<init>|<init>(dev.kord.common.entity.DiscordChannel;kotlin.Int?){}[0]

    final val channel // dev.kord.gateway/ChannelCreate.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.common.entity/DiscordChannel // dev.kord.gateway/ChannelCreate.channel.<get-channel>|<get-channel>(){}[0]
    final val sequence // dev.kord.gateway/ChannelCreate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/ChannelCreate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordChannel // dev.kord.gateway/ChannelCreate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/ChannelCreate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordChannel = ..., kotlin/Int? = ...): dev.kord.gateway/ChannelCreate // dev.kord.gateway/ChannelCreate.copy|copy(dev.kord.common.entity.DiscordChannel;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/ChannelCreate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/ChannelCreate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/ChannelCreate.toString|toString(){}[0]
}

final class dev.kord.gateway/ChannelDelete : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/ChannelDelete|null[0]
    constructor <init>(dev.kord.common.entity/DiscordChannel, kotlin/Int?) // dev.kord.gateway/ChannelDelete.<init>|<init>(dev.kord.common.entity.DiscordChannel;kotlin.Int?){}[0]

    final val channel // dev.kord.gateway/ChannelDelete.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.common.entity/DiscordChannel // dev.kord.gateway/ChannelDelete.channel.<get-channel>|<get-channel>(){}[0]
    final val sequence // dev.kord.gateway/ChannelDelete.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/ChannelDelete.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordChannel // dev.kord.gateway/ChannelDelete.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/ChannelDelete.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordChannel = ..., kotlin/Int? = ...): dev.kord.gateway/ChannelDelete // dev.kord.gateway/ChannelDelete.copy|copy(dev.kord.common.entity.DiscordChannel;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/ChannelDelete.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/ChannelDelete.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/ChannelDelete.toString|toString(){}[0]
}

final class dev.kord.gateway/ChannelPinsUpdate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/ChannelPinsUpdate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordPinsUpdateData, kotlin/Int?) // dev.kord.gateway/ChannelPinsUpdate.<init>|<init>(dev.kord.common.entity.DiscordPinsUpdateData;kotlin.Int?){}[0]

    final val pins // dev.kord.gateway/ChannelPinsUpdate.pins|{}pins[0]
        final fun <get-pins>(): dev.kord.common.entity/DiscordPinsUpdateData // dev.kord.gateway/ChannelPinsUpdate.pins.<get-pins>|<get-pins>(){}[0]
    final val sequence // dev.kord.gateway/ChannelPinsUpdate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/ChannelPinsUpdate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordPinsUpdateData // dev.kord.gateway/ChannelPinsUpdate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/ChannelPinsUpdate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordPinsUpdateData = ..., kotlin/Int? = ...): dev.kord.gateway/ChannelPinsUpdate // dev.kord.gateway/ChannelPinsUpdate.copy|copy(dev.kord.common.entity.DiscordPinsUpdateData;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/ChannelPinsUpdate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/ChannelPinsUpdate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/ChannelPinsUpdate.toString|toString(){}[0]
}

final class dev.kord.gateway/ChannelUpdate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/ChannelUpdate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordChannel, kotlin/Int?) // dev.kord.gateway/ChannelUpdate.<init>|<init>(dev.kord.common.entity.DiscordChannel;kotlin.Int?){}[0]

    final val channel // dev.kord.gateway/ChannelUpdate.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.common.entity/DiscordChannel // dev.kord.gateway/ChannelUpdate.channel.<get-channel>|<get-channel>(){}[0]
    final val sequence // dev.kord.gateway/ChannelUpdate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/ChannelUpdate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordChannel // dev.kord.gateway/ChannelUpdate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/ChannelUpdate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordChannel = ..., kotlin/Int? = ...): dev.kord.gateway/ChannelUpdate // dev.kord.gateway/ChannelUpdate.copy|copy(dev.kord.common.entity.DiscordChannel;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/ChannelUpdate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/ChannelUpdate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/ChannelUpdate.toString|toString(){}[0]
}

final class dev.kord.gateway/DefaultGateway : dev.kord.gateway/Gateway { // dev.kord.gateway/DefaultGateway|null[0]
    constructor <init>(dev.kord.gateway/DefaultGatewayData) // dev.kord.gateway/DefaultGateway.<init>|<init>(dev.kord.gateway.DefaultGatewayData){}[0]

    final val coroutineContext // dev.kord.gateway/DefaultGateway.coroutineContext|{}coroutineContext[0]
        final fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // dev.kord.gateway/DefaultGateway.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]
    final val events // dev.kord.gateway/DefaultGateway.events|{}events[0]
        final fun <get-events>(): kotlinx.coroutines.flow/SharedFlow<dev.kord.gateway/Event> // dev.kord.gateway/DefaultGateway.events.<get-events>|<get-events>(){}[0]
    final val ping // dev.kord.gateway/DefaultGateway.ping|{}ping[0]
        final fun <get-ping>(): kotlinx.coroutines.flow/StateFlow<kotlin.time/Duration?> // dev.kord.gateway/DefaultGateway.ping.<get-ping>|<get-ping>(){}[0]

    final suspend fun detach() // dev.kord.gateway/DefaultGateway.detach|detach(){}[0]
    final suspend fun send(dev.kord.gateway/Command) // dev.kord.gateway/DefaultGateway.send|send(dev.kord.gateway.Command){}[0]
    final suspend fun start(dev.kord.gateway/GatewayConfiguration) // dev.kord.gateway/DefaultGateway.start|start(dev.kord.gateway.GatewayConfiguration){}[0]
    final suspend fun stop() // dev.kord.gateway/DefaultGateway.stop|stop(){}[0]

    final object Companion // dev.kord.gateway/DefaultGateway.Companion|null[0]
}

final class dev.kord.gateway/DefaultGatewayBuilder { // dev.kord.gateway/DefaultGatewayBuilder|null[0]
    constructor <init>() // dev.kord.gateway/DefaultGatewayBuilder.<init>|<init>(){}[0]

    final var client // dev.kord.gateway/DefaultGatewayBuilder.client|{}client[0]
        final fun <get-client>(): io.ktor.client/HttpClient? // dev.kord.gateway/DefaultGatewayBuilder.client.<get-client>|<get-client>(){}[0]
        final fun <set-client>(io.ktor.client/HttpClient?) // dev.kord.gateway/DefaultGatewayBuilder.client.<set-client>|<set-client>(io.ktor.client.HttpClient?){}[0]
    final var dispatcher // dev.kord.gateway/DefaultGatewayBuilder.dispatcher|{}dispatcher[0]
        final fun <get-dispatcher>(): kotlinx.coroutines/CoroutineDispatcher // dev.kord.gateway/DefaultGatewayBuilder.dispatcher.<get-dispatcher>|<get-dispatcher>(){}[0]
        final fun <set-dispatcher>(kotlinx.coroutines/CoroutineDispatcher) // dev.kord.gateway/DefaultGatewayBuilder.dispatcher.<set-dispatcher>|<set-dispatcher>(kotlinx.coroutines.CoroutineDispatcher){}[0]
    final var eventFlow // dev.kord.gateway/DefaultGatewayBuilder.eventFlow|{}eventFlow[0]
        final fun <get-eventFlow>(): kotlinx.coroutines.flow/MutableSharedFlow<dev.kord.gateway/Event> // dev.kord.gateway/DefaultGatewayBuilder.eventFlow.<get-eventFlow>|<get-eventFlow>(){}[0]
        final fun <set-eventFlow>(kotlinx.coroutines.flow/MutableSharedFlow<dev.kord.gateway/Event>) // dev.kord.gateway/DefaultGatewayBuilder.eventFlow.<set-eventFlow>|<set-eventFlow>(kotlinx.coroutines.flow.MutableSharedFlow<dev.kord.gateway.Event>){}[0]
    final var identifyRateLimiter // dev.kord.gateway/DefaultGatewayBuilder.identifyRateLimiter|{}identifyRateLimiter[0]
        final fun <get-identifyRateLimiter>(): dev.kord.gateway.ratelimit/IdentifyRateLimiter? // dev.kord.gateway/DefaultGatewayBuilder.identifyRateLimiter.<get-identifyRateLimiter>|<get-identifyRateLimiter>(){}[0]
        final fun <set-identifyRateLimiter>(dev.kord.gateway.ratelimit/IdentifyRateLimiter?) // dev.kord.gateway/DefaultGatewayBuilder.identifyRateLimiter.<set-identifyRateLimiter>|<set-identifyRateLimiter>(dev.kord.gateway.ratelimit.IdentifyRateLimiter?){}[0]
    final var reconnectRetry // dev.kord.gateway/DefaultGatewayBuilder.reconnectRetry|{}reconnectRetry[0]
        final fun <get-reconnectRetry>(): dev.kord.gateway.retry/Retry? // dev.kord.gateway/DefaultGatewayBuilder.reconnectRetry.<get-reconnectRetry>|<get-reconnectRetry>(){}[0]
        final fun <set-reconnectRetry>(dev.kord.gateway.retry/Retry?) // dev.kord.gateway/DefaultGatewayBuilder.reconnectRetry.<set-reconnectRetry>|<set-reconnectRetry>(dev.kord.gateway.retry.Retry?){}[0]
    final var sendRateLimiter // dev.kord.gateway/DefaultGatewayBuilder.sendRateLimiter|{}sendRateLimiter[0]
        final fun <get-sendRateLimiter>(): dev.kord.common.ratelimit/RateLimiter? // dev.kord.gateway/DefaultGatewayBuilder.sendRateLimiter.<get-sendRateLimiter>|<get-sendRateLimiter>(){}[0]
        final fun <set-sendRateLimiter>(dev.kord.common.ratelimit/RateLimiter?) // dev.kord.gateway/DefaultGatewayBuilder.sendRateLimiter.<set-sendRateLimiter>|<set-sendRateLimiter>(dev.kord.common.ratelimit.RateLimiter?){}[0]
    final var url // dev.kord.gateway/DefaultGatewayBuilder.url|{}url[0]
        final fun <get-url>(): kotlin/String // dev.kord.gateway/DefaultGatewayBuilder.url.<get-url>|<get-url>(){}[0]
        final fun <set-url>(kotlin/String) // dev.kord.gateway/DefaultGatewayBuilder.url.<set-url>|<set-url>(kotlin.String){}[0]

    final fun build(): dev.kord.gateway/DefaultGateway // dev.kord.gateway/DefaultGatewayBuilder.build|build(){}[0]
}

final class dev.kord.gateway/DefaultGatewayData { // dev.kord.gateway/DefaultGatewayData|null[0]
    constructor <init>(kotlin/String, io.ktor.client/HttpClient, dev.kord.gateway.retry/Retry, dev.kord.common.ratelimit/RateLimiter, dev.kord.gateway.ratelimit/IdentifyRateLimiter, kotlinx.coroutines/CoroutineDispatcher, kotlinx.coroutines.flow/MutableSharedFlow<dev.kord.gateway/Event>) // dev.kord.gateway/DefaultGatewayData.<init>|<init>(kotlin.String;io.ktor.client.HttpClient;dev.kord.gateway.retry.Retry;dev.kord.common.ratelimit.RateLimiter;dev.kord.gateway.ratelimit.IdentifyRateLimiter;kotlinx.coroutines.CoroutineDispatcher;kotlinx.coroutines.flow.MutableSharedFlow<dev.kord.gateway.Event>){}[0]

    final val client // dev.kord.gateway/DefaultGatewayData.client|{}client[0]
        final fun <get-client>(): io.ktor.client/HttpClient // dev.kord.gateway/DefaultGatewayData.client.<get-client>|<get-client>(){}[0]
    final val dispatcher // dev.kord.gateway/DefaultGatewayData.dispatcher|{}dispatcher[0]
        final fun <get-dispatcher>(): kotlinx.coroutines/CoroutineDispatcher // dev.kord.gateway/DefaultGatewayData.dispatcher.<get-dispatcher>|<get-dispatcher>(){}[0]
    final val eventFlow // dev.kord.gateway/DefaultGatewayData.eventFlow|{}eventFlow[0]
        final fun <get-eventFlow>(): kotlinx.coroutines.flow/MutableSharedFlow<dev.kord.gateway/Event> // dev.kord.gateway/DefaultGatewayData.eventFlow.<get-eventFlow>|<get-eventFlow>(){}[0]
    final val identifyRateLimiter // dev.kord.gateway/DefaultGatewayData.identifyRateLimiter|{}identifyRateLimiter[0]
        final fun <get-identifyRateLimiter>(): dev.kord.gateway.ratelimit/IdentifyRateLimiter // dev.kord.gateway/DefaultGatewayData.identifyRateLimiter.<get-identifyRateLimiter>|<get-identifyRateLimiter>(){}[0]
    final val reconnectRetry // dev.kord.gateway/DefaultGatewayData.reconnectRetry|{}reconnectRetry[0]
        final fun <get-reconnectRetry>(): dev.kord.gateway.retry/Retry // dev.kord.gateway/DefaultGatewayData.reconnectRetry.<get-reconnectRetry>|<get-reconnectRetry>(){}[0]
    final val sendRateLimiter // dev.kord.gateway/DefaultGatewayData.sendRateLimiter|{}sendRateLimiter[0]
        final fun <get-sendRateLimiter>(): dev.kord.common.ratelimit/RateLimiter // dev.kord.gateway/DefaultGatewayData.sendRateLimiter.<get-sendRateLimiter>|<get-sendRateLimiter>(){}[0]
    final val url // dev.kord.gateway/DefaultGatewayData.url|{}url[0]
        final fun <get-url>(): kotlin/String // dev.kord.gateway/DefaultGatewayData.url.<get-url>|<get-url>(){}[0]

    final fun component1(): kotlin/String // dev.kord.gateway/DefaultGatewayData.component1|component1(){}[0]
    final fun component2(): io.ktor.client/HttpClient // dev.kord.gateway/DefaultGatewayData.component2|component2(){}[0]
    final fun component3(): dev.kord.gateway.retry/Retry // dev.kord.gateway/DefaultGatewayData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.ratelimit/RateLimiter // dev.kord.gateway/DefaultGatewayData.component4|component4(){}[0]
    final fun component5(): dev.kord.gateway.ratelimit/IdentifyRateLimiter // dev.kord.gateway/DefaultGatewayData.component5|component5(){}[0]
    final fun component6(): kotlinx.coroutines/CoroutineDispatcher // dev.kord.gateway/DefaultGatewayData.component6|component6(){}[0]
    final fun component7(): kotlinx.coroutines.flow/MutableSharedFlow<dev.kord.gateway/Event> // dev.kord.gateway/DefaultGatewayData.component7|component7(){}[0]
    final fun copy(kotlin/String = ..., io.ktor.client/HttpClient = ..., dev.kord.gateway.retry/Retry = ..., dev.kord.common.ratelimit/RateLimiter = ..., dev.kord.gateway.ratelimit/IdentifyRateLimiter = ..., kotlinx.coroutines/CoroutineDispatcher = ..., kotlinx.coroutines.flow/MutableSharedFlow<dev.kord.gateway/Event> = ...): dev.kord.gateway/DefaultGatewayData // dev.kord.gateway/DefaultGatewayData.copy|copy(kotlin.String;io.ktor.client.HttpClient;dev.kord.gateway.retry.Retry;dev.kord.common.ratelimit.RateLimiter;dev.kord.gateway.ratelimit.IdentifyRateLimiter;kotlinx.coroutines.CoroutineDispatcher;kotlinx.coroutines.flow.MutableSharedFlow<dev.kord.gateway.Event>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/DefaultGatewayData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/DefaultGatewayData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/DefaultGatewayData.toString|toString(){}[0]
}

final class dev.kord.gateway/DiscordAutoModerationActionExecution { // dev.kord.gateway/DiscordAutoModerationActionExecution|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordAutoModerationAction, dev.kord.common.entity/Snowflake, dev.kord.common.entity/AutoModerationRuleTriggerType, dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/String, kotlin/String?, kotlin/String?) // dev.kord.gateway/DiscordAutoModerationActionExecution.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.DiscordAutoModerationAction;dev.kord.common.entity.Snowflake;dev.kord.common.entity.AutoModerationRuleTriggerType;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.String;kotlin.String?;kotlin.String?){}[0]

    final val action // dev.kord.gateway/DiscordAutoModerationActionExecution.action|{}action[0]
        final fun <get-action>(): dev.kord.common.entity/DiscordAutoModerationAction // dev.kord.gateway/DiscordAutoModerationActionExecution.action.<get-action>|<get-action>(){}[0]
    final val alertSystemMessageId // dev.kord.gateway/DiscordAutoModerationActionExecution.alertSystemMessageId|{}alertSystemMessageId[0]
        final fun <get-alertSystemMessageId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.gateway/DiscordAutoModerationActionExecution.alertSystemMessageId.<get-alertSystemMessageId>|<get-alertSystemMessageId>(){}[0]
    final val channelId // dev.kord.gateway/DiscordAutoModerationActionExecution.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.gateway/DiscordAutoModerationActionExecution.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val content // dev.kord.gateway/DiscordAutoModerationActionExecution.content|{}content[0]
        final fun <get-content>(): kotlin/String // dev.kord.gateway/DiscordAutoModerationActionExecution.content.<get-content>|<get-content>(){}[0]
    final val guildId // dev.kord.gateway/DiscordAutoModerationActionExecution.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.gateway/DiscordAutoModerationActionExecution.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val matchedContent // dev.kord.gateway/DiscordAutoModerationActionExecution.matchedContent|{}matchedContent[0]
        final fun <get-matchedContent>(): kotlin/String? // dev.kord.gateway/DiscordAutoModerationActionExecution.matchedContent.<get-matchedContent>|<get-matchedContent>(){}[0]
    final val matchedKeyword // dev.kord.gateway/DiscordAutoModerationActionExecution.matchedKeyword|{}matchedKeyword[0]
        final fun <get-matchedKeyword>(): kotlin/String? // dev.kord.gateway/DiscordAutoModerationActionExecution.matchedKeyword.<get-matchedKeyword>|<get-matchedKeyword>(){}[0]
    final val messageId // dev.kord.gateway/DiscordAutoModerationActionExecution.messageId|{}messageId[0]
        final fun <get-messageId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.gateway/DiscordAutoModerationActionExecution.messageId.<get-messageId>|<get-messageId>(){}[0]
    final val ruleId // dev.kord.gateway/DiscordAutoModerationActionExecution.ruleId|{}ruleId[0]
        final fun <get-ruleId>(): dev.kord.common.entity/Snowflake // dev.kord.gateway/DiscordAutoModerationActionExecution.ruleId.<get-ruleId>|<get-ruleId>(){}[0]
    final val ruleTriggerType // dev.kord.gateway/DiscordAutoModerationActionExecution.ruleTriggerType|{}ruleTriggerType[0]
        final fun <get-ruleTriggerType>(): dev.kord.common.entity/AutoModerationRuleTriggerType // dev.kord.gateway/DiscordAutoModerationActionExecution.ruleTriggerType.<get-ruleTriggerType>|<get-ruleTriggerType>(){}[0]
    final val userId // dev.kord.gateway/DiscordAutoModerationActionExecution.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake // dev.kord.gateway/DiscordAutoModerationActionExecution.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.gateway/DiscordAutoModerationActionExecution.component1|component1(){}[0]
    final fun component10(): kotlin/String? // dev.kord.gateway/DiscordAutoModerationActionExecution.component10|component10(){}[0]
    final fun component11(): kotlin/String? // dev.kord.gateway/DiscordAutoModerationActionExecution.component11|component11(){}[0]
    final fun component2(): dev.kord.common.entity/DiscordAutoModerationAction // dev.kord.gateway/DiscordAutoModerationActionExecution.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake // dev.kord.gateway/DiscordAutoModerationActionExecution.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity/AutoModerationRuleTriggerType // dev.kord.gateway/DiscordAutoModerationActionExecution.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity/Snowflake // dev.kord.gateway/DiscordAutoModerationActionExecution.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.gateway/DiscordAutoModerationActionExecution.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.gateway/DiscordAutoModerationActionExecution.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.gateway/DiscordAutoModerationActionExecution.component8|component8(){}[0]
    final fun component9(): kotlin/String // dev.kord.gateway/DiscordAutoModerationActionExecution.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/DiscordAutoModerationAction = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/AutoModerationRuleTriggerType = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/String = ..., kotlin/String? = ..., kotlin/String? = ...): dev.kord.gateway/DiscordAutoModerationActionExecution // dev.kord.gateway/DiscordAutoModerationActionExecution.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.DiscordAutoModerationAction;dev.kord.common.entity.Snowflake;dev.kord.common.entity.AutoModerationRuleTriggerType;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.String;kotlin.String?;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/DiscordAutoModerationActionExecution.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/DiscordAutoModerationActionExecution.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/DiscordAutoModerationActionExecution.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.gateway/DiscordAutoModerationActionExecution> { // dev.kord.gateway/DiscordAutoModerationActionExecution.$serializer|null[0]
        final val descriptor // dev.kord.gateway/DiscordAutoModerationActionExecution.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.gateway/DiscordAutoModerationActionExecution.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.gateway/DiscordAutoModerationActionExecution.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.gateway/DiscordAutoModerationActionExecution // dev.kord.gateway/DiscordAutoModerationActionExecution.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.gateway/DiscordAutoModerationActionExecution) // dev.kord.gateway/DiscordAutoModerationActionExecution.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.gateway.DiscordAutoModerationActionExecution){}[0]
    }

    final object Companion { // dev.kord.gateway/DiscordAutoModerationActionExecution.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.gateway/DiscordAutoModerationActionExecution> // dev.kord.gateway/DiscordAutoModerationActionExecution.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.gateway/DiscordCreatedInvite { // dev.kord.gateway/DiscordCreatedInvite|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, kotlinx.datetime/Instant, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., kotlin.time/Duration, kotlin/Int, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialApplication> = ..., kotlin/Boolean, kotlin/Int) // dev.kord.gateway/DiscordCreatedInvite.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;kotlinx.datetime.Instant;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;kotlin.time.Duration;kotlin.Int;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.InviteTargetType>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordPartialApplication>;kotlin.Boolean;kotlin.Int){}[0]

    final val channelId // dev.kord.gateway/DiscordCreatedInvite.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.gateway/DiscordCreatedInvite.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val code // dev.kord.gateway/DiscordCreatedInvite.code|{}code[0]
        final fun <get-code>(): kotlin/String // dev.kord.gateway/DiscordCreatedInvite.code.<get-code>|<get-code>(){}[0]
    final val createdAt // dev.kord.gateway/DiscordCreatedInvite.createdAt|{}createdAt[0]
        final fun <get-createdAt>(): kotlinx.datetime/Instant // dev.kord.gateway/DiscordCreatedInvite.createdAt.<get-createdAt>|<get-createdAt>(){}[0]
    final val guildId // dev.kord.gateway/DiscordCreatedInvite.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.gateway/DiscordCreatedInvite.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val inviter // dev.kord.gateway/DiscordCreatedInvite.inviter|{}inviter[0]
        final fun <get-inviter>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.gateway/DiscordCreatedInvite.inviter.<get-inviter>|<get-inviter>(){}[0]
    final val maxAge // dev.kord.gateway/DiscordCreatedInvite.maxAge|{}maxAge[0]
        final fun <get-maxAge>(): kotlin.time/Duration // dev.kord.gateway/DiscordCreatedInvite.maxAge.<get-maxAge>|<get-maxAge>(){}[0]
    final val maxUses // dev.kord.gateway/DiscordCreatedInvite.maxUses|{}maxUses[0]
        final fun <get-maxUses>(): kotlin/Int // dev.kord.gateway/DiscordCreatedInvite.maxUses.<get-maxUses>|<get-maxUses>(){}[0]
    final val targetApplication // dev.kord.gateway/DiscordCreatedInvite.targetApplication|{}targetApplication[0]
        final fun <get-targetApplication>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialApplication> // dev.kord.gateway/DiscordCreatedInvite.targetApplication.<get-targetApplication>|<get-targetApplication>(){}[0]
    final val targetType // dev.kord.gateway/DiscordCreatedInvite.targetType|{}targetType[0]
        final fun <get-targetType>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> // dev.kord.gateway/DiscordCreatedInvite.targetType.<get-targetType>|<get-targetType>(){}[0]
    final val targetUser // dev.kord.gateway/DiscordCreatedInvite.targetUser|{}targetUser[0]
        final fun <get-targetUser>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.gateway/DiscordCreatedInvite.targetUser.<get-targetUser>|<get-targetUser>(){}[0]
    final val temporary // dev.kord.gateway/DiscordCreatedInvite.temporary|{}temporary[0]
        final fun <get-temporary>(): kotlin/Boolean // dev.kord.gateway/DiscordCreatedInvite.temporary.<get-temporary>|<get-temporary>(){}[0]
    final val uses // dev.kord.gateway/DiscordCreatedInvite.uses|{}uses[0]
        final fun <get-uses>(): kotlin/Int // dev.kord.gateway/DiscordCreatedInvite.uses.<get-uses>|<get-uses>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.gateway/DiscordCreatedInvite.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialApplication> // dev.kord.gateway/DiscordCreatedInvite.component10|component10(){}[0]
    final fun component11(): kotlin/Boolean // dev.kord.gateway/DiscordCreatedInvite.component11|component11(){}[0]
    final fun component12(): kotlin/Int // dev.kord.gateway/DiscordCreatedInvite.component12|component12(){}[0]
    final fun component2(): kotlin/String // dev.kord.gateway/DiscordCreatedInvite.component2|component2(){}[0]
    final fun component3(): kotlinx.datetime/Instant // dev.kord.gateway/DiscordCreatedInvite.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.gateway/DiscordCreatedInvite.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.gateway/DiscordCreatedInvite.component5|component5(){}[0]
    final fun component6(): kotlin.time/Duration // dev.kord.gateway/DiscordCreatedInvite.component6|component6(){}[0]
    final fun component7(): kotlin/Int // dev.kord.gateway/DiscordCreatedInvite.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> // dev.kord.gateway/DiscordCreatedInvite.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.gateway/DiscordCreatedInvite.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., kotlinx.datetime/Instant = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., kotlin.time/Duration = ..., kotlin/Int = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialApplication> = ..., kotlin/Boolean = ..., kotlin/Int = ...): dev.kord.gateway/DiscordCreatedInvite // dev.kord.gateway/DiscordCreatedInvite.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;kotlinx.datetime.Instant;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;kotlin.time.Duration;kotlin.Int;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.InviteTargetType>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordPartialApplication>;kotlin.Boolean;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/DiscordCreatedInvite.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/DiscordCreatedInvite.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/DiscordCreatedInvite.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.gateway/DiscordCreatedInvite> { // dev.kord.gateway/DiscordCreatedInvite.$serializer|null[0]
        final val descriptor // dev.kord.gateway/DiscordCreatedInvite.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.gateway/DiscordCreatedInvite.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.gateway/DiscordCreatedInvite.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.gateway/DiscordCreatedInvite // dev.kord.gateway/DiscordCreatedInvite.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.gateway/DiscordCreatedInvite) // dev.kord.gateway/DiscordCreatedInvite.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.gateway.DiscordCreatedInvite){}[0]
    }

    final object Companion { // dev.kord.gateway/DiscordCreatedInvite.Companion|null[0]
        final val $childSerializers // dev.kord.gateway/DiscordCreatedInvite.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.gateway/DiscordCreatedInvite> // dev.kord.gateway/DiscordCreatedInvite.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.gateway/DiscordDeletedInvite { // dev.kord.gateway/DiscordDeletedInvite|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/String) // dev.kord.gateway/DiscordDeletedInvite.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.String){}[0]

    final val channelId // dev.kord.gateway/DiscordDeletedInvite.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.gateway/DiscordDeletedInvite.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val code // dev.kord.gateway/DiscordDeletedInvite.code|{}code[0]
        final fun <get-code>(): kotlin/String // dev.kord.gateway/DiscordDeletedInvite.code.<get-code>|<get-code>(){}[0]
    final val guildId // dev.kord.gateway/DiscordDeletedInvite.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.gateway/DiscordDeletedInvite.guildId.<get-guildId>|<get-guildId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.gateway/DiscordDeletedInvite.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.gateway/DiscordDeletedInvite.component2|component2(){}[0]
    final fun component3(): kotlin/String // dev.kord.gateway/DiscordDeletedInvite.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/String = ...): dev.kord.gateway/DiscordDeletedInvite // dev.kord.gateway/DiscordDeletedInvite.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/DiscordDeletedInvite.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/DiscordDeletedInvite.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/DiscordDeletedInvite.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.gateway/DiscordDeletedInvite> { // dev.kord.gateway/DiscordDeletedInvite.$serializer|null[0]
        final val descriptor // dev.kord.gateway/DiscordDeletedInvite.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.gateway/DiscordDeletedInvite.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.gateway/DiscordDeletedInvite.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.gateway/DiscordDeletedInvite // dev.kord.gateway/DiscordDeletedInvite.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.gateway/DiscordDeletedInvite) // dev.kord.gateway/DiscordDeletedInvite.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.gateway.DiscordDeletedInvite){}[0]
    }

    final object Companion { // dev.kord.gateway/DiscordDeletedInvite.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.gateway/DiscordDeletedInvite> // dev.kord.gateway/DiscordDeletedInvite.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.gateway/DiscordPresence { // dev.kord.gateway/DiscordPresence|null[0]
    constructor <init>(dev.kord.common.entity/PresenceStatus, kotlin/Boolean, kotlinx.datetime/Instant? = ..., dev.kord.common.entity/DiscordBotActivity? = ...) // dev.kord.gateway/DiscordPresence.<init>|<init>(dev.kord.common.entity.PresenceStatus;kotlin.Boolean;kotlinx.datetime.Instant?;dev.kord.common.entity.DiscordBotActivity?){}[0]

    final val afk // dev.kord.gateway/DiscordPresence.afk|{}afk[0]
        final fun <get-afk>(): kotlin/Boolean // dev.kord.gateway/DiscordPresence.afk.<get-afk>|<get-afk>(){}[0]
    final val game // dev.kord.gateway/DiscordPresence.game|{}game[0]
        final fun <get-game>(): dev.kord.common.entity/DiscordBotActivity? // dev.kord.gateway/DiscordPresence.game.<get-game>|<get-game>(){}[0]
    final val since // dev.kord.gateway/DiscordPresence.since|{}since[0]
        final fun <get-since>(): kotlinx.datetime/Instant? // dev.kord.gateway/DiscordPresence.since.<get-since>|<get-since>(){}[0]
    final val status // dev.kord.gateway/DiscordPresence.status|{}status[0]
        final fun <get-status>(): dev.kord.common.entity/PresenceStatus // dev.kord.gateway/DiscordPresence.status.<get-status>|<get-status>(){}[0]

    final fun component1(): dev.kord.common.entity/PresenceStatus // dev.kord.gateway/DiscordPresence.component1|component1(){}[0]
    final fun component2(): kotlin/Boolean // dev.kord.gateway/DiscordPresence.component2|component2(){}[0]
    final fun component3(): kotlinx.datetime/Instant? // dev.kord.gateway/DiscordPresence.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity/DiscordBotActivity? // dev.kord.gateway/DiscordPresence.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity/PresenceStatus = ..., kotlin/Boolean = ..., kotlinx.datetime/Instant? = ..., dev.kord.common.entity/DiscordBotActivity? = ...): dev.kord.gateway/DiscordPresence // dev.kord.gateway/DiscordPresence.copy|copy(dev.kord.common.entity.PresenceStatus;kotlin.Boolean;kotlinx.datetime.Instant?;dev.kord.common.entity.DiscordBotActivity?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/DiscordPresence.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/DiscordPresence.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/DiscordPresence.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.gateway/DiscordPresence> { // dev.kord.gateway/DiscordPresence.$serializer|null[0]
        final val descriptor // dev.kord.gateway/DiscordPresence.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.gateway/DiscordPresence.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.gateway/DiscordPresence.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.gateway/DiscordPresence // dev.kord.gateway/DiscordPresence.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.gateway/DiscordPresence) // dev.kord.gateway/DiscordPresence.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.gateway.DiscordPresence){}[0]
    }

    final object Companion { // dev.kord.gateway/DiscordPresence.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.gateway/DiscordPresence> // dev.kord.gateway/DiscordPresence.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.gateway/DiscordRemovedEmoji { // dev.kord.gateway/DiscordRemovedEmoji|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.gateway/DiscordRemovedReactionEmoji) // dev.kord.gateway/DiscordRemovedEmoji.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.gateway.DiscordRemovedReactionEmoji){}[0]

    final val channelId // dev.kord.gateway/DiscordRemovedEmoji.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.gateway/DiscordRemovedEmoji.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val emoji // dev.kord.gateway/DiscordRemovedEmoji.emoji|{}emoji[0]
        final fun <get-emoji>(): dev.kord.gateway/DiscordRemovedReactionEmoji // dev.kord.gateway/DiscordRemovedEmoji.emoji.<get-emoji>|<get-emoji>(){}[0]
    final val guildId // dev.kord.gateway/DiscordRemovedEmoji.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.gateway/DiscordRemovedEmoji.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val messageId // dev.kord.gateway/DiscordRemovedEmoji.messageId|{}messageId[0]
        final fun <get-messageId>(): dev.kord.common.entity/Snowflake // dev.kord.gateway/DiscordRemovedEmoji.messageId.<get-messageId>|<get-messageId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.gateway/DiscordRemovedEmoji.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.gateway/DiscordRemovedEmoji.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake // dev.kord.gateway/DiscordRemovedEmoji.component3|component3(){}[0]
    final fun component4(): dev.kord.gateway/DiscordRemovedReactionEmoji // dev.kord.gateway/DiscordRemovedEmoji.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.gateway/DiscordRemovedReactionEmoji = ...): dev.kord.gateway/DiscordRemovedEmoji // dev.kord.gateway/DiscordRemovedEmoji.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.gateway.DiscordRemovedReactionEmoji){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/DiscordRemovedEmoji.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/DiscordRemovedEmoji.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/DiscordRemovedEmoji.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.gateway/DiscordRemovedEmoji> { // dev.kord.gateway/DiscordRemovedEmoji.$serializer|null[0]
        final val descriptor // dev.kord.gateway/DiscordRemovedEmoji.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.gateway/DiscordRemovedEmoji.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.gateway/DiscordRemovedEmoji.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.gateway/DiscordRemovedEmoji // dev.kord.gateway/DiscordRemovedEmoji.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.gateway/DiscordRemovedEmoji) // dev.kord.gateway/DiscordRemovedEmoji.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.gateway.DiscordRemovedEmoji){}[0]
    }

    final object Companion { // dev.kord.gateway/DiscordRemovedEmoji.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.gateway/DiscordRemovedEmoji> // dev.kord.gateway/DiscordRemovedEmoji.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.gateway/DiscordRemovedReactionEmoji { // dev.kord.gateway/DiscordRemovedReactionEmoji|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake?, kotlin/String?) // dev.kord.gateway/DiscordRemovedReactionEmoji.<init>|<init>(dev.kord.common.entity.Snowflake?;kotlin.String?){}[0]

    final val id // dev.kord.gateway/DiscordRemovedReactionEmoji.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake? // dev.kord.gateway/DiscordRemovedReactionEmoji.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.gateway/DiscordRemovedReactionEmoji.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.gateway/DiscordRemovedReactionEmoji.name.<get-name>|<get-name>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake? // dev.kord.gateway/DiscordRemovedReactionEmoji.component1|component1(){}[0]
    final fun component2(): kotlin/String? // dev.kord.gateway/DiscordRemovedReactionEmoji.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake? = ..., kotlin/String? = ...): dev.kord.gateway/DiscordRemovedReactionEmoji // dev.kord.gateway/DiscordRemovedReactionEmoji.copy|copy(dev.kord.common.entity.Snowflake?;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/DiscordRemovedReactionEmoji.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/DiscordRemovedReactionEmoji.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/DiscordRemovedReactionEmoji.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.gateway/DiscordRemovedReactionEmoji> { // dev.kord.gateway/DiscordRemovedReactionEmoji.$serializer|null[0]
        final val descriptor // dev.kord.gateway/DiscordRemovedReactionEmoji.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.gateway/DiscordRemovedReactionEmoji.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.gateway/DiscordRemovedReactionEmoji.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.gateway/DiscordRemovedReactionEmoji // dev.kord.gateway/DiscordRemovedReactionEmoji.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.gateway/DiscordRemovedReactionEmoji) // dev.kord.gateway/DiscordRemovedReactionEmoji.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.gateway.DiscordRemovedReactionEmoji){}[0]
    }

    final object Companion { // dev.kord.gateway/DiscordRemovedReactionEmoji.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.gateway/DiscordRemovedReactionEmoji> // dev.kord.gateway/DiscordRemovedReactionEmoji.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.gateway/DiscordThreadListSync { // dev.kord.gateway/DiscordThreadListSync|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., kotlin.collections/List<dev.kord.common.entity/DiscordChannel>, kotlin.collections/List<dev.kord.common.entity/DiscordThreadMember>) // dev.kord.gateway/DiscordThreadListSync.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;kotlin.collections.List<dev.kord.common.entity.DiscordChannel>;kotlin.collections.List<dev.kord.common.entity.DiscordThreadMember>){}[0]

    final val channelIds // dev.kord.gateway/DiscordThreadListSync.channelIds|{}channelIds[0]
        final fun <get-channelIds>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.gateway/DiscordThreadListSync.channelIds.<get-channelIds>|<get-channelIds>(){}[0]
    final val guildId // dev.kord.gateway/DiscordThreadListSync.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.gateway/DiscordThreadListSync.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val members // dev.kord.gateway/DiscordThreadListSync.members|{}members[0]
        final fun <get-members>(): kotlin.collections/List<dev.kord.common.entity/DiscordThreadMember> // dev.kord.gateway/DiscordThreadListSync.members.<get-members>|<get-members>(){}[0]
    final val threads // dev.kord.gateway/DiscordThreadListSync.threads|{}threads[0]
        final fun <get-threads>(): kotlin.collections/List<dev.kord.common.entity/DiscordChannel> // dev.kord.gateway/DiscordThreadListSync.threads.<get-threads>|<get-threads>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.gateway/DiscordThreadListSync.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.gateway/DiscordThreadListSync.component2|component2(){}[0]
    final fun component3(): kotlin.collections/List<dev.kord.common.entity/DiscordChannel> // dev.kord.gateway/DiscordThreadListSync.component3|component3(){}[0]
    final fun component4(): kotlin.collections/List<dev.kord.common.entity/DiscordThreadMember> // dev.kord.gateway/DiscordThreadListSync.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., kotlin.collections/List<dev.kord.common.entity/DiscordChannel> = ..., kotlin.collections/List<dev.kord.common.entity/DiscordThreadMember> = ...): dev.kord.gateway/DiscordThreadListSync // dev.kord.gateway/DiscordThreadListSync.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;kotlin.collections.List<dev.kord.common.entity.DiscordChannel>;kotlin.collections.List<dev.kord.common.entity.DiscordThreadMember>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/DiscordThreadListSync.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/DiscordThreadListSync.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/DiscordThreadListSync.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.gateway/DiscordThreadListSync> { // dev.kord.gateway/DiscordThreadListSync.$serializer|null[0]
        final val descriptor // dev.kord.gateway/DiscordThreadListSync.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.gateway/DiscordThreadListSync.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.gateway/DiscordThreadListSync.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.gateway/DiscordThreadListSync // dev.kord.gateway/DiscordThreadListSync.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.gateway/DiscordThreadListSync) // dev.kord.gateway/DiscordThreadListSync.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.gateway.DiscordThreadListSync){}[0]
    }

    final object Companion { // dev.kord.gateway/DiscordThreadListSync.Companion|null[0]
        final val $childSerializers // dev.kord.gateway/DiscordThreadListSync.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.gateway/DiscordThreadListSync> // dev.kord.gateway/DiscordThreadListSync.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.gateway/DiscordThreadMembersUpdate { // dev.kord.gateway/DiscordThreadMembersUpdate|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int, dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordThreadMember>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ...) // dev.kord.gateway/DiscordThreadMembersUpdate.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordThreadMember>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>){}[0]

    final val addedMembers // dev.kord.gateway/DiscordThreadMembersUpdate.addedMembers|{}addedMembers[0]
        final fun <get-addedMembers>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordThreadMember>> // dev.kord.gateway/DiscordThreadMembersUpdate.addedMembers.<get-addedMembers>|<get-addedMembers>(){}[0]
    final val guildId // dev.kord.gateway/DiscordThreadMembersUpdate.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.gateway/DiscordThreadMembersUpdate.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.gateway/DiscordThreadMembersUpdate.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.gateway/DiscordThreadMembersUpdate.id.<get-id>|<get-id>(){}[0]
    final val memberCount // dev.kord.gateway/DiscordThreadMembersUpdate.memberCount|{}memberCount[0]
        final fun <get-memberCount>(): kotlin/Int // dev.kord.gateway/DiscordThreadMembersUpdate.memberCount.<get-memberCount>|<get-memberCount>(){}[0]
    final val removedMemberIds // dev.kord.gateway/DiscordThreadMembersUpdate.removedMemberIds|{}removedMemberIds[0]
        final fun <get-removedMemberIds>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.gateway/DiscordThreadMembersUpdate.removedMemberIds.<get-removedMemberIds>|<get-removedMemberIds>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.gateway/DiscordThreadMembersUpdate.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.gateway/DiscordThreadMembersUpdate.component2|component2(){}[0]
    final fun component3(): kotlin/Int // dev.kord.gateway/DiscordThreadMembersUpdate.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordThreadMember>> // dev.kord.gateway/DiscordThreadMembersUpdate.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.gateway/DiscordThreadMembersUpdate.component5|component5(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., kotlin/Int = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordThreadMember>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ...): dev.kord.gateway/DiscordThreadMembersUpdate // dev.kord.gateway/DiscordThreadMembersUpdate.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordThreadMember>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/DiscordThreadMembersUpdate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/DiscordThreadMembersUpdate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/DiscordThreadMembersUpdate.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.gateway/DiscordThreadMembersUpdate> { // dev.kord.gateway/DiscordThreadMembersUpdate.$serializer|null[0]
        final val descriptor // dev.kord.gateway/DiscordThreadMembersUpdate.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.gateway/DiscordThreadMembersUpdate.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.gateway/DiscordThreadMembersUpdate.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.gateway/DiscordThreadMembersUpdate // dev.kord.gateway/DiscordThreadMembersUpdate.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.gateway/DiscordThreadMembersUpdate) // dev.kord.gateway/DiscordThreadMembersUpdate.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.gateway.DiscordThreadMembersUpdate){}[0]
    }

    final object Companion { // dev.kord.gateway/DiscordThreadMembersUpdate.Companion|null[0]
        final val $childSerializers // dev.kord.gateway/DiscordThreadMembersUpdate.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.gateway/DiscordThreadMembersUpdate> // dev.kord.gateway/DiscordThreadMembersUpdate.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.gateway/GatewayConfiguration { // dev.kord.gateway/GatewayConfiguration|null[0]
    constructor <init>(kotlin/String, kotlin/String, dev.kord.common.entity/DiscordShard, dev.kord.common.entity.optional/Optional<dev.kord.gateway/DiscordPresence> = ..., kotlin/Int, dev.kord.gateway/Intents) // dev.kord.gateway/GatewayConfiguration.<init>|<init>(kotlin.String;kotlin.String;dev.kord.common.entity.DiscordShard;dev.kord.common.entity.optional.Optional<dev.kord.gateway.DiscordPresence>;kotlin.Int;dev.kord.gateway.Intents){}[0]

    final val intents // dev.kord.gateway/GatewayConfiguration.intents|{}intents[0]
        final fun <get-intents>(): dev.kord.gateway/Intents // dev.kord.gateway/GatewayConfiguration.intents.<get-intents>|<get-intents>(){}[0]
    final val name // dev.kord.gateway/GatewayConfiguration.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.gateway/GatewayConfiguration.name.<get-name>|<get-name>(){}[0]
    final val presence // dev.kord.gateway/GatewayConfiguration.presence|{}presence[0]
        final fun <get-presence>(): dev.kord.common.entity.optional/Optional<dev.kord.gateway/DiscordPresence> // dev.kord.gateway/GatewayConfiguration.presence.<get-presence>|<get-presence>(){}[0]
    final val shard // dev.kord.gateway/GatewayConfiguration.shard|{}shard[0]
        final fun <get-shard>(): dev.kord.common.entity/DiscordShard // dev.kord.gateway/GatewayConfiguration.shard.<get-shard>|<get-shard>(){}[0]
    final val threshold // dev.kord.gateway/GatewayConfiguration.threshold|{}threshold[0]
        final fun <get-threshold>(): kotlin/Int // dev.kord.gateway/GatewayConfiguration.threshold.<get-threshold>|<get-threshold>(){}[0]
    final val token // dev.kord.gateway/GatewayConfiguration.token|{}token[0]
        final fun <get-token>(): kotlin/String // dev.kord.gateway/GatewayConfiguration.token.<get-token>|<get-token>(){}[0]

    final fun component1(): kotlin/String // dev.kord.gateway/GatewayConfiguration.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.gateway/GatewayConfiguration.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/DiscordShard // dev.kord.gateway/GatewayConfiguration.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<dev.kord.gateway/DiscordPresence> // dev.kord.gateway/GatewayConfiguration.component4|component4(){}[0]
    final fun component5(): kotlin/Int // dev.kord.gateway/GatewayConfiguration.component5|component5(){}[0]
    final fun component6(): dev.kord.gateway/Intents // dev.kord.gateway/GatewayConfiguration.component6|component6(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., dev.kord.common.entity/DiscordShard = ..., dev.kord.common.entity.optional/Optional<dev.kord.gateway/DiscordPresence> = ..., kotlin/Int = ..., dev.kord.gateway/Intents = ...): dev.kord.gateway/GatewayConfiguration // dev.kord.gateway/GatewayConfiguration.copy|copy(kotlin.String;kotlin.String;dev.kord.common.entity.DiscordShard;dev.kord.common.entity.optional.Optional<dev.kord.gateway.DiscordPresence>;kotlin.Int;dev.kord.gateway.Intents){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/GatewayConfiguration.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/GatewayConfiguration.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/GatewayConfiguration.toString|toString(){}[0]
}

final class dev.kord.gateway/GatewayConfigurationBuilder { // dev.kord.gateway/GatewayConfigurationBuilder|null[0]
    constructor <init>(kotlin/String, kotlin/String = ..., dev.kord.common.entity/DiscordShard = ..., dev.kord.gateway/DiscordPresence? = ..., kotlin/Int = ..., dev.kord.gateway/Intents = ...) // dev.kord.gateway/GatewayConfigurationBuilder.<init>|<init>(kotlin.String;kotlin.String;dev.kord.common.entity.DiscordShard;dev.kord.gateway.DiscordPresence?;kotlin.Int;dev.kord.gateway.Intents){}[0]

    final val token // dev.kord.gateway/GatewayConfigurationBuilder.token|{}token[0]
        final fun <get-token>(): kotlin/String // dev.kord.gateway/GatewayConfigurationBuilder.token.<get-token>|<get-token>(){}[0]

    final var intents // dev.kord.gateway/GatewayConfigurationBuilder.intents|{}intents[0]
        final fun <get-intents>(): dev.kord.gateway/Intents // dev.kord.gateway/GatewayConfigurationBuilder.intents.<get-intents>|<get-intents>(){}[0]
        final fun <set-intents>(dev.kord.gateway/Intents) // dev.kord.gateway/GatewayConfigurationBuilder.intents.<set-intents>|<set-intents>(dev.kord.gateway.Intents){}[0]
    final var name // dev.kord.gateway/GatewayConfigurationBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.gateway/GatewayConfigurationBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // dev.kord.gateway/GatewayConfigurationBuilder.name.<set-name>|<set-name>(kotlin.String){}[0]
    final var presence // dev.kord.gateway/GatewayConfigurationBuilder.presence|{}presence[0]
        final fun <get-presence>(): dev.kord.gateway/DiscordPresence? // dev.kord.gateway/GatewayConfigurationBuilder.presence.<get-presence>|<get-presence>(){}[0]
        final fun <set-presence>(dev.kord.gateway/DiscordPresence?) // dev.kord.gateway/GatewayConfigurationBuilder.presence.<set-presence>|<set-presence>(dev.kord.gateway.DiscordPresence?){}[0]
    final var shard // dev.kord.gateway/GatewayConfigurationBuilder.shard|{}shard[0]
        final fun <get-shard>(): dev.kord.common.entity/DiscordShard // dev.kord.gateway/GatewayConfigurationBuilder.shard.<get-shard>|<get-shard>(){}[0]
        final fun <set-shard>(dev.kord.common.entity/DiscordShard) // dev.kord.gateway/GatewayConfigurationBuilder.shard.<set-shard>|<set-shard>(dev.kord.common.entity.DiscordShard){}[0]
    final var threshold // dev.kord.gateway/GatewayConfigurationBuilder.threshold|{}threshold[0]
        final fun <get-threshold>(): kotlin/Int // dev.kord.gateway/GatewayConfigurationBuilder.threshold.<get-threshold>|<get-threshold>(){}[0]
        final fun <set-threshold>(kotlin/Int) // dev.kord.gateway/GatewayConfigurationBuilder.threshold.<set-threshold>|<set-threshold>(kotlin.Int){}[0]

    final fun build(): dev.kord.gateway/GatewayConfiguration // dev.kord.gateway/GatewayConfigurationBuilder.build|build(){}[0]
    final inline fun presence(kotlin/Function1<dev.kord.gateway.builder/PresenceBuilder, kotlin/Unit>) // dev.kord.gateway/GatewayConfigurationBuilder.presence|presence(kotlin.Function1<dev.kord.gateway.builder.PresenceBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.gateway/GuildAuditLogEntryCreate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/GuildAuditLogEntryCreate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordAuditLogEntry, kotlin/Int?) // dev.kord.gateway/GuildAuditLogEntryCreate.<init>|<init>(dev.kord.common.entity.DiscordAuditLogEntry;kotlin.Int?){}[0]

    final val entry // dev.kord.gateway/GuildAuditLogEntryCreate.entry|{}entry[0]
        final fun <get-entry>(): dev.kord.common.entity/DiscordAuditLogEntry // dev.kord.gateway/GuildAuditLogEntryCreate.entry.<get-entry>|<get-entry>(){}[0]
    final val sequence // dev.kord.gateway/GuildAuditLogEntryCreate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/GuildAuditLogEntryCreate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordAuditLogEntry // dev.kord.gateway/GuildAuditLogEntryCreate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/GuildAuditLogEntryCreate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordAuditLogEntry = ..., kotlin/Int? = ...): dev.kord.gateway/GuildAuditLogEntryCreate // dev.kord.gateway/GuildAuditLogEntryCreate.copy|copy(dev.kord.common.entity.DiscordAuditLogEntry;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/GuildAuditLogEntryCreate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/GuildAuditLogEntryCreate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/GuildAuditLogEntryCreate.toString|toString(){}[0]
}

final class dev.kord.gateway/GuildBanAdd : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/GuildBanAdd|null[0]
    constructor <init>(dev.kord.common.entity/DiscordGuildBan, kotlin/Int?) // dev.kord.gateway/GuildBanAdd.<init>|<init>(dev.kord.common.entity.DiscordGuildBan;kotlin.Int?){}[0]

    final val ban // dev.kord.gateway/GuildBanAdd.ban|{}ban[0]
        final fun <get-ban>(): dev.kord.common.entity/DiscordGuildBan // dev.kord.gateway/GuildBanAdd.ban.<get-ban>|<get-ban>(){}[0]
    final val sequence // dev.kord.gateway/GuildBanAdd.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/GuildBanAdd.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordGuildBan // dev.kord.gateway/GuildBanAdd.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/GuildBanAdd.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordGuildBan = ..., kotlin/Int? = ...): dev.kord.gateway/GuildBanAdd // dev.kord.gateway/GuildBanAdd.copy|copy(dev.kord.common.entity.DiscordGuildBan;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/GuildBanAdd.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/GuildBanAdd.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/GuildBanAdd.toString|toString(){}[0]
}

final class dev.kord.gateway/GuildBanRemove : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/GuildBanRemove|null[0]
    constructor <init>(dev.kord.common.entity/DiscordGuildBan, kotlin/Int?) // dev.kord.gateway/GuildBanRemove.<init>|<init>(dev.kord.common.entity.DiscordGuildBan;kotlin.Int?){}[0]

    final val ban // dev.kord.gateway/GuildBanRemove.ban|{}ban[0]
        final fun <get-ban>(): dev.kord.common.entity/DiscordGuildBan // dev.kord.gateway/GuildBanRemove.ban.<get-ban>|<get-ban>(){}[0]
    final val sequence // dev.kord.gateway/GuildBanRemove.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/GuildBanRemove.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordGuildBan // dev.kord.gateway/GuildBanRemove.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/GuildBanRemove.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordGuildBan = ..., kotlin/Int? = ...): dev.kord.gateway/GuildBanRemove // dev.kord.gateway/GuildBanRemove.copy|copy(dev.kord.common.entity.DiscordGuildBan;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/GuildBanRemove.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/GuildBanRemove.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/GuildBanRemove.toString|toString(){}[0]
}

final class dev.kord.gateway/GuildCreate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/GuildCreate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordGuild, kotlin/Int?) // dev.kord.gateway/GuildCreate.<init>|<init>(dev.kord.common.entity.DiscordGuild;kotlin.Int?){}[0]

    final val guild // dev.kord.gateway/GuildCreate.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.common.entity/DiscordGuild // dev.kord.gateway/GuildCreate.guild.<get-guild>|<get-guild>(){}[0]
    final val sequence // dev.kord.gateway/GuildCreate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/GuildCreate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordGuild // dev.kord.gateway/GuildCreate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/GuildCreate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordGuild = ..., kotlin/Int? = ...): dev.kord.gateway/GuildCreate // dev.kord.gateway/GuildCreate.copy|copy(dev.kord.common.entity.DiscordGuild;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/GuildCreate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/GuildCreate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/GuildCreate.toString|toString(){}[0]
}

final class dev.kord.gateway/GuildDelete : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/GuildDelete|null[0]
    constructor <init>(dev.kord.common.entity/DiscordUnavailableGuild, kotlin/Int?) // dev.kord.gateway/GuildDelete.<init>|<init>(dev.kord.common.entity.DiscordUnavailableGuild;kotlin.Int?){}[0]

    final val guild // dev.kord.gateway/GuildDelete.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.common.entity/DiscordUnavailableGuild // dev.kord.gateway/GuildDelete.guild.<get-guild>|<get-guild>(){}[0]
    final val sequence // dev.kord.gateway/GuildDelete.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/GuildDelete.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordUnavailableGuild // dev.kord.gateway/GuildDelete.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/GuildDelete.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordUnavailableGuild = ..., kotlin/Int? = ...): dev.kord.gateway/GuildDelete // dev.kord.gateway/GuildDelete.copy|copy(dev.kord.common.entity.DiscordUnavailableGuild;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/GuildDelete.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/GuildDelete.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/GuildDelete.toString|toString(){}[0]
}

final class dev.kord.gateway/GuildEmojisUpdate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/GuildEmojisUpdate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordUpdatedEmojis, kotlin/Int?) // dev.kord.gateway/GuildEmojisUpdate.<init>|<init>(dev.kord.common.entity.DiscordUpdatedEmojis;kotlin.Int?){}[0]

    final val emoji // dev.kord.gateway/GuildEmojisUpdate.emoji|{}emoji[0]
        final fun <get-emoji>(): dev.kord.common.entity/DiscordUpdatedEmojis // dev.kord.gateway/GuildEmojisUpdate.emoji.<get-emoji>|<get-emoji>(){}[0]
    final val sequence // dev.kord.gateway/GuildEmojisUpdate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/GuildEmojisUpdate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordUpdatedEmojis // dev.kord.gateway/GuildEmojisUpdate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/GuildEmojisUpdate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordUpdatedEmojis = ..., kotlin/Int? = ...): dev.kord.gateway/GuildEmojisUpdate // dev.kord.gateway/GuildEmojisUpdate.copy|copy(dev.kord.common.entity.DiscordUpdatedEmojis;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/GuildEmojisUpdate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/GuildEmojisUpdate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/GuildEmojisUpdate.toString|toString(){}[0]
}

final class dev.kord.gateway/GuildIntegrationsUpdate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/GuildIntegrationsUpdate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordGuildIntegrations, kotlin/Int?) // dev.kord.gateway/GuildIntegrationsUpdate.<init>|<init>(dev.kord.common.entity.DiscordGuildIntegrations;kotlin.Int?){}[0]

    final val integrations // dev.kord.gateway/GuildIntegrationsUpdate.integrations|{}integrations[0]
        final fun <get-integrations>(): dev.kord.common.entity/DiscordGuildIntegrations // dev.kord.gateway/GuildIntegrationsUpdate.integrations.<get-integrations>|<get-integrations>(){}[0]
    final val sequence // dev.kord.gateway/GuildIntegrationsUpdate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/GuildIntegrationsUpdate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordGuildIntegrations // dev.kord.gateway/GuildIntegrationsUpdate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/GuildIntegrationsUpdate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordGuildIntegrations = ..., kotlin/Int? = ...): dev.kord.gateway/GuildIntegrationsUpdate // dev.kord.gateway/GuildIntegrationsUpdate.copy|copy(dev.kord.common.entity.DiscordGuildIntegrations;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/GuildIntegrationsUpdate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/GuildIntegrationsUpdate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/GuildIntegrationsUpdate.toString|toString(){}[0]
}

final class dev.kord.gateway/GuildMemberAdd : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/GuildMemberAdd|null[0]
    constructor <init>(dev.kord.common.entity/DiscordAddedGuildMember, kotlin/Int?) // dev.kord.gateway/GuildMemberAdd.<init>|<init>(dev.kord.common.entity.DiscordAddedGuildMember;kotlin.Int?){}[0]

    final val member // dev.kord.gateway/GuildMemberAdd.member|{}member[0]
        final fun <get-member>(): dev.kord.common.entity/DiscordAddedGuildMember // dev.kord.gateway/GuildMemberAdd.member.<get-member>|<get-member>(){}[0]
    final val sequence // dev.kord.gateway/GuildMemberAdd.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/GuildMemberAdd.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordAddedGuildMember // dev.kord.gateway/GuildMemberAdd.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/GuildMemberAdd.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordAddedGuildMember = ..., kotlin/Int? = ...): dev.kord.gateway/GuildMemberAdd // dev.kord.gateway/GuildMemberAdd.copy|copy(dev.kord.common.entity.DiscordAddedGuildMember;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/GuildMemberAdd.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/GuildMemberAdd.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/GuildMemberAdd.toString|toString(){}[0]
}

final class dev.kord.gateway/GuildMemberRemove : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/GuildMemberRemove|null[0]
    constructor <init>(dev.kord.common.entity/DiscordRemovedGuildMember, kotlin/Int?) // dev.kord.gateway/GuildMemberRemove.<init>|<init>(dev.kord.common.entity.DiscordRemovedGuildMember;kotlin.Int?){}[0]

    final val member // dev.kord.gateway/GuildMemberRemove.member|{}member[0]
        final fun <get-member>(): dev.kord.common.entity/DiscordRemovedGuildMember // dev.kord.gateway/GuildMemberRemove.member.<get-member>|<get-member>(){}[0]
    final val sequence // dev.kord.gateway/GuildMemberRemove.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/GuildMemberRemove.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordRemovedGuildMember // dev.kord.gateway/GuildMemberRemove.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/GuildMemberRemove.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordRemovedGuildMember = ..., kotlin/Int? = ...): dev.kord.gateway/GuildMemberRemove // dev.kord.gateway/GuildMemberRemove.copy|copy(dev.kord.common.entity.DiscordRemovedGuildMember;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/GuildMemberRemove.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/GuildMemberRemove.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/GuildMemberRemove.toString|toString(){}[0]
}

final class dev.kord.gateway/GuildMemberUpdate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/GuildMemberUpdate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordUpdatedGuildMember, kotlin/Int?) // dev.kord.gateway/GuildMemberUpdate.<init>|<init>(dev.kord.common.entity.DiscordUpdatedGuildMember;kotlin.Int?){}[0]

    final val member // dev.kord.gateway/GuildMemberUpdate.member|{}member[0]
        final fun <get-member>(): dev.kord.common.entity/DiscordUpdatedGuildMember // dev.kord.gateway/GuildMemberUpdate.member.<get-member>|<get-member>(){}[0]
    final val sequence // dev.kord.gateway/GuildMemberUpdate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/GuildMemberUpdate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordUpdatedGuildMember // dev.kord.gateway/GuildMemberUpdate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/GuildMemberUpdate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordUpdatedGuildMember = ..., kotlin/Int? = ...): dev.kord.gateway/GuildMemberUpdate // dev.kord.gateway/GuildMemberUpdate.copy|copy(dev.kord.common.entity.DiscordUpdatedGuildMember;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/GuildMemberUpdate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/GuildMemberUpdate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/GuildMemberUpdate.toString|toString(){}[0]
}

final class dev.kord.gateway/GuildMembersChunk : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/GuildMembersChunk|null[0]
    constructor <init>(dev.kord.gateway/GuildMembersChunkData, kotlin/Int?) // dev.kord.gateway/GuildMembersChunk.<init>|<init>(dev.kord.gateway.GuildMembersChunkData;kotlin.Int?){}[0]

    final val data // dev.kord.gateway/GuildMembersChunk.data|{}data[0]
        final fun <get-data>(): dev.kord.gateway/GuildMembersChunkData // dev.kord.gateway/GuildMembersChunk.data.<get-data>|<get-data>(){}[0]
    final val sequence // dev.kord.gateway/GuildMembersChunk.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/GuildMembersChunk.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.gateway/GuildMembersChunkData // dev.kord.gateway/GuildMembersChunk.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/GuildMembersChunk.component2|component2(){}[0]
    final fun copy(dev.kord.gateway/GuildMembersChunkData = ..., kotlin/Int? = ...): dev.kord.gateway/GuildMembersChunk // dev.kord.gateway/GuildMembersChunk.copy|copy(dev.kord.gateway.GuildMembersChunkData;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/GuildMembersChunk.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/GuildMembersChunk.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/GuildMembersChunk.toString|toString(){}[0]
}

final class dev.kord.gateway/GuildMembersChunkData { // dev.kord.gateway/GuildMembersChunkData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin.collections/List<dev.kord.common.entity/DiscordGuildMember>, kotlin/Int, kotlin/Int, dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordPresenceUpdate>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...) // dev.kord.gateway/GuildMembersChunkData.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.collections.List<dev.kord.common.entity.DiscordGuildMember>;kotlin.Int;kotlin.Int;dev.kord.common.entity.optional.Optional<kotlin.collections.Set<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordPresenceUpdate>>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]

    final val chunkCount // dev.kord.gateway/GuildMembersChunkData.chunkCount|{}chunkCount[0]
        final fun <get-chunkCount>(): kotlin/Int // dev.kord.gateway/GuildMembersChunkData.chunkCount.<get-chunkCount>|<get-chunkCount>(){}[0]
    final val chunkIndex // dev.kord.gateway/GuildMembersChunkData.chunkIndex|{}chunkIndex[0]
        final fun <get-chunkIndex>(): kotlin/Int // dev.kord.gateway/GuildMembersChunkData.chunkIndex.<get-chunkIndex>|<get-chunkIndex>(){}[0]
    final val guildId // dev.kord.gateway/GuildMembersChunkData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.gateway/GuildMembersChunkData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val members // dev.kord.gateway/GuildMembersChunkData.members|{}members[0]
        final fun <get-members>(): kotlin.collections/List<dev.kord.common.entity/DiscordGuildMember> // dev.kord.gateway/GuildMembersChunkData.members.<get-members>|<get-members>(){}[0]
    final val nonce // dev.kord.gateway/GuildMembersChunkData.nonce|{}nonce[0]
        final fun <get-nonce>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.gateway/GuildMembersChunkData.nonce.<get-nonce>|<get-nonce>(){}[0]
    final val notFound // dev.kord.gateway/GuildMembersChunkData.notFound|{}notFound[0]
        final fun <get-notFound>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Snowflake>> // dev.kord.gateway/GuildMembersChunkData.notFound.<get-notFound>|<get-notFound>(){}[0]
    final val presences // dev.kord.gateway/GuildMembersChunkData.presences|{}presences[0]
        final fun <get-presences>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordPresenceUpdate>> // dev.kord.gateway/GuildMembersChunkData.presences.<get-presences>|<get-presences>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.gateway/GuildMembersChunkData.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<dev.kord.common.entity/DiscordGuildMember> // dev.kord.gateway/GuildMembersChunkData.component2|component2(){}[0]
    final fun component3(): kotlin/Int // dev.kord.gateway/GuildMembersChunkData.component3|component3(){}[0]
    final fun component4(): kotlin/Int // dev.kord.gateway/GuildMembersChunkData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Snowflake>> // dev.kord.gateway/GuildMembersChunkData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordPresenceUpdate>> // dev.kord.gateway/GuildMembersChunkData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.gateway/GuildMembersChunkData.component7|component7(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin.collections/List<dev.kord.common.entity/DiscordGuildMember> = ..., kotlin/Int = ..., kotlin/Int = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordPresenceUpdate>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...): dev.kord.gateway/GuildMembersChunkData // dev.kord.gateway/GuildMembersChunkData.copy|copy(dev.kord.common.entity.Snowflake;kotlin.collections.List<dev.kord.common.entity.DiscordGuildMember>;kotlin.Int;kotlin.Int;dev.kord.common.entity.optional.Optional<kotlin.collections.Set<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordPresenceUpdate>>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/GuildMembersChunkData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/GuildMembersChunkData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/GuildMembersChunkData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.gateway/GuildMembersChunkData> { // dev.kord.gateway/GuildMembersChunkData.$serializer|null[0]
        final val descriptor // dev.kord.gateway/GuildMembersChunkData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.gateway/GuildMembersChunkData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.gateway/GuildMembersChunkData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.gateway/GuildMembersChunkData // dev.kord.gateway/GuildMembersChunkData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.gateway/GuildMembersChunkData) // dev.kord.gateway/GuildMembersChunkData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.gateway.GuildMembersChunkData){}[0]
    }

    final object Companion { // dev.kord.gateway/GuildMembersChunkData.Companion|null[0]
        final val $childSerializers // dev.kord.gateway/GuildMembersChunkData.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.gateway/GuildMembersChunkData> // dev.kord.gateway/GuildMembersChunkData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.gateway/GuildRoleCreate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/GuildRoleCreate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordGuildRole, kotlin/Int?) // dev.kord.gateway/GuildRoleCreate.<init>|<init>(dev.kord.common.entity.DiscordGuildRole;kotlin.Int?){}[0]

    final val role // dev.kord.gateway/GuildRoleCreate.role|{}role[0]
        final fun <get-role>(): dev.kord.common.entity/DiscordGuildRole // dev.kord.gateway/GuildRoleCreate.role.<get-role>|<get-role>(){}[0]
    final val sequence // dev.kord.gateway/GuildRoleCreate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/GuildRoleCreate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordGuildRole // dev.kord.gateway/GuildRoleCreate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/GuildRoleCreate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordGuildRole = ..., kotlin/Int? = ...): dev.kord.gateway/GuildRoleCreate // dev.kord.gateway/GuildRoleCreate.copy|copy(dev.kord.common.entity.DiscordGuildRole;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/GuildRoleCreate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/GuildRoleCreate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/GuildRoleCreate.toString|toString(){}[0]
}

final class dev.kord.gateway/GuildRoleDelete : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/GuildRoleDelete|null[0]
    constructor <init>(dev.kord.common.entity/DiscordDeletedGuildRole, kotlin/Int?) // dev.kord.gateway/GuildRoleDelete.<init>|<init>(dev.kord.common.entity.DiscordDeletedGuildRole;kotlin.Int?){}[0]

    final val role // dev.kord.gateway/GuildRoleDelete.role|{}role[0]
        final fun <get-role>(): dev.kord.common.entity/DiscordDeletedGuildRole // dev.kord.gateway/GuildRoleDelete.role.<get-role>|<get-role>(){}[0]
    final val sequence // dev.kord.gateway/GuildRoleDelete.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/GuildRoleDelete.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordDeletedGuildRole // dev.kord.gateway/GuildRoleDelete.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/GuildRoleDelete.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordDeletedGuildRole = ..., kotlin/Int? = ...): dev.kord.gateway/GuildRoleDelete // dev.kord.gateway/GuildRoleDelete.copy|copy(dev.kord.common.entity.DiscordDeletedGuildRole;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/GuildRoleDelete.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/GuildRoleDelete.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/GuildRoleDelete.toString|toString(){}[0]
}

final class dev.kord.gateway/GuildRoleUpdate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/GuildRoleUpdate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordGuildRole, kotlin/Int?) // dev.kord.gateway/GuildRoleUpdate.<init>|<init>(dev.kord.common.entity.DiscordGuildRole;kotlin.Int?){}[0]

    final val role // dev.kord.gateway/GuildRoleUpdate.role|{}role[0]
        final fun <get-role>(): dev.kord.common.entity/DiscordGuildRole // dev.kord.gateway/GuildRoleUpdate.role.<get-role>|<get-role>(){}[0]
    final val sequence // dev.kord.gateway/GuildRoleUpdate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/GuildRoleUpdate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordGuildRole // dev.kord.gateway/GuildRoleUpdate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/GuildRoleUpdate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordGuildRole = ..., kotlin/Int? = ...): dev.kord.gateway/GuildRoleUpdate // dev.kord.gateway/GuildRoleUpdate.copy|copy(dev.kord.common.entity.DiscordGuildRole;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/GuildRoleUpdate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/GuildRoleUpdate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/GuildRoleUpdate.toString|toString(){}[0]
}

final class dev.kord.gateway/GuildScheduledEventCreate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/GuildScheduledEventCreate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordGuildScheduledEvent, kotlin/Int?) // dev.kord.gateway/GuildScheduledEventCreate.<init>|<init>(dev.kord.common.entity.DiscordGuildScheduledEvent;kotlin.Int?){}[0]

    final val event // dev.kord.gateway/GuildScheduledEventCreate.event|{}event[0]
        final fun <get-event>(): dev.kord.common.entity/DiscordGuildScheduledEvent // dev.kord.gateway/GuildScheduledEventCreate.event.<get-event>|<get-event>(){}[0]
    final val sequence // dev.kord.gateway/GuildScheduledEventCreate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/GuildScheduledEventCreate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordGuildScheduledEvent // dev.kord.gateway/GuildScheduledEventCreate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/GuildScheduledEventCreate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordGuildScheduledEvent = ..., kotlin/Int? = ...): dev.kord.gateway/GuildScheduledEventCreate // dev.kord.gateway/GuildScheduledEventCreate.copy|copy(dev.kord.common.entity.DiscordGuildScheduledEvent;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/GuildScheduledEventCreate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/GuildScheduledEventCreate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/GuildScheduledEventCreate.toString|toString(){}[0]
}

final class dev.kord.gateway/GuildScheduledEventDelete : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/GuildScheduledEventDelete|null[0]
    constructor <init>(dev.kord.common.entity/DiscordGuildScheduledEvent, kotlin/Int?) // dev.kord.gateway/GuildScheduledEventDelete.<init>|<init>(dev.kord.common.entity.DiscordGuildScheduledEvent;kotlin.Int?){}[0]

    final val event // dev.kord.gateway/GuildScheduledEventDelete.event|{}event[0]
        final fun <get-event>(): dev.kord.common.entity/DiscordGuildScheduledEvent // dev.kord.gateway/GuildScheduledEventDelete.event.<get-event>|<get-event>(){}[0]
    final val sequence // dev.kord.gateway/GuildScheduledEventDelete.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/GuildScheduledEventDelete.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordGuildScheduledEvent // dev.kord.gateway/GuildScheduledEventDelete.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/GuildScheduledEventDelete.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordGuildScheduledEvent = ..., kotlin/Int? = ...): dev.kord.gateway/GuildScheduledEventDelete // dev.kord.gateway/GuildScheduledEventDelete.copy|copy(dev.kord.common.entity.DiscordGuildScheduledEvent;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/GuildScheduledEventDelete.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/GuildScheduledEventDelete.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/GuildScheduledEventDelete.toString|toString(){}[0]
}

final class dev.kord.gateway/GuildScheduledEventUpdate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/GuildScheduledEventUpdate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordGuildScheduledEvent, kotlin/Int?) // dev.kord.gateway/GuildScheduledEventUpdate.<init>|<init>(dev.kord.common.entity.DiscordGuildScheduledEvent;kotlin.Int?){}[0]

    final val event // dev.kord.gateway/GuildScheduledEventUpdate.event|{}event[0]
        final fun <get-event>(): dev.kord.common.entity/DiscordGuildScheduledEvent // dev.kord.gateway/GuildScheduledEventUpdate.event.<get-event>|<get-event>(){}[0]
    final val sequence // dev.kord.gateway/GuildScheduledEventUpdate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/GuildScheduledEventUpdate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordGuildScheduledEvent // dev.kord.gateway/GuildScheduledEventUpdate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/GuildScheduledEventUpdate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordGuildScheduledEvent = ..., kotlin/Int? = ...): dev.kord.gateway/GuildScheduledEventUpdate // dev.kord.gateway/GuildScheduledEventUpdate.copy|copy(dev.kord.common.entity.DiscordGuildScheduledEvent;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/GuildScheduledEventUpdate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/GuildScheduledEventUpdate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/GuildScheduledEventUpdate.toString|toString(){}[0]
}

final class dev.kord.gateway/GuildScheduledEventUserAdd : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/GuildScheduledEventUserAdd|null[0]
    constructor <init>(dev.kord.gateway/GuildScheduledEventUserMetadata, kotlin/Int?) // dev.kord.gateway/GuildScheduledEventUserAdd.<init>|<init>(dev.kord.gateway.GuildScheduledEventUserMetadata;kotlin.Int?){}[0]

    final val data // dev.kord.gateway/GuildScheduledEventUserAdd.data|{}data[0]
        final fun <get-data>(): dev.kord.gateway/GuildScheduledEventUserMetadata // dev.kord.gateway/GuildScheduledEventUserAdd.data.<get-data>|<get-data>(){}[0]
    final val sequence // dev.kord.gateway/GuildScheduledEventUserAdd.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/GuildScheduledEventUserAdd.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.gateway/GuildScheduledEventUserMetadata // dev.kord.gateway/GuildScheduledEventUserAdd.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/GuildScheduledEventUserAdd.component2|component2(){}[0]
    final fun copy(dev.kord.gateway/GuildScheduledEventUserMetadata = ..., kotlin/Int? = ...): dev.kord.gateway/GuildScheduledEventUserAdd // dev.kord.gateway/GuildScheduledEventUserAdd.copy|copy(dev.kord.gateway.GuildScheduledEventUserMetadata;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/GuildScheduledEventUserAdd.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/GuildScheduledEventUserAdd.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/GuildScheduledEventUserAdd.toString|toString(){}[0]
}

final class dev.kord.gateway/GuildScheduledEventUserMetadata { // dev.kord.gateway/GuildScheduledEventUserMetadata|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake) // dev.kord.gateway/GuildScheduledEventUserMetadata.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]

    final val guildId // dev.kord.gateway/GuildScheduledEventUserMetadata.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.gateway/GuildScheduledEventUserMetadata.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val guildScheduledEventId // dev.kord.gateway/GuildScheduledEventUserMetadata.guildScheduledEventId|{}guildScheduledEventId[0]
        final fun <get-guildScheduledEventId>(): dev.kord.common.entity/Snowflake // dev.kord.gateway/GuildScheduledEventUserMetadata.guildScheduledEventId.<get-guildScheduledEventId>|<get-guildScheduledEventId>(){}[0]
    final val userId // dev.kord.gateway/GuildScheduledEventUserMetadata.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake // dev.kord.gateway/GuildScheduledEventUserMetadata.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.gateway/GuildScheduledEventUserMetadata.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.gateway/GuildScheduledEventUserMetadata.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake // dev.kord.gateway/GuildScheduledEventUserMetadata.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ...): dev.kord.gateway/GuildScheduledEventUserMetadata // dev.kord.gateway/GuildScheduledEventUserMetadata.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/GuildScheduledEventUserMetadata.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/GuildScheduledEventUserMetadata.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/GuildScheduledEventUserMetadata.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.gateway/GuildScheduledEventUserMetadata> { // dev.kord.gateway/GuildScheduledEventUserMetadata.$serializer|null[0]
        final val descriptor // dev.kord.gateway/GuildScheduledEventUserMetadata.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.gateway/GuildScheduledEventUserMetadata.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.gateway/GuildScheduledEventUserMetadata.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.gateway/GuildScheduledEventUserMetadata // dev.kord.gateway/GuildScheduledEventUserMetadata.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.gateway/GuildScheduledEventUserMetadata) // dev.kord.gateway/GuildScheduledEventUserMetadata.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.gateway.GuildScheduledEventUserMetadata){}[0]
    }

    final object Companion { // dev.kord.gateway/GuildScheduledEventUserMetadata.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.gateway/GuildScheduledEventUserMetadata> // dev.kord.gateway/GuildScheduledEventUserMetadata.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.gateway/GuildScheduledEventUserRemove : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/GuildScheduledEventUserRemove|null[0]
    constructor <init>(dev.kord.gateway/GuildScheduledEventUserMetadata, kotlin/Int?) // dev.kord.gateway/GuildScheduledEventUserRemove.<init>|<init>(dev.kord.gateway.GuildScheduledEventUserMetadata;kotlin.Int?){}[0]

    final val data // dev.kord.gateway/GuildScheduledEventUserRemove.data|{}data[0]
        final fun <get-data>(): dev.kord.gateway/GuildScheduledEventUserMetadata // dev.kord.gateway/GuildScheduledEventUserRemove.data.<get-data>|<get-data>(){}[0]
    final val sequence // dev.kord.gateway/GuildScheduledEventUserRemove.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/GuildScheduledEventUserRemove.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.gateway/GuildScheduledEventUserMetadata // dev.kord.gateway/GuildScheduledEventUserRemove.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/GuildScheduledEventUserRemove.component2|component2(){}[0]
    final fun copy(dev.kord.gateway/GuildScheduledEventUserMetadata = ..., kotlin/Int? = ...): dev.kord.gateway/GuildScheduledEventUserRemove // dev.kord.gateway/GuildScheduledEventUserRemove.copy|copy(dev.kord.gateway.GuildScheduledEventUserMetadata;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/GuildScheduledEventUserRemove.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/GuildScheduledEventUserRemove.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/GuildScheduledEventUserRemove.toString|toString(){}[0]
}

final class dev.kord.gateway/GuildUpdate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/GuildUpdate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordGuild, kotlin/Int?) // dev.kord.gateway/GuildUpdate.<init>|<init>(dev.kord.common.entity.DiscordGuild;kotlin.Int?){}[0]

    final val guild // dev.kord.gateway/GuildUpdate.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.common.entity/DiscordGuild // dev.kord.gateway/GuildUpdate.guild.<get-guild>|<get-guild>(){}[0]
    final val sequence // dev.kord.gateway/GuildUpdate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/GuildUpdate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordGuild // dev.kord.gateway/GuildUpdate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/GuildUpdate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordGuild = ..., kotlin/Int? = ...): dev.kord.gateway/GuildUpdate // dev.kord.gateway/GuildUpdate.copy|copy(dev.kord.common.entity.DiscordGuild;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/GuildUpdate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/GuildUpdate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/GuildUpdate.toString|toString(){}[0]
}

final class dev.kord.gateway/Heartbeat : dev.kord.gateway/Event { // dev.kord.gateway/Heartbeat|null[0]
    constructor <init>(kotlin/Long) // dev.kord.gateway/Heartbeat.<init>|<init>(kotlin.Long){}[0]
    constructor <init>(kotlin/Long?) // dev.kord.gateway/Heartbeat.<init>|<init>(kotlin.Long?){}[0]

    final val data // dev.kord.gateway/Heartbeat.data|{}data[0]
        final fun <get-data>(): kotlin/Long? // dev.kord.gateway/Heartbeat.data.<get-data>|<get-data>(){}[0]
    final val data_ // dev.kord.gateway/Heartbeat.data_|{}data_[0]
        final fun <get-data_>(): kotlin/Long // dev.kord.gateway/Heartbeat.data_.<get-data_>|<get-data_>(){}[0]

    final fun component1(): kotlin/Long? // dev.kord.gateway/Heartbeat.component1|component1(){}[0]
    final fun component1_(): kotlin/Long // dev.kord.gateway/Heartbeat.component1_|component1_(){}[0]
    final fun copy(kotlin/Long? = ...): dev.kord.gateway/Heartbeat // dev.kord.gateway/Heartbeat.copy|copy(kotlin.Long?){}[0]
    final fun copy_(kotlin/Long = ...): dev.kord.gateway/Heartbeat // dev.kord.gateway/Heartbeat.copy_|copy_(kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/Heartbeat.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/Heartbeat.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/Heartbeat.toString|toString(){}[0]

    final class NewCompanion { // dev.kord.gateway/Heartbeat.NewCompanion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.gateway/Heartbeat> // dev.kord.gateway/Heartbeat.NewCompanion.serializer|serializer(){}[0]
    }

    final object Companion { // dev.kord.gateway/Heartbeat.Companion|null[0]
        final val NewCompanion // dev.kord.gateway/Heartbeat.Companion.NewCompanion|{}NewCompanion[0]
            final fun <get-NewCompanion>(): dev.kord.gateway/Heartbeat.NewCompanion // dev.kord.gateway/Heartbeat.Companion.NewCompanion.<get-NewCompanion>|<get-NewCompanion>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.gateway/Heartbeat> // dev.kord.gateway/Heartbeat.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.gateway/Hello : dev.kord.gateway/Event { // dev.kord.gateway/Hello|null[0]
    constructor <init>(kotlin/Int) // dev.kord.gateway/Hello.<init>|<init>(kotlin.Int){}[0]

    final val heartbeatInterval // dev.kord.gateway/Hello.heartbeatInterval|{}heartbeatInterval[0]
        final fun <get-heartbeatInterval>(): kotlin/Int // dev.kord.gateway/Hello.heartbeatInterval.<get-heartbeatInterval>|<get-heartbeatInterval>(){}[0]

    final fun component1(): kotlin/Int // dev.kord.gateway/Hello.component1|component1(){}[0]
    final fun copy(kotlin/Int = ...): dev.kord.gateway/Hello // dev.kord.gateway/Hello.copy|copy(kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/Hello.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/Hello.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/Hello.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.gateway/Hello> { // dev.kord.gateway/Hello.$serializer|null[0]
        final val descriptor // dev.kord.gateway/Hello.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.gateway/Hello.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.gateway/Hello.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.gateway/Hello // dev.kord.gateway/Hello.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.gateway/Hello) // dev.kord.gateway/Hello.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.gateway.Hello){}[0]
    }

    final object Companion { // dev.kord.gateway/Hello.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.gateway/Hello> // dev.kord.gateway/Hello.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.gateway/Identify : dev.kord.gateway/Command { // dev.kord.gateway/Identify|null[0]
    constructor <init>(kotlin/String, dev.kord.gateway/IdentifyProperties, dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordShard> = ..., dev.kord.common.entity.optional/Optional<dev.kord.gateway/DiscordPresence> = ..., dev.kord.gateway/Intents) // dev.kord.gateway/Identify.<init>|<init>(kotlin.String;dev.kord.gateway.IdentifyProperties;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordShard>;dev.kord.common.entity.optional.Optional<dev.kord.gateway.DiscordPresence>;dev.kord.gateway.Intents){}[0]

    final val compress // dev.kord.gateway/Identify.compress|{}compress[0]
        final fun <get-compress>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.gateway/Identify.compress.<get-compress>|<get-compress>(){}[0]
    final val intents // dev.kord.gateway/Identify.intents|{}intents[0]
        final fun <get-intents>(): dev.kord.gateway/Intents // dev.kord.gateway/Identify.intents.<get-intents>|<get-intents>(){}[0]
    final val largeThreshold // dev.kord.gateway/Identify.largeThreshold|{}largeThreshold[0]
        final fun <get-largeThreshold>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.gateway/Identify.largeThreshold.<get-largeThreshold>|<get-largeThreshold>(){}[0]
    final val presence // dev.kord.gateway/Identify.presence|{}presence[0]
        final fun <get-presence>(): dev.kord.common.entity.optional/Optional<dev.kord.gateway/DiscordPresence> // dev.kord.gateway/Identify.presence.<get-presence>|<get-presence>(){}[0]
    final val properties // dev.kord.gateway/Identify.properties|{}properties[0]
        final fun <get-properties>(): dev.kord.gateway/IdentifyProperties // dev.kord.gateway/Identify.properties.<get-properties>|<get-properties>(){}[0]
    final val shard // dev.kord.gateway/Identify.shard|{}shard[0]
        final fun <get-shard>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordShard> // dev.kord.gateway/Identify.shard.<get-shard>|<get-shard>(){}[0]
    final val token // dev.kord.gateway/Identify.token|{}token[0]
        final fun <get-token>(): kotlin/String // dev.kord.gateway/Identify.token.<get-token>|<get-token>(){}[0]

    final fun component1(): kotlin/String // dev.kord.gateway/Identify.component1|component1(){}[0]
    final fun component2(): dev.kord.gateway/IdentifyProperties // dev.kord.gateway/Identify.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.gateway/Identify.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalInt // dev.kord.gateway/Identify.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordShard> // dev.kord.gateway/Identify.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<dev.kord.gateway/DiscordPresence> // dev.kord.gateway/Identify.component6|component6(){}[0]
    final fun component7(): dev.kord.gateway/Intents // dev.kord.gateway/Identify.component7|component7(){}[0]
    final fun copy(kotlin/String = ..., dev.kord.gateway/IdentifyProperties = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordShard> = ..., dev.kord.common.entity.optional/Optional<dev.kord.gateway/DiscordPresence> = ..., dev.kord.gateway/Intents = ...): dev.kord.gateway/Identify // dev.kord.gateway/Identify.copy|copy(kotlin.String;dev.kord.gateway.IdentifyProperties;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordShard>;dev.kord.common.entity.optional.Optional<dev.kord.gateway.DiscordPresence>;dev.kord.gateway.Intents){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/Identify.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/Identify.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/Identify.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.gateway/Identify> { // dev.kord.gateway/Identify.$serializer|null[0]
        final val descriptor // dev.kord.gateway/Identify.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.gateway/Identify.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.gateway/Identify.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.gateway/Identify // dev.kord.gateway/Identify.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.gateway/Identify) // dev.kord.gateway/Identify.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.gateway.Identify){}[0]
    }

    final object Companion { // dev.kord.gateway/Identify.Companion|null[0]
        final val $childSerializers // dev.kord.gateway/Identify.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.gateway/Identify> // dev.kord.gateway/Identify.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.gateway/IdentifyProperties { // dev.kord.gateway/IdentifyProperties|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/String) // dev.kord.gateway/IdentifyProperties.<init>|<init>(kotlin.String;kotlin.String;kotlin.String){}[0]

    final val browser // dev.kord.gateway/IdentifyProperties.browser|{}browser[0]
        final fun <get-browser>(): kotlin/String // dev.kord.gateway/IdentifyProperties.browser.<get-browser>|<get-browser>(){}[0]
    final val device // dev.kord.gateway/IdentifyProperties.device|{}device[0]
        final fun <get-device>(): kotlin/String // dev.kord.gateway/IdentifyProperties.device.<get-device>|<get-device>(){}[0]
    final val os // dev.kord.gateway/IdentifyProperties.os|{}os[0]
        final fun <get-os>(): kotlin/String // dev.kord.gateway/IdentifyProperties.os.<get-os>|<get-os>(){}[0]

    final fun component1(): kotlin/String // dev.kord.gateway/IdentifyProperties.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.gateway/IdentifyProperties.component2|component2(){}[0]
    final fun component3(): kotlin/String // dev.kord.gateway/IdentifyProperties.component3|component3(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/String = ...): dev.kord.gateway/IdentifyProperties // dev.kord.gateway/IdentifyProperties.copy|copy(kotlin.String;kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/IdentifyProperties.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/IdentifyProperties.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/IdentifyProperties.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.gateway/IdentifyProperties> { // dev.kord.gateway/IdentifyProperties.$serializer|null[0]
        final val descriptor // dev.kord.gateway/IdentifyProperties.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.gateway/IdentifyProperties.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.gateway/IdentifyProperties.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.gateway/IdentifyProperties // dev.kord.gateway/IdentifyProperties.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.gateway/IdentifyProperties) // dev.kord.gateway/IdentifyProperties.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.gateway.IdentifyProperties){}[0]
    }

    final object Companion { // dev.kord.gateway/IdentifyProperties.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.gateway/IdentifyProperties> // dev.kord.gateway/IdentifyProperties.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.gateway/IntegrationCreate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/IntegrationCreate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordIntegration, kotlin/Int?) // dev.kord.gateway/IntegrationCreate.<init>|<init>(dev.kord.common.entity.DiscordIntegration;kotlin.Int?){}[0]

    final val integration // dev.kord.gateway/IntegrationCreate.integration|{}integration[0]
        final fun <get-integration>(): dev.kord.common.entity/DiscordIntegration // dev.kord.gateway/IntegrationCreate.integration.<get-integration>|<get-integration>(){}[0]
    final val sequence // dev.kord.gateway/IntegrationCreate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/IntegrationCreate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordIntegration // dev.kord.gateway/IntegrationCreate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/IntegrationCreate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordIntegration = ..., kotlin/Int? = ...): dev.kord.gateway/IntegrationCreate // dev.kord.gateway/IntegrationCreate.copy|copy(dev.kord.common.entity.DiscordIntegration;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/IntegrationCreate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/IntegrationCreate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/IntegrationCreate.toString|toString(){}[0]
}

final class dev.kord.gateway/IntegrationDelete : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/IntegrationDelete|null[0]
    constructor <init>(dev.kord.common.entity/DiscordIntegrationDelete, kotlin/Int?) // dev.kord.gateway/IntegrationDelete.<init>|<init>(dev.kord.common.entity.DiscordIntegrationDelete;kotlin.Int?){}[0]

    final val integration // dev.kord.gateway/IntegrationDelete.integration|{}integration[0]
        final fun <get-integration>(): dev.kord.common.entity/DiscordIntegrationDelete // dev.kord.gateway/IntegrationDelete.integration.<get-integration>|<get-integration>(){}[0]
    final val sequence // dev.kord.gateway/IntegrationDelete.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/IntegrationDelete.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordIntegrationDelete // dev.kord.gateway/IntegrationDelete.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/IntegrationDelete.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordIntegrationDelete = ..., kotlin/Int? = ...): dev.kord.gateway/IntegrationDelete // dev.kord.gateway/IntegrationDelete.copy|copy(dev.kord.common.entity.DiscordIntegrationDelete;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/IntegrationDelete.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/IntegrationDelete.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/IntegrationDelete.toString|toString(){}[0]
}

final class dev.kord.gateway/IntegrationUpdate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/IntegrationUpdate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordIntegration, kotlin/Int?) // dev.kord.gateway/IntegrationUpdate.<init>|<init>(dev.kord.common.entity.DiscordIntegration;kotlin.Int?){}[0]

    final val integration // dev.kord.gateway/IntegrationUpdate.integration|{}integration[0]
        final fun <get-integration>(): dev.kord.common.entity/DiscordIntegration // dev.kord.gateway/IntegrationUpdate.integration.<get-integration>|<get-integration>(){}[0]
    final val sequence // dev.kord.gateway/IntegrationUpdate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/IntegrationUpdate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordIntegration // dev.kord.gateway/IntegrationUpdate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/IntegrationUpdate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordIntegration = ..., kotlin/Int? = ...): dev.kord.gateway/IntegrationUpdate // dev.kord.gateway/IntegrationUpdate.copy|copy(dev.kord.common.entity.DiscordIntegration;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/IntegrationUpdate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/IntegrationUpdate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/IntegrationUpdate.toString|toString(){}[0]
}

final class dev.kord.gateway/Intents { // dev.kord.gateway/Intents|null[0]
    final val code // dev.kord.gateway/Intents.code|{}code[0]
        final fun <get-code>(): dev.kord.common/DiscordBitSet // dev.kord.gateway/Intents.code.<get-code>|<get-code>(){}[0]
    final val values // dev.kord.gateway/Intents.values|{}values[0]
        final fun <get-values>(): kotlin.collections/Set<dev.kord.gateway/Intent> // dev.kord.gateway/Intents.values.<get-values>|<get-values>(){}[0]

    final fun contains(dev.kord.gateway/Intent): kotlin/Boolean // dev.kord.gateway/Intents.contains|contains(dev.kord.gateway.Intent){}[0]
    final fun contains(dev.kord.gateway/Intents): kotlin/Boolean // dev.kord.gateway/Intents.contains|contains(dev.kord.gateway.Intents){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/Intents.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/Intents.hashCode|hashCode(){}[0]
    final fun minus(dev.kord.gateway/Intent): dev.kord.gateway/Intents // dev.kord.gateway/Intents.minus|minus(dev.kord.gateway.Intent){}[0]
    final fun minus(dev.kord.gateway/Intents): dev.kord.gateway/Intents // dev.kord.gateway/Intents.minus|minus(dev.kord.gateway.Intents){}[0]
    final fun plus(dev.kord.gateway/Intent): dev.kord.gateway/Intents // dev.kord.gateway/Intents.plus|plus(dev.kord.gateway.Intent){}[0]
    final fun plus(dev.kord.gateway/Intents): dev.kord.gateway/Intents // dev.kord.gateway/Intents.plus|plus(dev.kord.gateway.Intents){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/Intents.toString|toString(){}[0]
    final inline fun copy(kotlin/Function1<dev.kord.gateway/Intents.Builder, kotlin/Unit>): dev.kord.gateway/Intents // dev.kord.gateway/Intents.copy|copy(kotlin.Function1<dev.kord.gateway.Intents.Builder,kotlin.Unit>){}[0]
    final inline fun copy0(kotlin/Function1<dev.kord.gateway/Intents.Builder, kotlin/Unit>): dev.kord.gateway/Intents // dev.kord.gateway/Intents.copy0|copy0(kotlin.Function1<dev.kord.gateway.Intents.Builder,kotlin.Unit>){}[0]

    final class Builder { // dev.kord.gateway/Intents.Builder|null[0]
        constructor <init>(dev.kord.common/DiscordBitSet = ...) // dev.kord.gateway/Intents.Builder.<init>|<init>(dev.kord.common.DiscordBitSet){}[0]

        final fun (dev.kord.gateway/Intent).unaryMinus() // dev.kord.gateway/Intents.Builder.unaryMinus|unaryMinus@dev.kord.gateway.Intent(){}[0]
        final fun (dev.kord.gateway/Intent).unaryPlus() // dev.kord.gateway/Intents.Builder.unaryPlus|unaryPlus@dev.kord.gateway.Intent(){}[0]
        final fun (dev.kord.gateway/Intents).unaryMinus() // dev.kord.gateway/Intents.Builder.unaryMinus|unaryMinus@dev.kord.gateway.Intents(){}[0]
        final fun (dev.kord.gateway/Intents).unaryPlus() // dev.kord.gateway/Intents.Builder.unaryPlus|unaryPlus@dev.kord.gateway.Intents(){}[0]
        final fun build(): dev.kord.gateway/Intents // dev.kord.gateway/Intents.Builder.build|build(){}[0]
    }

    final object Companion { // dev.kord.gateway/Intents.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.gateway/Intents> // dev.kord.gateway/Intents.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.gateway/InteractionCreate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/InteractionCreate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordInteraction, kotlin/Int?) // dev.kord.gateway/InteractionCreate.<init>|<init>(dev.kord.common.entity.DiscordInteraction;kotlin.Int?){}[0]

    final val interaction // dev.kord.gateway/InteractionCreate.interaction|{}interaction[0]
        final fun <get-interaction>(): dev.kord.common.entity/DiscordInteraction // dev.kord.gateway/InteractionCreate.interaction.<get-interaction>|<get-interaction>(){}[0]
    final val sequence // dev.kord.gateway/InteractionCreate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/InteractionCreate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordInteraction // dev.kord.gateway/InteractionCreate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/InteractionCreate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordInteraction = ..., kotlin/Int? = ...): dev.kord.gateway/InteractionCreate // dev.kord.gateway/InteractionCreate.copy|copy(dev.kord.common.entity.DiscordInteraction;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/InteractionCreate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/InteractionCreate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/InteractionCreate.toString|toString(){}[0]
}

final class dev.kord.gateway/InvalidSession : dev.kord.gateway/Event { // dev.kord.gateway/InvalidSession|null[0]
    constructor <init>(kotlin/Boolean) // dev.kord.gateway/InvalidSession.<init>|<init>(kotlin.Boolean){}[0]

    final val resumable // dev.kord.gateway/InvalidSession.resumable|{}resumable[0]
        final fun <get-resumable>(): kotlin/Boolean // dev.kord.gateway/InvalidSession.resumable.<get-resumable>|<get-resumable>(){}[0]

    final fun component1(): kotlin/Boolean // dev.kord.gateway/InvalidSession.component1|component1(){}[0]
    final fun copy(kotlin/Boolean = ...): dev.kord.gateway/InvalidSession // dev.kord.gateway/InvalidSession.copy|copy(kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/InvalidSession.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/InvalidSession.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/InvalidSession.toString|toString(){}[0]

    final object Companion { // dev.kord.gateway/InvalidSession.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.gateway/InvalidSession> // dev.kord.gateway/InvalidSession.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.gateway/InviteCreate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/InviteCreate|null[0]
    constructor <init>(dev.kord.gateway/DiscordCreatedInvite, kotlin/Int?) // dev.kord.gateway/InviteCreate.<init>|<init>(dev.kord.gateway.DiscordCreatedInvite;kotlin.Int?){}[0]

    final val invite // dev.kord.gateway/InviteCreate.invite|{}invite[0]
        final fun <get-invite>(): dev.kord.gateway/DiscordCreatedInvite // dev.kord.gateway/InviteCreate.invite.<get-invite>|<get-invite>(){}[0]
    final val sequence // dev.kord.gateway/InviteCreate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/InviteCreate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.gateway/DiscordCreatedInvite // dev.kord.gateway/InviteCreate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/InviteCreate.component2|component2(){}[0]
    final fun copy(dev.kord.gateway/DiscordCreatedInvite = ..., kotlin/Int? = ...): dev.kord.gateway/InviteCreate // dev.kord.gateway/InviteCreate.copy|copy(dev.kord.gateway.DiscordCreatedInvite;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/InviteCreate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/InviteCreate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/InviteCreate.toString|toString(){}[0]
}

final class dev.kord.gateway/InviteDelete : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/InviteDelete|null[0]
    constructor <init>(dev.kord.gateway/DiscordDeletedInvite, kotlin/Int?) // dev.kord.gateway/InviteDelete.<init>|<init>(dev.kord.gateway.DiscordDeletedInvite;kotlin.Int?){}[0]

    final val invite // dev.kord.gateway/InviteDelete.invite|{}invite[0]
        final fun <get-invite>(): dev.kord.gateway/DiscordDeletedInvite // dev.kord.gateway/InviteDelete.invite.<get-invite>|<get-invite>(){}[0]
    final val sequence // dev.kord.gateway/InviteDelete.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/InviteDelete.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.gateway/DiscordDeletedInvite // dev.kord.gateway/InviteDelete.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/InviteDelete.component2|component2(){}[0]
    final fun copy(dev.kord.gateway/DiscordDeletedInvite = ..., kotlin/Int? = ...): dev.kord.gateway/InviteDelete // dev.kord.gateway/InviteDelete.copy|copy(dev.kord.gateway.DiscordDeletedInvite;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/InviteDelete.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/InviteDelete.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/InviteDelete.toString|toString(){}[0]
}

final class dev.kord.gateway/MessageCreate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/MessageCreate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordMessage, kotlin/Int?) // dev.kord.gateway/MessageCreate.<init>|<init>(dev.kord.common.entity.DiscordMessage;kotlin.Int?){}[0]

    final val message // dev.kord.gateway/MessageCreate.message|{}message[0]
        final fun <get-message>(): dev.kord.common.entity/DiscordMessage // dev.kord.gateway/MessageCreate.message.<get-message>|<get-message>(){}[0]
    final val sequence // dev.kord.gateway/MessageCreate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/MessageCreate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordMessage // dev.kord.gateway/MessageCreate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/MessageCreate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordMessage = ..., kotlin/Int? = ...): dev.kord.gateway/MessageCreate // dev.kord.gateway/MessageCreate.copy|copy(dev.kord.common.entity.DiscordMessage;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/MessageCreate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/MessageCreate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/MessageCreate.toString|toString(){}[0]
}

final class dev.kord.gateway/MessageDelete : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/MessageDelete|null[0]
    constructor <init>(dev.kord.common.entity/DeletedMessage, kotlin/Int?) // dev.kord.gateway/MessageDelete.<init>|<init>(dev.kord.common.entity.DeletedMessage;kotlin.Int?){}[0]

    final val message // dev.kord.gateway/MessageDelete.message|{}message[0]
        final fun <get-message>(): dev.kord.common.entity/DeletedMessage // dev.kord.gateway/MessageDelete.message.<get-message>|<get-message>(){}[0]
    final val sequence // dev.kord.gateway/MessageDelete.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/MessageDelete.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DeletedMessage // dev.kord.gateway/MessageDelete.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/MessageDelete.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DeletedMessage = ..., kotlin/Int? = ...): dev.kord.gateway/MessageDelete // dev.kord.gateway/MessageDelete.copy|copy(dev.kord.common.entity.DeletedMessage;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/MessageDelete.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/MessageDelete.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/MessageDelete.toString|toString(){}[0]
}

final class dev.kord.gateway/MessageDeleteBulk : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/MessageDeleteBulk|null[0]
    constructor <init>(dev.kord.common.entity/BulkDeleteData, kotlin/Int?) // dev.kord.gateway/MessageDeleteBulk.<init>|<init>(dev.kord.common.entity.BulkDeleteData;kotlin.Int?){}[0]

    final val messageBulk // dev.kord.gateway/MessageDeleteBulk.messageBulk|{}messageBulk[0]
        final fun <get-messageBulk>(): dev.kord.common.entity/BulkDeleteData // dev.kord.gateway/MessageDeleteBulk.messageBulk.<get-messageBulk>|<get-messageBulk>(){}[0]
    final val sequence // dev.kord.gateway/MessageDeleteBulk.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/MessageDeleteBulk.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/BulkDeleteData // dev.kord.gateway/MessageDeleteBulk.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/MessageDeleteBulk.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/BulkDeleteData = ..., kotlin/Int? = ...): dev.kord.gateway/MessageDeleteBulk // dev.kord.gateway/MessageDeleteBulk.copy|copy(dev.kord.common.entity.BulkDeleteData;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/MessageDeleteBulk.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/MessageDeleteBulk.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/MessageDeleteBulk.toString|toString(){}[0]
}

final class dev.kord.gateway/MessageReactionAdd : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/MessageReactionAdd|null[0]
    constructor <init>(dev.kord.common.entity/MessageReactionAddData, kotlin/Int?) // dev.kord.gateway/MessageReactionAdd.<init>|<init>(dev.kord.common.entity.MessageReactionAddData;kotlin.Int?){}[0]

    final val reaction // dev.kord.gateway/MessageReactionAdd.reaction|{}reaction[0]
        final fun <get-reaction>(): dev.kord.common.entity/MessageReactionAddData // dev.kord.gateway/MessageReactionAdd.reaction.<get-reaction>|<get-reaction>(){}[0]
    final val sequence // dev.kord.gateway/MessageReactionAdd.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/MessageReactionAdd.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/MessageReactionAddData // dev.kord.gateway/MessageReactionAdd.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/MessageReactionAdd.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/MessageReactionAddData = ..., kotlin/Int? = ...): dev.kord.gateway/MessageReactionAdd // dev.kord.gateway/MessageReactionAdd.copy|copy(dev.kord.common.entity.MessageReactionAddData;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/MessageReactionAdd.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/MessageReactionAdd.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/MessageReactionAdd.toString|toString(){}[0]
}

final class dev.kord.gateway/MessageReactionRemove : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/MessageReactionRemove|null[0]
    constructor <init>(dev.kord.common.entity/MessageReactionRemoveData, kotlin/Int?) // dev.kord.gateway/MessageReactionRemove.<init>|<init>(dev.kord.common.entity.MessageReactionRemoveData;kotlin.Int?){}[0]

    final val reaction // dev.kord.gateway/MessageReactionRemove.reaction|{}reaction[0]
        final fun <get-reaction>(): dev.kord.common.entity/MessageReactionRemoveData // dev.kord.gateway/MessageReactionRemove.reaction.<get-reaction>|<get-reaction>(){}[0]
    final val sequence // dev.kord.gateway/MessageReactionRemove.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/MessageReactionRemove.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/MessageReactionRemoveData // dev.kord.gateway/MessageReactionRemove.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/MessageReactionRemove.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/MessageReactionRemoveData = ..., kotlin/Int? = ...): dev.kord.gateway/MessageReactionRemove // dev.kord.gateway/MessageReactionRemove.copy|copy(dev.kord.common.entity.MessageReactionRemoveData;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/MessageReactionRemove.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/MessageReactionRemove.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/MessageReactionRemove.toString|toString(){}[0]
}

final class dev.kord.gateway/MessageReactionRemoveAll : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/MessageReactionRemoveAll|null[0]
    constructor <init>(dev.kord.common.entity/AllRemovedMessageReactions, kotlin/Int?) // dev.kord.gateway/MessageReactionRemoveAll.<init>|<init>(dev.kord.common.entity.AllRemovedMessageReactions;kotlin.Int?){}[0]

    final val reactions // dev.kord.gateway/MessageReactionRemoveAll.reactions|{}reactions[0]
        final fun <get-reactions>(): dev.kord.common.entity/AllRemovedMessageReactions // dev.kord.gateway/MessageReactionRemoveAll.reactions.<get-reactions>|<get-reactions>(){}[0]
    final val sequence // dev.kord.gateway/MessageReactionRemoveAll.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/MessageReactionRemoveAll.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/AllRemovedMessageReactions // dev.kord.gateway/MessageReactionRemoveAll.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/MessageReactionRemoveAll.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/AllRemovedMessageReactions = ..., kotlin/Int? = ...): dev.kord.gateway/MessageReactionRemoveAll // dev.kord.gateway/MessageReactionRemoveAll.copy|copy(dev.kord.common.entity.AllRemovedMessageReactions;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/MessageReactionRemoveAll.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/MessageReactionRemoveAll.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/MessageReactionRemoveAll.toString|toString(){}[0]
}

final class dev.kord.gateway/MessageReactionRemoveEmoji : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/MessageReactionRemoveEmoji|null[0]
    constructor <init>(dev.kord.gateway/DiscordRemovedEmoji, kotlin/Int?) // dev.kord.gateway/MessageReactionRemoveEmoji.<init>|<init>(dev.kord.gateway.DiscordRemovedEmoji;kotlin.Int?){}[0]

    final val reaction // dev.kord.gateway/MessageReactionRemoveEmoji.reaction|{}reaction[0]
        final fun <get-reaction>(): dev.kord.gateway/DiscordRemovedEmoji // dev.kord.gateway/MessageReactionRemoveEmoji.reaction.<get-reaction>|<get-reaction>(){}[0]
    final val sequence // dev.kord.gateway/MessageReactionRemoveEmoji.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/MessageReactionRemoveEmoji.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.gateway/DiscordRemovedEmoji // dev.kord.gateway/MessageReactionRemoveEmoji.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/MessageReactionRemoveEmoji.component2|component2(){}[0]
    final fun copy(dev.kord.gateway/DiscordRemovedEmoji = ..., kotlin/Int? = ...): dev.kord.gateway/MessageReactionRemoveEmoji // dev.kord.gateway/MessageReactionRemoveEmoji.copy|copy(dev.kord.gateway.DiscordRemovedEmoji;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/MessageReactionRemoveEmoji.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/MessageReactionRemoveEmoji.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/MessageReactionRemoveEmoji.toString|toString(){}[0]
}

final class dev.kord.gateway/MessageUpdate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/MessageUpdate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordPartialMessage, kotlin/Int?) // dev.kord.gateway/MessageUpdate.<init>|<init>(dev.kord.common.entity.DiscordPartialMessage;kotlin.Int?){}[0]

    final val message // dev.kord.gateway/MessageUpdate.message|{}message[0]
        final fun <get-message>(): dev.kord.common.entity/DiscordPartialMessage // dev.kord.gateway/MessageUpdate.message.<get-message>|<get-message>(){}[0]
    final val sequence // dev.kord.gateway/MessageUpdate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/MessageUpdate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordPartialMessage // dev.kord.gateway/MessageUpdate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/MessageUpdate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordPartialMessage = ..., kotlin/Int? = ...): dev.kord.gateway/MessageUpdate // dev.kord.gateway/MessageUpdate.copy|copy(dev.kord.common.entity.DiscordPartialMessage;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/MessageUpdate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/MessageUpdate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/MessageUpdate.toString|toString(){}[0]
}

final class dev.kord.gateway/PresenceUpdate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/PresenceUpdate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordPresenceUpdate, kotlin/Int?) // dev.kord.gateway/PresenceUpdate.<init>|<init>(dev.kord.common.entity.DiscordPresenceUpdate;kotlin.Int?){}[0]

    final val presence // dev.kord.gateway/PresenceUpdate.presence|{}presence[0]
        final fun <get-presence>(): dev.kord.common.entity/DiscordPresenceUpdate // dev.kord.gateway/PresenceUpdate.presence.<get-presence>|<get-presence>(){}[0]
    final val sequence // dev.kord.gateway/PresenceUpdate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/PresenceUpdate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordPresenceUpdate // dev.kord.gateway/PresenceUpdate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/PresenceUpdate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordPresenceUpdate = ..., kotlin/Int? = ...): dev.kord.gateway/PresenceUpdate // dev.kord.gateway/PresenceUpdate.copy|copy(dev.kord.common.entity.DiscordPresenceUpdate;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/PresenceUpdate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/PresenceUpdate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/PresenceUpdate.toString|toString(){}[0]
}

final class dev.kord.gateway/Ready : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/Ready|null[0]
    constructor <init>(dev.kord.gateway/ReadyData, kotlin/Int?) // dev.kord.gateway/Ready.<init>|<init>(dev.kord.gateway.ReadyData;kotlin.Int?){}[0]

    final val data // dev.kord.gateway/Ready.data|{}data[0]
        final fun <get-data>(): dev.kord.gateway/ReadyData // dev.kord.gateway/Ready.data.<get-data>|<get-data>(){}[0]
    final val sequence // dev.kord.gateway/Ready.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/Ready.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.gateway/ReadyData // dev.kord.gateway/Ready.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/Ready.component2|component2(){}[0]
    final fun copy(dev.kord.gateway/ReadyData = ..., kotlin/Int? = ...): dev.kord.gateway/Ready // dev.kord.gateway/Ready.copy|copy(dev.kord.gateway.ReadyData;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/Ready.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/Ready.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/Ready.toString|toString(){}[0]
}

final class dev.kord.gateway/ReadyData { // dev.kord.gateway/ReadyData|null[0]
    constructor <init>(kotlin/Int, dev.kord.common.entity/DiscordUser, kotlin.collections/List<dev.kord.common.entity/DiscordChannel>, kotlin.collections/List<dev.kord.common.entity/DiscordUnavailableGuild>, kotlin/String, kotlin/String, dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonElement?> = ..., dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonElement?> = ..., dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonElement?> = ..., kotlin.collections/List<kotlin/String>, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordShard> = ...) // dev.kord.gateway/ReadyData.<init>|<init>(kotlin.Int;dev.kord.common.entity.DiscordUser;kotlin.collections.List<dev.kord.common.entity.DiscordChannel>;kotlin.collections.List<dev.kord.common.entity.DiscordUnavailableGuild>;kotlin.String;kotlin.String;dev.kord.common.entity.optional.Optional<kotlinx.serialization.json.JsonElement?>;dev.kord.common.entity.optional.Optional<kotlinx.serialization.json.JsonElement?>;dev.kord.common.entity.optional.Optional<kotlinx.serialization.json.JsonElement?>;kotlin.collections.List<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordShard>){}[0]

    final val application // dev.kord.gateway/ReadyData.application|{}application[0]
        final fun <get-application>(): dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonElement?> // dev.kord.gateway/ReadyData.application.<get-application>|<get-application>(){}[0]
    final val geoOrderedRtcRegions // dev.kord.gateway/ReadyData.geoOrderedRtcRegions|{}geoOrderedRtcRegions[0]
        final fun <get-geoOrderedRtcRegions>(): dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonElement?> // dev.kord.gateway/ReadyData.geoOrderedRtcRegions.<get-geoOrderedRtcRegions>|<get-geoOrderedRtcRegions>(){}[0]
    final val guildHashes // dev.kord.gateway/ReadyData.guildHashes|{}guildHashes[0]
        final fun <get-guildHashes>(): dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonElement?> // dev.kord.gateway/ReadyData.guildHashes.<get-guildHashes>|<get-guildHashes>(){}[0]
    final val guilds // dev.kord.gateway/ReadyData.guilds|{}guilds[0]
        final fun <get-guilds>(): kotlin.collections/List<dev.kord.common.entity/DiscordUnavailableGuild> // dev.kord.gateway/ReadyData.guilds.<get-guilds>|<get-guilds>(){}[0]
    final val privateChannels // dev.kord.gateway/ReadyData.privateChannels|{}privateChannels[0]
        final fun <get-privateChannels>(): kotlin.collections/List<dev.kord.common.entity/DiscordChannel> // dev.kord.gateway/ReadyData.privateChannels.<get-privateChannels>|<get-privateChannels>(){}[0]
    final val resumeGatewayUrl // dev.kord.gateway/ReadyData.resumeGatewayUrl|{}resumeGatewayUrl[0]
        final fun <get-resumeGatewayUrl>(): kotlin/String // dev.kord.gateway/ReadyData.resumeGatewayUrl.<get-resumeGatewayUrl>|<get-resumeGatewayUrl>(){}[0]
    final val sessionId // dev.kord.gateway/ReadyData.sessionId|{}sessionId[0]
        final fun <get-sessionId>(): kotlin/String // dev.kord.gateway/ReadyData.sessionId.<get-sessionId>|<get-sessionId>(){}[0]
    final val shard // dev.kord.gateway/ReadyData.shard|{}shard[0]
        final fun <get-shard>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordShard> // dev.kord.gateway/ReadyData.shard.<get-shard>|<get-shard>(){}[0]
    final val traces // dev.kord.gateway/ReadyData.traces|{}traces[0]
        final fun <get-traces>(): kotlin.collections/List<kotlin/String> // dev.kord.gateway/ReadyData.traces.<get-traces>|<get-traces>(){}[0]
    final val user // dev.kord.gateway/ReadyData.user|{}user[0]
        final fun <get-user>(): dev.kord.common.entity/DiscordUser // dev.kord.gateway/ReadyData.user.<get-user>|<get-user>(){}[0]
    final val version // dev.kord.gateway/ReadyData.version|{}version[0]
        final fun <get-version>(): kotlin/Int // dev.kord.gateway/ReadyData.version.<get-version>|<get-version>(){}[0]

    final fun component1(): kotlin/Int // dev.kord.gateway/ReadyData.component1|component1(){}[0]
    final fun component10(): kotlin.collections/List<kotlin/String> // dev.kord.gateway/ReadyData.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordShard> // dev.kord.gateway/ReadyData.component11|component11(){}[0]
    final fun component2(): dev.kord.common.entity/DiscordUser // dev.kord.gateway/ReadyData.component2|component2(){}[0]
    final fun component3(): kotlin.collections/List<dev.kord.common.entity/DiscordChannel> // dev.kord.gateway/ReadyData.component3|component3(){}[0]
    final fun component4(): kotlin.collections/List<dev.kord.common.entity/DiscordUnavailableGuild> // dev.kord.gateway/ReadyData.component4|component4(){}[0]
    final fun component5(): kotlin/String // dev.kord.gateway/ReadyData.component5|component5(){}[0]
    final fun component6(): kotlin/String // dev.kord.gateway/ReadyData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonElement?> // dev.kord.gateway/ReadyData.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonElement?> // dev.kord.gateway/ReadyData.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonElement?> // dev.kord.gateway/ReadyData.component9|component9(){}[0]
    final fun copy(kotlin/Int = ..., dev.kord.common.entity/DiscordUser = ..., kotlin.collections/List<dev.kord.common.entity/DiscordChannel> = ..., kotlin.collections/List<dev.kord.common.entity/DiscordUnavailableGuild> = ..., kotlin/String = ..., kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonElement?> = ..., dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonElement?> = ..., dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonElement?> = ..., kotlin.collections/List<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordShard> = ...): dev.kord.gateway/ReadyData // dev.kord.gateway/ReadyData.copy|copy(kotlin.Int;dev.kord.common.entity.DiscordUser;kotlin.collections.List<dev.kord.common.entity.DiscordChannel>;kotlin.collections.List<dev.kord.common.entity.DiscordUnavailableGuild>;kotlin.String;kotlin.String;dev.kord.common.entity.optional.Optional<kotlinx.serialization.json.JsonElement?>;dev.kord.common.entity.optional.Optional<kotlinx.serialization.json.JsonElement?>;dev.kord.common.entity.optional.Optional<kotlinx.serialization.json.JsonElement?>;kotlin.collections.List<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordShard>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/ReadyData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/ReadyData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/ReadyData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.gateway/ReadyData> { // dev.kord.gateway/ReadyData.$serializer|null[0]
        final val descriptor // dev.kord.gateway/ReadyData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.gateway/ReadyData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.gateway/ReadyData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.gateway/ReadyData // dev.kord.gateway/ReadyData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.gateway/ReadyData) // dev.kord.gateway/ReadyData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.gateway.ReadyData){}[0]
    }

    final object Companion { // dev.kord.gateway/ReadyData.Companion|null[0]
        final val $childSerializers // dev.kord.gateway/ReadyData.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.gateway/ReadyData> // dev.kord.gateway/ReadyData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.gateway/RequestGuildMembers : dev.kord.gateway/Command { // dev.kord.gateway/RequestGuildMembers|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...) // dev.kord.gateway/RequestGuildMembers.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.Set<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]

    final val guildId // dev.kord.gateway/RequestGuildMembers.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.gateway/RequestGuildMembers.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val limit // dev.kord.gateway/RequestGuildMembers.limit|{}limit[0]
        final fun <get-limit>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.gateway/RequestGuildMembers.limit.<get-limit>|<get-limit>(){}[0]
    final val nonce // dev.kord.gateway/RequestGuildMembers.nonce|{}nonce[0]
        final fun <get-nonce>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.gateway/RequestGuildMembers.nonce.<get-nonce>|<get-nonce>(){}[0]
    final val presences // dev.kord.gateway/RequestGuildMembers.presences|{}presences[0]
        final fun <get-presences>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.gateway/RequestGuildMembers.presences.<get-presences>|<get-presences>(){}[0]
    final val query // dev.kord.gateway/RequestGuildMembers.query|{}query[0]
        final fun <get-query>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.gateway/RequestGuildMembers.query.<get-query>|<get-query>(){}[0]
    final val userIds // dev.kord.gateway/RequestGuildMembers.userIds|{}userIds[0]
        final fun <get-userIds>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Snowflake>> // dev.kord.gateway/RequestGuildMembers.userIds.<get-userIds>|<get-userIds>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.gateway/RequestGuildMembers.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.gateway/RequestGuildMembers.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalInt // dev.kord.gateway/RequestGuildMembers.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.gateway/RequestGuildMembers.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Snowflake>> // dev.kord.gateway/RequestGuildMembers.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.gateway/RequestGuildMembers.component6|component6(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...): dev.kord.gateway/RequestGuildMembers // dev.kord.gateway/RequestGuildMembers.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.Set<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/RequestGuildMembers.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/RequestGuildMembers.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/RequestGuildMembers.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.gateway/RequestGuildMembers> { // dev.kord.gateway/RequestGuildMembers.$serializer|null[0]
        final val descriptor // dev.kord.gateway/RequestGuildMembers.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.gateway/RequestGuildMembers.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.gateway/RequestGuildMembers.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.gateway/RequestGuildMembers // dev.kord.gateway/RequestGuildMembers.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.gateway/RequestGuildMembers) // dev.kord.gateway/RequestGuildMembers.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.gateway.RequestGuildMembers){}[0]
    }

    final object Companion { // dev.kord.gateway/RequestGuildMembers.Companion|null[0]
        final val $childSerializers // dev.kord.gateway/RequestGuildMembers.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.gateway/RequestGuildMembers> // dev.kord.gateway/RequestGuildMembers.Companion.serializer|serializer(){}[0]
    }

    final object Nonce { // dev.kord.gateway/RequestGuildMembers.Nonce|null[0]
        final fun new(): kotlin/String // dev.kord.gateway/RequestGuildMembers.Nonce.new|new(){}[0]
    }
}

final class dev.kord.gateway/Resume : dev.kord.gateway/Command { // dev.kord.gateway/Resume|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/Int) // dev.kord.gateway/Resume.<init>|<init>(kotlin.String;kotlin.String;kotlin.Int){}[0]

    final val sequenceNumber // dev.kord.gateway/Resume.sequenceNumber|{}sequenceNumber[0]
        final fun <get-sequenceNumber>(): kotlin/Int // dev.kord.gateway/Resume.sequenceNumber.<get-sequenceNumber>|<get-sequenceNumber>(){}[0]
    final val sessionId // dev.kord.gateway/Resume.sessionId|{}sessionId[0]
        final fun <get-sessionId>(): kotlin/String // dev.kord.gateway/Resume.sessionId.<get-sessionId>|<get-sessionId>(){}[0]
    final val token // dev.kord.gateway/Resume.token|{}token[0]
        final fun <get-token>(): kotlin/String // dev.kord.gateway/Resume.token.<get-token>|<get-token>(){}[0]

    final fun component1(): kotlin/String // dev.kord.gateway/Resume.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.gateway/Resume.component2|component2(){}[0]
    final fun component3(): kotlin/Int // dev.kord.gateway/Resume.component3|component3(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/Int = ...): dev.kord.gateway/Resume // dev.kord.gateway/Resume.copy|copy(kotlin.String;kotlin.String;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/Resume.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/Resume.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/Resume.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.gateway/Resume> { // dev.kord.gateway/Resume.$serializer|null[0]
        final val descriptor // dev.kord.gateway/Resume.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.gateway/Resume.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.gateway/Resume.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.gateway/Resume // dev.kord.gateway/Resume.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.gateway/Resume) // dev.kord.gateway/Resume.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.gateway.Resume){}[0]
    }

    final object Companion { // dev.kord.gateway/Resume.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.gateway/Resume> // dev.kord.gateway/Resume.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.gateway/Resumed : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/Resumed|null[0]
    constructor <init>(kotlin/Int?) // dev.kord.gateway/Resumed.<init>|<init>(kotlin.Int?){}[0]

    final val sequence // dev.kord.gateway/Resumed.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/Resumed.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): kotlin/Int? // dev.kord.gateway/Resumed.component1|component1(){}[0]
    final fun copy(kotlin/Int? = ...): dev.kord.gateway/Resumed // dev.kord.gateway/Resumed.copy|copy(kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/Resumed.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/Resumed.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/Resumed.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.gateway/Resumed> { // dev.kord.gateway/Resumed.$serializer|null[0]
        final val descriptor // dev.kord.gateway/Resumed.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.gateway/Resumed.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.gateway/Resumed.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.gateway/Resumed // dev.kord.gateway/Resumed.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.gateway/Resumed) // dev.kord.gateway/Resumed.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.gateway.Resumed){}[0]
    }

    final object Companion { // dev.kord.gateway/Resumed.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.gateway/Resumed> // dev.kord.gateway/Resumed.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.gateway/ThreadCreate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/ThreadCreate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordChannel, kotlin/Int?) // dev.kord.gateway/ThreadCreate.<init>|<init>(dev.kord.common.entity.DiscordChannel;kotlin.Int?){}[0]

    final val channel // dev.kord.gateway/ThreadCreate.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.common.entity/DiscordChannel // dev.kord.gateway/ThreadCreate.channel.<get-channel>|<get-channel>(){}[0]
    final val sequence // dev.kord.gateway/ThreadCreate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/ThreadCreate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordChannel // dev.kord.gateway/ThreadCreate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/ThreadCreate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordChannel = ..., kotlin/Int? = ...): dev.kord.gateway/ThreadCreate // dev.kord.gateway/ThreadCreate.copy|copy(dev.kord.common.entity.DiscordChannel;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/ThreadCreate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/ThreadCreate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/ThreadCreate.toString|toString(){}[0]
}

final class dev.kord.gateway/ThreadDelete : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/ThreadDelete|null[0]
    constructor <init>(dev.kord.common.entity/DiscordChannel, kotlin/Int?) // dev.kord.gateway/ThreadDelete.<init>|<init>(dev.kord.common.entity.DiscordChannel;kotlin.Int?){}[0]

    final val channel // dev.kord.gateway/ThreadDelete.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.common.entity/DiscordChannel // dev.kord.gateway/ThreadDelete.channel.<get-channel>|<get-channel>(){}[0]
    final val sequence // dev.kord.gateway/ThreadDelete.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/ThreadDelete.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordChannel // dev.kord.gateway/ThreadDelete.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/ThreadDelete.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordChannel = ..., kotlin/Int? = ...): dev.kord.gateway/ThreadDelete // dev.kord.gateway/ThreadDelete.copy|copy(dev.kord.common.entity.DiscordChannel;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/ThreadDelete.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/ThreadDelete.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/ThreadDelete.toString|toString(){}[0]
}

final class dev.kord.gateway/ThreadListSync : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/ThreadListSync|null[0]
    constructor <init>(dev.kord.gateway/DiscordThreadListSync, kotlin/Int?) // dev.kord.gateway/ThreadListSync.<init>|<init>(dev.kord.gateway.DiscordThreadListSync;kotlin.Int?){}[0]

    final val sequence // dev.kord.gateway/ThreadListSync.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/ThreadListSync.sequence.<get-sequence>|<get-sequence>(){}[0]
    final val sync // dev.kord.gateway/ThreadListSync.sync|{}sync[0]
        final fun <get-sync>(): dev.kord.gateway/DiscordThreadListSync // dev.kord.gateway/ThreadListSync.sync.<get-sync>|<get-sync>(){}[0]

    final fun component1(): dev.kord.gateway/DiscordThreadListSync // dev.kord.gateway/ThreadListSync.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/ThreadListSync.component2|component2(){}[0]
    final fun copy(dev.kord.gateway/DiscordThreadListSync = ..., kotlin/Int? = ...): dev.kord.gateway/ThreadListSync // dev.kord.gateway/ThreadListSync.copy|copy(dev.kord.gateway.DiscordThreadListSync;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/ThreadListSync.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/ThreadListSync.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/ThreadListSync.toString|toString(){}[0]
}

final class dev.kord.gateway/ThreadMemberUpdate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/ThreadMemberUpdate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordThreadMember, kotlin/Int?) // dev.kord.gateway/ThreadMemberUpdate.<init>|<init>(dev.kord.common.entity.DiscordThreadMember;kotlin.Int?){}[0]

    final val member // dev.kord.gateway/ThreadMemberUpdate.member|{}member[0]
        final fun <get-member>(): dev.kord.common.entity/DiscordThreadMember // dev.kord.gateway/ThreadMemberUpdate.member.<get-member>|<get-member>(){}[0]
    final val sequence // dev.kord.gateway/ThreadMemberUpdate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/ThreadMemberUpdate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordThreadMember // dev.kord.gateway/ThreadMemberUpdate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/ThreadMemberUpdate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordThreadMember = ..., kotlin/Int? = ...): dev.kord.gateway/ThreadMemberUpdate // dev.kord.gateway/ThreadMemberUpdate.copy|copy(dev.kord.common.entity.DiscordThreadMember;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/ThreadMemberUpdate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/ThreadMemberUpdate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/ThreadMemberUpdate.toString|toString(){}[0]
}

final class dev.kord.gateway/ThreadMembersUpdate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/ThreadMembersUpdate|null[0]
    constructor <init>(dev.kord.gateway/DiscordThreadMembersUpdate, kotlin/Int?) // dev.kord.gateway/ThreadMembersUpdate.<init>|<init>(dev.kord.gateway.DiscordThreadMembersUpdate;kotlin.Int?){}[0]

    final val members // dev.kord.gateway/ThreadMembersUpdate.members|{}members[0]
        final fun <get-members>(): dev.kord.gateway/DiscordThreadMembersUpdate // dev.kord.gateway/ThreadMembersUpdate.members.<get-members>|<get-members>(){}[0]
    final val sequence // dev.kord.gateway/ThreadMembersUpdate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/ThreadMembersUpdate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.gateway/DiscordThreadMembersUpdate // dev.kord.gateway/ThreadMembersUpdate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/ThreadMembersUpdate.component2|component2(){}[0]
    final fun copy(dev.kord.gateway/DiscordThreadMembersUpdate = ..., kotlin/Int? = ...): dev.kord.gateway/ThreadMembersUpdate // dev.kord.gateway/ThreadMembersUpdate.copy|copy(dev.kord.gateway.DiscordThreadMembersUpdate;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/ThreadMembersUpdate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/ThreadMembersUpdate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/ThreadMembersUpdate.toString|toString(){}[0]
}

final class dev.kord.gateway/ThreadUpdate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/ThreadUpdate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordChannel, kotlin/Int?) // dev.kord.gateway/ThreadUpdate.<init>|<init>(dev.kord.common.entity.DiscordChannel;kotlin.Int?){}[0]

    final val channel // dev.kord.gateway/ThreadUpdate.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.common.entity/DiscordChannel // dev.kord.gateway/ThreadUpdate.channel.<get-channel>|<get-channel>(){}[0]
    final val sequence // dev.kord.gateway/ThreadUpdate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/ThreadUpdate.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordChannel // dev.kord.gateway/ThreadUpdate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/ThreadUpdate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordChannel = ..., kotlin/Int? = ...): dev.kord.gateway/ThreadUpdate // dev.kord.gateway/ThreadUpdate.copy|copy(dev.kord.common.entity.DiscordChannel;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/ThreadUpdate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/ThreadUpdate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/ThreadUpdate.toString|toString(){}[0]
}

final class dev.kord.gateway/Ticker : kotlinx.coroutines/CoroutineScope { // dev.kord.gateway/Ticker|null[0]
    constructor <init>(kotlinx.coroutines/CoroutineDispatcher = ...) // dev.kord.gateway/Ticker.<init>|<init>(kotlinx.coroutines.CoroutineDispatcher){}[0]

    final val coroutineContext // dev.kord.gateway/Ticker.coroutineContext|{}coroutineContext[0]
        final fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // dev.kord.gateway/Ticker.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]

    final suspend fun stop() // dev.kord.gateway/Ticker.stop|stop(){}[0]
    final suspend fun tickAt(kotlin/Long, kotlin.coroutines/SuspendFunction0<kotlin/Unit>) // dev.kord.gateway/Ticker.tickAt|tickAt(kotlin.Long;kotlin.coroutines.SuspendFunction0<kotlin.Unit>){}[0]
}

final class dev.kord.gateway/TypingStart : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/TypingStart|null[0]
    constructor <init>(dev.kord.common.entity/DiscordTyping, kotlin/Int?) // dev.kord.gateway/TypingStart.<init>|<init>(dev.kord.common.entity.DiscordTyping;kotlin.Int?){}[0]

    final val data // dev.kord.gateway/TypingStart.data|{}data[0]
        final fun <get-data>(): dev.kord.common.entity/DiscordTyping // dev.kord.gateway/TypingStart.data.<get-data>|<get-data>(){}[0]
    final val sequence // dev.kord.gateway/TypingStart.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/TypingStart.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordTyping // dev.kord.gateway/TypingStart.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/TypingStart.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordTyping = ..., kotlin/Int? = ...): dev.kord.gateway/TypingStart // dev.kord.gateway/TypingStart.copy|copy(dev.kord.common.entity.DiscordTyping;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/TypingStart.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/TypingStart.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/TypingStart.toString|toString(){}[0]
}

final class dev.kord.gateway/UnknownDispatchEvent : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/UnknownDispatchEvent|null[0]
    constructor <init>(kotlin/String?, kotlinx.serialization.json/JsonElement?, kotlin/Int?) // dev.kord.gateway/UnknownDispatchEvent.<init>|<init>(kotlin.String?;kotlinx.serialization.json.JsonElement?;kotlin.Int?){}[0]

    final val data // dev.kord.gateway/UnknownDispatchEvent.data|{}data[0]
        final fun <get-data>(): kotlinx.serialization.json/JsonElement? // dev.kord.gateway/UnknownDispatchEvent.data.<get-data>|<get-data>(){}[0]
    final val name // dev.kord.gateway/UnknownDispatchEvent.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.gateway/UnknownDispatchEvent.name.<get-name>|<get-name>(){}[0]
    final val sequence // dev.kord.gateway/UnknownDispatchEvent.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/UnknownDispatchEvent.sequence.<get-sequence>|<get-sequence>(){}[0]

    final fun component1(): kotlin/String? // dev.kord.gateway/UnknownDispatchEvent.component1|component1(){}[0]
    final fun component2(): kotlinx.serialization.json/JsonElement? // dev.kord.gateway/UnknownDispatchEvent.component2|component2(){}[0]
    final fun component3(): kotlin/Int? // dev.kord.gateway/UnknownDispatchEvent.component3|component3(){}[0]
    final fun copy(kotlin/String? = ..., kotlinx.serialization.json/JsonElement? = ..., kotlin/Int? = ...): dev.kord.gateway/UnknownDispatchEvent // dev.kord.gateway/UnknownDispatchEvent.copy|copy(kotlin.String?;kotlinx.serialization.json.JsonElement?;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/UnknownDispatchEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/UnknownDispatchEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/UnknownDispatchEvent.toString|toString(){}[0]
}

final class dev.kord.gateway/UpdateStatus : dev.kord.gateway/Command { // dev.kord.gateway/UpdateStatus|null[0]
    constructor <init>(kotlinx.datetime/Instant?, kotlin.collections/List<dev.kord.common.entity/DiscordBotActivity>, dev.kord.common.entity/PresenceStatus, kotlin/Boolean) // dev.kord.gateway/UpdateStatus.<init>|<init>(kotlinx.datetime.Instant?;kotlin.collections.List<dev.kord.common.entity.DiscordBotActivity>;dev.kord.common.entity.PresenceStatus;kotlin.Boolean){}[0]

    final val activities // dev.kord.gateway/UpdateStatus.activities|{}activities[0]
        final fun <get-activities>(): kotlin.collections/List<dev.kord.common.entity/DiscordBotActivity> // dev.kord.gateway/UpdateStatus.activities.<get-activities>|<get-activities>(){}[0]
    final val afk // dev.kord.gateway/UpdateStatus.afk|{}afk[0]
        final fun <get-afk>(): kotlin/Boolean // dev.kord.gateway/UpdateStatus.afk.<get-afk>|<get-afk>(){}[0]
    final val since // dev.kord.gateway/UpdateStatus.since|{}since[0]
        final fun <get-since>(): kotlinx.datetime/Instant? // dev.kord.gateway/UpdateStatus.since.<get-since>|<get-since>(){}[0]
    final val status // dev.kord.gateway/UpdateStatus.status|{}status[0]
        final fun <get-status>(): dev.kord.common.entity/PresenceStatus // dev.kord.gateway/UpdateStatus.status.<get-status>|<get-status>(){}[0]

    final fun component1(): kotlinx.datetime/Instant? // dev.kord.gateway/UpdateStatus.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<dev.kord.common.entity/DiscordBotActivity> // dev.kord.gateway/UpdateStatus.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/PresenceStatus // dev.kord.gateway/UpdateStatus.component3|component3(){}[0]
    final fun component4(): kotlin/Boolean // dev.kord.gateway/UpdateStatus.component4|component4(){}[0]
    final fun copy(kotlinx.datetime/Instant? = ..., kotlin.collections/List<dev.kord.common.entity/DiscordBotActivity> = ..., dev.kord.common.entity/PresenceStatus = ..., kotlin/Boolean = ...): dev.kord.gateway/UpdateStatus // dev.kord.gateway/UpdateStatus.copy|copy(kotlinx.datetime.Instant?;kotlin.collections.List<dev.kord.common.entity.DiscordBotActivity>;dev.kord.common.entity.PresenceStatus;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/UpdateStatus.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/UpdateStatus.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/UpdateStatus.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.gateway/UpdateStatus> { // dev.kord.gateway/UpdateStatus.$serializer|null[0]
        final val descriptor // dev.kord.gateway/UpdateStatus.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.gateway/UpdateStatus.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.gateway/UpdateStatus.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.gateway/UpdateStatus // dev.kord.gateway/UpdateStatus.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.gateway/UpdateStatus) // dev.kord.gateway/UpdateStatus.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.gateway.UpdateStatus){}[0]
    }

    final object Companion { // dev.kord.gateway/UpdateStatus.Companion|null[0]
        final val $childSerializers // dev.kord.gateway/UpdateStatus.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.gateway/UpdateStatus> // dev.kord.gateway/UpdateStatus.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.gateway/UpdateVoiceStatus : dev.kord.gateway/Command { // dev.kord.gateway/UpdateVoiceStatus|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake?, kotlin/Boolean, kotlin/Boolean) // dev.kord.gateway/UpdateVoiceStatus.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?;kotlin.Boolean;kotlin.Boolean){}[0]

    final val channelId // dev.kord.gateway/UpdateVoiceStatus.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake? // dev.kord.gateway/UpdateVoiceStatus.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val guildId // dev.kord.gateway/UpdateVoiceStatus.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.gateway/UpdateVoiceStatus.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val selfDeaf // dev.kord.gateway/UpdateVoiceStatus.selfDeaf|{}selfDeaf[0]
        final fun <get-selfDeaf>(): kotlin/Boolean // dev.kord.gateway/UpdateVoiceStatus.selfDeaf.<get-selfDeaf>|<get-selfDeaf>(){}[0]
    final val selfMute // dev.kord.gateway/UpdateVoiceStatus.selfMute|{}selfMute[0]
        final fun <get-selfMute>(): kotlin/Boolean // dev.kord.gateway/UpdateVoiceStatus.selfMute.<get-selfMute>|<get-selfMute>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.gateway/UpdateVoiceStatus.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake? // dev.kord.gateway/UpdateVoiceStatus.component2|component2(){}[0]
    final fun component3(): kotlin/Boolean // dev.kord.gateway/UpdateVoiceStatus.component3|component3(){}[0]
    final fun component4(): kotlin/Boolean // dev.kord.gateway/UpdateVoiceStatus.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake? = ..., kotlin/Boolean = ..., kotlin/Boolean = ...): dev.kord.gateway/UpdateVoiceStatus // dev.kord.gateway/UpdateVoiceStatus.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?;kotlin.Boolean;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/UpdateVoiceStatus.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/UpdateVoiceStatus.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/UpdateVoiceStatus.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.gateway/UpdateVoiceStatus> { // dev.kord.gateway/UpdateVoiceStatus.$serializer|null[0]
        final val descriptor // dev.kord.gateway/UpdateVoiceStatus.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.gateway/UpdateVoiceStatus.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.gateway/UpdateVoiceStatus.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.gateway/UpdateVoiceStatus // dev.kord.gateway/UpdateVoiceStatus.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.gateway/UpdateVoiceStatus) // dev.kord.gateway/UpdateVoiceStatus.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.gateway.UpdateVoiceStatus){}[0]
    }

    final object Companion { // dev.kord.gateway/UpdateVoiceStatus.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.gateway/UpdateVoiceStatus> // dev.kord.gateway/UpdateVoiceStatus.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.gateway/UserUpdate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/UserUpdate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordUser, kotlin/Int?) // dev.kord.gateway/UserUpdate.<init>|<init>(dev.kord.common.entity.DiscordUser;kotlin.Int?){}[0]

    final val sequence // dev.kord.gateway/UserUpdate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/UserUpdate.sequence.<get-sequence>|<get-sequence>(){}[0]
    final val user // dev.kord.gateway/UserUpdate.user|{}user[0]
        final fun <get-user>(): dev.kord.common.entity/DiscordUser // dev.kord.gateway/UserUpdate.user.<get-user>|<get-user>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordUser // dev.kord.gateway/UserUpdate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/UserUpdate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordUser = ..., kotlin/Int? = ...): dev.kord.gateway/UserUpdate // dev.kord.gateway/UserUpdate.copy|copy(dev.kord.common.entity.DiscordUser;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/UserUpdate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/UserUpdate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/UserUpdate.toString|toString(){}[0]
}

final class dev.kord.gateway/VoiceServerUpdate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/VoiceServerUpdate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordVoiceServerUpdateData, kotlin/Int?) // dev.kord.gateway/VoiceServerUpdate.<init>|<init>(dev.kord.common.entity.DiscordVoiceServerUpdateData;kotlin.Int?){}[0]

    final val sequence // dev.kord.gateway/VoiceServerUpdate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/VoiceServerUpdate.sequence.<get-sequence>|<get-sequence>(){}[0]
    final val voiceServerUpdateData // dev.kord.gateway/VoiceServerUpdate.voiceServerUpdateData|{}voiceServerUpdateData[0]
        final fun <get-voiceServerUpdateData>(): dev.kord.common.entity/DiscordVoiceServerUpdateData // dev.kord.gateway/VoiceServerUpdate.voiceServerUpdateData.<get-voiceServerUpdateData>|<get-voiceServerUpdateData>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordVoiceServerUpdateData // dev.kord.gateway/VoiceServerUpdate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/VoiceServerUpdate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordVoiceServerUpdateData = ..., kotlin/Int? = ...): dev.kord.gateway/VoiceServerUpdate // dev.kord.gateway/VoiceServerUpdate.copy|copy(dev.kord.common.entity.DiscordVoiceServerUpdateData;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/VoiceServerUpdate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/VoiceServerUpdate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/VoiceServerUpdate.toString|toString(){}[0]
}

final class dev.kord.gateway/VoiceStateUpdate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/VoiceStateUpdate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordVoiceState, kotlin/Int?) // dev.kord.gateway/VoiceStateUpdate.<init>|<init>(dev.kord.common.entity.DiscordVoiceState;kotlin.Int?){}[0]

    final val sequence // dev.kord.gateway/VoiceStateUpdate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/VoiceStateUpdate.sequence.<get-sequence>|<get-sequence>(){}[0]
    final val voiceState // dev.kord.gateway/VoiceStateUpdate.voiceState|{}voiceState[0]
        final fun <get-voiceState>(): dev.kord.common.entity/DiscordVoiceState // dev.kord.gateway/VoiceStateUpdate.voiceState.<get-voiceState>|<get-voiceState>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordVoiceState // dev.kord.gateway/VoiceStateUpdate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/VoiceStateUpdate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordVoiceState = ..., kotlin/Int? = ...): dev.kord.gateway/VoiceStateUpdate // dev.kord.gateway/VoiceStateUpdate.copy|copy(dev.kord.common.entity.DiscordVoiceState;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/VoiceStateUpdate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/VoiceStateUpdate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/VoiceStateUpdate.toString|toString(){}[0]
}

final class dev.kord.gateway/WebhooksUpdate : dev.kord.gateway/DispatchEvent { // dev.kord.gateway/WebhooksUpdate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordWebhooksUpdateData, kotlin/Int?) // dev.kord.gateway/WebhooksUpdate.<init>|<init>(dev.kord.common.entity.DiscordWebhooksUpdateData;kotlin.Int?){}[0]

    final val sequence // dev.kord.gateway/WebhooksUpdate.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/WebhooksUpdate.sequence.<get-sequence>|<get-sequence>(){}[0]
    final val webhooksUpdateData // dev.kord.gateway/WebhooksUpdate.webhooksUpdateData|{}webhooksUpdateData[0]
        final fun <get-webhooksUpdateData>(): dev.kord.common.entity/DiscordWebhooksUpdateData // dev.kord.gateway/WebhooksUpdate.webhooksUpdateData.<get-webhooksUpdateData>|<get-webhooksUpdateData>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordWebhooksUpdateData // dev.kord.gateway/WebhooksUpdate.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // dev.kord.gateway/WebhooksUpdate.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/DiscordWebhooksUpdateData = ..., kotlin/Int? = ...): dev.kord.gateway/WebhooksUpdate // dev.kord.gateway/WebhooksUpdate.copy|copy(dev.kord.common.entity.DiscordWebhooksUpdateData;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/WebhooksUpdate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/WebhooksUpdate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/WebhooksUpdate.toString|toString(){}[0]
}

sealed class dev.kord.gateway/Close : dev.kord.gateway/Event { // dev.kord.gateway/Close|null[0]
    constructor <init>() // dev.kord.gateway/Close.<init>|<init>(){}[0]

    final class DiscordClose : dev.kord.gateway/Close { // dev.kord.gateway/Close.DiscordClose|null[0]
        constructor <init>(dev.kord.gateway/GatewayCloseCode, kotlin/Boolean) // dev.kord.gateway/Close.DiscordClose.<init>|<init>(dev.kord.gateway.GatewayCloseCode;kotlin.Boolean){}[0]

        final val closeCode // dev.kord.gateway/Close.DiscordClose.closeCode|{}closeCode[0]
            final fun <get-closeCode>(): dev.kord.gateway/GatewayCloseCode // dev.kord.gateway/Close.DiscordClose.closeCode.<get-closeCode>|<get-closeCode>(){}[0]
        final val recoverable // dev.kord.gateway/Close.DiscordClose.recoverable|{}recoverable[0]
            final fun <get-recoverable>(): kotlin/Boolean // dev.kord.gateway/Close.DiscordClose.recoverable.<get-recoverable>|<get-recoverable>(){}[0]

        final fun component1(): dev.kord.gateway/GatewayCloseCode // dev.kord.gateway/Close.DiscordClose.component1|component1(){}[0]
        final fun component2(): kotlin/Boolean // dev.kord.gateway/Close.DiscordClose.component2|component2(){}[0]
        final fun copy(dev.kord.gateway/GatewayCloseCode = ..., kotlin/Boolean = ...): dev.kord.gateway/Close.DiscordClose // dev.kord.gateway/Close.DiscordClose.copy|copy(dev.kord.gateway.GatewayCloseCode;kotlin.Boolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/Close.DiscordClose.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.gateway/Close.DiscordClose.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.gateway/Close.DiscordClose.toString|toString(){}[0]
    }

    final object Detach : dev.kord.gateway/Close // dev.kord.gateway/Close.Detach|null[0]

    final object Reconnecting : dev.kord.gateway/Close // dev.kord.gateway/Close.Reconnecting|null[0]

    final object RetryLimitReached : dev.kord.gateway/Close // dev.kord.gateway/Close.RetryLimitReached|null[0]

    final object SessionReset : dev.kord.gateway/Close // dev.kord.gateway/Close.SessionReset|null[0]

    final object Timeout : dev.kord.gateway/Close // dev.kord.gateway/Close.Timeout|null[0]

    final object UserClose : dev.kord.gateway/Close // dev.kord.gateway/Close.UserClose|null[0]

    final object ZombieConnection : dev.kord.gateway/Close // dev.kord.gateway/Close.ZombieConnection|null[0]
}

sealed class dev.kord.gateway/Command { // dev.kord.gateway/Command|null[0]
    constructor <init>() // dev.kord.gateway/Command.<init>|<init>(){}[0]

    final class Heartbeat : dev.kord.gateway/Command { // dev.kord.gateway/Command.Heartbeat|null[0]
        constructor <init>(kotlin/Int?) // dev.kord.gateway/Command.Heartbeat.<init>|<init>(kotlin.Int?){}[0]

        final val sequenceNumber // dev.kord.gateway/Command.Heartbeat.sequenceNumber|{}sequenceNumber[0]
            final fun <get-sequenceNumber>(): kotlin/Int? // dev.kord.gateway/Command.Heartbeat.sequenceNumber.<get-sequenceNumber>|<get-sequenceNumber>(){}[0]

        final fun component1(): kotlin/Int? // dev.kord.gateway/Command.Heartbeat.component1|component1(){}[0]
        final fun copy(kotlin/Int? = ...): dev.kord.gateway/Command.Heartbeat // dev.kord.gateway/Command.Heartbeat.copy|copy(kotlin.Int?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/Command.Heartbeat.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.gateway/Command.Heartbeat.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.gateway/Command.Heartbeat.toString|toString(){}[0]
    }

    final object SerializationStrategy : kotlinx.serialization/SerializationStrategy<dev.kord.gateway/Command> { // dev.kord.gateway/Command.SerializationStrategy|null[0]
        final val descriptor // dev.kord.gateway/Command.SerializationStrategy.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.gateway/Command.SerializationStrategy.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.gateway/Command) // dev.kord.gateway/Command.SerializationStrategy.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.gateway.Command){}[0]
    }
}

sealed class dev.kord.gateway/DispatchEvent : dev.kord.gateway/Event { // dev.kord.gateway/DispatchEvent|null[0]
    constructor <init>() // dev.kord.gateway/DispatchEvent.<init>|<init>(){}[0]

    abstract val sequence // dev.kord.gateway/DispatchEvent.sequence|{}sequence[0]
        abstract fun <get-sequence>(): kotlin/Int? // dev.kord.gateway/DispatchEvent.sequence.<get-sequence>|<get-sequence>(){}[0]
}

sealed class dev.kord.gateway/Event { // dev.kord.gateway/Event|null[0]
    constructor <init>() // dev.kord.gateway/Event.<init>|<init>(){}[0]

    final object DeserializationStrategy : kotlinx.serialization/DeserializationStrategy<dev.kord.gateway/Event> { // dev.kord.gateway/Event.DeserializationStrategy|null[0]
        final val descriptor // dev.kord.gateway/Event.DeserializationStrategy.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.gateway/Event.DeserializationStrategy.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.gateway/Event // dev.kord.gateway/Event.DeserializationStrategy.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    }
}

sealed class dev.kord.gateway/Intent { // dev.kord.gateway/Intent|null[0]
    constructor <init>(kotlin/Int) // dev.kord.gateway/Intent.<init>|<init>(kotlin.Int){}[0]

    final val code // dev.kord.gateway/Intent.code|{}code[0]
        final fun <get-code>(): dev.kord.common/DiscordBitSet // dev.kord.gateway/Intent.code.<get-code>|<get-code>(){}[0]
    final val shift // dev.kord.gateway/Intent.shift|{}shift[0]
        final fun <get-shift>(): kotlin/Int // dev.kord.gateway/Intent.shift.<get-shift>|<get-shift>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.gateway/Intent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.gateway/Intent.hashCode|hashCode(){}[0]
    final fun plus(dev.kord.gateway/Intent): dev.kord.gateway/Intents // dev.kord.gateway/Intent.plus|plus(dev.kord.gateway.Intent){}[0]
    final fun plus(dev.kord.gateway/Intents): dev.kord.gateway/Intents // dev.kord.gateway/Intent.plus|plus(dev.kord.gateway.Intents){}[0]
    final fun toString(): kotlin/String // dev.kord.gateway/Intent.toString|toString(){}[0]

    final class Unknown : dev.kord.gateway/Intent // dev.kord.gateway/Intent.Unknown|null[0]

    final object AutoModerationConfiguration : dev.kord.gateway/Intent // dev.kord.gateway/Intent.AutoModerationConfiguration|null[0]

    final object AutoModerationExecution : dev.kord.gateway/Intent // dev.kord.gateway/Intent.AutoModerationExecution|null[0]

    final object Companion { // dev.kord.gateway/Intent.Companion|null[0]
        final val entries // dev.kord.gateway/Intent.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.gateway/Intent> // dev.kord.gateway/Intent.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun fromShift(kotlin/Int): dev.kord.gateway/Intent // dev.kord.gateway/Intent.Companion.fromShift|fromShift(kotlin.Int){}[0]
    }

    final object DirectMessageTyping : dev.kord.gateway/Intent // dev.kord.gateway/Intent.DirectMessageTyping|null[0]

    final object DirectMessages : dev.kord.gateway/Intent // dev.kord.gateway/Intent.DirectMessages|null[0]

    final object DirectMessagesReactions : dev.kord.gateway/Intent // dev.kord.gateway/Intent.DirectMessagesReactions|null[0]

    final object GuildEmojis : dev.kord.gateway/Intent // dev.kord.gateway/Intent.GuildEmojis|null[0]

    final object GuildIntegrations : dev.kord.gateway/Intent // dev.kord.gateway/Intent.GuildIntegrations|null[0]

    final object GuildInvites : dev.kord.gateway/Intent // dev.kord.gateway/Intent.GuildInvites|null[0]

    final object GuildMembers : dev.kord.gateway/Intent // dev.kord.gateway/Intent.GuildMembers|null[0]

    final object GuildMessageReactions : dev.kord.gateway/Intent // dev.kord.gateway/Intent.GuildMessageReactions|null[0]

    final object GuildMessageTyping : dev.kord.gateway/Intent // dev.kord.gateway/Intent.GuildMessageTyping|null[0]

    final object GuildMessages : dev.kord.gateway/Intent // dev.kord.gateway/Intent.GuildMessages|null[0]

    final object GuildModeration : dev.kord.gateway/Intent // dev.kord.gateway/Intent.GuildModeration|null[0]

    final object GuildPresences : dev.kord.gateway/Intent // dev.kord.gateway/Intent.GuildPresences|null[0]

    final object GuildScheduledEvents : dev.kord.gateway/Intent // dev.kord.gateway/Intent.GuildScheduledEvents|null[0]

    final object GuildVoiceStates : dev.kord.gateway/Intent // dev.kord.gateway/Intent.GuildVoiceStates|null[0]

    final object GuildWebhooks : dev.kord.gateway/Intent // dev.kord.gateway/Intent.GuildWebhooks|null[0]

    final object Guilds : dev.kord.gateway/Intent // dev.kord.gateway/Intent.Guilds|null[0]

    final object MessageContent : dev.kord.gateway/Intent // dev.kord.gateway/Intent.MessageContent|null[0]
}

final object dev.kord.gateway/HeartbeatACK : dev.kord.gateway/Event // dev.kord.gateway/HeartbeatACK|null[0]

final object dev.kord.gateway/Reconnect : dev.kord.gateway/Event // dev.kord.gateway/Reconnect|null[0]

final val dev.kord.gateway/ALL // dev.kord.gateway/ALL|@dev.kord.gateway.Intents.Companion{}ALL[0]
    final fun (dev.kord.gateway/Intents.Companion).<get-ALL>(): dev.kord.gateway/Intents // dev.kord.gateway/ALL.<get-ALL>|<get-ALL>@dev.kord.gateway.Intents.Companion(){}[0]
final val dev.kord.gateway/NONE // dev.kord.gateway/NONE|@dev.kord.gateway.Intents.Companion{}NONE[0]
    final fun (dev.kord.gateway/Intents.Companion).<get-NONE>(): dev.kord.gateway/Intents // dev.kord.gateway/NONE.<get-NONE>|<get-NONE>@dev.kord.gateway.Intents.Companion(){}[0]
final val dev.kord.gateway/NON_PRIVILEGED // dev.kord.gateway/NON_PRIVILEGED|@dev.kord.gateway.Intents.Companion{}NON_PRIVILEGED[0]
    final fun (dev.kord.gateway/Intents.Companion).<get-NON_PRIVILEGED>(): dev.kord.gateway/Intents // dev.kord.gateway/NON_PRIVILEGED.<get-NON_PRIVILEGED>|<get-NON_PRIVILEGED>@dev.kord.gateway.Intents.Companion(){}[0]
final val dev.kord.gateway/PRIVILEGED // dev.kord.gateway/PRIVILEGED|@dev.kord.gateway.Intents.Companion{}PRIVILEGED[0]
    final fun (dev.kord.gateway/Intents.Companion).<get-PRIVILEGED>(): dev.kord.gateway/Intents // dev.kord.gateway/PRIVILEGED.<get-PRIVILEGED>|<get-PRIVILEGED>@dev.kord.gateway.Intents.Companion(){}[0]
final val dev.kord.gateway/gatewayOnLogger // dev.kord.gateway/gatewayOnLogger|{}gatewayOnLogger[0]
    final fun <get-gatewayOnLogger>(): mu/KLogger // dev.kord.gateway/gatewayOnLogger.<get-gatewayOnLogger>|<get-gatewayOnLogger>(){}[0]

final fun (dev.kord.gateway/Gateway).dev.kord.gateway/requestGuildMembers(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.gateway.builder/RequestGuildMembersBuilder, kotlin/Unit> = ...): kotlinx.coroutines.flow/Flow<dev.kord.gateway/GuildMembersChunk> // dev.kord.gateway/requestGuildMembers|requestGuildMembers@dev.kord.gateway.Gateway(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.gateway.builder.RequestGuildMembersBuilder,kotlin.Unit>){}[0]
final fun (dev.kord.gateway/Gateway).dev.kord.gateway/requestGuildMembers(dev.kord.gateway/RequestGuildMembers): kotlinx.coroutines.flow/Flow<dev.kord.gateway/GuildMembersChunk> // dev.kord.gateway/requestGuildMembers|requestGuildMembers@dev.kord.gateway.Gateway(dev.kord.gateway.RequestGuildMembers){}[0]
final fun (mu/KLogger).dev.kord.gateway/error(kotlin/Throwable) // dev.kord.gateway/error|error@mu.KLogger(kotlin.Throwable){}[0]
final fun dev.kord.gateway.ratelimit/IdentifyRateLimiter(kotlin/Int, kotlinx.coroutines/CoroutineDispatcher = ...): dev.kord.gateway.ratelimit/IdentifyRateLimiter // dev.kord.gateway.ratelimit/IdentifyRateLimiter|IdentifyRateLimiter(kotlin.Int;kotlinx.coroutines.CoroutineDispatcher){}[0]
final fun dev.kord.gateway/Intents(kotlin.collections/Iterable<dev.kord.gateway/Intent>): dev.kord.gateway/Intents // dev.kord.gateway/Intents|Intents(kotlin.collections.Iterable<dev.kord.gateway.Intent>){}[0]
final fun dev.kord.gateway/Intents(kotlin.collections/Iterable<dev.kord.gateway/Intents>): dev.kord.gateway/Intents // dev.kord.gateway/Intents|Intents(kotlin.collections.Iterable<dev.kord.gateway.Intents>){}[0]
final fun dev.kord.gateway/Intents(kotlin/Array<out dev.kord.gateway/Intent>...): dev.kord.gateway/Intents // dev.kord.gateway/Intents|Intents(kotlin.Array<out|dev.kord.gateway.Intent>...){}[0]
final fun dev.kord.gateway/Intents(kotlin/Array<out dev.kord.gateway/Intents>...): dev.kord.gateway/Intents // dev.kord.gateway/Intents|Intents(kotlin.Array<out|dev.kord.gateway.Intents>...){}[0]
final fun dev.kord.gateway/logCaughtThrowable(kotlin/Throwable) // dev.kord.gateway/logCaughtThrowable|logCaughtThrowable(kotlin.Throwable){}[0]
final inline fun <#A: reified dev.kord.gateway/Event> (dev.kord.gateway/Gateway).dev.kord.gateway/on(kotlinx.coroutines/CoroutineScope = ..., crossinline kotlin.coroutines/SuspendFunction1<#A, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.gateway/on|on@dev.kord.gateway.Gateway(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<0:0,kotlin.Unit>){0§<dev.kord.gateway.Event>}[0]
final inline fun dev.kord.gateway/DefaultGateway(kotlin/Function1<dev.kord.gateway/DefaultGatewayBuilder, kotlin/Unit> = ...): dev.kord.gateway/DefaultGateway // dev.kord.gateway/DefaultGateway|DefaultGateway(kotlin.Function1<dev.kord.gateway.DefaultGatewayBuilder,kotlin.Unit>){}[0]
final inline fun dev.kord.gateway/Intents(kotlin/Function1<dev.kord.gateway/Intents.Builder, kotlin/Unit> = ...): dev.kord.gateway/Intents // dev.kord.gateway/Intents|Intents(kotlin.Function1<dev.kord.gateway.Intents.Builder,kotlin.Unit>){}[0]
final inline fun dev.kord.gateway/Intents0(kotlin/Function1<dev.kord.gateway/Intents.Builder, kotlin/Unit> = ...): dev.kord.gateway/Intents // dev.kord.gateway/Intents0|Intents0(kotlin.Function1<dev.kord.gateway.Intents.Builder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.gateway/Gateway).dev.kord.gateway/editPresence(kotlin/Function1<dev.kord.gateway.builder/PresenceBuilder, kotlin/Unit>) // dev.kord.gateway/editPresence|editPresence@dev.kord.gateway.Gateway(kotlin.Function1<dev.kord.gateway.builder.PresenceBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.gateway/Gateway).dev.kord.gateway/start(kotlin/String, kotlin/Function1<dev.kord.gateway/GatewayConfigurationBuilder, kotlin/Unit> = ...) // dev.kord.gateway/start|start@dev.kord.gateway.Gateway(kotlin.String;kotlin.Function1<dev.kord.gateway.GatewayConfigurationBuilder,kotlin.Unit>){}[0]
