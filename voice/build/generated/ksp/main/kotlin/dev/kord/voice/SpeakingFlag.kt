// THIS FILE IS AUTO-GENERATED BY KordEnumProcessor, DO NOT EDIT!
@file:Suppress(names = arrayOf("RedundantVisibilityModifier", "IncorrectFormatting",
                "ReplaceArrayOfWithLiteral", "SpellCheckingInspection", "GrazieInspection"))

package dev.kord.voice

import dev.kord.common.`annotation`.KordUnsafe
import dev.kord.common.entity.flags.BitFlags
import dev.kord.common.entity.flags.IntBitFlag
import dev.kord.common.entity.flags.IntBitFlags
import kotlin.LazyThreadSafetyMode.PUBLICATION
import kotlinx.serialization.Serializable
import kotlinx.serialization.builtins.serializer
import kotlinx.serialization.descriptors.PrimitiveKind

/**
 * Convenience container of multiple [SpeakingFlags][SpeakingFlag] which can be combined into one.
 *
 * ## Creating a collection of message flags
 * You can create an [SpeakingFlags] object using the following methods
 * ```kotlin
 * // From flags
 * val flags1 = SpeakingFlags(SpeakingFlag.Microphone, SpeakingFlag.Soundshare)
 * // From an iterable
 * val flags2 = SpeakingFlags(listOf(SpeakingFlag.Microphone, SpeakingFlag.Soundshare))
 * // Using a builder
 * val flags3 = SpeakingFlags {
 *  +SpeakingFlag.Microphone
 *  -SpeakingFlag.Soundshare
 * }
 * ```
 *
 * ## Modifying existing flags
 * You can crate a modified copy of a [SpeakingFlags] instance using the
 * [dev.kord.common.entity.flags.copy] method
 *
 * ```kotlin
 * flags.copy {
 *  +SpeakingFlag.Microphone
 * }
 * ```
 *
 * ## Mathematical operators
 * All [SpeakingFlags] objects can use +/- operators
 *
 * ```kotlin
 * val flags = SpeakingFlags(SpeakingFlag.Microphone)
 * val flags2 = flags + SpeakingFlag.Soundshare
 * val otherFlags = flags - SpeakingFlag.Soundshare
 * val flags3 = flags + otherFlags
 * ```
 *
 * ## Checking for a flag
 * You can use the [contains] operator to check whether a collection contains a specific flag
 * ```kotlin
 * val hasFlag = SpeakingFlag.Microphone in obj.flags
 * val hasFlags = SpeakingFlag(SpeakingFlag.Soundshare, SpeakingFlag.Soundshare) in obj.flags
 * ```
 *
 * ## Unknown flag
 *
 * Whenever a newly added flag has not been added to Kord yet it will get deserialized as
 * [SpeakingFlag.Unknown].
 * You can also use that to check for an yet unsupported flag
 * ```kotlin
 * val hasFlags = SpeakingFlag.Unknown(1 shl 69) in obj.flags
 * ```
 * @see SpeakingFlag
 * @see SpeakingFlags.Builder
 * @property code numeric value of all [SpeakingFlags]s
 */
@Serializable(with = SpeakingFlags.Serializer::class)
public class SpeakingFlags(
    code: Int = 0,
) : IntBitFlags<SpeakingFlag, SpeakingFlags, SpeakingFlags.Builder>(SpeakingFlag.entries, code) {
    protected override val name: String = "SpeakingFlags"

    public override fun equals(other: Any?): Boolean = this === other ||
            (other is SpeakingFlags && this.code == other.code)

    public override fun hashCode(): Int = code.hashCode()

    public override fun buildUpon(): Builder = Builder(code)

    protected override fun Implementation(flags: Int): SpeakingFlags = SpeakingFlags(flags)

    public class Builder(
        code: Int = 0,
    ) : IntBitFlags.Builder<SpeakingFlag, SpeakingFlags>(code) {
        public override fun flags(): SpeakingFlags = SpeakingFlags(code)
    }

    public class Serializer :
            BitFlags.Serializer<Int, SpeakingFlag, SpeakingFlags>(PrimitiveKind.INT, "code",
            Int.serializer()) {
        public override fun Implementation(code: Int): SpeakingFlags = SpeakingFlags(code)
    }

    public companion object : BitFlags.Companion<Int, SpeakingFlag, SpeakingFlags, Builder>() {
        public override fun Builder(): Builder = SpeakingFlags.Builder()
    }
}

public sealed class SpeakingFlag(
    /**
     * The raw code used by Discord.
     */
    public override val code: Int,
) : IntBitFlag {
    public final override fun equals(other: Any?): Boolean = this === other ||
            (other is SpeakingFlag && this.code == other.code)

    public final override fun hashCode(): Int = code.hashCode()

    public final override fun toString(): String =
            "SpeakingFlag.${this::class.simpleName}(code=$code)"

    /**
     * An unknown [SpeakingFlag].
     *
     * This is used as a fallback for [SpeakingFlag]s that haven't been added to Kord yet.
     */
    public class Unknown @KordUnsafe constructor(
        code: Int,
    ) : SpeakingFlag(code)

    public object Microphone : SpeakingFlag(1)

    public object Soundshare : SpeakingFlag(2)

    public object Priority : SpeakingFlag(4)

    public companion object {
        /**
         * A [List] of all known [SpeakingFlag]s.
         */
        public val entries: List<SpeakingFlag> by lazy(mode = PUBLICATION) {
            listOf(
                Microphone,
                Soundshare,
                Priority,
            )
        }

    }
}
