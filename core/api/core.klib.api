// Klib ABI Dump
// Targets: [js]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <kord:core>
abstract interface <#A: dev.kord.core.supplier/EntitySupplier> dev.kord.core.supplier/EntitySupplyStrategy { // dev.kord.core.supplier/EntitySupplyStrategy|null[0]
    abstract fun supply(dev.kord.core/Kord): #A // dev.kord.core.supplier/EntitySupplyStrategy.supply|supply(dev.kord.core.Kord){}[0]

    final object Companion { // dev.kord.core.supplier/EntitySupplyStrategy.Companion|null[0]
        final val cache // dev.kord.core.supplier/EntitySupplyStrategy.Companion.cache|{}cache[0]
            final fun <get-cache>(): dev.kord.core.supplier/EntitySupplyStrategy<dev.kord.core.supplier/CacheEntitySupplier> // dev.kord.core.supplier/EntitySupplyStrategy.Companion.cache.<get-cache>|<get-cache>(){}[0]
        final val cacheWithCachingRestFallback // dev.kord.core.supplier/EntitySupplyStrategy.Companion.cacheWithCachingRestFallback|{}cacheWithCachingRestFallback[0]
            final fun <get-cacheWithCachingRestFallback>(): dev.kord.core.supplier/EntitySupplyStrategy<dev.kord.core.supplier/EntitySupplier> // dev.kord.core.supplier/EntitySupplyStrategy.Companion.cacheWithCachingRestFallback.<get-cacheWithCachingRestFallback>|<get-cacheWithCachingRestFallback>(){}[0]
        final val cacheWithRestFallback // dev.kord.core.supplier/EntitySupplyStrategy.Companion.cacheWithRestFallback|{}cacheWithRestFallback[0]
            final fun <get-cacheWithRestFallback>(): dev.kord.core.supplier/EntitySupplyStrategy<dev.kord.core.supplier/EntitySupplier> // dev.kord.core.supplier/EntitySupplyStrategy.Companion.cacheWithRestFallback.<get-cacheWithRestFallback>|<get-cacheWithRestFallback>(){}[0]
        final val cachingRest // dev.kord.core.supplier/EntitySupplyStrategy.Companion.cachingRest|{}cachingRest[0]
            final fun <get-cachingRest>(): dev.kord.core.supplier/EntitySupplyStrategy<dev.kord.core.supplier/EntitySupplier> // dev.kord.core.supplier/EntitySupplyStrategy.Companion.cachingRest.<get-cachingRest>|<get-cachingRest>(){}[0]
        final val rest // dev.kord.core.supplier/EntitySupplyStrategy.Companion.rest|{}rest[0]
            final fun <get-rest>(): dev.kord.core.supplier/EntitySupplyStrategy<dev.kord.core.supplier/RestEntitySupplier> // dev.kord.core.supplier/EntitySupplyStrategy.Companion.rest.<get-rest>|<get-rest>(){}[0]

        final fun <#A2: dev.kord.core.supplier/EntitySupplier> invoke(kotlin/Function1<dev.kord.core/Kord, #A2>): dev.kord.core.supplier/EntitySupplyStrategy<#A2> // dev.kord.core.supplier/EntitySupplyStrategy.Companion.invoke|invoke(kotlin.Function1<dev.kord.core.Kord,0:0>){0ยง<dev.kord.core.supplier.EntitySupplier>}[0]
    }
}

abstract interface dev.kord.core.behavior.automoderation/KeywordAutoModerationRuleBehavior : dev.kord.core.behavior.automoderation/TypedAutoModerationRuleBehavior { // dev.kord.core.behavior.automoderation/KeywordAutoModerationRuleBehavior|null[0]
    open val triggerType // dev.kord.core.behavior.automoderation/KeywordAutoModerationRuleBehavior.triggerType|{}triggerType[0]
        open fun <get-triggerType>(): dev.kord.common.entity/AutoModerationRuleTriggerType.Keyword // dev.kord.core.behavior.automoderation/KeywordAutoModerationRuleBehavior.triggerType.<get-triggerType>|<get-triggerType>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.automoderation/KeywordAutoModerationRuleBehavior // dev.kord.core.behavior.automoderation/KeywordAutoModerationRuleBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun asAutoModerationRule(): dev.kord.core.entity.automoderation/KeywordAutoModerationRule // dev.kord.core.behavior.automoderation/KeywordAutoModerationRuleBehavior.asAutoModerationRule|asAutoModerationRule(){}[0]
    open suspend fun asAutoModerationRuleOrNull(): dev.kord.core.entity.automoderation/KeywordAutoModerationRule? // dev.kord.core.behavior.automoderation/KeywordAutoModerationRuleBehavior.asAutoModerationRuleOrNull|asAutoModerationRuleOrNull(){}[0]
}

abstract interface dev.kord.core.behavior.automoderation/KeywordPresetAutoModerationRuleBehavior : dev.kord.core.behavior.automoderation/TypedAutoModerationRuleBehavior { // dev.kord.core.behavior.automoderation/KeywordPresetAutoModerationRuleBehavior|null[0]
    open val triggerType // dev.kord.core.behavior.automoderation/KeywordPresetAutoModerationRuleBehavior.triggerType|{}triggerType[0]
        open fun <get-triggerType>(): dev.kord.common.entity/AutoModerationRuleTriggerType.KeywordPreset // dev.kord.core.behavior.automoderation/KeywordPresetAutoModerationRuleBehavior.triggerType.<get-triggerType>|<get-triggerType>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.automoderation/KeywordPresetAutoModerationRuleBehavior // dev.kord.core.behavior.automoderation/KeywordPresetAutoModerationRuleBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun asAutoModerationRule(): dev.kord.core.entity.automoderation/KeywordPresetAutoModerationRule // dev.kord.core.behavior.automoderation/KeywordPresetAutoModerationRuleBehavior.asAutoModerationRule|asAutoModerationRule(){}[0]
    open suspend fun asAutoModerationRuleOrNull(): dev.kord.core.entity.automoderation/KeywordPresetAutoModerationRule? // dev.kord.core.behavior.automoderation/KeywordPresetAutoModerationRuleBehavior.asAutoModerationRuleOrNull|asAutoModerationRuleOrNull(){}[0]
}

abstract interface dev.kord.core.behavior.automoderation/MentionSpamAutoModerationRuleBehavior : dev.kord.core.behavior.automoderation/TypedAutoModerationRuleBehavior { // dev.kord.core.behavior.automoderation/MentionSpamAutoModerationRuleBehavior|null[0]
    open val triggerType // dev.kord.core.behavior.automoderation/MentionSpamAutoModerationRuleBehavior.triggerType|{}triggerType[0]
        open fun <get-triggerType>(): dev.kord.common.entity/AutoModerationRuleTriggerType.MentionSpam // dev.kord.core.behavior.automoderation/MentionSpamAutoModerationRuleBehavior.triggerType.<get-triggerType>|<get-triggerType>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.automoderation/MentionSpamAutoModerationRuleBehavior // dev.kord.core.behavior.automoderation/MentionSpamAutoModerationRuleBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun asAutoModerationRule(): dev.kord.core.entity.automoderation/MentionSpamAutoModerationRule // dev.kord.core.behavior.automoderation/MentionSpamAutoModerationRuleBehavior.asAutoModerationRule|asAutoModerationRule(){}[0]
    open suspend fun asAutoModerationRuleOrNull(): dev.kord.core.entity.automoderation/MentionSpamAutoModerationRule? // dev.kord.core.behavior.automoderation/MentionSpamAutoModerationRuleBehavior.asAutoModerationRuleOrNull|asAutoModerationRuleOrNull(){}[0]
}

abstract interface dev.kord.core.behavior.automoderation/SpamAutoModerationRuleBehavior : dev.kord.core.behavior.automoderation/TypedAutoModerationRuleBehavior { // dev.kord.core.behavior.automoderation/SpamAutoModerationRuleBehavior|null[0]
    open val triggerType // dev.kord.core.behavior.automoderation/SpamAutoModerationRuleBehavior.triggerType|{}triggerType[0]
        open fun <get-triggerType>(): dev.kord.common.entity/AutoModerationRuleTriggerType.Spam // dev.kord.core.behavior.automoderation/SpamAutoModerationRuleBehavior.triggerType.<get-triggerType>|<get-triggerType>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.automoderation/SpamAutoModerationRuleBehavior // dev.kord.core.behavior.automoderation/SpamAutoModerationRuleBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun asAutoModerationRule(): dev.kord.core.entity.automoderation/SpamAutoModerationRule // dev.kord.core.behavior.automoderation/SpamAutoModerationRuleBehavior.asAutoModerationRule|asAutoModerationRule(){}[0]
    open suspend fun asAutoModerationRuleOrNull(): dev.kord.core.entity.automoderation/SpamAutoModerationRule? // dev.kord.core.behavior.automoderation/SpamAutoModerationRuleBehavior.asAutoModerationRuleOrNull|asAutoModerationRuleOrNull(){}[0]
}

abstract interface dev.kord.core.behavior.automoderation/TypedAutoModerationRuleBehavior : dev.kord.core.behavior.automoderation/AutoModerationRuleBehavior { // dev.kord.core.behavior.automoderation/TypedAutoModerationRuleBehavior|null[0]
    abstract val triggerType // dev.kord.core.behavior.automoderation/TypedAutoModerationRuleBehavior.triggerType|{}triggerType[0]
        abstract fun <get-triggerType>(): dev.kord.common.entity/AutoModerationRuleTriggerType // dev.kord.core.behavior.automoderation/TypedAutoModerationRuleBehavior.triggerType.<get-triggerType>|<get-triggerType>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.automoderation/TypedAutoModerationRuleBehavior // dev.kord.core.behavior.automoderation/TypedAutoModerationRuleBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

abstract interface dev.kord.core.behavior.channel.threads/PrivateThreadParentChannelBehavior : dev.kord.core.behavior.channel.threads/ThreadParentChannelBehavior { // dev.kord.core.behavior.channel.threads/PrivateThreadParentChannelBehavior|null[0]
    open fun getJoinedPrivateArchivedThreads(dev.kord.common.entity/Snowflake? = ..., kotlin/Int? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadChannel> // dev.kord.core.behavior.channel.threads/PrivateThreadParentChannelBehavior.getJoinedPrivateArchivedThreads|getJoinedPrivateArchivedThreads(dev.kord.common.entity.Snowflake?;kotlin.Int?){}[0]
    open fun getPrivateArchivedThreads(kotlinx.datetime/Instant? = ..., kotlin/Int? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadChannel> // dev.kord.core.behavior.channel.threads/PrivateThreadParentChannelBehavior.getPrivateArchivedThreads|getPrivateArchivedThreads(kotlinx.datetime.Instant?;kotlin.Int?){}[0]
}

abstract interface dev.kord.core.behavior.channel.threads/ThreadChannelBehavior : dev.kord.core.behavior.channel/GuildMessageChannelBehavior { // dev.kord.core.behavior.channel.threads/ThreadChannelBehavior|null[0]
    abstract val parentId // dev.kord.core.behavior.channel.threads/ThreadChannelBehavior.parentId|{}parentId[0]
        abstract fun <get-parentId>(): dev.kord.common.entity/Snowflake // dev.kord.core.behavior.channel.threads/ThreadChannelBehavior.parentId.<get-parentId>|<get-parentId>(){}[0]
    open val members // dev.kord.core.behavior.channel.threads/ThreadChannelBehavior.members|{}members[0]
        open fun <get-members>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadMember> // dev.kord.core.behavior.channel.threads/ThreadChannelBehavior.members.<get-members>|<get-members>(){}[0]
    open val parent // dev.kord.core.behavior.channel.threads/ThreadChannelBehavior.parent|{}parent[0]
        open fun <get-parent>(): dev.kord.core.behavior.channel.threads/ThreadParentChannelBehavior // dev.kord.core.behavior.channel.threads/ThreadChannelBehavior.parent.<get-parent>|<get-parent>(){}[0]

    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.channel.threads/ThreadChannelBehavior // dev.kord.core.behavior.channel.threads/ThreadChannelBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun addUser(dev.kord.common.entity/Snowflake) // dev.kord.core.behavior.channel.threads/ThreadChannelBehavior.addUser|addUser(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun asChannel(): dev.kord.core.entity.channel.thread/ThreadChannel // dev.kord.core.behavior.channel.threads/ThreadChannelBehavior.asChannel|asChannel(){}[0]
    open suspend fun asChannelOrNull(): dev.kord.core.entity.channel.thread/ThreadChannel? // dev.kord.core.behavior.channel.threads/ThreadChannelBehavior.asChannelOrNull|asChannelOrNull(){}[0]
    open suspend fun delete(kotlin/String?) // dev.kord.core.behavior.channel.threads/ThreadChannelBehavior.delete|delete(kotlin.String?){}[0]
    open suspend fun getParent(): dev.kord.core.entity.channel/ThreadParentChannel // dev.kord.core.behavior.channel.threads/ThreadChannelBehavior.getParent|getParent(){}[0]
    open suspend fun getParentOrNull(): dev.kord.core.entity.channel/ThreadParentChannel? // dev.kord.core.behavior.channel.threads/ThreadChannelBehavior.getParentOrNull|getParentOrNull(){}[0]
    open suspend fun join() // dev.kord.core.behavior.channel.threads/ThreadChannelBehavior.join|join(){}[0]
    open suspend fun leave() // dev.kord.core.behavior.channel.threads/ThreadChannelBehavior.leave|leave(){}[0]
    open suspend fun removeUser(dev.kord.common.entity/Snowflake) // dev.kord.core.behavior.channel.threads/ThreadChannelBehavior.removeUser|removeUser(dev.kord.common.entity.Snowflake){}[0]
}

abstract interface dev.kord.core.behavior.channel.threads/ThreadOnlyChannelBehavior : dev.kord.core.behavior.channel.threads/ThreadParentChannelBehavior { // dev.kord.core.behavior.channel.threads/ThreadOnlyChannelBehavior|null[0]
    open val activeThreads // dev.kord.core.behavior.channel.threads/ThreadOnlyChannelBehavior.activeThreads|{}activeThreads[0]
        open fun <get-activeThreads>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/TextChannelThread> // dev.kord.core.behavior.channel.threads/ThreadOnlyChannelBehavior.activeThreads.<get-activeThreads>|<get-activeThreads>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.channel.threads/ThreadOnlyChannelBehavior // dev.kord.core.behavior.channel.threads/ThreadOnlyChannelBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open fun getPublicArchivedThreads(kotlinx.datetime/Instant?, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/TextChannelThread> // dev.kord.core.behavior.channel.threads/ThreadOnlyChannelBehavior.getPublicArchivedThreads|getPublicArchivedThreads(kotlinx.datetime.Instant?;kotlin.Int?){}[0]
    open suspend fun asChannel(): dev.kord.core.entity.channel/ThreadOnlyChannel // dev.kord.core.behavior.channel.threads/ThreadOnlyChannelBehavior.asChannel|asChannel(){}[0]
    open suspend fun asChannelOrNull(): dev.kord.core.entity.channel/ThreadOnlyChannel? // dev.kord.core.behavior.channel.threads/ThreadOnlyChannelBehavior.asChannelOrNull|asChannelOrNull(){}[0]
    open suspend fun fetchChannel(): dev.kord.core.entity.channel/ThreadOnlyChannel // dev.kord.core.behavior.channel.threads/ThreadOnlyChannelBehavior.fetchChannel|fetchChannel(){}[0]
    open suspend fun fetchChannelOrNull(): dev.kord.core.entity.channel/ThreadOnlyChannel? // dev.kord.core.behavior.channel.threads/ThreadOnlyChannelBehavior.fetchChannelOrNull|fetchChannelOrNull(){}[0]
    open suspend fun startPublicThread(kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel.thread/StartForumThreadBuilder, kotlin/Unit>): dev.kord.core.entity.channel.thread/TextChannelThread // dev.kord.core.behavior.channel.threads/ThreadOnlyChannelBehavior.startPublicThread|startPublicThread(kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.thread.StartForumThreadBuilder,kotlin.Unit>){}[0]
}

abstract interface dev.kord.core.behavior.channel.threads/ThreadParentChannelBehavior : dev.kord.core.behavior.channel/CategorizableChannelBehavior { // dev.kord.core.behavior.channel.threads/ThreadParentChannelBehavior|null[0]
    open val activeThreads // dev.kord.core.behavior.channel.threads/ThreadParentChannelBehavior.activeThreads|{}activeThreads[0]
        open fun <get-activeThreads>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadChannel> // dev.kord.core.behavior.channel.threads/ThreadParentChannelBehavior.activeThreads.<get-activeThreads>|<get-activeThreads>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.channel.threads/ThreadParentChannelBehavior // dev.kord.core.behavior.channel.threads/ThreadParentChannelBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open fun getPublicArchivedThreads(kotlinx.datetime/Instant? = ..., kotlin/Int? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadChannel> // dev.kord.core.behavior.channel.threads/ThreadParentChannelBehavior.getPublicArchivedThreads|getPublicArchivedThreads(kotlinx.datetime.Instant?;kotlin.Int?){}[0]
    open suspend fun asChannel(): dev.kord.core.entity.channel/ThreadParentChannel // dev.kord.core.behavior.channel.threads/ThreadParentChannelBehavior.asChannel|asChannel(){}[0]
    open suspend fun asChannelOrNull(): dev.kord.core.entity.channel/ThreadParentChannel? // dev.kord.core.behavior.channel.threads/ThreadParentChannelBehavior.asChannelOrNull|asChannelOrNull(){}[0]
    open suspend fun fetchChannel(): dev.kord.core.entity.channel/ThreadParentChannel // dev.kord.core.behavior.channel.threads/ThreadParentChannelBehavior.fetchChannel|fetchChannel(){}[0]
    open suspend fun fetchChannelOrNull(): dev.kord.core.entity.channel/ThreadParentChannel? // dev.kord.core.behavior.channel.threads/ThreadParentChannelBehavior.fetchChannelOrNull|fetchChannelOrNull(){}[0]
}

abstract interface dev.kord.core.behavior.channel/BaseVoiceChannelBehavior : dev.kord.core.behavior.channel/CategorizableChannelBehavior { // dev.kord.core.behavior.channel/BaseVoiceChannelBehavior|null[0]
    open val voiceStates // dev.kord.core.behavior.channel/BaseVoiceChannelBehavior.voiceStates|{}voiceStates[0]
        open fun <get-voiceStates>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/VoiceState> // dev.kord.core.behavior.channel/BaseVoiceChannelBehavior.voiceStates.<get-voiceStates>|<get-voiceStates>(){}[0]
}

abstract interface dev.kord.core.behavior.channel/CategorizableChannelBehavior : dev.kord.core.behavior.channel/TopGuildChannelBehavior { // dev.kord.core.behavior.channel/CategorizableChannelBehavior|null[0]
    open val invites // dev.kord.core.behavior.channel/CategorizableChannelBehavior.invites|{}invites[0]
        open fun <get-invites>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/InviteWithMetadata> // dev.kord.core.behavior.channel/CategorizableChannelBehavior.invites.<get-invites>|<get-invites>(){}[0]
    open val webhooks // dev.kord.core.behavior.channel/CategorizableChannelBehavior.webhooks|{}webhooks[0]
        open fun <get-webhooks>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Webhook> // dev.kord.core.behavior.channel/CategorizableChannelBehavior.webhooks.<get-webhooks>|<get-webhooks>(){}[0]

    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.channel/CategorizableChannelBehavior // dev.kord.core.behavior.channel/CategorizableChannelBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun asChannel(): dev.kord.core.entity.channel/CategorizableChannel // dev.kord.core.behavior.channel/CategorizableChannelBehavior.asChannel|asChannel(){}[0]
    open suspend fun asChannelOrNull(): dev.kord.core.entity.channel/CategorizableChannel? // dev.kord.core.behavior.channel/CategorizableChannelBehavior.asChannelOrNull|asChannelOrNull(){}[0]
    open suspend fun fetchChannel(): dev.kord.core.entity.channel/CategorizableChannel // dev.kord.core.behavior.channel/CategorizableChannelBehavior.fetchChannel|fetchChannel(){}[0]
    open suspend fun fetchChannelOrNull(): dev.kord.core.entity.channel/CategorizableChannel? // dev.kord.core.behavior.channel/CategorizableChannelBehavior.fetchChannelOrNull|fetchChannelOrNull(){}[0]
}

abstract interface dev.kord.core.behavior.channel/CategoryBehavior : dev.kord.core.behavior.channel/TopGuildChannelBehavior { // dev.kord.core.behavior.channel/CategoryBehavior|null[0]
    open val channels // dev.kord.core.behavior.channel/CategoryBehavior.channels|{}channels[0]
        open fun <get-channels>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel/CategorizableChannel> // dev.kord.core.behavior.channel/CategoryBehavior.channels.<get-channels>|<get-channels>(){}[0]

    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.channel/CategoryBehavior // dev.kord.core.behavior.channel/CategoryBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun asChannel(): dev.kord.core.entity.channel/Category // dev.kord.core.behavior.channel/CategoryBehavior.asChannel|asChannel(){}[0]
    open suspend fun asChannelOrNull(): dev.kord.core.entity.channel/Category? // dev.kord.core.behavior.channel/CategoryBehavior.asChannelOrNull|asChannelOrNull(){}[0]
    open suspend fun fetchChannel(): dev.kord.core.entity.channel/Category // dev.kord.core.behavior.channel/CategoryBehavior.fetchChannel|fetchChannel(){}[0]
    open suspend fun fetchChannelOrNull(): dev.kord.core.entity.channel/Category? // dev.kord.core.behavior.channel/CategoryBehavior.fetchChannelOrNull|fetchChannelOrNull(){}[0]
}

abstract interface dev.kord.core.behavior.channel/ChannelBehavior : dev.kord.core.entity/KordEntity, dev.kord.core.entity/Strategizable { // dev.kord.core.behavior.channel/ChannelBehavior|null[0]
    open val mention // dev.kord.core.behavior.channel/ChannelBehavior.mention|{}mention[0]
        open fun <get-mention>(): kotlin/String // dev.kord.core.behavior.channel/ChannelBehavior.mention.<get-mention>|<get-mention>(){}[0]

    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.channel/ChannelBehavior // dev.kord.core.behavior.channel/ChannelBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun asChannel(): dev.kord.core.entity.channel/Channel // dev.kord.core.behavior.channel/ChannelBehavior.asChannel|asChannel(){}[0]
    open suspend fun asChannelOrNull(): dev.kord.core.entity.channel/Channel? // dev.kord.core.behavior.channel/ChannelBehavior.asChannelOrNull|asChannelOrNull(){}[0]
    open suspend fun delete(kotlin/String? = ...) // dev.kord.core.behavior.channel/ChannelBehavior.delete|delete(kotlin.String?){}[0]
    open suspend fun fetchChannel(): dev.kord.core.entity.channel/Channel // dev.kord.core.behavior.channel/ChannelBehavior.fetchChannel|fetchChannel(){}[0]
    open suspend fun fetchChannelOrNull(): dev.kord.core.entity.channel/Channel? // dev.kord.core.behavior.channel/ChannelBehavior.fetchChannelOrNull|fetchChannelOrNull(){}[0]
}

abstract interface dev.kord.core.behavior.channel/ForumChannelBehavior : dev.kord.core.behavior.channel.threads/ThreadOnlyChannelBehavior { // dev.kord.core.behavior.channel/ForumChannelBehavior|null[0]
    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.channel/ForumChannelBehavior // dev.kord.core.behavior.channel/ForumChannelBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun asChannel(): dev.kord.core.entity.channel/ForumChannel // dev.kord.core.behavior.channel/ForumChannelBehavior.asChannel|asChannel(){}[0]
    open suspend fun asChannelOrNull(): dev.kord.core.entity.channel/ForumChannel? // dev.kord.core.behavior.channel/ForumChannelBehavior.asChannelOrNull|asChannelOrNull(){}[0]
    open suspend fun fetchChannel(): dev.kord.core.entity.channel/ForumChannel // dev.kord.core.behavior.channel/ForumChannelBehavior.fetchChannel|fetchChannel(){}[0]
    open suspend fun fetchChannelOrNull(): dev.kord.core.entity.channel/ForumChannel? // dev.kord.core.behavior.channel/ForumChannelBehavior.fetchChannelOrNull|fetchChannelOrNull(){}[0]
}

abstract interface dev.kord.core.behavior.channel/GuildChannelBehavior : dev.kord.core.behavior.channel/ChannelBehavior, dev.kord.core.entity/Strategizable { // dev.kord.core.behavior.channel/GuildChannelBehavior|null[0]
    abstract val guildId // dev.kord.core.behavior.channel/GuildChannelBehavior.guildId|{}guildId[0]
        abstract fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.behavior.channel/GuildChannelBehavior.guildId.<get-guildId>|<get-guildId>(){}[0]
    open val guild // dev.kord.core.behavior.channel/GuildChannelBehavior.guild|{}guild[0]
        open fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.behavior.channel/GuildChannelBehavior.guild.<get-guild>|<get-guild>(){}[0]

    open fun compareTo(dev.kord.core.entity/Entity): kotlin/Int // dev.kord.core.behavior.channel/GuildChannelBehavior.compareTo|compareTo(dev.kord.core.entity.Entity){}[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.channel/GuildChannelBehavior // dev.kord.core.behavior.channel/GuildChannelBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun asChannel(): dev.kord.core.entity.channel/GuildChannel // dev.kord.core.behavior.channel/GuildChannelBehavior.asChannel|asChannel(){}[0]
    open suspend fun asChannelOrNull(): dev.kord.core.entity.channel/GuildChannel? // dev.kord.core.behavior.channel/GuildChannelBehavior.asChannelOrNull|asChannelOrNull(){}[0]
    open suspend fun fetchChannel(): dev.kord.core.entity.channel/GuildChannel // dev.kord.core.behavior.channel/GuildChannelBehavior.fetchChannel|fetchChannel(){}[0]
    open suspend fun fetchChannelOrNull(): dev.kord.core.entity.channel/GuildChannel? // dev.kord.core.behavior.channel/GuildChannelBehavior.fetchChannelOrNull|fetchChannelOrNull(){}[0]
    open suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.behavior.channel/GuildChannelBehavior.getGuild|getGuild(){}[0]
    open suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.behavior.channel/GuildChannelBehavior.getGuildOrNull|getGuildOrNull(){}[0]
}

abstract interface dev.kord.core.behavior.channel/GuildMessageChannelBehavior : dev.kord.core.behavior.channel/GuildChannelBehavior, dev.kord.core.behavior.channel/MessageChannelBehavior { // dev.kord.core.behavior.channel/GuildMessageChannelBehavior|null[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.channel/GuildMessageChannelBehavior // dev.kord.core.behavior.channel/GuildMessageChannelBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun asChannel(): dev.kord.core.entity.channel/GuildMessageChannel // dev.kord.core.behavior.channel/GuildMessageChannelBehavior.asChannel|asChannel(){}[0]
    open suspend fun asChannelOrNull(): dev.kord.core.entity.channel/GuildMessageChannel? // dev.kord.core.behavior.channel/GuildMessageChannelBehavior.asChannelOrNull|asChannelOrNull(){}[0]
    open suspend fun bulkDelete(kotlin.collections/Iterable<dev.kord.common.entity/Snowflake>, kotlin/Boolean = ..., kotlin/String? = ...) // dev.kord.core.behavior.channel/GuildMessageChannelBehavior.bulkDelete|bulkDelete(kotlin.collections.Iterable<dev.kord.common.entity.Snowflake>;kotlin.Boolean;kotlin.String?){}[0]
    open suspend fun fetchChannel(): dev.kord.core.entity.channel/GuildMessageChannel // dev.kord.core.behavior.channel/GuildMessageChannelBehavior.fetchChannel|fetchChannel(){}[0]
    open suspend fun fetchChannelOrNull(): dev.kord.core.entity.channel/GuildMessageChannel? // dev.kord.core.behavior.channel/GuildMessageChannelBehavior.fetchChannelOrNull|fetchChannelOrNull(){}[0]
}

abstract interface dev.kord.core.behavior.channel/MediaChannelBehavior : dev.kord.core.behavior.channel.threads/ThreadOnlyChannelBehavior { // dev.kord.core.behavior.channel/MediaChannelBehavior|null[0]
    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.channel/MediaChannelBehavior // dev.kord.core.behavior.channel/MediaChannelBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun asChannel(): dev.kord.core.entity.channel/MediaChannel // dev.kord.core.behavior.channel/MediaChannelBehavior.asChannel|asChannel(){}[0]
    open suspend fun asChannelOrNull(): dev.kord.core.entity.channel/MediaChannel? // dev.kord.core.behavior.channel/MediaChannelBehavior.asChannelOrNull|asChannelOrNull(){}[0]
    open suspend fun fetchChannel(): dev.kord.core.entity.channel/MediaChannel // dev.kord.core.behavior.channel/MediaChannelBehavior.fetchChannel|fetchChannel(){}[0]
    open suspend fun fetchChannelOrNull(): dev.kord.core.entity.channel/MediaChannel? // dev.kord.core.behavior.channel/MediaChannelBehavior.fetchChannelOrNull|fetchChannelOrNull(){}[0]
}

abstract interface dev.kord.core.behavior.channel/MessageChannelBehavior : dev.kord.core.behavior.channel/ChannelBehavior, dev.kord.core.entity/Strategizable { // dev.kord.core.behavior.channel/MessageChannelBehavior|null[0]
    open val messages // dev.kord.core.behavior.channel/MessageChannelBehavior.messages|{}messages[0]
        open fun <get-messages>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Message> // dev.kord.core.behavior.channel/MessageChannelBehavior.messages.<get-messages>|<get-messages>(){}[0]
    open val pinnedMessages // dev.kord.core.behavior.channel/MessageChannelBehavior.pinnedMessages|{}pinnedMessages[0]
        open fun <get-pinnedMessages>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Message> // dev.kord.core.behavior.channel/MessageChannelBehavior.pinnedMessages.<get-pinnedMessages>|<get-pinnedMessages>(){}[0]

    open fun getMessagesAfter(dev.kord.common.entity/Snowflake, kotlin/Int? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Message> // dev.kord.core.behavior.channel/MessageChannelBehavior.getMessagesAfter|getMessagesAfter(dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    open fun getMessagesAround(dev.kord.common.entity/Snowflake, kotlin/Int = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Message> // dev.kord.core.behavior.channel/MessageChannelBehavior.getMessagesAround|getMessagesAround(dev.kord.common.entity.Snowflake;kotlin.Int){}[0]
    open fun getMessagesBefore(dev.kord.common.entity/Snowflake, kotlin/Int? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Message> // dev.kord.core.behavior.channel/MessageChannelBehavior.getMessagesBefore|getMessagesBefore(dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.channel/MessageChannelBehavior // dev.kord.core.behavior.channel/MessageChannelBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun asChannel(): dev.kord.core.entity.channel/MessageChannel // dev.kord.core.behavior.channel/MessageChannelBehavior.asChannel|asChannel(){}[0]
    open suspend fun asChannelOrNull(): dev.kord.core.entity.channel/MessageChannel? // dev.kord.core.behavior.channel/MessageChannelBehavior.asChannelOrNull|asChannelOrNull(){}[0]
    open suspend fun createMessage(kotlin/String): dev.kord.core.entity/Message // dev.kord.core.behavior.channel/MessageChannelBehavior.createMessage|createMessage(kotlin.String){}[0]
    open suspend fun deleteMessage(dev.kord.common.entity/Snowflake, kotlin/String? = ...) // dev.kord.core.behavior.channel/MessageChannelBehavior.deleteMessage|deleteMessage(dev.kord.common.entity.Snowflake;kotlin.String?){}[0]
    open suspend fun fetchChannel(): dev.kord.core.entity.channel/MessageChannel // dev.kord.core.behavior.channel/MessageChannelBehavior.fetchChannel|fetchChannel(){}[0]
    open suspend fun fetchChannelOrNull(): dev.kord.core.entity.channel/MessageChannel? // dev.kord.core.behavior.channel/MessageChannelBehavior.fetchChannelOrNull|fetchChannelOrNull(){}[0]
    open suspend fun getMessage(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Message // dev.kord.core.behavior.channel/MessageChannelBehavior.getMessage|getMessage(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getMessageOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Message? // dev.kord.core.behavior.channel/MessageChannelBehavior.getMessageOrNull|getMessageOrNull(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun type() // dev.kord.core.behavior.channel/MessageChannelBehavior.type|type(){}[0]
    open suspend fun typeUntil(kotlin.time/TimeMark) // dev.kord.core.behavior.channel/MessageChannelBehavior.typeUntil|typeUntil(kotlin.time.TimeMark){}[0]
    open suspend fun typeUntil(kotlinx.datetime/Instant) // dev.kord.core.behavior.channel/MessageChannelBehavior.typeUntil|typeUntil(kotlinx.datetime.Instant){}[0]
}

abstract interface dev.kord.core.behavior.channel/NewsChannelBehavior : dev.kord.core.behavior.channel.threads/ThreadParentChannelBehavior, dev.kord.core.behavior.channel/TopGuildMessageChannelBehavior { // dev.kord.core.behavior.channel/NewsChannelBehavior|null[0]
    open val activeThreads // dev.kord.core.behavior.channel/NewsChannelBehavior.activeThreads|{}activeThreads[0]
        open fun <get-activeThreads>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/NewsChannelThread> // dev.kord.core.behavior.channel/NewsChannelBehavior.activeThreads.<get-activeThreads>|<get-activeThreads>(){}[0]

    open fun getPublicArchivedThreads(kotlinx.datetime/Instant?, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/NewsChannelThread> // dev.kord.core.behavior.channel/NewsChannelBehavior.getPublicArchivedThreads|getPublicArchivedThreads(kotlinx.datetime.Instant?;kotlin.Int?){}[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.channel/NewsChannelBehavior // dev.kord.core.behavior.channel/NewsChannelBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun asChannel(): dev.kord.core.entity.channel/NewsChannel // dev.kord.core.behavior.channel/NewsChannelBehavior.asChannel|asChannel(){}[0]
    open suspend fun asChannelOrNull(): dev.kord.core.entity.channel/NewsChannel? // dev.kord.core.behavior.channel/NewsChannelBehavior.asChannelOrNull|asChannelOrNull(){}[0]
    open suspend fun fetchChannel(): dev.kord.core.entity.channel/NewsChannel // dev.kord.core.behavior.channel/NewsChannelBehavior.fetchChannel|fetchChannel(){}[0]
    open suspend fun fetchChannelOrNull(): dev.kord.core.entity.channel/NewsChannel? // dev.kord.core.behavior.channel/NewsChannelBehavior.fetchChannelOrNull|fetchChannelOrNull(){}[0]
    open suspend fun follow(dev.kord.common.entity/Snowflake) // dev.kord.core.behavior.channel/NewsChannelBehavior.follow|follow(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun startPublicThread(kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel.thread/StartThreadBuilder, kotlin/Unit> = ...): dev.kord.core.entity.channel.thread/NewsChannelThread // dev.kord.core.behavior.channel/NewsChannelBehavior.startPublicThread|startPublicThread(kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.thread.StartThreadBuilder,kotlin.Unit>){}[0]
    open suspend fun startPublicThreadWithMessage(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel.thread/StartThreadWithMessageBuilder, kotlin/Unit> = ...): dev.kord.core.entity.channel.thread/NewsChannelThread // dev.kord.core.behavior.channel/NewsChannelBehavior.startPublicThreadWithMessage|startPublicThreadWithMessage(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.thread.StartThreadWithMessageBuilder,kotlin.Unit>){}[0]
}

abstract interface dev.kord.core.behavior.channel/StageChannelBehavior : dev.kord.core.behavior.channel/BaseVoiceChannelBehavior, dev.kord.core.behavior.channel/TopGuildMessageChannelBehavior { // dev.kord.core.behavior.channel/StageChannelBehavior|null[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.channel/StageChannelBehavior // dev.kord.core.behavior.channel/StageChannelBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun getStageInstance(): dev.kord.core.entity/StageInstance // dev.kord.core.behavior.channel/StageChannelBehavior.getStageInstance|getStageInstance(){}[0]
    open suspend fun getStageInstanceOrNull(): dev.kord.core.entity/StageInstance? // dev.kord.core.behavior.channel/StageChannelBehavior.getStageInstanceOrNull|getStageInstanceOrNull(){}[0]
}

abstract interface dev.kord.core.behavior.channel/TextChannelBehavior : dev.kord.core.behavior.channel.threads/PrivateThreadParentChannelBehavior, dev.kord.core.behavior.channel/TopGuildMessageChannelBehavior { // dev.kord.core.behavior.channel/TextChannelBehavior|null[0]
    open val activeThreads // dev.kord.core.behavior.channel/TextChannelBehavior.activeThreads|{}activeThreads[0]
        open fun <get-activeThreads>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/TextChannelThread> // dev.kord.core.behavior.channel/TextChannelBehavior.activeThreads.<get-activeThreads>|<get-activeThreads>(){}[0]

    open fun getJoinedPrivateArchivedThreads(dev.kord.common.entity/Snowflake?, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/TextChannelThread> // dev.kord.core.behavior.channel/TextChannelBehavior.getJoinedPrivateArchivedThreads|getJoinedPrivateArchivedThreads(dev.kord.common.entity.Snowflake?;kotlin.Int?){}[0]
    open fun getPrivateArchivedThreads(kotlinx.datetime/Instant?, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/TextChannelThread> // dev.kord.core.behavior.channel/TextChannelBehavior.getPrivateArchivedThreads|getPrivateArchivedThreads(kotlinx.datetime.Instant?;kotlin.Int?){}[0]
    open fun getPublicArchivedThreads(kotlinx.datetime/Instant?, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/TextChannelThread> // dev.kord.core.behavior.channel/TextChannelBehavior.getPublicArchivedThreads|getPublicArchivedThreads(kotlinx.datetime.Instant?;kotlin.Int?){}[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.channel/TextChannelBehavior // dev.kord.core.behavior.channel/TextChannelBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun asChannel(): dev.kord.core.entity.channel/TextChannel // dev.kord.core.behavior.channel/TextChannelBehavior.asChannel|asChannel(){}[0]
    open suspend fun asChannelOrNull(): dev.kord.core.entity.channel/TextChannel? // dev.kord.core.behavior.channel/TextChannelBehavior.asChannelOrNull|asChannelOrNull(){}[0]
    open suspend fun fetchChannel(): dev.kord.core.entity.channel/TextChannel // dev.kord.core.behavior.channel/TextChannelBehavior.fetchChannel|fetchChannel(){}[0]
    open suspend fun fetchChannelOrNull(): dev.kord.core.entity.channel/TextChannel? // dev.kord.core.behavior.channel/TextChannelBehavior.fetchChannelOrNull|fetchChannelOrNull(){}[0]
    open suspend fun startPrivateThread(kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel.thread/StartThreadBuilder, kotlin/Unit> = ...): dev.kord.core.entity.channel.thread/TextChannelThread // dev.kord.core.behavior.channel/TextChannelBehavior.startPrivateThread|startPrivateThread(kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.thread.StartThreadBuilder,kotlin.Unit>){}[0]
    open suspend fun startPublicThread(kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel.thread/StartThreadBuilder, kotlin/Unit> = ...): dev.kord.core.entity.channel.thread/TextChannelThread // dev.kord.core.behavior.channel/TextChannelBehavior.startPublicThread|startPublicThread(kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.thread.StartThreadBuilder,kotlin.Unit>){}[0]
    open suspend fun startPublicThreadWithMessage(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel.thread/StartThreadWithMessageBuilder, kotlin/Unit> = ...): dev.kord.core.entity.channel.thread/TextChannelThread // dev.kord.core.behavior.channel/TextChannelBehavior.startPublicThreadWithMessage|startPublicThreadWithMessage(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.thread.StartThreadWithMessageBuilder,kotlin.Unit>){}[0]
}

abstract interface dev.kord.core.behavior.channel/TopGuildChannelBehavior : dev.kord.core.behavior.channel/GuildChannelBehavior { // dev.kord.core.behavior.channel/TopGuildChannelBehavior|null[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.channel/TopGuildChannelBehavior // dev.kord.core.behavior.channel/TopGuildChannelBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun addOverwrite(dev.kord.core.entity/PermissionOverwrite, kotlin/String? = ...) // dev.kord.core.behavior.channel/TopGuildChannelBehavior.addOverwrite|addOverwrite(dev.kord.core.entity.PermissionOverwrite;kotlin.String?){}[0]
    open suspend fun asChannel(): dev.kord.core.entity.channel/TopGuildChannel // dev.kord.core.behavior.channel/TopGuildChannelBehavior.asChannel|asChannel(){}[0]
    open suspend fun asChannelOrNull(): dev.kord.core.entity.channel/TopGuildChannel? // dev.kord.core.behavior.channel/TopGuildChannelBehavior.asChannelOrNull|asChannelOrNull(){}[0]
    open suspend fun fetchChannel(): dev.kord.core.entity.channel/TopGuildChannel // dev.kord.core.behavior.channel/TopGuildChannelBehavior.fetchChannel|fetchChannel(){}[0]
    open suspend fun fetchChannelOrNull(): dev.kord.core.entity.channel/TopGuildChannel? // dev.kord.core.behavior.channel/TopGuildChannelBehavior.fetchChannelOrNull|fetchChannelOrNull(){}[0]
    open suspend fun getPosition(): kotlin/Int // dev.kord.core.behavior.channel/TopGuildChannelBehavior.getPosition|getPosition(){}[0]
}

abstract interface dev.kord.core.behavior.channel/TopGuildMessageChannelBehavior : dev.kord.core.behavior.channel/CategorizableChannelBehavior, dev.kord.core.behavior.channel/GuildMessageChannelBehavior { // dev.kord.core.behavior.channel/TopGuildMessageChannelBehavior|null[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.channel/TopGuildMessageChannelBehavior // dev.kord.core.behavior.channel/TopGuildMessageChannelBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun asChannel(): dev.kord.core.entity.channel/TopGuildMessageChannel // dev.kord.core.behavior.channel/TopGuildMessageChannelBehavior.asChannel|asChannel(){}[0]
    open suspend fun asChannelOrNull(): dev.kord.core.entity.channel/TopGuildMessageChannel? // dev.kord.core.behavior.channel/TopGuildMessageChannelBehavior.asChannelOrNull|asChannelOrNull(){}[0]
    open suspend fun fetchChannel(): dev.kord.core.entity.channel/TopGuildMessageChannel // dev.kord.core.behavior.channel/TopGuildMessageChannelBehavior.fetchChannel|fetchChannel(){}[0]
    open suspend fun fetchChannelOrNull(): dev.kord.core.entity.channel/TopGuildMessageChannel? // dev.kord.core.behavior.channel/TopGuildMessageChannelBehavior.fetchChannelOrNull|fetchChannelOrNull(){}[0]
}

abstract interface dev.kord.core.behavior.channel/VoiceChannelBehavior : dev.kord.core.behavior.channel/BaseVoiceChannelBehavior, dev.kord.core.behavior.channel/TopGuildMessageChannelBehavior { // dev.kord.core.behavior.channel/VoiceChannelBehavior|null[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.channel/VoiceChannelBehavior // dev.kord.core.behavior.channel/VoiceChannelBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun asChannel(): dev.kord.core.entity.channel/VoiceChannel // dev.kord.core.behavior.channel/VoiceChannelBehavior.asChannel|asChannel(){}[0]
    open suspend fun asChannelOrNull(): dev.kord.core.entity.channel/VoiceChannel? // dev.kord.core.behavior.channel/VoiceChannelBehavior.asChannelOrNull|asChannelOrNull(){}[0]
    open suspend fun fetchChannel(): dev.kord.core.entity.channel/VoiceChannel // dev.kord.core.behavior.channel/VoiceChannelBehavior.fetchChannel|fetchChannel(){}[0]
    open suspend fun fetchChannelOrNull(): dev.kord.core.entity.channel/VoiceChannel? // dev.kord.core.behavior.channel/VoiceChannelBehavior.fetchChannelOrNull|fetchChannelOrNull(){}[0]
}

abstract interface dev.kord.core.behavior.interaction.followup/EphemeralFollowupMessageBehavior : dev.kord.core.behavior.interaction.followup/FollowupMessageBehavior { // dev.kord.core.behavior.interaction.followup/EphemeralFollowupMessageBehavior|null[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.interaction.followup/EphemeralFollowupMessageBehavior // dev.kord.core.behavior.interaction.followup/EphemeralFollowupMessageBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

abstract interface dev.kord.core.behavior.interaction.followup/FollowupMessageBehavior : dev.kord.core.entity/KordEntity, dev.kord.core.entity/Strategizable { // dev.kord.core.behavior.interaction.followup/FollowupMessageBehavior|null[0]
    abstract val applicationId // dev.kord.core.behavior.interaction.followup/FollowupMessageBehavior.applicationId|{}applicationId[0]
        abstract fun <get-applicationId>(): dev.kord.common.entity/Snowflake // dev.kord.core.behavior.interaction.followup/FollowupMessageBehavior.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    abstract val channelId // dev.kord.core.behavior.interaction.followup/FollowupMessageBehavior.channelId|{}channelId[0]
        abstract fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.behavior.interaction.followup/FollowupMessageBehavior.channelId.<get-channelId>|<get-channelId>(){}[0]
    abstract val token // dev.kord.core.behavior.interaction.followup/FollowupMessageBehavior.token|{}token[0]
        abstract fun <get-token>(): kotlin/String // dev.kord.core.behavior.interaction.followup/FollowupMessageBehavior.token.<get-token>|<get-token>(){}[0]
    open val channel // dev.kord.core.behavior.interaction.followup/FollowupMessageBehavior.channel|{}channel[0]
        open fun <get-channel>(): dev.kord.core.behavior.channel/MessageChannelBehavior // dev.kord.core.behavior.interaction.followup/FollowupMessageBehavior.channel.<get-channel>|<get-channel>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.interaction.followup/FollowupMessageBehavior // dev.kord.core.behavior.interaction.followup/FollowupMessageBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun delete() // dev.kord.core.behavior.interaction.followup/FollowupMessageBehavior.delete|delete(){}[0]
    open suspend fun getChannel(): dev.kord.core.entity.channel/MessageChannel // dev.kord.core.behavior.interaction.followup/FollowupMessageBehavior.getChannel|getChannel(){}[0]
    open suspend fun getChannelOrNull(): dev.kord.core.entity.channel/MessageChannel? // dev.kord.core.behavior.interaction.followup/FollowupMessageBehavior.getChannelOrNull|getChannelOrNull(){}[0]
}

abstract interface dev.kord.core.behavior.interaction.followup/PublicFollowupMessageBehavior : dev.kord.core.behavior.interaction.followup/FollowupMessageBehavior { // dev.kord.core.behavior.interaction.followup/PublicFollowupMessageBehavior|null[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.interaction.followup/PublicFollowupMessageBehavior // dev.kord.core.behavior.interaction.followup/PublicFollowupMessageBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

abstract interface dev.kord.core.behavior.interaction.response/DeferredEphemeralMessageInteractionResponseBehavior : dev.kord.core.behavior.interaction.response/DeferredMessageInteractionResponseBehavior, dev.kord.core.behavior.interaction.response/EphemeralInteractionResponseBehavior { // dev.kord.core.behavior.interaction.response/DeferredEphemeralMessageInteractionResponseBehavior|null[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.interaction.response/DeferredEphemeralMessageInteractionResponseBehavior // dev.kord.core.behavior.interaction.response/DeferredEphemeralMessageInteractionResponseBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

abstract interface dev.kord.core.behavior.interaction.response/DeferredPublicMessageInteractionResponseBehavior : dev.kord.core.behavior.interaction.response/DeferredMessageInteractionResponseBehavior, dev.kord.core.behavior.interaction.response/PublicInteractionResponseBehavior { // dev.kord.core.behavior.interaction.response/DeferredPublicMessageInteractionResponseBehavior|null[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.interaction.response/DeferredPublicMessageInteractionResponseBehavior // dev.kord.core.behavior.interaction.response/DeferredPublicMessageInteractionResponseBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

abstract interface dev.kord.core.behavior.interaction.response/EphemeralMessageInteractionResponseBehavior : dev.kord.core.behavior.interaction.response/EphemeralInteractionResponseBehavior, dev.kord.core.behavior.interaction.response/MessageInteractionResponseBehavior { // dev.kord.core.behavior.interaction.response/EphemeralMessageInteractionResponseBehavior|null[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.interaction.response/EphemeralMessageInteractionResponseBehavior // dev.kord.core.behavior.interaction.response/EphemeralMessageInteractionResponseBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

abstract interface dev.kord.core.behavior.interaction.response/FollowupPermittingInteractionResponseBehavior : dev.kord.core.behavior.interaction.response/InteractionResponseBehavior { // dev.kord.core.behavior.interaction.response/FollowupPermittingInteractionResponseBehavior|null[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.interaction.response/FollowupPermittingInteractionResponseBehavior // dev.kord.core.behavior.interaction.response/FollowupPermittingInteractionResponseBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

abstract interface dev.kord.core.behavior.interaction.response/MessageInteractionResponseBehavior : dev.kord.core.behavior.interaction.response/FollowupPermittingInteractionResponseBehavior { // dev.kord.core.behavior.interaction.response/MessageInteractionResponseBehavior|null[0]
    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.interaction.response/MessageInteractionResponseBehavior // dev.kord.core.behavior.interaction.response/MessageInteractionResponseBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun delete() // dev.kord.core.behavior.interaction.response/MessageInteractionResponseBehavior.delete|delete(){}[0]
}

abstract interface dev.kord.core.behavior.interaction.response/PopupInteractionResponseBehavior : dev.kord.core.behavior.interaction.response/FollowupPermittingInteractionResponseBehavior { // dev.kord.core.behavior.interaction.response/PopupInteractionResponseBehavior|null[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.interaction.response/PopupInteractionResponseBehavior // dev.kord.core.behavior.interaction.response/PopupInteractionResponseBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

abstract interface dev.kord.core.behavior.interaction.response/PublicMessageInteractionResponseBehavior : dev.kord.core.behavior.interaction.response/MessageInteractionResponseBehavior, dev.kord.core.behavior.interaction.response/PublicInteractionResponseBehavior { // dev.kord.core.behavior.interaction.response/PublicMessageInteractionResponseBehavior|null[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.interaction.response/PublicMessageInteractionResponseBehavior // dev.kord.core.behavior.interaction.response/PublicMessageInteractionResponseBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

abstract interface dev.kord.core.behavior.interaction/ActionInteractionBehavior : dev.kord.core.behavior.interaction/InteractionBehavior { // dev.kord.core.behavior.interaction/ActionInteractionBehavior|null[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.interaction/ActionInteractionBehavior // dev.kord.core.behavior.interaction/ActionInteractionBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun deferEphemeralResponse(): dev.kord.core.behavior.interaction.response/DeferredEphemeralMessageInteractionResponseBehavior // dev.kord.core.behavior.interaction/ActionInteractionBehavior.deferEphemeralResponse|deferEphemeralResponse(){}[0]
    open suspend fun deferEphemeralResponseUnsafe(): dev.kord.core.behavior.interaction.response/EphemeralMessageInteractionResponseBehavior // dev.kord.core.behavior.interaction/ActionInteractionBehavior.deferEphemeralResponseUnsafe|deferEphemeralResponseUnsafe(){}[0]
    open suspend fun deferPublicResponse(): dev.kord.core.behavior.interaction.response/DeferredPublicMessageInteractionResponseBehavior // dev.kord.core.behavior.interaction/ActionInteractionBehavior.deferPublicResponse|deferPublicResponse(){}[0]
    open suspend fun deferPublicResponseUnsafe(): dev.kord.core.behavior.interaction.response/PublicMessageInteractionResponseBehavior // dev.kord.core.behavior.interaction/ActionInteractionBehavior.deferPublicResponseUnsafe|deferPublicResponseUnsafe(){}[0]
    open suspend fun getOriginalInteractionResponse(): dev.kord.core.entity/Message // dev.kord.core.behavior.interaction/ActionInteractionBehavior.getOriginalInteractionResponse|getOriginalInteractionResponse(){}[0]
    open suspend fun getOriginalInteractionResponseOrNull(): dev.kord.core.entity/Message? // dev.kord.core.behavior.interaction/ActionInteractionBehavior.getOriginalInteractionResponseOrNull|getOriginalInteractionResponseOrNull(){}[0]
}

abstract interface dev.kord.core.behavior.interaction/ApplicationCommandInteractionBehavior : dev.kord.core.behavior.interaction/ModalParentInteractionBehavior { // dev.kord.core.behavior.interaction/ApplicationCommandInteractionBehavior|null[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.interaction/ApplicationCommandInteractionBehavior // dev.kord.core.behavior.interaction/ApplicationCommandInteractionBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

abstract interface dev.kord.core.behavior.interaction/AutoCompleteInteractionBehavior : dev.kord.core.behavior.interaction/DataInteractionBehavior { // dev.kord.core.behavior.interaction/AutoCompleteInteractionBehavior|null[0]
    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.interaction/AutoCompleteInteractionBehavior // dev.kord.core.behavior.interaction/AutoCompleteInteractionBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

abstract interface dev.kord.core.behavior.interaction/ComponentInteractionBehavior : dev.kord.core.behavior.interaction/ActionInteractionBehavior { // dev.kord.core.behavior.interaction/ComponentInteractionBehavior|null[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.interaction/ComponentInteractionBehavior // dev.kord.core.behavior.interaction/ComponentInteractionBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun deferEphemeralMessageUpdate(): dev.kord.core.behavior.interaction.response/EphemeralMessageInteractionResponseBehavior // dev.kord.core.behavior.interaction/ComponentInteractionBehavior.deferEphemeralMessageUpdate|deferEphemeralMessageUpdate(){}[0]
    open suspend fun deferPublicMessageUpdate(): dev.kord.core.behavior.interaction.response/PublicMessageInteractionResponseBehavior // dev.kord.core.behavior.interaction/ComponentInteractionBehavior.deferPublicMessageUpdate|deferPublicMessageUpdate(){}[0]
}

abstract interface dev.kord.core.behavior.interaction/DataInteractionBehavior : dev.kord.core.behavior.interaction/InteractionBehavior { // dev.kord.core.behavior.interaction/DataInteractionBehavior|null[0]
    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.interaction/DataInteractionBehavior // dev.kord.core.behavior.interaction/DataInteractionBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

abstract interface dev.kord.core.behavior.interaction/GlobalInteractionBehavior : dev.kord.core.behavior.interaction/InteractionBehavior { // dev.kord.core.behavior.interaction/GlobalInteractionBehavior|null[0]
    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.interaction/GlobalInteractionBehavior // dev.kord.core.behavior.interaction/GlobalInteractionBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

abstract interface dev.kord.core.behavior.interaction/GuildInteractionBehavior : dev.kord.core.behavior.interaction/InteractionBehavior { // dev.kord.core.behavior.interaction/GuildInteractionBehavior|null[0]
    abstract val guildId // dev.kord.core.behavior.interaction/GuildInteractionBehavior.guildId|{}guildId[0]
        abstract fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.behavior.interaction/GuildInteractionBehavior.guildId.<get-guildId>|<get-guildId>(){}[0]
    open val channel // dev.kord.core.behavior.interaction/GuildInteractionBehavior.channel|{}channel[0]
        open fun <get-channel>(): dev.kord.core.behavior.channel/GuildMessageChannelBehavior // dev.kord.core.behavior.interaction/GuildInteractionBehavior.channel.<get-channel>|<get-channel>(){}[0]
    open val guild // dev.kord.core.behavior.interaction/GuildInteractionBehavior.guild|{}guild[0]
        open fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.behavior.interaction/GuildInteractionBehavior.guild.<get-guild>|<get-guild>(){}[0]

    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.interaction/GuildInteractionBehavior // dev.kord.core.behavior.interaction/GuildInteractionBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun getChannel(): dev.kord.core.entity.channel/GuildMessageChannel // dev.kord.core.behavior.interaction/GuildInteractionBehavior.getChannel|getChannel(){}[0]
    open suspend fun getChannelOrNull(): dev.kord.core.entity.channel/GuildMessageChannel? // dev.kord.core.behavior.interaction/GuildInteractionBehavior.getChannelOrNull|getChannelOrNull(){}[0]
    open suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.behavior.interaction/GuildInteractionBehavior.getGuild|getGuild(){}[0]
    open suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.behavior.interaction/GuildInteractionBehavior.getGuildOrNull|getGuildOrNull(){}[0]
}

abstract interface dev.kord.core.behavior.interaction/InteractionBehavior : dev.kord.core.entity/KordEntity, dev.kord.core.entity/Strategizable { // dev.kord.core.behavior.interaction/InteractionBehavior|null[0]
    abstract val applicationId // dev.kord.core.behavior.interaction/InteractionBehavior.applicationId|{}applicationId[0]
        abstract fun <get-applicationId>(): dev.kord.common.entity/Snowflake // dev.kord.core.behavior.interaction/InteractionBehavior.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    abstract val channelId // dev.kord.core.behavior.interaction/InteractionBehavior.channelId|{}channelId[0]
        abstract fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.behavior.interaction/InteractionBehavior.channelId.<get-channelId>|<get-channelId>(){}[0]
    abstract val token // dev.kord.core.behavior.interaction/InteractionBehavior.token|{}token[0]
        abstract fun <get-token>(): kotlin/String // dev.kord.core.behavior.interaction/InteractionBehavior.token.<get-token>|<get-token>(){}[0]
    open val channel // dev.kord.core.behavior.interaction/InteractionBehavior.channel|{}channel[0]
        open fun <get-channel>(): dev.kord.core.behavior.channel/MessageChannelBehavior // dev.kord.core.behavior.interaction/InteractionBehavior.channel.<get-channel>|<get-channel>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.interaction/InteractionBehavior // dev.kord.core.behavior.interaction/InteractionBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun getChannel(): dev.kord.core.entity.channel/MessageChannel // dev.kord.core.behavior.interaction/InteractionBehavior.getChannel|getChannel(){}[0]
    open suspend fun getChannelOrNull(): dev.kord.core.entity.channel/MessageChannel? // dev.kord.core.behavior.interaction/InteractionBehavior.getChannelOrNull|getChannelOrNull(){}[0]
}

abstract interface dev.kord.core.behavior.interaction/ModalParentInteractionBehavior : dev.kord.core.behavior.interaction/ActionInteractionBehavior { // dev.kord.core.behavior.interaction/ModalParentInteractionBehavior|null[0]
    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.interaction/ModalParentInteractionBehavior // dev.kord.core.behavior.interaction/ModalParentInteractionBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

abstract interface dev.kord.core.behavior/ApplicationCommandBehavior : dev.kord.core.entity/Entity { // dev.kord.core.behavior/ApplicationCommandBehavior|null[0]
    abstract val applicationId // dev.kord.core.behavior/ApplicationCommandBehavior.applicationId|{}applicationId[0]
        abstract fun <get-applicationId>(): dev.kord.common.entity/Snowflake // dev.kord.core.behavior/ApplicationCommandBehavior.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    abstract val service // dev.kord.core.behavior/ApplicationCommandBehavior.service|{}service[0]
        abstract fun <get-service>(): dev.kord.rest.service/InteractionService // dev.kord.core.behavior/ApplicationCommandBehavior.service.<get-service>|<get-service>(){}[0]

    abstract suspend fun delete() // dev.kord.core.behavior/ApplicationCommandBehavior.delete|delete(){}[0]
}

abstract interface dev.kord.core.behavior/ChatInputCommandBehavior : dev.kord.core.behavior/ApplicationCommandBehavior { // dev.kord.core.behavior/ChatInputCommandBehavior|null[0]
    abstract suspend fun edit(kotlin.coroutines/SuspendFunction1<dev.kord.rest.builder.interaction/ChatInputModifyBuilder, kotlin/Unit>): dev.kord.core.entity.application/ChatInputCommandCommand // dev.kord.core.behavior/ChatInputCommandBehavior.edit|edit(kotlin.coroutines.SuspendFunction1<dev.kord.rest.builder.interaction.ChatInputModifyBuilder,kotlin.Unit>){}[0]
}

abstract interface dev.kord.core.behavior/GlobalApplicationCommandBehavior : dev.kord.core.behavior/ApplicationCommandBehavior { // dev.kord.core.behavior/GlobalApplicationCommandBehavior|null[0]
    open suspend fun delete() // dev.kord.core.behavior/GlobalApplicationCommandBehavior.delete|delete(){}[0]
}

abstract interface dev.kord.core.behavior/GlobalChatInputCommandBehavior : dev.kord.core.behavior/ChatInputCommandBehavior, dev.kord.core.behavior/GlobalApplicationCommandBehavior { // dev.kord.core.behavior/GlobalChatInputCommandBehavior|null[0]
    open suspend fun edit(kotlin.coroutines/SuspendFunction1<dev.kord.rest.builder.interaction/ChatInputModifyBuilder, kotlin/Unit>): dev.kord.core.entity.application/GlobalChatInputCommand // dev.kord.core.behavior/GlobalChatInputCommandBehavior.edit|edit(kotlin.coroutines.SuspendFunction1<dev.kord.rest.builder.interaction.ChatInputModifyBuilder,kotlin.Unit>){}[0]
}

abstract interface dev.kord.core.behavior/GlobalMessageCommandBehavior : dev.kord.core.behavior/GlobalApplicationCommandBehavior, dev.kord.core.behavior/MessageCommandBehavior { // dev.kord.core.behavior/GlobalMessageCommandBehavior|null[0]
    open suspend fun edit(kotlin.coroutines/SuspendFunction1<dev.kord.rest.builder.interaction/MessageCommandModifyBuilder, kotlin/Unit>): dev.kord.core.entity.application/GlobalMessageCommand // dev.kord.core.behavior/GlobalMessageCommandBehavior.edit|edit(kotlin.coroutines.SuspendFunction1<dev.kord.rest.builder.interaction.MessageCommandModifyBuilder,kotlin.Unit>){}[0]
}

abstract interface dev.kord.core.behavior/GlobalUserCommandBehavior : dev.kord.core.behavior/GlobalApplicationCommandBehavior, dev.kord.core.behavior/UserCommandBehavior { // dev.kord.core.behavior/GlobalUserCommandBehavior|null[0]
    open suspend fun edit(kotlin.coroutines/SuspendFunction1<dev.kord.rest.builder.interaction/UserCommandModifyBuilder, kotlin/Unit>): dev.kord.core.entity.application/GlobalUserCommand // dev.kord.core.behavior/GlobalUserCommandBehavior.edit|edit(kotlin.coroutines.SuspendFunction1<dev.kord.rest.builder.interaction.UserCommandModifyBuilder,kotlin.Unit>){}[0]
}

abstract interface dev.kord.core.behavior/GuildApplicationCommandBehavior : dev.kord.core.behavior/ApplicationCommandBehavior { // dev.kord.core.behavior/GuildApplicationCommandBehavior|null[0]
    abstract val guildId // dev.kord.core.behavior/GuildApplicationCommandBehavior.guildId|{}guildId[0]
        abstract fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.behavior/GuildApplicationCommandBehavior.guildId.<get-guildId>|<get-guildId>(){}[0]

    open suspend fun delete() // dev.kord.core.behavior/GuildApplicationCommandBehavior.delete|delete(){}[0]
}

abstract interface dev.kord.core.behavior/GuildBehavior : dev.kord.core.entity/KordEntity, dev.kord.core.entity/Strategizable { // dev.kord.core.behavior/GuildBehavior|null[0]
    open val activeThreads // dev.kord.core.behavior/GuildBehavior.activeThreads|{}activeThreads[0]
        open fun <get-activeThreads>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadChannel> // dev.kord.core.behavior/GuildBehavior.activeThreads.<get-activeThreads>|<get-activeThreads>(){}[0]
    open val autoModerationRules // dev.kord.core.behavior/GuildBehavior.autoModerationRules|{}autoModerationRules[0]
        open fun <get-autoModerationRules>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.automoderation/AutoModerationRule> // dev.kord.core.behavior/GuildBehavior.autoModerationRules.<get-autoModerationRules>|<get-autoModerationRules>(){}[0]
    open val bans // dev.kord.core.behavior/GuildBehavior.bans|{}bans[0]
        open fun <get-bans>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Ban> // dev.kord.core.behavior/GuildBehavior.bans.<get-bans>|<get-bans>(){}[0]
    open val cachedThreads // dev.kord.core.behavior/GuildBehavior.cachedThreads|{}cachedThreads[0]
        open fun <get-cachedThreads>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadChannel> // dev.kord.core.behavior/GuildBehavior.cachedThreads.<get-cachedThreads>|<get-cachedThreads>(){}[0]
    open val channels // dev.kord.core.behavior/GuildBehavior.channels|{}channels[0]
        open fun <get-channels>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel/TopGuildChannel> // dev.kord.core.behavior/GuildBehavior.channels.<get-channels>|<get-channels>(){}[0]
    open val emojis // dev.kord.core.behavior/GuildBehavior.emojis|{}emojis[0]
        open fun <get-emojis>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/GuildEmoji> // dev.kord.core.behavior/GuildBehavior.emojis.<get-emojis>|<get-emojis>(){}[0]
    open val gateway // dev.kord.core.behavior/GuildBehavior.gateway|{}gateway[0]
        open fun <get-gateway>(): dev.kord.gateway/Gateway? // dev.kord.core.behavior/GuildBehavior.gateway.<get-gateway>|<get-gateway>(){}[0]
    open val integrations // dev.kord.core.behavior/GuildBehavior.integrations|{}integrations[0]
        open fun <get-integrations>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Integration> // dev.kord.core.behavior/GuildBehavior.integrations.<get-integrations>|<get-integrations>(){}[0]
    open val invites // dev.kord.core.behavior/GuildBehavior.invites|{}invites[0]
        open fun <get-invites>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/InviteWithMetadata> // dev.kord.core.behavior/GuildBehavior.invites.<get-invites>|<get-invites>(){}[0]
    open val members // dev.kord.core.behavior/GuildBehavior.members|{}members[0]
        open fun <get-members>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Member> // dev.kord.core.behavior/GuildBehavior.members.<get-members>|<get-members>(){}[0]
    open val presences // dev.kord.core.behavior/GuildBehavior.presences|{}presences[0]
        open fun <get-presences>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Presence> // dev.kord.core.behavior/GuildBehavior.presences.<get-presences>|<get-presences>(){}[0]
    open val regions // dev.kord.core.behavior/GuildBehavior.regions|{}regions[0]
        open fun <get-regions>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Region> // dev.kord.core.behavior/GuildBehavior.regions.<get-regions>|<get-regions>(){}[0]
    open val roles // dev.kord.core.behavior/GuildBehavior.roles|{}roles[0]
        open fun <get-roles>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Role> // dev.kord.core.behavior/GuildBehavior.roles.<get-roles>|<get-roles>(){}[0]
    open val scheduledEvents // dev.kord.core.behavior/GuildBehavior.scheduledEvents|{}scheduledEvents[0]
        open fun <get-scheduledEvents>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/GuildScheduledEvent> // dev.kord.core.behavior/GuildBehavior.scheduledEvents.<get-scheduledEvents>|<get-scheduledEvents>(){}[0]
    open val stickers // dev.kord.core.behavior/GuildBehavior.stickers|{}stickers[0]
        open fun <get-stickers>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/GuildSticker> // dev.kord.core.behavior/GuildBehavior.stickers.<get-stickers>|<get-stickers>(){}[0]
    open val templates // dev.kord.core.behavior/GuildBehavior.templates|{}templates[0]
        open fun <get-templates>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Template> // dev.kord.core.behavior/GuildBehavior.templates.<get-templates>|<get-templates>(){}[0]
    open val voiceStates // dev.kord.core.behavior/GuildBehavior.voiceStates|{}voiceStates[0]
        open fun <get-voiceStates>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/VoiceState> // dev.kord.core.behavior/GuildBehavior.voiceStates.<get-voiceStates>|<get-voiceStates>(){}[0]
    open val webhooks // dev.kord.core.behavior/GuildBehavior.webhooks|{}webhooks[0]
        open fun <get-webhooks>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Webhook> // dev.kord.core.behavior/GuildBehavior.webhooks.<get-webhooks>|<get-webhooks>(){}[0]

    open fun getApplicationCommands(kotlin/Boolean? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.application/GuildApplicationCommand> // dev.kord.core.behavior/GuildBehavior.getApplicationCommands|getApplicationCommands(kotlin.Boolean?){}[0]
    open fun getMembers(kotlin/String, kotlin/Int = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Member> // dev.kord.core.behavior/GuildBehavior.getMembers|getMembers(kotlin.String;kotlin.Int){}[0]
    open fun requestMembers(dev.kord.gateway/RequestGuildMembers): kotlinx.coroutines.flow/Flow<dev.kord.core.event.guild/MembersChunkEvent> // dev.kord.core.behavior/GuildBehavior.requestMembers|requestMembers(dev.kord.gateway.RequestGuildMembers){}[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior/GuildBehavior // dev.kord.core.behavior/GuildBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun asGuild(): dev.kord.core.entity/Guild // dev.kord.core.behavior/GuildBehavior.asGuild|asGuild(){}[0]
    open suspend fun asGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.behavior/GuildBehavior.asGuildOrNull|asGuildOrNull(){}[0]
    open suspend fun createSticker(kotlin/String, kotlin/String, kotlin/String, dev.kord.rest/NamedFile): dev.kord.core.entity/GuildSticker // dev.kord.core.behavior/GuildBehavior.createSticker|createSticker(kotlin.String;kotlin.String;kotlin.String;dev.kord.rest.NamedFile){}[0]
    open suspend fun delete() // dev.kord.core.behavior/GuildBehavior.delete|delete(){}[0]
    open suspend fun editMFALevel(dev.kord.common.entity/MFALevel, kotlin/String? = ...): dev.kord.common.entity/MFALevel // dev.kord.core.behavior/GuildBehavior.editMFALevel|editMFALevel(dev.kord.common.entity.MFALevel;kotlin.String?){}[0]
    open suspend fun editSelfNickname(kotlin/String? = ..., kotlin/String? = ...): kotlin/String // dev.kord.core.behavior/GuildBehavior.editSelfNickname|editSelfNickname(kotlin.String?;kotlin.String?){}[0]
    open suspend fun editWelcomeScreen(kotlin/Function1<dev.kord.rest.builder.guild/WelcomeScreenModifyBuilder, kotlin/Unit>): dev.kord.core.entity/WelcomeScreen // dev.kord.core.behavior/GuildBehavior.editWelcomeScreen|editWelcomeScreen(kotlin.Function1<dev.kord.rest.builder.guild.WelcomeScreenModifyBuilder,kotlin.Unit>){}[0]
    open suspend fun fetchGuild(): dev.kord.core.entity/Guild // dev.kord.core.behavior/GuildBehavior.fetchGuild|fetchGuild(){}[0]
    open suspend fun fetchGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.behavior/GuildBehavior.fetchGuildOrNull|fetchGuildOrNull(){}[0]
    open suspend fun getApplicationCommand(dev.kord.common.entity/Snowflake): dev.kord.core.entity.application/GuildApplicationCommand // dev.kord.core.behavior/GuildBehavior.getApplicationCommand|getApplicationCommand(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getApplicationCommandOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity.application/GuildApplicationCommand? // dev.kord.core.behavior/GuildBehavior.getApplicationCommandOrNull|getApplicationCommandOrNull(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getAutoModerationRule(dev.kord.common.entity/Snowflake): dev.kord.core.entity.automoderation/AutoModerationRule // dev.kord.core.behavior/GuildBehavior.getAutoModerationRule|getAutoModerationRule(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getAutoModerationRuleOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity.automoderation/AutoModerationRule? // dev.kord.core.behavior/GuildBehavior.getAutoModerationRuleOrNull|getAutoModerationRuleOrNull(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getBan(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Ban // dev.kord.core.behavior/GuildBehavior.getBan|getBan(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getBanOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Ban? // dev.kord.core.behavior/GuildBehavior.getBanOrNull|getBanOrNull(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getChannel(dev.kord.common.entity/Snowflake): dev.kord.core.entity.channel/GuildChannel // dev.kord.core.behavior/GuildBehavior.getChannel|getChannel(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getChannelOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity.channel/GuildChannel? // dev.kord.core.behavior/GuildBehavior.getChannelOrNull|getChannelOrNull(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getGuildScheduledEvent(dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildScheduledEvent // dev.kord.core.behavior/GuildBehavior.getGuildScheduledEvent|getGuildScheduledEvent(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getGuildScheduledEventOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildScheduledEvent? // dev.kord.core.behavior/GuildBehavior.getGuildScheduledEventOrNull|getGuildScheduledEventOrNull(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getInvite(kotlin/String, kotlin/Boolean = ..., kotlin/Boolean = ..., dev.kord.common.entity/Snowflake? = ...): dev.kord.core.entity/Invite // dev.kord.core.behavior/GuildBehavior.getInvite|getInvite(kotlin.String;kotlin.Boolean;kotlin.Boolean;dev.kord.common.entity.Snowflake?){}[0]
    open suspend fun getInviteOrNull(kotlin/String, kotlin/Boolean = ..., kotlin/Boolean = ..., dev.kord.common.entity/Snowflake? = ...): dev.kord.core.entity/Invite? // dev.kord.core.behavior/GuildBehavior.getInviteOrNull|getInviteOrNull(kotlin.String;kotlin.Boolean;kotlin.Boolean;dev.kord.common.entity.Snowflake?){}[0]
    open suspend fun getMember(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Member // dev.kord.core.behavior/GuildBehavior.getMember|getMember(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getMemberOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Member? // dev.kord.core.behavior/GuildBehavior.getMemberOrNull|getMemberOrNull(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getOnboarding(): dev.kord.core.entity/GuildOnboarding // dev.kord.core.behavior/GuildBehavior.getOnboarding|getOnboarding(){}[0]
    open suspend fun getOnboardingOrNull(): dev.kord.core.entity/GuildOnboarding? // dev.kord.core.behavior/GuildBehavior.getOnboardingOrNull|getOnboardingOrNull(){}[0]
    open suspend fun getPreview(): dev.kord.core.entity/GuildPreview // dev.kord.core.behavior/GuildBehavior.getPreview|getPreview(){}[0]
    open suspend fun getPreviewOrNull(): dev.kord.core.entity/GuildPreview? // dev.kord.core.behavior/GuildBehavior.getPreviewOrNull|getPreviewOrNull(){}[0]
    open suspend fun getPruneCount(kotlin/Int = ...): kotlin/Int // dev.kord.core.behavior/GuildBehavior.getPruneCount|getPruneCount(kotlin.Int){}[0]
    open suspend fun getRole(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Role // dev.kord.core.behavior/GuildBehavior.getRole|getRole(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getRoleOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Role? // dev.kord.core.behavior/GuildBehavior.getRoleOrNull|getRoleOrNull(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getSticker(dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildSticker // dev.kord.core.behavior/GuildBehavior.getSticker|getSticker(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getStickerOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildSticker? // dev.kord.core.behavior/GuildBehavior.getStickerOrNull|getStickerOrNull(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getTemplate(kotlin/String): dev.kord.core.entity/Template // dev.kord.core.behavior/GuildBehavior.getTemplate|getTemplate(kotlin.String){}[0]
    open suspend fun getTemplateOrNull(kotlin/String): dev.kord.core.entity/Template? // dev.kord.core.behavior/GuildBehavior.getTemplateOrNull|getTemplateOrNull(kotlin.String){}[0]
    open suspend fun getVanityUrl(): kotlin/String? // dev.kord.core.behavior/GuildBehavior.getVanityUrl|getVanityUrl(){}[0]
    open suspend fun getWelcomeScreen(): dev.kord.core.entity/WelcomeScreen // dev.kord.core.behavior/GuildBehavior.getWelcomeScreen|getWelcomeScreen(){}[0]
    open suspend fun getWelcomeScreenOrNull(): dev.kord.core.entity/WelcomeScreen? // dev.kord.core.behavior/GuildBehavior.getWelcomeScreenOrNull|getWelcomeScreenOrNull(){}[0]
    open suspend fun getWidget(): dev.kord.core.entity/GuildWidget // dev.kord.core.behavior/GuildBehavior.getWidget|getWidget(){}[0]
    open suspend fun getWidgetOrNull(): dev.kord.core.entity/GuildWidget? // dev.kord.core.behavior/GuildBehavior.getWidgetOrNull|getWidgetOrNull(){}[0]
    open suspend fun kick(dev.kord.common.entity/Snowflake, kotlin/String? = ...) // dev.kord.core.behavior/GuildBehavior.kick|kick(dev.kord.common.entity.Snowflake;kotlin.String?){}[0]
    open suspend fun leave() // dev.kord.core.behavior/GuildBehavior.leave|leave(){}[0]
    open suspend fun prune(kotlin/Int = ..., kotlin/String? = ...): kotlin/Int // dev.kord.core.behavior/GuildBehavior.prune|prune(kotlin.Int;kotlin.String?){}[0]
    open suspend fun unban(dev.kord.common.entity/Snowflake, kotlin/String? = ...) // dev.kord.core.behavior/GuildBehavior.unban|unban(dev.kord.common.entity.Snowflake;kotlin.String?){}[0]
}

abstract interface dev.kord.core.behavior/GuildChatInputCommandBehavior : dev.kord.core.behavior/ChatInputCommandBehavior, dev.kord.core.behavior/GuildApplicationCommandBehavior { // dev.kord.core.behavior/GuildChatInputCommandBehavior|null[0]
    open suspend fun edit(kotlin.coroutines/SuspendFunction1<dev.kord.rest.builder.interaction/ChatInputModifyBuilder, kotlin/Unit>): dev.kord.core.entity.application/GuildChatInputCommand // dev.kord.core.behavior/GuildChatInputCommandBehavior.edit|edit(kotlin.coroutines.SuspendFunction1<dev.kord.rest.builder.interaction.ChatInputModifyBuilder,kotlin.Unit>){}[0]
}

abstract interface dev.kord.core.behavior/GuildEmojiBehavior : dev.kord.core.entity/KordEntity, dev.kord.core.entity/Strategizable { // dev.kord.core.behavior/GuildEmojiBehavior|null[0]
    abstract val guildId // dev.kord.core.behavior/GuildEmojiBehavior.guildId|{}guildId[0]
        abstract fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.behavior/GuildEmojiBehavior.guildId.<get-guildId>|<get-guildId>(){}[0]
    open val guild // dev.kord.core.behavior/GuildEmojiBehavior.guild|{}guild[0]
        open fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.behavior/GuildEmojiBehavior.guild.<get-guild>|<get-guild>(){}[0]

    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior/GuildEmojiBehavior // dev.kord.core.behavior/GuildEmojiBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun delete(kotlin/String? = ...) // dev.kord.core.behavior/GuildEmojiBehavior.delete|delete(kotlin.String?){}[0]
}

abstract interface dev.kord.core.behavior/GuildMessageCommandBehavior : dev.kord.core.behavior/GuildApplicationCommandBehavior, dev.kord.core.behavior/MessageCommandBehavior { // dev.kord.core.behavior/GuildMessageCommandBehavior|null[0]
    open suspend fun edit(kotlin.coroutines/SuspendFunction1<dev.kord.rest.builder.interaction/MessageCommandModifyBuilder, kotlin/Unit>): dev.kord.core.entity.application/GuildMessageCommand // dev.kord.core.behavior/GuildMessageCommandBehavior.edit|edit(kotlin.coroutines.SuspendFunction1<dev.kord.rest.builder.interaction.MessageCommandModifyBuilder,kotlin.Unit>){}[0]
}

abstract interface dev.kord.core.behavior/GuildScheduledEventBehavior : dev.kord.core.entity/KordEntity, dev.kord.core.entity/Strategizable { // dev.kord.core.behavior/GuildScheduledEventBehavior|null[0]
    abstract val guildId // dev.kord.core.behavior/GuildScheduledEventBehavior.guildId|{}guildId[0]
        abstract fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.behavior/GuildScheduledEventBehavior.guildId.<get-guildId>|<get-guildId>(){}[0]
    open val members // dev.kord.core.behavior/GuildScheduledEventBehavior.members|{}members[0]
        open fun <get-members>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Member> // dev.kord.core.behavior/GuildScheduledEventBehavior.members.<get-members>|<get-members>(){}[0]
    open val users // dev.kord.core.behavior/GuildScheduledEventBehavior.users|{}users[0]
        open fun <get-users>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/User> // dev.kord.core.behavior/GuildScheduledEventBehavior.users.<get-users>|<get-users>(){}[0]

    open fun getMembersAfter(dev.kord.common.entity/Snowflake, kotlin/Int? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Member> // dev.kord.core.behavior/GuildScheduledEventBehavior.getMembersAfter|getMembersAfter(dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    open fun getMembersBefore(dev.kord.common.entity/Snowflake, kotlin/Int? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Member> // dev.kord.core.behavior/GuildScheduledEventBehavior.getMembersBefore|getMembersBefore(dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    open fun getUsersAfter(dev.kord.common.entity/Snowflake, kotlin/Int? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/User> // dev.kord.core.behavior/GuildScheduledEventBehavior.getUsersAfter|getUsersAfter(dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    open fun getUsersBefore(dev.kord.common.entity/Snowflake, kotlin/Int? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/User> // dev.kord.core.behavior/GuildScheduledEventBehavior.getUsersBefore|getUsersBefore(dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    open suspend fun asGuildScheduledEvent(): dev.kord.core.entity/GuildScheduledEvent // dev.kord.core.behavior/GuildScheduledEventBehavior.asGuildScheduledEvent|asGuildScheduledEvent(){}[0]
    open suspend fun asGuildScheduledEventOrNull(): dev.kord.core.entity/GuildScheduledEvent? // dev.kord.core.behavior/GuildScheduledEventBehavior.asGuildScheduledEventOrNull|asGuildScheduledEventOrNull(){}[0]
    open suspend fun delete() // dev.kord.core.behavior/GuildScheduledEventBehavior.delete|delete(){}[0]
    open suspend fun fetchGuildScheduledEvent(): dev.kord.core.entity/GuildScheduledEvent // dev.kord.core.behavior/GuildScheduledEventBehavior.fetchGuildScheduledEvent|fetchGuildScheduledEvent(){}[0]
    open suspend fun fetchGuildScheduledEventOrNull(): dev.kord.core.entity/GuildScheduledEvent? // dev.kord.core.behavior/GuildScheduledEventBehavior.fetchGuildScheduledEventOrNull|fetchGuildScheduledEventOrNull(){}[0]
}

abstract interface dev.kord.core.behavior/GuildUserCommandBehavior : dev.kord.core.behavior/GuildApplicationCommandBehavior, dev.kord.core.behavior/UserCommandBehavior { // dev.kord.core.behavior/GuildUserCommandBehavior|null[0]
    open suspend fun edit(kotlin.coroutines/SuspendFunction1<dev.kord.rest.builder.interaction/UserCommandModifyBuilder, kotlin/Unit>): dev.kord.core.entity.application/GuildUserCommand // dev.kord.core.behavior/GuildUserCommandBehavior.edit|edit(kotlin.coroutines.SuspendFunction1<dev.kord.rest.builder.interaction.UserCommandModifyBuilder,kotlin.Unit>){}[0]
}

abstract interface dev.kord.core.behavior/MemberBehavior : dev.kord.core.behavior/UserBehavior, dev.kord.core.entity/KordEntity { // dev.kord.core.behavior/MemberBehavior|null[0]
    abstract val guildId // dev.kord.core.behavior/MemberBehavior.guildId|{}guildId[0]
        abstract fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.behavior/MemberBehavior.guildId.<get-guildId>|<get-guildId>(){}[0]
    open val guild // dev.kord.core.behavior/MemberBehavior.guild|{}guild[0]
        open fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.behavior/MemberBehavior.guild.<get-guild>|<get-guild>(){}[0]

    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior/MemberBehavior // dev.kord.core.behavior/MemberBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun addRole(dev.kord.common.entity/Snowflake, kotlin/String? = ...) // dev.kord.core.behavior/MemberBehavior.addRole|addRole(dev.kord.common.entity.Snowflake;kotlin.String?){}[0]
    open suspend fun asMember(): dev.kord.core.entity/Member // dev.kord.core.behavior/MemberBehavior.asMember|asMember(){}[0]
    open suspend fun asMemberOrNull(): dev.kord.core.entity/Member? // dev.kord.core.behavior/MemberBehavior.asMemberOrNull|asMemberOrNull(){}[0]
    open suspend fun fetchMember(): dev.kord.core.entity/Member // dev.kord.core.behavior/MemberBehavior.fetchMember|fetchMember(){}[0]
    open suspend fun fetchMemberOrNull(): dev.kord.core.entity/Member? // dev.kord.core.behavior/MemberBehavior.fetchMemberOrNull|fetchMemberOrNull(){}[0]
    open suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.behavior/MemberBehavior.getGuild|getGuild(){}[0]
    open suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.behavior/MemberBehavior.getGuildOrNull|getGuildOrNull(){}[0]
    open suspend fun getPresence(): dev.kord.core.entity/Presence // dev.kord.core.behavior/MemberBehavior.getPresence|getPresence(){}[0]
    open suspend fun getPresenceOrNull(): dev.kord.core.entity/Presence? // dev.kord.core.behavior/MemberBehavior.getPresenceOrNull|getPresenceOrNull(){}[0]
    open suspend fun getVoiceState(): dev.kord.core.entity/VoiceState // dev.kord.core.behavior/MemberBehavior.getVoiceState|getVoiceState(){}[0]
    open suspend fun getVoiceStateOrNull(): dev.kord.core.entity/VoiceState? // dev.kord.core.behavior/MemberBehavior.getVoiceStateOrNull|getVoiceStateOrNull(){}[0]
    open suspend fun kick(kotlin/String? = ...) // dev.kord.core.behavior/MemberBehavior.kick|kick(kotlin.String?){}[0]
    open suspend fun removeRole(dev.kord.common.entity/Snowflake, kotlin/String? = ...) // dev.kord.core.behavior/MemberBehavior.removeRole|removeRole(dev.kord.common.entity.Snowflake;kotlin.String?){}[0]
}

abstract interface dev.kord.core.behavior/MessageBehavior : dev.kord.core.entity/KordEntity, dev.kord.core.entity/Strategizable { // dev.kord.core.behavior/MessageBehavior|null[0]
    abstract val channelId // dev.kord.core.behavior/MessageBehavior.channelId|{}channelId[0]
        abstract fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.behavior/MessageBehavior.channelId.<get-channelId>|<get-channelId>(){}[0]
    open val channel // dev.kord.core.behavior/MessageBehavior.channel|{}channel[0]
        open fun <get-channel>(): dev.kord.core.behavior.channel/MessageChannelBehavior // dev.kord.core.behavior/MessageBehavior.channel.<get-channel>|<get-channel>(){}[0]

    open fun getReactors(dev.kord.core.entity/ReactionEmoji): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/User> // dev.kord.core.behavior/MessageBehavior.getReactors|getReactors(dev.kord.core.entity.ReactionEmoji){}[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior/MessageBehavior // dev.kord.core.behavior/MessageBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun addReaction(dev.kord.core.entity/GuildEmoji) // dev.kord.core.behavior/MessageBehavior.addReaction|addReaction(dev.kord.core.entity.GuildEmoji){}[0]
    open suspend fun addReaction(dev.kord.core.entity/ReactionEmoji) // dev.kord.core.behavior/MessageBehavior.addReaction|addReaction(dev.kord.core.entity.ReactionEmoji){}[0]
    open suspend fun asMessage(): dev.kord.core.entity/Message // dev.kord.core.behavior/MessageBehavior.asMessage|asMessage(){}[0]
    open suspend fun asMessageOrNull(): dev.kord.core.entity/Message? // dev.kord.core.behavior/MessageBehavior.asMessageOrNull|asMessageOrNull(){}[0]
    open suspend fun delete(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake? = ...) // dev.kord.core.behavior/MessageBehavior.delete|delete(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake?){}[0]
    open suspend fun delete(kotlin/String? = ...) // dev.kord.core.behavior/MessageBehavior.delete|delete(kotlin.String?){}[0]
    open suspend fun deleteAllReactions() // dev.kord.core.behavior/MessageBehavior.deleteAllReactions|deleteAllReactions(){}[0]
    open suspend fun deleteOwnReaction(dev.kord.core.entity/ReactionEmoji) // dev.kord.core.behavior/MessageBehavior.deleteOwnReaction|deleteOwnReaction(dev.kord.core.entity.ReactionEmoji){}[0]
    open suspend fun deleteReaction(dev.kord.common.entity/Snowflake, dev.kord.core.entity/ReactionEmoji) // dev.kord.core.behavior/MessageBehavior.deleteReaction|deleteReaction(dev.kord.common.entity.Snowflake;dev.kord.core.entity.ReactionEmoji){}[0]
    open suspend fun deleteReaction(dev.kord.core.entity/ReactionEmoji) // dev.kord.core.behavior/MessageBehavior.deleteReaction|deleteReaction(dev.kord.core.entity.ReactionEmoji){}[0]
    open suspend fun fetchMessage(): dev.kord.core.entity/Message // dev.kord.core.behavior/MessageBehavior.fetchMessage|fetchMessage(){}[0]
    open suspend fun fetchMessageOrNull(): dev.kord.core.entity/Message? // dev.kord.core.behavior/MessageBehavior.fetchMessageOrNull|fetchMessageOrNull(){}[0]
    open suspend fun getChannel(): dev.kord.core.entity.channel/MessageChannel // dev.kord.core.behavior/MessageBehavior.getChannel|getChannel(){}[0]
    open suspend fun getChannelOrNull(): dev.kord.core.entity.channel/MessageChannel? // dev.kord.core.behavior/MessageBehavior.getChannelOrNull|getChannelOrNull(){}[0]
    open suspend fun pin(kotlin/String? = ...) // dev.kord.core.behavior/MessageBehavior.pin|pin(kotlin.String?){}[0]
    open suspend fun publish(): dev.kord.core.entity/Message // dev.kord.core.behavior/MessageBehavior.publish|publish(){}[0]
    open suspend fun unpin(kotlin/String? = ...) // dev.kord.core.behavior/MessageBehavior.unpin|unpin(kotlin.String?){}[0]
}

abstract interface dev.kord.core.behavior/MessageCommandBehavior : dev.kord.core.behavior/ApplicationCommandBehavior { // dev.kord.core.behavior/MessageCommandBehavior|null[0]
    abstract suspend fun edit(kotlin.coroutines/SuspendFunction1<dev.kord.rest.builder.interaction/MessageCommandModifyBuilder, kotlin/Unit>): dev.kord.core.entity.application/MessageCommand // dev.kord.core.behavior/MessageCommandBehavior.edit|edit(kotlin.coroutines.SuspendFunction1<dev.kord.rest.builder.interaction.MessageCommandModifyBuilder,kotlin.Unit>){}[0]
}

abstract interface dev.kord.core.behavior/RoleBehavior : dev.kord.core.entity/KordEntity, dev.kord.core.entity/Strategizable { // dev.kord.core.behavior/RoleBehavior|null[0]
    abstract val guildId // dev.kord.core.behavior/RoleBehavior.guildId|{}guildId[0]
        abstract fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.behavior/RoleBehavior.guildId.<get-guildId>|<get-guildId>(){}[0]
    open val guild // dev.kord.core.behavior/RoleBehavior.guild|{}guild[0]
        open fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.behavior/RoleBehavior.guild.<get-guild>|<get-guild>(){}[0]
    open val mention // dev.kord.core.behavior/RoleBehavior.mention|{}mention[0]
        open fun <get-mention>(): kotlin/String // dev.kord.core.behavior/RoleBehavior.mention.<get-mention>|<get-mention>(){}[0]

    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior/RoleBehavior // dev.kord.core.behavior/RoleBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun asRole(): dev.kord.core.entity/Role // dev.kord.core.behavior/RoleBehavior.asRole|asRole(){}[0]
    open suspend fun asRoleOrNull(): dev.kord.core.entity/Role? // dev.kord.core.behavior/RoleBehavior.asRoleOrNull|asRoleOrNull(){}[0]
    open suspend fun changePosition(kotlin/Int): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Role> // dev.kord.core.behavior/RoleBehavior.changePosition|changePosition(kotlin.Int){}[0]
    open suspend fun delete(kotlin/String? = ...) // dev.kord.core.behavior/RoleBehavior.delete|delete(kotlin.String?){}[0]
    open suspend fun fetchRole(): dev.kord.core.entity/Role // dev.kord.core.behavior/RoleBehavior.fetchRole|fetchRole(){}[0]
    open suspend fun fetchRoleOrNull(): dev.kord.core.entity/Role? // dev.kord.core.behavior/RoleBehavior.fetchRoleOrNull|fetchRoleOrNull(){}[0]
    open suspend fun getPosition(): kotlin/Int // dev.kord.core.behavior/RoleBehavior.getPosition|getPosition(){}[0]
}

abstract interface dev.kord.core.behavior/StageInstanceBehavior : dev.kord.core.entity/KordEntity, dev.kord.core.entity/Strategizable { // dev.kord.core.behavior/StageInstanceBehavior|null[0]
    abstract val channelId // dev.kord.core.behavior/StageInstanceBehavior.channelId|{}channelId[0]
        abstract fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.behavior/StageInstanceBehavior.channelId.<get-channelId>|<get-channelId>(){}[0]

    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior/StageInstanceBehavior // dev.kord.core.behavior/StageInstanceBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun asStageInstance(): dev.kord.core.entity/StageInstance // dev.kord.core.behavior/StageInstanceBehavior.asStageInstance|asStageInstance(){}[0]
    open suspend fun asStageInstanceOrNull(): dev.kord.core.entity/StageInstance? // dev.kord.core.behavior/StageInstanceBehavior.asStageInstanceOrNull|asStageInstanceOrNull(){}[0]
    open suspend fun delete(kotlin/String? = ...) // dev.kord.core.behavior/StageInstanceBehavior.delete|delete(kotlin.String?){}[0]
    open suspend fun fetchStageInstance(): dev.kord.core.entity/StageInstance // dev.kord.core.behavior/StageInstanceBehavior.fetchStageInstance|fetchStageInstance(){}[0]
    open suspend fun fetchStageInstanceOrNull(): dev.kord.core.entity/StageInstance? // dev.kord.core.behavior/StageInstanceBehavior.fetchStageInstanceOrNull|fetchStageInstanceOrNull(){}[0]
}

abstract interface dev.kord.core.behavior/StickerBehavior : dev.kord.core.entity/KordEntity, dev.kord.core.entity/Strategizable { // dev.kord.core.behavior/StickerBehavior|null[0]
    abstract val guildId // dev.kord.core.behavior/StickerBehavior.guildId|{}guildId[0]
        abstract fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.behavior/StickerBehavior.guildId.<get-guildId>|<get-guildId>(){}[0]

    open suspend fun asSticker(): dev.kord.core.entity/Sticker // dev.kord.core.behavior/StickerBehavior.asSticker|asSticker(){}[0]
    open suspend fun asStickerOrNull(): dev.kord.core.entity/Sticker? // dev.kord.core.behavior/StickerBehavior.asStickerOrNull|asStickerOrNull(){}[0]
    open suspend fun delete() // dev.kord.core.behavior/StickerBehavior.delete|delete(){}[0]
    open suspend fun fetchSticker(): dev.kord.core.entity/Sticker // dev.kord.core.behavior/StickerBehavior.fetchSticker|fetchSticker(){}[0]
    open suspend fun fetchStickerOrNull(): dev.kord.core.entity/Sticker? // dev.kord.core.behavior/StickerBehavior.fetchStickerOrNull|fetchStickerOrNull(){}[0]
}

abstract interface dev.kord.core.behavior/TemplateBehavior : dev.kord.core/KordObject { // dev.kord.core.behavior/TemplateBehavior|null[0]
    abstract val code // dev.kord.core.behavior/TemplateBehavior.code|{}code[0]
        abstract fun <get-code>(): kotlin/String // dev.kord.core.behavior/TemplateBehavior.code.<get-code>|<get-code>(){}[0]
    abstract val guildId // dev.kord.core.behavior/TemplateBehavior.guildId|{}guildId[0]
        abstract fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.behavior/TemplateBehavior.guildId.<get-guildId>|<get-guildId>(){}[0]

    open suspend fun delete(): dev.kord.core.entity/Template // dev.kord.core.behavior/TemplateBehavior.delete|delete(){}[0]
    open suspend fun sync(): dev.kord.core.entity/Template // dev.kord.core.behavior/TemplateBehavior.sync|sync(){}[0]
}

abstract interface dev.kord.core.behavior/ThreadMemberBehavior : dev.kord.core.behavior/UserBehavior { // dev.kord.core.behavior/ThreadMemberBehavior|null[0]
    abstract val threadId // dev.kord.core.behavior/ThreadMemberBehavior.threadId|{}threadId[0]
        abstract fun <get-threadId>(): dev.kord.common.entity/Snowflake // dev.kord.core.behavior/ThreadMemberBehavior.threadId.<get-threadId>|<get-threadId>(){}[0]

    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior/UserBehavior // dev.kord.core.behavior/ThreadMemberBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun getThread(): dev.kord.core.entity.channel.thread/ThreadChannel // dev.kord.core.behavior/ThreadMemberBehavior.getThread|getThread(){}[0]
    open suspend fun getThreadOrNull(): dev.kord.core.entity.channel.thread/ThreadChannel? // dev.kord.core.behavior/ThreadMemberBehavior.getThreadOrNull|getThreadOrNull(){}[0]
}

abstract interface dev.kord.core.behavior/UserBehavior : dev.kord.core.entity/KordEntity, dev.kord.core.entity/Strategizable { // dev.kord.core.behavior/UserBehavior|null[0]
    open val mention // dev.kord.core.behavior/UserBehavior.mention|{}mention[0]
        open fun <get-mention>(): kotlin/String // dev.kord.core.behavior/UserBehavior.mention.<get-mention>|<get-mention>(){}[0]

    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior/UserBehavior // dev.kord.core.behavior/UserBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun asMember(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Member // dev.kord.core.behavior/UserBehavior.asMember|asMember(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun asMemberOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Member? // dev.kord.core.behavior/UserBehavior.asMemberOrNull|asMemberOrNull(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun asUser(): dev.kord.core.entity/User // dev.kord.core.behavior/UserBehavior.asUser|asUser(){}[0]
    open suspend fun asUserOrNull(): dev.kord.core.entity/User? // dev.kord.core.behavior/UserBehavior.asUserOrNull|asUserOrNull(){}[0]
    open suspend fun fetchMember(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Member // dev.kord.core.behavior/UserBehavior.fetchMember|fetchMember(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun fetchMemberOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Member? // dev.kord.core.behavior/UserBehavior.fetchMemberOrNull|fetchMemberOrNull(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun fetchUser(): dev.kord.core.entity/User // dev.kord.core.behavior/UserBehavior.fetchUser|fetchUser(){}[0]
    open suspend fun fetchUserOrNull(): dev.kord.core.entity/User? // dev.kord.core.behavior/UserBehavior.fetchUserOrNull|fetchUserOrNull(){}[0]
    open suspend fun getDmChannel(): dev.kord.core.entity.channel/DmChannel // dev.kord.core.behavior/UserBehavior.getDmChannel|getDmChannel(){}[0]
    open suspend fun getDmChannelOrNull(): dev.kord.core.entity.channel/DmChannel? // dev.kord.core.behavior/UserBehavior.getDmChannelOrNull|getDmChannelOrNull(){}[0]
}

abstract interface dev.kord.core.behavior/UserCommandBehavior : dev.kord.core.behavior/ApplicationCommandBehavior { // dev.kord.core.behavior/UserCommandBehavior|null[0]
    abstract suspend fun edit(kotlin.coroutines/SuspendFunction1<dev.kord.rest.builder.interaction/UserCommandModifyBuilder, kotlin/Unit>): dev.kord.core.entity.application/UserCommand // dev.kord.core.behavior/UserCommandBehavior.edit|edit(kotlin.coroutines.SuspendFunction1<dev.kord.rest.builder.interaction.UserCommandModifyBuilder,kotlin.Unit>){}[0]
}

abstract interface dev.kord.core.behavior/WebhookBehavior : dev.kord.core.entity/KordEntity, dev.kord.core.entity/Strategizable { // dev.kord.core.behavior/WebhookBehavior|null[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior/WebhookBehavior // dev.kord.core.behavior/WebhookBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun delete(kotlin/String, kotlin/String? = ...) // dev.kord.core.behavior/WebhookBehavior.delete|delete(kotlin.String;kotlin.String?){}[0]
    open suspend fun delete(kotlin/String? = ...) // dev.kord.core.behavior/WebhookBehavior.delete|delete(kotlin.String?){}[0]
    open suspend fun deleteMessage(kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake? = ...) // dev.kord.core.behavior/WebhookBehavior.deleteMessage|deleteMessage(kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?){}[0]
    open suspend fun getMessage(kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake? = ...): dev.kord.core.entity/Message // dev.kord.core.behavior/WebhookBehavior.getMessage|getMessage(kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?){}[0]
    open suspend fun getMessageOrNull(kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake? = ...): dev.kord.core.entity/Message? // dev.kord.core.behavior/WebhookBehavior.getMessageOrNull|getMessageOrNull(kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?){}[0]
}

abstract interface dev.kord.core.entity.application/GlobalApplicationCommand : dev.kord.core.behavior/GlobalApplicationCommandBehavior, dev.kord.core.entity.application/ApplicationCommand { // dev.kord.core.entity.application/GlobalApplicationCommand|null[0]
    open val dmPermission // dev.kord.core.entity.application/GlobalApplicationCommand.dmPermission|{}dmPermission[0]
        open fun <get-dmPermission>(): kotlin/Boolean // dev.kord.core.entity.application/GlobalApplicationCommand.dmPermission.<get-dmPermission>|<get-dmPermission>(){}[0]
}

abstract interface dev.kord.core.entity.channel.thread/ThreadChannel : dev.kord.core.behavior.channel.threads/ThreadChannelBehavior, dev.kord.core.entity.channel/GuildMessageChannel { // dev.kord.core.entity.channel.thread/ThreadChannel|null[0]
    open val appliedTags // dev.kord.core.entity.channel.thread/ThreadChannel.appliedTags|{}appliedTags[0]
        open fun <get-appliedTags>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.core.entity.channel.thread/ThreadChannel.appliedTags.<get-appliedTags>|<get-appliedTags>(){}[0]
    open val archiveTimestamp // dev.kord.core.entity.channel.thread/ThreadChannel.archiveTimestamp|{}archiveTimestamp[0]
        open fun <get-archiveTimestamp>(): kotlinx.datetime/Instant // dev.kord.core.entity.channel.thread/ThreadChannel.archiveTimestamp.<get-archiveTimestamp>|<get-archiveTimestamp>(){}[0]
    open val autoArchiveDuration // dev.kord.core.entity.channel.thread/ThreadChannel.autoArchiveDuration|{}autoArchiveDuration[0]
        open fun <get-autoArchiveDuration>(): dev.kord.common.entity/ArchiveDuration // dev.kord.core.entity.channel.thread/ThreadChannel.autoArchiveDuration.<get-autoArchiveDuration>|<get-autoArchiveDuration>(){}[0]
    open val createTimestamp // dev.kord.core.entity.channel.thread/ThreadChannel.createTimestamp|{}createTimestamp[0]
        open fun <get-createTimestamp>(): kotlinx.datetime/Instant? // dev.kord.core.entity.channel.thread/ThreadChannel.createTimestamp.<get-createTimestamp>|<get-createTimestamp>(){}[0]
    open val defaultAutoArchiveDuration // dev.kord.core.entity.channel.thread/ThreadChannel.defaultAutoArchiveDuration|{}defaultAutoArchiveDuration[0]
        open fun <get-defaultAutoArchiveDuration>(): dev.kord.common.entity/ArchiveDuration? // dev.kord.core.entity.channel.thread/ThreadChannel.defaultAutoArchiveDuration.<get-defaultAutoArchiveDuration>|<get-defaultAutoArchiveDuration>(){}[0]
    open val isArchived // dev.kord.core.entity.channel.thread/ThreadChannel.isArchived|{}isArchived[0]
        open fun <get-isArchived>(): kotlin/Boolean // dev.kord.core.entity.channel.thread/ThreadChannel.isArchived.<get-isArchived>|<get-isArchived>(){}[0]
    open val isLocked // dev.kord.core.entity.channel.thread/ThreadChannel.isLocked|{}isLocked[0]
        open fun <get-isLocked>(): kotlin/Boolean // dev.kord.core.entity.channel.thread/ThreadChannel.isLocked.<get-isLocked>|<get-isLocked>(){}[0]
    open val isNsfw // dev.kord.core.entity.channel.thread/ThreadChannel.isNsfw|{}isNsfw[0]
        open fun <get-isNsfw>(): kotlin/Boolean // dev.kord.core.entity.channel.thread/ThreadChannel.isNsfw.<get-isNsfw>|<get-isNsfw>(){}[0]
    open val member // dev.kord.core.entity.channel.thread/ThreadChannel.member|{}member[0]
        open fun <get-member>(): dev.kord.core.entity.channel.thread/ThreadMember? // dev.kord.core.entity.channel.thread/ThreadChannel.member.<get-member>|<get-member>(){}[0]
    open val memberCount // dev.kord.core.entity.channel.thread/ThreadChannel.memberCount|{}memberCount[0]
        open fun <get-memberCount>(): kotlin/Int? // dev.kord.core.entity.channel.thread/ThreadChannel.memberCount.<get-memberCount>|<get-memberCount>(){}[0]
    open val message // dev.kord.core.entity.channel.thread/ThreadChannel.message|{}message[0]
        open fun <get-message>(): dev.kord.core.entity/Message? // dev.kord.core.entity.channel.thread/ThreadChannel.message.<get-message>|<get-message>(){}[0]
    open val messageCount // dev.kord.core.entity.channel.thread/ThreadChannel.messageCount|{}messageCount[0]
        open fun <get-messageCount>(): kotlin/Int? // dev.kord.core.entity.channel.thread/ThreadChannel.messageCount.<get-messageCount>|<get-messageCount>(){}[0]
    open val owner // dev.kord.core.entity.channel.thread/ThreadChannel.owner|{}owner[0]
        open fun <get-owner>(): dev.kord.core.behavior/UserBehavior // dev.kord.core.entity.channel.thread/ThreadChannel.owner.<get-owner>|<get-owner>(){}[0]
    open val ownerId // dev.kord.core.entity.channel.thread/ThreadChannel.ownerId|{}ownerId[0]
        open fun <get-ownerId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.channel.thread/ThreadChannel.ownerId.<get-ownerId>|<get-ownerId>(){}[0]
    open val parentId // dev.kord.core.entity.channel.thread/ThreadChannel.parentId|{}parentId[0]
        open fun <get-parentId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.channel.thread/ThreadChannel.parentId.<get-parentId>|<get-parentId>(){}[0]
    open val rateLimitPerUser // dev.kord.core.entity.channel.thread/ThreadChannel.rateLimitPerUser|{}rateLimitPerUser[0]
        open fun <get-rateLimitPerUser>(): kotlin.time/Duration? // dev.kord.core.entity.channel.thread/ThreadChannel.rateLimitPerUser.<get-rateLimitPerUser>|<get-rateLimitPerUser>(){}[0]
    open val totalMessageSent // dev.kord.core.entity.channel.thread/ThreadChannel.totalMessageSent|{}totalMessageSent[0]
        open fun <get-totalMessageSent>(): kotlin/Int? // dev.kord.core.entity.channel.thread/ThreadChannel.totalMessageSent.<get-totalMessageSent>|<get-totalMessageSent>(){}[0]

    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.channel.thread/ThreadChannel // dev.kord.core.entity.channel.thread/ThreadChannel.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

abstract interface dev.kord.core.entity.channel/CategorizableChannel : dev.kord.core.behavior.channel/CategorizableChannelBehavior, dev.kord.core.entity.channel/TopGuildChannel { // dev.kord.core.entity.channel/CategorizableChannel|null[0]
    open val category // dev.kord.core.entity.channel/CategorizableChannel.category|{}category[0]
        open fun <get-category>(): dev.kord.core.behavior.channel/CategoryBehavior? // dev.kord.core.entity.channel/CategorizableChannel.category.<get-category>|<get-category>(){}[0]
    open val categoryId // dev.kord.core.entity.channel/CategorizableChannel.categoryId|{}categoryId[0]
        open fun <get-categoryId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity.channel/CategorizableChannel.categoryId.<get-categoryId>|<get-categoryId>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.channel/CategorizableChannel // dev.kord.core.entity.channel/CategorizableChannel.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

abstract interface dev.kord.core.entity.channel/Channel : dev.kord.core.behavior.channel/ChannelBehavior { // dev.kord.core.entity.channel/Channel|null[0]
    abstract val data // dev.kord.core.entity.channel/Channel.data|{}data[0]
        abstract fun <get-data>(): dev.kord.core.cache.data/ChannelData // dev.kord.core.entity.channel/Channel.data.<get-data>|<get-data>(){}[0]
    open val flags // dev.kord.core.entity.channel/Channel.flags|{}flags[0]
        open fun <get-flags>(): dev.kord.common.entity/ChannelFlags? // dev.kord.core.entity.channel/Channel.flags.<get-flags>|<get-flags>(){}[0]
    open val id // dev.kord.core.entity.channel/Channel.id|{}id[0]
        open fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.channel/Channel.id.<get-id>|<get-id>(){}[0]
    open val type // dev.kord.core.entity.channel/Channel.type|{}type[0]
        open fun <get-type>(): dev.kord.common.entity/ChannelType // dev.kord.core.entity.channel/Channel.type.<get-type>|<get-type>(){}[0]

    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.channel/Channel // dev.kord.core.entity.channel/Channel.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]

    final object Companion { // dev.kord.core.entity.channel/Channel.Companion|null[0]
        final fun from(dev.kord.core.cache.data/ChannelData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.entity.channel/Channel // dev.kord.core.entity.channel/Channel.Companion.from|from(dev.kord.core.cache.data.ChannelData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    }
}

abstract interface dev.kord.core.entity.channel/GuildChannel : dev.kord.core.behavior.channel/GuildChannelBehavior, dev.kord.core.entity.channel/Channel { // dev.kord.core.entity.channel/GuildChannel|null[0]
    open val guildId // dev.kord.core.entity.channel/GuildChannel.guildId|{}guildId[0]
        open fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.channel/GuildChannel.guildId.<get-guildId>|<get-guildId>(){}[0]
    open val name // dev.kord.core.entity.channel/GuildChannel.name|{}name[0]
        open fun <get-name>(): kotlin/String // dev.kord.core.entity.channel/GuildChannel.name.<get-name>|<get-name>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.channel/GuildChannel // dev.kord.core.entity.channel/GuildChannel.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

abstract interface dev.kord.core.entity.channel/GuildMessageChannel : dev.kord.core.behavior.channel/GuildMessageChannelBehavior, dev.kord.core.entity.channel/GuildChannel, dev.kord.core.entity.channel/MessageChannel { // dev.kord.core.entity.channel/GuildMessageChannel|null[0]
    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.channel/GuildMessageChannel // dev.kord.core.entity.channel/GuildMessageChannel.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

abstract interface dev.kord.core.entity.channel/MessageChannel : dev.kord.core.behavior.channel/MessageChannelBehavior, dev.kord.core.entity.channel/Channel { // dev.kord.core.entity.channel/MessageChannel|null[0]
    open val lastMessage // dev.kord.core.entity.channel/MessageChannel.lastMessage|{}lastMessage[0]
        open fun <get-lastMessage>(): dev.kord.core.behavior/MessageBehavior? // dev.kord.core.entity.channel/MessageChannel.lastMessage.<get-lastMessage>|<get-lastMessage>(){}[0]
    open val lastMessageId // dev.kord.core.entity.channel/MessageChannel.lastMessageId|{}lastMessageId[0]
        open fun <get-lastMessageId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity.channel/MessageChannel.lastMessageId.<get-lastMessageId>|<get-lastMessageId>(){}[0]
    open val lastPinTimestamp // dev.kord.core.entity.channel/MessageChannel.lastPinTimestamp|{}lastPinTimestamp[0]
        open fun <get-lastPinTimestamp>(): kotlinx.datetime/Instant? // dev.kord.core.entity.channel/MessageChannel.lastPinTimestamp.<get-lastPinTimestamp>|<get-lastPinTimestamp>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.channel/MessageChannel // dev.kord.core.entity.channel/MessageChannel.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun getLastMessage(): dev.kord.core.entity/Message? // dev.kord.core.entity.channel/MessageChannel.getLastMessage|getLastMessage(){}[0]
}

abstract interface dev.kord.core.entity.channel/ThreadParentChannel : dev.kord.core.behavior.channel.threads/ThreadParentChannelBehavior, dev.kord.core.entity.channel/CategorizableChannel { // dev.kord.core.entity.channel/ThreadParentChannel|null[0]
    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.channel/ThreadParentChannel // dev.kord.core.entity.channel/ThreadParentChannel.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

abstract interface dev.kord.core.entity.channel/TopGuildChannel : dev.kord.core.behavior.channel/TopGuildChannelBehavior, dev.kord.core.entity.channel/GuildChannel { // dev.kord.core.entity.channel/TopGuildChannel|null[0]
    open val guildId // dev.kord.core.entity.channel/TopGuildChannel.guildId|{}guildId[0]
        open fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.channel/TopGuildChannel.guildId.<get-guildId>|<get-guildId>(){}[0]
    open val permissionOverwrites // dev.kord.core.entity.channel/TopGuildChannel.permissionOverwrites|{}permissionOverwrites[0]
        open fun <get-permissionOverwrites>(): kotlin.collections/Set<dev.kord.core.entity/PermissionOverwriteEntity> // dev.kord.core.entity.channel/TopGuildChannel.permissionOverwrites.<get-permissionOverwrites>|<get-permissionOverwrites>(){}[0]
    open val rawPosition // dev.kord.core.entity.channel/TopGuildChannel.rawPosition|{}rawPosition[0]
        open fun <get-rawPosition>(): kotlin/Int // dev.kord.core.entity.channel/TopGuildChannel.rawPosition.<get-rawPosition>|<get-rawPosition>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.channel/TopGuildChannel // dev.kord.core.entity.channel/TopGuildChannel.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open fun getPermissionOverwritesForMember(dev.kord.common.entity/Snowflake): dev.kord.core.entity/PermissionOverwriteEntity? // dev.kord.core.entity.channel/TopGuildChannel.getPermissionOverwritesForMember|getPermissionOverwritesForMember(dev.kord.common.entity.Snowflake){}[0]
    open fun getPermissionOverwritesForRole(dev.kord.common.entity/Snowflake): dev.kord.core.entity/PermissionOverwriteEntity? // dev.kord.core.entity.channel/TopGuildChannel.getPermissionOverwritesForRole|getPermissionOverwritesForRole(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getEffectivePermissions(dev.kord.common.entity/Snowflake): dev.kord.common.entity/Permissions // dev.kord.core.entity.channel/TopGuildChannel.getEffectivePermissions|getEffectivePermissions(dev.kord.common.entity.Snowflake){}[0]
}

abstract interface dev.kord.core.entity.channel/TopGuildMessageChannel : dev.kord.core.behavior.channel/TopGuildMessageChannelBehavior, dev.kord.core.entity.channel/CategorizableChannel, dev.kord.core.entity.channel/GuildMessageChannel { // dev.kord.core.entity.channel/TopGuildMessageChannel|null[0]
    open val topic // dev.kord.core.entity.channel/TopGuildMessageChannel.topic|{}topic[0]
        open fun <get-topic>(): kotlin/String? // dev.kord.core.entity.channel/TopGuildMessageChannel.topic.<get-topic>|<get-topic>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.channel/TopGuildMessageChannel // dev.kord.core.entity.channel/TopGuildMessageChannel.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

abstract interface dev.kord.core.entity/Entity : kotlin/Comparable<dev.kord.core.entity/Entity> { // dev.kord.core.entity/Entity|null[0]
    abstract val id // dev.kord.core.entity/Entity.id|{}id[0]
        abstract fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/Entity.id.<get-id>|<get-id>(){}[0]

    open fun compareTo(dev.kord.core.entity/Entity): kotlin/Int // dev.kord.core.entity/Entity.compareTo|compareTo(dev.kord.core.entity.Entity){}[0]

    final object Companion { // dev.kord.core.entity/Entity.Companion|null[0]
        final val comparator // dev.kord.core.entity/Entity.Companion.comparator|{}comparator[0]
            final fun <get-comparator>(): kotlin/Comparator<dev.kord.core.entity/Entity> // dev.kord.core.entity/Entity.Companion.comparator.<get-comparator>|<get-comparator>(){}[0]
    }
}

abstract interface dev.kord.core.entity/KordEntity : dev.kord.core.entity/Entity, dev.kord.core/KordObject // dev.kord.core.entity/KordEntity|null[0]

abstract interface dev.kord.core.entity/Strategizable { // dev.kord.core.entity/Strategizable|null[0]
    abstract val supplier // dev.kord.core.entity/Strategizable.supplier|{}supplier[0]
        abstract fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/Strategizable.supplier.<get-supplier>|<get-supplier>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/Strategizable // dev.kord.core.entity/Strategizable.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

abstract interface dev.kord.core.event.channel/ChannelCreateEvent : dev.kord.core.event/Event { // dev.kord.core.event.channel/ChannelCreateEvent|null[0]
    abstract val channel // dev.kord.core.event.channel/ChannelCreateEvent.channel|{}channel[0]
        abstract fun <get-channel>(): dev.kord.core.entity.channel/Channel // dev.kord.core.event.channel/ChannelCreateEvent.channel.<get-channel>|<get-channel>(){}[0]
    open val kord // dev.kord.core.event.channel/ChannelCreateEvent.kord|{}kord[0]
        open fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.channel/ChannelCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
}

abstract interface dev.kord.core.event.channel/ChannelDeleteEvent : dev.kord.core.event/Event { // dev.kord.core.event.channel/ChannelDeleteEvent|null[0]
    abstract val channel // dev.kord.core.event.channel/ChannelDeleteEvent.channel|{}channel[0]
        abstract fun <get-channel>(): dev.kord.core.entity.channel/Channel // dev.kord.core.event.channel/ChannelDeleteEvent.channel.<get-channel>|<get-channel>(){}[0]
    open val kord // dev.kord.core.event.channel/ChannelDeleteEvent.kord|{}kord[0]
        open fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.channel/ChannelDeleteEvent.kord.<get-kord>|<get-kord>(){}[0]
}

abstract interface dev.kord.core.event.channel/ChannelUpdateEvent : dev.kord.core.event/Event { // dev.kord.core.event.channel/ChannelUpdateEvent|null[0]
    abstract val channel // dev.kord.core.event.channel/ChannelUpdateEvent.channel|{}channel[0]
        abstract fun <get-channel>(): dev.kord.core.entity.channel/Channel // dev.kord.core.event.channel/ChannelUpdateEvent.channel.<get-channel>|<get-channel>(){}[0]
    abstract val old // dev.kord.core.event.channel/ChannelUpdateEvent.old|{}old[0]
        abstract fun <get-old>(): dev.kord.core.entity.channel/Channel? // dev.kord.core.event.channel/ChannelUpdateEvent.old.<get-old>|<get-old>(){}[0]
    open val kord // dev.kord.core.event.channel/ChannelUpdateEvent.kord|{}kord[0]
        open fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.channel/ChannelUpdateEvent.kord.<get-kord>|<get-kord>(){}[0]
}

abstract interface dev.kord.core.event/Event : dev.kord.core/KordObject { // dev.kord.core.event/Event|null[0]
    abstract val customContext // dev.kord.core.event/Event.customContext|{}customContext[0]
        abstract fun <get-customContext>(): kotlin/Any? // dev.kord.core.event/Event.customContext.<get-customContext>|<get-customContext>(){}[0]
    abstract val shard // dev.kord.core.event/Event.shard|{}shard[0]
        abstract fun <get-shard>(): kotlin/Int // dev.kord.core.event/Event.shard.<get-shard>|<get-shard>(){}[0]
    open val gateway // dev.kord.core.event/Event.gateway|{}gateway[0]
        open fun <get-gateway>(): dev.kord.gateway/Gateway // dev.kord.core.event/Event.gateway.<get-gateway>|<get-gateway>(){}[0]
}

abstract interface dev.kord.core.gateway.handler/GatewayEventInterceptor { // dev.kord.core.gateway.handler/GatewayEventInterceptor|null[0]
    abstract suspend fun handle(dev.kord.core.gateway/ShardEvent, dev.kord.core/Kord): dev.kord.core.event/Event? // dev.kord.core.gateway.handler/GatewayEventInterceptor.handle|handle(dev.kord.core.gateway.ShardEvent;dev.kord.core.Kord){}[0]

    final object Companion { // dev.kord.core.gateway.handler/GatewayEventInterceptor.Companion|null[0]
        final fun none(): dev.kord.core.gateway.handler/GatewayEventInterceptor // dev.kord.core.gateway.handler/GatewayEventInterceptor.Companion.none|none(){}[0]
    }
}

abstract interface dev.kord.core.gateway/MasterGateway { // dev.kord.core.gateway/MasterGateway|null[0]
    abstract val averagePing // dev.kord.core.gateway/MasterGateway.averagePing|{}averagePing[0]
        abstract fun <get-averagePing>(): kotlin.time/Duration? // dev.kord.core.gateway/MasterGateway.averagePing.<get-averagePing>|<get-averagePing>(){}[0]
    abstract val events // dev.kord.core.gateway/MasterGateway.events|{}events[0]
        abstract fun <get-events>(): kotlinx.coroutines.flow/Flow<dev.kord.core.gateway/ShardEvent> // dev.kord.core.gateway/MasterGateway.events.<get-events>|<get-events>(){}[0]
    abstract val gateways // dev.kord.core.gateway/MasterGateway.gateways|{}gateways[0]
        abstract fun <get-gateways>(): kotlin.collections/Map<kotlin/Int, dev.kord.gateway/Gateway> // dev.kord.core.gateway/MasterGateway.gateways.<get-gateways>|<get-gateways>(){}[0]

    open suspend fun detachAll() // dev.kord.core.gateway/MasterGateway.detachAll|detachAll(){}[0]
    open suspend fun sendAll(dev.kord.gateway/Command) // dev.kord.core.gateway/MasterGateway.sendAll|sendAll(dev.kord.gateway.Command){}[0]
    open suspend fun startWithConfig(dev.kord.gateway/GatewayConfiguration) // dev.kord.core.gateway/MasterGateway.startWithConfig|startWithConfig(dev.kord.gateway.GatewayConfiguration){}[0]
    open suspend fun stopAll() // dev.kord.core.gateway/MasterGateway.stopAll|stopAll(){}[0]
}

abstract interface dev.kord.core.live/LiveKordEntity : dev.kord.core.entity/KordEntity, kotlinx.coroutines/CoroutineScope { // dev.kord.core.live/LiveKordEntity|null[0]
    abstract val events // dev.kord.core.live/LiveKordEntity.events|{}events[0]
        abstract fun <get-events>(): kotlinx.coroutines.flow/Flow<dev.kord.core.event/Event> // dev.kord.core.live/LiveKordEntity.events.<get-events>|<get-events>(){}[0]

    abstract fun shutDown(kotlin.coroutines.cancellation/CancellationException = ...) // dev.kord.core.live/LiveKordEntity.shutDown|shutDown(kotlin.coroutines.cancellation.CancellationException){}[0]
}

abstract interface dev.kord.core.supplier/EntitySupplier { // dev.kord.core.supplier/EntitySupplier|null[0]
    abstract val guilds // dev.kord.core.supplier/EntitySupplier.guilds|{}guilds[0]
        abstract fun <get-guilds>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Guild> // dev.kord.core.supplier/EntitySupplier.guilds.<get-guilds>|<get-guilds>(){}[0]
    abstract val regions // dev.kord.core.supplier/EntitySupplier.regions|{}regions[0]
        abstract fun <get-regions>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Region> // dev.kord.core.supplier/EntitySupplier.regions.<get-regions>|<get-regions>(){}[0]

    abstract fun getActiveThreads(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadChannel> // dev.kord.core.supplier/EntitySupplier.getActiveThreads|getActiveThreads(dev.kord.common.entity.Snowflake){}[0]
    abstract fun getAutoModerationRules(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.automoderation/AutoModerationRule> // dev.kord.core.supplier/EntitySupplier.getAutoModerationRules|getAutoModerationRules(dev.kord.common.entity.Snowflake){}[0]
    abstract fun getChannelPins(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Message> // dev.kord.core.supplier/EntitySupplier.getChannelPins|getChannelPins(dev.kord.common.entity.Snowflake){}[0]
    abstract fun getChannelWebhooks(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Webhook> // dev.kord.core.supplier/EntitySupplier.getChannelWebhooks|getChannelWebhooks(dev.kord.common.entity.Snowflake){}[0]
    abstract fun getCurrentUserGuilds(kotlin/Int? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Guild> // dev.kord.core.supplier/EntitySupplier.getCurrentUserGuilds|getCurrentUserGuilds(kotlin.Int?){}[0]
    abstract fun getEmojis(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/GuildEmoji> // dev.kord.core.supplier/EntitySupplier.getEmojis|getEmojis(dev.kord.common.entity.Snowflake){}[0]
    abstract fun getGlobalApplicationCommands(dev.kord.common.entity/Snowflake, kotlin/Boolean? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.application/GlobalApplicationCommand> // dev.kord.core.supplier/EntitySupplier.getGlobalApplicationCommands|getGlobalApplicationCommands(dev.kord.common.entity.Snowflake;kotlin.Boolean?){}[0]
    abstract fun getGuildApplicationCommandPermissions(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.application/ApplicationCommandPermissions> // dev.kord.core.supplier/EntitySupplier.getGuildApplicationCommandPermissions|getGuildApplicationCommandPermissions(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    abstract fun getGuildApplicationCommands(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Boolean? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.application/GuildApplicationCommand> // dev.kord.core.supplier/EntitySupplier.getGuildApplicationCommands|getGuildApplicationCommands(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Boolean?){}[0]
    abstract fun getGuildBans(dev.kord.common.entity/Snowflake, kotlin/Int? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Ban> // dev.kord.core.supplier/EntitySupplier.getGuildBans|getGuildBans(dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    abstract fun getGuildChannels(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel/TopGuildChannel> // dev.kord.core.supplier/EntitySupplier.getGuildChannels|getGuildChannels(dev.kord.common.entity.Snowflake){}[0]
    abstract fun getGuildMembers(dev.kord.common.entity/Snowflake, kotlin/Int? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Member> // dev.kord.core.supplier/EntitySupplier.getGuildMembers|getGuildMembers(dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    abstract fun getGuildRoles(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Role> // dev.kord.core.supplier/EntitySupplier.getGuildRoles|getGuildRoles(dev.kord.common.entity.Snowflake){}[0]
    abstract fun getGuildScheduledEventMembersAfter(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Member> // dev.kord.core.supplier/EntitySupplier.getGuildScheduledEventMembersAfter|getGuildScheduledEventMembersAfter(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    abstract fun getGuildScheduledEventMembersBefore(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Member> // dev.kord.core.supplier/EntitySupplier.getGuildScheduledEventMembersBefore|getGuildScheduledEventMembersBefore(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    abstract fun getGuildScheduledEventUsersAfter(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/User> // dev.kord.core.supplier/EntitySupplier.getGuildScheduledEventUsersAfter|getGuildScheduledEventUsersAfter(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    abstract fun getGuildScheduledEventUsersBefore(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/User> // dev.kord.core.supplier/EntitySupplier.getGuildScheduledEventUsersBefore|getGuildScheduledEventUsersBefore(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    abstract fun getGuildScheduledEvents(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/GuildScheduledEvent> // dev.kord.core.supplier/EntitySupplier.getGuildScheduledEvents|getGuildScheduledEvents(dev.kord.common.entity.Snowflake){}[0]
    abstract fun getGuildStickers(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/GuildSticker> // dev.kord.core.supplier/EntitySupplier.getGuildStickers|getGuildStickers(dev.kord.common.entity.Snowflake){}[0]
    abstract fun getGuildVoiceRegions(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Region> // dev.kord.core.supplier/EntitySupplier.getGuildVoiceRegions|getGuildVoiceRegions(dev.kord.common.entity.Snowflake){}[0]
    abstract fun getGuildWebhooks(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Webhook> // dev.kord.core.supplier/EntitySupplier.getGuildWebhooks|getGuildWebhooks(dev.kord.common.entity.Snowflake){}[0]
    abstract fun getJoinedPrivateArchivedThreads(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake? = ..., kotlin/Int? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadChannel> // dev.kord.core.supplier/EntitySupplier.getJoinedPrivateArchivedThreads|getJoinedPrivateArchivedThreads(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?;kotlin.Int?){}[0]
    abstract fun getMessagesAfter(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Message> // dev.kord.core.supplier/EntitySupplier.getMessagesAfter|getMessagesAfter(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    abstract fun getMessagesAround(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Message> // dev.kord.core.supplier/EntitySupplier.getMessagesAround|getMessagesAround(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int){}[0]
    abstract fun getMessagesBefore(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Message> // dev.kord.core.supplier/EntitySupplier.getMessagesBefore|getMessagesBefore(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    abstract fun getNitroStickerPacks(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/StickerPack> // dev.kord.core.supplier/EntitySupplier.getNitroStickerPacks|getNitroStickerPacks(){}[0]
    abstract fun getPrivateArchivedThreads(dev.kord.common.entity/Snowflake, kotlinx.datetime/Instant? = ..., kotlin/Int? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadChannel> // dev.kord.core.supplier/EntitySupplier.getPrivateArchivedThreads|getPrivateArchivedThreads(dev.kord.common.entity.Snowflake;kotlinx.datetime.Instant?;kotlin.Int?){}[0]
    abstract fun getPublicArchivedThreads(dev.kord.common.entity/Snowflake, kotlinx.datetime/Instant? = ..., kotlin/Int? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadChannel> // dev.kord.core.supplier/EntitySupplier.getPublicArchivedThreads|getPublicArchivedThreads(dev.kord.common.entity.Snowflake;kotlinx.datetime.Instant?;kotlin.Int?){}[0]
    abstract fun getTemplates(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Template> // dev.kord.core.supplier/EntitySupplier.getTemplates|getTemplates(dev.kord.common.entity.Snowflake){}[0]
    abstract fun getThreadMembers(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadMember> // dev.kord.core.supplier/EntitySupplier.getThreadMembers|getThreadMembers(dev.kord.common.entity.Snowflake){}[0]
    abstract suspend fun getApplicationCommandPermissionsOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity.application/ApplicationCommandPermissions? // dev.kord.core.supplier/EntitySupplier.getApplicationCommandPermissionsOrNull|getApplicationCommandPermissionsOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    abstract suspend fun getAutoModerationRuleOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity.automoderation/AutoModerationRule? // dev.kord.core.supplier/EntitySupplier.getAutoModerationRuleOrNull|getAutoModerationRuleOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    abstract suspend fun getChannelOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity.channel/Channel? // dev.kord.core.supplier/EntitySupplier.getChannelOrNull|getChannelOrNull(dev.kord.common.entity.Snowflake){}[0]
    abstract suspend fun getEmojiOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildEmoji? // dev.kord.core.supplier/EntitySupplier.getEmojiOrNull|getEmojiOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    abstract suspend fun getFollowupMessageOrNull(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake): dev.kord.core.entity.interaction.followup/FollowupMessage? // dev.kord.core.supplier/EntitySupplier.getFollowupMessageOrNull|getFollowupMessageOrNull(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake){}[0]
    abstract suspend fun getGlobalApplicationCommandOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity.application/GlobalApplicationCommand? // dev.kord.core.supplier/EntitySupplier.getGlobalApplicationCommandOrNull|getGlobalApplicationCommandOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    abstract suspend fun getGuildApplicationCommandOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity.application/GuildApplicationCommand? // dev.kord.core.supplier/EntitySupplier.getGuildApplicationCommandOrNull|getGuildApplicationCommandOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    abstract suspend fun getGuildBanOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/Ban? // dev.kord.core.supplier/EntitySupplier.getGuildBanOrNull|getGuildBanOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    abstract suspend fun getGuildOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Guild? // dev.kord.core.supplier/EntitySupplier.getGuildOrNull|getGuildOrNull(dev.kord.common.entity.Snowflake){}[0]
    abstract suspend fun getGuildPreviewOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildPreview? // dev.kord.core.supplier/EntitySupplier.getGuildPreviewOrNull|getGuildPreviewOrNull(dev.kord.common.entity.Snowflake){}[0]
    abstract suspend fun getGuildScheduledEventOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildScheduledEvent? // dev.kord.core.supplier/EntitySupplier.getGuildScheduledEventOrNull|getGuildScheduledEventOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    abstract suspend fun getGuildStickerOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildSticker? // dev.kord.core.supplier/EntitySupplier.getGuildStickerOrNull|getGuildStickerOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    abstract suspend fun getGuildWidgetOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildWidget? // dev.kord.core.supplier/EntitySupplier.getGuildWidgetOrNull|getGuildWidgetOrNull(dev.kord.common.entity.Snowflake){}[0]
    abstract suspend fun getMemberOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/Member? // dev.kord.core.supplier/EntitySupplier.getMemberOrNull|getMemberOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    abstract suspend fun getMessageOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/Message? // dev.kord.core.supplier/EntitySupplier.getMessageOrNull|getMessageOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    abstract suspend fun getRoleOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/Role? // dev.kord.core.supplier/EntitySupplier.getRoleOrNull|getRoleOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    abstract suspend fun getSelfOrNull(): dev.kord.core.entity/User? // dev.kord.core.supplier/EntitySupplier.getSelfOrNull|getSelfOrNull(){}[0]
    abstract suspend fun getStageInstanceOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/StageInstance? // dev.kord.core.supplier/EntitySupplier.getStageInstanceOrNull|getStageInstanceOrNull(dev.kord.common.entity.Snowflake){}[0]
    abstract suspend fun getStickerOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Sticker? // dev.kord.core.supplier/EntitySupplier.getStickerOrNull|getStickerOrNull(dev.kord.common.entity.Snowflake){}[0]
    abstract suspend fun getTemplateOrNull(kotlin/String): dev.kord.core.entity/Template? // dev.kord.core.supplier/EntitySupplier.getTemplateOrNull|getTemplateOrNull(kotlin.String){}[0]
    abstract suspend fun getUserOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/User? // dev.kord.core.supplier/EntitySupplier.getUserOrNull|getUserOrNull(dev.kord.common.entity.Snowflake){}[0]
    abstract suspend fun getWebhookMessageOrNull(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake? = ...): dev.kord.core.entity/Message? // dev.kord.core.supplier/EntitySupplier.getWebhookMessageOrNull|getWebhookMessageOrNull(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?){}[0]
    abstract suspend fun getWebhookOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Webhook? // dev.kord.core.supplier/EntitySupplier.getWebhookOrNull|getWebhookOrNull(dev.kord.common.entity.Snowflake){}[0]
    abstract suspend fun getWebhookWithTokenOrNull(dev.kord.common.entity/Snowflake, kotlin/String): dev.kord.core.entity/Webhook? // dev.kord.core.supplier/EntitySupplier.getWebhookWithTokenOrNull|getWebhookWithTokenOrNull(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    open fun getGuildScheduledEventMembers(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Member> // dev.kord.core.supplier/EntitySupplier.getGuildScheduledEventMembers|getGuildScheduledEventMembers(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    open fun getGuildScheduledEventUsers(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/User> // dev.kord.core.supplier/EntitySupplier.getGuildScheduledEventUsers|getGuildScheduledEventUsers(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    open suspend fun getApplicationCommandPermissions(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity.application/ApplicationCommandPermissions // dev.kord.core.supplier/EntitySupplier.getApplicationCommandPermissions|getApplicationCommandPermissions(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getAutoModerationRule(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity.automoderation/AutoModerationRule // dev.kord.core.supplier/EntitySupplier.getAutoModerationRule|getAutoModerationRule(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getChannel(dev.kord.common.entity/Snowflake): dev.kord.core.entity.channel/Channel // dev.kord.core.supplier/EntitySupplier.getChannel|getChannel(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getEmoji(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildEmoji // dev.kord.core.supplier/EntitySupplier.getEmoji|getEmoji(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getFollowupMessage(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake): dev.kord.core.entity.interaction.followup/FollowupMessage // dev.kord.core.supplier/EntitySupplier.getFollowupMessage|getFollowupMessage(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getGlobalApplicationCommand(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity.application/GlobalApplicationCommand // dev.kord.core.supplier/EntitySupplier.getGlobalApplicationCommand|getGlobalApplicationCommand(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getGuild(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Guild // dev.kord.core.supplier/EntitySupplier.getGuild|getGuild(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getGuildApplicationCommand(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity.application/GuildApplicationCommand // dev.kord.core.supplier/EntitySupplier.getGuildApplicationCommand|getGuildApplicationCommand(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getGuildBan(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/Ban // dev.kord.core.supplier/EntitySupplier.getGuildBan|getGuildBan(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getGuildPreview(dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildPreview // dev.kord.core.supplier/EntitySupplier.getGuildPreview|getGuildPreview(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getGuildScheduledEvent(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildScheduledEvent // dev.kord.core.supplier/EntitySupplier.getGuildScheduledEvent|getGuildScheduledEvent(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getGuildSticker(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildSticker // dev.kord.core.supplier/EntitySupplier.getGuildSticker|getGuildSticker(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getGuildWidget(dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildWidget // dev.kord.core.supplier/EntitySupplier.getGuildWidget|getGuildWidget(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getMember(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/Member // dev.kord.core.supplier/EntitySupplier.getMember|getMember(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getMessage(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/Message // dev.kord.core.supplier/EntitySupplier.getMessage|getMessage(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getRole(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/Role // dev.kord.core.supplier/EntitySupplier.getRole|getRole(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getSelf(): dev.kord.core.entity/User // dev.kord.core.supplier/EntitySupplier.getSelf|getSelf(){}[0]
    open suspend fun getStageInstance(dev.kord.common.entity/Snowflake): dev.kord.core.entity/StageInstance // dev.kord.core.supplier/EntitySupplier.getStageInstance|getStageInstance(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getSticker(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Sticker // dev.kord.core.supplier/EntitySupplier.getSticker|getSticker(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getTemplate(kotlin/String): dev.kord.core.entity/Template // dev.kord.core.supplier/EntitySupplier.getTemplate|getTemplate(kotlin.String){}[0]
    open suspend fun getUser(dev.kord.common.entity/Snowflake): dev.kord.core.entity/User // dev.kord.core.supplier/EntitySupplier.getUser|getUser(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getWebhook(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Webhook // dev.kord.core.supplier/EntitySupplier.getWebhook|getWebhook(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getWebhookMessage(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake? = ...): dev.kord.core.entity/Message // dev.kord.core.supplier/EntitySupplier.getWebhookMessage|getWebhookMessage(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?){}[0]
    open suspend fun getWebhookWithToken(dev.kord.common.entity/Snowflake, kotlin/String): dev.kord.core.entity/Webhook // dev.kord.core.supplier/EntitySupplier.getWebhookWithToken|getWebhookWithToken(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
}

abstract interface dev.kord.core/KordObject { // dev.kord.core/KordObject|null[0]
    abstract val kord // dev.kord.core/KordObject.kord|{}kord[0]
        abstract fun <get-kord>(): dev.kord.core/Kord // dev.kord.core/KordObject.kord.<get-kord>|<get-kord>(){}[0]
}

sealed interface <#A: out dev.kord.core.entity/Entity> dev.kord.core.entity.interaction/ResolvableOptionValue : dev.kord.core.entity.interaction/OptionValue<dev.kord.common.entity/Snowflake> { // dev.kord.core.entity.interaction/ResolvableOptionValue|null[0]
    abstract val resolvedObject // dev.kord.core.entity.interaction/ResolvableOptionValue.resolvedObject|{}resolvedObject[0]
        abstract fun <get-resolvedObject>(): #A? // dev.kord.core.entity.interaction/ResolvableOptionValue.resolvedObject.<get-resolvedObject>|<get-resolvedObject>(){}[0]
}

sealed interface <#A: out kotlin/Any?> dev.kord.core.entity.interaction/OptionValue { // dev.kord.core.entity.interaction/OptionValue|null[0]
    abstract val focused // dev.kord.core.entity.interaction/OptionValue.focused|{}focused[0]
        abstract fun <get-focused>(): kotlin/Boolean // dev.kord.core.entity.interaction/OptionValue.focused.<get-focused>|<get-focused>(){}[0]
    abstract val value // dev.kord.core.entity.interaction/OptionValue.value|{}value[0]
        abstract fun <get-value>(): #A // dev.kord.core.entity.interaction/OptionValue.value.<get-value>|<get-value>(){}[0]
}

sealed interface dev.kord.core.behavior.automoderation/AutoModerationRuleBehavior : dev.kord.core.entity/KordEntity, dev.kord.core.entity/Strategizable { // dev.kord.core.behavior.automoderation/AutoModerationRuleBehavior|null[0]
    abstract val guildId // dev.kord.core.behavior.automoderation/AutoModerationRuleBehavior.guildId|{}guildId[0]
        abstract fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.behavior.automoderation/AutoModerationRuleBehavior.guildId.<get-guildId>|<get-guildId>(){}[0]
    abstract val triggerType // dev.kord.core.behavior.automoderation/AutoModerationRuleBehavior.triggerType|{}triggerType[0]
        abstract fun <get-triggerType>(): dev.kord.common.entity/AutoModerationRuleTriggerType? // dev.kord.core.behavior.automoderation/AutoModerationRuleBehavior.triggerType.<get-triggerType>|<get-triggerType>(){}[0]
    open val guild // dev.kord.core.behavior.automoderation/AutoModerationRuleBehavior.guild|{}guild[0]
        open fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.behavior.automoderation/AutoModerationRuleBehavior.guild.<get-guild>|<get-guild>(){}[0]

    abstract fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.behavior.automoderation/AutoModerationRuleBehavior.equals|equals(kotlin.Any?){}[0]
    abstract fun hashCode(): kotlin/Int // dev.kord.core.behavior.automoderation/AutoModerationRuleBehavior.hashCode|hashCode(){}[0]
    abstract fun toString(): kotlin/String // dev.kord.core.behavior.automoderation/AutoModerationRuleBehavior.toString|toString(){}[0]
    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.automoderation/AutoModerationRuleBehavior // dev.kord.core.behavior.automoderation/AutoModerationRuleBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun asAutoModerationRule(): dev.kord.core.entity.automoderation/AutoModerationRule // dev.kord.core.behavior.automoderation/AutoModerationRuleBehavior.asAutoModerationRule|asAutoModerationRule(){}[0]
    open suspend fun asAutoModerationRuleOrNull(): dev.kord.core.entity.automoderation/AutoModerationRule? // dev.kord.core.behavior.automoderation/AutoModerationRuleBehavior.asAutoModerationRuleOrNull|asAutoModerationRuleOrNull(){}[0]
    open suspend fun delete(kotlin/String? = ...) // dev.kord.core.behavior.automoderation/AutoModerationRuleBehavior.delete|delete(kotlin.String?){}[0]
    open suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.behavior.automoderation/AutoModerationRuleBehavior.getGuild|getGuild(){}[0]
    open suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.behavior.automoderation/AutoModerationRuleBehavior.getGuildOrNull|getGuildOrNull(){}[0]
}

sealed interface dev.kord.core.behavior.interaction.response/DeferredMessageInteractionResponseBehavior : dev.kord.core.behavior.interaction.response/InteractionResponseBehavior { // dev.kord.core.behavior.interaction.response/DeferredMessageInteractionResponseBehavior|null[0]
    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.interaction.response/DeferredMessageInteractionResponseBehavior // dev.kord.core.behavior.interaction.response/DeferredMessageInteractionResponseBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun delete(): dev.kord.core.behavior.interaction.response/FollowupPermittingInteractionResponseBehavior // dev.kord.core.behavior.interaction.response/DeferredMessageInteractionResponseBehavior.delete|delete(){}[0]
}

sealed interface dev.kord.core.behavior.interaction.response/EphemeralInteractionResponseBehavior : dev.kord.core.behavior.interaction.response/InteractionResponseBehavior { // dev.kord.core.behavior.interaction.response/EphemeralInteractionResponseBehavior|null[0]
    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.interaction.response/EphemeralInteractionResponseBehavior // dev.kord.core.behavior.interaction.response/EphemeralInteractionResponseBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

sealed interface dev.kord.core.behavior.interaction.response/InteractionResponseBehavior : dev.kord.core.entity/Strategizable, dev.kord.core/KordObject { // dev.kord.core.behavior.interaction.response/InteractionResponseBehavior|null[0]
    abstract val applicationId // dev.kord.core.behavior.interaction.response/InteractionResponseBehavior.applicationId|{}applicationId[0]
        abstract fun <get-applicationId>(): dev.kord.common.entity/Snowflake // dev.kord.core.behavior.interaction.response/InteractionResponseBehavior.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    abstract val token // dev.kord.core.behavior.interaction.response/InteractionResponseBehavior.token|{}token[0]
        abstract fun <get-token>(): kotlin/String // dev.kord.core.behavior.interaction.response/InteractionResponseBehavior.token.<get-token>|<get-token>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.interaction.response/InteractionResponseBehavior // dev.kord.core.behavior.interaction.response/InteractionResponseBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun getFollowupMessage(dev.kord.common.entity/Snowflake): dev.kord.core.entity.interaction.followup/FollowupMessage // dev.kord.core.behavior.interaction.response/InteractionResponseBehavior.getFollowupMessage|getFollowupMessage(dev.kord.common.entity.Snowflake){}[0]
    open suspend fun getFollowupMessageOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity.interaction.followup/FollowupMessage? // dev.kord.core.behavior.interaction.response/InteractionResponseBehavior.getFollowupMessageOrNull|getFollowupMessageOrNull(dev.kord.common.entity.Snowflake){}[0]
}

sealed interface dev.kord.core.behavior.interaction.response/PublicInteractionResponseBehavior : dev.kord.core.behavior.interaction.response/InteractionResponseBehavior { // dev.kord.core.behavior.interaction.response/PublicInteractionResponseBehavior|null[0]
    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.behavior.interaction.response/PublicInteractionResponseBehavior // dev.kord.core.behavior.interaction.response/PublicInteractionResponseBehavior.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

sealed interface dev.kord.core.cache.data/BaseApplicationData { // dev.kord.core.cache.data/BaseApplicationData|null[0]
    abstract val coverImage // dev.kord.core.cache.data/BaseApplicationData.coverImage|{}coverImage[0]
        abstract fun <get-coverImage>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/BaseApplicationData.coverImage.<get-coverImage>|<get-coverImage>(){}[0]
    abstract val customInstallUrl // dev.kord.core.cache.data/BaseApplicationData.customInstallUrl|{}customInstallUrl[0]
        abstract fun <get-customInstallUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/BaseApplicationData.customInstallUrl.<get-customInstallUrl>|<get-customInstallUrl>(){}[0]
    abstract val description // dev.kord.core.cache.data/BaseApplicationData.description|{}description[0]
        abstract fun <get-description>(): kotlin/String // dev.kord.core.cache.data/BaseApplicationData.description.<get-description>|<get-description>(){}[0]
    abstract val flags // dev.kord.core.cache.data/BaseApplicationData.flags|{}flags[0]
        abstract fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationFlags> // dev.kord.core.cache.data/BaseApplicationData.flags.<get-flags>|<get-flags>(){}[0]
    abstract val guildId // dev.kord.core.cache.data/BaseApplicationData.guildId|{}guildId[0]
        abstract fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/BaseApplicationData.guildId.<get-guildId>|<get-guildId>(){}[0]
    abstract val icon // dev.kord.core.cache.data/BaseApplicationData.icon|{}icon[0]
        abstract fun <get-icon>(): kotlin/String? // dev.kord.core.cache.data/BaseApplicationData.icon.<get-icon>|<get-icon>(){}[0]
    abstract val id // dev.kord.core.cache.data/BaseApplicationData.id|{}id[0]
        abstract fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/BaseApplicationData.id.<get-id>|<get-id>(){}[0]
    abstract val installParams // dev.kord.core.cache.data/BaseApplicationData.installParams|{}installParams[0]
        abstract fun <get-installParams>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InstallParams> // dev.kord.core.cache.data/BaseApplicationData.installParams.<get-installParams>|<get-installParams>(){}[0]
    abstract val name // dev.kord.core.cache.data/BaseApplicationData.name|{}name[0]
        abstract fun <get-name>(): kotlin/String // dev.kord.core.cache.data/BaseApplicationData.name.<get-name>|<get-name>(){}[0]
    abstract val ownerId // dev.kord.core.cache.data/BaseApplicationData.ownerId|{}ownerId[0]
        abstract fun <get-ownerId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/BaseApplicationData.ownerId.<get-ownerId>|<get-ownerId>(){}[0]
    abstract val primarySkuId // dev.kord.core.cache.data/BaseApplicationData.primarySkuId|{}primarySkuId[0]
        abstract fun <get-primarySkuId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/BaseApplicationData.primarySkuId.<get-primarySkuId>|<get-primarySkuId>(){}[0]
    abstract val privacyPolicyUrl // dev.kord.core.cache.data/BaseApplicationData.privacyPolicyUrl|{}privacyPolicyUrl[0]
        abstract fun <get-privacyPolicyUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/BaseApplicationData.privacyPolicyUrl.<get-privacyPolicyUrl>|<get-privacyPolicyUrl>(){}[0]
    abstract val roleConnectionsVerificationUrl // dev.kord.core.cache.data/BaseApplicationData.roleConnectionsVerificationUrl|{}roleConnectionsVerificationUrl[0]
        abstract fun <get-roleConnectionsVerificationUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/BaseApplicationData.roleConnectionsVerificationUrl.<get-roleConnectionsVerificationUrl>|<get-roleConnectionsVerificationUrl>(){}[0]
    abstract val rpcOrigins // dev.kord.core.cache.data/BaseApplicationData.rpcOrigins|{}rpcOrigins[0]
        abstract fun <get-rpcOrigins>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.core.cache.data/BaseApplicationData.rpcOrigins.<get-rpcOrigins>|<get-rpcOrigins>(){}[0]
    abstract val slug // dev.kord.core.cache.data/BaseApplicationData.slug|{}slug[0]
        abstract fun <get-slug>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/BaseApplicationData.slug.<get-slug>|<get-slug>(){}[0]
    abstract val tags // dev.kord.core.cache.data/BaseApplicationData.tags|{}tags[0]
        abstract fun <get-tags>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.core.cache.data/BaseApplicationData.tags.<get-tags>|<get-tags>(){}[0]
    abstract val termsOfServiceUrl // dev.kord.core.cache.data/BaseApplicationData.termsOfServiceUrl|{}termsOfServiceUrl[0]
        abstract fun <get-termsOfServiceUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/BaseApplicationData.termsOfServiceUrl.<get-termsOfServiceUrl>|<get-termsOfServiceUrl>(){}[0]
    abstract val verifyKey // dev.kord.core.cache.data/BaseApplicationData.verifyKey|{}verifyKey[0]
        abstract fun <get-verifyKey>(): kotlin/String // dev.kord.core.cache.data/BaseApplicationData.verifyKey.<get-verifyKey>|<get-verifyKey>(){}[0]
}

sealed interface dev.kord.core.cache.data/BaseInviteData { // dev.kord.core.cache.data/BaseInviteData|null[0]
    abstract val approximateMemberCount // dev.kord.core.cache.data/BaseInviteData.approximateMemberCount|{}approximateMemberCount[0]
        abstract fun <get-approximateMemberCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/BaseInviteData.approximateMemberCount.<get-approximateMemberCount>|<get-approximateMemberCount>(){}[0]
    abstract val approximatePresenceCount // dev.kord.core.cache.data/BaseInviteData.approximatePresenceCount|{}approximatePresenceCount[0]
        abstract fun <get-approximatePresenceCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/BaseInviteData.approximatePresenceCount.<get-approximatePresenceCount>|<get-approximatePresenceCount>(){}[0]
    abstract val channelId // dev.kord.core.cache.data/BaseInviteData.channelId|{}channelId[0]
        abstract fun <get-channelId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/BaseInviteData.channelId.<get-channelId>|<get-channelId>(){}[0]
    abstract val code // dev.kord.core.cache.data/BaseInviteData.code|{}code[0]
        abstract fun <get-code>(): kotlin/String // dev.kord.core.cache.data/BaseInviteData.code.<get-code>|<get-code>(){}[0]
    abstract val expiresAt // dev.kord.core.cache.data/BaseInviteData.expiresAt|{}expiresAt[0]
        abstract fun <get-expiresAt>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.core.cache.data/BaseInviteData.expiresAt.<get-expiresAt>|<get-expiresAt>(){}[0]
    abstract val guild // dev.kord.core.cache.data/BaseInviteData.guild|{}guild[0]
        abstract fun <get-guild>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/PartialGuildData> // dev.kord.core.cache.data/BaseInviteData.guild.<get-guild>|<get-guild>(){}[0]
    abstract val guildScheduledEvent // dev.kord.core.cache.data/BaseInviteData.guildScheduledEvent|{}guildScheduledEvent[0]
        abstract fun <get-guildScheduledEvent>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/GuildScheduledEventData> // dev.kord.core.cache.data/BaseInviteData.guildScheduledEvent.<get-guildScheduledEvent>|<get-guildScheduledEvent>(){}[0]
    abstract val inviterId // dev.kord.core.cache.data/BaseInviteData.inviterId|{}inviterId[0]
        abstract fun <get-inviterId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/BaseInviteData.inviterId.<get-inviterId>|<get-inviterId>(){}[0]
    abstract val targetApplication // dev.kord.core.cache.data/BaseInviteData.targetApplication|{}targetApplication[0]
        abstract fun <get-targetApplication>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/PartialApplicationData> // dev.kord.core.cache.data/BaseInviteData.targetApplication.<get-targetApplication>|<get-targetApplication>(){}[0]
    abstract val targetType // dev.kord.core.cache.data/BaseInviteData.targetType|{}targetType[0]
        abstract fun <get-targetType>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> // dev.kord.core.cache.data/BaseInviteData.targetType.<get-targetType>|<get-targetType>(){}[0]
    abstract val targetUserId // dev.kord.core.cache.data/BaseInviteData.targetUserId|{}targetUserId[0]
        abstract fun <get-targetUserId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/BaseInviteData.targetUserId.<get-targetUserId>|<get-targetUserId>(){}[0]
}

sealed interface dev.kord.core.entity.application/ApplicationCommand : dev.kord.core.behavior/ApplicationCommandBehavior { // dev.kord.core.entity.application/ApplicationCommand|null[0]
    abstract val data // dev.kord.core.entity.application/ApplicationCommand.data|{}data[0]
        abstract fun <get-data>(): dev.kord.core.cache.data/ApplicationCommandData // dev.kord.core.entity.application/ApplicationCommand.data.<get-data>|<get-data>(){}[0]
    open val applicationId // dev.kord.core.entity.application/ApplicationCommand.applicationId|{}applicationId[0]
        open fun <get-applicationId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.application/ApplicationCommand.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    open val defaultMemberPermissions // dev.kord.core.entity.application/ApplicationCommand.defaultMemberPermissions|{}defaultMemberPermissions[0]
        open fun <get-defaultMemberPermissions>(): dev.kord.common.entity/Permissions? // dev.kord.core.entity.application/ApplicationCommand.defaultMemberPermissions.<get-defaultMemberPermissions>|<get-defaultMemberPermissions>(){}[0]
    open val defaultPermission // dev.kord.core.entity.application/ApplicationCommand.defaultPermission|{}defaultPermission[0]
        open fun <get-defaultPermission>(): kotlin/Boolean? // dev.kord.core.entity.application/ApplicationCommand.defaultPermission.<get-defaultPermission>|<get-defaultPermission>(){}[0]
    open val id // dev.kord.core.entity.application/ApplicationCommand.id|{}id[0]
        open fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.application/ApplicationCommand.id.<get-id>|<get-id>(){}[0]
    open val isNsfw // dev.kord.core.entity.application/ApplicationCommand.isNsfw|{}isNsfw[0]
        open fun <get-isNsfw>(): kotlin/Boolean // dev.kord.core.entity.application/ApplicationCommand.isNsfw.<get-isNsfw>|<get-isNsfw>(){}[0]
    open val name // dev.kord.core.entity.application/ApplicationCommand.name|{}name[0]
        open fun <get-name>(): kotlin/String // dev.kord.core.entity.application/ApplicationCommand.name.<get-name>|<get-name>(){}[0]
    open val nameLocalizations // dev.kord.core.entity.application/ApplicationCommand.nameLocalizations|{}nameLocalizations[0]
        open fun <get-nameLocalizations>(): kotlin.collections/Map<dev.kord.common/Locale, kotlin/String> // dev.kord.core.entity.application/ApplicationCommand.nameLocalizations.<get-nameLocalizations>|<get-nameLocalizations>(){}[0]
    open val type // dev.kord.core.entity.application/ApplicationCommand.type|{}type[0]
        open fun <get-type>(): dev.kord.common.entity/ApplicationCommandType // dev.kord.core.entity.application/ApplicationCommand.type.<get-type>|<get-type>(){}[0]
    open val version // dev.kord.core.entity.application/ApplicationCommand.version|{}version[0]
        open fun <get-version>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.application/ApplicationCommand.version.<get-version>|<get-version>(){}[0]
}

sealed interface dev.kord.core.entity.application/ChatInputCommandCommand : dev.kord.core.behavior/ChatInputCommandBehavior, dev.kord.core.entity.application/ApplicationCommand { // dev.kord.core.entity.application/ChatInputCommandCommand|null[0]
    open val description // dev.kord.core.entity.application/ChatInputCommandCommand.description|{}description[0]
        open fun <get-description>(): kotlin/String? // dev.kord.core.entity.application/ChatInputCommandCommand.description.<get-description>|<get-description>(){}[0]
    open val descriptionLocalizations // dev.kord.core.entity.application/ChatInputCommandCommand.descriptionLocalizations|{}descriptionLocalizations[0]
        open fun <get-descriptionLocalizations>(): kotlin.collections/Map<dev.kord.common/Locale, kotlin/String> // dev.kord.core.entity.application/ChatInputCommandCommand.descriptionLocalizations.<get-descriptionLocalizations>|<get-descriptionLocalizations>(){}[0]
    open val groups // dev.kord.core.entity.application/ChatInputCommandCommand.groups|{}groups[0]
        open fun <get-groups>(): kotlin.collections/Map<kotlin/String, dev.kord.core.entity.application/ChatInputGroup> // dev.kord.core.entity.application/ChatInputCommandCommand.groups.<get-groups>|<get-groups>(){}[0]
    open val subCommands // dev.kord.core.entity.application/ChatInputCommandCommand.subCommands|{}subCommands[0]
        open fun <get-subCommands>(): kotlin.collections/Map<kotlin/String, dev.kord.core.entity.application/ChatInputSubCommand> // dev.kord.core.entity.application/ChatInputCommandCommand.subCommands.<get-subCommands>|<get-subCommands>(){}[0]
}

sealed interface dev.kord.core.entity.application/GuildApplicationCommand : dev.kord.core.behavior/GuildApplicationCommandBehavior, dev.kord.core.entity.application/ApplicationCommand // dev.kord.core.entity.application/GuildApplicationCommand|null[0]

sealed interface dev.kord.core.entity.application/MessageCommand : dev.kord.core.behavior/MessageCommandBehavior, dev.kord.core.entity.application/ApplicationCommand // dev.kord.core.entity.application/MessageCommand|null[0]

sealed interface dev.kord.core.entity.application/UserCommand : dev.kord.core.behavior/UserCommandBehavior, dev.kord.core.entity.application/ApplicationCommand // dev.kord.core.entity.application/UserCommand|null[0]

sealed interface dev.kord.core.entity.channel/ThreadOnlyChannel : dev.kord.core.behavior.channel.threads/ThreadOnlyChannelBehavior, dev.kord.core.entity.channel/ThreadParentChannel { // dev.kord.core.entity.channel/ThreadOnlyChannel|null[0]
    open val availableTags // dev.kord.core.entity.channel/ThreadOnlyChannel.availableTags|{}availableTags[0]
        open fun <get-availableTags>(): kotlin.collections/List<dev.kord.common.entity/ForumTag> // dev.kord.core.entity.channel/ThreadOnlyChannel.availableTags.<get-availableTags>|<get-availableTags>(){}[0]
    open val defaultAutoArchiveDuration // dev.kord.core.entity.channel/ThreadOnlyChannel.defaultAutoArchiveDuration|{}defaultAutoArchiveDuration[0]
        open fun <get-defaultAutoArchiveDuration>(): dev.kord.common.entity/ArchiveDuration? // dev.kord.core.entity.channel/ThreadOnlyChannel.defaultAutoArchiveDuration.<get-defaultAutoArchiveDuration>|<get-defaultAutoArchiveDuration>(){}[0]
    open val defaultReactionEmoji // dev.kord.core.entity.channel/ThreadOnlyChannel.defaultReactionEmoji|{}defaultReactionEmoji[0]
        open fun <get-defaultReactionEmoji>(): dev.kord.common.entity/DefaultReaction? // dev.kord.core.entity.channel/ThreadOnlyChannel.defaultReactionEmoji.<get-defaultReactionEmoji>|<get-defaultReactionEmoji>(){}[0]
    open val defaultSortOrder // dev.kord.core.entity.channel/ThreadOnlyChannel.defaultSortOrder|{}defaultSortOrder[0]
        open fun <get-defaultSortOrder>(): dev.kord.common.entity/SortOrderType? // dev.kord.core.entity.channel/ThreadOnlyChannel.defaultSortOrder.<get-defaultSortOrder>|<get-defaultSortOrder>(){}[0]
    open val defaultThreadRateLimitPerUser // dev.kord.core.entity.channel/ThreadOnlyChannel.defaultThreadRateLimitPerUser|{}defaultThreadRateLimitPerUser[0]
        open fun <get-defaultThreadRateLimitPerUser>(): kotlin.time/Duration? // dev.kord.core.entity.channel/ThreadOnlyChannel.defaultThreadRateLimitPerUser.<get-defaultThreadRateLimitPerUser>|<get-defaultThreadRateLimitPerUser>(){}[0]
    open val isNsfw // dev.kord.core.entity.channel/ThreadOnlyChannel.isNsfw|{}isNsfw[0]
        open fun <get-isNsfw>(): kotlin/Boolean // dev.kord.core.entity.channel/ThreadOnlyChannel.isNsfw.<get-isNsfw>|<get-isNsfw>(){}[0]
    open val lastThreadId // dev.kord.core.entity.channel/ThreadOnlyChannel.lastThreadId|{}lastThreadId[0]
        open fun <get-lastThreadId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity.channel/ThreadOnlyChannel.lastThreadId.<get-lastThreadId>|<get-lastThreadId>(){}[0]
    open val rateLimitPerUser // dev.kord.core.entity.channel/ThreadOnlyChannel.rateLimitPerUser|{}rateLimitPerUser[0]
        open fun <get-rateLimitPerUser>(): kotlin.time/Duration? // dev.kord.core.entity.channel/ThreadOnlyChannel.rateLimitPerUser.<get-rateLimitPerUser>|<get-rateLimitPerUser>(){}[0]
    open val topic // dev.kord.core.entity.channel/ThreadOnlyChannel.topic|{}topic[0]
        open fun <get-topic>(): kotlin/String? // dev.kord.core.entity.channel/ThreadOnlyChannel.topic.<get-topic>|<get-topic>(){}[0]

    abstract fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.channel/ThreadOnlyChannel.equals|equals(kotlin.Any?){}[0]
    abstract fun hashCode(): kotlin/Int // dev.kord.core.entity.channel/ThreadOnlyChannel.hashCode|hashCode(){}[0]
    abstract fun toString(): kotlin/String // dev.kord.core.entity.channel/ThreadOnlyChannel.toString|toString(){}[0]
    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.channel/ThreadOnlyChannel // dev.kord.core.entity.channel/ThreadOnlyChannel.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    abstract suspend fun asChannel(): dev.kord.core.entity.channel/ThreadOnlyChannel // dev.kord.core.entity.channel/ThreadOnlyChannel.asChannel|asChannel(){}[0]
    abstract suspend fun asChannelOrNull(): dev.kord.core.entity.channel/ThreadOnlyChannel // dev.kord.core.entity.channel/ThreadOnlyChannel.asChannelOrNull|asChannelOrNull(){}[0]
}

sealed interface dev.kord.core.entity.component/Component { // dev.kord.core.entity.component/Component|null[0]
    abstract val data // dev.kord.core.entity.component/Component.data|{}data[0]
        abstract fun <get-data>(): dev.kord.core.cache.data/ComponentData // dev.kord.core.entity.component/Component.data.<get-data>|<get-data>(){}[0]
    open val type // dev.kord.core.entity.component/Component.type|{}type[0]
        open fun <get-type>(): dev.kord.common.entity/ComponentType // dev.kord.core.entity.component/Component.type.<get-type>|<get-type>(){}[0]
}

sealed interface dev.kord.core.entity.component/SelectDefaultValue { // dev.kord.core.entity.component/SelectDefaultValue|null[0]
    abstract val id // dev.kord.core.entity.component/SelectDefaultValue.id|{}id[0]
        abstract fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.component/SelectDefaultValue.id.<get-id>|<get-id>(){}[0]
    abstract val type // dev.kord.core.entity.component/SelectDefaultValue.type|{}type[0]
        abstract fun <get-type>(): dev.kord.common.entity/SelectDefaultValueType // dev.kord.core.entity.component/SelectDefaultValue.type.<get-type>|<get-type>(){}[0]

    sealed interface Mentionable : dev.kord.core.entity.component/SelectDefaultValue // dev.kord.core.entity.component/SelectDefaultValue.Mentionable|null[0]

    final class Channel : dev.kord.core.entity.component/SelectDefaultValue { // dev.kord.core.entity.component/SelectDefaultValue.Channel|null[0]
        constructor <init>(dev.kord.common.entity/Snowflake) // dev.kord.core.entity.component/SelectDefaultValue.Channel.<init>|<init>(dev.kord.common.entity.Snowflake){}[0]

        final val id // dev.kord.core.entity.component/SelectDefaultValue.Channel.id|{}id[0]
            final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.component/SelectDefaultValue.Channel.id.<get-id>|<get-id>(){}[0]
        final val type // dev.kord.core.entity.component/SelectDefaultValue.Channel.type|{}type[0]
            final fun <get-type>(): dev.kord.common.entity/SelectDefaultValueType.Channel // dev.kord.core.entity.component/SelectDefaultValue.Channel.type.<get-type>|<get-type>(){}[0]

        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.component/SelectDefaultValue.Channel.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.core.entity.component/SelectDefaultValue.Channel.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.core.entity.component/SelectDefaultValue.Channel.toString|toString(){}[0]
    }

    final class Role : dev.kord.core.entity.component/SelectDefaultValue.Mentionable { // dev.kord.core.entity.component/SelectDefaultValue.Role|null[0]
        constructor <init>(dev.kord.common.entity/Snowflake) // dev.kord.core.entity.component/SelectDefaultValue.Role.<init>|<init>(dev.kord.common.entity.Snowflake){}[0]

        final val id // dev.kord.core.entity.component/SelectDefaultValue.Role.id|{}id[0]
            final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.component/SelectDefaultValue.Role.id.<get-id>|<get-id>(){}[0]
        final val type // dev.kord.core.entity.component/SelectDefaultValue.Role.type|{}type[0]
            final fun <get-type>(): dev.kord.common.entity/SelectDefaultValueType.Role // dev.kord.core.entity.component/SelectDefaultValue.Role.type.<get-type>|<get-type>(){}[0]

        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.component/SelectDefaultValue.Role.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.core.entity.component/SelectDefaultValue.Role.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.core.entity.component/SelectDefaultValue.Role.toString|toString(){}[0]
    }

    final class User : dev.kord.core.entity.component/SelectDefaultValue.Mentionable { // dev.kord.core.entity.component/SelectDefaultValue.User|null[0]
        constructor <init>(dev.kord.common.entity/Snowflake) // dev.kord.core.entity.component/SelectDefaultValue.User.<init>|<init>(dev.kord.common.entity.Snowflake){}[0]

        final val id // dev.kord.core.entity.component/SelectDefaultValue.User.id|{}id[0]
            final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.component/SelectDefaultValue.User.id.<get-id>|<get-id>(){}[0]
        final val type // dev.kord.core.entity.component/SelectDefaultValue.User.type|{}type[0]
            final fun <get-type>(): dev.kord.common.entity/SelectDefaultValueType.User // dev.kord.core.entity.component/SelectDefaultValue.User.type.<get-type>|<get-type>(){}[0]

        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.component/SelectDefaultValue.User.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.core.entity.component/SelectDefaultValue.User.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.core.entity.component/SelectDefaultValue.User.toString|toString(){}[0]
    }
}

sealed interface dev.kord.core.entity.interaction/ActionInteraction : dev.kord.core.behavior.interaction/ActionInteractionBehavior, dev.kord.core.entity.interaction/Interaction { // dev.kord.core.entity.interaction/ActionInteraction|null[0]
    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/ActionInteraction // dev.kord.core.entity.interaction/ActionInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

sealed interface dev.kord.core.entity.interaction/ApplicationCommandInteraction : dev.kord.core.behavior.interaction/ApplicationCommandInteractionBehavior, dev.kord.core.entity.interaction/ActionInteraction { // dev.kord.core.entity.interaction/ApplicationCommandInteraction|null[0]
    open val invokedCommandGuildId // dev.kord.core.entity.interaction/ApplicationCommandInteraction.invokedCommandGuildId|{}invokedCommandGuildId[0]
        open fun <get-invokedCommandGuildId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity.interaction/ApplicationCommandInteraction.invokedCommandGuildId.<get-invokedCommandGuildId>|<get-invokedCommandGuildId>(){}[0]
    open val invokedCommandId // dev.kord.core.entity.interaction/ApplicationCommandInteraction.invokedCommandId|{}invokedCommandId[0]
        open fun <get-invokedCommandId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.interaction/ApplicationCommandInteraction.invokedCommandId.<get-invokedCommandId>|<get-invokedCommandId>(){}[0]
    open val invokedCommandName // dev.kord.core.entity.interaction/ApplicationCommandInteraction.invokedCommandName|{}invokedCommandName[0]
        open fun <get-invokedCommandName>(): kotlin/String // dev.kord.core.entity.interaction/ApplicationCommandInteraction.invokedCommandName.<get-invokedCommandName>|<get-invokedCommandName>(){}[0]
    open val invokedCommandType // dev.kord.core.entity.interaction/ApplicationCommandInteraction.invokedCommandType|{}invokedCommandType[0]
        open fun <get-invokedCommandType>(): dev.kord.common.entity/ApplicationCommandType // dev.kord.core.entity.interaction/ApplicationCommandInteraction.invokedCommandType.<get-invokedCommandType>|<get-invokedCommandType>(){}[0]
    open val resolvedObjects // dev.kord.core.entity.interaction/ApplicationCommandInteraction.resolvedObjects|{}resolvedObjects[0]
        open fun <get-resolvedObjects>(): dev.kord.core.entity.interaction/ResolvedObjects? // dev.kord.core.entity.interaction/ApplicationCommandInteraction.resolvedObjects.<get-resolvedObjects>|<get-resolvedObjects>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/ApplicationCommandInteraction // dev.kord.core.entity.interaction/ApplicationCommandInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

sealed interface dev.kord.core.entity.interaction/AutoCompleteInteraction : dev.kord.core.behavior.interaction/AutoCompleteInteractionBehavior, dev.kord.core.entity.interaction/DataInteraction { // dev.kord.core.entity.interaction/AutoCompleteInteraction|null[0]
    open val command // dev.kord.core.entity.interaction/AutoCompleteInteraction.command|{}command[0]
        open fun <get-command>(): dev.kord.core.entity.interaction/InteractionCommand // dev.kord.core.entity.interaction/AutoCompleteInteraction.command.<get-command>|<get-command>(){}[0]
    open val focusedOption // dev.kord.core.entity.interaction/AutoCompleteInteraction.focusedOption|{}focusedOption[0]
        open fun <get-focusedOption>(): dev.kord.core.entity.interaction/StringOptionValue // dev.kord.core.entity.interaction/AutoCompleteInteraction.focusedOption.<get-focusedOption>|<get-focusedOption>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/AutoCompleteInteraction // dev.kord.core.entity.interaction/AutoCompleteInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

sealed interface dev.kord.core.entity.interaction/ButtonInteraction : dev.kord.core.entity.interaction/ComponentInteraction { // dev.kord.core.entity.interaction/ButtonInteraction|null[0]
    open val component // dev.kord.core.entity.interaction/ButtonInteraction.component|{}component[0]
        open fun <get-component>(): dev.kord.core.entity.component/ButtonComponent // dev.kord.core.entity.interaction/ButtonInteraction.component.<get-component>|<get-component>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/ButtonInteraction // dev.kord.core.entity.interaction/ButtonInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

sealed interface dev.kord.core.entity.interaction/ChatInputCommandInteraction : dev.kord.core.entity.interaction/ApplicationCommandInteraction { // dev.kord.core.entity.interaction/ChatInputCommandInteraction|null[0]
    open val command // dev.kord.core.entity.interaction/ChatInputCommandInteraction.command|{}command[0]
        open fun <get-command>(): dev.kord.core.entity.interaction/InteractionCommand // dev.kord.core.entity.interaction/ChatInputCommandInteraction.command.<get-command>|<get-command>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/ChatInputCommandInteraction // dev.kord.core.entity.interaction/ChatInputCommandInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

sealed interface dev.kord.core.entity.interaction/ComponentInteraction : dev.kord.core.behavior.interaction/ComponentInteractionBehavior, dev.kord.core.behavior.interaction/ModalParentInteractionBehavior, dev.kord.core.entity.interaction/ActionInteraction { // dev.kord.core.entity.interaction/ComponentInteraction|null[0]
    abstract val component // dev.kord.core.entity.interaction/ComponentInteraction.component|{}component[0]
        abstract fun <get-component>(): dev.kord.core.entity.component/Component // dev.kord.core.entity.interaction/ComponentInteraction.component.<get-component>|<get-component>(){}[0]
    open val componentId // dev.kord.core.entity.interaction/ComponentInteraction.componentId|{}componentId[0]
        open fun <get-componentId>(): kotlin/String // dev.kord.core.entity.interaction/ComponentInteraction.componentId.<get-componentId>|<get-componentId>(){}[0]
    open val componentType // dev.kord.core.entity.interaction/ComponentInteraction.componentType|{}componentType[0]
        open fun <get-componentType>(): dev.kord.common.entity/ComponentType // dev.kord.core.entity.interaction/ComponentInteraction.componentType.<get-componentType>|<get-componentType>(){}[0]
    open val message // dev.kord.core.entity.interaction/ComponentInteraction.message|{}message[0]
        open fun <get-message>(): dev.kord.core.entity/Message // dev.kord.core.entity.interaction/ComponentInteraction.message.<get-message>|<get-message>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/ComponentInteraction // dev.kord.core.entity.interaction/ComponentInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

sealed interface dev.kord.core.entity.interaction/DataInteraction : dev.kord.core.behavior.interaction/DataInteractionBehavior, dev.kord.core.entity.interaction/Interaction { // dev.kord.core.entity.interaction/DataInteraction|null[0]
    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/DataInteraction // dev.kord.core.entity.interaction/DataInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

sealed interface dev.kord.core.entity.interaction/GlobalApplicationCommandInteraction : dev.kord.core.entity.interaction/ApplicationCommandInteraction, dev.kord.core.entity.interaction/GlobalInteraction { // dev.kord.core.entity.interaction/GlobalApplicationCommandInteraction|null[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/GlobalApplicationCommandInteraction // dev.kord.core.entity.interaction/GlobalApplicationCommandInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

sealed interface dev.kord.core.entity.interaction/GlobalComponentInteraction : dev.kord.core.entity.interaction/ComponentInteraction, dev.kord.core.entity.interaction/GlobalInteraction { // dev.kord.core.entity.interaction/GlobalComponentInteraction|null[0]
    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/GlobalComponentInteraction // dev.kord.core.entity.interaction/GlobalComponentInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

sealed interface dev.kord.core.entity.interaction/GlobalInteraction : dev.kord.core.behavior.interaction/GlobalInteractionBehavior, dev.kord.core.entity.interaction/Interaction { // dev.kord.core.entity.interaction/GlobalInteraction|null[0]
    open val user // dev.kord.core.entity.interaction/GlobalInteraction.user|{}user[0]
        open fun <get-user>(): dev.kord.core.entity/User // dev.kord.core.entity.interaction/GlobalInteraction.user.<get-user>|<get-user>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/GlobalInteraction // dev.kord.core.entity.interaction/GlobalInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

sealed interface dev.kord.core.entity.interaction/GuildApplicationCommandInteraction : dev.kord.core.entity.interaction/ApplicationCommandInteraction, dev.kord.core.entity.interaction/GuildInteraction { // dev.kord.core.entity.interaction/GuildApplicationCommandInteraction|null[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/GuildApplicationCommandInteraction // dev.kord.core.entity.interaction/GuildApplicationCommandInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

sealed interface dev.kord.core.entity.interaction/GuildComponentInteraction : dev.kord.core.entity.interaction/ComponentInteraction, dev.kord.core.entity.interaction/GuildInteraction { // dev.kord.core.entity.interaction/GuildComponentInteraction|null[0]
    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/GuildComponentInteraction // dev.kord.core.entity.interaction/GuildComponentInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

sealed interface dev.kord.core.entity.interaction/GuildInteraction : dev.kord.core.behavior.interaction/GuildInteractionBehavior, dev.kord.core.entity.interaction/Interaction { // dev.kord.core.entity.interaction/GuildInteraction|null[0]
    open val appPermissions // dev.kord.core.entity.interaction/GuildInteraction.appPermissions|{}appPermissions[0]
        open fun <get-appPermissions>(): dev.kord.common.entity/Permissions // dev.kord.core.entity.interaction/GuildInteraction.appPermissions.<get-appPermissions>|<get-appPermissions>(){}[0]
    open val guildId // dev.kord.core.entity.interaction/GuildInteraction.guildId|{}guildId[0]
        open fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.interaction/GuildInteraction.guildId.<get-guildId>|<get-guildId>(){}[0]
    open val permissions // dev.kord.core.entity.interaction/GuildInteraction.permissions|{}permissions[0]
        open fun <get-permissions>(): dev.kord.common.entity/Permissions // dev.kord.core.entity.interaction/GuildInteraction.permissions.<get-permissions>|<get-permissions>(){}[0]
    open val user // dev.kord.core.entity.interaction/GuildInteraction.user|{}user[0]
        open fun <get-user>(): dev.kord.core.entity/Member // dev.kord.core.entity.interaction/GuildInteraction.user.<get-user>|<get-user>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/GuildInteraction // dev.kord.core.entity.interaction/GuildInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

sealed interface dev.kord.core.entity.interaction/Interaction : dev.kord.core.behavior.interaction/InteractionBehavior { // dev.kord.core.entity.interaction/Interaction|null[0]
    abstract val data // dev.kord.core.entity.interaction/Interaction.data|{}data[0]
        abstract fun <get-data>(): dev.kord.core.cache.data/InteractionData // dev.kord.core.entity.interaction/Interaction.data.<get-data>|<get-data>(){}[0]
    abstract val user // dev.kord.core.entity.interaction/Interaction.user|{}user[0]
        abstract fun <get-user>(): dev.kord.core.entity/User // dev.kord.core.entity.interaction/Interaction.user.<get-user>|<get-user>(){}[0]
    open val applicationId // dev.kord.core.entity.interaction/Interaction.applicationId|{}applicationId[0]
        open fun <get-applicationId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.interaction/Interaction.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    open val channelId // dev.kord.core.entity.interaction/Interaction.channelId|{}channelId[0]
        open fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.interaction/Interaction.channelId.<get-channelId>|<get-channelId>(){}[0]
    open val guildLocale // dev.kord.core.entity.interaction/Interaction.guildLocale|{}guildLocale[0]
        open fun <get-guildLocale>(): dev.kord.common/Locale? // dev.kord.core.entity.interaction/Interaction.guildLocale.<get-guildLocale>|<get-guildLocale>(){}[0]
    open val id // dev.kord.core.entity.interaction/Interaction.id|{}id[0]
        open fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.interaction/Interaction.id.<get-id>|<get-id>(){}[0]
    open val locale // dev.kord.core.entity.interaction/Interaction.locale|{}locale[0]
        open fun <get-locale>(): dev.kord.common/Locale? // dev.kord.core.entity.interaction/Interaction.locale.<get-locale>|<get-locale>(){}[0]
    open val token // dev.kord.core.entity.interaction/Interaction.token|{}token[0]
        open fun <get-token>(): kotlin/String // dev.kord.core.entity.interaction/Interaction.token.<get-token>|<get-token>(){}[0]
    open val type // dev.kord.core.entity.interaction/Interaction.type|{}type[0]
        open fun <get-type>(): dev.kord.common.entity/InteractionType // dev.kord.core.entity.interaction/Interaction.type.<get-type>|<get-type>(){}[0]
    open val version // dev.kord.core.entity.interaction/Interaction.version|{}version[0]
        open fun <get-version>(): kotlin/Int // dev.kord.core.entity.interaction/Interaction.version.<get-version>|<get-version>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/Interaction // dev.kord.core.entity.interaction/Interaction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]

    final object Companion { // dev.kord.core.entity.interaction/Interaction.Companion|null[0]
        final fun from(dev.kord.core.cache.data/InteractionData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.entity.interaction/Interaction // dev.kord.core.entity.interaction/Interaction.Companion.from|from(dev.kord.core.cache.data.InteractionData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    }
}

sealed interface dev.kord.core.entity.interaction/InteractionCommand : dev.kord.core/KordObject { // dev.kord.core.entity.interaction/InteractionCommand|null[0]
    abstract val data // dev.kord.core.entity.interaction/InteractionCommand.data|{}data[0]
        abstract fun <get-data>(): dev.kord.core.cache.data/ApplicationInteractionData // dev.kord.core.entity.interaction/InteractionCommand.data.<get-data>|<get-data>(){}[0]
    abstract val options // dev.kord.core.entity.interaction/InteractionCommand.options|{}options[0]
        abstract fun <get-options>(): kotlin.collections/Map<kotlin/String, dev.kord.core.entity.interaction/OptionValue<*>> // dev.kord.core.entity.interaction/InteractionCommand.options.<get-options>|<get-options>(){}[0]
    open val attachments // dev.kord.core.entity.interaction/InteractionCommand.attachments|{}attachments[0]
        open fun <get-attachments>(): kotlin.collections/Map<kotlin/String, dev.kord.core.entity/Attachment> // dev.kord.core.entity.interaction/InteractionCommand.attachments.<get-attachments>|<get-attachments>(){}[0]
    open val booleans // dev.kord.core.entity.interaction/InteractionCommand.booleans|{}booleans[0]
        open fun <get-booleans>(): kotlin.collections/Map<kotlin/String, kotlin/Boolean> // dev.kord.core.entity.interaction/InteractionCommand.booleans.<get-booleans>|<get-booleans>(){}[0]
    open val channels // dev.kord.core.entity.interaction/InteractionCommand.channels|{}channels[0]
        open fun <get-channels>(): kotlin.collections/Map<kotlin/String, dev.kord.core.entity.channel/ResolvedChannel> // dev.kord.core.entity.interaction/InteractionCommand.channels.<get-channels>|<get-channels>(){}[0]
    open val integers // dev.kord.core.entity.interaction/InteractionCommand.integers|{}integers[0]
        open fun <get-integers>(): kotlin.collections/Map<kotlin/String, kotlin/Long> // dev.kord.core.entity.interaction/InteractionCommand.integers.<get-integers>|<get-integers>(){}[0]
    open val members // dev.kord.core.entity.interaction/InteractionCommand.members|{}members[0]
        open fun <get-members>(): kotlin.collections/Map<kotlin/String, dev.kord.core.entity/Member> // dev.kord.core.entity.interaction/InteractionCommand.members.<get-members>|<get-members>(){}[0]
    open val mentionables // dev.kord.core.entity.interaction/InteractionCommand.mentionables|{}mentionables[0]
        open fun <get-mentionables>(): kotlin.collections/Map<kotlin/String, dev.kord.core.entity/Entity> // dev.kord.core.entity.interaction/InteractionCommand.mentionables.<get-mentionables>|<get-mentionables>(){}[0]
    open val numbers // dev.kord.core.entity.interaction/InteractionCommand.numbers|{}numbers[0]
        open fun <get-numbers>(): kotlin.collections/Map<kotlin/String, kotlin/Double> // dev.kord.core.entity.interaction/InteractionCommand.numbers.<get-numbers>|<get-numbers>(){}[0]
    open val resolvedObjects // dev.kord.core.entity.interaction/InteractionCommand.resolvedObjects|{}resolvedObjects[0]
        open fun <get-resolvedObjects>(): dev.kord.core.entity.interaction/ResolvedObjects? // dev.kord.core.entity.interaction/InteractionCommand.resolvedObjects.<get-resolvedObjects>|<get-resolvedObjects>(){}[0]
    open val roles // dev.kord.core.entity.interaction/InteractionCommand.roles|{}roles[0]
        open fun <get-roles>(): kotlin.collections/Map<kotlin/String, dev.kord.core.entity/Role> // dev.kord.core.entity.interaction/InteractionCommand.roles.<get-roles>|<get-roles>(){}[0]
    open val rootId // dev.kord.core.entity.interaction/InteractionCommand.rootId|{}rootId[0]
        open fun <get-rootId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.interaction/InteractionCommand.rootId.<get-rootId>|<get-rootId>(){}[0]
    open val rootName // dev.kord.core.entity.interaction/InteractionCommand.rootName|{}rootName[0]
        open fun <get-rootName>(): kotlin/String // dev.kord.core.entity.interaction/InteractionCommand.rootName.<get-rootName>|<get-rootName>(){}[0]
    open val strings // dev.kord.core.entity.interaction/InteractionCommand.strings|{}strings[0]
        open fun <get-strings>(): kotlin.collections/Map<kotlin/String, kotlin/String> // dev.kord.core.entity.interaction/InteractionCommand.strings.<get-strings>|<get-strings>(){}[0]
    open val users // dev.kord.core.entity.interaction/InteractionCommand.users|{}users[0]
        open fun <get-users>(): kotlin.collections/Map<kotlin/String, dev.kord.core.entity/User> // dev.kord.core.entity.interaction/InteractionCommand.users.<get-users>|<get-users>(){}[0]
}

sealed interface dev.kord.core.entity.interaction/MessageCommandInteraction : dev.kord.core.entity.interaction/ApplicationCommandInteraction { // dev.kord.core.entity.interaction/MessageCommandInteraction|null[0]
    open val messages // dev.kord.core.entity.interaction/MessageCommandInteraction.messages|{}messages[0]
        open fun <get-messages>(): kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.entity/Message> // dev.kord.core.entity.interaction/MessageCommandInteraction.messages.<get-messages>|<get-messages>(){}[0]
    open val target // dev.kord.core.entity.interaction/MessageCommandInteraction.target|{}target[0]
        open fun <get-target>(): dev.kord.core.behavior/MessageBehavior // dev.kord.core.entity.interaction/MessageCommandInteraction.target.<get-target>|<get-target>(){}[0]
    open val targetId // dev.kord.core.entity.interaction/MessageCommandInteraction.targetId|{}targetId[0]
        open fun <get-targetId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.interaction/MessageCommandInteraction.targetId.<get-targetId>|<get-targetId>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/MessageCommandInteraction // dev.kord.core.entity.interaction/MessageCommandInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun getTarget(): dev.kord.core.entity/Message // dev.kord.core.entity.interaction/MessageCommandInteraction.getTarget|getTarget(){}[0]
    open suspend fun getTargetOrNull(): dev.kord.core.entity/Message? // dev.kord.core.entity.interaction/MessageCommandInteraction.getTargetOrNull|getTargetOrNull(){}[0]
}

sealed interface dev.kord.core.entity.interaction/ModalSubmitInteraction : dev.kord.core.behavior.interaction/ComponentInteractionBehavior, dev.kord.core.entity.interaction/ActionInteraction { // dev.kord.core.entity.interaction/ModalSubmitInteraction|null[0]
    open val actionRows // dev.kord.core.entity.interaction/ModalSubmitInteraction.actionRows|{}actionRows[0]
        open fun <get-actionRows>(): kotlin.collections/List<dev.kord.core.entity.component/ActionRowComponent> // dev.kord.core.entity.interaction/ModalSubmitInteraction.actionRows.<get-actionRows>|<get-actionRows>(){}[0]
    open val message // dev.kord.core.entity.interaction/ModalSubmitInteraction.message|{}message[0]
        open fun <get-message>(): dev.kord.core.entity/Message? // dev.kord.core.entity.interaction/ModalSubmitInteraction.message.<get-message>|<get-message>(){}[0]
    open val modalId // dev.kord.core.entity.interaction/ModalSubmitInteraction.modalId|{}modalId[0]
        open fun <get-modalId>(): kotlin/String // dev.kord.core.entity.interaction/ModalSubmitInteraction.modalId.<get-modalId>|<get-modalId>(){}[0]
    open val textInputs // dev.kord.core.entity.interaction/ModalSubmitInteraction.textInputs|{}textInputs[0]
        open fun <get-textInputs>(): kotlin.collections/Map<kotlin/String, dev.kord.core.entity.component/TextInputComponent> // dev.kord.core.entity.interaction/ModalSubmitInteraction.textInputs.<get-textInputs>|<get-textInputs>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/ModalSubmitInteraction // dev.kord.core.entity.interaction/ModalSubmitInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

sealed interface dev.kord.core.entity.interaction/SelectMenuInteraction : dev.kord.core.entity.interaction/ComponentInteraction { // dev.kord.core.entity.interaction/SelectMenuInteraction|null[0]
    open val component // dev.kord.core.entity.interaction/SelectMenuInteraction.component|{}component[0]
        open fun <get-component>(): dev.kord.core.entity.component/SelectMenuComponent // dev.kord.core.entity.interaction/SelectMenuInteraction.component.<get-component>|<get-component>(){}[0]
    open val resolvedObjects // dev.kord.core.entity.interaction/SelectMenuInteraction.resolvedObjects|{}resolvedObjects[0]
        open fun <get-resolvedObjects>(): dev.kord.core.entity.interaction/ResolvedObjects? // dev.kord.core.entity.interaction/SelectMenuInteraction.resolvedObjects.<get-resolvedObjects>|<get-resolvedObjects>(){}[0]
    open val values // dev.kord.core.entity.interaction/SelectMenuInteraction.values|{}values[0]
        open fun <get-values>(): kotlin.collections/List<kotlin/String> // dev.kord.core.entity.interaction/SelectMenuInteraction.values.<get-values>|<get-values>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/SelectMenuInteraction // dev.kord.core.entity.interaction/SelectMenuInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

sealed interface dev.kord.core.entity.interaction/UserCommandInteraction : dev.kord.core.entity.interaction/ApplicationCommandInteraction { // dev.kord.core.entity.interaction/UserCommandInteraction|null[0]
    open val target // dev.kord.core.entity.interaction/UserCommandInteraction.target|{}target[0]
        open fun <get-target>(): dev.kord.core.behavior/UserBehavior // dev.kord.core.entity.interaction/UserCommandInteraction.target.<get-target>|<get-target>(){}[0]
    open val targetId // dev.kord.core.entity.interaction/UserCommandInteraction.targetId|{}targetId[0]
        open fun <get-targetId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.interaction/UserCommandInteraction.targetId.<get-targetId>|<get-targetId>(){}[0]
    open val users // dev.kord.core.entity.interaction/UserCommandInteraction.users|{}users[0]
        open fun <get-users>(): kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.entity/User> // dev.kord.core.entity.interaction/UserCommandInteraction.users.<get-users>|<get-users>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/UserCommandInteraction // dev.kord.core.entity.interaction/UserCommandInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun getTarget(): dev.kord.core.entity/User // dev.kord.core.entity.interaction/UserCommandInteraction.getTarget|getTarget(){}[0]
    open suspend fun getTargetOrNull(): dev.kord.core.entity/User? // dev.kord.core.entity.interaction/UserCommandInteraction.getTargetOrNull|getTargetOrNull(){}[0]
}

sealed interface dev.kord.core.entity/Emoji { // dev.kord.core.entity/Emoji|null[0]
    abstract val mention // dev.kord.core.entity/Emoji.mention|{}mention[0]
        abstract fun <get-mention>(): kotlin/String // dev.kord.core.entity/Emoji.mention.<get-mention>|<get-mention>(){}[0]
    abstract val name // dev.kord.core.entity/Emoji.name|{}name[0]
        abstract fun <get-name>(): kotlin/String? // dev.kord.core.entity/Emoji.name.<get-name>|<get-name>(){}[0]
}

sealed interface dev.kord.core.event.automoderation/AutoModerationEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.automoderation/AutoModerationEvent|null[0]
    abstract val guildId // dev.kord.core.event.automoderation/AutoModerationEvent.guildId|{}guildId[0]
        abstract fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.automoderation/AutoModerationEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    abstract val rule // dev.kord.core.event.automoderation/AutoModerationEvent.rule|{}rule[0]
        abstract fun <get-rule>(): dev.kord.core.behavior.automoderation/TypedAutoModerationRuleBehavior // dev.kord.core.event.automoderation/AutoModerationEvent.rule.<get-rule>|<get-rule>(){}[0]
    abstract val ruleId // dev.kord.core.event.automoderation/AutoModerationEvent.ruleId|{}ruleId[0]
        abstract fun <get-ruleId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.automoderation/AutoModerationEvent.ruleId.<get-ruleId>|<get-ruleId>(){}[0]
    open val guild // dev.kord.core.event.automoderation/AutoModerationEvent.guild|{}guild[0]
        open fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.event.automoderation/AutoModerationEvent.guild.<get-guild>|<get-guild>(){}[0]

    abstract fun toString(): kotlin/String // dev.kord.core.event.automoderation/AutoModerationEvent.toString|toString(){}[0]
    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.automoderation/AutoModerationEvent // dev.kord.core.event.automoderation/AutoModerationEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.event.automoderation/AutoModerationEvent.getGuild|getGuild(){}[0]
    open suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.automoderation/AutoModerationEvent.getGuildOrNull|getGuildOrNull(){}[0]
}

sealed interface dev.kord.core.event.automoderation/AutoModerationRuleConfigurationEvent : dev.kord.core.event.automoderation/AutoModerationEvent { // dev.kord.core.event.automoderation/AutoModerationRuleConfigurationEvent|null[0]
    abstract val rule // dev.kord.core.event.automoderation/AutoModerationRuleConfigurationEvent.rule|{}rule[0]
        abstract fun <get-rule>(): dev.kord.core.entity.automoderation/AutoModerationRule // dev.kord.core.event.automoderation/AutoModerationRuleConfigurationEvent.rule.<get-rule>|<get-rule>(){}[0]
    open val guildId // dev.kord.core.event.automoderation/AutoModerationRuleConfigurationEvent.guildId|{}guildId[0]
        open fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.automoderation/AutoModerationRuleConfigurationEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    open val ruleId // dev.kord.core.event.automoderation/AutoModerationRuleConfigurationEvent.ruleId|{}ruleId[0]
        open fun <get-ruleId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.automoderation/AutoModerationRuleConfigurationEvent.ruleId.<get-ruleId>|<get-ruleId>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.automoderation/AutoModerationRuleConfigurationEvent // dev.kord.core.event.automoderation/AutoModerationRuleConfigurationEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

sealed interface dev.kord.core.event.channel.thread/ThreadChannelCreateEvent : dev.kord.core.event.channel/ChannelCreateEvent { // dev.kord.core.event.channel.thread/ThreadChannelCreateEvent|null[0]
    abstract val channel // dev.kord.core.event.channel.thread/ThreadChannelCreateEvent.channel|{}channel[0]
        abstract fun <get-channel>(): dev.kord.core.entity.channel.thread/ThreadChannel // dev.kord.core.event.channel.thread/ThreadChannelCreateEvent.channel.<get-channel>|<get-channel>(){}[0]
}

sealed interface dev.kord.core.event.channel.thread/ThreadChannelDeleteEvent : dev.kord.core.event/Event { // dev.kord.core.event.channel.thread/ThreadChannelDeleteEvent|null[0]
    abstract val channel // dev.kord.core.event.channel.thread/ThreadChannelDeleteEvent.channel|{}channel[0]
        abstract fun <get-channel>(): dev.kord.core.entity.channel.thread/DeletedThreadChannel // dev.kord.core.event.channel.thread/ThreadChannelDeleteEvent.channel.<get-channel>|<get-channel>(){}[0]
    abstract val old // dev.kord.core.event.channel.thread/ThreadChannelDeleteEvent.old|{}old[0]
        abstract fun <get-old>(): dev.kord.core.entity.channel.thread/ThreadChannel? // dev.kord.core.event.channel.thread/ThreadChannelDeleteEvent.old.<get-old>|<get-old>(){}[0]
    open val kord // dev.kord.core.event.channel.thread/ThreadChannelDeleteEvent.kord|{}kord[0]
        open fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.channel.thread/ThreadChannelDeleteEvent.kord.<get-kord>|<get-kord>(){}[0]
}

sealed interface dev.kord.core.event.channel.thread/ThreadUpdateEvent : dev.kord.core.event.channel/ChannelUpdateEvent { // dev.kord.core.event.channel.thread/ThreadUpdateEvent|null[0]
    abstract val channel // dev.kord.core.event.channel.thread/ThreadUpdateEvent.channel|{}channel[0]
        abstract fun <get-channel>(): dev.kord.core.entity.channel.thread/ThreadChannel // dev.kord.core.event.channel.thread/ThreadUpdateEvent.channel.<get-channel>|<get-channel>(){}[0]
}

sealed interface dev.kord.core.event.guild/GuildScheduledEventEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.guild/GuildScheduledEventEvent|null[0]
    abstract val scheduledEvent // dev.kord.core.event.guild/GuildScheduledEventEvent.scheduledEvent|{}scheduledEvent[0]
        abstract fun <get-scheduledEvent>(): dev.kord.core.entity/GuildScheduledEvent // dev.kord.core.event.guild/GuildScheduledEventEvent.scheduledEvent.<get-scheduledEvent>|<get-scheduledEvent>(){}[0]
    open val channelId // dev.kord.core.event.guild/GuildScheduledEventEvent.channelId|{}channelId[0]
        open fun <get-channelId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.event.guild/GuildScheduledEventEvent.channelId.<get-channelId>|<get-channelId>(){}[0]
    open val guildId // dev.kord.core.event.guild/GuildScheduledEventEvent.guildId|{}guildId[0]
        open fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/GuildScheduledEventEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    open val scheduledEventId // dev.kord.core.event.guild/GuildScheduledEventEvent.scheduledEventId|{}scheduledEventId[0]
        open fun <get-scheduledEventId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/GuildScheduledEventEvent.scheduledEventId.<get-scheduledEventId>|<get-scheduledEventId>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.guild/GuildScheduledEventEvent // dev.kord.core.event.guild/GuildScheduledEventEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun getChannelOrNull(): dev.kord.core.entity.channel/TopGuildChannel? // dev.kord.core.event.guild/GuildScheduledEventEvent.getChannelOrNull|getChannelOrNull(){}[0]
    open suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.event.guild/GuildScheduledEventEvent.getGuild|getGuild(){}[0]
    open suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.guild/GuildScheduledEventEvent.getGuildOrNull|getGuildOrNull(){}[0]
}

sealed interface dev.kord.core.event.guild/GuildScheduledEventUserEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.guild/GuildScheduledEventUserEvent|null[0]
    abstract val guildId // dev.kord.core.event.guild/GuildScheduledEventUserEvent.guildId|{}guildId[0]
        abstract fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/GuildScheduledEventUserEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    abstract val scheduledEventId // dev.kord.core.event.guild/GuildScheduledEventUserEvent.scheduledEventId|{}scheduledEventId[0]
        abstract fun <get-scheduledEventId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/GuildScheduledEventUserEvent.scheduledEventId.<get-scheduledEventId>|<get-scheduledEventId>(){}[0]
    abstract val userId // dev.kord.core.event.guild/GuildScheduledEventUserEvent.userId|{}userId[0]
        abstract fun <get-userId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/GuildScheduledEventUserEvent.userId.<get-userId>|<get-userId>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.guild/GuildScheduledEventUserEvent // dev.kord.core.event.guild/GuildScheduledEventUserEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun getEvent(): dev.kord.core.entity/GuildScheduledEvent // dev.kord.core.event.guild/GuildScheduledEventUserEvent.getEvent|getEvent(){}[0]
    open suspend fun getEventOrNull(): dev.kord.core.entity/GuildScheduledEvent? // dev.kord.core.event.guild/GuildScheduledEventUserEvent.getEventOrNull|getEventOrNull(){}[0]
    open suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.event.guild/GuildScheduledEventUserEvent.getGuild|getGuild(){}[0]
    open suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.guild/GuildScheduledEventUserEvent.getGuildOrNull|getGuildOrNull(){}[0]
    open suspend fun getMember(): dev.kord.core.entity/Member // dev.kord.core.event.guild/GuildScheduledEventUserEvent.getMember|getMember(){}[0]
    open suspend fun getMemberOrNull(): dev.kord.core.entity/Member? // dev.kord.core.event.guild/GuildScheduledEventUserEvent.getMemberOrNull|getMemberOrNull(){}[0]
    open suspend fun getUser(): dev.kord.core.entity/User // dev.kord.core.event.guild/GuildScheduledEventUserEvent.getUser|getUser(){}[0]
    open suspend fun getUserOrNull(): dev.kord.core.entity/User? // dev.kord.core.event.guild/GuildScheduledEventUserEvent.getUserOrNull|getUserOrNull(){}[0]
}

sealed interface dev.kord.core.event.interaction/ActionInteractionCreateEvent : dev.kord.core.event.interaction/InteractionCreateEvent { // dev.kord.core.event.interaction/ActionInteractionCreateEvent|null[0]
    abstract val interaction // dev.kord.core.event.interaction/ActionInteractionCreateEvent.interaction|{}interaction[0]
        abstract fun <get-interaction>(): dev.kord.core.entity.interaction/ActionInteraction // dev.kord.core.event.interaction/ActionInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
}

sealed interface dev.kord.core.event.interaction/ApplicationCommandCreateEvent : dev.kord.core.event/Event { // dev.kord.core.event.interaction/ApplicationCommandCreateEvent|null[0]
    abstract val command // dev.kord.core.event.interaction/ApplicationCommandCreateEvent.command|{}command[0]
        abstract fun <get-command>(): dev.kord.core.entity.application/GuildApplicationCommand // dev.kord.core.event.interaction/ApplicationCommandCreateEvent.command.<get-command>|<get-command>(){}[0]
}

sealed interface dev.kord.core.event.interaction/ApplicationCommandDeleteEvent : dev.kord.core.event/Event { // dev.kord.core.event.interaction/ApplicationCommandDeleteEvent|null[0]
    abstract val command // dev.kord.core.event.interaction/ApplicationCommandDeleteEvent.command|{}command[0]
        abstract fun <get-command>(): dev.kord.core.entity.application/GuildApplicationCommand // dev.kord.core.event.interaction/ApplicationCommandDeleteEvent.command.<get-command>|<get-command>(){}[0]
}

sealed interface dev.kord.core.event.interaction/ApplicationCommandInteractionCreateEvent : dev.kord.core.event.interaction/ActionInteractionCreateEvent { // dev.kord.core.event.interaction/ApplicationCommandInteractionCreateEvent|null[0]
    abstract val interaction // dev.kord.core.event.interaction/ApplicationCommandInteractionCreateEvent.interaction|{}interaction[0]
        abstract fun <get-interaction>(): dev.kord.core.entity.interaction/ApplicationCommandInteraction // dev.kord.core.event.interaction/ApplicationCommandInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
}

sealed interface dev.kord.core.event.interaction/ApplicationCommandUpdateEvent : dev.kord.core.event/Event { // dev.kord.core.event.interaction/ApplicationCommandUpdateEvent|null[0]
    abstract val command // dev.kord.core.event.interaction/ApplicationCommandUpdateEvent.command|{}command[0]
        abstract fun <get-command>(): dev.kord.core.entity.application/GuildApplicationCommand // dev.kord.core.event.interaction/ApplicationCommandUpdateEvent.command.<get-command>|<get-command>(){}[0]
}

sealed interface dev.kord.core.event.interaction/AutoCompleteInteractionCreateEvent : dev.kord.core.event.interaction/DataInteractionCreateEvent { // dev.kord.core.event.interaction/AutoCompleteInteractionCreateEvent|null[0]
    abstract val interaction // dev.kord.core.event.interaction/AutoCompleteInteractionCreateEvent.interaction|{}interaction[0]
        abstract fun <get-interaction>(): dev.kord.core.entity.interaction/AutoCompleteInteraction // dev.kord.core.event.interaction/AutoCompleteInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
}

sealed interface dev.kord.core.event.interaction/ButtonInteractionCreateEvent : dev.kord.core.event.interaction/ComponentInteractionCreateEvent { // dev.kord.core.event.interaction/ButtonInteractionCreateEvent|null[0]
    abstract val interaction // dev.kord.core.event.interaction/ButtonInteractionCreateEvent.interaction|{}interaction[0]
        abstract fun <get-interaction>(): dev.kord.core.entity.interaction/ButtonInteraction // dev.kord.core.event.interaction/ButtonInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
}

sealed interface dev.kord.core.event.interaction/ChatInputCommandInteractionCreateEvent : dev.kord.core.event.interaction/ApplicationCommandInteractionCreateEvent { // dev.kord.core.event.interaction/ChatInputCommandInteractionCreateEvent|null[0]
    abstract val interaction // dev.kord.core.event.interaction/ChatInputCommandInteractionCreateEvent.interaction|{}interaction[0]
        abstract fun <get-interaction>(): dev.kord.core.entity.interaction/ChatInputCommandInteraction // dev.kord.core.event.interaction/ChatInputCommandInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
}

sealed interface dev.kord.core.event.interaction/ComponentInteractionCreateEvent : dev.kord.core.event.interaction/ActionInteractionCreateEvent { // dev.kord.core.event.interaction/ComponentInteractionCreateEvent|null[0]
    abstract val interaction // dev.kord.core.event.interaction/ComponentInteractionCreateEvent.interaction|{}interaction[0]
        abstract fun <get-interaction>(): dev.kord.core.entity.interaction/ComponentInteraction // dev.kord.core.event.interaction/ComponentInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
}

sealed interface dev.kord.core.event.interaction/DataInteractionCreateEvent : dev.kord.core.event.interaction/InteractionCreateEvent { // dev.kord.core.event.interaction/DataInteractionCreateEvent|null[0]
    abstract val interaction // dev.kord.core.event.interaction/DataInteractionCreateEvent.interaction|{}interaction[0]
        abstract fun <get-interaction>(): dev.kord.core.entity.interaction/DataInteraction // dev.kord.core.event.interaction/DataInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
}

sealed interface dev.kord.core.event.interaction/GlobalApplicationCommandInteractionCreateEvent : dev.kord.core.event.interaction/ApplicationCommandInteractionCreateEvent { // dev.kord.core.event.interaction/GlobalApplicationCommandInteractionCreateEvent|null[0]
    abstract val interaction // dev.kord.core.event.interaction/GlobalApplicationCommandInteractionCreateEvent.interaction|{}interaction[0]
        abstract fun <get-interaction>(): dev.kord.core.entity.interaction/GlobalApplicationCommandInteraction // dev.kord.core.event.interaction/GlobalApplicationCommandInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
}

sealed interface dev.kord.core.event.interaction/GlobalComponentInteractionCreateEvent : dev.kord.core.event.interaction/ComponentInteractionCreateEvent { // dev.kord.core.event.interaction/GlobalComponentInteractionCreateEvent|null[0]
    abstract val interaction // dev.kord.core.event.interaction/GlobalComponentInteractionCreateEvent.interaction|{}interaction[0]
        abstract fun <get-interaction>(): dev.kord.core.entity.interaction/GlobalComponentInteraction // dev.kord.core.event.interaction/GlobalComponentInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
}

sealed interface dev.kord.core.event.interaction/GuildApplicationCommandInteractionCreateEvent : dev.kord.core.event.interaction/ApplicationCommandInteractionCreateEvent { // dev.kord.core.event.interaction/GuildApplicationCommandInteractionCreateEvent|null[0]
    abstract val interaction // dev.kord.core.event.interaction/GuildApplicationCommandInteractionCreateEvent.interaction|{}interaction[0]
        abstract fun <get-interaction>(): dev.kord.core.entity.interaction/GuildApplicationCommandInteraction // dev.kord.core.event.interaction/GuildApplicationCommandInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
}

sealed interface dev.kord.core.event.interaction/GuildComponentInteractionCreateEvent : dev.kord.core.event.interaction/ComponentInteractionCreateEvent { // dev.kord.core.event.interaction/GuildComponentInteractionCreateEvent|null[0]
    abstract val interaction // dev.kord.core.event.interaction/GuildComponentInteractionCreateEvent.interaction|{}interaction[0]
        abstract fun <get-interaction>(): dev.kord.core.entity.interaction/GuildComponentInteraction // dev.kord.core.event.interaction/GuildComponentInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
}

sealed interface dev.kord.core.event.interaction/InteractionCreateEvent : dev.kord.core.event/Event { // dev.kord.core.event.interaction/InteractionCreateEvent|null[0]
    abstract val interaction // dev.kord.core.event.interaction/InteractionCreateEvent.interaction|{}interaction[0]
        abstract fun <get-interaction>(): dev.kord.core.entity.interaction/Interaction // dev.kord.core.event.interaction/InteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
}

sealed interface dev.kord.core.event.interaction/MessageCommandInteractionCreateEvent : dev.kord.core.event.interaction/ApplicationCommandInteractionCreateEvent { // dev.kord.core.event.interaction/MessageCommandInteractionCreateEvent|null[0]
    abstract val interaction // dev.kord.core.event.interaction/MessageCommandInteractionCreateEvent.interaction|{}interaction[0]
        abstract fun <get-interaction>(): dev.kord.core.entity.interaction/MessageCommandInteraction // dev.kord.core.event.interaction/MessageCommandInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
}

sealed interface dev.kord.core.event.interaction/ModalSubmitInteractionCreateEvent : dev.kord.core.event.interaction/ActionInteractionCreateEvent { // dev.kord.core.event.interaction/ModalSubmitInteractionCreateEvent|null[0]
    abstract val interaction // dev.kord.core.event.interaction/ModalSubmitInteractionCreateEvent.interaction|{}interaction[0]
        abstract fun <get-interaction>(): dev.kord.core.entity.interaction/ModalSubmitInteraction // dev.kord.core.event.interaction/ModalSubmitInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
}

sealed interface dev.kord.core.event.interaction/SelectMenuInteractionCreateEvent : dev.kord.core.event.interaction/ComponentInteractionCreateEvent { // dev.kord.core.event.interaction/SelectMenuInteractionCreateEvent|null[0]
    abstract val interaction // dev.kord.core.event.interaction/SelectMenuInteractionCreateEvent.interaction|{}interaction[0]
        abstract fun <get-interaction>(): dev.kord.core.entity.interaction/SelectMenuInteraction // dev.kord.core.event.interaction/SelectMenuInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
}

sealed interface dev.kord.core.event.interaction/UserCommandInteractionCreateEvent : dev.kord.core.event.interaction/ApplicationCommandInteractionCreateEvent { // dev.kord.core.event.interaction/UserCommandInteractionCreateEvent|null[0]
    abstract val interaction // dev.kord.core.event.interaction/UserCommandInteractionCreateEvent.interaction|{}interaction[0]
        abstract fun <get-interaction>(): dev.kord.core.entity.interaction/UserCommandInteraction // dev.kord.core.event.interaction/UserCommandInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
}

abstract class dev.kord.core.builder.kord/BaseKordBuilder { // dev.kord.core.builder.kord/BaseKordBuilder|null[0]
    final val token // dev.kord.core.builder.kord/BaseKordBuilder.token|{}token[0]
        final fun <get-token>(): kotlin/String // dev.kord.core.builder.kord/BaseKordBuilder.token.<get-token>|<get-token>(){}[0]

    final var applicationId // dev.kord.core.builder.kord/BaseKordBuilder.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.builder.kord/BaseKordBuilder.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
        final fun <set-applicationId>(dev.kord.common.entity/Snowflake?) // dev.kord.core.builder.kord/BaseKordBuilder.applicationId.<set-applicationId>|<set-applicationId>(dev.kord.common.entity.Snowflake?){}[0]
    final var defaultDispatcher // dev.kord.core.builder.kord/BaseKordBuilder.defaultDispatcher|{}defaultDispatcher[0]
        final fun <get-defaultDispatcher>(): kotlinx.coroutines/CoroutineDispatcher // dev.kord.core.builder.kord/BaseKordBuilder.defaultDispatcher.<get-defaultDispatcher>|<get-defaultDispatcher>(){}[0]
        final fun <set-defaultDispatcher>(kotlinx.coroutines/CoroutineDispatcher) // dev.kord.core.builder.kord/BaseKordBuilder.defaultDispatcher.<set-defaultDispatcher>|<set-defaultDispatcher>(kotlinx.coroutines.CoroutineDispatcher){}[0]
    final var defaultStrategy // dev.kord.core.builder.kord/BaseKordBuilder.defaultStrategy|{}defaultStrategy[0]
        final fun <get-defaultStrategy>(): dev.kord.core.supplier/EntitySupplyStrategy<*> // dev.kord.core.builder.kord/BaseKordBuilder.defaultStrategy.<get-defaultStrategy>|<get-defaultStrategy>(){}[0]
        final fun <set-defaultStrategy>(dev.kord.core.supplier/EntitySupplyStrategy<*>) // dev.kord.core.builder.kord/BaseKordBuilder.defaultStrategy.<set-defaultStrategy>|<set-defaultStrategy>(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final var eventFlow // dev.kord.core.builder.kord/BaseKordBuilder.eventFlow|{}eventFlow[0]
        final fun <get-eventFlow>(): kotlinx.coroutines.flow/MutableSharedFlow<dev.kord.core.event/Event> // dev.kord.core.builder.kord/BaseKordBuilder.eventFlow.<get-eventFlow>|<get-eventFlow>(){}[0]
        final fun <set-eventFlow>(kotlinx.coroutines.flow/MutableSharedFlow<dev.kord.core.event/Event>) // dev.kord.core.builder.kord/BaseKordBuilder.eventFlow.<set-eventFlow>|<set-eventFlow>(kotlinx.coroutines.flow.MutableSharedFlow<dev.kord.core.event.Event>){}[0]
    final var gatewayEventInterceptor // dev.kord.core.builder.kord/BaseKordBuilder.gatewayEventInterceptor|{}gatewayEventInterceptor[0]
        final fun <get-gatewayEventInterceptor>(): dev.kord.core.gateway.handler/GatewayEventInterceptor? // dev.kord.core.builder.kord/BaseKordBuilder.gatewayEventInterceptor.<get-gatewayEventInterceptor>|<get-gatewayEventInterceptor>(){}[0]
        final fun <set-gatewayEventInterceptor>(dev.kord.core.gateway.handler/GatewayEventInterceptor?) // dev.kord.core.builder.kord/BaseKordBuilder.gatewayEventInterceptor.<set-gatewayEventInterceptor>|<set-gatewayEventInterceptor>(dev.kord.core.gateway.handler.GatewayEventInterceptor?){}[0]
    final var httpClient // dev.kord.core.builder.kord/BaseKordBuilder.httpClient|{}httpClient[0]
        final fun <get-httpClient>(): io.ktor.client/HttpClient? // dev.kord.core.builder.kord/BaseKordBuilder.httpClient.<get-httpClient>|<get-httpClient>(){}[0]
        final fun <set-httpClient>(io.ktor.client/HttpClient?) // dev.kord.core.builder.kord/BaseKordBuilder.httpClient.<set-httpClient>|<set-httpClient>(io.ktor.client.HttpClient?){}[0]
    final var stackTraceRecovery // dev.kord.core.builder.kord/BaseKordBuilder.stackTraceRecovery|{}stackTraceRecovery[0]
        final fun <get-stackTraceRecovery>(): kotlin/Boolean // dev.kord.core.builder.kord/BaseKordBuilder.stackTraceRecovery.<get-stackTraceRecovery>|<get-stackTraceRecovery>(){}[0]
        final fun <set-stackTraceRecovery>(kotlin/Boolean) // dev.kord.core.builder.kord/BaseKordBuilder.stackTraceRecovery.<set-stackTraceRecovery>|<set-stackTraceRecovery>(kotlin.Boolean){}[0]

    final fun cache(kotlin/Function2<dev.kord.core.cache/KordCacheBuilder, dev.kord.core/ClientResources, kotlin/Unit>) // dev.kord.core.builder.kord/BaseKordBuilder.cache|cache(kotlin.Function2<dev.kord.core.cache.KordCacheBuilder,dev.kord.core.ClientResources,kotlin.Unit>){}[0]
    final fun gateways(kotlin/Function2<dev.kord.core/ClientResources, kotlin.collections/List<kotlin/Int>, kotlin.collections/List<dev.kord.gateway/Gateway>>) // dev.kord.core.builder.kord/BaseKordBuilder.gateways|gateways(kotlin.Function2<dev.kord.core.ClientResources,kotlin.collections.List<kotlin.Int>,kotlin.collections.List<dev.kord.gateway.Gateway>>){}[0]
    final fun requestHandler(kotlin/Function1<dev.kord.core/ClientResources, dev.kord.rest.request/RequestHandler>) // dev.kord.core.builder.kord/BaseKordBuilder.requestHandler|requestHandler(kotlin.Function1<dev.kord.core.ClientResources,dev.kord.rest.request.RequestHandler>){}[0]
    final fun sharding(kotlin/Function1<kotlin/Int, dev.kord.gateway.builder/Shards>) // dev.kord.core.builder.kord/BaseKordBuilder.sharding|sharding(kotlin.Function1<kotlin.Int,dev.kord.gateway.builder.Shards>){}[0]
    final suspend fun buildBase(): dev.kord.core/Kord // dev.kord.core.builder.kord/BaseKordBuilder.buildBase|buildBase(){}[0]
    open suspend fun build(): dev.kord.core/Kord // dev.kord.core.builder.kord/BaseKordBuilder.build|build(){}[0]
}

abstract class dev.kord.core.builder.kord/RestOnlyBuilder { // dev.kord.core.builder.kord/RestOnlyBuilder|null[0]
    constructor <init>() // dev.kord.core.builder.kord/RestOnlyBuilder.<init>|<init>(){}[0]

    abstract val token // dev.kord.core.builder.kord/RestOnlyBuilder.token|{}token[0]
        abstract fun <get-token>(): kotlin/String // dev.kord.core.builder.kord/RestOnlyBuilder.token.<get-token>|<get-token>(){}[0]

    abstract var applicationId // dev.kord.core.builder.kord/RestOnlyBuilder.applicationId|{}applicationId[0]
        abstract fun <get-applicationId>(): dev.kord.common.entity/Snowflake // dev.kord.core.builder.kord/RestOnlyBuilder.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
        abstract fun <set-applicationId>(dev.kord.common.entity/Snowflake) // dev.kord.core.builder.kord/RestOnlyBuilder.applicationId.<set-applicationId>|<set-applicationId>(dev.kord.common.entity.Snowflake){}[0]
    final var defaultDispatcher // dev.kord.core.builder.kord/RestOnlyBuilder.defaultDispatcher|{}defaultDispatcher[0]
        final fun <get-defaultDispatcher>(): kotlinx.coroutines/CoroutineDispatcher // dev.kord.core.builder.kord/RestOnlyBuilder.defaultDispatcher.<get-defaultDispatcher>|<get-defaultDispatcher>(){}[0]
        final fun <set-defaultDispatcher>(kotlinx.coroutines/CoroutineDispatcher) // dev.kord.core.builder.kord/RestOnlyBuilder.defaultDispatcher.<set-defaultDispatcher>|<set-defaultDispatcher>(kotlinx.coroutines.CoroutineDispatcher){}[0]
    final var handlerBuilder // dev.kord.core.builder.kord/RestOnlyBuilder.handlerBuilder|{}handlerBuilder[0]
        final fun <get-handlerBuilder>(): kotlin/Function1<dev.kord.core/ClientResources, dev.kord.rest.request/RequestHandler> // dev.kord.core.builder.kord/RestOnlyBuilder.handlerBuilder.<get-handlerBuilder>|<get-handlerBuilder>(){}[0]
        final fun <set-handlerBuilder>(kotlin/Function1<dev.kord.core/ClientResources, dev.kord.rest.request/RequestHandler>) // dev.kord.core.builder.kord/RestOnlyBuilder.handlerBuilder.<set-handlerBuilder>|<set-handlerBuilder>(kotlin.Function1<dev.kord.core.ClientResources,dev.kord.rest.request.RequestHandler>){}[0]
    final var httpClient // dev.kord.core.builder.kord/RestOnlyBuilder.httpClient|{}httpClient[0]
        final fun <get-httpClient>(): io.ktor.client/HttpClient? // dev.kord.core.builder.kord/RestOnlyBuilder.httpClient.<get-httpClient>|<get-httpClient>(){}[0]
        final fun <set-httpClient>(io.ktor.client/HttpClient?) // dev.kord.core.builder.kord/RestOnlyBuilder.httpClient.<set-httpClient>|<set-httpClient>(io.ktor.client.HttpClient?){}[0]

    final fun build(): dev.kord.core/Kord // dev.kord.core.builder.kord/RestOnlyBuilder.build|build(){}[0]
    final fun requestHandler(kotlin/Function1<dev.kord.core/ClientResources, dev.kord.rest.request/RequestHandler>) // dev.kord.core.builder.kord/RestOnlyBuilder.requestHandler|requestHandler(kotlin.Function1<dev.kord.core.ClientResources,dev.kord.rest.request.RequestHandler>){}[0]
}

abstract class dev.kord.core.live.channel/LiveChannel : dev.kord.core.live/AbstractLiveKordEntity { // dev.kord.core.live.channel/LiveChannel|null[0]
    constructor <init>(dev.kord.core/Kord, kotlinx.coroutines/CoroutineScope = ...) // dev.kord.core.live.channel/LiveChannel.<init>|<init>(dev.kord.core.Kord;kotlinx.coroutines.CoroutineScope){}[0]

    abstract val channel // dev.kord.core.live.channel/LiveChannel.channel|{}channel[0]
        abstract fun <get-channel>(): dev.kord.core.entity.channel/Channel // dev.kord.core.live.channel/LiveChannel.channel.<get-channel>|<get-channel>(){}[0]

    open fun filter(dev.kord.core.event/Event): kotlin/Boolean // dev.kord.core.live.channel/LiveChannel.filter|filter(dev.kord.core.event.Event){}[0]
}

abstract class dev.kord.core.live/AbstractLiveKordEntity : dev.kord.core.live/LiveKordEntity, kotlinx.coroutines/CoroutineScope { // dev.kord.core.live/AbstractLiveKordEntity|null[0]
    constructor <init>(dev.kord.core/Kord, kotlinx.coroutines/CoroutineScope = ...) // dev.kord.core.live/AbstractLiveKordEntity.<init>|<init>(dev.kord.core.Kord;kotlinx.coroutines.CoroutineScope){}[0]

    final val coroutineContext // dev.kord.core.live/AbstractLiveKordEntity.coroutineContext|{}coroutineContext[0]
        final fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // dev.kord.core.live/AbstractLiveKordEntity.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]
    final val events // dev.kord.core.live/AbstractLiveKordEntity.events|{}events[0]
        final fun <get-events>(): kotlinx.coroutines.flow/SharedFlow<dev.kord.core.event/Event> // dev.kord.core.live/AbstractLiveKordEntity.events.<get-events>|<get-events>(){}[0]
    final val kord // dev.kord.core.live/AbstractLiveKordEntity.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.live/AbstractLiveKordEntity.kord.<get-kord>|<get-kord>(){}[0]

    abstract fun filter(dev.kord.core.event/Event): kotlin/Boolean // dev.kord.core.live/AbstractLiveKordEntity.filter|filter(dev.kord.core.event.Event){}[0]
    abstract fun update(dev.kord.core.event/Event) // dev.kord.core.live/AbstractLiveKordEntity.update|update(dev.kord.core.event.Event){}[0]
    open fun shutDown(kotlin.coroutines.cancellation/CancellationException) // dev.kord.core.live/AbstractLiveKordEntity.shutDown|shutDown(kotlin.coroutines.cancellation.CancellationException){}[0]
}

final class dev.kord.core.builder.kord/KordBuilder : dev.kord.core.builder.kord/BaseKordBuilder { // dev.kord.core.builder.kord/KordBuilder|null[0]
    constructor <init>(kotlin/String) // dev.kord.core.builder.kord/KordBuilder.<init>|<init>(kotlin.String){}[0]
}

final class dev.kord.core.builder.kord/KordProxyBuilder : dev.kord.core.builder.kord/RestOnlyBuilder { // dev.kord.core.builder.kord/KordProxyBuilder|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake) // dev.kord.core.builder.kord/KordProxyBuilder.<init>|<init>(dev.kord.common.entity.Snowflake){}[0]

    final var applicationId // dev.kord.core.builder.kord/KordProxyBuilder.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity/Snowflake // dev.kord.core.builder.kord/KordProxyBuilder.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
        final fun <set-applicationId>(dev.kord.common.entity/Snowflake) // dev.kord.core.builder.kord/KordProxyBuilder.applicationId.<set-applicationId>|<set-applicationId>(dev.kord.common.entity.Snowflake){}[0]
}

final class dev.kord.core.builder.kord/KordRestOnlyBuilder : dev.kord.core.builder.kord/RestOnlyBuilder { // dev.kord.core.builder.kord/KordRestOnlyBuilder|null[0]
    constructor <init>(kotlin/String) // dev.kord.core.builder.kord/KordRestOnlyBuilder.<init>|<init>(kotlin.String){}[0]

    final var applicationId // dev.kord.core.builder.kord/KordRestOnlyBuilder.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity/Snowflake // dev.kord.core.builder.kord/KordRestOnlyBuilder.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
        final fun <set-applicationId>(dev.kord.common.entity/Snowflake) // dev.kord.core.builder.kord/KordRestOnlyBuilder.applicationId.<set-applicationId>|<set-applicationId>(dev.kord.common.entity.Snowflake){}[0]
    final var token // dev.kord.core.builder.kord/KordRestOnlyBuilder.token|{}token[0]
        final fun <get-token>(): kotlin/String // dev.kord.core.builder.kord/KordRestOnlyBuilder.token.<get-token>|<get-token>(){}[0]
        final fun <set-token>(kotlin/String) // dev.kord.core.builder.kord/KordRestOnlyBuilder.token.<set-token>|<set-token>(kotlin.String){}[0]
}

final class dev.kord.core.cache.data/ActivityData { // dev.kord.core.cache.data/ActivityData|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity/ActivityType, dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlinx.datetime/Instant, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityTimestamps> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityEmoji?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityParty> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityAssets> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivitySecrets> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ActivityFlags> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ...) // dev.kord.core.cache.data/ActivityData.<init>|<init>(kotlin.String;dev.kord.common.entity.ActivityType;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlinx.datetime.Instant;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordActivityTimestamps>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordActivityEmoji?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordActivityParty>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordActivityAssets>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordActivitySecrets>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ActivityFlags>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>){}[0]

    final val applicationId // dev.kord.core.cache.data/ActivityData.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/ActivityData.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val assets // dev.kord.core.cache.data/ActivityData.assets|{}assets[0]
        final fun <get-assets>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityAssets> // dev.kord.core.cache.data/ActivityData.assets.<get-assets>|<get-assets>(){}[0]
    final val buttons // dev.kord.core.cache.data/ActivityData.buttons|{}buttons[0]
        final fun <get-buttons>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.core.cache.data/ActivityData.buttons.<get-buttons>|<get-buttons>(){}[0]
    final val createdAt // dev.kord.core.cache.data/ActivityData.createdAt|{}createdAt[0]
        final fun <get-createdAt>(): kotlinx.datetime/Instant // dev.kord.core.cache.data/ActivityData.createdAt.<get-createdAt>|<get-createdAt>(){}[0]
    final val details // dev.kord.core.cache.data/ActivityData.details|{}details[0]
        final fun <get-details>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/ActivityData.details.<get-details>|<get-details>(){}[0]
    final val emoji // dev.kord.core.cache.data/ActivityData.emoji|{}emoji[0]
        final fun <get-emoji>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityEmoji?> // dev.kord.core.cache.data/ActivityData.emoji.<get-emoji>|<get-emoji>(){}[0]
    final val flags // dev.kord.core.cache.data/ActivityData.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ActivityFlags> // dev.kord.core.cache.data/ActivityData.flags.<get-flags>|<get-flags>(){}[0]
    final val instance // dev.kord.core.cache.data/ActivityData.instance|{}instance[0]
        final fun <get-instance>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/ActivityData.instance.<get-instance>|<get-instance>(){}[0]
    final val name // dev.kord.core.cache.data/ActivityData.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.cache.data/ActivityData.name.<get-name>|<get-name>(){}[0]
    final val party // dev.kord.core.cache.data/ActivityData.party|{}party[0]
        final fun <get-party>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityParty> // dev.kord.core.cache.data/ActivityData.party.<get-party>|<get-party>(){}[0]
    final val secrets // dev.kord.core.cache.data/ActivityData.secrets|{}secrets[0]
        final fun <get-secrets>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivitySecrets> // dev.kord.core.cache.data/ActivityData.secrets.<get-secrets>|<get-secrets>(){}[0]
    final val state // dev.kord.core.cache.data/ActivityData.state|{}state[0]
        final fun <get-state>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/ActivityData.state.<get-state>|<get-state>(){}[0]
    final val timestamps // dev.kord.core.cache.data/ActivityData.timestamps|{}timestamps[0]
        final fun <get-timestamps>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityTimestamps> // dev.kord.core.cache.data/ActivityData.timestamps.<get-timestamps>|<get-timestamps>(){}[0]
    final val type // dev.kord.core.cache.data/ActivityData.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ActivityType // dev.kord.core.cache.data/ActivityData.type.<get-type>|<get-type>(){}[0]
    final val url // dev.kord.core.cache.data/ActivityData.url|{}url[0]
        final fun <get-url>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/ActivityData.url.<get-url>|<get-url>(){}[0]

    final fun component1(): kotlin/String // dev.kord.core.cache.data/ActivityData.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityParty> // dev.kord.core.cache.data/ActivityData.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityAssets> // dev.kord.core.cache.data/ActivityData.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivitySecrets> // dev.kord.core.cache.data/ActivityData.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/ActivityData.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ActivityFlags> // dev.kord.core.cache.data/ActivityData.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.core.cache.data/ActivityData.component15|component15(){}[0]
    final fun component2(): dev.kord.common.entity/ActivityType // dev.kord.core.cache.data/ActivityData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/ActivityData.component3|component3(){}[0]
    final fun component4(): kotlinx.datetime/Instant // dev.kord.core.cache.data/ActivityData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityTimestamps> // dev.kord.core.cache.data/ActivityData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/ActivityData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/ActivityData.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/ActivityData.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityEmoji?> // dev.kord.core.cache.data/ActivityData.component9|component9(){}[0]
    final fun copy(kotlin/String = ..., dev.kord.common.entity/ActivityType = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlinx.datetime/Instant = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityTimestamps> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityEmoji?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityParty> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityAssets> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivitySecrets> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ActivityFlags> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ...): dev.kord.core.cache.data/ActivityData // dev.kord.core.cache.data/ActivityData.copy|copy(kotlin.String;dev.kord.common.entity.ActivityType;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlinx.datetime.Instant;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordActivityTimestamps>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordActivityEmoji?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordActivityParty>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordActivityAssets>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordActivitySecrets>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ActivityFlags>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/ActivityData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/ActivityData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/ActivityData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/ActivityData> { // dev.kord.core.cache.data/ActivityData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/ActivityData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/ActivityData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/ActivityData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/ActivityData // dev.kord.core.cache.data/ActivityData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/ActivityData) // dev.kord.core.cache.data/ActivityData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.ActivityData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/ActivityData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/ActivityData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordActivity): dev.kord.core.cache.data/ActivityData // dev.kord.core.cache.data/ActivityData.Companion.from|from(dev.kord.common.entity.DiscordActivity){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/ActivityData> // dev.kord.core.cache.data/ActivityData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/ApplicationCommandData { // dev.kord.core.cache.data/ApplicationCommandData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationCommandType> = ..., dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> = ..., kotlin/String?, dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ApplicationCommandOptionData>> = ..., dev.kord.common.entity/Permissions?, dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean? = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity/Snowflake) // dev.kord.core.cache.data/ApplicationCommandData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ApplicationCommandType>;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>;kotlin.String?;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.ApplicationCommandOptionData>>;dev.kord.common.entity.Permissions?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.Snowflake){}[0]

    final val applicationId // dev.kord.core.cache.data/ApplicationCommandData.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/ApplicationCommandData.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val defaultMemberPermissions // dev.kord.core.cache.data/ApplicationCommandData.defaultMemberPermissions|{}defaultMemberPermissions[0]
        final fun <get-defaultMemberPermissions>(): dev.kord.common.entity/Permissions? // dev.kord.core.cache.data/ApplicationCommandData.defaultMemberPermissions.<get-defaultMemberPermissions>|<get-defaultMemberPermissions>(){}[0]
    final val defaultPermission // dev.kord.core.cache.data/ApplicationCommandData.defaultPermission|{}defaultPermission[0]
        final fun <get-defaultPermission>(): dev.kord.common.entity.optional/OptionalBoolean? // dev.kord.core.cache.data/ApplicationCommandData.defaultPermission.<get-defaultPermission>|<get-defaultPermission>(){}[0]
    final val description // dev.kord.core.cache.data/ApplicationCommandData.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.core.cache.data/ApplicationCommandData.description.<get-description>|<get-description>(){}[0]
    final val descriptionLocalizations // dev.kord.core.cache.data/ApplicationCommandData.descriptionLocalizations|{}descriptionLocalizations[0]
        final fun <get-descriptionLocalizations>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.core.cache.data/ApplicationCommandData.descriptionLocalizations.<get-descriptionLocalizations>|<get-descriptionLocalizations>(){}[0]
    final val dmPermission // dev.kord.core.cache.data/ApplicationCommandData.dmPermission|{}dmPermission[0]
        final fun <get-dmPermission>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/ApplicationCommandData.dmPermission.<get-dmPermission>|<get-dmPermission>(){}[0]
    final val guildId // dev.kord.core.cache.data/ApplicationCommandData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/ApplicationCommandData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.core.cache.data/ApplicationCommandData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/ApplicationCommandData.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.core.cache.data/ApplicationCommandData.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.cache.data/ApplicationCommandData.name.<get-name>|<get-name>(){}[0]
    final val nameLocalizations // dev.kord.core.cache.data/ApplicationCommandData.nameLocalizations|{}nameLocalizations[0]
        final fun <get-nameLocalizations>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.core.cache.data/ApplicationCommandData.nameLocalizations.<get-nameLocalizations>|<get-nameLocalizations>(){}[0]
    final val nsfw // dev.kord.core.cache.data/ApplicationCommandData.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/ApplicationCommandData.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
    final val options // dev.kord.core.cache.data/ApplicationCommandData.options|{}options[0]
        final fun <get-options>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ApplicationCommandOptionData>> // dev.kord.core.cache.data/ApplicationCommandData.options.<get-options>|<get-options>(){}[0]
    final val type // dev.kord.core.cache.data/ApplicationCommandData.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationCommandType> // dev.kord.core.cache.data/ApplicationCommandData.type.<get-type>|<get-type>(){}[0]
    final val version // dev.kord.core.cache.data/ApplicationCommandData.version|{}version[0]
        final fun <get-version>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/ApplicationCommandData.version.<get-version>|<get-version>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/ApplicationCommandData.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity/Permissions? // dev.kord.core.cache.data/ApplicationCommandData.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/ApplicationCommandData.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/OptionalBoolean? // dev.kord.core.cache.data/ApplicationCommandData.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/ApplicationCommandData.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/ApplicationCommandData.component14|component14(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationCommandType> // dev.kord.core.cache.data/ApplicationCommandData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/ApplicationCommandData.component3|component3(){}[0]
    final fun component4(): kotlin/String // dev.kord.core.cache.data/ApplicationCommandData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.core.cache.data/ApplicationCommandData.component5|component5(){}[0]
    final fun component6(): kotlin/String? // dev.kord.core.cache.data/ApplicationCommandData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.core.cache.data/ApplicationCommandData.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/ApplicationCommandData.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ApplicationCommandOptionData>> // dev.kord.core.cache.data/ApplicationCommandData.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationCommandType> = ..., dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> = ..., kotlin/String? = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ApplicationCommandOptionData>> = ..., dev.kord.common.entity/Permissions? = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean? = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity/Snowflake = ...): dev.kord.core.cache.data/ApplicationCommandData // dev.kord.core.cache.data/ApplicationCommandData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ApplicationCommandType>;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>;kotlin.String?;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.ApplicationCommandOptionData>>;dev.kord.common.entity.Permissions?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.Snowflake){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/ApplicationCommandData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/ApplicationCommandData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/ApplicationCommandData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/ApplicationCommandData> { // dev.kord.core.cache.data/ApplicationCommandData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/ApplicationCommandData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/ApplicationCommandData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/ApplicationCommandData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/ApplicationCommandData // dev.kord.core.cache.data/ApplicationCommandData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/ApplicationCommandData) // dev.kord.core.cache.data/ApplicationCommandData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.ApplicationCommandData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/ApplicationCommandData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/ApplicationCommandData.Companion.$childSerializers|{}$childSerializers[0]
        final val description // dev.kord.core.cache.data/ApplicationCommandData.Companion.description|{}description[0]
            final fun <get-description>(): dev.kord.cache.api.data/DataDescription<dev.kord.core.cache.data/ApplicationCommandData, dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/ApplicationCommandData.Companion.description.<get-description>|<get-description>(){}[0]

        final fun from(dev.kord.common.entity/DiscordApplicationCommand): dev.kord.core.cache.data/ApplicationCommandData // dev.kord.core.cache.data/ApplicationCommandData.Companion.from|from(dev.kord.common.entity.DiscordApplicationCommand){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/ApplicationCommandData> // dev.kord.core.cache.data/ApplicationCommandData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/ApplicationCommandGroupData { // dev.kord.core.cache.data/ApplicationCommandGroupData|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin.collections/List<dev.kord.core.cache.data/ApplicationCommandSubcommandData>) // dev.kord.core.cache.data/ApplicationCommandGroupData.<init>|<init>(kotlin.String;kotlin.String;kotlin.collections.List<dev.kord.core.cache.data.ApplicationCommandSubcommandData>){}[0]

    final val description // dev.kord.core.cache.data/ApplicationCommandGroupData.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.core.cache.data/ApplicationCommandGroupData.description.<get-description>|<get-description>(){}[0]
    final val name // dev.kord.core.cache.data/ApplicationCommandGroupData.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.cache.data/ApplicationCommandGroupData.name.<get-name>|<get-name>(){}[0]
    final val subCommands // dev.kord.core.cache.data/ApplicationCommandGroupData.subCommands|{}subCommands[0]
        final fun <get-subCommands>(): kotlin.collections/List<dev.kord.core.cache.data/ApplicationCommandSubcommandData> // dev.kord.core.cache.data/ApplicationCommandGroupData.subCommands.<get-subCommands>|<get-subCommands>(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/ApplicationCommandGroupData> { // dev.kord.core.cache.data/ApplicationCommandGroupData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/ApplicationCommandGroupData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/ApplicationCommandGroupData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/ApplicationCommandGroupData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/ApplicationCommandGroupData // dev.kord.core.cache.data/ApplicationCommandGroupData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/ApplicationCommandGroupData) // dev.kord.core.cache.data/ApplicationCommandGroupData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.ApplicationCommandGroupData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/ApplicationCommandGroupData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/ApplicationCommandGroupData.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/ApplicationCommandGroupData> // dev.kord.core.cache.data/ApplicationCommandGroupData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/ApplicationCommandOptionChoiceData { // dev.kord.core.cache.data/ApplicationCommandOptionChoiceData|null[0]
    constructor <init>(kotlin/String, kotlin/String) // dev.kord.core.cache.data/ApplicationCommandOptionChoiceData.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final val name // dev.kord.core.cache.data/ApplicationCommandOptionChoiceData.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.cache.data/ApplicationCommandOptionChoiceData.name.<get-name>|<get-name>(){}[0]
    final val value // dev.kord.core.cache.data/ApplicationCommandOptionChoiceData.value|{}value[0]
        final fun <get-value>(): kotlin/String // dev.kord.core.cache.data/ApplicationCommandOptionChoiceData.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/String // dev.kord.core.cache.data/ApplicationCommandOptionChoiceData.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.core.cache.data/ApplicationCommandOptionChoiceData.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ...): dev.kord.core.cache.data/ApplicationCommandOptionChoiceData // dev.kord.core.cache.data/ApplicationCommandOptionChoiceData.copy|copy(kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/ApplicationCommandOptionChoiceData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/ApplicationCommandOptionChoiceData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/ApplicationCommandOptionChoiceData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/ApplicationCommandOptionChoiceData> { // dev.kord.core.cache.data/ApplicationCommandOptionChoiceData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/ApplicationCommandOptionChoiceData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/ApplicationCommandOptionChoiceData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/ApplicationCommandOptionChoiceData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/ApplicationCommandOptionChoiceData // dev.kord.core.cache.data/ApplicationCommandOptionChoiceData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/ApplicationCommandOptionChoiceData) // dev.kord.core.cache.data/ApplicationCommandOptionChoiceData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.ApplicationCommandOptionChoiceData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/ApplicationCommandOptionChoiceData.Companion|null[0]
        final fun from(dev.kord.common.entity/Choice): dev.kord.core.cache.data/ApplicationCommandOptionChoiceData // dev.kord.core.cache.data/ApplicationCommandOptionChoiceData.Companion.from|from(dev.kord.common.entity.Choice){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/ApplicationCommandOptionChoiceData> // dev.kord.core.cache.data/ApplicationCommandOptionChoiceData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/ApplicationCommandOptionData { // dev.kord.core.cache.data/ApplicationCommandOptionData|null[0]
    constructor <init>(dev.kord.common.entity/ApplicationCommandOptionType, kotlin/String, kotlin/String, dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ApplicationCommandOptionChoiceData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ApplicationCommandOptionData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> = ..., dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonPrimitive> = ..., dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonPrimitive> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ...) // dev.kord.core.cache.data/ApplicationCommandOptionData.<init>|<init>(dev.kord.common.entity.ApplicationCommandOptionType;kotlin.String;kotlin.String;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.ApplicationCommandOptionChoiceData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.ApplicationCommandOptionData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.ChannelType>>;dev.kord.common.entity.optional.Optional<kotlinx.serialization.json.JsonPrimitive>;dev.kord.common.entity.optional.Optional<kotlinx.serialization.json.JsonPrimitive>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt){}[0]

    final val channelTypes // dev.kord.core.cache.data/ApplicationCommandOptionData.channelTypes|{}channelTypes[0]
        final fun <get-channelTypes>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> // dev.kord.core.cache.data/ApplicationCommandOptionData.channelTypes.<get-channelTypes>|<get-channelTypes>(){}[0]
    final val choices // dev.kord.core.cache.data/ApplicationCommandOptionData.choices|{}choices[0]
        final fun <get-choices>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ApplicationCommandOptionChoiceData>> // dev.kord.core.cache.data/ApplicationCommandOptionData.choices.<get-choices>|<get-choices>(){}[0]
    final val default // dev.kord.core.cache.data/ApplicationCommandOptionData.default|{}default[0]
        final fun <get-default>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/ApplicationCommandOptionData.default.<get-default>|<get-default>(){}[0]
    final val description // dev.kord.core.cache.data/ApplicationCommandOptionData.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.core.cache.data/ApplicationCommandOptionData.description.<get-description>|<get-description>(){}[0]
    final val maxLength // dev.kord.core.cache.data/ApplicationCommandOptionData.maxLength|{}maxLength[0]
        final fun <get-maxLength>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ApplicationCommandOptionData.maxLength.<get-maxLength>|<get-maxLength>(){}[0]
    final val maxValue // dev.kord.core.cache.data/ApplicationCommandOptionData.maxValue|{}maxValue[0]
        final fun <get-maxValue>(): dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonPrimitive> // dev.kord.core.cache.data/ApplicationCommandOptionData.maxValue.<get-maxValue>|<get-maxValue>(){}[0]
    final val minLength // dev.kord.core.cache.data/ApplicationCommandOptionData.minLength|{}minLength[0]
        final fun <get-minLength>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ApplicationCommandOptionData.minLength.<get-minLength>|<get-minLength>(){}[0]
    final val minValue // dev.kord.core.cache.data/ApplicationCommandOptionData.minValue|{}minValue[0]
        final fun <get-minValue>(): dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonPrimitive> // dev.kord.core.cache.data/ApplicationCommandOptionData.minValue.<get-minValue>|<get-minValue>(){}[0]
    final val name // dev.kord.core.cache.data/ApplicationCommandOptionData.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.cache.data/ApplicationCommandOptionData.name.<get-name>|<get-name>(){}[0]
    final val options // dev.kord.core.cache.data/ApplicationCommandOptionData.options|{}options[0]
        final fun <get-options>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ApplicationCommandOptionData>> // dev.kord.core.cache.data/ApplicationCommandOptionData.options.<get-options>|<get-options>(){}[0]
    final val required // dev.kord.core.cache.data/ApplicationCommandOptionData.required|{}required[0]
        final fun <get-required>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/ApplicationCommandOptionData.required.<get-required>|<get-required>(){}[0]
    final val type // dev.kord.core.cache.data/ApplicationCommandOptionData.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.core.cache.data/ApplicationCommandOptionData.type.<get-type>|<get-type>(){}[0]

    final fun component1(): dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.core.cache.data/ApplicationCommandOptionData.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonPrimitive> // dev.kord.core.cache.data/ApplicationCommandOptionData.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ApplicationCommandOptionData.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ApplicationCommandOptionData.component12|component12(){}[0]
    final fun component2(): kotlin/String // dev.kord.core.cache.data/ApplicationCommandOptionData.component2|component2(){}[0]
    final fun component3(): kotlin/String // dev.kord.core.cache.data/ApplicationCommandOptionData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/ApplicationCommandOptionData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/ApplicationCommandOptionData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ApplicationCommandOptionChoiceData>> // dev.kord.core.cache.data/ApplicationCommandOptionData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ApplicationCommandOptionData>> // dev.kord.core.cache.data/ApplicationCommandOptionData.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> // dev.kord.core.cache.data/ApplicationCommandOptionData.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonPrimitive> // dev.kord.core.cache.data/ApplicationCommandOptionData.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/ApplicationCommandOptionType = ..., kotlin/String = ..., kotlin/String = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ApplicationCommandOptionChoiceData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ApplicationCommandOptionData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> = ..., dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonPrimitive> = ..., dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonPrimitive> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ...): dev.kord.core.cache.data/ApplicationCommandOptionData // dev.kord.core.cache.data/ApplicationCommandOptionData.copy|copy(dev.kord.common.entity.ApplicationCommandOptionType;kotlin.String;kotlin.String;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.ApplicationCommandOptionChoiceData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.ApplicationCommandOptionData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.ChannelType>>;dev.kord.common.entity.optional.Optional<kotlinx.serialization.json.JsonPrimitive>;dev.kord.common.entity.optional.Optional<kotlinx.serialization.json.JsonPrimitive>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/ApplicationCommandOptionData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/ApplicationCommandOptionData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/ApplicationCommandOptionData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/ApplicationCommandOptionData> { // dev.kord.core.cache.data/ApplicationCommandOptionData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/ApplicationCommandOptionData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/ApplicationCommandOptionData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/ApplicationCommandOptionData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/ApplicationCommandOptionData // dev.kord.core.cache.data/ApplicationCommandOptionData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/ApplicationCommandOptionData) // dev.kord.core.cache.data/ApplicationCommandOptionData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.ApplicationCommandOptionData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/ApplicationCommandOptionData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/ApplicationCommandOptionData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/ApplicationCommandOption): dev.kord.core.cache.data/ApplicationCommandOptionData // dev.kord.core.cache.data/ApplicationCommandOptionData.Companion.from|from(dev.kord.common.entity.ApplicationCommandOption){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/ApplicationCommandOptionData> // dev.kord.core.cache.data/ApplicationCommandOptionData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/ApplicationCommandParameterData { // dev.kord.core.cache.data/ApplicationCommandParameterData|null[0]
    constructor <init>(kotlin/String, kotlin/String, dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ApplicationCommandOptionChoiceData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> = ...) // dev.kord.core.cache.data/ApplicationCommandParameterData.<init>|<init>(kotlin.String;kotlin.String;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.ApplicationCommandOptionChoiceData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.ChannelType>>){}[0]

    final val channelTypes // dev.kord.core.cache.data/ApplicationCommandParameterData.channelTypes|{}channelTypes[0]
        final fun <get-channelTypes>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> // dev.kord.core.cache.data/ApplicationCommandParameterData.channelTypes.<get-channelTypes>|<get-channelTypes>(){}[0]
    final val choices // dev.kord.core.cache.data/ApplicationCommandParameterData.choices|{}choices[0]
        final fun <get-choices>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ApplicationCommandOptionChoiceData>> // dev.kord.core.cache.data/ApplicationCommandParameterData.choices.<get-choices>|<get-choices>(){}[0]
    final val description // dev.kord.core.cache.data/ApplicationCommandParameterData.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.core.cache.data/ApplicationCommandParameterData.description.<get-description>|<get-description>(){}[0]
    final val name // dev.kord.core.cache.data/ApplicationCommandParameterData.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.cache.data/ApplicationCommandParameterData.name.<get-name>|<get-name>(){}[0]
    final val required // dev.kord.core.cache.data/ApplicationCommandParameterData.required|{}required[0]
        final fun <get-required>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/ApplicationCommandParameterData.required.<get-required>|<get-required>(){}[0]

    final fun component1(): kotlin/String // dev.kord.core.cache.data/ApplicationCommandParameterData.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.core.cache.data/ApplicationCommandParameterData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/ApplicationCommandParameterData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ApplicationCommandOptionChoiceData>> // dev.kord.core.cache.data/ApplicationCommandParameterData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> // dev.kord.core.cache.data/ApplicationCommandParameterData.component5|component5(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ApplicationCommandOptionChoiceData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> = ...): dev.kord.core.cache.data/ApplicationCommandParameterData // dev.kord.core.cache.data/ApplicationCommandParameterData.copy|copy(kotlin.String;kotlin.String;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.ApplicationCommandOptionChoiceData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.ChannelType>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/ApplicationCommandParameterData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/ApplicationCommandParameterData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/ApplicationCommandParameterData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/ApplicationCommandParameterData> { // dev.kord.core.cache.data/ApplicationCommandParameterData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/ApplicationCommandParameterData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/ApplicationCommandParameterData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/ApplicationCommandParameterData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/ApplicationCommandParameterData // dev.kord.core.cache.data/ApplicationCommandParameterData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/ApplicationCommandParameterData) // dev.kord.core.cache.data/ApplicationCommandParameterData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.ApplicationCommandParameterData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/ApplicationCommandParameterData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/ApplicationCommandParameterData.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/ApplicationCommandParameterData> // dev.kord.core.cache.data/ApplicationCommandParameterData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/ApplicationCommandSubcommandData { // dev.kord.core.cache.data/ApplicationCommandSubcommandData|null[0]
    constructor <init>(kotlin/String, kotlin/String, dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ApplicationCommandParameterData>> = ...) // dev.kord.core.cache.data/ApplicationCommandSubcommandData.<init>|<init>(kotlin.String;kotlin.String;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.ApplicationCommandParameterData>>){}[0]

    final val description // dev.kord.core.cache.data/ApplicationCommandSubcommandData.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.core.cache.data/ApplicationCommandSubcommandData.description.<get-description>|<get-description>(){}[0]
    final val isDefault // dev.kord.core.cache.data/ApplicationCommandSubcommandData.isDefault|{}isDefault[0]
        final fun <get-isDefault>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/ApplicationCommandSubcommandData.isDefault.<get-isDefault>|<get-isDefault>(){}[0]
    final val name // dev.kord.core.cache.data/ApplicationCommandSubcommandData.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.cache.data/ApplicationCommandSubcommandData.name.<get-name>|<get-name>(){}[0]
    final val parameters // dev.kord.core.cache.data/ApplicationCommandSubcommandData.parameters|{}parameters[0]
        final fun <get-parameters>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ApplicationCommandParameterData>> // dev.kord.core.cache.data/ApplicationCommandSubcommandData.parameters.<get-parameters>|<get-parameters>(){}[0]

    final fun component1(): kotlin/String // dev.kord.core.cache.data/ApplicationCommandSubcommandData.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.core.cache.data/ApplicationCommandSubcommandData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/ApplicationCommandSubcommandData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ApplicationCommandParameterData>> // dev.kord.core.cache.data/ApplicationCommandSubcommandData.component4|component4(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ApplicationCommandParameterData>> = ...): dev.kord.core.cache.data/ApplicationCommandSubcommandData // dev.kord.core.cache.data/ApplicationCommandSubcommandData.copy|copy(kotlin.String;kotlin.String;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.ApplicationCommandParameterData>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/ApplicationCommandSubcommandData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/ApplicationCommandSubcommandData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/ApplicationCommandSubcommandData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/ApplicationCommandSubcommandData> { // dev.kord.core.cache.data/ApplicationCommandSubcommandData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/ApplicationCommandSubcommandData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/ApplicationCommandSubcommandData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/ApplicationCommandSubcommandData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/ApplicationCommandSubcommandData // dev.kord.core.cache.data/ApplicationCommandSubcommandData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/ApplicationCommandSubcommandData) // dev.kord.core.cache.data/ApplicationCommandSubcommandData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.ApplicationCommandSubcommandData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/ApplicationCommandSubcommandData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/ApplicationCommandSubcommandData.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/ApplicationCommandSubcommandData> // dev.kord.core.cache.data/ApplicationCommandSubcommandData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/ApplicationData : dev.kord.core.cache.data/BaseApplicationData { // dev.kord.core.cache.data/ApplicationData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/String?, kotlin/String, dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., kotlin/Boolean, kotlin/Boolean, dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/String, dev.kord.core.cache.data/TeamData?, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationFlags> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InstallParams> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...) // dev.kord.core.cache.data/ApplicationData.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String?;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;kotlin.Boolean;kotlin.Boolean;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.String;dev.kord.core.cache.data.TeamData?;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ApplicationFlags>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.InstallParams>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]

    final val botPublic // dev.kord.core.cache.data/ApplicationData.botPublic|{}botPublic[0]
        final fun <get-botPublic>(): kotlin/Boolean // dev.kord.core.cache.data/ApplicationData.botPublic.<get-botPublic>|<get-botPublic>(){}[0]
    final val botRequireCodeGrant // dev.kord.core.cache.data/ApplicationData.botRequireCodeGrant|{}botRequireCodeGrant[0]
        final fun <get-botRequireCodeGrant>(): kotlin/Boolean // dev.kord.core.cache.data/ApplicationData.botRequireCodeGrant.<get-botRequireCodeGrant>|<get-botRequireCodeGrant>(){}[0]
    final val coverImage // dev.kord.core.cache.data/ApplicationData.coverImage|{}coverImage[0]
        final fun <get-coverImage>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ApplicationData.coverImage.<get-coverImage>|<get-coverImage>(){}[0]
    final val customInstallUrl // dev.kord.core.cache.data/ApplicationData.customInstallUrl|{}customInstallUrl[0]
        final fun <get-customInstallUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ApplicationData.customInstallUrl.<get-customInstallUrl>|<get-customInstallUrl>(){}[0]
    final val description // dev.kord.core.cache.data/ApplicationData.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.core.cache.data/ApplicationData.description.<get-description>|<get-description>(){}[0]
    final val flags // dev.kord.core.cache.data/ApplicationData.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationFlags> // dev.kord.core.cache.data/ApplicationData.flags.<get-flags>|<get-flags>(){}[0]
    final val guildId // dev.kord.core.cache.data/ApplicationData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/ApplicationData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val icon // dev.kord.core.cache.data/ApplicationData.icon|{}icon[0]
        final fun <get-icon>(): kotlin/String? // dev.kord.core.cache.data/ApplicationData.icon.<get-icon>|<get-icon>(){}[0]
    final val id // dev.kord.core.cache.data/ApplicationData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/ApplicationData.id.<get-id>|<get-id>(){}[0]
    final val installParams // dev.kord.core.cache.data/ApplicationData.installParams|{}installParams[0]
        final fun <get-installParams>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InstallParams> // dev.kord.core.cache.data/ApplicationData.installParams.<get-installParams>|<get-installParams>(){}[0]
    final val name // dev.kord.core.cache.data/ApplicationData.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.cache.data/ApplicationData.name.<get-name>|<get-name>(){}[0]
    final val ownerId // dev.kord.core.cache.data/ApplicationData.ownerId|{}ownerId[0]
        final fun <get-ownerId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/ApplicationData.ownerId.<get-ownerId>|<get-ownerId>(){}[0]
    final val primarySkuId // dev.kord.core.cache.data/ApplicationData.primarySkuId|{}primarySkuId[0]
        final fun <get-primarySkuId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/ApplicationData.primarySkuId.<get-primarySkuId>|<get-primarySkuId>(){}[0]
    final val privacyPolicyUrl // dev.kord.core.cache.data/ApplicationData.privacyPolicyUrl|{}privacyPolicyUrl[0]
        final fun <get-privacyPolicyUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ApplicationData.privacyPolicyUrl.<get-privacyPolicyUrl>|<get-privacyPolicyUrl>(){}[0]
    final val roleConnectionsVerificationUrl // dev.kord.core.cache.data/ApplicationData.roleConnectionsVerificationUrl|{}roleConnectionsVerificationUrl[0]
        final fun <get-roleConnectionsVerificationUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/ApplicationData.roleConnectionsVerificationUrl.<get-roleConnectionsVerificationUrl>|<get-roleConnectionsVerificationUrl>(){}[0]
    final val rpcOrigins // dev.kord.core.cache.data/ApplicationData.rpcOrigins|{}rpcOrigins[0]
        final fun <get-rpcOrigins>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.core.cache.data/ApplicationData.rpcOrigins.<get-rpcOrigins>|<get-rpcOrigins>(){}[0]
    final val slug // dev.kord.core.cache.data/ApplicationData.slug|{}slug[0]
        final fun <get-slug>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ApplicationData.slug.<get-slug>|<get-slug>(){}[0]
    final val tags // dev.kord.core.cache.data/ApplicationData.tags|{}tags[0]
        final fun <get-tags>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.core.cache.data/ApplicationData.tags.<get-tags>|<get-tags>(){}[0]
    final val team // dev.kord.core.cache.data/ApplicationData.team|{}team[0]
        final fun <get-team>(): dev.kord.core.cache.data/TeamData? // dev.kord.core.cache.data/ApplicationData.team.<get-team>|<get-team>(){}[0]
    final val termsOfServiceUrl // dev.kord.core.cache.data/ApplicationData.termsOfServiceUrl|{}termsOfServiceUrl[0]
        final fun <get-termsOfServiceUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ApplicationData.termsOfServiceUrl.<get-termsOfServiceUrl>|<get-termsOfServiceUrl>(){}[0]
    final val verifyKey // dev.kord.core.cache.data/ApplicationData.verifyKey|{}verifyKey[0]
        final fun <get-verifyKey>(): kotlin/String // dev.kord.core.cache.data/ApplicationData.verifyKey.<get-verifyKey>|<get-verifyKey>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/ApplicationData.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/ApplicationData.component10|component10(){}[0]
    final fun component11(): kotlin/String // dev.kord.core.cache.data/ApplicationData.component11|component11(){}[0]
    final fun component12(): dev.kord.core.cache.data/TeamData? // dev.kord.core.cache.data/ApplicationData.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/ApplicationData.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/ApplicationData.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ApplicationData.component15|component15(){}[0]
    final fun component16(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ApplicationData.component16|component16(){}[0]
    final fun component17(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationFlags> // dev.kord.core.cache.data/ApplicationData.component17|component17(){}[0]
    final fun component18(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.core.cache.data/ApplicationData.component18|component18(){}[0]
    final fun component19(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InstallParams> // dev.kord.core.cache.data/ApplicationData.component19|component19(){}[0]
    final fun component2(): kotlin/String // dev.kord.core.cache.data/ApplicationData.component2|component2(){}[0]
    final fun component20(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ApplicationData.component20|component20(){}[0]
    final fun component21(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/ApplicationData.component21|component21(){}[0]
    final fun component3(): kotlin/String? // dev.kord.core.cache.data/ApplicationData.component3|component3(){}[0]
    final fun component4(): kotlin/String // dev.kord.core.cache.data/ApplicationData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.core.cache.data/ApplicationData.component5|component5(){}[0]
    final fun component6(): kotlin/Boolean // dev.kord.core.cache.data/ApplicationData.component6|component6(){}[0]
    final fun component7(): kotlin/Boolean // dev.kord.core.cache.data/ApplicationData.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ApplicationData.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ApplicationData.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., kotlin/String? = ..., kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/String = ..., dev.kord.core.cache.data/TeamData? = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationFlags> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InstallParams> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...): dev.kord.core.cache.data/ApplicationData // dev.kord.core.cache.data/ApplicationData.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String?;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;kotlin.Boolean;kotlin.Boolean;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.String;dev.kord.core.cache.data.TeamData?;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ApplicationFlags>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.InstallParams>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/ApplicationData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/ApplicationData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/ApplicationData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/ApplicationData> { // dev.kord.core.cache.data/ApplicationData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/ApplicationData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/ApplicationData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/ApplicationData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/ApplicationData // dev.kord.core.cache.data/ApplicationData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/ApplicationData) // dev.kord.core.cache.data/ApplicationData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.ApplicationData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/ApplicationData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/ApplicationData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordApplication): dev.kord.core.cache.data/ApplicationData // dev.kord.core.cache.data/ApplicationData.Companion.from|from(dev.kord.common.entity.DiscordApplication){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/ApplicationData> // dev.kord.core.cache.data/ApplicationData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/ApplicationInteractionData { // dev.kord.core.cache.data/ApplicationInteractionData|null[0]
    constructor <init>(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationCommandType> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/OptionData>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/ResolvedObjectsData> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ComponentType> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ComponentData>> = ...) // dev.kord.core.cache.data/ApplicationInteractionData.<init>|<init>(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ApplicationCommandType>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.OptionData>>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.ResolvedObjectsData>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ComponentType>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.ComponentData>>){}[0]

    final val componentType // dev.kord.core.cache.data/ApplicationInteractionData.componentType|{}componentType[0]
        final fun <get-componentType>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ComponentType> // dev.kord.core.cache.data/ApplicationInteractionData.componentType.<get-componentType>|<get-componentType>(){}[0]
    final val components // dev.kord.core.cache.data/ApplicationInteractionData.components|{}components[0]
        final fun <get-components>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ComponentData>> // dev.kord.core.cache.data/ApplicationInteractionData.components.<get-components>|<get-components>(){}[0]
    final val customId // dev.kord.core.cache.data/ApplicationInteractionData.customId|{}customId[0]
        final fun <get-customId>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ApplicationInteractionData.customId.<get-customId>|<get-customId>(){}[0]
    final val guildId // dev.kord.core.cache.data/ApplicationInteractionData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/ApplicationInteractionData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.core.cache.data/ApplicationInteractionData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/ApplicationInteractionData.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.core.cache.data/ApplicationInteractionData.name|{}name[0]
        final fun <get-name>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ApplicationInteractionData.name.<get-name>|<get-name>(){}[0]
    final val options // dev.kord.core.cache.data/ApplicationInteractionData.options|{}options[0]
        final fun <get-options>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/OptionData>> // dev.kord.core.cache.data/ApplicationInteractionData.options.<get-options>|<get-options>(){}[0]
    final val resolvedObjectsData // dev.kord.core.cache.data/ApplicationInteractionData.resolvedObjectsData|{}resolvedObjectsData[0]
        final fun <get-resolvedObjectsData>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/ResolvedObjectsData> // dev.kord.core.cache.data/ApplicationInteractionData.resolvedObjectsData.<get-resolvedObjectsData>|<get-resolvedObjectsData>(){}[0]
    final val targetId // dev.kord.core.cache.data/ApplicationInteractionData.targetId|{}targetId[0]
        final fun <get-targetId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/ApplicationInteractionData.targetId.<get-targetId>|<get-targetId>(){}[0]
    final val type // dev.kord.core.cache.data/ApplicationInteractionData.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationCommandType> // dev.kord.core.cache.data/ApplicationInteractionData.type.<get-type>|<get-type>(){}[0]
    final val values // dev.kord.core.cache.data/ApplicationInteractionData.values|{}values[0]
        final fun <get-values>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.core.cache.data/ApplicationInteractionData.values.<get-values>|<get-values>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/ApplicationInteractionData.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.core.cache.data/ApplicationInteractionData.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ComponentData>> // dev.kord.core.cache.data/ApplicationInteractionData.component11|component11(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationCommandType> // dev.kord.core.cache.data/ApplicationInteractionData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/ApplicationInteractionData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ApplicationInteractionData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/OptionData>> // dev.kord.core.cache.data/ApplicationInteractionData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/ResolvedObjectsData> // dev.kord.core.cache.data/ApplicationInteractionData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/ApplicationInteractionData.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ApplicationInteractionData.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ComponentType> // dev.kord.core.cache.data/ApplicationInteractionData.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationCommandType> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/OptionData>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/ResolvedObjectsData> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ComponentType> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ComponentData>> = ...): dev.kord.core.cache.data/ApplicationInteractionData // dev.kord.core.cache.data/ApplicationInteractionData.copy|copy(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ApplicationCommandType>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.OptionData>>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.ResolvedObjectsData>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ComponentType>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.ComponentData>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/ApplicationInteractionData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/ApplicationInteractionData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/ApplicationInteractionData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/ApplicationInteractionData> { // dev.kord.core.cache.data/ApplicationInteractionData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/ApplicationInteractionData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/ApplicationInteractionData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/ApplicationInteractionData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/ApplicationInteractionData // dev.kord.core.cache.data/ApplicationInteractionData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/ApplicationInteractionData) // dev.kord.core.cache.data/ApplicationInteractionData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.ApplicationInteractionData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/ApplicationInteractionData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/ApplicationInteractionData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/InteractionCallbackData, dev.kord.common.entity/Snowflake?): dev.kord.core.cache.data/ApplicationInteractionData // dev.kord.core.cache.data/ApplicationInteractionData.Companion.from|from(dev.kord.common.entity.InteractionCallbackData;dev.kord.common.entity.Snowflake?){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/ApplicationInteractionData> // dev.kord.core.cache.data/ApplicationInteractionData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/AttachmentData { // dev.kord.core.cache.data/AttachmentData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., kotlin/Int, kotlin/String, kotlin/String, dev.kord.common.entity.optional/OptionalInt? = ..., dev.kord.common.entity.optional/OptionalInt? = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AttachmentFlags> = ...) // dev.kord.core.cache.data/AttachmentData.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;kotlin.Int;kotlin.String;kotlin.String;dev.kord.common.entity.optional.OptionalInt?;dev.kord.common.entity.optional.OptionalInt?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.AttachmentFlags>){}[0]

    final val contentType // dev.kord.core.cache.data/AttachmentData.contentType|{}contentType[0]
        final fun <get-contentType>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/AttachmentData.contentType.<get-contentType>|<get-contentType>(){}[0]
    final val description // dev.kord.core.cache.data/AttachmentData.description|{}description[0]
        final fun <get-description>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/AttachmentData.description.<get-description>|<get-description>(){}[0]
    final val durationSecs // dev.kord.core.cache.data/AttachmentData.durationSecs|{}durationSecs[0]
        final fun <get-durationSecs>(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.core.cache.data/AttachmentData.durationSecs.<get-durationSecs>|<get-durationSecs>(){}[0]
    final val ephemeral // dev.kord.core.cache.data/AttachmentData.ephemeral|{}ephemeral[0]
        final fun <get-ephemeral>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/AttachmentData.ephemeral.<get-ephemeral>|<get-ephemeral>(){}[0]
    final val filename // dev.kord.core.cache.data/AttachmentData.filename|{}filename[0]
        final fun <get-filename>(): kotlin/String // dev.kord.core.cache.data/AttachmentData.filename.<get-filename>|<get-filename>(){}[0]
    final val flags // dev.kord.core.cache.data/AttachmentData.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AttachmentFlags> // dev.kord.core.cache.data/AttachmentData.flags.<get-flags>|<get-flags>(){}[0]
    final val height // dev.kord.core.cache.data/AttachmentData.height|{}height[0]
        final fun <get-height>(): dev.kord.common.entity.optional/OptionalInt? // dev.kord.core.cache.data/AttachmentData.height.<get-height>|<get-height>(){}[0]
    final val id // dev.kord.core.cache.data/AttachmentData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/AttachmentData.id.<get-id>|<get-id>(){}[0]
    final val proxyUrl // dev.kord.core.cache.data/AttachmentData.proxyUrl|{}proxyUrl[0]
        final fun <get-proxyUrl>(): kotlin/String // dev.kord.core.cache.data/AttachmentData.proxyUrl.<get-proxyUrl>|<get-proxyUrl>(){}[0]
    final val size // dev.kord.core.cache.data/AttachmentData.size|{}size[0]
        final fun <get-size>(): kotlin/Int // dev.kord.core.cache.data/AttachmentData.size.<get-size>|<get-size>(){}[0]
    final val url // dev.kord.core.cache.data/AttachmentData.url|{}url[0]
        final fun <get-url>(): kotlin/String // dev.kord.core.cache.data/AttachmentData.url.<get-url>|<get-url>(){}[0]
    final val waveform // dev.kord.core.cache.data/AttachmentData.waveform|{}waveform[0]
        final fun <get-waveform>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/AttachmentData.waveform.<get-waveform>|<get-waveform>(){}[0]
    final val width // dev.kord.core.cache.data/AttachmentData.width|{}width[0]
        final fun <get-width>(): dev.kord.common.entity.optional/OptionalInt? // dev.kord.core.cache.data/AttachmentData.width.<get-width>|<get-width>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/AttachmentData.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/AttachmentData.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.core.cache.data/AttachmentData.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/AttachmentData.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AttachmentFlags> // dev.kord.core.cache.data/AttachmentData.component13|component13(){}[0]
    final fun component2(): kotlin/String // dev.kord.core.cache.data/AttachmentData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/AttachmentData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/AttachmentData.component4|component4(){}[0]
    final fun component5(): kotlin/Int // dev.kord.core.cache.data/AttachmentData.component5|component5(){}[0]
    final fun component6(): kotlin/String // dev.kord.core.cache.data/AttachmentData.component6|component6(){}[0]
    final fun component7(): kotlin/String // dev.kord.core.cache.data/AttachmentData.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/OptionalInt? // dev.kord.core.cache.data/AttachmentData.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/OptionalInt? // dev.kord.core.cache.data/AttachmentData.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., kotlin/Int = ..., kotlin/String = ..., kotlin/String = ..., dev.kord.common.entity.optional/OptionalInt? = ..., dev.kord.common.entity.optional/OptionalInt? = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AttachmentFlags> = ...): dev.kord.core.cache.data/AttachmentData // dev.kord.core.cache.data/AttachmentData.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;kotlin.Int;kotlin.String;kotlin.String;dev.kord.common.entity.optional.OptionalInt?;dev.kord.common.entity.optional.OptionalInt?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.AttachmentFlags>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/AttachmentData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/AttachmentData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/AttachmentData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/AttachmentData> { // dev.kord.core.cache.data/AttachmentData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/AttachmentData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/AttachmentData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/AttachmentData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/AttachmentData // dev.kord.core.cache.data/AttachmentData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/AttachmentData) // dev.kord.core.cache.data/AttachmentData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.AttachmentData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/AttachmentData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/AttachmentData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordAttachment): dev.kord.core.cache.data/AttachmentData // dev.kord.core.cache.data/AttachmentData.Companion.from|from(dev.kord.common.entity.DiscordAttachment){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/AttachmentData> // dev.kord.core.cache.data/AttachmentData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/AutoModerationActionData { // dev.kord.core.cache.data/AutoModerationActionData|null[0]
    constructor <init>(dev.kord.common.entity/AutoModerationActionType, dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/AutoModerationActionMetadataData> = ...) // dev.kord.core.cache.data/AutoModerationActionData.<init>|<init>(dev.kord.common.entity.AutoModerationActionType;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.AutoModerationActionMetadataData>){}[0]

    final val metadata // dev.kord.core.cache.data/AutoModerationActionData.metadata|{}metadata[0]
        final fun <get-metadata>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/AutoModerationActionMetadataData> // dev.kord.core.cache.data/AutoModerationActionData.metadata.<get-metadata>|<get-metadata>(){}[0]
    final val type // dev.kord.core.cache.data/AutoModerationActionData.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/AutoModerationActionType // dev.kord.core.cache.data/AutoModerationActionData.type.<get-type>|<get-type>(){}[0]

    final fun component1(): dev.kord.common.entity/AutoModerationActionType // dev.kord.core.cache.data/AutoModerationActionData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/AutoModerationActionMetadataData> // dev.kord.core.cache.data/AutoModerationActionData.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/AutoModerationActionType = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/AutoModerationActionMetadataData> = ...): dev.kord.core.cache.data/AutoModerationActionData // dev.kord.core.cache.data/AutoModerationActionData.copy|copy(dev.kord.common.entity.AutoModerationActionType;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.AutoModerationActionMetadataData>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/AutoModerationActionData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/AutoModerationActionData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/AutoModerationActionData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/AutoModerationActionData> { // dev.kord.core.cache.data/AutoModerationActionData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/AutoModerationActionData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/AutoModerationActionData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/AutoModerationActionData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/AutoModerationActionData // dev.kord.core.cache.data/AutoModerationActionData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/AutoModerationActionData) // dev.kord.core.cache.data/AutoModerationActionData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.AutoModerationActionData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/AutoModerationActionData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/AutoModerationActionData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordAutoModerationAction): dev.kord.core.cache.data/AutoModerationActionData // dev.kord.core.cache.data/AutoModerationActionData.Companion.from|from(dev.kord.common.entity.DiscordAutoModerationAction){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/AutoModerationActionData> // dev.kord.core.cache.data/AutoModerationActionData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/AutoModerationActionMetadataData { // dev.kord.core.cache.data/AutoModerationActionMetadataData|null[0]
    constructor <init>(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...) // dev.kord.core.cache.data/AutoModerationActionMetadataData.<init>|<init>(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]

    final val channelId // dev.kord.core.cache.data/AutoModerationActionMetadataData.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/AutoModerationActionMetadataData.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val customMessage // dev.kord.core.cache.data/AutoModerationActionMetadataData.customMessage|{}customMessage[0]
        final fun <get-customMessage>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/AutoModerationActionMetadataData.customMessage.<get-customMessage>|<get-customMessage>(){}[0]
    final val durationSeconds // dev.kord.core.cache.data/AutoModerationActionMetadataData.durationSeconds|{}durationSeconds[0]
        final fun <get-durationSeconds>(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.core.cache.data/AutoModerationActionMetadataData.durationSeconds.<get-durationSeconds>|<get-durationSeconds>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/AutoModerationActionMetadataData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.core.cache.data/AutoModerationActionMetadataData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/AutoModerationActionMetadataData.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...): dev.kord.core.cache.data/AutoModerationActionMetadataData // dev.kord.core.cache.data/AutoModerationActionMetadataData.copy|copy(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/AutoModerationActionMetadataData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/AutoModerationActionMetadataData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/AutoModerationActionMetadataData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/AutoModerationActionMetadataData> { // dev.kord.core.cache.data/AutoModerationActionMetadataData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/AutoModerationActionMetadataData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/AutoModerationActionMetadataData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/AutoModerationActionMetadataData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/AutoModerationActionMetadataData // dev.kord.core.cache.data/AutoModerationActionMetadataData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/AutoModerationActionMetadataData) // dev.kord.core.cache.data/AutoModerationActionMetadataData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.AutoModerationActionMetadataData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/AutoModerationActionMetadataData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/AutoModerationActionMetadataData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordAutoModerationActionMetadata): dev.kord.core.cache.data/AutoModerationActionMetadataData // dev.kord.core.cache.data/AutoModerationActionMetadataData.Companion.from|from(dev.kord.common.entity.DiscordAutoModerationActionMetadata){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/AutoModerationActionMetadataData> // dev.kord.core.cache.data/AutoModerationActionMetadataData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/AutoModerationRuleData { // dev.kord.core.cache.data/AutoModerationRuleData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.common.entity/AutoModerationRuleEventType, dev.kord.common.entity/AutoModerationRuleTriggerType, dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData, kotlin.collections/List<dev.kord.core.cache.data/AutoModerationActionData>, kotlin/Boolean, kotlin.collections/List<dev.kord.common.entity/Snowflake>, kotlin.collections/List<dev.kord.common.entity/Snowflake>) // dev.kord.core.cache.data/AutoModerationRuleData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.AutoModerationRuleEventType;dev.kord.common.entity.AutoModerationRuleTriggerType;dev.kord.core.cache.data.AutoModerationRuleTriggerMetadataData;kotlin.collections.List<dev.kord.core.cache.data.AutoModerationActionData>;kotlin.Boolean;kotlin.collections.List<dev.kord.common.entity.Snowflake>;kotlin.collections.List<dev.kord.common.entity.Snowflake>){}[0]

    final val actions // dev.kord.core.cache.data/AutoModerationRuleData.actions|{}actions[0]
        final fun <get-actions>(): kotlin.collections/List<dev.kord.core.cache.data/AutoModerationActionData> // dev.kord.core.cache.data/AutoModerationRuleData.actions.<get-actions>|<get-actions>(){}[0]
    final val creatorId // dev.kord.core.cache.data/AutoModerationRuleData.creatorId|{}creatorId[0]
        final fun <get-creatorId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/AutoModerationRuleData.creatorId.<get-creatorId>|<get-creatorId>(){}[0]
    final val enabled // dev.kord.core.cache.data/AutoModerationRuleData.enabled|{}enabled[0]
        final fun <get-enabled>(): kotlin/Boolean // dev.kord.core.cache.data/AutoModerationRuleData.enabled.<get-enabled>|<get-enabled>(){}[0]
    final val eventType // dev.kord.core.cache.data/AutoModerationRuleData.eventType|{}eventType[0]
        final fun <get-eventType>(): dev.kord.common.entity/AutoModerationRuleEventType // dev.kord.core.cache.data/AutoModerationRuleData.eventType.<get-eventType>|<get-eventType>(){}[0]
    final val exemptChannels // dev.kord.core.cache.data/AutoModerationRuleData.exemptChannels|{}exemptChannels[0]
        final fun <get-exemptChannels>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/AutoModerationRuleData.exemptChannels.<get-exemptChannels>|<get-exemptChannels>(){}[0]
    final val exemptRoles // dev.kord.core.cache.data/AutoModerationRuleData.exemptRoles|{}exemptRoles[0]
        final fun <get-exemptRoles>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/AutoModerationRuleData.exemptRoles.<get-exemptRoles>|<get-exemptRoles>(){}[0]
    final val guildId // dev.kord.core.cache.data/AutoModerationRuleData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/AutoModerationRuleData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.core.cache.data/AutoModerationRuleData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/AutoModerationRuleData.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.core.cache.data/AutoModerationRuleData.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.cache.data/AutoModerationRuleData.name.<get-name>|<get-name>(){}[0]
    final val triggerMetadata // dev.kord.core.cache.data/AutoModerationRuleData.triggerMetadata|{}triggerMetadata[0]
        final fun <get-triggerMetadata>(): dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData // dev.kord.core.cache.data/AutoModerationRuleData.triggerMetadata.<get-triggerMetadata>|<get-triggerMetadata>(){}[0]
    final val triggerType // dev.kord.core.cache.data/AutoModerationRuleData.triggerType|{}triggerType[0]
        final fun <get-triggerType>(): dev.kord.common.entity/AutoModerationRuleTriggerType // dev.kord.core.cache.data/AutoModerationRuleData.triggerType.<get-triggerType>|<get-triggerType>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/AutoModerationRuleData.component1|component1(){}[0]
    final fun component10(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/AutoModerationRuleData.component10|component10(){}[0]
    final fun component11(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/AutoModerationRuleData.component11|component11(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/AutoModerationRuleData.component2|component2(){}[0]
    final fun component3(): kotlin/String // dev.kord.core.cache.data/AutoModerationRuleData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/AutoModerationRuleData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity/AutoModerationRuleEventType // dev.kord.core.cache.data/AutoModerationRuleData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity/AutoModerationRuleTriggerType // dev.kord.core.cache.data/AutoModerationRuleData.component6|component6(){}[0]
    final fun component7(): dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData // dev.kord.core.cache.data/AutoModerationRuleData.component7|component7(){}[0]
    final fun component8(): kotlin.collections/List<dev.kord.core.cache.data/AutoModerationActionData> // dev.kord.core.cache.data/AutoModerationRuleData.component8|component8(){}[0]
    final fun component9(): kotlin/Boolean // dev.kord.core.cache.data/AutoModerationRuleData.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/AutoModerationRuleEventType = ..., dev.kord.common.entity/AutoModerationRuleTriggerType = ..., dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData = ..., kotlin.collections/List<dev.kord.core.cache.data/AutoModerationActionData> = ..., kotlin/Boolean = ..., kotlin.collections/List<dev.kord.common.entity/Snowflake> = ..., kotlin.collections/List<dev.kord.common.entity/Snowflake> = ...): dev.kord.core.cache.data/AutoModerationRuleData // dev.kord.core.cache.data/AutoModerationRuleData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.AutoModerationRuleEventType;dev.kord.common.entity.AutoModerationRuleTriggerType;dev.kord.core.cache.data.AutoModerationRuleTriggerMetadataData;kotlin.collections.List<dev.kord.core.cache.data.AutoModerationActionData>;kotlin.Boolean;kotlin.collections.List<dev.kord.common.entity.Snowflake>;kotlin.collections.List<dev.kord.common.entity.Snowflake>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/AutoModerationRuleData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/AutoModerationRuleData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/AutoModerationRuleData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/AutoModerationRuleData> { // dev.kord.core.cache.data/AutoModerationRuleData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/AutoModerationRuleData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/AutoModerationRuleData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/AutoModerationRuleData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/AutoModerationRuleData // dev.kord.core.cache.data/AutoModerationRuleData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/AutoModerationRuleData) // dev.kord.core.cache.data/AutoModerationRuleData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.AutoModerationRuleData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/AutoModerationRuleData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/AutoModerationRuleData.Companion.$childSerializers|{}$childSerializers[0]
        final val description // dev.kord.core.cache.data/AutoModerationRuleData.Companion.description|{}description[0]
            final fun <get-description>(): dev.kord.cache.api.data/DataDescription<dev.kord.core.cache.data/AutoModerationRuleData, dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/AutoModerationRuleData.Companion.description.<get-description>|<get-description>(){}[0]

        final fun from(dev.kord.common.entity/DiscordAutoModerationRule): dev.kord.core.cache.data/AutoModerationRuleData // dev.kord.core.cache.data/AutoModerationRuleData.Companion.from|from(dev.kord.common.entity.DiscordAutoModerationRule){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/AutoModerationRuleData> // dev.kord.core.cache.data/AutoModerationRuleData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData { // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/AutoModerationRuleKeywordPresetType>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.AutoModerationRuleKeywordPresetType>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalBoolean){}[0]

    final val allowList // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.allowList|{}allowList[0]
        final fun <get-allowList>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.allowList.<get-allowList>|<get-allowList>(){}[0]
    final val keywordFilter // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.keywordFilter|{}keywordFilter[0]
        final fun <get-keywordFilter>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.keywordFilter.<get-keywordFilter>|<get-keywordFilter>(){}[0]
    final val mentionRaidProtectionEnabled // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.mentionRaidProtectionEnabled|{}mentionRaidProtectionEnabled[0]
        final fun <get-mentionRaidProtectionEnabled>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.mentionRaidProtectionEnabled.<get-mentionRaidProtectionEnabled>|<get-mentionRaidProtectionEnabled>(){}[0]
    final val mentionTotalLimit // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.mentionTotalLimit|{}mentionTotalLimit[0]
        final fun <get-mentionTotalLimit>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.mentionTotalLimit.<get-mentionTotalLimit>|<get-mentionTotalLimit>(){}[0]
    final val presets // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.presets|{}presets[0]
        final fun <get-presets>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/AutoModerationRuleKeywordPresetType>> // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.presets.<get-presets>|<get-presets>(){}[0]
    final val regexPatterns // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.regexPatterns|{}regexPatterns[0]
        final fun <get-regexPatterns>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.regexPatterns.<get-regexPatterns>|<get-regexPatterns>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/AutoModerationRuleKeywordPresetType>> // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.component6|component6(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/AutoModerationRuleKeywordPresetType>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.AutoModerationRuleKeywordPresetType>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalBoolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData> { // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData) // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.AutoModerationRuleTriggerMetadataData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata): dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.Companion.from|from(dev.kord.common.entity.DiscordAutoModerationRuleTriggerMetadata){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData> // dev.kord.core.cache.data/AutoModerationRuleTriggerMetadataData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/BanData { // dev.kord.core.cache.data/BanData|null[0]
    constructor <init>(kotlin/String? = ..., dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake) // dev.kord.core.cache.data/BanData.<init>|<init>(kotlin.String?;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]

    final val guildId // dev.kord.core.cache.data/BanData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/BanData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val reason // dev.kord.core.cache.data/BanData.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.core.cache.data/BanData.reason.<get-reason>|<get-reason>(){}[0]
    final val userId // dev.kord.core.cache.data/BanData.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/BanData.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): kotlin/String? // dev.kord.core.cache.data/BanData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/BanData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/BanData.component3|component3(){}[0]
    final fun copy(kotlin/String? = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ...): dev.kord.core.cache.data/BanData // dev.kord.core.cache.data/BanData.copy|copy(kotlin.String?;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/BanData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/BanData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/BanData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/BanData> { // dev.kord.core.cache.data/BanData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/BanData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/BanData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/BanData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/BanData // dev.kord.core.cache.data/BanData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/BanData) // dev.kord.core.cache.data/BanData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.BanData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/BanData.Companion|null[0]
        final fun from(dev.kord.common.entity/Snowflake, dev.kord.rest.json.response/BanResponse): dev.kord.core.cache.data/BanData // dev.kord.core.cache.data/BanData.Companion.from|from(dev.kord.common.entity.Snowflake;dev.kord.rest.json.response.BanResponse){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/BanData> // dev.kord.core.cache.data/BanData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/ChannelData { // dev.kord.core.cache.data/ChannelData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/ChannelType, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Overwrite>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/VideoQualityMode> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/ThreadMetadataData> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ArchiveDuration> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/ThreadMemberData> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ChannelFlags> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/SortOrderType?> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ForumLayoutType> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ForumTag>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DefaultReaction?> = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/MessageData> = ...) // dev.kord.core.cache.data/ChannelData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.ChannelType;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Overwrite>>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalSnowflake?;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake?;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.VideoQualityMode>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.ThreadMetadataData>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ArchiveDuration>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.ThreadMemberData>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ChannelFlags>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.SortOrderType?>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ForumLayoutType>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.ForumTag>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DefaultReaction?>;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.MessageData>){}[0]

    final val applicationId // dev.kord.core.cache.data/ChannelData.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/ChannelData.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val appliedTags // dev.kord.core.cache.data/ChannelData.appliedTags|{}appliedTags[0]
        final fun <get-appliedTags>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.core.cache.data/ChannelData.appliedTags.<get-appliedTags>|<get-appliedTags>(){}[0]
    final val availableTags // dev.kord.core.cache.data/ChannelData.availableTags|{}availableTags[0]
        final fun <get-availableTags>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ForumTag>> // dev.kord.core.cache.data/ChannelData.availableTags.<get-availableTags>|<get-availableTags>(){}[0]
    final val bitrate // dev.kord.core.cache.data/ChannelData.bitrate|{}bitrate[0]
        final fun <get-bitrate>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ChannelData.bitrate.<get-bitrate>|<get-bitrate>(){}[0]
    final val defaultAutoArchiveDuration // dev.kord.core.cache.data/ChannelData.defaultAutoArchiveDuration|{}defaultAutoArchiveDuration[0]
        final fun <get-defaultAutoArchiveDuration>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ArchiveDuration> // dev.kord.core.cache.data/ChannelData.defaultAutoArchiveDuration.<get-defaultAutoArchiveDuration>|<get-defaultAutoArchiveDuration>(){}[0]
    final val defaultForumLayout // dev.kord.core.cache.data/ChannelData.defaultForumLayout|{}defaultForumLayout[0]
        final fun <get-defaultForumLayout>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ForumLayoutType> // dev.kord.core.cache.data/ChannelData.defaultForumLayout.<get-defaultForumLayout>|<get-defaultForumLayout>(){}[0]
    final val defaultReactionEmoji // dev.kord.core.cache.data/ChannelData.defaultReactionEmoji|{}defaultReactionEmoji[0]
        final fun <get-defaultReactionEmoji>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DefaultReaction?> // dev.kord.core.cache.data/ChannelData.defaultReactionEmoji.<get-defaultReactionEmoji>|<get-defaultReactionEmoji>(){}[0]
    final val defaultSortOrder // dev.kord.core.cache.data/ChannelData.defaultSortOrder|{}defaultSortOrder[0]
        final fun <get-defaultSortOrder>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/SortOrderType?> // dev.kord.core.cache.data/ChannelData.defaultSortOrder.<get-defaultSortOrder>|<get-defaultSortOrder>(){}[0]
    final val defaultThreadRateLimitPerUser // dev.kord.core.cache.data/ChannelData.defaultThreadRateLimitPerUser|{}defaultThreadRateLimitPerUser[0]
        final fun <get-defaultThreadRateLimitPerUser>(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.core.cache.data/ChannelData.defaultThreadRateLimitPerUser.<get-defaultThreadRateLimitPerUser>|<get-defaultThreadRateLimitPerUser>(){}[0]
    final val flags // dev.kord.core.cache.data/ChannelData.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ChannelFlags> // dev.kord.core.cache.data/ChannelData.flags.<get-flags>|<get-flags>(){}[0]
    final val guildId // dev.kord.core.cache.data/ChannelData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/ChannelData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val icon // dev.kord.core.cache.data/ChannelData.icon|{}icon[0]
        final fun <get-icon>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/ChannelData.icon.<get-icon>|<get-icon>(){}[0]
    final val id // dev.kord.core.cache.data/ChannelData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/ChannelData.id.<get-id>|<get-id>(){}[0]
    final val lastMessageId // dev.kord.core.cache.data/ChannelData.lastMessageId|{}lastMessageId[0]
        final fun <get-lastMessageId>(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.core.cache.data/ChannelData.lastMessageId.<get-lastMessageId>|<get-lastMessageId>(){}[0]
    final val lastPinTimestamp // dev.kord.core.cache.data/ChannelData.lastPinTimestamp|{}lastPinTimestamp[0]
        final fun <get-lastPinTimestamp>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.core.cache.data/ChannelData.lastPinTimestamp.<get-lastPinTimestamp>|<get-lastPinTimestamp>(){}[0]
    final val member // dev.kord.core.cache.data/ChannelData.member|{}member[0]
        final fun <get-member>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/ThreadMemberData> // dev.kord.core.cache.data/ChannelData.member.<get-member>|<get-member>(){}[0]
    final val memberCount // dev.kord.core.cache.data/ChannelData.memberCount|{}memberCount[0]
        final fun <get-memberCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ChannelData.memberCount.<get-memberCount>|<get-memberCount>(){}[0]
    final val message // dev.kord.core.cache.data/ChannelData.message|{}message[0]
        final fun <get-message>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/MessageData> // dev.kord.core.cache.data/ChannelData.message.<get-message>|<get-message>(){}[0]
    final val messageCount // dev.kord.core.cache.data/ChannelData.messageCount|{}messageCount[0]
        final fun <get-messageCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ChannelData.messageCount.<get-messageCount>|<get-messageCount>(){}[0]
    final val name // dev.kord.core.cache.data/ChannelData.name|{}name[0]
        final fun <get-name>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/ChannelData.name.<get-name>|<get-name>(){}[0]
    final val nsfw // dev.kord.core.cache.data/ChannelData.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/ChannelData.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
    final val ownerId // dev.kord.core.cache.data/ChannelData.ownerId|{}ownerId[0]
        final fun <get-ownerId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/ChannelData.ownerId.<get-ownerId>|<get-ownerId>(){}[0]
    final val parentId // dev.kord.core.cache.data/ChannelData.parentId|{}parentId[0]
        final fun <get-parentId>(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.core.cache.data/ChannelData.parentId.<get-parentId>|<get-parentId>(){}[0]
    final val permissionOverwrites // dev.kord.core.cache.data/ChannelData.permissionOverwrites|{}permissionOverwrites[0]
        final fun <get-permissionOverwrites>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Overwrite>> // dev.kord.core.cache.data/ChannelData.permissionOverwrites.<get-permissionOverwrites>|<get-permissionOverwrites>(){}[0]
    final val permissions // dev.kord.core.cache.data/ChannelData.permissions|{}permissions[0]
        final fun <get-permissions>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> // dev.kord.core.cache.data/ChannelData.permissions.<get-permissions>|<get-permissions>(){}[0]
    final val position // dev.kord.core.cache.data/ChannelData.position|{}position[0]
        final fun <get-position>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ChannelData.position.<get-position>|<get-position>(){}[0]
    final val rateLimitPerUser // dev.kord.core.cache.data/ChannelData.rateLimitPerUser|{}rateLimitPerUser[0]
        final fun <get-rateLimitPerUser>(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.core.cache.data/ChannelData.rateLimitPerUser.<get-rateLimitPerUser>|<get-rateLimitPerUser>(){}[0]
    final val recipients // dev.kord.core.cache.data/ChannelData.recipients|{}recipients[0]
        final fun <get-recipients>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.core.cache.data/ChannelData.recipients.<get-recipients>|<get-recipients>(){}[0]
    final val rtcRegion // dev.kord.core.cache.data/ChannelData.rtcRegion|{}rtcRegion[0]
        final fun <get-rtcRegion>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/ChannelData.rtcRegion.<get-rtcRegion>|<get-rtcRegion>(){}[0]
    final val threadMetadata // dev.kord.core.cache.data/ChannelData.threadMetadata|{}threadMetadata[0]
        final fun <get-threadMetadata>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/ThreadMetadataData> // dev.kord.core.cache.data/ChannelData.threadMetadata.<get-threadMetadata>|<get-threadMetadata>(){}[0]
    final val topic // dev.kord.core.cache.data/ChannelData.topic|{}topic[0]
        final fun <get-topic>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/ChannelData.topic.<get-topic>|<get-topic>(){}[0]
    final val totalMessageSent // dev.kord.core.cache.data/ChannelData.totalMessageSent|{}totalMessageSent[0]
        final fun <get-totalMessageSent>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ChannelData.totalMessageSent.<get-totalMessageSent>|<get-totalMessageSent>(){}[0]
    final val type // dev.kord.core.cache.data/ChannelData.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ChannelType // dev.kord.core.cache.data/ChannelData.type.<get-type>|<get-type>(){}[0]
    final val userLimit // dev.kord.core.cache.data/ChannelData.userLimit|{}userLimit[0]
        final fun <get-userLimit>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ChannelData.userLimit.<get-userLimit>|<get-userLimit>(){}[0]
    final val videoQualityMode // dev.kord.core.cache.data/ChannelData.videoQualityMode|{}videoQualityMode[0]
        final fun <get-videoQualityMode>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/VideoQualityMode> // dev.kord.core.cache.data/ChannelData.videoQualityMode.<get-videoQualityMode>|<get-videoQualityMode>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/ChannelData.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ChannelData.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ChannelData.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.core.cache.data/ChannelData.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.core.cache.data/ChannelData.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/ChannelData.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/ChannelData.component15|component15(){}[0]
    final fun component16(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/ChannelData.component16|component16(){}[0]
    final fun component17(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.core.cache.data/ChannelData.component17|component17(){}[0]
    final fun component18(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.core.cache.data/ChannelData.component18|component18(){}[0]
    final fun component19(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/ChannelData.component19|component19(){}[0]
    final fun component2(): dev.kord.common.entity/ChannelType // dev.kord.core.cache.data/ChannelData.component2|component2(){}[0]
    final fun component20(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/VideoQualityMode> // dev.kord.core.cache.data/ChannelData.component20|component20(){}[0]
    final fun component21(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> // dev.kord.core.cache.data/ChannelData.component21|component21(){}[0]
    final fun component22(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/ThreadMetadataData> // dev.kord.core.cache.data/ChannelData.component22|component22(){}[0]
    final fun component23(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ChannelData.component23|component23(){}[0]
    final fun component24(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ChannelData.component24|component24(){}[0]
    final fun component25(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ArchiveDuration> // dev.kord.core.cache.data/ChannelData.component25|component25(){}[0]
    final fun component26(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/ThreadMemberData> // dev.kord.core.cache.data/ChannelData.component26|component26(){}[0]
    final fun component27(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ChannelFlags> // dev.kord.core.cache.data/ChannelData.component27|component27(){}[0]
    final fun component28(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/SortOrderType?> // dev.kord.core.cache.data/ChannelData.component28|component28(){}[0]
    final fun component29(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ChannelData.component29|component29(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/ChannelData.component3|component3(){}[0]
    final fun component30(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ForumLayoutType> // dev.kord.core.cache.data/ChannelData.component30|component30(){}[0]
    final fun component31(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ForumTag>> // dev.kord.core.cache.data/ChannelData.component31|component31(){}[0]
    final fun component32(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.core.cache.data/ChannelData.component32|component32(){}[0]
    final fun component33(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DefaultReaction?> // dev.kord.core.cache.data/ChannelData.component33|component33(){}[0]
    final fun component34(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.core.cache.data/ChannelData.component34|component34(){}[0]
    final fun component35(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/MessageData> // dev.kord.core.cache.data/ChannelData.component35|component35(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ChannelData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Overwrite>> // dev.kord.core.cache.data/ChannelData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/ChannelData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/ChannelData.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/ChannelData.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.core.cache.data/ChannelData.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/ChannelType = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Overwrite>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/VideoQualityMode> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/ThreadMetadataData> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ArchiveDuration> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/ThreadMemberData> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ChannelFlags> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/SortOrderType?> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ForumLayoutType> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ForumTag>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DefaultReaction?> = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/MessageData> = ...): dev.kord.core.cache.data/ChannelData // dev.kord.core.cache.data/ChannelData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.ChannelType;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Overwrite>>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalSnowflake?;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake?;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.VideoQualityMode>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.ThreadMetadataData>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ArchiveDuration>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.ThreadMemberData>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ChannelFlags>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.SortOrderType?>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ForumLayoutType>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.ForumTag>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DefaultReaction?>;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.MessageData>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/ChannelData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/ChannelData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/ChannelData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/ChannelData> { // dev.kord.core.cache.data/ChannelData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/ChannelData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/ChannelData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/ChannelData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/ChannelData // dev.kord.core.cache.data/ChannelData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/ChannelData) // dev.kord.core.cache.data/ChannelData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.ChannelData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/ChannelData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/ChannelData.Companion.$childSerializers|{}$childSerializers[0]
        final val description // dev.kord.core.cache.data/ChannelData.Companion.description|{}description[0]
            final fun <get-description>(): dev.kord.cache.api.data/DataDescription<dev.kord.core.cache.data/ChannelData, dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/ChannelData.Companion.description.<get-description>|<get-description>(){}[0]

        final fun from(dev.kord.common.entity/DiscordChannel): dev.kord.core.cache.data/ChannelData // dev.kord.core.cache.data/ChannelData.Companion.from|from(dev.kord.common.entity.DiscordChannel){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/ChannelData> // dev.kord.core.cache.data/ChannelData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/ChatComponentData : dev.kord.core.cache.data/ComponentData { // dev.kord.core.cache.data/ChatComponentData|null[0]
    constructor <init>(dev.kord.common.entity/ComponentType, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ButtonStyle> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ComponentData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectDefaultValue>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/SelectOptionData>> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> = ...) // dev.kord.core.cache.data/ChatComponentData.<init>|<init>(dev.kord.common.entity.ComponentType;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ButtonStyle>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordPartialEmoji>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.ComponentData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordSelectDefaultValue>>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.SelectOptionData>>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.ChannelType>>){}[0]

    final val channelTypes // dev.kord.core.cache.data/ChatComponentData.channelTypes|{}channelTypes[0]
        final fun <get-channelTypes>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> // dev.kord.core.cache.data/ChatComponentData.channelTypes.<get-channelTypes>|<get-channelTypes>(){}[0]
    final val components // dev.kord.core.cache.data/ChatComponentData.components|{}components[0]
        final fun <get-components>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ComponentData>> // dev.kord.core.cache.data/ChatComponentData.components.<get-components>|<get-components>(){}[0]
    final val customId // dev.kord.core.cache.data/ChatComponentData.customId|{}customId[0]
        final fun <get-customId>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ChatComponentData.customId.<get-customId>|<get-customId>(){}[0]
    final val defaultValues // dev.kord.core.cache.data/ChatComponentData.defaultValues|{}defaultValues[0]
        final fun <get-defaultValues>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectDefaultValue>> // dev.kord.core.cache.data/ChatComponentData.defaultValues.<get-defaultValues>|<get-defaultValues>(){}[0]
    final val disabled // dev.kord.core.cache.data/ChatComponentData.disabled|{}disabled[0]
        final fun <get-disabled>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/ChatComponentData.disabled.<get-disabled>|<get-disabled>(){}[0]
    final val emoji // dev.kord.core.cache.data/ChatComponentData.emoji|{}emoji[0]
        final fun <get-emoji>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> // dev.kord.core.cache.data/ChatComponentData.emoji.<get-emoji>|<get-emoji>(){}[0]
    final val label // dev.kord.core.cache.data/ChatComponentData.label|{}label[0]
        final fun <get-label>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ChatComponentData.label.<get-label>|<get-label>(){}[0]
    final val maxLength // dev.kord.core.cache.data/ChatComponentData.maxLength|{}maxLength[0]
        final fun <get-maxLength>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ChatComponentData.maxLength.<get-maxLength>|<get-maxLength>(){}[0]
    final val maxValues // dev.kord.core.cache.data/ChatComponentData.maxValues|{}maxValues[0]
        final fun <get-maxValues>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ChatComponentData.maxValues.<get-maxValues>|<get-maxValues>(){}[0]
    final val minLength // dev.kord.core.cache.data/ChatComponentData.minLength|{}minLength[0]
        final fun <get-minLength>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ChatComponentData.minLength.<get-minLength>|<get-minLength>(){}[0]
    final val minValues // dev.kord.core.cache.data/ChatComponentData.minValues|{}minValues[0]
        final fun <get-minValues>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ChatComponentData.minValues.<get-minValues>|<get-minValues>(){}[0]
    final val options // dev.kord.core.cache.data/ChatComponentData.options|{}options[0]
        final fun <get-options>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/SelectOptionData>> // dev.kord.core.cache.data/ChatComponentData.options.<get-options>|<get-options>(){}[0]
    final val placeholder // dev.kord.core.cache.data/ChatComponentData.placeholder|{}placeholder[0]
        final fun <get-placeholder>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ChatComponentData.placeholder.<get-placeholder>|<get-placeholder>(){}[0]
    final val required // dev.kord.core.cache.data/ChatComponentData.required|{}required[0]
        final fun <get-required>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/ChatComponentData.required.<get-required>|<get-required>(){}[0]
    final val style // dev.kord.core.cache.data/ChatComponentData.style|{}style[0]
        final fun <get-style>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ButtonStyle> // dev.kord.core.cache.data/ChatComponentData.style.<get-style>|<get-style>(){}[0]
    final val type // dev.kord.core.cache.data/ChatComponentData.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ComponentType // dev.kord.core.cache.data/ChatComponentData.type.<get-type>|<get-type>(){}[0]
    final val url // dev.kord.core.cache.data/ChatComponentData.url|{}url[0]
        final fun <get-url>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ChatComponentData.url.<get-url>|<get-url>(){}[0]
    final val value // dev.kord.core.cache.data/ChatComponentData.value|{}value[0]
        final fun <get-value>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ChatComponentData.value.<get-value>|<get-value>(){}[0]

    final fun component1(): dev.kord.common.entity/ComponentType // dev.kord.core.cache.data/ChatComponentData.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ChatComponentData.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ChatComponentData.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ChatComponentData.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/SelectOptionData>> // dev.kord.core.cache.data/ChatComponentData.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ChatComponentData.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ChatComponentData.component15|component15(){}[0]
    final fun component16(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/ChatComponentData.component16|component16(){}[0]
    final fun component17(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ChatComponentData.component17|component17(){}[0]
    final fun component18(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> // dev.kord.core.cache.data/ChatComponentData.component18|component18(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ButtonStyle> // dev.kord.core.cache.data/ChatComponentData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ChatComponentData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> // dev.kord.core.cache.data/ChatComponentData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ChatComponentData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ChatComponentData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/ChatComponentData.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ComponentData>> // dev.kord.core.cache.data/ChatComponentData.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectDefaultValue>> // dev.kord.core.cache.data/ChatComponentData.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/ComponentType = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ButtonStyle> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ComponentData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectDefaultValue>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/SelectOptionData>> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> = ...): dev.kord.core.cache.data/ChatComponentData // dev.kord.core.cache.data/ChatComponentData.copy|copy(dev.kord.common.entity.ComponentType;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ButtonStyle>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordPartialEmoji>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.ComponentData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordSelectDefaultValue>>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.SelectOptionData>>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.ChannelType>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/ChatComponentData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/ChatComponentData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/ChatComponentData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/ChatComponentData> { // dev.kord.core.cache.data/ChatComponentData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/ChatComponentData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/ChatComponentData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/ChatComponentData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/ChatComponentData // dev.kord.core.cache.data/ChatComponentData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/ChatComponentData) // dev.kord.core.cache.data/ChatComponentData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.ChatComponentData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/ChatComponentData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/ChatComponentData.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/ChatComponentData> // dev.kord.core.cache.data/ChatComponentData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/ClientStatusData { // dev.kord.core.cache.data/ClientStatusData|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<dev.kord.common.entity/PresenceStatus> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/PresenceStatus> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/PresenceStatus> = ...) // dev.kord.core.cache.data/ClientStatusData.<init>|<init>(dev.kord.common.entity.optional.Optional<dev.kord.common.entity.PresenceStatus>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.PresenceStatus>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.PresenceStatus>){}[0]

    final val desktop // dev.kord.core.cache.data/ClientStatusData.desktop|{}desktop[0]
        final fun <get-desktop>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/PresenceStatus> // dev.kord.core.cache.data/ClientStatusData.desktop.<get-desktop>|<get-desktop>(){}[0]
    final val mobile // dev.kord.core.cache.data/ClientStatusData.mobile|{}mobile[0]
        final fun <get-mobile>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/PresenceStatus> // dev.kord.core.cache.data/ClientStatusData.mobile.<get-mobile>|<get-mobile>(){}[0]
    final val web // dev.kord.core.cache.data/ClientStatusData.web|{}web[0]
        final fun <get-web>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/PresenceStatus> // dev.kord.core.cache.data/ClientStatusData.web.<get-web>|<get-web>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/PresenceStatus> // dev.kord.core.cache.data/ClientStatusData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/PresenceStatus> // dev.kord.core.cache.data/ClientStatusData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/PresenceStatus> // dev.kord.core.cache.data/ClientStatusData.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<dev.kord.common.entity/PresenceStatus> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/PresenceStatus> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/PresenceStatus> = ...): dev.kord.core.cache.data/ClientStatusData // dev.kord.core.cache.data/ClientStatusData.copy|copy(dev.kord.common.entity.optional.Optional<dev.kord.common.entity.PresenceStatus>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.PresenceStatus>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.PresenceStatus>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/ClientStatusData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/ClientStatusData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/ClientStatusData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/ClientStatusData> { // dev.kord.core.cache.data/ClientStatusData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/ClientStatusData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/ClientStatusData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/ClientStatusData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/ClientStatusData // dev.kord.core.cache.data/ClientStatusData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/ClientStatusData) // dev.kord.core.cache.data/ClientStatusData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.ClientStatusData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/ClientStatusData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/ClientStatusData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordClientStatus): dev.kord.core.cache.data/ClientStatusData // dev.kord.core.cache.data/ClientStatusData.Companion.from|from(dev.kord.common.entity.DiscordClientStatus){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/ClientStatusData> // dev.kord.core.cache.data/ClientStatusData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/EmbedAuthorData { // dev.kord.core.cache.data/EmbedAuthorData|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...) // dev.kord.core.cache.data/EmbedAuthorData.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]

    final val iconUrl // dev.kord.core.cache.data/EmbedAuthorData.iconUrl|{}iconUrl[0]
        final fun <get-iconUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedAuthorData.iconUrl.<get-iconUrl>|<get-iconUrl>(){}[0]
    final val name // dev.kord.core.cache.data/EmbedAuthorData.name|{}name[0]
        final fun <get-name>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedAuthorData.name.<get-name>|<get-name>(){}[0]
    final val proxyIconUrl // dev.kord.core.cache.data/EmbedAuthorData.proxyIconUrl|{}proxyIconUrl[0]
        final fun <get-proxyIconUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedAuthorData.proxyIconUrl.<get-proxyIconUrl>|<get-proxyIconUrl>(){}[0]
    final val url // dev.kord.core.cache.data/EmbedAuthorData.url|{}url[0]
        final fun <get-url>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/EmbedAuthorData.url.<get-url>|<get-url>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedAuthorData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/EmbedAuthorData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedAuthorData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedAuthorData.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...): dev.kord.core.cache.data/EmbedAuthorData // dev.kord.core.cache.data/EmbedAuthorData.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/EmbedAuthorData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/EmbedAuthorData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/EmbedAuthorData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/EmbedAuthorData> { // dev.kord.core.cache.data/EmbedAuthorData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/EmbedAuthorData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/EmbedAuthorData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/EmbedAuthorData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/EmbedAuthorData // dev.kord.core.cache.data/EmbedAuthorData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/EmbedAuthorData) // dev.kord.core.cache.data/EmbedAuthorData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.EmbedAuthorData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/EmbedAuthorData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/EmbedAuthorData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordEmbed.Author): dev.kord.core.cache.data/EmbedAuthorData // dev.kord.core.cache.data/EmbedAuthorData.Companion.from|from(dev.kord.common.entity.DiscordEmbed.Author){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/EmbedAuthorData> // dev.kord.core.cache.data/EmbedAuthorData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/EmbedData { // dev.kord.core.cache.data/EmbedData|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/EmbedType> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/EmbedFooterData> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/EmbedImageData> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/EmbedThumbnailData> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/EmbedVideoData> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/EmbedProviderData> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/EmbedAuthorData> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/EmbedFieldData>> = ...) // dev.kord.core.cache.data/EmbedData.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.EmbedType>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.EmbedFooterData>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.EmbedImageData>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.EmbedThumbnailData>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.EmbedVideoData>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.EmbedProviderData>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.EmbedAuthorData>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.EmbedFieldData>>){}[0]

    final val author // dev.kord.core.cache.data/EmbedData.author|{}author[0]
        final fun <get-author>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/EmbedAuthorData> // dev.kord.core.cache.data/EmbedData.author.<get-author>|<get-author>(){}[0]
    final val color // dev.kord.core.cache.data/EmbedData.color|{}color[0]
        final fun <get-color>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/EmbedData.color.<get-color>|<get-color>(){}[0]
    final val description // dev.kord.core.cache.data/EmbedData.description|{}description[0]
        final fun <get-description>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedData.description.<get-description>|<get-description>(){}[0]
    final val fields // dev.kord.core.cache.data/EmbedData.fields|{}fields[0]
        final fun <get-fields>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/EmbedFieldData>> // dev.kord.core.cache.data/EmbedData.fields.<get-fields>|<get-fields>(){}[0]
    final val footer // dev.kord.core.cache.data/EmbedData.footer|{}footer[0]
        final fun <get-footer>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/EmbedFooterData> // dev.kord.core.cache.data/EmbedData.footer.<get-footer>|<get-footer>(){}[0]
    final val image // dev.kord.core.cache.data/EmbedData.image|{}image[0]
        final fun <get-image>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/EmbedImageData> // dev.kord.core.cache.data/EmbedData.image.<get-image>|<get-image>(){}[0]
    final val provider // dev.kord.core.cache.data/EmbedData.provider|{}provider[0]
        final fun <get-provider>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/EmbedProviderData> // dev.kord.core.cache.data/EmbedData.provider.<get-provider>|<get-provider>(){}[0]
    final val thumbnail // dev.kord.core.cache.data/EmbedData.thumbnail|{}thumbnail[0]
        final fun <get-thumbnail>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/EmbedThumbnailData> // dev.kord.core.cache.data/EmbedData.thumbnail.<get-thumbnail>|<get-thumbnail>(){}[0]
    final val timestamp // dev.kord.core.cache.data/EmbedData.timestamp|{}timestamp[0]
        final fun <get-timestamp>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.core.cache.data/EmbedData.timestamp.<get-timestamp>|<get-timestamp>(){}[0]
    final val title // dev.kord.core.cache.data/EmbedData.title|{}title[0]
        final fun <get-title>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedData.title.<get-title>|<get-title>(){}[0]
    final val type // dev.kord.core.cache.data/EmbedData.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/EmbedType> // dev.kord.core.cache.data/EmbedData.type.<get-type>|<get-type>(){}[0]
    final val url // dev.kord.core.cache.data/EmbedData.url|{}url[0]
        final fun <get-url>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedData.url.<get-url>|<get-url>(){}[0]
    final val video // dev.kord.core.cache.data/EmbedData.video|{}video[0]
        final fun <get-video>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/EmbedVideoData> // dev.kord.core.cache.data/EmbedData.video.<get-video>|<get-video>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedData.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/EmbedVideoData> // dev.kord.core.cache.data/EmbedData.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/EmbedProviderData> // dev.kord.core.cache.data/EmbedData.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/EmbedAuthorData> // dev.kord.core.cache.data/EmbedData.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/EmbedFieldData>> // dev.kord.core.cache.data/EmbedData.component13|component13(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/EmbedType> // dev.kord.core.cache.data/EmbedData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.core.cache.data/EmbedData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/EmbedData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/EmbedFooterData> // dev.kord.core.cache.data/EmbedData.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/EmbedImageData> // dev.kord.core.cache.data/EmbedData.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/EmbedThumbnailData> // dev.kord.core.cache.data/EmbedData.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/EmbedType> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/EmbedFooterData> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/EmbedImageData> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/EmbedThumbnailData> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/EmbedVideoData> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/EmbedProviderData> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/EmbedAuthorData> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/EmbedFieldData>> = ...): dev.kord.core.cache.data/EmbedData // dev.kord.core.cache.data/EmbedData.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.EmbedType>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.EmbedFooterData>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.EmbedImageData>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.EmbedThumbnailData>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.EmbedVideoData>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.EmbedProviderData>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.EmbedAuthorData>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.EmbedFieldData>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/EmbedData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/EmbedData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/EmbedData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/EmbedData> { // dev.kord.core.cache.data/EmbedData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/EmbedData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/EmbedData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/EmbedData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/EmbedData // dev.kord.core.cache.data/EmbedData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/EmbedData) // dev.kord.core.cache.data/EmbedData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.EmbedData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/EmbedData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/EmbedData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordEmbed): dev.kord.core.cache.data/EmbedData // dev.kord.core.cache.data/EmbedData.Companion.from|from(dev.kord.common.entity.DiscordEmbed){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/EmbedData> // dev.kord.core.cache.data/EmbedData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/EmbedFieldData { // dev.kord.core.cache.data/EmbedFieldData|null[0]
    constructor <init>(kotlin/String, kotlin/String, dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.core.cache.data/EmbedFieldData.<init>|<init>(kotlin.String;kotlin.String;dev.kord.common.entity.optional.OptionalBoolean){}[0]

    final val inline // dev.kord.core.cache.data/EmbedFieldData.inline|{}inline[0]
        final fun <get-inline>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/EmbedFieldData.inline.<get-inline>|<get-inline>(){}[0]
    final val name // dev.kord.core.cache.data/EmbedFieldData.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.cache.data/EmbedFieldData.name.<get-name>|<get-name>(){}[0]
    final val value // dev.kord.core.cache.data/EmbedFieldData.value|{}value[0]
        final fun <get-value>(): kotlin/String // dev.kord.core.cache.data/EmbedFieldData.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/String // dev.kord.core.cache.data/EmbedFieldData.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.core.cache.data/EmbedFieldData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/EmbedFieldData.component3|component3(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.core.cache.data/EmbedFieldData // dev.kord.core.cache.data/EmbedFieldData.copy|copy(kotlin.String;kotlin.String;dev.kord.common.entity.optional.OptionalBoolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/EmbedFieldData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/EmbedFieldData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/EmbedFieldData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/EmbedFieldData> { // dev.kord.core.cache.data/EmbedFieldData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/EmbedFieldData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/EmbedFieldData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/EmbedFieldData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/EmbedFieldData // dev.kord.core.cache.data/EmbedFieldData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/EmbedFieldData) // dev.kord.core.cache.data/EmbedFieldData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.EmbedFieldData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/EmbedFieldData.Companion|null[0]
        final fun from(dev.kord.common.entity/DiscordEmbed.Field): dev.kord.core.cache.data/EmbedFieldData // dev.kord.core.cache.data/EmbedFieldData.Companion.from|from(dev.kord.common.entity.DiscordEmbed.Field){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/EmbedFieldData> // dev.kord.core.cache.data/EmbedFieldData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/EmbedFooterData { // dev.kord.core.cache.data/EmbedFooterData|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...) // dev.kord.core.cache.data/EmbedFooterData.<init>|<init>(kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]

    final val iconUrl // dev.kord.core.cache.data/EmbedFooterData.iconUrl|{}iconUrl[0]
        final fun <get-iconUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedFooterData.iconUrl.<get-iconUrl>|<get-iconUrl>(){}[0]
    final val proxyIconUrl // dev.kord.core.cache.data/EmbedFooterData.proxyIconUrl|{}proxyIconUrl[0]
        final fun <get-proxyIconUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedFooterData.proxyIconUrl.<get-proxyIconUrl>|<get-proxyIconUrl>(){}[0]
    final val text // dev.kord.core.cache.data/EmbedFooterData.text|{}text[0]
        final fun <get-text>(): kotlin/String // dev.kord.core.cache.data/EmbedFooterData.text.<get-text>|<get-text>(){}[0]

    final fun component1(): kotlin/String // dev.kord.core.cache.data/EmbedFooterData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedFooterData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedFooterData.component3|component3(){}[0]
    final fun copy(kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...): dev.kord.core.cache.data/EmbedFooterData // dev.kord.core.cache.data/EmbedFooterData.copy|copy(kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/EmbedFooterData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/EmbedFooterData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/EmbedFooterData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/EmbedFooterData> { // dev.kord.core.cache.data/EmbedFooterData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/EmbedFooterData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/EmbedFooterData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/EmbedFooterData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/EmbedFooterData // dev.kord.core.cache.data/EmbedFooterData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/EmbedFooterData) // dev.kord.core.cache.data/EmbedFooterData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.EmbedFooterData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/EmbedFooterData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/EmbedFooterData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordEmbed.Footer): dev.kord.core.cache.data/EmbedFooterData // dev.kord.core.cache.data/EmbedFooterData.Companion.from|from(dev.kord.common.entity.DiscordEmbed.Footer){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/EmbedFooterData> // dev.kord.core.cache.data/EmbedFooterData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/EmbedImageData { // dev.kord.core.cache.data/EmbedImageData|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ...) // dev.kord.core.cache.data/EmbedImageData.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt){}[0]

    final val height // dev.kord.core.cache.data/EmbedImageData.height|{}height[0]
        final fun <get-height>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/EmbedImageData.height.<get-height>|<get-height>(){}[0]
    final val proxyUrl // dev.kord.core.cache.data/EmbedImageData.proxyUrl|{}proxyUrl[0]
        final fun <get-proxyUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedImageData.proxyUrl.<get-proxyUrl>|<get-proxyUrl>(){}[0]
    final val url // dev.kord.core.cache.data/EmbedImageData.url|{}url[0]
        final fun <get-url>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedImageData.url.<get-url>|<get-url>(){}[0]
    final val width // dev.kord.core.cache.data/EmbedImageData.width|{}width[0]
        final fun <get-width>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/EmbedImageData.width.<get-width>|<get-width>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedImageData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedImageData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/EmbedImageData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/EmbedImageData.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ...): dev.kord.core.cache.data/EmbedImageData // dev.kord.core.cache.data/EmbedImageData.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/EmbedImageData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/EmbedImageData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/EmbedImageData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/EmbedImageData> { // dev.kord.core.cache.data/EmbedImageData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/EmbedImageData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/EmbedImageData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/EmbedImageData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/EmbedImageData // dev.kord.core.cache.data/EmbedImageData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/EmbedImageData) // dev.kord.core.cache.data/EmbedImageData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.EmbedImageData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/EmbedImageData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/EmbedImageData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordEmbed.Image): dev.kord.core.cache.data/EmbedImageData // dev.kord.core.cache.data/EmbedImageData.Companion.from|from(dev.kord.common.entity.DiscordEmbed.Image){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/EmbedImageData> // dev.kord.core.cache.data/EmbedImageData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/EmbedProviderData { // dev.kord.core.cache.data/EmbedProviderData|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...) // dev.kord.core.cache.data/EmbedProviderData.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]

    final val name // dev.kord.core.cache.data/EmbedProviderData.name|{}name[0]
        final fun <get-name>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedProviderData.name.<get-name>|<get-name>(){}[0]
    final val url // dev.kord.core.cache.data/EmbedProviderData.url|{}url[0]
        final fun <get-url>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/EmbedProviderData.url.<get-url>|<get-url>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedProviderData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/EmbedProviderData.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...): dev.kord.core.cache.data/EmbedProviderData // dev.kord.core.cache.data/EmbedProviderData.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/EmbedProviderData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/EmbedProviderData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/EmbedProviderData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/EmbedProviderData> { // dev.kord.core.cache.data/EmbedProviderData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/EmbedProviderData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/EmbedProviderData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/EmbedProviderData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/EmbedProviderData // dev.kord.core.cache.data/EmbedProviderData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/EmbedProviderData) // dev.kord.core.cache.data/EmbedProviderData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.EmbedProviderData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/EmbedProviderData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/EmbedProviderData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordEmbed.Provider): dev.kord.core.cache.data/EmbedProviderData // dev.kord.core.cache.data/EmbedProviderData.Companion.from|from(dev.kord.common.entity.DiscordEmbed.Provider){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/EmbedProviderData> // dev.kord.core.cache.data/EmbedProviderData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/EmbedThumbnailData { // dev.kord.core.cache.data/EmbedThumbnailData|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ...) // dev.kord.core.cache.data/EmbedThumbnailData.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt){}[0]

    final val height // dev.kord.core.cache.data/EmbedThumbnailData.height|{}height[0]
        final fun <get-height>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/EmbedThumbnailData.height.<get-height>|<get-height>(){}[0]
    final val proxyUrl // dev.kord.core.cache.data/EmbedThumbnailData.proxyUrl|{}proxyUrl[0]
        final fun <get-proxyUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedThumbnailData.proxyUrl.<get-proxyUrl>|<get-proxyUrl>(){}[0]
    final val url // dev.kord.core.cache.data/EmbedThumbnailData.url|{}url[0]
        final fun <get-url>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedThumbnailData.url.<get-url>|<get-url>(){}[0]
    final val width // dev.kord.core.cache.data/EmbedThumbnailData.width|{}width[0]
        final fun <get-width>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/EmbedThumbnailData.width.<get-width>|<get-width>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedThumbnailData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedThumbnailData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/EmbedThumbnailData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/EmbedThumbnailData.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ...): dev.kord.core.cache.data/EmbedThumbnailData // dev.kord.core.cache.data/EmbedThumbnailData.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/EmbedThumbnailData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/EmbedThumbnailData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/EmbedThumbnailData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/EmbedThumbnailData> { // dev.kord.core.cache.data/EmbedThumbnailData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/EmbedThumbnailData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/EmbedThumbnailData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/EmbedThumbnailData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/EmbedThumbnailData // dev.kord.core.cache.data/EmbedThumbnailData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/EmbedThumbnailData) // dev.kord.core.cache.data/EmbedThumbnailData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.EmbedThumbnailData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/EmbedThumbnailData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/EmbedThumbnailData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordEmbed.Thumbnail): dev.kord.core.cache.data/EmbedThumbnailData // dev.kord.core.cache.data/EmbedThumbnailData.Companion.from|from(dev.kord.common.entity.DiscordEmbed.Thumbnail){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/EmbedThumbnailData> // dev.kord.core.cache.data/EmbedThumbnailData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/EmbedVideoData { // dev.kord.core.cache.data/EmbedVideoData|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ...) // dev.kord.core.cache.data/EmbedVideoData.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt){}[0]

    final val height // dev.kord.core.cache.data/EmbedVideoData.height|{}height[0]
        final fun <get-height>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/EmbedVideoData.height.<get-height>|<get-height>(){}[0]
    final val url // dev.kord.core.cache.data/EmbedVideoData.url|{}url[0]
        final fun <get-url>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedVideoData.url.<get-url>|<get-url>(){}[0]
    final val width // dev.kord.core.cache.data/EmbedVideoData.width|{}width[0]
        final fun <get-width>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/EmbedVideoData.width.<get-width>|<get-width>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/EmbedVideoData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/EmbedVideoData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/EmbedVideoData.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ...): dev.kord.core.cache.data/EmbedVideoData // dev.kord.core.cache.data/EmbedVideoData.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/EmbedVideoData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/EmbedVideoData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/EmbedVideoData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/EmbedVideoData> { // dev.kord.core.cache.data/EmbedVideoData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/EmbedVideoData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/EmbedVideoData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/EmbedVideoData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/EmbedVideoData // dev.kord.core.cache.data/EmbedVideoData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/EmbedVideoData) // dev.kord.core.cache.data/EmbedVideoData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.EmbedVideoData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/EmbedVideoData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/EmbedVideoData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordEmbed.Video): dev.kord.core.cache.data/EmbedVideoData // dev.kord.core.cache.data/EmbedVideoData.Companion.from|from(dev.kord.common.entity.DiscordEmbed.Video){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/EmbedVideoData> // dev.kord.core.cache.data/EmbedVideoData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/EmojiData { // dev.kord.core.cache.data/EmojiData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String? = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.core.cache.data/EmojiData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String?;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean){}[0]

    final val animated // dev.kord.core.cache.data/EmojiData.animated|{}animated[0]
        final fun <get-animated>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/EmojiData.animated.<get-animated>|<get-animated>(){}[0]
    final val available // dev.kord.core.cache.data/EmojiData.available|{}available[0]
        final fun <get-available>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/EmojiData.available.<get-available>|<get-available>(){}[0]
    final val guildId // dev.kord.core.cache.data/EmojiData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/EmojiData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.core.cache.data/EmojiData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/EmojiData.id.<get-id>|<get-id>(){}[0]
    final val managed // dev.kord.core.cache.data/EmojiData.managed|{}managed[0]
        final fun <get-managed>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/EmojiData.managed.<get-managed>|<get-managed>(){}[0]
    final val name // dev.kord.core.cache.data/EmojiData.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.core.cache.data/EmojiData.name.<get-name>|<get-name>(){}[0]
    final val requireColons // dev.kord.core.cache.data/EmojiData.requireColons|{}requireColons[0]
        final fun <get-requireColons>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/EmojiData.requireColons.<get-requireColons>|<get-requireColons>(){}[0]
    final val roles // dev.kord.core.cache.data/EmojiData.roles|{}roles[0]
        final fun <get-roles>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.core.cache.data/EmojiData.roles.<get-roles>|<get-roles>(){}[0]
    final val userId // dev.kord.core.cache.data/EmojiData.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/EmojiData.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/EmojiData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/EmojiData.component2|component2(){}[0]
    final fun component3(): kotlin/String? // dev.kord.core.cache.data/EmojiData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/EmojiData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.core.cache.data/EmojiData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/EmojiData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/EmojiData.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/EmojiData.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/EmojiData.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., kotlin/String? = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.core.cache.data/EmojiData // dev.kord.core.cache.data/EmojiData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String?;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/EmojiData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/EmojiData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/EmojiData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/EmojiData> { // dev.kord.core.cache.data/EmojiData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/EmojiData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/EmojiData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/EmojiData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/EmojiData // dev.kord.core.cache.data/EmojiData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/EmojiData) // dev.kord.core.cache.data/EmojiData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.EmojiData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/EmojiData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/EmojiData.Companion.$childSerializers|{}$childSerializers[0]
        final val description // dev.kord.core.cache.data/EmojiData.Companion.description|{}description[0]
            final fun <get-description>(): dev.kord.cache.api.data/DataDescription<dev.kord.core.cache.data/EmojiData, dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/EmojiData.Companion.description.<get-description>|<get-description>(){}[0]

        final fun from(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordEmoji): dev.kord.core.cache.data/EmojiData // dev.kord.core.cache.data/EmojiData.Companion.from|from(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.DiscordEmoji){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/EmojiData> // dev.kord.core.cache.data/EmojiData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/GuildApplicationCommandPermissionData { // dev.kord.core.cache.data/GuildApplicationCommandPermissionData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/ApplicationCommandPermissionType, kotlin/Boolean) // dev.kord.core.cache.data/GuildApplicationCommandPermissionData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.ApplicationCommandPermissionType;kotlin.Boolean){}[0]

    final val id // dev.kord.core.cache.data/GuildApplicationCommandPermissionData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/GuildApplicationCommandPermissionData.id.<get-id>|<get-id>(){}[0]
    final val permission // dev.kord.core.cache.data/GuildApplicationCommandPermissionData.permission|{}permission[0]
        final fun <get-permission>(): kotlin/Boolean // dev.kord.core.cache.data/GuildApplicationCommandPermissionData.permission.<get-permission>|<get-permission>(){}[0]
    final val type // dev.kord.core.cache.data/GuildApplicationCommandPermissionData.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ApplicationCommandPermissionType // dev.kord.core.cache.data/GuildApplicationCommandPermissionData.type.<get-type>|<get-type>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/GuildApplicationCommandPermissionData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/ApplicationCommandPermissionType // dev.kord.core.cache.data/GuildApplicationCommandPermissionData.component2|component2(){}[0]
    final fun component3(): kotlin/Boolean // dev.kord.core.cache.data/GuildApplicationCommandPermissionData.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/ApplicationCommandPermissionType = ..., kotlin/Boolean = ...): dev.kord.core.cache.data/GuildApplicationCommandPermissionData // dev.kord.core.cache.data/GuildApplicationCommandPermissionData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.ApplicationCommandPermissionType;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/GuildApplicationCommandPermissionData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/GuildApplicationCommandPermissionData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/GuildApplicationCommandPermissionData.toString|toString(){}[0]

    final object Companion { // dev.kord.core.cache.data/GuildApplicationCommandPermissionData.Companion|null[0]
        final fun from(dev.kord.common.entity/DiscordGuildApplicationCommandPermission): dev.kord.core.cache.data/GuildApplicationCommandPermissionData // dev.kord.core.cache.data/GuildApplicationCommandPermissionData.Companion.from|from(dev.kord.common.entity.DiscordGuildApplicationCommandPermission){}[0]
    }
}

final class dev.kord.core.cache.data/GuildApplicationCommandPermissionsData { // dev.kord.core.cache.data/GuildApplicationCommandPermissionsData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin.collections/List<dev.kord.core.cache.data/GuildApplicationCommandPermissionData>) // dev.kord.core.cache.data/GuildApplicationCommandPermissionsData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.collections.List<dev.kord.core.cache.data.GuildApplicationCommandPermissionData>){}[0]

    final val applicationId // dev.kord.core.cache.data/GuildApplicationCommandPermissionsData.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/GuildApplicationCommandPermissionsData.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val guildId // dev.kord.core.cache.data/GuildApplicationCommandPermissionsData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/GuildApplicationCommandPermissionsData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.core.cache.data/GuildApplicationCommandPermissionsData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/GuildApplicationCommandPermissionsData.id.<get-id>|<get-id>(){}[0]
    final val permissions // dev.kord.core.cache.data/GuildApplicationCommandPermissionsData.permissions|{}permissions[0]
        final fun <get-permissions>(): kotlin.collections/List<dev.kord.core.cache.data/GuildApplicationCommandPermissionData> // dev.kord.core.cache.data/GuildApplicationCommandPermissionsData.permissions.<get-permissions>|<get-permissions>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/GuildApplicationCommandPermissionsData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/GuildApplicationCommandPermissionsData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/GuildApplicationCommandPermissionsData.component3|component3(){}[0]
    final fun component4(): kotlin.collections/List<dev.kord.core.cache.data/GuildApplicationCommandPermissionData> // dev.kord.core.cache.data/GuildApplicationCommandPermissionsData.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., kotlin.collections/List<dev.kord.core.cache.data/GuildApplicationCommandPermissionData> = ...): dev.kord.core.cache.data/GuildApplicationCommandPermissionsData // dev.kord.core.cache.data/GuildApplicationCommandPermissionsData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.collections.List<dev.kord.core.cache.data.GuildApplicationCommandPermissionData>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/GuildApplicationCommandPermissionsData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/GuildApplicationCommandPermissionsData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/GuildApplicationCommandPermissionsData.toString|toString(){}[0]

    final object Companion { // dev.kord.core.cache.data/GuildApplicationCommandPermissionsData.Companion|null[0]
        final val description // dev.kord.core.cache.data/GuildApplicationCommandPermissionsData.Companion.description|{}description[0]
            final fun <get-description>(): dev.kord.cache.api.data/DataDescription<dev.kord.core.cache.data/GuildApplicationCommandPermissionsData, dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/GuildApplicationCommandPermissionsData.Companion.description.<get-description>|<get-description>(){}[0]

        final fun from(dev.kord.common.entity/DiscordGuildApplicationCommandPermissions): dev.kord.core.cache.data/GuildApplicationCommandPermissionsData // dev.kord.core.cache.data/GuildApplicationCommandPermissionsData.Companion.from|from(dev.kord.common.entity.DiscordGuildApplicationCommandPermissions){}[0]
    }
}

final class dev.kord.core.cache.data/GuildData { // dev.kord.core.cache.data/GuildData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/String? = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> = ..., kotlin/String, dev.kord.common.entity/Snowflake? = ..., kotlin.time/Duration, dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ..., dev.kord.common.entity/VerificationLevel, dev.kord.common.entity/DefaultMessageNotificationLevel, dev.kord.common.entity/ExplicitContentFilter, kotlin.collections/List<dev.kord.common.entity/Snowflake>, kotlin.collections/List<dev.kord.common.entity/Snowflake>, kotlin.collections/List<dev.kord.common.entity/GuildFeature>, dev.kord.common.entity/MFALevel, dev.kord.common.entity/Snowflake? = ..., dev.kord.common.entity/Snowflake? = ..., dev.kord.common.entity/SystemChannelFlags, dev.kord.common.entity/Snowflake? = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/OptionalInt? = ..., dev.kord.common.entity.optional/OptionalInt = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., dev.kord.common.entity/PremiumTier, dev.kord.common.entity.optional/OptionalInt = ..., kotlin/String, dev.kord.common.entity/Snowflake? = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/WelcomeScreenData> = ..., dev.kord.common.entity/NsfwLevel, dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ChannelData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/StageInstanceData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/StickerData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/GuildScheduledEventData>> = ..., kotlin/Boolean, dev.kord.common.entity/Snowflake?) // dev.kord.core.cache.data/GuildData.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String?;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions>;kotlin.String;dev.kord.common.entity.Snowflake?;kotlin.time.Duration;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalSnowflake?;dev.kord.common.entity.VerificationLevel;dev.kord.common.entity.DefaultMessageNotificationLevel;dev.kord.common.entity.ExplicitContentFilter;kotlin.collections.List<dev.kord.common.entity.Snowflake>;kotlin.collections.List<dev.kord.common.entity.Snowflake>;kotlin.collections.List<dev.kord.common.entity.GuildFeature>;dev.kord.common.entity.MFALevel;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.SystemChannelFlags;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.OptionalInt?;dev.kord.common.entity.optional.OptionalInt;kotlin.String?;kotlin.String?;kotlin.String?;dev.kord.common.entity.PremiumTier;dev.kord.common.entity.optional.OptionalInt;kotlin.String;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.WelcomeScreenData>;dev.kord.common.entity.NsfwLevel;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.ChannelData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.StageInstanceData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.StickerData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.GuildScheduledEventData>>;kotlin.Boolean;dev.kord.common.entity.Snowflake?){}[0]

    final val afkChannelId // dev.kord.core.cache.data/GuildData.afkChannelId|{}afkChannelId[0]
        final fun <get-afkChannelId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/GuildData.afkChannelId.<get-afkChannelId>|<get-afkChannelId>(){}[0]
    final val afkTimeout // dev.kord.core.cache.data/GuildData.afkTimeout|{}afkTimeout[0]
        final fun <get-afkTimeout>(): kotlin.time/Duration // dev.kord.core.cache.data/GuildData.afkTimeout.<get-afkTimeout>|<get-afkTimeout>(){}[0]
    final val applicationId // dev.kord.core.cache.data/GuildData.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/GuildData.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val approximateMemberCount // dev.kord.core.cache.data/GuildData.approximateMemberCount|{}approximateMemberCount[0]
        final fun <get-approximateMemberCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/GuildData.approximateMemberCount.<get-approximateMemberCount>|<get-approximateMemberCount>(){}[0]
    final val approximatePresenceCount // dev.kord.core.cache.data/GuildData.approximatePresenceCount|{}approximatePresenceCount[0]
        final fun <get-approximatePresenceCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/GuildData.approximatePresenceCount.<get-approximatePresenceCount>|<get-approximatePresenceCount>(){}[0]
    final val banner // dev.kord.core.cache.data/GuildData.banner|{}banner[0]
        final fun <get-banner>(): kotlin/String? // dev.kord.core.cache.data/GuildData.banner.<get-banner>|<get-banner>(){}[0]
    final val channels // dev.kord.core.cache.data/GuildData.channels|{}channels[0]
        final fun <get-channels>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.core.cache.data/GuildData.channels.<get-channels>|<get-channels>(){}[0]
    final val defaultMessageNotifications // dev.kord.core.cache.data/GuildData.defaultMessageNotifications|{}defaultMessageNotifications[0]
        final fun <get-defaultMessageNotifications>(): dev.kord.common.entity/DefaultMessageNotificationLevel // dev.kord.core.cache.data/GuildData.defaultMessageNotifications.<get-defaultMessageNotifications>|<get-defaultMessageNotifications>(){}[0]
    final val description // dev.kord.core.cache.data/GuildData.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.core.cache.data/GuildData.description.<get-description>|<get-description>(){}[0]
    final val discoverySplash // dev.kord.core.cache.data/GuildData.discoverySplash|{}discoverySplash[0]
        final fun <get-discoverySplash>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/GuildData.discoverySplash.<get-discoverySplash>|<get-discoverySplash>(){}[0]
    final val emojis // dev.kord.core.cache.data/GuildData.emojis|{}emojis[0]
        final fun <get-emojis>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/GuildData.emojis.<get-emojis>|<get-emojis>(){}[0]
    final val explicitContentFilter // dev.kord.core.cache.data/GuildData.explicitContentFilter|{}explicitContentFilter[0]
        final fun <get-explicitContentFilter>(): dev.kord.common.entity/ExplicitContentFilter // dev.kord.core.cache.data/GuildData.explicitContentFilter.<get-explicitContentFilter>|<get-explicitContentFilter>(){}[0]
    final val features // dev.kord.core.cache.data/GuildData.features|{}features[0]
        final fun <get-features>(): kotlin.collections/List<dev.kord.common.entity/GuildFeature> // dev.kord.core.cache.data/GuildData.features.<get-features>|<get-features>(){}[0]
    final val guildScheduledEvents // dev.kord.core.cache.data/GuildData.guildScheduledEvents|{}guildScheduledEvents[0]
        final fun <get-guildScheduledEvents>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/GuildScheduledEventData>> // dev.kord.core.cache.data/GuildData.guildScheduledEvents.<get-guildScheduledEvents>|<get-guildScheduledEvents>(){}[0]
    final val icon // dev.kord.core.cache.data/GuildData.icon|{}icon[0]
        final fun <get-icon>(): kotlin/String? // dev.kord.core.cache.data/GuildData.icon.<get-icon>|<get-icon>(){}[0]
    final val iconHash // dev.kord.core.cache.data/GuildData.iconHash|{}iconHash[0]
        final fun <get-iconHash>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/GuildData.iconHash.<get-iconHash>|<get-iconHash>(){}[0]
    final val id // dev.kord.core.cache.data/GuildData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/GuildData.id.<get-id>|<get-id>(){}[0]
    final val joinedAt // dev.kord.core.cache.data/GuildData.joinedAt|{}joinedAt[0]
        final fun <get-joinedAt>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.core.cache.data/GuildData.joinedAt.<get-joinedAt>|<get-joinedAt>(){}[0]
    final val large // dev.kord.core.cache.data/GuildData.large|{}large[0]
        final fun <get-large>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/GuildData.large.<get-large>|<get-large>(){}[0]
    final val maxMembers // dev.kord.core.cache.data/GuildData.maxMembers|{}maxMembers[0]
        final fun <get-maxMembers>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/GuildData.maxMembers.<get-maxMembers>|<get-maxMembers>(){}[0]
    final val maxPresences // dev.kord.core.cache.data/GuildData.maxPresences|{}maxPresences[0]
        final fun <get-maxPresences>(): dev.kord.common.entity.optional/OptionalInt? // dev.kord.core.cache.data/GuildData.maxPresences.<get-maxPresences>|<get-maxPresences>(){}[0]
    final val maxStageVideoChannelUsers // dev.kord.core.cache.data/GuildData.maxStageVideoChannelUsers|{}maxStageVideoChannelUsers[0]
        final fun <get-maxStageVideoChannelUsers>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/GuildData.maxStageVideoChannelUsers.<get-maxStageVideoChannelUsers>|<get-maxStageVideoChannelUsers>(){}[0]
    final val maxVideoChannelUsers // dev.kord.core.cache.data/GuildData.maxVideoChannelUsers|{}maxVideoChannelUsers[0]
        final fun <get-maxVideoChannelUsers>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/GuildData.maxVideoChannelUsers.<get-maxVideoChannelUsers>|<get-maxVideoChannelUsers>(){}[0]
    final val memberCount // dev.kord.core.cache.data/GuildData.memberCount|{}memberCount[0]
        final fun <get-memberCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/GuildData.memberCount.<get-memberCount>|<get-memberCount>(){}[0]
    final val mfaLevel // dev.kord.core.cache.data/GuildData.mfaLevel|{}mfaLevel[0]
        final fun <get-mfaLevel>(): dev.kord.common.entity/MFALevel // dev.kord.core.cache.data/GuildData.mfaLevel.<get-mfaLevel>|<get-mfaLevel>(){}[0]
    final val name // dev.kord.core.cache.data/GuildData.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.cache.data/GuildData.name.<get-name>|<get-name>(){}[0]
    final val nsfwLevel // dev.kord.core.cache.data/GuildData.nsfwLevel|{}nsfwLevel[0]
        final fun <get-nsfwLevel>(): dev.kord.common.entity/NsfwLevel // dev.kord.core.cache.data/GuildData.nsfwLevel.<get-nsfwLevel>|<get-nsfwLevel>(){}[0]
    final val ownerId // dev.kord.core.cache.data/GuildData.ownerId|{}ownerId[0]
        final fun <get-ownerId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/GuildData.ownerId.<get-ownerId>|<get-ownerId>(){}[0]
    final val permissions // dev.kord.core.cache.data/GuildData.permissions|{}permissions[0]
        final fun <get-permissions>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> // dev.kord.core.cache.data/GuildData.permissions.<get-permissions>|<get-permissions>(){}[0]
    final val preferredLocale // dev.kord.core.cache.data/GuildData.preferredLocale|{}preferredLocale[0]
        final fun <get-preferredLocale>(): kotlin/String // dev.kord.core.cache.data/GuildData.preferredLocale.<get-preferredLocale>|<get-preferredLocale>(){}[0]
    final val premiumProgressBarEnabled // dev.kord.core.cache.data/GuildData.premiumProgressBarEnabled|{}premiumProgressBarEnabled[0]
        final fun <get-premiumProgressBarEnabled>(): kotlin/Boolean // dev.kord.core.cache.data/GuildData.premiumProgressBarEnabled.<get-premiumProgressBarEnabled>|<get-premiumProgressBarEnabled>(){}[0]
    final val premiumSubscriptionCount // dev.kord.core.cache.data/GuildData.premiumSubscriptionCount|{}premiumSubscriptionCount[0]
        final fun <get-premiumSubscriptionCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/GuildData.premiumSubscriptionCount.<get-premiumSubscriptionCount>|<get-premiumSubscriptionCount>(){}[0]
    final val premiumTier // dev.kord.core.cache.data/GuildData.premiumTier|{}premiumTier[0]
        final fun <get-premiumTier>(): dev.kord.common.entity/PremiumTier // dev.kord.core.cache.data/GuildData.premiumTier.<get-premiumTier>|<get-premiumTier>(){}[0]
    final val publicUpdatesChannelId // dev.kord.core.cache.data/GuildData.publicUpdatesChannelId|{}publicUpdatesChannelId[0]
        final fun <get-publicUpdatesChannelId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/GuildData.publicUpdatesChannelId.<get-publicUpdatesChannelId>|<get-publicUpdatesChannelId>(){}[0]
    final val region // dev.kord.core.cache.data/GuildData.region|{}region[0]
        final fun <get-region>(): kotlin/String // dev.kord.core.cache.data/GuildData.region.<get-region>|<get-region>(){}[0]
    final val roles // dev.kord.core.cache.data/GuildData.roles|{}roles[0]
        final fun <get-roles>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/GuildData.roles.<get-roles>|<get-roles>(){}[0]
    final val rulesChannelId // dev.kord.core.cache.data/GuildData.rulesChannelId|{}rulesChannelId[0]
        final fun <get-rulesChannelId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/GuildData.rulesChannelId.<get-rulesChannelId>|<get-rulesChannelId>(){}[0]
    final val safetyAlertsChannelId // dev.kord.core.cache.data/GuildData.safetyAlertsChannelId|{}safetyAlertsChannelId[0]
        final fun <get-safetyAlertsChannelId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/GuildData.safetyAlertsChannelId.<get-safetyAlertsChannelId>|<get-safetyAlertsChannelId>(){}[0]
    final val splash // dev.kord.core.cache.data/GuildData.splash|{}splash[0]
        final fun <get-splash>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/GuildData.splash.<get-splash>|<get-splash>(){}[0]
    final val stageInstances // dev.kord.core.cache.data/GuildData.stageInstances|{}stageInstances[0]
        final fun <get-stageInstances>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/StageInstanceData>> // dev.kord.core.cache.data/GuildData.stageInstances.<get-stageInstances>|<get-stageInstances>(){}[0]
    final val stickers // dev.kord.core.cache.data/GuildData.stickers|{}stickers[0]
        final fun <get-stickers>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/StickerData>> // dev.kord.core.cache.data/GuildData.stickers.<get-stickers>|<get-stickers>(){}[0]
    final val systemChannelFlags // dev.kord.core.cache.data/GuildData.systemChannelFlags|{}systemChannelFlags[0]
        final fun <get-systemChannelFlags>(): dev.kord.common.entity/SystemChannelFlags // dev.kord.core.cache.data/GuildData.systemChannelFlags.<get-systemChannelFlags>|<get-systemChannelFlags>(){}[0]
    final val systemChannelId // dev.kord.core.cache.data/GuildData.systemChannelId|{}systemChannelId[0]
        final fun <get-systemChannelId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/GuildData.systemChannelId.<get-systemChannelId>|<get-systemChannelId>(){}[0]
    final val threads // dev.kord.core.cache.data/GuildData.threads|{}threads[0]
        final fun <get-threads>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ChannelData>> // dev.kord.core.cache.data/GuildData.threads.<get-threads>|<get-threads>(){}[0]
    final val vanityUrlCode // dev.kord.core.cache.data/GuildData.vanityUrlCode|{}vanityUrlCode[0]
        final fun <get-vanityUrlCode>(): kotlin/String? // dev.kord.core.cache.data/GuildData.vanityUrlCode.<get-vanityUrlCode>|<get-vanityUrlCode>(){}[0]
    final val verificationLevel // dev.kord.core.cache.data/GuildData.verificationLevel|{}verificationLevel[0]
        final fun <get-verificationLevel>(): dev.kord.common.entity/VerificationLevel // dev.kord.core.cache.data/GuildData.verificationLevel.<get-verificationLevel>|<get-verificationLevel>(){}[0]
    final val welcomeScreen // dev.kord.core.cache.data/GuildData.welcomeScreen|{}welcomeScreen[0]
        final fun <get-welcomeScreen>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/WelcomeScreenData> // dev.kord.core.cache.data/GuildData.welcomeScreen.<get-welcomeScreen>|<get-welcomeScreen>(){}[0]
    final val widgetChannelId // dev.kord.core.cache.data/GuildData.widgetChannelId|{}widgetChannelId[0]
        final fun <get-widgetChannelId>(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.core.cache.data/GuildData.widgetChannelId.<get-widgetChannelId>|<get-widgetChannelId>(){}[0]
    final val widgetEnabled // dev.kord.core.cache.data/GuildData.widgetEnabled|{}widgetEnabled[0]
        final fun <get-widgetEnabled>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/GuildData.widgetEnabled.<get-widgetEnabled>|<get-widgetEnabled>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/GuildData.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/GuildData.component10|component10(){}[0]
    final fun component11(): kotlin.time/Duration // dev.kord.core.cache.data/GuildData.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/GuildData.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.core.cache.data/GuildData.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity/VerificationLevel // dev.kord.core.cache.data/GuildData.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity/DefaultMessageNotificationLevel // dev.kord.core.cache.data/GuildData.component15|component15(){}[0]
    final fun component16(): dev.kord.common.entity/ExplicitContentFilter // dev.kord.core.cache.data/GuildData.component16|component16(){}[0]
    final fun component17(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/GuildData.component17|component17(){}[0]
    final fun component18(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/GuildData.component18|component18(){}[0]
    final fun component19(): kotlin.collections/List<dev.kord.common.entity/GuildFeature> // dev.kord.core.cache.data/GuildData.component19|component19(){}[0]
    final fun component2(): kotlin/String // dev.kord.core.cache.data/GuildData.component2|component2(){}[0]
    final fun component20(): dev.kord.common.entity/MFALevel // dev.kord.core.cache.data/GuildData.component20|component20(){}[0]
    final fun component21(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/GuildData.component21|component21(){}[0]
    final fun component22(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/GuildData.component22|component22(){}[0]
    final fun component23(): dev.kord.common.entity/SystemChannelFlags // dev.kord.core.cache.data/GuildData.component23|component23(){}[0]
    final fun component24(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/GuildData.component24|component24(){}[0]
    final fun component25(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.core.cache.data/GuildData.component25|component25(){}[0]
    final fun component26(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/GuildData.component26|component26(){}[0]
    final fun component27(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/GuildData.component27|component27(){}[0]
    final fun component28(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.core.cache.data/GuildData.component28|component28(){}[0]
    final fun component29(): dev.kord.common.entity.optional/OptionalInt? // dev.kord.core.cache.data/GuildData.component29|component29(){}[0]
    final fun component3(): kotlin/String? // dev.kord.core.cache.data/GuildData.component3|component3(){}[0]
    final fun component30(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/GuildData.component30|component30(){}[0]
    final fun component31(): kotlin/String? // dev.kord.core.cache.data/GuildData.component31|component31(){}[0]
    final fun component32(): kotlin/String? // dev.kord.core.cache.data/GuildData.component32|component32(){}[0]
    final fun component33(): kotlin/String? // dev.kord.core.cache.data/GuildData.component33|component33(){}[0]
    final fun component34(): dev.kord.common.entity/PremiumTier // dev.kord.core.cache.data/GuildData.component34|component34(){}[0]
    final fun component35(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/GuildData.component35|component35(){}[0]
    final fun component36(): kotlin/String // dev.kord.core.cache.data/GuildData.component36|component36(){}[0]
    final fun component37(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/GuildData.component37|component37(){}[0]
    final fun component38(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/GuildData.component38|component38(){}[0]
    final fun component39(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/GuildData.component39|component39(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/GuildData.component4|component4(){}[0]
    final fun component40(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/GuildData.component40|component40(){}[0]
    final fun component41(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/GuildData.component41|component41(){}[0]
    final fun component42(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/WelcomeScreenData> // dev.kord.core.cache.data/GuildData.component42|component42(){}[0]
    final fun component43(): dev.kord.common.entity/NsfwLevel // dev.kord.core.cache.data/GuildData.component43|component43(){}[0]
    final fun component44(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ChannelData>> // dev.kord.core.cache.data/GuildData.component44|component44(){}[0]
    final fun component45(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/StageInstanceData>> // dev.kord.core.cache.data/GuildData.component45|component45(){}[0]
    final fun component46(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/StickerData>> // dev.kord.core.cache.data/GuildData.component46|component46(){}[0]
    final fun component47(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/GuildScheduledEventData>> // dev.kord.core.cache.data/GuildData.component47|component47(){}[0]
    final fun component48(): kotlin/Boolean // dev.kord.core.cache.data/GuildData.component48|component48(){}[0]
    final fun component49(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/GuildData.component49|component49(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/GuildData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/GuildData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/GuildData.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> // dev.kord.core.cache.data/GuildData.component8|component8(){}[0]
    final fun component9(): kotlin/String // dev.kord.core.cache.data/GuildData.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., kotlin/String? = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> = ..., kotlin/String = ..., dev.kord.common.entity/Snowflake? = ..., kotlin.time/Duration = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ..., dev.kord.common.entity/VerificationLevel = ..., dev.kord.common.entity/DefaultMessageNotificationLevel = ..., dev.kord.common.entity/ExplicitContentFilter = ..., kotlin.collections/List<dev.kord.common.entity/Snowflake> = ..., kotlin.collections/List<dev.kord.common.entity/Snowflake> = ..., kotlin.collections/List<dev.kord.common.entity/GuildFeature> = ..., dev.kord.common.entity/MFALevel = ..., dev.kord.common.entity/Snowflake? = ..., dev.kord.common.entity/Snowflake? = ..., dev.kord.common.entity/SystemChannelFlags = ..., dev.kord.common.entity/Snowflake? = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/OptionalInt? = ..., dev.kord.common.entity.optional/OptionalInt = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., dev.kord.common.entity/PremiumTier = ..., dev.kord.common.entity.optional/OptionalInt = ..., kotlin/String = ..., dev.kord.common.entity/Snowflake? = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/WelcomeScreenData> = ..., dev.kord.common.entity/NsfwLevel = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ChannelData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/StageInstanceData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/StickerData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/GuildScheduledEventData>> = ..., kotlin/Boolean = ..., dev.kord.common.entity/Snowflake? = ...): dev.kord.core.cache.data/GuildData // dev.kord.core.cache.data/GuildData.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String?;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions>;kotlin.String;dev.kord.common.entity.Snowflake?;kotlin.time.Duration;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalSnowflake?;dev.kord.common.entity.VerificationLevel;dev.kord.common.entity.DefaultMessageNotificationLevel;dev.kord.common.entity.ExplicitContentFilter;kotlin.collections.List<dev.kord.common.entity.Snowflake>;kotlin.collections.List<dev.kord.common.entity.Snowflake>;kotlin.collections.List<dev.kord.common.entity.GuildFeature>;dev.kord.common.entity.MFALevel;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.SystemChannelFlags;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.OptionalInt?;dev.kord.common.entity.optional.OptionalInt;kotlin.String?;kotlin.String?;kotlin.String?;dev.kord.common.entity.PremiumTier;dev.kord.common.entity.optional.OptionalInt;kotlin.String;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.WelcomeScreenData>;dev.kord.common.entity.NsfwLevel;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.ChannelData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.StageInstanceData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.StickerData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.GuildScheduledEventData>>;kotlin.Boolean;dev.kord.common.entity.Snowflake?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/GuildData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/GuildData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/GuildData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/GuildData> { // dev.kord.core.cache.data/GuildData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/GuildData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/GuildData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/GuildData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/GuildData // dev.kord.core.cache.data/GuildData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/GuildData) // dev.kord.core.cache.data/GuildData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.GuildData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/GuildData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/GuildData.Companion.$childSerializers|{}$childSerializers[0]
        final val description // dev.kord.core.cache.data/GuildData.Companion.description|{}description[0]
            final fun <get-description>(): dev.kord.cache.api.data/DataDescription<dev.kord.core.cache.data/GuildData, dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/GuildData.Companion.description.<get-description>|<get-description>(){}[0]

        final fun from(dev.kord.common.entity/DiscordGuild): dev.kord.core.cache.data/GuildData // dev.kord.core.cache.data/GuildData.Companion.from|from(dev.kord.common.entity.DiscordGuild){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/GuildData> // dev.kord.core.cache.data/GuildData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/GuildPreviewData { // dev.kord.core.cache.data/GuildPreviewData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin.collections/List<dev.kord.core.cache.data/EmojiData>, kotlin.collections/List<dev.kord.common.entity/GuildFeature>, kotlin/Int, kotlin/Int, kotlin/String? = ..., kotlin.collections/List<dev.kord.core.cache.data/StickerData>) // dev.kord.core.cache.data/GuildPreviewData.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.collections.List<dev.kord.core.cache.data.EmojiData>;kotlin.collections.List<dev.kord.common.entity.GuildFeature>;kotlin.Int;kotlin.Int;kotlin.String?;kotlin.collections.List<dev.kord.core.cache.data.StickerData>){}[0]

    final val approximateMemberCount // dev.kord.core.cache.data/GuildPreviewData.approximateMemberCount|{}approximateMemberCount[0]
        final fun <get-approximateMemberCount>(): kotlin/Int // dev.kord.core.cache.data/GuildPreviewData.approximateMemberCount.<get-approximateMemberCount>|<get-approximateMemberCount>(){}[0]
    final val approximatePresenceCount // dev.kord.core.cache.data/GuildPreviewData.approximatePresenceCount|{}approximatePresenceCount[0]
        final fun <get-approximatePresenceCount>(): kotlin/Int // dev.kord.core.cache.data/GuildPreviewData.approximatePresenceCount.<get-approximatePresenceCount>|<get-approximatePresenceCount>(){}[0]
    final val description // dev.kord.core.cache.data/GuildPreviewData.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.core.cache.data/GuildPreviewData.description.<get-description>|<get-description>(){}[0]
    final val discoverySplash // dev.kord.core.cache.data/GuildPreviewData.discoverySplash|{}discoverySplash[0]
        final fun <get-discoverySplash>(): kotlin/String? // dev.kord.core.cache.data/GuildPreviewData.discoverySplash.<get-discoverySplash>|<get-discoverySplash>(){}[0]
    final val emojis // dev.kord.core.cache.data/GuildPreviewData.emojis|{}emojis[0]
        final fun <get-emojis>(): kotlin.collections/List<dev.kord.core.cache.data/EmojiData> // dev.kord.core.cache.data/GuildPreviewData.emojis.<get-emojis>|<get-emojis>(){}[0]
    final val features // dev.kord.core.cache.data/GuildPreviewData.features|{}features[0]
        final fun <get-features>(): kotlin.collections/List<dev.kord.common.entity/GuildFeature> // dev.kord.core.cache.data/GuildPreviewData.features.<get-features>|<get-features>(){}[0]
    final val icon // dev.kord.core.cache.data/GuildPreviewData.icon|{}icon[0]
        final fun <get-icon>(): kotlin/String? // dev.kord.core.cache.data/GuildPreviewData.icon.<get-icon>|<get-icon>(){}[0]
    final val id // dev.kord.core.cache.data/GuildPreviewData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/GuildPreviewData.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.core.cache.data/GuildPreviewData.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.cache.data/GuildPreviewData.name.<get-name>|<get-name>(){}[0]
    final val splash // dev.kord.core.cache.data/GuildPreviewData.splash|{}splash[0]
        final fun <get-splash>(): kotlin/String? // dev.kord.core.cache.data/GuildPreviewData.splash.<get-splash>|<get-splash>(){}[0]
    final val stickers // dev.kord.core.cache.data/GuildPreviewData.stickers|{}stickers[0]
        final fun <get-stickers>(): kotlin.collections/List<dev.kord.core.cache.data/StickerData> // dev.kord.core.cache.data/GuildPreviewData.stickers.<get-stickers>|<get-stickers>(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/GuildPreviewData> { // dev.kord.core.cache.data/GuildPreviewData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/GuildPreviewData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/GuildPreviewData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/GuildPreviewData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/GuildPreviewData // dev.kord.core.cache.data/GuildPreviewData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/GuildPreviewData) // dev.kord.core.cache.data/GuildPreviewData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.GuildPreviewData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/GuildPreviewData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/GuildPreviewData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordGuildPreview): dev.kord.core.cache.data/GuildPreviewData // dev.kord.core.cache.data/GuildPreviewData.Companion.from|from(dev.kord.common.entity.DiscordGuildPreview){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/GuildPreviewData> // dev.kord.core.cache.data/GuildPreviewData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/GuildScheduledEventData { // dev.kord.core.cache.data/GuildScheduledEventData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake?, dev.kord.common.entity.optional/OptionalSnowflake? = ..., kotlin/String, dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlinx.datetime/Instant, kotlinx.datetime/Instant?, dev.kord.common.entity/GuildScheduledEventPrivacyLevel, dev.kord.common.entity/GuildScheduledEventStatus, dev.kord.common.entity/Snowflake?, dev.kord.common.entity/ScheduledEntityType, dev.kord.common.entity/GuildScheduledEventEntityMetadata?, dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/UserData> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...) // dev.kord.core.cache.data/GuildScheduledEventData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.optional.OptionalSnowflake?;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlinx.datetime.Instant;kotlinx.datetime.Instant?;dev.kord.common.entity.GuildScheduledEventPrivacyLevel;dev.kord.common.entity.GuildScheduledEventStatus;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.ScheduledEntityType;dev.kord.common.entity.GuildScheduledEventEntityMetadata?;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.UserData>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]

    final val channelId // dev.kord.core.cache.data/GuildScheduledEventData.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/GuildScheduledEventData.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val creator // dev.kord.core.cache.data/GuildScheduledEventData.creator|{}creator[0]
        final fun <get-creator>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/UserData> // dev.kord.core.cache.data/GuildScheduledEventData.creator.<get-creator>|<get-creator>(){}[0]
    final val creatorId // dev.kord.core.cache.data/GuildScheduledEventData.creatorId|{}creatorId[0]
        final fun <get-creatorId>(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.core.cache.data/GuildScheduledEventData.creatorId.<get-creatorId>|<get-creatorId>(){}[0]
    final val description // dev.kord.core.cache.data/GuildScheduledEventData.description|{}description[0]
        final fun <get-description>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/GuildScheduledEventData.description.<get-description>|<get-description>(){}[0]
    final val entityId // dev.kord.core.cache.data/GuildScheduledEventData.entityId|{}entityId[0]
        final fun <get-entityId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/GuildScheduledEventData.entityId.<get-entityId>|<get-entityId>(){}[0]
    final val entityMetadata // dev.kord.core.cache.data/GuildScheduledEventData.entityMetadata|{}entityMetadata[0]
        final fun <get-entityMetadata>(): dev.kord.common.entity/GuildScheduledEventEntityMetadata? // dev.kord.core.cache.data/GuildScheduledEventData.entityMetadata.<get-entityMetadata>|<get-entityMetadata>(){}[0]
    final val entityType // dev.kord.core.cache.data/GuildScheduledEventData.entityType|{}entityType[0]
        final fun <get-entityType>(): dev.kord.common.entity/ScheduledEntityType // dev.kord.core.cache.data/GuildScheduledEventData.entityType.<get-entityType>|<get-entityType>(){}[0]
    final val guildId // dev.kord.core.cache.data/GuildScheduledEventData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/GuildScheduledEventData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.core.cache.data/GuildScheduledEventData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/GuildScheduledEventData.id.<get-id>|<get-id>(){}[0]
    final val image // dev.kord.core.cache.data/GuildScheduledEventData.image|{}image[0]
        final fun <get-image>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/GuildScheduledEventData.image.<get-image>|<get-image>(){}[0]
    final val name // dev.kord.core.cache.data/GuildScheduledEventData.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.cache.data/GuildScheduledEventData.name.<get-name>|<get-name>(){}[0]
    final val privacyLevel // dev.kord.core.cache.data/GuildScheduledEventData.privacyLevel|{}privacyLevel[0]
        final fun <get-privacyLevel>(): dev.kord.common.entity/GuildScheduledEventPrivacyLevel // dev.kord.core.cache.data/GuildScheduledEventData.privacyLevel.<get-privacyLevel>|<get-privacyLevel>(){}[0]
    final val scheduledEndTime // dev.kord.core.cache.data/GuildScheduledEventData.scheduledEndTime|{}scheduledEndTime[0]
        final fun <get-scheduledEndTime>(): kotlinx.datetime/Instant? // dev.kord.core.cache.data/GuildScheduledEventData.scheduledEndTime.<get-scheduledEndTime>|<get-scheduledEndTime>(){}[0]
    final val scheduledStartTime // dev.kord.core.cache.data/GuildScheduledEventData.scheduledStartTime|{}scheduledStartTime[0]
        final fun <get-scheduledStartTime>(): kotlinx.datetime/Instant // dev.kord.core.cache.data/GuildScheduledEventData.scheduledStartTime.<get-scheduledStartTime>|<get-scheduledStartTime>(){}[0]
    final val status // dev.kord.core.cache.data/GuildScheduledEventData.status|{}status[0]
        final fun <get-status>(): dev.kord.common.entity/GuildScheduledEventStatus // dev.kord.core.cache.data/GuildScheduledEventData.status.<get-status>|<get-status>(){}[0]
    final val userCount // dev.kord.core.cache.data/GuildScheduledEventData.userCount|{}userCount[0]
        final fun <get-userCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/GuildScheduledEventData.userCount.<get-userCount>|<get-userCount>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/GuildScheduledEventData.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity/GuildScheduledEventStatus // dev.kord.core.cache.data/GuildScheduledEventData.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/GuildScheduledEventData.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity/ScheduledEntityType // dev.kord.core.cache.data/GuildScheduledEventData.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity/GuildScheduledEventEntityMetadata? // dev.kord.core.cache.data/GuildScheduledEventData.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/UserData> // dev.kord.core.cache.data/GuildScheduledEventData.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/GuildScheduledEventData.component15|component15(){}[0]
    final fun component16(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/GuildScheduledEventData.component16|component16(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/GuildScheduledEventData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/GuildScheduledEventData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.core.cache.data/GuildScheduledEventData.component4|component4(){}[0]
    final fun component5(): kotlin/String // dev.kord.core.cache.data/GuildScheduledEventData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/GuildScheduledEventData.component6|component6(){}[0]
    final fun component7(): kotlinx.datetime/Instant // dev.kord.core.cache.data/GuildScheduledEventData.component7|component7(){}[0]
    final fun component8(): kotlinx.datetime/Instant? // dev.kord.core.cache.data/GuildScheduledEventData.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity/GuildScheduledEventPrivacyLevel // dev.kord.core.cache.data/GuildScheduledEventData.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake? = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ..., kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlinx.datetime/Instant = ..., kotlinx.datetime/Instant? = ..., dev.kord.common.entity/GuildScheduledEventPrivacyLevel = ..., dev.kord.common.entity/GuildScheduledEventStatus = ..., dev.kord.common.entity/Snowflake? = ..., dev.kord.common.entity/ScheduledEntityType = ..., dev.kord.common.entity/GuildScheduledEventEntityMetadata? = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/UserData> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...): dev.kord.core.cache.data/GuildScheduledEventData // dev.kord.core.cache.data/GuildScheduledEventData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.optional.OptionalSnowflake?;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlinx.datetime.Instant;kotlinx.datetime.Instant?;dev.kord.common.entity.GuildScheduledEventPrivacyLevel;dev.kord.common.entity.GuildScheduledEventStatus;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.ScheduledEntityType;dev.kord.common.entity.GuildScheduledEventEntityMetadata?;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.UserData>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/GuildScheduledEventData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/GuildScheduledEventData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/GuildScheduledEventData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/GuildScheduledEventData> { // dev.kord.core.cache.data/GuildScheduledEventData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/GuildScheduledEventData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/GuildScheduledEventData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/GuildScheduledEventData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/GuildScheduledEventData // dev.kord.core.cache.data/GuildScheduledEventData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/GuildScheduledEventData) // dev.kord.core.cache.data/GuildScheduledEventData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.GuildScheduledEventData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/GuildScheduledEventData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/GuildScheduledEventData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordGuildScheduledEvent): dev.kord.core.cache.data/GuildScheduledEventData // dev.kord.core.cache.data/GuildScheduledEventData.Companion.from|from(dev.kord.common.entity.DiscordGuildScheduledEvent){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/GuildScheduledEventData> // dev.kord.core.cache.data/GuildScheduledEventData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/GuildWidgetData { // dev.kord.core.cache.data/GuildWidgetData|null[0]
    constructor <init>(kotlin/Boolean, dev.kord.common.entity/Snowflake?) // dev.kord.core.cache.data/GuildWidgetData.<init>|<init>(kotlin.Boolean;dev.kord.common.entity.Snowflake?){}[0]

    final val channelId // dev.kord.core.cache.data/GuildWidgetData.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/GuildWidgetData.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val enabled // dev.kord.core.cache.data/GuildWidgetData.enabled|{}enabled[0]
        final fun <get-enabled>(): kotlin/Boolean // dev.kord.core.cache.data/GuildWidgetData.enabled.<get-enabled>|<get-enabled>(){}[0]

    final fun component1(): kotlin/Boolean // dev.kord.core.cache.data/GuildWidgetData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/GuildWidgetData.component2|component2(){}[0]
    final fun copy(kotlin/Boolean = ..., dev.kord.common.entity/Snowflake? = ...): dev.kord.core.cache.data/GuildWidgetData // dev.kord.core.cache.data/GuildWidgetData.copy|copy(kotlin.Boolean;dev.kord.common.entity.Snowflake?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/GuildWidgetData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/GuildWidgetData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/GuildWidgetData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/GuildWidgetData> { // dev.kord.core.cache.data/GuildWidgetData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/GuildWidgetData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/GuildWidgetData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/GuildWidgetData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/GuildWidgetData // dev.kord.core.cache.data/GuildWidgetData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/GuildWidgetData) // dev.kord.core.cache.data/GuildWidgetData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.GuildWidgetData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/GuildWidgetData.Companion|null[0]
        final fun from(dev.kord.common.entity/DiscordGuildWidget): dev.kord.core.cache.data/GuildWidgetData // dev.kord.core.cache.data/GuildWidgetData.Companion.from|from(dev.kord.common.entity.DiscordGuildWidget){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/GuildWidgetData> // dev.kord.core.cache.data/GuildWidgetData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/IntegrationData { // dev.kord.core.cache.data/IntegrationData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String, kotlin/String, kotlin/Boolean, dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/IntegrationExpireBehavior> = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.core.cache.data/IntegrationsAccountData, dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/IntegrationApplication> = ...) // dev.kord.core.cache.data/IntegrationData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String;kotlin.Boolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.IntegrationExpireBehavior>;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.core.cache.data.IntegrationsAccountData;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.IntegrationApplication>){}[0]

    final val account // dev.kord.core.cache.data/IntegrationData.account|{}account[0]
        final fun <get-account>(): dev.kord.core.cache.data/IntegrationsAccountData // dev.kord.core.cache.data/IntegrationData.account.<get-account>|<get-account>(){}[0]
    final val application // dev.kord.core.cache.data/IntegrationData.application|{}application[0]
        final fun <get-application>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/IntegrationApplication> // dev.kord.core.cache.data/IntegrationData.application.<get-application>|<get-application>(){}[0]
    final val enableEmoticons // dev.kord.core.cache.data/IntegrationData.enableEmoticons|{}enableEmoticons[0]
        final fun <get-enableEmoticons>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/IntegrationData.enableEmoticons.<get-enableEmoticons>|<get-enableEmoticons>(){}[0]
    final val enabled // dev.kord.core.cache.data/IntegrationData.enabled|{}enabled[0]
        final fun <get-enabled>(): kotlin/Boolean // dev.kord.core.cache.data/IntegrationData.enabled.<get-enabled>|<get-enabled>(){}[0]
    final val expireBehavior // dev.kord.core.cache.data/IntegrationData.expireBehavior|{}expireBehavior[0]
        final fun <get-expireBehavior>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/IntegrationExpireBehavior> // dev.kord.core.cache.data/IntegrationData.expireBehavior.<get-expireBehavior>|<get-expireBehavior>(){}[0]
    final val expireGracePeriod // dev.kord.core.cache.data/IntegrationData.expireGracePeriod|{}expireGracePeriod[0]
        final fun <get-expireGracePeriod>(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.core.cache.data/IntegrationData.expireGracePeriod.<get-expireGracePeriod>|<get-expireGracePeriod>(){}[0]
    final val guildId // dev.kord.core.cache.data/IntegrationData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/IntegrationData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.core.cache.data/IntegrationData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/IntegrationData.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.core.cache.data/IntegrationData.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.cache.data/IntegrationData.name.<get-name>|<get-name>(){}[0]
    final val revoked // dev.kord.core.cache.data/IntegrationData.revoked|{}revoked[0]
        final fun <get-revoked>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/IntegrationData.revoked.<get-revoked>|<get-revoked>(){}[0]
    final val roleId // dev.kord.core.cache.data/IntegrationData.roleId|{}roleId[0]
        final fun <get-roleId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/IntegrationData.roleId.<get-roleId>|<get-roleId>(){}[0]
    final val subscriberCount // dev.kord.core.cache.data/IntegrationData.subscriberCount|{}subscriberCount[0]
        final fun <get-subscriberCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/IntegrationData.subscriberCount.<get-subscriberCount>|<get-subscriberCount>(){}[0]
    final val syncedAt // dev.kord.core.cache.data/IntegrationData.syncedAt|{}syncedAt[0]
        final fun <get-syncedAt>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.core.cache.data/IntegrationData.syncedAt.<get-syncedAt>|<get-syncedAt>(){}[0]
    final val syncing // dev.kord.core.cache.data/IntegrationData.syncing|{}syncing[0]
        final fun <get-syncing>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/IntegrationData.syncing.<get-syncing>|<get-syncing>(){}[0]
    final val type // dev.kord.core.cache.data/IntegrationData.type|{}type[0]
        final fun <get-type>(): kotlin/String // dev.kord.core.cache.data/IntegrationData.type.<get-type>|<get-type>(){}[0]
    final val user // dev.kord.core.cache.data/IntegrationData.user|{}user[0]
        final fun <get-user>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.core.cache.data/IntegrationData.user.<get-user>|<get-user>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/IntegrationData.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.core.cache.data/IntegrationData.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.core.cache.data/IntegrationData.component11|component11(){}[0]
    final fun component12(): dev.kord.core.cache.data/IntegrationsAccountData // dev.kord.core.cache.data/IntegrationData.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.core.cache.data/IntegrationData.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/IntegrationData.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/IntegrationData.component15|component15(){}[0]
    final fun component16(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/IntegrationApplication> // dev.kord.core.cache.data/IntegrationData.component16|component16(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/IntegrationData.component2|component2(){}[0]
    final fun component3(): kotlin/String // dev.kord.core.cache.data/IntegrationData.component3|component3(){}[0]
    final fun component4(): kotlin/String // dev.kord.core.cache.data/IntegrationData.component4|component4(){}[0]
    final fun component5(): kotlin/Boolean // dev.kord.core.cache.data/IntegrationData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/IntegrationData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/IntegrationData.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/IntegrationData.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/IntegrationExpireBehavior> // dev.kord.core.cache.data/IntegrationData.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., kotlin/String = ..., kotlin/Boolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/IntegrationExpireBehavior> = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.core.cache.data/IntegrationsAccountData = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/IntegrationApplication> = ...): dev.kord.core.cache.data/IntegrationData // dev.kord.core.cache.data/IntegrationData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String;kotlin.Boolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.IntegrationExpireBehavior>;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.core.cache.data.IntegrationsAccountData;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.IntegrationApplication>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/IntegrationData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/IntegrationData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/IntegrationData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/IntegrationData> { // dev.kord.core.cache.data/IntegrationData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/IntegrationData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/IntegrationData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/IntegrationData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/IntegrationData // dev.kord.core.cache.data/IntegrationData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/IntegrationData) // dev.kord.core.cache.data/IntegrationData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.IntegrationData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/IntegrationData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/IntegrationData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordIntegration): dev.kord.core.cache.data/IntegrationData // dev.kord.core.cache.data/IntegrationData.Companion.from|from(dev.kord.common.entity.Snowflake;dev.kord.common.entity.DiscordIntegration){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/IntegrationData> // dev.kord.core.cache.data/IntegrationData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/IntegrationsAccountData { // dev.kord.core.cache.data/IntegrationsAccountData|null[0]
    constructor <init>(kotlin/String, kotlin/String) // dev.kord.core.cache.data/IntegrationsAccountData.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final val id // dev.kord.core.cache.data/IntegrationsAccountData.id|{}id[0]
        final fun <get-id>(): kotlin/String // dev.kord.core.cache.data/IntegrationsAccountData.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.core.cache.data/IntegrationsAccountData.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.cache.data/IntegrationsAccountData.name.<get-name>|<get-name>(){}[0]

    final fun component1(): kotlin/String // dev.kord.core.cache.data/IntegrationsAccountData.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.core.cache.data/IntegrationsAccountData.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ...): dev.kord.core.cache.data/IntegrationsAccountData // dev.kord.core.cache.data/IntegrationsAccountData.copy|copy(kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/IntegrationsAccountData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/IntegrationsAccountData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/IntegrationsAccountData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/IntegrationsAccountData> { // dev.kord.core.cache.data/IntegrationsAccountData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/IntegrationsAccountData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/IntegrationsAccountData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/IntegrationsAccountData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/IntegrationsAccountData // dev.kord.core.cache.data/IntegrationsAccountData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/IntegrationsAccountData) // dev.kord.core.cache.data/IntegrationsAccountData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.IntegrationsAccountData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/IntegrationsAccountData.Companion|null[0]
        final fun from(dev.kord.common.entity/DiscordIntegrationsAccount): dev.kord.core.cache.data/IntegrationsAccountData // dev.kord.core.cache.data/IntegrationsAccountData.Companion.from|from(dev.kord.common.entity.DiscordIntegrationsAccount){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/IntegrationsAccountData> // dev.kord.core.cache.data/IntegrationsAccountData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/InteractionData { // dev.kord.core.cache.data/InteractionData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/InteractionType, dev.kord.core.cache.data/ApplicationInteractionData, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/ChannelData> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/MemberData> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/UserData> = ..., kotlin/String, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> = ..., kotlin/Int, dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/MessageData> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common/Locale> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common/Locale> = ...) // dev.kord.core.cache.data/InteractionData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.InteractionType;dev.kord.core.cache.data.ApplicationInteractionData;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.ChannelData>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.MemberData>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.UserData>;kotlin.String;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions>;kotlin.Int;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.MessageData>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions>;dev.kord.common.entity.optional.Optional<dev.kord.common.Locale>;dev.kord.common.entity.optional.Optional<dev.kord.common.Locale>){}[0]

    final val appPermissions // dev.kord.core.cache.data/InteractionData.appPermissions|{}appPermissions[0]
        final fun <get-appPermissions>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> // dev.kord.core.cache.data/InteractionData.appPermissions.<get-appPermissions>|<get-appPermissions>(){}[0]
    final val applicationId // dev.kord.core.cache.data/InteractionData.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/InteractionData.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val channel // dev.kord.core.cache.data/InteractionData.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/ChannelData> // dev.kord.core.cache.data/InteractionData.channel.<get-channel>|<get-channel>(){}[0]
    final val channelId // dev.kord.core.cache.data/InteractionData.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/InteractionData.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val data // dev.kord.core.cache.data/InteractionData.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ApplicationInteractionData // dev.kord.core.cache.data/InteractionData.data.<get-data>|<get-data>(){}[0]
    final val guildId // dev.kord.core.cache.data/InteractionData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/InteractionData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val guildLocale // dev.kord.core.cache.data/InteractionData.guildLocale|{}guildLocale[0]
        final fun <get-guildLocale>(): dev.kord.common.entity.optional/Optional<dev.kord.common/Locale> // dev.kord.core.cache.data/InteractionData.guildLocale.<get-guildLocale>|<get-guildLocale>(){}[0]
    final val id // dev.kord.core.cache.data/InteractionData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/InteractionData.id.<get-id>|<get-id>(){}[0]
    final val locale // dev.kord.core.cache.data/InteractionData.locale|{}locale[0]
        final fun <get-locale>(): dev.kord.common.entity.optional/Optional<dev.kord.common/Locale> // dev.kord.core.cache.data/InteractionData.locale.<get-locale>|<get-locale>(){}[0]
    final val member // dev.kord.core.cache.data/InteractionData.member|{}member[0]
        final fun <get-member>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/MemberData> // dev.kord.core.cache.data/InteractionData.member.<get-member>|<get-member>(){}[0]
    final val message // dev.kord.core.cache.data/InteractionData.message|{}message[0]
        final fun <get-message>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/MessageData> // dev.kord.core.cache.data/InteractionData.message.<get-message>|<get-message>(){}[0]
    final val permissions // dev.kord.core.cache.data/InteractionData.permissions|{}permissions[0]
        final fun <get-permissions>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> // dev.kord.core.cache.data/InteractionData.permissions.<get-permissions>|<get-permissions>(){}[0]
    final val token // dev.kord.core.cache.data/InteractionData.token|{}token[0]
        final fun <get-token>(): kotlin/String // dev.kord.core.cache.data/InteractionData.token.<get-token>|<get-token>(){}[0]
    final val type // dev.kord.core.cache.data/InteractionData.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/InteractionType // dev.kord.core.cache.data/InteractionData.type.<get-type>|<get-type>(){}[0]
    final val user // dev.kord.core.cache.data/InteractionData.user|{}user[0]
        final fun <get-user>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/UserData> // dev.kord.core.cache.data/InteractionData.user.<get-user>|<get-user>(){}[0]
    final val version // dev.kord.core.cache.data/InteractionData.version|{}version[0]
        final fun <get-version>(): kotlin/Int // dev.kord.core.cache.data/InteractionData.version.<get-version>|<get-version>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/InteractionData.component1|component1(){}[0]
    final fun component10(): kotlin/String // dev.kord.core.cache.data/InteractionData.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> // dev.kord.core.cache.data/InteractionData.component11|component11(){}[0]
    final fun component12(): kotlin/Int // dev.kord.core.cache.data/InteractionData.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/MessageData> // dev.kord.core.cache.data/InteractionData.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> // dev.kord.core.cache.data/InteractionData.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity.optional/Optional<dev.kord.common/Locale> // dev.kord.core.cache.data/InteractionData.component15|component15(){}[0]
    final fun component16(): dev.kord.common.entity.optional/Optional<dev.kord.common/Locale> // dev.kord.core.cache.data/InteractionData.component16|component16(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/InteractionData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/InteractionType // dev.kord.core.cache.data/InteractionData.component3|component3(){}[0]
    final fun component4(): dev.kord.core.cache.data/ApplicationInteractionData // dev.kord.core.cache.data/InteractionData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/InteractionData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/ChannelData> // dev.kord.core.cache.data/InteractionData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/InteractionData.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/MemberData> // dev.kord.core.cache.data/InteractionData.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/UserData> // dev.kord.core.cache.data/InteractionData.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/InteractionType = ..., dev.kord.core.cache.data/ApplicationInteractionData = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/ChannelData> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/MemberData> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/UserData> = ..., kotlin/String = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> = ..., kotlin/Int = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/MessageData> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common/Locale> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common/Locale> = ...): dev.kord.core.cache.data/InteractionData // dev.kord.core.cache.data/InteractionData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.InteractionType;dev.kord.core.cache.data.ApplicationInteractionData;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.ChannelData>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.MemberData>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.UserData>;kotlin.String;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions>;kotlin.Int;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.MessageData>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions>;dev.kord.common.entity.optional.Optional<dev.kord.common.Locale>;dev.kord.common.entity.optional.Optional<dev.kord.common.Locale>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/InteractionData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/InteractionData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/InteractionData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/InteractionData> { // dev.kord.core.cache.data/InteractionData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/InteractionData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/InteractionData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/InteractionData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/InteractionData // dev.kord.core.cache.data/InteractionData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/InteractionData) // dev.kord.core.cache.data/InteractionData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.InteractionData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/InteractionData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/InteractionData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordInteraction): dev.kord.core.cache.data/InteractionData // dev.kord.core.cache.data/InteractionData.Companion.from|from(dev.kord.common.entity.DiscordInteraction){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/InteractionData> // dev.kord.core.cache.data/InteractionData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/InviteCreateData { // dev.kord.core.cache.data/InviteCreateData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, kotlinx.datetime/Instant, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin.time/Duration, kotlin/Int, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/PartialApplicationData> = ..., kotlin/Boolean, kotlin/Int) // dev.kord.core.cache.data/InviteCreateData.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;kotlinx.datetime.Instant;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.time.Duration;kotlin.Int;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.InviteTargetType>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.PartialApplicationData>;kotlin.Boolean;kotlin.Int){}[0]

    final val channelId // dev.kord.core.cache.data/InviteCreateData.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/InviteCreateData.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val code // dev.kord.core.cache.data/InviteCreateData.code|{}code[0]
        final fun <get-code>(): kotlin/String // dev.kord.core.cache.data/InviteCreateData.code.<get-code>|<get-code>(){}[0]
    final val createdAt // dev.kord.core.cache.data/InviteCreateData.createdAt|{}createdAt[0]
        final fun <get-createdAt>(): kotlinx.datetime/Instant // dev.kord.core.cache.data/InviteCreateData.createdAt.<get-createdAt>|<get-createdAt>(){}[0]
    final val guildId // dev.kord.core.cache.data/InviteCreateData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/InviteCreateData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val inviterId // dev.kord.core.cache.data/InviteCreateData.inviterId|{}inviterId[0]
        final fun <get-inviterId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/InviteCreateData.inviterId.<get-inviterId>|<get-inviterId>(){}[0]
    final val maxAge // dev.kord.core.cache.data/InviteCreateData.maxAge|{}maxAge[0]
        final fun <get-maxAge>(): kotlin.time/Duration // dev.kord.core.cache.data/InviteCreateData.maxAge.<get-maxAge>|<get-maxAge>(){}[0]
    final val maxUses // dev.kord.core.cache.data/InviteCreateData.maxUses|{}maxUses[0]
        final fun <get-maxUses>(): kotlin/Int // dev.kord.core.cache.data/InviteCreateData.maxUses.<get-maxUses>|<get-maxUses>(){}[0]
    final val targetApplication // dev.kord.core.cache.data/InviteCreateData.targetApplication|{}targetApplication[0]
        final fun <get-targetApplication>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/PartialApplicationData> // dev.kord.core.cache.data/InviteCreateData.targetApplication.<get-targetApplication>|<get-targetApplication>(){}[0]
    final val targetType // dev.kord.core.cache.data/InviteCreateData.targetType|{}targetType[0]
        final fun <get-targetType>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> // dev.kord.core.cache.data/InviteCreateData.targetType.<get-targetType>|<get-targetType>(){}[0]
    final val targetUserId // dev.kord.core.cache.data/InviteCreateData.targetUserId|{}targetUserId[0]
        final fun <get-targetUserId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/InviteCreateData.targetUserId.<get-targetUserId>|<get-targetUserId>(){}[0]
    final val temporary // dev.kord.core.cache.data/InviteCreateData.temporary|{}temporary[0]
        final fun <get-temporary>(): kotlin/Boolean // dev.kord.core.cache.data/InviteCreateData.temporary.<get-temporary>|<get-temporary>(){}[0]
    final val uses // dev.kord.core.cache.data/InviteCreateData.uses|{}uses[0]
        final fun <get-uses>(): kotlin/Int // dev.kord.core.cache.data/InviteCreateData.uses.<get-uses>|<get-uses>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/InviteCreateData.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/PartialApplicationData> // dev.kord.core.cache.data/InviteCreateData.component10|component10(){}[0]
    final fun component11(): kotlin/Boolean // dev.kord.core.cache.data/InviteCreateData.component11|component11(){}[0]
    final fun component12(): kotlin/Int // dev.kord.core.cache.data/InviteCreateData.component12|component12(){}[0]
    final fun component2(): kotlin/String // dev.kord.core.cache.data/InviteCreateData.component2|component2(){}[0]
    final fun component3(): kotlinx.datetime/Instant // dev.kord.core.cache.data/InviteCreateData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/InviteCreateData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/InviteCreateData.component5|component5(){}[0]
    final fun component6(): kotlin.time/Duration // dev.kord.core.cache.data/InviteCreateData.component6|component6(){}[0]
    final fun component7(): kotlin/Int // dev.kord.core.cache.data/InviteCreateData.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> // dev.kord.core.cache.data/InviteCreateData.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/InviteCreateData.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., kotlinx.datetime/Instant = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin.time/Duration = ..., kotlin/Int = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/PartialApplicationData> = ..., kotlin/Boolean = ..., kotlin/Int = ...): dev.kord.core.cache.data/InviteCreateData // dev.kord.core.cache.data/InviteCreateData.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;kotlinx.datetime.Instant;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.time.Duration;kotlin.Int;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.InviteTargetType>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.PartialApplicationData>;kotlin.Boolean;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/InviteCreateData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/InviteCreateData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/InviteCreateData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/InviteCreateData> { // dev.kord.core.cache.data/InviteCreateData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/InviteCreateData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/InviteCreateData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/InviteCreateData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/InviteCreateData // dev.kord.core.cache.data/InviteCreateData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/InviteCreateData) // dev.kord.core.cache.data/InviteCreateData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.InviteCreateData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/InviteCreateData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/InviteCreateData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.gateway/DiscordCreatedInvite): dev.kord.core.cache.data/InviteCreateData // dev.kord.core.cache.data/InviteCreateData.Companion.from|from(dev.kord.gateway.DiscordCreatedInvite){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/InviteCreateData> // dev.kord.core.cache.data/InviteCreateData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/InviteData : dev.kord.core.cache.data/BaseInviteData { // dev.kord.core.cache.data/InviteData|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/PartialGuildData> = ..., dev.kord.common.entity/Snowflake?, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/PartialApplicationData> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/GuildScheduledEventData> = ...) // dev.kord.core.cache.data/InviteData.<init>|<init>(kotlin.String;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.PartialGuildData>;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.InviteTargetType>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.PartialApplicationData>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.GuildScheduledEventData>){}[0]

    final val approximateMemberCount // dev.kord.core.cache.data/InviteData.approximateMemberCount|{}approximateMemberCount[0]
        final fun <get-approximateMemberCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/InviteData.approximateMemberCount.<get-approximateMemberCount>|<get-approximateMemberCount>(){}[0]
    final val approximatePresenceCount // dev.kord.core.cache.data/InviteData.approximatePresenceCount|{}approximatePresenceCount[0]
        final fun <get-approximatePresenceCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/InviteData.approximatePresenceCount.<get-approximatePresenceCount>|<get-approximatePresenceCount>(){}[0]
    final val channelId // dev.kord.core.cache.data/InviteData.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/InviteData.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val code // dev.kord.core.cache.data/InviteData.code|{}code[0]
        final fun <get-code>(): kotlin/String // dev.kord.core.cache.data/InviteData.code.<get-code>|<get-code>(){}[0]
    final val expiresAt // dev.kord.core.cache.data/InviteData.expiresAt|{}expiresAt[0]
        final fun <get-expiresAt>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.core.cache.data/InviteData.expiresAt.<get-expiresAt>|<get-expiresAt>(){}[0]
    final val guild // dev.kord.core.cache.data/InviteData.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/PartialGuildData> // dev.kord.core.cache.data/InviteData.guild.<get-guild>|<get-guild>(){}[0]
    final val guildScheduledEvent // dev.kord.core.cache.data/InviteData.guildScheduledEvent|{}guildScheduledEvent[0]
        final fun <get-guildScheduledEvent>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/GuildScheduledEventData> // dev.kord.core.cache.data/InviteData.guildScheduledEvent.<get-guildScheduledEvent>|<get-guildScheduledEvent>(){}[0]
    final val inviterId // dev.kord.core.cache.data/InviteData.inviterId|{}inviterId[0]
        final fun <get-inviterId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/InviteData.inviterId.<get-inviterId>|<get-inviterId>(){}[0]
    final val targetApplication // dev.kord.core.cache.data/InviteData.targetApplication|{}targetApplication[0]
        final fun <get-targetApplication>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/PartialApplicationData> // dev.kord.core.cache.data/InviteData.targetApplication.<get-targetApplication>|<get-targetApplication>(){}[0]
    final val targetType // dev.kord.core.cache.data/InviteData.targetType|{}targetType[0]
        final fun <get-targetType>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> // dev.kord.core.cache.data/InviteData.targetType.<get-targetType>|<get-targetType>(){}[0]
    final val targetUserId // dev.kord.core.cache.data/InviteData.targetUserId|{}targetUserId[0]
        final fun <get-targetUserId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/InviteData.targetUserId.<get-targetUserId>|<get-targetUserId>(){}[0]

    final fun component1(): kotlin/String // dev.kord.core.cache.data/InviteData.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.core.cache.data/InviteData.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/GuildScheduledEventData> // dev.kord.core.cache.data/InviteData.component11|component11(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/PartialGuildData> // dev.kord.core.cache.data/InviteData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/InviteData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/InviteData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> // dev.kord.core.cache.data/InviteData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/InviteData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/PartialApplicationData> // dev.kord.core.cache.data/InviteData.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/InviteData.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/InviteData.component9|component9(){}[0]
    final fun copy(kotlin/String = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/PartialGuildData> = ..., dev.kord.common.entity/Snowflake? = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/PartialApplicationData> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/GuildScheduledEventData> = ...): dev.kord.core.cache.data/InviteData // dev.kord.core.cache.data/InviteData.copy|copy(kotlin.String;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.PartialGuildData>;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.InviteTargetType>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.PartialApplicationData>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.GuildScheduledEventData>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/InviteData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/InviteData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/InviteData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/InviteData> { // dev.kord.core.cache.data/InviteData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/InviteData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/InviteData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/InviteData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/InviteData // dev.kord.core.cache.data/InviteData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/InviteData) // dev.kord.core.cache.data/InviteData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.InviteData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/InviteData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/InviteData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordInvite): dev.kord.core.cache.data/InviteData // dev.kord.core.cache.data/InviteData.Companion.from|from(dev.kord.common.entity.DiscordInvite){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/InviteData> // dev.kord.core.cache.data/InviteData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/InviteDeleteData { // dev.kord.core.cache.data/InviteDeleteData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/String) // dev.kord.core.cache.data/InviteDeleteData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.String){}[0]

    final val channelId // dev.kord.core.cache.data/InviteDeleteData.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/InviteDeleteData.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val code // dev.kord.core.cache.data/InviteDeleteData.code|{}code[0]
        final fun <get-code>(): kotlin/String // dev.kord.core.cache.data/InviteDeleteData.code.<get-code>|<get-code>(){}[0]
    final val guildId // dev.kord.core.cache.data/InviteDeleteData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/InviteDeleteData.guildId.<get-guildId>|<get-guildId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/InviteDeleteData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/InviteDeleteData.component2|component2(){}[0]
    final fun component3(): kotlin/String // dev.kord.core.cache.data/InviteDeleteData.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/String = ...): dev.kord.core.cache.data/InviteDeleteData // dev.kord.core.cache.data/InviteDeleteData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/InviteDeleteData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/InviteDeleteData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/InviteDeleteData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/InviteDeleteData> { // dev.kord.core.cache.data/InviteDeleteData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/InviteDeleteData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/InviteDeleteData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/InviteDeleteData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/InviteDeleteData // dev.kord.core.cache.data/InviteDeleteData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/InviteDeleteData) // dev.kord.core.cache.data/InviteDeleteData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.InviteDeleteData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/InviteDeleteData.Companion|null[0]
        final fun from(dev.kord.gateway/DiscordDeletedInvite): dev.kord.core.cache.data/InviteDeleteData // dev.kord.core.cache.data/InviteDeleteData.Companion.from|from(dev.kord.gateway.DiscordDeletedInvite){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/InviteDeleteData> // dev.kord.core.cache.data/InviteDeleteData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/InviteWithMetadataData : dev.kord.core.cache.data/BaseInviteData { // dev.kord.core.cache.data/InviteWithMetadataData|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/PartialGuildData> = ..., dev.kord.common.entity/Snowflake?, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/PartialApplicationData> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/GuildScheduledEventData> = ..., kotlin/Int, kotlin/Int, kotlin.time/Duration, kotlin/Boolean, kotlinx.datetime/Instant) // dev.kord.core.cache.data/InviteWithMetadataData.<init>|<init>(kotlin.String;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.PartialGuildData>;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.InviteTargetType>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.PartialApplicationData>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.GuildScheduledEventData>;kotlin.Int;kotlin.Int;kotlin.time.Duration;kotlin.Boolean;kotlinx.datetime.Instant){}[0]

    final val approximateMemberCount // dev.kord.core.cache.data/InviteWithMetadataData.approximateMemberCount|{}approximateMemberCount[0]
        final fun <get-approximateMemberCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/InviteWithMetadataData.approximateMemberCount.<get-approximateMemberCount>|<get-approximateMemberCount>(){}[0]
    final val approximatePresenceCount // dev.kord.core.cache.data/InviteWithMetadataData.approximatePresenceCount|{}approximatePresenceCount[0]
        final fun <get-approximatePresenceCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/InviteWithMetadataData.approximatePresenceCount.<get-approximatePresenceCount>|<get-approximatePresenceCount>(){}[0]
    final val channelId // dev.kord.core.cache.data/InviteWithMetadataData.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/InviteWithMetadataData.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val code // dev.kord.core.cache.data/InviteWithMetadataData.code|{}code[0]
        final fun <get-code>(): kotlin/String // dev.kord.core.cache.data/InviteWithMetadataData.code.<get-code>|<get-code>(){}[0]
    final val createdAt // dev.kord.core.cache.data/InviteWithMetadataData.createdAt|{}createdAt[0]
        final fun <get-createdAt>(): kotlinx.datetime/Instant // dev.kord.core.cache.data/InviteWithMetadataData.createdAt.<get-createdAt>|<get-createdAt>(){}[0]
    final val expiresAt // dev.kord.core.cache.data/InviteWithMetadataData.expiresAt|{}expiresAt[0]
        final fun <get-expiresAt>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.core.cache.data/InviteWithMetadataData.expiresAt.<get-expiresAt>|<get-expiresAt>(){}[0]
    final val guild // dev.kord.core.cache.data/InviteWithMetadataData.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/PartialGuildData> // dev.kord.core.cache.data/InviteWithMetadataData.guild.<get-guild>|<get-guild>(){}[0]
    final val guildScheduledEvent // dev.kord.core.cache.data/InviteWithMetadataData.guildScheduledEvent|{}guildScheduledEvent[0]
        final fun <get-guildScheduledEvent>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/GuildScheduledEventData> // dev.kord.core.cache.data/InviteWithMetadataData.guildScheduledEvent.<get-guildScheduledEvent>|<get-guildScheduledEvent>(){}[0]
    final val inviterId // dev.kord.core.cache.data/InviteWithMetadataData.inviterId|{}inviterId[0]
        final fun <get-inviterId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/InviteWithMetadataData.inviterId.<get-inviterId>|<get-inviterId>(){}[0]
    final val maxAge // dev.kord.core.cache.data/InviteWithMetadataData.maxAge|{}maxAge[0]
        final fun <get-maxAge>(): kotlin.time/Duration // dev.kord.core.cache.data/InviteWithMetadataData.maxAge.<get-maxAge>|<get-maxAge>(){}[0]
    final val maxUses // dev.kord.core.cache.data/InviteWithMetadataData.maxUses|{}maxUses[0]
        final fun <get-maxUses>(): kotlin/Int // dev.kord.core.cache.data/InviteWithMetadataData.maxUses.<get-maxUses>|<get-maxUses>(){}[0]
    final val targetApplication // dev.kord.core.cache.data/InviteWithMetadataData.targetApplication|{}targetApplication[0]
        final fun <get-targetApplication>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/PartialApplicationData> // dev.kord.core.cache.data/InviteWithMetadataData.targetApplication.<get-targetApplication>|<get-targetApplication>(){}[0]
    final val targetType // dev.kord.core.cache.data/InviteWithMetadataData.targetType|{}targetType[0]
        final fun <get-targetType>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> // dev.kord.core.cache.data/InviteWithMetadataData.targetType.<get-targetType>|<get-targetType>(){}[0]
    final val targetUserId // dev.kord.core.cache.data/InviteWithMetadataData.targetUserId|{}targetUserId[0]
        final fun <get-targetUserId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/InviteWithMetadataData.targetUserId.<get-targetUserId>|<get-targetUserId>(){}[0]
    final val temporary // dev.kord.core.cache.data/InviteWithMetadataData.temporary|{}temporary[0]
        final fun <get-temporary>(): kotlin/Boolean // dev.kord.core.cache.data/InviteWithMetadataData.temporary.<get-temporary>|<get-temporary>(){}[0]
    final val uses // dev.kord.core.cache.data/InviteWithMetadataData.uses|{}uses[0]
        final fun <get-uses>(): kotlin/Int // dev.kord.core.cache.data/InviteWithMetadataData.uses.<get-uses>|<get-uses>(){}[0]

    final fun component1(): kotlin/String // dev.kord.core.cache.data/InviteWithMetadataData.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.core.cache.data/InviteWithMetadataData.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/GuildScheduledEventData> // dev.kord.core.cache.data/InviteWithMetadataData.component11|component11(){}[0]
    final fun component12(): kotlin/Int // dev.kord.core.cache.data/InviteWithMetadataData.component12|component12(){}[0]
    final fun component13(): kotlin/Int // dev.kord.core.cache.data/InviteWithMetadataData.component13|component13(){}[0]
    final fun component14(): kotlin.time/Duration // dev.kord.core.cache.data/InviteWithMetadataData.component14|component14(){}[0]
    final fun component15(): kotlin/Boolean // dev.kord.core.cache.data/InviteWithMetadataData.component15|component15(){}[0]
    final fun component16(): kotlinx.datetime/Instant // dev.kord.core.cache.data/InviteWithMetadataData.component16|component16(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/PartialGuildData> // dev.kord.core.cache.data/InviteWithMetadataData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/InviteWithMetadataData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/InviteWithMetadataData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> // dev.kord.core.cache.data/InviteWithMetadataData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/InviteWithMetadataData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/PartialApplicationData> // dev.kord.core.cache.data/InviteWithMetadataData.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/InviteWithMetadataData.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/InviteWithMetadataData.component9|component9(){}[0]
    final fun copy(kotlin/String = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/PartialGuildData> = ..., dev.kord.common.entity/Snowflake? = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/PartialApplicationData> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/GuildScheduledEventData> = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin.time/Duration = ..., kotlin/Boolean = ..., kotlinx.datetime/Instant = ...): dev.kord.core.cache.data/InviteWithMetadataData // dev.kord.core.cache.data/InviteWithMetadataData.copy|copy(kotlin.String;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.PartialGuildData>;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.InviteTargetType>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.PartialApplicationData>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.GuildScheduledEventData>;kotlin.Int;kotlin.Int;kotlin.time.Duration;kotlin.Boolean;kotlinx.datetime.Instant){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/InviteWithMetadataData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/InviteWithMetadataData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/InviteWithMetadataData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/InviteWithMetadataData> { // dev.kord.core.cache.data/InviteWithMetadataData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/InviteWithMetadataData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/InviteWithMetadataData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/InviteWithMetadataData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/InviteWithMetadataData // dev.kord.core.cache.data/InviteWithMetadataData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/InviteWithMetadataData) // dev.kord.core.cache.data/InviteWithMetadataData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.InviteWithMetadataData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/InviteWithMetadataData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/InviteWithMetadataData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordInviteWithMetadata): dev.kord.core.cache.data/InviteWithMetadataData // dev.kord.core.cache.data/InviteWithMetadataData.Companion.from|from(dev.kord.common.entity.DiscordInviteWithMetadata){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/InviteWithMetadataData> // dev.kord.core.cache.data/InviteWithMetadataData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/MemberData { // dev.kord.core.cache.data/MemberData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlin.collections/List<dev.kord.common.entity/Snowflake>, kotlinx.datetime/Instant, dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ..., dev.kord.common.entity/GuildMemberFlags, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ...) // dev.kord.core.cache.data/MemberData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlin.collections.List<dev.kord.common.entity.Snowflake>;kotlinx.datetime.Instant;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>;dev.kord.common.entity.GuildMemberFlags;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>){}[0]

    final val avatar // dev.kord.core.cache.data/MemberData.avatar|{}avatar[0]
        final fun <get-avatar>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/MemberData.avatar.<get-avatar>|<get-avatar>(){}[0]
    final val communicationDisabledUntil // dev.kord.core.cache.data/MemberData.communicationDisabledUntil|{}communicationDisabledUntil[0]
        final fun <get-communicationDisabledUntil>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.core.cache.data/MemberData.communicationDisabledUntil.<get-communicationDisabledUntil>|<get-communicationDisabledUntil>(){}[0]
    final val flags // dev.kord.core.cache.data/MemberData.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity/GuildMemberFlags // dev.kord.core.cache.data/MemberData.flags.<get-flags>|<get-flags>(){}[0]
    final val guildId // dev.kord.core.cache.data/MemberData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/MemberData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val joinedAt // dev.kord.core.cache.data/MemberData.joinedAt|{}joinedAt[0]
        final fun <get-joinedAt>(): kotlinx.datetime/Instant // dev.kord.core.cache.data/MemberData.joinedAt.<get-joinedAt>|<get-joinedAt>(){}[0]
    final val nick // dev.kord.core.cache.data/MemberData.nick|{}nick[0]
        final fun <get-nick>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/MemberData.nick.<get-nick>|<get-nick>(){}[0]
    final val pending // dev.kord.core.cache.data/MemberData.pending|{}pending[0]
        final fun <get-pending>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/MemberData.pending.<get-pending>|<get-pending>(){}[0]
    final val permissions // dev.kord.core.cache.data/MemberData.permissions|{}permissions[0]
        final fun <get-permissions>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> // dev.kord.core.cache.data/MemberData.permissions.<get-permissions>|<get-permissions>(){}[0]
    final val premiumSince // dev.kord.core.cache.data/MemberData.premiumSince|{}premiumSince[0]
        final fun <get-premiumSince>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.core.cache.data/MemberData.premiumSince.<get-premiumSince>|<get-premiumSince>(){}[0]
    final val roles // dev.kord.core.cache.data/MemberData.roles|{}roles[0]
        final fun <get-roles>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/MemberData.roles.<get-roles>|<get-roles>(){}[0]
    final val userId // dev.kord.core.cache.data/MemberData.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/MemberData.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/MemberData.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/MemberData.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.core.cache.data/MemberData.component11|component11(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/MemberData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/MemberData.component3|component3(){}[0]
    final fun component4(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/MemberData.component4|component4(){}[0]
    final fun component5(): kotlinx.datetime/Instant // dev.kord.core.cache.data/MemberData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.core.cache.data/MemberData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity/GuildMemberFlags // dev.kord.core.cache.data/MemberData.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> // dev.kord.core.cache.data/MemberData.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/MemberData.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlin.collections/List<dev.kord.common.entity/Snowflake> = ..., kotlinx.datetime/Instant = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ..., dev.kord.common.entity/GuildMemberFlags = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ...): dev.kord.core.cache.data/MemberData // dev.kord.core.cache.data/MemberData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlin.collections.List<dev.kord.common.entity.Snowflake>;kotlinx.datetime.Instant;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>;dev.kord.common.entity.GuildMemberFlags;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/MemberData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/MemberData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/MemberData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/MemberData> { // dev.kord.core.cache.data/MemberData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/MemberData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/MemberData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/MemberData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/MemberData // dev.kord.core.cache.data/MemberData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/MemberData) // dev.kord.core.cache.data/MemberData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.MemberData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/MemberData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/MemberData.Companion.$childSerializers|{}$childSerializers[0]
        final val description // dev.kord.core.cache.data/MemberData.Companion.description|{}description[0]
            final fun <get-description>(): dev.kord.cache.api.data/DataDescription<dev.kord.core.cache.data/MemberData, kotlin/String> // dev.kord.core.cache.data/MemberData.Companion.description.<get-description>|<get-description>(){}[0]

        final fun from(dev.kord.common.entity/DiscordUpdatedGuildMember): dev.kord.core.cache.data/MemberData // dev.kord.core.cache.data/MemberData.Companion.from|from(dev.kord.common.entity.DiscordUpdatedGuildMember){}[0]
        final fun from(dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordAddedGuildMember): dev.kord.core.cache.data/MemberData // dev.kord.core.cache.data/MemberData.Companion.from|from(dev.kord.common.entity.Snowflake;dev.kord.common.entity.DiscordAddedGuildMember){}[0]
        final fun from(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordGuildMember): dev.kord.core.cache.data/MemberData // dev.kord.core.cache.data/MemberData.Companion.from|from(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.DiscordGuildMember){}[0]
        final fun from(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordInteractionGuildMember): dev.kord.core.cache.data/MemberData // dev.kord.core.cache.data/MemberData.Companion.from|from(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.DiscordInteractionGuildMember){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/MemberData> // dev.kord.core.cache.data/MemberData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/MembersChunkData { // dev.kord.core.cache.data/MembersChunkData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin.collections/Set<dev.kord.core.cache.data/MemberData>, kotlin.collections/Set<dev.kord.core.cache.data/UserData>, kotlin/Int, kotlin/Int, dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/PresenceData>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...) // dev.kord.core.cache.data/MembersChunkData.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.collections.Set<dev.kord.core.cache.data.MemberData>;kotlin.collections.Set<dev.kord.core.cache.data.UserData>;kotlin.Int;kotlin.Int;dev.kord.common.entity.optional.Optional<kotlin.collections.Set<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.PresenceData>>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]

    final val chunkCount // dev.kord.core.cache.data/MembersChunkData.chunkCount|{}chunkCount[0]
        final fun <get-chunkCount>(): kotlin/Int // dev.kord.core.cache.data/MembersChunkData.chunkCount.<get-chunkCount>|<get-chunkCount>(){}[0]
    final val chunkIndex // dev.kord.core.cache.data/MembersChunkData.chunkIndex|{}chunkIndex[0]
        final fun <get-chunkIndex>(): kotlin/Int // dev.kord.core.cache.data/MembersChunkData.chunkIndex.<get-chunkIndex>|<get-chunkIndex>(){}[0]
    final val guildId // dev.kord.core.cache.data/MembersChunkData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/MembersChunkData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val members // dev.kord.core.cache.data/MembersChunkData.members|{}members[0]
        final fun <get-members>(): kotlin.collections/Set<dev.kord.core.cache.data/MemberData> // dev.kord.core.cache.data/MembersChunkData.members.<get-members>|<get-members>(){}[0]
    final val nonce // dev.kord.core.cache.data/MembersChunkData.nonce|{}nonce[0]
        final fun <get-nonce>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/MembersChunkData.nonce.<get-nonce>|<get-nonce>(){}[0]
    final val notFound // dev.kord.core.cache.data/MembersChunkData.notFound|{}notFound[0]
        final fun <get-notFound>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Snowflake>> // dev.kord.core.cache.data/MembersChunkData.notFound.<get-notFound>|<get-notFound>(){}[0]
    final val presences // dev.kord.core.cache.data/MembersChunkData.presences|{}presences[0]
        final fun <get-presences>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/PresenceData>> // dev.kord.core.cache.data/MembersChunkData.presences.<get-presences>|<get-presences>(){}[0]
    final val users // dev.kord.core.cache.data/MembersChunkData.users|{}users[0]
        final fun <get-users>(): kotlin.collections/Set<dev.kord.core.cache.data/UserData> // dev.kord.core.cache.data/MembersChunkData.users.<get-users>|<get-users>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/MembersChunkData.component1|component1(){}[0]
    final fun component2(): kotlin.collections/Set<dev.kord.core.cache.data/MemberData> // dev.kord.core.cache.data/MembersChunkData.component2|component2(){}[0]
    final fun component3(): kotlin.collections/Set<dev.kord.core.cache.data/UserData> // dev.kord.core.cache.data/MembersChunkData.component3|component3(){}[0]
    final fun component4(): kotlin/Int // dev.kord.core.cache.data/MembersChunkData.component4|component4(){}[0]
    final fun component5(): kotlin/Int // dev.kord.core.cache.data/MembersChunkData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Snowflake>> // dev.kord.core.cache.data/MembersChunkData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/PresenceData>> // dev.kord.core.cache.data/MembersChunkData.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/MembersChunkData.component8|component8(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin.collections/Set<dev.kord.core.cache.data/MemberData> = ..., kotlin.collections/Set<dev.kord.core.cache.data/UserData> = ..., kotlin/Int = ..., kotlin/Int = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Set<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/PresenceData>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...): dev.kord.core.cache.data/MembersChunkData // dev.kord.core.cache.data/MembersChunkData.copy|copy(dev.kord.common.entity.Snowflake;kotlin.collections.Set<dev.kord.core.cache.data.MemberData>;kotlin.collections.Set<dev.kord.core.cache.data.UserData>;kotlin.Int;kotlin.Int;dev.kord.common.entity.optional.Optional<kotlin.collections.Set<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.PresenceData>>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/MembersChunkData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/MembersChunkData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/MembersChunkData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/MembersChunkData> { // dev.kord.core.cache.data/MembersChunkData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/MembersChunkData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/MembersChunkData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/MembersChunkData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/MembersChunkData // dev.kord.core.cache.data/MembersChunkData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/MembersChunkData) // dev.kord.core.cache.data/MembersChunkData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.MembersChunkData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/MembersChunkData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/MembersChunkData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.gateway/GuildMembersChunkData): dev.kord.core.cache.data/MembersChunkData // dev.kord.core.cache.data/MembersChunkData.Companion.from|from(dev.kord.gateway.GuildMembersChunkData){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/MembersChunkData> // dev.kord.core.cache.data/MembersChunkData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/MessageData { // dev.kord.core.cache.data/MessageData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.core.cache.data/UserData, kotlin/String, kotlinx.datetime/Instant, kotlinx.datetime/Instant? = ..., kotlin/Boolean, kotlin/Boolean, kotlin.collections/List<dev.kord.common.entity/Snowflake>, kotlin.collections/List<dev.kord.common.entity/Snowflake>, dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., kotlin.collections/List<dev.kord.core.cache.data/AttachmentData>, kotlin.collections/List<dev.kord.core.cache.data/EmbedData>, dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ReactionData>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., kotlin/Boolean, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity/MessageType, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageActivity> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageApplication> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/MessageReferenceData> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/StickerItemData>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/MessageData?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/MessageInteractionData> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ComponentData>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/RoleSubscription> = ..., dev.kord.common.entity.optional/OptionalInt = ...) // dev.kord.core.cache.data/MessageData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.core.cache.data.UserData;kotlin.String;kotlinx.datetime.Instant;kotlinx.datetime.Instant?;kotlin.Boolean;kotlin.Boolean;kotlin.collections.List<dev.kord.common.entity.Snowflake>;kotlin.collections.List<dev.kord.common.entity.Snowflake>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;kotlin.collections.List<dev.kord.core.cache.data.AttachmentData>;kotlin.collections.List<dev.kord.core.cache.data.EmbedData>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.ReactionData>>;dev.kord.common.entity.optional.Optional<kotlin.String>;kotlin.Boolean;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.MessageType;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageActivity>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageApplication>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.MessageReferenceData>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageFlags>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.StickerItemData>>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.MessageData?>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.MessageInteractionData>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.ComponentData>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.RoleSubscription>;dev.kord.common.entity.optional.OptionalInt){}[0]

    final val activity // dev.kord.core.cache.data/MessageData.activity|{}activity[0]
        final fun <get-activity>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageActivity> // dev.kord.core.cache.data/MessageData.activity.<get-activity>|<get-activity>(){}[0]
    final val application // dev.kord.core.cache.data/MessageData.application|{}application[0]
        final fun <get-application>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageApplication> // dev.kord.core.cache.data/MessageData.application.<get-application>|<get-application>(){}[0]
    final val applicationId // dev.kord.core.cache.data/MessageData.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/MessageData.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val attachments // dev.kord.core.cache.data/MessageData.attachments|{}attachments[0]
        final fun <get-attachments>(): kotlin.collections/List<dev.kord.core.cache.data/AttachmentData> // dev.kord.core.cache.data/MessageData.attachments.<get-attachments>|<get-attachments>(){}[0]
    final val author // dev.kord.core.cache.data/MessageData.author|{}author[0]
        final fun <get-author>(): dev.kord.core.cache.data/UserData // dev.kord.core.cache.data/MessageData.author.<get-author>|<get-author>(){}[0]
    final val channelId // dev.kord.core.cache.data/MessageData.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/MessageData.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val components // dev.kord.core.cache.data/MessageData.components|{}components[0]
        final fun <get-components>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ComponentData>> // dev.kord.core.cache.data/MessageData.components.<get-components>|<get-components>(){}[0]
    final val content // dev.kord.core.cache.data/MessageData.content|{}content[0]
        final fun <get-content>(): kotlin/String // dev.kord.core.cache.data/MessageData.content.<get-content>|<get-content>(){}[0]
    final val editedTimestamp // dev.kord.core.cache.data/MessageData.editedTimestamp|{}editedTimestamp[0]
        final fun <get-editedTimestamp>(): kotlinx.datetime/Instant? // dev.kord.core.cache.data/MessageData.editedTimestamp.<get-editedTimestamp>|<get-editedTimestamp>(){}[0]
    final val embeds // dev.kord.core.cache.data/MessageData.embeds|{}embeds[0]
        final fun <get-embeds>(): kotlin.collections/List<dev.kord.core.cache.data/EmbedData> // dev.kord.core.cache.data/MessageData.embeds.<get-embeds>|<get-embeds>(){}[0]
    final val flags // dev.kord.core.cache.data/MessageData.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> // dev.kord.core.cache.data/MessageData.flags.<get-flags>|<get-flags>(){}[0]
    final val guildId // dev.kord.core.cache.data/MessageData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/MessageData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.core.cache.data/MessageData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/MessageData.id.<get-id>|<get-id>(){}[0]
    final val interaction // dev.kord.core.cache.data/MessageData.interaction|{}interaction[0]
        final fun <get-interaction>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/MessageInteractionData> // dev.kord.core.cache.data/MessageData.interaction.<get-interaction>|<get-interaction>(){}[0]
    final val mentionEveryone // dev.kord.core.cache.data/MessageData.mentionEveryone|{}mentionEveryone[0]
        final fun <get-mentionEveryone>(): kotlin/Boolean // dev.kord.core.cache.data/MessageData.mentionEveryone.<get-mentionEveryone>|<get-mentionEveryone>(){}[0]
    final val mentionRoles // dev.kord.core.cache.data/MessageData.mentionRoles|{}mentionRoles[0]
        final fun <get-mentionRoles>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/MessageData.mentionRoles.<get-mentionRoles>|<get-mentionRoles>(){}[0]
    final val mentionedChannels // dev.kord.core.cache.data/MessageData.mentionedChannels|{}mentionedChannels[0]
        final fun <get-mentionedChannels>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.core.cache.data/MessageData.mentionedChannels.<get-mentionedChannels>|<get-mentionedChannels>(){}[0]
    final val mentions // dev.kord.core.cache.data/MessageData.mentions|{}mentions[0]
        final fun <get-mentions>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/MessageData.mentions.<get-mentions>|<get-mentions>(){}[0]
    final val messageReference // dev.kord.core.cache.data/MessageData.messageReference|{}messageReference[0]
        final fun <get-messageReference>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/MessageReferenceData> // dev.kord.core.cache.data/MessageData.messageReference.<get-messageReference>|<get-messageReference>(){}[0]
    final val nonce // dev.kord.core.cache.data/MessageData.nonce|{}nonce[0]
        final fun <get-nonce>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/MessageData.nonce.<get-nonce>|<get-nonce>(){}[0]
    final val pinned // dev.kord.core.cache.data/MessageData.pinned|{}pinned[0]
        final fun <get-pinned>(): kotlin/Boolean // dev.kord.core.cache.data/MessageData.pinned.<get-pinned>|<get-pinned>(){}[0]
    final val position // dev.kord.core.cache.data/MessageData.position|{}position[0]
        final fun <get-position>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/MessageData.position.<get-position>|<get-position>(){}[0]
    final val reactions // dev.kord.core.cache.data/MessageData.reactions|{}reactions[0]
        final fun <get-reactions>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ReactionData>> // dev.kord.core.cache.data/MessageData.reactions.<get-reactions>|<get-reactions>(){}[0]
    final val referencedMessage // dev.kord.core.cache.data/MessageData.referencedMessage|{}referencedMessage[0]
        final fun <get-referencedMessage>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/MessageData?> // dev.kord.core.cache.data/MessageData.referencedMessage.<get-referencedMessage>|<get-referencedMessage>(){}[0]
    final val roleSubscriptionData // dev.kord.core.cache.data/MessageData.roleSubscriptionData|{}roleSubscriptionData[0]
        final fun <get-roleSubscriptionData>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/RoleSubscription> // dev.kord.core.cache.data/MessageData.roleSubscriptionData.<get-roleSubscriptionData>|<get-roleSubscriptionData>(){}[0]
    final val stickers // dev.kord.core.cache.data/MessageData.stickers|{}stickers[0]
        final fun <get-stickers>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/StickerItemData>> // dev.kord.core.cache.data/MessageData.stickers.<get-stickers>|<get-stickers>(){}[0]
    final val timestamp // dev.kord.core.cache.data/MessageData.timestamp|{}timestamp[0]
        final fun <get-timestamp>(): kotlinx.datetime/Instant // dev.kord.core.cache.data/MessageData.timestamp.<get-timestamp>|<get-timestamp>(){}[0]
    final val tts // dev.kord.core.cache.data/MessageData.tts|{}tts[0]
        final fun <get-tts>(): kotlin/Boolean // dev.kord.core.cache.data/MessageData.tts.<get-tts>|<get-tts>(){}[0]
    final val type // dev.kord.core.cache.data/MessageData.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/MessageType // dev.kord.core.cache.data/MessageData.type.<get-type>|<get-type>(){}[0]
    final val webhookId // dev.kord.core.cache.data/MessageData.webhookId|{}webhookId[0]
        final fun <get-webhookId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/MessageData.webhookId.<get-webhookId>|<get-webhookId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/MessageData.component1|component1(){}[0]
    final fun component10(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/MessageData.component10|component10(){}[0]
    final fun component11(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/MessageData.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.core.cache.data/MessageData.component12|component12(){}[0]
    final fun component13(): kotlin.collections/List<dev.kord.core.cache.data/AttachmentData> // dev.kord.core.cache.data/MessageData.component13|component13(){}[0]
    final fun component14(): kotlin.collections/List<dev.kord.core.cache.data/EmbedData> // dev.kord.core.cache.data/MessageData.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ReactionData>> // dev.kord.core.cache.data/MessageData.component15|component15(){}[0]
    final fun component16(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/MessageData.component16|component16(){}[0]
    final fun component17(): kotlin/Boolean // dev.kord.core.cache.data/MessageData.component17|component17(){}[0]
    final fun component18(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/MessageData.component18|component18(){}[0]
    final fun component19(): dev.kord.common.entity/MessageType // dev.kord.core.cache.data/MessageData.component19|component19(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/MessageData.component2|component2(){}[0]
    final fun component20(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageActivity> // dev.kord.core.cache.data/MessageData.component20|component20(){}[0]
    final fun component21(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageApplication> // dev.kord.core.cache.data/MessageData.component21|component21(){}[0]
    final fun component22(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/MessageData.component22|component22(){}[0]
    final fun component23(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/MessageReferenceData> // dev.kord.core.cache.data/MessageData.component23|component23(){}[0]
    final fun component24(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> // dev.kord.core.cache.data/MessageData.component24|component24(){}[0]
    final fun component25(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/StickerItemData>> // dev.kord.core.cache.data/MessageData.component25|component25(){}[0]
    final fun component26(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/MessageData?> // dev.kord.core.cache.data/MessageData.component26|component26(){}[0]
    final fun component27(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/MessageInteractionData> // dev.kord.core.cache.data/MessageData.component27|component27(){}[0]
    final fun component28(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ComponentData>> // dev.kord.core.cache.data/MessageData.component28|component28(){}[0]
    final fun component29(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/RoleSubscription> // dev.kord.core.cache.data/MessageData.component29|component29(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/MessageData.component3|component3(){}[0]
    final fun component30(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/MessageData.component30|component30(){}[0]
    final fun component4(): dev.kord.core.cache.data/UserData // dev.kord.core.cache.data/MessageData.component4|component4(){}[0]
    final fun component5(): kotlin/String // dev.kord.core.cache.data/MessageData.component5|component5(){}[0]
    final fun component6(): kotlinx.datetime/Instant // dev.kord.core.cache.data/MessageData.component6|component6(){}[0]
    final fun component7(): kotlinx.datetime/Instant? // dev.kord.core.cache.data/MessageData.component7|component7(){}[0]
    final fun component8(): kotlin/Boolean // dev.kord.core.cache.data/MessageData.component8|component8(){}[0]
    final fun component9(): kotlin/Boolean // dev.kord.core.cache.data/MessageData.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.core.cache.data/UserData = ..., kotlin/String = ..., kotlinx.datetime/Instant = ..., kotlinx.datetime/Instant? = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin.collections/List<dev.kord.common.entity/Snowflake> = ..., kotlin.collections/List<dev.kord.common.entity/Snowflake> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., kotlin.collections/List<dev.kord.core.cache.data/AttachmentData> = ..., kotlin.collections/List<dev.kord.core.cache.data/EmbedData> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ReactionData>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., kotlin/Boolean = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity/MessageType = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageActivity> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageApplication> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/MessageReferenceData> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/StickerItemData>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/MessageData?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/MessageInteractionData> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ComponentData>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/RoleSubscription> = ..., dev.kord.common.entity.optional/OptionalInt = ...): dev.kord.core.cache.data/MessageData // dev.kord.core.cache.data/MessageData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.core.cache.data.UserData;kotlin.String;kotlinx.datetime.Instant;kotlinx.datetime.Instant?;kotlin.Boolean;kotlin.Boolean;kotlin.collections.List<dev.kord.common.entity.Snowflake>;kotlin.collections.List<dev.kord.common.entity.Snowflake>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;kotlin.collections.List<dev.kord.core.cache.data.AttachmentData>;kotlin.collections.List<dev.kord.core.cache.data.EmbedData>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.ReactionData>>;dev.kord.common.entity.optional.Optional<kotlin.String>;kotlin.Boolean;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.MessageType;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageActivity>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageApplication>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.MessageReferenceData>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageFlags>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.StickerItemData>>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.MessageData?>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.MessageInteractionData>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.ComponentData>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.RoleSubscription>;dev.kord.common.entity.optional.OptionalInt){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/MessageData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/MessageData.hashCode|hashCode(){}[0]
    final fun plus(dev.kord.common.entity/DiscordPartialMessage): dev.kord.core.cache.data/MessageData // dev.kord.core.cache.data/MessageData.plus|plus(dev.kord.common.entity.DiscordPartialMessage){}[0]
    final fun plus(dev.kord.common.entity/Snowflake, dev.kord.common.entity/MessageReactionAddData): dev.kord.core.cache.data/MessageData // dev.kord.core.cache.data/MessageData.plus|plus(dev.kord.common.entity.Snowflake;dev.kord.common.entity.MessageReactionAddData){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/MessageData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/MessageData> { // dev.kord.core.cache.data/MessageData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/MessageData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/MessageData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/MessageData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/MessageData // dev.kord.core.cache.data/MessageData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/MessageData) // dev.kord.core.cache.data/MessageData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.MessageData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/MessageData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/MessageData.Companion.$childSerializers|{}$childSerializers[0]
        final val description // dev.kord.core.cache.data/MessageData.Companion.description|{}description[0]
            final fun <get-description>(): dev.kord.cache.api.data/DataDescription<dev.kord.core.cache.data/MessageData, dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/MessageData.Companion.description.<get-description>|<get-description>(){}[0]

        final fun from(dev.kord.common.entity/DiscordMessage): dev.kord.core.cache.data/MessageData // dev.kord.core.cache.data/MessageData.Companion.from|from(dev.kord.common.entity.DiscordMessage){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/MessageData> // dev.kord.core.cache.data/MessageData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/MessageInteractionData { // dev.kord.core.cache.data/MessageInteractionData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/InteractionType, kotlin/String, dev.kord.common.entity/Snowflake) // dev.kord.core.cache.data/MessageInteractionData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.InteractionType;kotlin.String;dev.kord.common.entity.Snowflake){}[0]

    final val id // dev.kord.core.cache.data/MessageInteractionData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/MessageInteractionData.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.core.cache.data/MessageInteractionData.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.cache.data/MessageInteractionData.name.<get-name>|<get-name>(){}[0]
    final val type // dev.kord.core.cache.data/MessageInteractionData.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/InteractionType // dev.kord.core.cache.data/MessageInteractionData.type.<get-type>|<get-type>(){}[0]
    final val user // dev.kord.core.cache.data/MessageInteractionData.user|{}user[0]
        final fun <get-user>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/MessageInteractionData.user.<get-user>|<get-user>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/MessageInteractionData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/InteractionType // dev.kord.core.cache.data/MessageInteractionData.component2|component2(){}[0]
    final fun component3(): kotlin/String // dev.kord.core.cache.data/MessageInteractionData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/MessageInteractionData.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/InteractionType = ..., kotlin/String = ..., dev.kord.common.entity/Snowflake = ...): dev.kord.core.cache.data/MessageInteractionData // dev.kord.core.cache.data/MessageInteractionData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.InteractionType;kotlin.String;dev.kord.common.entity.Snowflake){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/MessageInteractionData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/MessageInteractionData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/MessageInteractionData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/MessageInteractionData> { // dev.kord.core.cache.data/MessageInteractionData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/MessageInteractionData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/MessageInteractionData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/MessageInteractionData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/MessageInteractionData // dev.kord.core.cache.data/MessageInteractionData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/MessageInteractionData) // dev.kord.core.cache.data/MessageInteractionData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.MessageInteractionData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/MessageInteractionData.Companion|null[0]
        final fun from(dev.kord.common.entity/DiscordMessageInteraction): dev.kord.core.cache.data/MessageInteractionData // dev.kord.core.cache.data/MessageInteractionData.Companion.from|from(dev.kord.common.entity.DiscordMessageInteraction){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/MessageInteractionData> // dev.kord.core.cache.data/MessageInteractionData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/MessageReferenceData { // dev.kord.core.cache.data/MessageReferenceData|null[0]
    constructor <init>(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ...) // dev.kord.core.cache.data/MessageReferenceData.<init>|<init>(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake){}[0]

    final val channelId // dev.kord.core.cache.data/MessageReferenceData.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/MessageReferenceData.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val guildId // dev.kord.core.cache.data/MessageReferenceData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/MessageReferenceData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.core.cache.data/MessageReferenceData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/MessageReferenceData.id.<get-id>|<get-id>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/MessageReferenceData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/MessageReferenceData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/MessageReferenceData.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ...): dev.kord.core.cache.data/MessageReferenceData // dev.kord.core.cache.data/MessageReferenceData.copy|copy(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/MessageReferenceData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/MessageReferenceData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/MessageReferenceData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/MessageReferenceData> { // dev.kord.core.cache.data/MessageReferenceData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/MessageReferenceData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/MessageReferenceData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/MessageReferenceData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/MessageReferenceData // dev.kord.core.cache.data/MessageReferenceData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/MessageReferenceData) // dev.kord.core.cache.data/MessageReferenceData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.MessageReferenceData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/MessageReferenceData.Companion|null[0]
        final fun from(dev.kord.common.entity/DiscordMessageReference): dev.kord.core.cache.data/MessageReferenceData // dev.kord.core.cache.data/MessageReferenceData.Companion.from|from(dev.kord.common.entity.DiscordMessageReference){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/MessageReferenceData> // dev.kord.core.cache.data/MessageReferenceData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/OptionData { // dev.kord.core.cache.data/OptionData|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/CommandArgument<kotlin/Any?>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/CommandArgument<kotlin/Any?>>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/SubCommand>> = ..., dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.core.cache.data/OptionData.<init>|<init>(kotlin.String;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.CommandArgument<kotlin.Any?>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.CommandArgument<kotlin.Any?>>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.SubCommand>>;dev.kord.common.entity.optional.OptionalBoolean){}[0]

    final val focused // dev.kord.core.cache.data/OptionData.focused|{}focused[0]
        final fun <get-focused>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/OptionData.focused.<get-focused>|<get-focused>(){}[0]
    final val name // dev.kord.core.cache.data/OptionData.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.cache.data/OptionData.name.<get-name>|<get-name>(){}[0]
    final val subCommands // dev.kord.core.cache.data/OptionData.subCommands|{}subCommands[0]
        final fun <get-subCommands>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/SubCommand>> // dev.kord.core.cache.data/OptionData.subCommands.<get-subCommands>|<get-subCommands>(){}[0]
    final val value // dev.kord.core.cache.data/OptionData.value|{}value[0]
        final fun <get-value>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/CommandArgument<kotlin/Any?>> // dev.kord.core.cache.data/OptionData.value.<get-value>|<get-value>(){}[0]
    final val values // dev.kord.core.cache.data/OptionData.values|{}values[0]
        final fun <get-values>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/CommandArgument<kotlin/Any?>>> // dev.kord.core.cache.data/OptionData.values.<get-values>|<get-values>(){}[0]

    final fun component1(): kotlin/String // dev.kord.core.cache.data/OptionData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/CommandArgument<kotlin/Any?>> // dev.kord.core.cache.data/OptionData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/CommandArgument<kotlin/Any?>>> // dev.kord.core.cache.data/OptionData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/SubCommand>> // dev.kord.core.cache.data/OptionData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/OptionData.component5|component5(){}[0]
    final fun copy(kotlin/String = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/CommandArgument<kotlin/Any?>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/CommandArgument<kotlin/Any?>>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/SubCommand>> = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.core.cache.data/OptionData // dev.kord.core.cache.data/OptionData.copy|copy(kotlin.String;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.CommandArgument<kotlin.Any?>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.CommandArgument<kotlin.Any?>>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.SubCommand>>;dev.kord.common.entity.optional.OptionalBoolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/OptionData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/OptionData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/OptionData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/OptionData> { // dev.kord.core.cache.data/OptionData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/OptionData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/OptionData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/OptionData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/OptionData // dev.kord.core.cache.data/OptionData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/OptionData) // dev.kord.core.cache.data/OptionData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.OptionData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/OptionData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/OptionData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/Option): dev.kord.core.cache.data/OptionData // dev.kord.core.cache.data/OptionData.Companion.from|from(dev.kord.common.entity.Option){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/OptionData> // dev.kord.core.cache.data/OptionData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/PartialApplicationData : dev.kord.core.cache.data/BaseApplicationData { // dev.kord.core.cache.data/PartialApplicationData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/String?, kotlin/String, dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/String, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationFlags> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InstallParams> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...) // dev.kord.core.cache.data/PartialApplicationData.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String?;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.String;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ApplicationFlags>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.InstallParams>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]

    final val coverImage // dev.kord.core.cache.data/PartialApplicationData.coverImage|{}coverImage[0]
        final fun <get-coverImage>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/PartialApplicationData.coverImage.<get-coverImage>|<get-coverImage>(){}[0]
    final val customInstallUrl // dev.kord.core.cache.data/PartialApplicationData.customInstallUrl|{}customInstallUrl[0]
        final fun <get-customInstallUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/PartialApplicationData.customInstallUrl.<get-customInstallUrl>|<get-customInstallUrl>(){}[0]
    final val description // dev.kord.core.cache.data/PartialApplicationData.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.core.cache.data/PartialApplicationData.description.<get-description>|<get-description>(){}[0]
    final val flags // dev.kord.core.cache.data/PartialApplicationData.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationFlags> // dev.kord.core.cache.data/PartialApplicationData.flags.<get-flags>|<get-flags>(){}[0]
    final val guildId // dev.kord.core.cache.data/PartialApplicationData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/PartialApplicationData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val icon // dev.kord.core.cache.data/PartialApplicationData.icon|{}icon[0]
        final fun <get-icon>(): kotlin/String? // dev.kord.core.cache.data/PartialApplicationData.icon.<get-icon>|<get-icon>(){}[0]
    final val id // dev.kord.core.cache.data/PartialApplicationData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/PartialApplicationData.id.<get-id>|<get-id>(){}[0]
    final val installParams // dev.kord.core.cache.data/PartialApplicationData.installParams|{}installParams[0]
        final fun <get-installParams>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InstallParams> // dev.kord.core.cache.data/PartialApplicationData.installParams.<get-installParams>|<get-installParams>(){}[0]
    final val name // dev.kord.core.cache.data/PartialApplicationData.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.cache.data/PartialApplicationData.name.<get-name>|<get-name>(){}[0]
    final val ownerId // dev.kord.core.cache.data/PartialApplicationData.ownerId|{}ownerId[0]
        final fun <get-ownerId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/PartialApplicationData.ownerId.<get-ownerId>|<get-ownerId>(){}[0]
    final val primarySkuId // dev.kord.core.cache.data/PartialApplicationData.primarySkuId|{}primarySkuId[0]
        final fun <get-primarySkuId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/PartialApplicationData.primarySkuId.<get-primarySkuId>|<get-primarySkuId>(){}[0]
    final val privacyPolicyUrl // dev.kord.core.cache.data/PartialApplicationData.privacyPolicyUrl|{}privacyPolicyUrl[0]
        final fun <get-privacyPolicyUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/PartialApplicationData.privacyPolicyUrl.<get-privacyPolicyUrl>|<get-privacyPolicyUrl>(){}[0]
    final val roleConnectionsVerificationUrl // dev.kord.core.cache.data/PartialApplicationData.roleConnectionsVerificationUrl|{}roleConnectionsVerificationUrl[0]
        final fun <get-roleConnectionsVerificationUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/PartialApplicationData.roleConnectionsVerificationUrl.<get-roleConnectionsVerificationUrl>|<get-roleConnectionsVerificationUrl>(){}[0]
    final val rpcOrigins // dev.kord.core.cache.data/PartialApplicationData.rpcOrigins|{}rpcOrigins[0]
        final fun <get-rpcOrigins>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.core.cache.data/PartialApplicationData.rpcOrigins.<get-rpcOrigins>|<get-rpcOrigins>(){}[0]
    final val slug // dev.kord.core.cache.data/PartialApplicationData.slug|{}slug[0]
        final fun <get-slug>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/PartialApplicationData.slug.<get-slug>|<get-slug>(){}[0]
    final val tags // dev.kord.core.cache.data/PartialApplicationData.tags|{}tags[0]
        final fun <get-tags>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.core.cache.data/PartialApplicationData.tags.<get-tags>|<get-tags>(){}[0]
    final val termsOfServiceUrl // dev.kord.core.cache.data/PartialApplicationData.termsOfServiceUrl|{}termsOfServiceUrl[0]
        final fun <get-termsOfServiceUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/PartialApplicationData.termsOfServiceUrl.<get-termsOfServiceUrl>|<get-termsOfServiceUrl>(){}[0]
    final val verifyKey // dev.kord.core.cache.data/PartialApplicationData.verifyKey|{}verifyKey[0]
        final fun <get-verifyKey>(): kotlin/String // dev.kord.core.cache.data/PartialApplicationData.verifyKey.<get-verifyKey>|<get-verifyKey>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/PartialApplicationData.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/PartialApplicationData.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/PartialApplicationData.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/PartialApplicationData.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/PartialApplicationData.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationFlags> // dev.kord.core.cache.data/PartialApplicationData.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.core.cache.data/PartialApplicationData.component15|component15(){}[0]
    final fun component16(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InstallParams> // dev.kord.core.cache.data/PartialApplicationData.component16|component16(){}[0]
    final fun component17(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/PartialApplicationData.component17|component17(){}[0]
    final fun component18(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/PartialApplicationData.component18|component18(){}[0]
    final fun component2(): kotlin/String // dev.kord.core.cache.data/PartialApplicationData.component2|component2(){}[0]
    final fun component3(): kotlin/String? // dev.kord.core.cache.data/PartialApplicationData.component3|component3(){}[0]
    final fun component4(): kotlin/String // dev.kord.core.cache.data/PartialApplicationData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.core.cache.data/PartialApplicationData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/PartialApplicationData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/PartialApplicationData.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/PartialApplicationData.component8|component8(){}[0]
    final fun component9(): kotlin/String // dev.kord.core.cache.data/PartialApplicationData.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., kotlin/String? = ..., kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/String = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationFlags> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InstallParams> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...): dev.kord.core.cache.data/PartialApplicationData // dev.kord.core.cache.data/PartialApplicationData.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String?;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.String;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ApplicationFlags>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.InstallParams>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/PartialApplicationData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/PartialApplicationData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/PartialApplicationData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/PartialApplicationData> { // dev.kord.core.cache.data/PartialApplicationData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/PartialApplicationData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/PartialApplicationData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/PartialApplicationData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/PartialApplicationData // dev.kord.core.cache.data/PartialApplicationData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/PartialApplicationData) // dev.kord.core.cache.data/PartialApplicationData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.PartialApplicationData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/PartialApplicationData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/PartialApplicationData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordPartialApplication): dev.kord.core.cache.data/PartialApplicationData // dev.kord.core.cache.data/PartialApplicationData.Companion.from|from(dev.kord.common.entity.DiscordPartialApplication){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/PartialApplicationData> // dev.kord.core.cache.data/PartialApplicationData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/PartialGuildData { // dev.kord.core.cache.data/PartialGuildData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/String? = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> = ..., kotlin.collections/List<dev.kord.common.entity/GuildFeature>, dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/WelcomeScreenData> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/NsfwLevel> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/VerificationLevel> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/StageInstanceData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/StickerData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/GuildScheduledEventData>> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.core.cache.data/PartialGuildData.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions>;kotlin.collections.List<dev.kord.common.entity.GuildFeature>;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.WelcomeScreenData>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.NsfwLevel>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.VerificationLevel>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.StageInstanceData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.StickerData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.GuildScheduledEventData>>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalBoolean){}[0]

    final val approximateMemberCount // dev.kord.core.cache.data/PartialGuildData.approximateMemberCount|{}approximateMemberCount[0]
        final fun <get-approximateMemberCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/PartialGuildData.approximateMemberCount.<get-approximateMemberCount>|<get-approximateMemberCount>(){}[0]
    final val approximatePresenceCount // dev.kord.core.cache.data/PartialGuildData.approximatePresenceCount|{}approximatePresenceCount[0]
        final fun <get-approximatePresenceCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/PartialGuildData.approximatePresenceCount.<get-approximatePresenceCount>|<get-approximatePresenceCount>(){}[0]
    final val banner // dev.kord.core.cache.data/PartialGuildData.banner|{}banner[0]
        final fun <get-banner>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/PartialGuildData.banner.<get-banner>|<get-banner>(){}[0]
    final val description // dev.kord.core.cache.data/PartialGuildData.description|{}description[0]
        final fun <get-description>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/PartialGuildData.description.<get-description>|<get-description>(){}[0]
    final val features // dev.kord.core.cache.data/PartialGuildData.features|{}features[0]
        final fun <get-features>(): kotlin.collections/List<dev.kord.common.entity/GuildFeature> // dev.kord.core.cache.data/PartialGuildData.features.<get-features>|<get-features>(){}[0]
    final val guildScheduledEvents // dev.kord.core.cache.data/PartialGuildData.guildScheduledEvents|{}guildScheduledEvents[0]
        final fun <get-guildScheduledEvents>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/GuildScheduledEventData>> // dev.kord.core.cache.data/PartialGuildData.guildScheduledEvents.<get-guildScheduledEvents>|<get-guildScheduledEvents>(){}[0]
    final val icon // dev.kord.core.cache.data/PartialGuildData.icon|{}icon[0]
        final fun <get-icon>(): kotlin/String? // dev.kord.core.cache.data/PartialGuildData.icon.<get-icon>|<get-icon>(){}[0]
    final val id // dev.kord.core.cache.data/PartialGuildData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/PartialGuildData.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.core.cache.data/PartialGuildData.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.cache.data/PartialGuildData.name.<get-name>|<get-name>(){}[0]
    final val nsfwLevel // dev.kord.core.cache.data/PartialGuildData.nsfwLevel|{}nsfwLevel[0]
        final fun <get-nsfwLevel>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/NsfwLevel> // dev.kord.core.cache.data/PartialGuildData.nsfwLevel.<get-nsfwLevel>|<get-nsfwLevel>(){}[0]
    final val owner // dev.kord.core.cache.data/PartialGuildData.owner|{}owner[0]
        final fun <get-owner>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/PartialGuildData.owner.<get-owner>|<get-owner>(){}[0]
    final val permissions // dev.kord.core.cache.data/PartialGuildData.permissions|{}permissions[0]
        final fun <get-permissions>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> // dev.kord.core.cache.data/PartialGuildData.permissions.<get-permissions>|<get-permissions>(){}[0]
    final val premiumProgressBarEnabled // dev.kord.core.cache.data/PartialGuildData.premiumProgressBarEnabled|{}premiumProgressBarEnabled[0]
        final fun <get-premiumProgressBarEnabled>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/PartialGuildData.premiumProgressBarEnabled.<get-premiumProgressBarEnabled>|<get-premiumProgressBarEnabled>(){}[0]
    final val splash // dev.kord.core.cache.data/PartialGuildData.splash|{}splash[0]
        final fun <get-splash>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/PartialGuildData.splash.<get-splash>|<get-splash>(){}[0]
    final val stageInstances // dev.kord.core.cache.data/PartialGuildData.stageInstances|{}stageInstances[0]
        final fun <get-stageInstances>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/StageInstanceData>> // dev.kord.core.cache.data/PartialGuildData.stageInstances.<get-stageInstances>|<get-stageInstances>(){}[0]
    final val stickers // dev.kord.core.cache.data/PartialGuildData.stickers|{}stickers[0]
        final fun <get-stickers>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/StickerData>> // dev.kord.core.cache.data/PartialGuildData.stickers.<get-stickers>|<get-stickers>(){}[0]
    final val vanityUrlCode // dev.kord.core.cache.data/PartialGuildData.vanityUrlCode|{}vanityUrlCode[0]
        final fun <get-vanityUrlCode>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/PartialGuildData.vanityUrlCode.<get-vanityUrlCode>|<get-vanityUrlCode>(){}[0]
    final val verificationLevel // dev.kord.core.cache.data/PartialGuildData.verificationLevel|{}verificationLevel[0]
        final fun <get-verificationLevel>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/VerificationLevel> // dev.kord.core.cache.data/PartialGuildData.verificationLevel.<get-verificationLevel>|<get-verificationLevel>(){}[0]
    final val welcomeScreen // dev.kord.core.cache.data/PartialGuildData.welcomeScreen|{}welcomeScreen[0]
        final fun <get-welcomeScreen>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/WelcomeScreenData> // dev.kord.core.cache.data/PartialGuildData.welcomeScreen.<get-welcomeScreen>|<get-welcomeScreen>(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/PartialGuildData> { // dev.kord.core.cache.data/PartialGuildData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/PartialGuildData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/PartialGuildData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/PartialGuildData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/PartialGuildData // dev.kord.core.cache.data/PartialGuildData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/PartialGuildData) // dev.kord.core.cache.data/PartialGuildData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.PartialGuildData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/PartialGuildData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/PartialGuildData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordPartialGuild): dev.kord.core.cache.data/PartialGuildData // dev.kord.core.cache.data/PartialGuildData.Companion.from|from(dev.kord.common.entity.DiscordPartialGuild){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/PartialGuildData> // dev.kord.core.cache.data/PartialGuildData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/PermissionOverwriteData { // dev.kord.core.cache.data/PermissionOverwriteData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/OverwriteType, dev.kord.common.entity/Permissions, dev.kord.common.entity/Permissions) // dev.kord.core.cache.data/PermissionOverwriteData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.OverwriteType;dev.kord.common.entity.Permissions;dev.kord.common.entity.Permissions){}[0]

    final val allowed // dev.kord.core.cache.data/PermissionOverwriteData.allowed|{}allowed[0]
        final fun <get-allowed>(): dev.kord.common.entity/Permissions // dev.kord.core.cache.data/PermissionOverwriteData.allowed.<get-allowed>|<get-allowed>(){}[0]
    final val denied // dev.kord.core.cache.data/PermissionOverwriteData.denied|{}denied[0]
        final fun <get-denied>(): dev.kord.common.entity/Permissions // dev.kord.core.cache.data/PermissionOverwriteData.denied.<get-denied>|<get-denied>(){}[0]
    final val id // dev.kord.core.cache.data/PermissionOverwriteData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/PermissionOverwriteData.id.<get-id>|<get-id>(){}[0]
    final val type // dev.kord.core.cache.data/PermissionOverwriteData.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/OverwriteType // dev.kord.core.cache.data/PermissionOverwriteData.type.<get-type>|<get-type>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/PermissionOverwriteData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/OverwriteType // dev.kord.core.cache.data/PermissionOverwriteData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Permissions // dev.kord.core.cache.data/PermissionOverwriteData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity/Permissions // dev.kord.core.cache.data/PermissionOverwriteData.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/OverwriteType = ..., dev.kord.common.entity/Permissions = ..., dev.kord.common.entity/Permissions = ...): dev.kord.core.cache.data/PermissionOverwriteData // dev.kord.core.cache.data/PermissionOverwriteData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.OverwriteType;dev.kord.common.entity.Permissions;dev.kord.common.entity.Permissions){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/PermissionOverwriteData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/PermissionOverwriteData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/PermissionOverwriteData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/PermissionOverwriteData> { // dev.kord.core.cache.data/PermissionOverwriteData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/PermissionOverwriteData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/PermissionOverwriteData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/PermissionOverwriteData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/PermissionOverwriteData // dev.kord.core.cache.data/PermissionOverwriteData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/PermissionOverwriteData) // dev.kord.core.cache.data/PermissionOverwriteData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.PermissionOverwriteData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/PermissionOverwriteData.Companion|null[0]
        final fun from(dev.kord.common.entity/Overwrite): dev.kord.core.cache.data/PermissionOverwriteData // dev.kord.core.cache.data/PermissionOverwriteData.Companion.from|from(dev.kord.common.entity.Overwrite){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/PermissionOverwriteData> // dev.kord.core.cache.data/PermissionOverwriteData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/PresenceData { // dev.kord.core.cache.data/PresenceData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/PresenceStatus, kotlin.collections/List<dev.kord.core.cache.data/ActivityData>, dev.kord.core.cache.data/ClientStatusData) // dev.kord.core.cache.data/PresenceData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.PresenceStatus;kotlin.collections.List<dev.kord.core.cache.data.ActivityData>;dev.kord.core.cache.data.ClientStatusData){}[0]

    final val activities // dev.kord.core.cache.data/PresenceData.activities|{}activities[0]
        final fun <get-activities>(): kotlin.collections/List<dev.kord.core.cache.data/ActivityData> // dev.kord.core.cache.data/PresenceData.activities.<get-activities>|<get-activities>(){}[0]
    final val clientStatus // dev.kord.core.cache.data/PresenceData.clientStatus|{}clientStatus[0]
        final fun <get-clientStatus>(): dev.kord.core.cache.data/ClientStatusData // dev.kord.core.cache.data/PresenceData.clientStatus.<get-clientStatus>|<get-clientStatus>(){}[0]
    final val guildId // dev.kord.core.cache.data/PresenceData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/PresenceData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val status // dev.kord.core.cache.data/PresenceData.status|{}status[0]
        final fun <get-status>(): dev.kord.common.entity/PresenceStatus // dev.kord.core.cache.data/PresenceData.status.<get-status>|<get-status>(){}[0]
    final val userId // dev.kord.core.cache.data/PresenceData.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/PresenceData.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/PresenceData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/PresenceData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/PresenceStatus // dev.kord.core.cache.data/PresenceData.component3|component3(){}[0]
    final fun component4(): kotlin.collections/List<dev.kord.core.cache.data/ActivityData> // dev.kord.core.cache.data/PresenceData.component4|component4(){}[0]
    final fun component5(): dev.kord.core.cache.data/ClientStatusData // dev.kord.core.cache.data/PresenceData.component5|component5(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/PresenceStatus = ..., kotlin.collections/List<dev.kord.core.cache.data/ActivityData> = ..., dev.kord.core.cache.data/ClientStatusData = ...): dev.kord.core.cache.data/PresenceData // dev.kord.core.cache.data/PresenceData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.PresenceStatus;kotlin.collections.List<dev.kord.core.cache.data.ActivityData>;dev.kord.core.cache.data.ClientStatusData){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/PresenceData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/PresenceData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/PresenceData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/PresenceData> { // dev.kord.core.cache.data/PresenceData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/PresenceData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/PresenceData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/PresenceData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/PresenceData // dev.kord.core.cache.data/PresenceData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/PresenceData) // dev.kord.core.cache.data/PresenceData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.PresenceData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/PresenceData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/PresenceData.Companion.$childSerializers|{}$childSerializers[0]
        final val description // dev.kord.core.cache.data/PresenceData.Companion.description|{}description[0]
            final fun <get-description>(): dev.kord.cache.api.data/DataDescription<dev.kord.core.cache.data/PresenceData, kotlin/String> // dev.kord.core.cache.data/PresenceData.Companion.description.<get-description>|<get-description>(){}[0]

        final fun from(dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordPresenceUpdate): dev.kord.core.cache.data/PresenceData // dev.kord.core.cache.data/PresenceData.Companion.from|from(dev.kord.common.entity.Snowflake;dev.kord.common.entity.DiscordPresenceUpdate){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/PresenceData> // dev.kord.core.cache.data/PresenceData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/ReactionData { // dev.kord.core.cache.data/ReactionData|null[0]
    constructor <init>(kotlin/Int, kotlin/Boolean, dev.kord.common.entity/Snowflake? = ..., kotlin/String? = ..., kotlin/Boolean) // dev.kord.core.cache.data/ReactionData.<init>|<init>(kotlin.Int;kotlin.Boolean;dev.kord.common.entity.Snowflake?;kotlin.String?;kotlin.Boolean){}[0]

    final val count // dev.kord.core.cache.data/ReactionData.count|{}count[0]
        final fun <get-count>(): kotlin/Int // dev.kord.core.cache.data/ReactionData.count.<get-count>|<get-count>(){}[0]
    final val emojiAnimated // dev.kord.core.cache.data/ReactionData.emojiAnimated|{}emojiAnimated[0]
        final fun <get-emojiAnimated>(): kotlin/Boolean // dev.kord.core.cache.data/ReactionData.emojiAnimated.<get-emojiAnimated>|<get-emojiAnimated>(){}[0]
    final val emojiId // dev.kord.core.cache.data/ReactionData.emojiId|{}emojiId[0]
        final fun <get-emojiId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/ReactionData.emojiId.<get-emojiId>|<get-emojiId>(){}[0]
    final val emojiName // dev.kord.core.cache.data/ReactionData.emojiName|{}emojiName[0]
        final fun <get-emojiName>(): kotlin/String? // dev.kord.core.cache.data/ReactionData.emojiName.<get-emojiName>|<get-emojiName>(){}[0]
    final val me // dev.kord.core.cache.data/ReactionData.me|{}me[0]
        final fun <get-me>(): kotlin/Boolean // dev.kord.core.cache.data/ReactionData.me.<get-me>|<get-me>(){}[0]

    final fun component1(): kotlin/Int // dev.kord.core.cache.data/ReactionData.component1|component1(){}[0]
    final fun component2(): kotlin/Boolean // dev.kord.core.cache.data/ReactionData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/ReactionData.component3|component3(){}[0]
    final fun component4(): kotlin/String? // dev.kord.core.cache.data/ReactionData.component4|component4(){}[0]
    final fun component5(): kotlin/Boolean // dev.kord.core.cache.data/ReactionData.component5|component5(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/Boolean = ..., dev.kord.common.entity/Snowflake? = ..., kotlin/String? = ..., kotlin/Boolean = ...): dev.kord.core.cache.data/ReactionData // dev.kord.core.cache.data/ReactionData.copy|copy(kotlin.Int;kotlin.Boolean;dev.kord.common.entity.Snowflake?;kotlin.String?;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/ReactionData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/ReactionData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/ReactionData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/ReactionData> { // dev.kord.core.cache.data/ReactionData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/ReactionData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/ReactionData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/ReactionData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/ReactionData // dev.kord.core.cache.data/ReactionData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/ReactionData) // dev.kord.core.cache.data/ReactionData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.ReactionData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/ReactionData.Companion|null[0]
        final fun from(dev.kord.common.entity/Reaction): dev.kord.core.cache.data/ReactionData // dev.kord.core.cache.data/ReactionData.Companion.from|from(dev.kord.common.entity.Reaction){}[0]
        final fun from(kotlin/Int, kotlin/Boolean, dev.kord.common.entity/DiscordPartialEmoji): dev.kord.core.cache.data/ReactionData // dev.kord.core.cache.data/ReactionData.Companion.from|from(kotlin.Int;kotlin.Boolean;dev.kord.common.entity.DiscordPartialEmoji){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/ReactionData> // dev.kord.core.cache.data/ReactionData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/ReactionRemoveEmojiData { // dev.kord.core.cache.data/ReactionRemoveEmojiData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/RemovedReactionData) // dev.kord.core.cache.data/ReactionRemoveEmojiData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.core.cache.data.RemovedReactionData){}[0]

    final val channelId // dev.kord.core.cache.data/ReactionRemoveEmojiData.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/ReactionRemoveEmojiData.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val emoji // dev.kord.core.cache.data/ReactionRemoveEmojiData.emoji|{}emoji[0]
        final fun <get-emoji>(): dev.kord.core.cache.data/RemovedReactionData // dev.kord.core.cache.data/ReactionRemoveEmojiData.emoji.<get-emoji>|<get-emoji>(){}[0]
    final val guildId // dev.kord.core.cache.data/ReactionRemoveEmojiData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/ReactionRemoveEmojiData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val messageId // dev.kord.core.cache.data/ReactionRemoveEmojiData.messageId|{}messageId[0]
        final fun <get-messageId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/ReactionRemoveEmojiData.messageId.<get-messageId>|<get-messageId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/ReactionRemoveEmojiData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/ReactionRemoveEmojiData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/ReactionRemoveEmojiData.component3|component3(){}[0]
    final fun component4(): dev.kord.core.cache.data/RemovedReactionData // dev.kord.core.cache.data/ReactionRemoveEmojiData.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.core.cache.data/RemovedReactionData = ...): dev.kord.core.cache.data/ReactionRemoveEmojiData // dev.kord.core.cache.data/ReactionRemoveEmojiData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.core.cache.data.RemovedReactionData){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/ReactionRemoveEmojiData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/ReactionRemoveEmojiData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/ReactionRemoveEmojiData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/ReactionRemoveEmojiData> { // dev.kord.core.cache.data/ReactionRemoveEmojiData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/ReactionRemoveEmojiData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/ReactionRemoveEmojiData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/ReactionRemoveEmojiData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/ReactionRemoveEmojiData // dev.kord.core.cache.data/ReactionRemoveEmojiData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/ReactionRemoveEmojiData) // dev.kord.core.cache.data/ReactionRemoveEmojiData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.ReactionRemoveEmojiData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/ReactionRemoveEmojiData.Companion|null[0]
        final fun from(dev.kord.gateway/DiscordRemovedEmoji): dev.kord.core.cache.data/ReactionRemoveEmojiData // dev.kord.core.cache.data/ReactionRemoveEmojiData.Companion.from|from(dev.kord.gateway.DiscordRemovedEmoji){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/ReactionRemoveEmojiData> // dev.kord.core.cache.data/ReactionRemoveEmojiData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/RegionData { // dev.kord.core.cache.data/RegionData|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/String, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean) // dev.kord.core.cache.data/RegionData.<init>|<init>(kotlin.String;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.String;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean){}[0]

    final val custom // dev.kord.core.cache.data/RegionData.custom|{}custom[0]
        final fun <get-custom>(): kotlin/Boolean // dev.kord.core.cache.data/RegionData.custom.<get-custom>|<get-custom>(){}[0]
    final val deprecated // dev.kord.core.cache.data/RegionData.deprecated|{}deprecated[0]
        final fun <get-deprecated>(): kotlin/Boolean // dev.kord.core.cache.data/RegionData.deprecated.<get-deprecated>|<get-deprecated>(){}[0]
    final val guildId // dev.kord.core.cache.data/RegionData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/RegionData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.core.cache.data/RegionData.id|{}id[0]
        final fun <get-id>(): kotlin/String // dev.kord.core.cache.data/RegionData.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.core.cache.data/RegionData.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.cache.data/RegionData.name.<get-name>|<get-name>(){}[0]
    final val optimal // dev.kord.core.cache.data/RegionData.optimal|{}optimal[0]
        final fun <get-optimal>(): kotlin/Boolean // dev.kord.core.cache.data/RegionData.optimal.<get-optimal>|<get-optimal>(){}[0]

    final fun component1(): kotlin/String // dev.kord.core.cache.data/RegionData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/RegionData.component2|component2(){}[0]
    final fun component3(): kotlin/String // dev.kord.core.cache.data/RegionData.component3|component3(){}[0]
    final fun component4(): kotlin/Boolean // dev.kord.core.cache.data/RegionData.component4|component4(){}[0]
    final fun component5(): kotlin/Boolean // dev.kord.core.cache.data/RegionData.component5|component5(){}[0]
    final fun component6(): kotlin/Boolean // dev.kord.core.cache.data/RegionData.component6|component6(){}[0]
    final fun copy(kotlin/String = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/String = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ...): dev.kord.core.cache.data/RegionData // dev.kord.core.cache.data/RegionData.copy|copy(kotlin.String;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.String;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/RegionData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/RegionData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/RegionData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/RegionData> { // dev.kord.core.cache.data/RegionData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/RegionData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/RegionData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/RegionData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/RegionData // dev.kord.core.cache.data/RegionData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/RegionData) // dev.kord.core.cache.data/RegionData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.RegionData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/RegionData.Companion|null[0]
        final fun from(dev.kord.common.entity.optional/OptionalSnowflake, dev.kord.common.entity/DiscordVoiceRegion): dev.kord.core.cache.data/RegionData // dev.kord.core.cache.data/RegionData.Companion.from|from(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.DiscordVoiceRegion){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/RegionData> // dev.kord.core.cache.data/RegionData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/RemovedReactionData { // dev.kord.core.cache.data/RemovedReactionData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake? = ..., kotlin/String?) // dev.kord.core.cache.data/RemovedReactionData.<init>|<init>(dev.kord.common.entity.Snowflake?;kotlin.String?){}[0]

    final val id // dev.kord.core.cache.data/RemovedReactionData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/RemovedReactionData.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.core.cache.data/RemovedReactionData.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.core.cache.data/RemovedReactionData.name.<get-name>|<get-name>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/RemovedReactionData.component1|component1(){}[0]
    final fun component2(): kotlin/String? // dev.kord.core.cache.data/RemovedReactionData.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake? = ..., kotlin/String? = ...): dev.kord.core.cache.data/RemovedReactionData // dev.kord.core.cache.data/RemovedReactionData.copy|copy(dev.kord.common.entity.Snowflake?;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/RemovedReactionData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/RemovedReactionData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/RemovedReactionData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/RemovedReactionData> { // dev.kord.core.cache.data/RemovedReactionData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/RemovedReactionData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/RemovedReactionData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/RemovedReactionData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/RemovedReactionData // dev.kord.core.cache.data/RemovedReactionData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/RemovedReactionData) // dev.kord.core.cache.data/RemovedReactionData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.RemovedReactionData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/RemovedReactionData.Companion|null[0]
        final fun from(dev.kord.gateway/DiscordRemovedReactionEmoji): dev.kord.core.cache.data/RemovedReactionData // dev.kord.core.cache.data/RemovedReactionData.Companion.from|from(dev.kord.gateway.DiscordRemovedReactionEmoji){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/RemovedReactionData> // dev.kord.core.cache.data/RemovedReactionData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/ResolvedObjectsData { // dev.kord.core.cache.data/ResolvedObjectsData|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/MemberData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/UserData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/RoleData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/ChannelData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/MessageData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/AttachmentData>> = ...) // dev.kord.core.cache.data/ResolvedObjectsData.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.entity.Snowflake,dev.kord.core.cache.data.MemberData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.entity.Snowflake,dev.kord.core.cache.data.UserData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.entity.Snowflake,dev.kord.core.cache.data.RoleData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.entity.Snowflake,dev.kord.core.cache.data.ChannelData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.entity.Snowflake,dev.kord.core.cache.data.MessageData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.entity.Snowflake,dev.kord.core.cache.data.AttachmentData>>){}[0]

    final val attachments // dev.kord.core.cache.data/ResolvedObjectsData.attachments|{}attachments[0]
        final fun <get-attachments>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/AttachmentData>> // dev.kord.core.cache.data/ResolvedObjectsData.attachments.<get-attachments>|<get-attachments>(){}[0]
    final val channels // dev.kord.core.cache.data/ResolvedObjectsData.channels|{}channels[0]
        final fun <get-channels>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/ChannelData>> // dev.kord.core.cache.data/ResolvedObjectsData.channels.<get-channels>|<get-channels>(){}[0]
    final val members // dev.kord.core.cache.data/ResolvedObjectsData.members|{}members[0]
        final fun <get-members>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/MemberData>> // dev.kord.core.cache.data/ResolvedObjectsData.members.<get-members>|<get-members>(){}[0]
    final val messages // dev.kord.core.cache.data/ResolvedObjectsData.messages|{}messages[0]
        final fun <get-messages>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/MessageData>> // dev.kord.core.cache.data/ResolvedObjectsData.messages.<get-messages>|<get-messages>(){}[0]
    final val roles // dev.kord.core.cache.data/ResolvedObjectsData.roles|{}roles[0]
        final fun <get-roles>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/RoleData>> // dev.kord.core.cache.data/ResolvedObjectsData.roles.<get-roles>|<get-roles>(){}[0]
    final val users // dev.kord.core.cache.data/ResolvedObjectsData.users|{}users[0]
        final fun <get-users>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/UserData>> // dev.kord.core.cache.data/ResolvedObjectsData.users.<get-users>|<get-users>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/MemberData>> // dev.kord.core.cache.data/ResolvedObjectsData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/UserData>> // dev.kord.core.cache.data/ResolvedObjectsData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/RoleData>> // dev.kord.core.cache.data/ResolvedObjectsData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/ChannelData>> // dev.kord.core.cache.data/ResolvedObjectsData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/MessageData>> // dev.kord.core.cache.data/ResolvedObjectsData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/AttachmentData>> // dev.kord.core.cache.data/ResolvedObjectsData.component6|component6(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/MemberData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/UserData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/RoleData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/ChannelData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/MessageData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/AttachmentData>> = ...): dev.kord.core.cache.data/ResolvedObjectsData // dev.kord.core.cache.data/ResolvedObjectsData.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.entity.Snowflake,dev.kord.core.cache.data.MemberData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.entity.Snowflake,dev.kord.core.cache.data.UserData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.entity.Snowflake,dev.kord.core.cache.data.RoleData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.entity.Snowflake,dev.kord.core.cache.data.ChannelData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.entity.Snowflake,dev.kord.core.cache.data.MessageData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.entity.Snowflake,dev.kord.core.cache.data.AttachmentData>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/ResolvedObjectsData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/ResolvedObjectsData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/ResolvedObjectsData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/ResolvedObjectsData> { // dev.kord.core.cache.data/ResolvedObjectsData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/ResolvedObjectsData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/ResolvedObjectsData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/ResolvedObjectsData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/ResolvedObjectsData // dev.kord.core.cache.data/ResolvedObjectsData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/ResolvedObjectsData) // dev.kord.core.cache.data/ResolvedObjectsData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.ResolvedObjectsData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/ResolvedObjectsData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/ResolvedObjectsData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/ResolvedObjects, dev.kord.common.entity/Snowflake?): dev.kord.core.cache.data/ResolvedObjectsData // dev.kord.core.cache.data/ResolvedObjectsData.Companion.from|from(dev.kord.common.entity.ResolvedObjects;dev.kord.common.entity.Snowflake?){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/ResolvedObjectsData> // dev.kord.core.cache.data/ResolvedObjectsData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/RoleData { // dev.kord.core.cache.data/RoleData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Int, kotlin/Boolean, dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlin/Int, dev.kord.common.entity/Permissions, kotlin/Boolean, kotlin/Boolean, dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/RoleTagsData> = ..., dev.kord.common.entity/RoleFlags) // dev.kord.core.cache.data/RoleData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Int;kotlin.Boolean;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlin.Int;dev.kord.common.entity.Permissions;kotlin.Boolean;kotlin.Boolean;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.RoleTagsData>;dev.kord.common.entity.RoleFlags){}[0]

    final val color // dev.kord.core.cache.data/RoleData.color|{}color[0]
        final fun <get-color>(): kotlin/Int // dev.kord.core.cache.data/RoleData.color.<get-color>|<get-color>(){}[0]
    final val flags // dev.kord.core.cache.data/RoleData.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity/RoleFlags // dev.kord.core.cache.data/RoleData.flags.<get-flags>|<get-flags>(){}[0]
    final val guildId // dev.kord.core.cache.data/RoleData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/RoleData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val hoisted // dev.kord.core.cache.data/RoleData.hoisted|{}hoisted[0]
        final fun <get-hoisted>(): kotlin/Boolean // dev.kord.core.cache.data/RoleData.hoisted.<get-hoisted>|<get-hoisted>(){}[0]
    final val icon // dev.kord.core.cache.data/RoleData.icon|{}icon[0]
        final fun <get-icon>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/RoleData.icon.<get-icon>|<get-icon>(){}[0]
    final val id // dev.kord.core.cache.data/RoleData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/RoleData.id.<get-id>|<get-id>(){}[0]
    final val managed // dev.kord.core.cache.data/RoleData.managed|{}managed[0]
        final fun <get-managed>(): kotlin/Boolean // dev.kord.core.cache.data/RoleData.managed.<get-managed>|<get-managed>(){}[0]
    final val mentionable // dev.kord.core.cache.data/RoleData.mentionable|{}mentionable[0]
        final fun <get-mentionable>(): kotlin/Boolean // dev.kord.core.cache.data/RoleData.mentionable.<get-mentionable>|<get-mentionable>(){}[0]
    final val name // dev.kord.core.cache.data/RoleData.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.cache.data/RoleData.name.<get-name>|<get-name>(){}[0]
    final val permissions // dev.kord.core.cache.data/RoleData.permissions|{}permissions[0]
        final fun <get-permissions>(): dev.kord.common.entity/Permissions // dev.kord.core.cache.data/RoleData.permissions.<get-permissions>|<get-permissions>(){}[0]
    final val position // dev.kord.core.cache.data/RoleData.position|{}position[0]
        final fun <get-position>(): kotlin/Int // dev.kord.core.cache.data/RoleData.position.<get-position>|<get-position>(){}[0]
    final val tags // dev.kord.core.cache.data/RoleData.tags|{}tags[0]
        final fun <get-tags>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/RoleTagsData> // dev.kord.core.cache.data/RoleData.tags.<get-tags>|<get-tags>(){}[0]
    final val unicodeEmoji // dev.kord.core.cache.data/RoleData.unicodeEmoji|{}unicodeEmoji[0]
        final fun <get-unicodeEmoji>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/RoleData.unicodeEmoji.<get-unicodeEmoji>|<get-unicodeEmoji>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/RoleData.component1|component1(){}[0]
    final fun component10(): kotlin/Boolean // dev.kord.core.cache.data/RoleData.component10|component10(){}[0]
    final fun component11(): kotlin/Boolean // dev.kord.core.cache.data/RoleData.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/RoleTagsData> // dev.kord.core.cache.data/RoleData.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity/RoleFlags // dev.kord.core.cache.data/RoleData.component13|component13(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/RoleData.component2|component2(){}[0]
    final fun component3(): kotlin/String // dev.kord.core.cache.data/RoleData.component3|component3(){}[0]
    final fun component4(): kotlin/Int // dev.kord.core.cache.data/RoleData.component4|component4(){}[0]
    final fun component5(): kotlin/Boolean // dev.kord.core.cache.data/RoleData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/RoleData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/RoleData.component7|component7(){}[0]
    final fun component8(): kotlin/Int // dev.kord.core.cache.data/RoleData.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity/Permissions // dev.kord.core.cache.data/RoleData.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., kotlin/Int = ..., kotlin/Boolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlin/Int = ..., dev.kord.common.entity/Permissions = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/RoleTagsData> = ..., dev.kord.common.entity/RoleFlags = ...): dev.kord.core.cache.data/RoleData // dev.kord.core.cache.data/RoleData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Int;kotlin.Boolean;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlin.Int;dev.kord.common.entity.Permissions;kotlin.Boolean;kotlin.Boolean;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.RoleTagsData>;dev.kord.common.entity.RoleFlags){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/RoleData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/RoleData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/RoleData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/RoleData> { // dev.kord.core.cache.data/RoleData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/RoleData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/RoleData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/RoleData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/RoleData // dev.kord.core.cache.data/RoleData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/RoleData) // dev.kord.core.cache.data/RoleData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.RoleData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/RoleData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/RoleData.Companion.$childSerializers|{}$childSerializers[0]
        final val description // dev.kord.core.cache.data/RoleData.Companion.description|{}description[0]
            final fun <get-description>(): dev.kord.cache.api.data/DataDescription<dev.kord.core.cache.data/RoleData, dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/RoleData.Companion.description.<get-description>|<get-description>(){}[0]

        final fun from(dev.kord.common.entity/DiscordGuildRole): dev.kord.core.cache.data/RoleData // dev.kord.core.cache.data/RoleData.Companion.from|from(dev.kord.common.entity.DiscordGuildRole){}[0]
        final fun from(dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordRole): dev.kord.core.cache.data/RoleData // dev.kord.core.cache.data/RoleData.Companion.from|from(dev.kord.common.entity.Snowflake;dev.kord.common.entity.DiscordRole){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/RoleData> // dev.kord.core.cache.data/RoleData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/RoleTagsData { // dev.kord.core.cache.data/RoleTagsData|null[0]
    constructor <init>(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/Boolean, dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/Boolean, kotlin/Boolean) // dev.kord.core.cache.data/RoleTagsData.<init>|<init>(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.Boolean;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.Boolean;kotlin.Boolean){}[0]

    final val availableForPurchase // dev.kord.core.cache.data/RoleTagsData.availableForPurchase|{}availableForPurchase[0]
        final fun <get-availableForPurchase>(): kotlin/Boolean // dev.kord.core.cache.data/RoleTagsData.availableForPurchase.<get-availableForPurchase>|<get-availableForPurchase>(){}[0]
    final val botId // dev.kord.core.cache.data/RoleTagsData.botId|{}botId[0]
        final fun <get-botId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/RoleTagsData.botId.<get-botId>|<get-botId>(){}[0]
    final val guildConnections // dev.kord.core.cache.data/RoleTagsData.guildConnections|{}guildConnections[0]
        final fun <get-guildConnections>(): kotlin/Boolean // dev.kord.core.cache.data/RoleTagsData.guildConnections.<get-guildConnections>|<get-guildConnections>(){}[0]
    final val integrationId // dev.kord.core.cache.data/RoleTagsData.integrationId|{}integrationId[0]
        final fun <get-integrationId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/RoleTagsData.integrationId.<get-integrationId>|<get-integrationId>(){}[0]
    final val premiumSubscriber // dev.kord.core.cache.data/RoleTagsData.premiumSubscriber|{}premiumSubscriber[0]
        final fun <get-premiumSubscriber>(): kotlin/Boolean // dev.kord.core.cache.data/RoleTagsData.premiumSubscriber.<get-premiumSubscriber>|<get-premiumSubscriber>(){}[0]
    final val subscriptionListingId // dev.kord.core.cache.data/RoleTagsData.subscriptionListingId|{}subscriptionListingId[0]
        final fun <get-subscriptionListingId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/RoleTagsData.subscriptionListingId.<get-subscriptionListingId>|<get-subscriptionListingId>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/RoleTagsData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/RoleTagsData.component2|component2(){}[0]
    final fun component3(): kotlin/Boolean // dev.kord.core.cache.data/RoleTagsData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/RoleTagsData.component4|component4(){}[0]
    final fun component5(): kotlin/Boolean // dev.kord.core.cache.data/RoleTagsData.component5|component5(){}[0]
    final fun component6(): kotlin/Boolean // dev.kord.core.cache.data/RoleTagsData.component6|component6(){}[0]
    final fun copy(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/Boolean = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/Boolean = ..., kotlin/Boolean = ...): dev.kord.core.cache.data/RoleTagsData // dev.kord.core.cache.data/RoleTagsData.copy|copy(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.Boolean;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.Boolean;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/RoleTagsData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/RoleTagsData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/RoleTagsData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/RoleTagsData> { // dev.kord.core.cache.data/RoleTagsData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/RoleTagsData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/RoleTagsData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/RoleTagsData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/RoleTagsData // dev.kord.core.cache.data/RoleTagsData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/RoleTagsData) // dev.kord.core.cache.data/RoleTagsData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.RoleTagsData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/RoleTagsData.Companion|null[0]
        final fun from(dev.kord.common.entity/DiscordRoleTags): dev.kord.core.cache.data/RoleTagsData // dev.kord.core.cache.data/RoleTagsData.Companion.from|from(dev.kord.common.entity.DiscordRoleTags){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/RoleTagsData> // dev.kord.core.cache.data/RoleTagsData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/SelectOptionData { // dev.kord.core.cache.data/SelectOptionData|null[0]
    constructor <init>(kotlin/String, kotlin/String, dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> = ..., dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.core.cache.data/SelectOptionData.<init>|<init>(kotlin.String;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordPartialEmoji>;dev.kord.common.entity.optional.OptionalBoolean){}[0]

    final val default // dev.kord.core.cache.data/SelectOptionData.default|{}default[0]
        final fun <get-default>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/SelectOptionData.default.<get-default>|<get-default>(){}[0]
    final val description // dev.kord.core.cache.data/SelectOptionData.description|{}description[0]
        final fun <get-description>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/SelectOptionData.description.<get-description>|<get-description>(){}[0]
    final val emoji // dev.kord.core.cache.data/SelectOptionData.emoji|{}emoji[0]
        final fun <get-emoji>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> // dev.kord.core.cache.data/SelectOptionData.emoji.<get-emoji>|<get-emoji>(){}[0]
    final val label // dev.kord.core.cache.data/SelectOptionData.label|{}label[0]
        final fun <get-label>(): kotlin/String // dev.kord.core.cache.data/SelectOptionData.label.<get-label>|<get-label>(){}[0]
    final val value // dev.kord.core.cache.data/SelectOptionData.value|{}value[0]
        final fun <get-value>(): kotlin/String // dev.kord.core.cache.data/SelectOptionData.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/String // dev.kord.core.cache.data/SelectOptionData.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.core.cache.data/SelectOptionData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/SelectOptionData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> // dev.kord.core.cache.data/SelectOptionData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/SelectOptionData.component5|component5(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.core.cache.data/SelectOptionData // dev.kord.core.cache.data/SelectOptionData.copy|copy(kotlin.String;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordPartialEmoji>;dev.kord.common.entity.optional.OptionalBoolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/SelectOptionData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/SelectOptionData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/SelectOptionData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/SelectOptionData> { // dev.kord.core.cache.data/SelectOptionData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/SelectOptionData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/SelectOptionData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/SelectOptionData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/SelectOptionData // dev.kord.core.cache.data/SelectOptionData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/SelectOptionData) // dev.kord.core.cache.data/SelectOptionData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.SelectOptionData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/SelectOptionData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/SelectOptionData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordSelectOption): dev.kord.core.cache.data/SelectOptionData // dev.kord.core.cache.data/SelectOptionData.Companion.from|from(dev.kord.common.entity.DiscordSelectOption){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/SelectOptionData> // dev.kord.core.cache.data/SelectOptionData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/StageInstanceData { // dev.kord.core.cache.data/StageInstanceData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/StageInstancePrivacyLevel, dev.kord.common.entity/Snowflake?) // dev.kord.core.cache.data/StageInstanceData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.StageInstancePrivacyLevel;dev.kord.common.entity.Snowflake?){}[0]

    final val channelId // dev.kord.core.cache.data/StageInstanceData.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/StageInstanceData.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val guildId // dev.kord.core.cache.data/StageInstanceData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/StageInstanceData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val guildScheduledEventId // dev.kord.core.cache.data/StageInstanceData.guildScheduledEventId|{}guildScheduledEventId[0]
        final fun <get-guildScheduledEventId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/StageInstanceData.guildScheduledEventId.<get-guildScheduledEventId>|<get-guildScheduledEventId>(){}[0]
    final val id // dev.kord.core.cache.data/StageInstanceData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/StageInstanceData.id.<get-id>|<get-id>(){}[0]
    final val privacyLevel // dev.kord.core.cache.data/StageInstanceData.privacyLevel|{}privacyLevel[0]
        final fun <get-privacyLevel>(): dev.kord.common.entity/StageInstancePrivacyLevel // dev.kord.core.cache.data/StageInstanceData.privacyLevel.<get-privacyLevel>|<get-privacyLevel>(){}[0]
    final val topic // dev.kord.core.cache.data/StageInstanceData.topic|{}topic[0]
        final fun <get-topic>(): kotlin/String // dev.kord.core.cache.data/StageInstanceData.topic.<get-topic>|<get-topic>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/StageInstanceData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/StageInstanceData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/StageInstanceData.component3|component3(){}[0]
    final fun component4(): kotlin/String // dev.kord.core.cache.data/StageInstanceData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity/StageInstancePrivacyLevel // dev.kord.core.cache.data/StageInstanceData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/StageInstanceData.component6|component6(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., dev.kord.common.entity/StageInstancePrivacyLevel = ..., dev.kord.common.entity/Snowflake? = ...): dev.kord.core.cache.data/StageInstanceData // dev.kord.core.cache.data/StageInstanceData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.StageInstancePrivacyLevel;dev.kord.common.entity.Snowflake?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/StageInstanceData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/StageInstanceData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/StageInstanceData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/StageInstanceData> { // dev.kord.core.cache.data/StageInstanceData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/StageInstanceData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/StageInstanceData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/StageInstanceData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/StageInstanceData // dev.kord.core.cache.data/StageInstanceData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/StageInstanceData) // dev.kord.core.cache.data/StageInstanceData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.StageInstanceData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/StageInstanceData.Companion|null[0]
        final fun from(dev.kord.common.entity/DiscordStageInstance): dev.kord.core.cache.data/StageInstanceData // dev.kord.core.cache.data/StageInstanceData.Companion.from|from(dev.kord.common.entity.DiscordStageInstance){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/StageInstanceData> // dev.kord.core.cache.data/StageInstanceData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/StickerData { // dev.kord.core.cache.data/StickerData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/String, kotlin/String?, dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity/MessageStickerType, dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/UserData> = ..., dev.kord.common.entity.optional/OptionalInt = ...) // dev.kord.core.cache.data/StickerData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.String;kotlin.String?;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.MessageStickerType;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.UserData>;dev.kord.common.entity.optional.OptionalInt){}[0]

    final val available // dev.kord.core.cache.data/StickerData.available|{}available[0]
        final fun <get-available>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/StickerData.available.<get-available>|<get-available>(){}[0]
    final val description // dev.kord.core.cache.data/StickerData.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.core.cache.data/StickerData.description.<get-description>|<get-description>(){}[0]
    final val formatType // dev.kord.core.cache.data/StickerData.formatType|{}formatType[0]
        final fun <get-formatType>(): dev.kord.common.entity/MessageStickerType // dev.kord.core.cache.data/StickerData.formatType.<get-formatType>|<get-formatType>(){}[0]
    final val guildId // dev.kord.core.cache.data/StickerData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/StickerData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.core.cache.data/StickerData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/StickerData.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.core.cache.data/StickerData.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.cache.data/StickerData.name.<get-name>|<get-name>(){}[0]
    final val packId // dev.kord.core.cache.data/StickerData.packId|{}packId[0]
        final fun <get-packId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/StickerData.packId.<get-packId>|<get-packId>(){}[0]
    final val sortValue // dev.kord.core.cache.data/StickerData.sortValue|{}sortValue[0]
        final fun <get-sortValue>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/StickerData.sortValue.<get-sortValue>|<get-sortValue>(){}[0]
    final val tags // dev.kord.core.cache.data/StickerData.tags|{}tags[0]
        final fun <get-tags>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/StickerData.tags.<get-tags>|<get-tags>(){}[0]
    final val user // dev.kord.core.cache.data/StickerData.user|{}user[0]
        final fun <get-user>(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/UserData> // dev.kord.core.cache.data/StickerData.user.<get-user>|<get-user>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/StickerData.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/StickerData.component10|component10(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/StickerData.component2|component2(){}[0]
    final fun component3(): kotlin/String // dev.kord.core.cache.data/StickerData.component3|component3(){}[0]
    final fun component4(): kotlin/String? // dev.kord.core.cache.data/StickerData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/StickerData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity/MessageStickerType // dev.kord.core.cache.data/StickerData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/StickerData.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/StickerData.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/UserData> // dev.kord.core.cache.data/StickerData.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/String = ..., kotlin/String? = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity/MessageStickerType = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.core.cache.data/UserData> = ..., dev.kord.common.entity.optional/OptionalInt = ...): dev.kord.core.cache.data/StickerData // dev.kord.core.cache.data/StickerData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.String;kotlin.String?;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.MessageStickerType;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.core.cache.data.UserData>;dev.kord.common.entity.optional.OptionalInt){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/StickerData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/StickerData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/StickerData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/StickerData> { // dev.kord.core.cache.data/StickerData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/StickerData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/StickerData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/StickerData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/StickerData // dev.kord.core.cache.data/StickerData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/StickerData) // dev.kord.core.cache.data/StickerData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.StickerData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/StickerData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/StickerData.Companion.$childSerializers|{}$childSerializers[0]
        final val description // dev.kord.core.cache.data/StickerData.Companion.description|{}description[0]
            final fun <get-description>(): dev.kord.cache.api.data/DataDescription<dev.kord.core.cache.data/StickerData, dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/StickerData.Companion.description.<get-description>|<get-description>(){}[0]

        final fun from(dev.kord.common.entity/DiscordMessageSticker): dev.kord.core.cache.data/StickerData // dev.kord.core.cache.data/StickerData.Companion.from|from(dev.kord.common.entity.DiscordMessageSticker){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/StickerData> // dev.kord.core.cache.data/StickerData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/StickerItemData { // dev.kord.core.cache.data/StickerItemData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/MessageStickerType) // dev.kord.core.cache.data/StickerItemData.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.MessageStickerType){}[0]

    final val formatType // dev.kord.core.cache.data/StickerItemData.formatType|{}formatType[0]
        final fun <get-formatType>(): dev.kord.common.entity/MessageStickerType // dev.kord.core.cache.data/StickerItemData.formatType.<get-formatType>|<get-formatType>(){}[0]
    final val id // dev.kord.core.cache.data/StickerItemData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/StickerItemData.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.core.cache.data/StickerItemData.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.cache.data/StickerItemData.name.<get-name>|<get-name>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/StickerItemData.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.core.cache.data/StickerItemData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/MessageStickerType // dev.kord.core.cache.data/StickerItemData.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., dev.kord.common.entity/MessageStickerType = ...): dev.kord.core.cache.data/StickerItemData // dev.kord.core.cache.data/StickerItemData.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.MessageStickerType){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/StickerItemData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/StickerItemData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/StickerItemData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/StickerItemData> { // dev.kord.core.cache.data/StickerItemData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/StickerItemData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/StickerItemData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/StickerItemData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/StickerItemData // dev.kord.core.cache.data/StickerItemData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/StickerItemData) // dev.kord.core.cache.data/StickerItemData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.StickerItemData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/StickerItemData.Companion|null[0]
        final fun from(dev.kord.common.entity/DiscordStickerItem): dev.kord.core.cache.data/StickerItemData // dev.kord.core.cache.data/StickerItemData.Companion.from|from(dev.kord.common.entity.DiscordStickerItem){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/StickerItemData> // dev.kord.core.cache.data/StickerItemData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/StickerPackData { // dev.kord.core.cache.data/StickerPackData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin.collections/List<dev.kord.core.cache.data/StickerData>, kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/String, dev.kord.common.entity/Snowflake) // dev.kord.core.cache.data/StickerPackData.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.collections.List<dev.kord.core.cache.data.StickerData>;kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.String;dev.kord.common.entity.Snowflake){}[0]

    final val bannerAssetId // dev.kord.core.cache.data/StickerPackData.bannerAssetId|{}bannerAssetId[0]
        final fun <get-bannerAssetId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/StickerPackData.bannerAssetId.<get-bannerAssetId>|<get-bannerAssetId>(){}[0]
    final val coverStickerId // dev.kord.core.cache.data/StickerPackData.coverStickerId|{}coverStickerId[0]
        final fun <get-coverStickerId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/StickerPackData.coverStickerId.<get-coverStickerId>|<get-coverStickerId>(){}[0]
    final val description // dev.kord.core.cache.data/StickerPackData.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.core.cache.data/StickerPackData.description.<get-description>|<get-description>(){}[0]
    final val id // dev.kord.core.cache.data/StickerPackData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/StickerPackData.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.core.cache.data/StickerPackData.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.cache.data/StickerPackData.name.<get-name>|<get-name>(){}[0]
    final val skuId // dev.kord.core.cache.data/StickerPackData.skuId|{}skuId[0]
        final fun <get-skuId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/StickerPackData.skuId.<get-skuId>|<get-skuId>(){}[0]
    final val stickers // dev.kord.core.cache.data/StickerPackData.stickers|{}stickers[0]
        final fun <get-stickers>(): kotlin.collections/List<dev.kord.core.cache.data/StickerData> // dev.kord.core.cache.data/StickerPackData.stickers.<get-stickers>|<get-stickers>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/StickerPackData.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<dev.kord.core.cache.data/StickerData> // dev.kord.core.cache.data/StickerPackData.component2|component2(){}[0]
    final fun component3(): kotlin/String // dev.kord.core.cache.data/StickerPackData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/StickerPackData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/StickerPackData.component5|component5(){}[0]
    final fun component6(): kotlin/String // dev.kord.core.cache.data/StickerPackData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/StickerPackData.component7|component7(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin.collections/List<dev.kord.core.cache.data/StickerData> = ..., kotlin/String = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/String = ..., dev.kord.common.entity/Snowflake = ...): dev.kord.core.cache.data/StickerPackData // dev.kord.core.cache.data/StickerPackData.copy|copy(dev.kord.common.entity.Snowflake;kotlin.collections.List<dev.kord.core.cache.data.StickerData>;kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.String;dev.kord.common.entity.Snowflake){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/StickerPackData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/StickerPackData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/StickerPackData.toString|toString(){}[0]

    final object Companion { // dev.kord.core.cache.data/StickerPackData.Companion|null[0]
        final val description // dev.kord.core.cache.data/StickerPackData.Companion.description|{}description[0]
            final fun <get-description>(): dev.kord.cache.api.data/DataDescription<dev.kord.core.cache.data/StickerPackData, dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/StickerPackData.Companion.description.<get-description>|<get-description>(){}[0]

        final fun from(dev.kord.common.entity/DiscordStickerPack): dev.kord.core.cache.data/StickerPackData // dev.kord.core.cache.data/StickerPackData.Companion.from|from(dev.kord.common.entity.DiscordStickerPack){}[0]
    }
}

final class dev.kord.core.cache.data/TeamData { // dev.kord.core.cache.data/TeamData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String? = ..., kotlin.collections/List<dev.kord.core.cache.data/TeamMemberData>, dev.kord.common.entity/Snowflake, kotlin/String) // dev.kord.core.cache.data/TeamData.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String?;kotlin.collections.List<dev.kord.core.cache.data.TeamMemberData>;dev.kord.common.entity.Snowflake;kotlin.String){}[0]

    final val icon // dev.kord.core.cache.data/TeamData.icon|{}icon[0]
        final fun <get-icon>(): kotlin/String? // dev.kord.core.cache.data/TeamData.icon.<get-icon>|<get-icon>(){}[0]
    final val id // dev.kord.core.cache.data/TeamData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/TeamData.id.<get-id>|<get-id>(){}[0]
    final val members // dev.kord.core.cache.data/TeamData.members|{}members[0]
        final fun <get-members>(): kotlin.collections/List<dev.kord.core.cache.data/TeamMemberData> // dev.kord.core.cache.data/TeamData.members.<get-members>|<get-members>(){}[0]
    final val name // dev.kord.core.cache.data/TeamData.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.cache.data/TeamData.name.<get-name>|<get-name>(){}[0]
    final val ownerUserId // dev.kord.core.cache.data/TeamData.ownerUserId|{}ownerUserId[0]
        final fun <get-ownerUserId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/TeamData.ownerUserId.<get-ownerUserId>|<get-ownerUserId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/TeamData.component1|component1(){}[0]
    final fun component2(): kotlin/String? // dev.kord.core.cache.data/TeamData.component2|component2(){}[0]
    final fun component3(): kotlin.collections/List<dev.kord.core.cache.data/TeamMemberData> // dev.kord.core.cache.data/TeamData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/TeamData.component4|component4(){}[0]
    final fun component5(): kotlin/String // dev.kord.core.cache.data/TeamData.component5|component5(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String? = ..., kotlin.collections/List<dev.kord.core.cache.data/TeamMemberData> = ..., dev.kord.common.entity/Snowflake = ..., kotlin/String = ...): dev.kord.core.cache.data/TeamData // dev.kord.core.cache.data/TeamData.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String?;kotlin.collections.List<dev.kord.core.cache.data.TeamMemberData>;dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/TeamData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/TeamData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/TeamData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/TeamData> { // dev.kord.core.cache.data/TeamData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/TeamData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/TeamData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/TeamData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/TeamData // dev.kord.core.cache.data/TeamData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/TeamData) // dev.kord.core.cache.data/TeamData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.TeamData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/TeamData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/TeamData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordTeam): dev.kord.core.cache.data/TeamData // dev.kord.core.cache.data/TeamData.Companion.from|from(dev.kord.common.entity.DiscordTeam){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/TeamData> // dev.kord.core.cache.data/TeamData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/TeamMemberData { // dev.kord.core.cache.data/TeamMemberData|null[0]
    constructor <init>(dev.kord.common.entity/TeamMembershipState, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/TeamMemberRole) // dev.kord.core.cache.data/TeamMemberData.<init>|<init>(dev.kord.common.entity.TeamMembershipState;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.TeamMemberRole){}[0]

    final val membershipState // dev.kord.core.cache.data/TeamMemberData.membershipState|{}membershipState[0]
        final fun <get-membershipState>(): dev.kord.common.entity/TeamMembershipState // dev.kord.core.cache.data/TeamMemberData.membershipState.<get-membershipState>|<get-membershipState>(){}[0]
    final val role // dev.kord.core.cache.data/TeamMemberData.role|{}role[0]
        final fun <get-role>(): dev.kord.common.entity/TeamMemberRole // dev.kord.core.cache.data/TeamMemberData.role.<get-role>|<get-role>(){}[0]
    final val teamId // dev.kord.core.cache.data/TeamMemberData.teamId|{}teamId[0]
        final fun <get-teamId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/TeamMemberData.teamId.<get-teamId>|<get-teamId>(){}[0]
    final val userId // dev.kord.core.cache.data/TeamMemberData.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/TeamMemberData.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): dev.kord.common.entity/TeamMembershipState // dev.kord.core.cache.data/TeamMemberData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/TeamMemberData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/TeamMemberData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity/TeamMemberRole // dev.kord.core.cache.data/TeamMemberData.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity/TeamMembershipState = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/TeamMemberRole = ...): dev.kord.core.cache.data/TeamMemberData // dev.kord.core.cache.data/TeamMemberData.copy|copy(dev.kord.common.entity.TeamMembershipState;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.TeamMemberRole){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/TeamMemberData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/TeamMemberData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/TeamMemberData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/TeamMemberData> { // dev.kord.core.cache.data/TeamMemberData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/TeamMemberData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/TeamMemberData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/TeamMemberData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/TeamMemberData // dev.kord.core.cache.data/TeamMemberData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/TeamMemberData) // dev.kord.core.cache.data/TeamMemberData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.TeamMemberData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/TeamMemberData.Companion|null[0]
        final fun from(dev.kord.common.entity/DiscordTeamMember): dev.kord.core.cache.data/TeamMemberData // dev.kord.core.cache.data/TeamMemberData.Companion.from|from(dev.kord.common.entity.DiscordTeamMember){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/TeamMemberData> // dev.kord.core.cache.data/TeamMemberData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/TemplateData { // dev.kord.core.cache.data/TemplateData|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/String?, kotlin/Int, dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/UserData, kotlinx.datetime/Instant, kotlinx.datetime/Instant, dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/PartialGuildData, kotlin/Boolean?) // dev.kord.core.cache.data/TemplateData.<init>|<init>(kotlin.String;kotlin.String;kotlin.String?;kotlin.Int;dev.kord.common.entity.Snowflake;dev.kord.core.cache.data.UserData;kotlinx.datetime.Instant;kotlinx.datetime.Instant;dev.kord.common.entity.Snowflake;dev.kord.core.cache.data.PartialGuildData;kotlin.Boolean?){}[0]

    final val code // dev.kord.core.cache.data/TemplateData.code|{}code[0]
        final fun <get-code>(): kotlin/String // dev.kord.core.cache.data/TemplateData.code.<get-code>|<get-code>(){}[0]
    final val createdAt // dev.kord.core.cache.data/TemplateData.createdAt|{}createdAt[0]
        final fun <get-createdAt>(): kotlinx.datetime/Instant // dev.kord.core.cache.data/TemplateData.createdAt.<get-createdAt>|<get-createdAt>(){}[0]
    final val creator // dev.kord.core.cache.data/TemplateData.creator|{}creator[0]
        final fun <get-creator>(): dev.kord.core.cache.data/UserData // dev.kord.core.cache.data/TemplateData.creator.<get-creator>|<get-creator>(){}[0]
    final val creatorId // dev.kord.core.cache.data/TemplateData.creatorId|{}creatorId[0]
        final fun <get-creatorId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/TemplateData.creatorId.<get-creatorId>|<get-creatorId>(){}[0]
    final val description // dev.kord.core.cache.data/TemplateData.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.core.cache.data/TemplateData.description.<get-description>|<get-description>(){}[0]
    final val isDirty // dev.kord.core.cache.data/TemplateData.isDirty|{}isDirty[0]
        final fun <get-isDirty>(): kotlin/Boolean? // dev.kord.core.cache.data/TemplateData.isDirty.<get-isDirty>|<get-isDirty>(){}[0]
    final val name // dev.kord.core.cache.data/TemplateData.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.cache.data/TemplateData.name.<get-name>|<get-name>(){}[0]
    final val serializedSourceGuild // dev.kord.core.cache.data/TemplateData.serializedSourceGuild|{}serializedSourceGuild[0]
        final fun <get-serializedSourceGuild>(): dev.kord.core.cache.data/PartialGuildData // dev.kord.core.cache.data/TemplateData.serializedSourceGuild.<get-serializedSourceGuild>|<get-serializedSourceGuild>(){}[0]
    final val sourceGuildId // dev.kord.core.cache.data/TemplateData.sourceGuildId|{}sourceGuildId[0]
        final fun <get-sourceGuildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/TemplateData.sourceGuildId.<get-sourceGuildId>|<get-sourceGuildId>(){}[0]
    final val updatedAt // dev.kord.core.cache.data/TemplateData.updatedAt|{}updatedAt[0]
        final fun <get-updatedAt>(): kotlinx.datetime/Instant // dev.kord.core.cache.data/TemplateData.updatedAt.<get-updatedAt>|<get-updatedAt>(){}[0]
    final val usageCount // dev.kord.core.cache.data/TemplateData.usageCount|{}usageCount[0]
        final fun <get-usageCount>(): kotlin/Int // dev.kord.core.cache.data/TemplateData.usageCount.<get-usageCount>|<get-usageCount>(){}[0]

    final fun component1(): kotlin/String // dev.kord.core.cache.data/TemplateData.component1|component1(){}[0]
    final fun component10(): dev.kord.core.cache.data/PartialGuildData // dev.kord.core.cache.data/TemplateData.component10|component10(){}[0]
    final fun component11(): kotlin/Boolean? // dev.kord.core.cache.data/TemplateData.component11|component11(){}[0]
    final fun component2(): kotlin/String // dev.kord.core.cache.data/TemplateData.component2|component2(){}[0]
    final fun component3(): kotlin/String? // dev.kord.core.cache.data/TemplateData.component3|component3(){}[0]
    final fun component4(): kotlin/Int // dev.kord.core.cache.data/TemplateData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/TemplateData.component5|component5(){}[0]
    final fun component6(): dev.kord.core.cache.data/UserData // dev.kord.core.cache.data/TemplateData.component6|component6(){}[0]
    final fun component7(): kotlinx.datetime/Instant // dev.kord.core.cache.data/TemplateData.component7|component7(){}[0]
    final fun component8(): kotlinx.datetime/Instant // dev.kord.core.cache.data/TemplateData.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/TemplateData.component9|component9(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/String? = ..., kotlin/Int = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.core.cache.data/UserData = ..., kotlinx.datetime/Instant = ..., kotlinx.datetime/Instant = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.core.cache.data/PartialGuildData = ..., kotlin/Boolean? = ...): dev.kord.core.cache.data/TemplateData // dev.kord.core.cache.data/TemplateData.copy|copy(kotlin.String;kotlin.String;kotlin.String?;kotlin.Int;dev.kord.common.entity.Snowflake;dev.kord.core.cache.data.UserData;kotlinx.datetime.Instant;kotlinx.datetime.Instant;dev.kord.common.entity.Snowflake;dev.kord.core.cache.data.PartialGuildData;kotlin.Boolean?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/TemplateData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/TemplateData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/TemplateData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/TemplateData> { // dev.kord.core.cache.data/TemplateData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/TemplateData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/TemplateData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/TemplateData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/TemplateData // dev.kord.core.cache.data/TemplateData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/TemplateData) // dev.kord.core.cache.data/TemplateData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.TemplateData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/TemplateData.Companion|null[0]
        final fun from(dev.kord.common.entity/DiscordTemplate): dev.kord.core.cache.data/TemplateData // dev.kord.core.cache.data/TemplateData.Companion.from|from(dev.kord.common.entity.DiscordTemplate){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/TemplateData> // dev.kord.core.cache.data/TemplateData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/TextInputComponentData : dev.kord.core.cache.data/ComponentData { // dev.kord.core.cache.data/TextInputComponentData|null[0]
    constructor <init>(dev.kord.common.entity/ComponentType, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/TextInputStyle> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ComponentData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectDefaultValue>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/SelectOptionData>> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> = ...) // dev.kord.core.cache.data/TextInputComponentData.<init>|<init>(dev.kord.common.entity.ComponentType;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.TextInputStyle>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordPartialEmoji>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.ComponentData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordSelectDefaultValue>>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.SelectOptionData>>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.ChannelType>>){}[0]

    final val channelTypes // dev.kord.core.cache.data/TextInputComponentData.channelTypes|{}channelTypes[0]
        final fun <get-channelTypes>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> // dev.kord.core.cache.data/TextInputComponentData.channelTypes.<get-channelTypes>|<get-channelTypes>(){}[0]
    final val components // dev.kord.core.cache.data/TextInputComponentData.components|{}components[0]
        final fun <get-components>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ComponentData>> // dev.kord.core.cache.data/TextInputComponentData.components.<get-components>|<get-components>(){}[0]
    final val customId // dev.kord.core.cache.data/TextInputComponentData.customId|{}customId[0]
        final fun <get-customId>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/TextInputComponentData.customId.<get-customId>|<get-customId>(){}[0]
    final val defaultValues // dev.kord.core.cache.data/TextInputComponentData.defaultValues|{}defaultValues[0]
        final fun <get-defaultValues>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectDefaultValue>> // dev.kord.core.cache.data/TextInputComponentData.defaultValues.<get-defaultValues>|<get-defaultValues>(){}[0]
    final val disabled // dev.kord.core.cache.data/TextInputComponentData.disabled|{}disabled[0]
        final fun <get-disabled>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/TextInputComponentData.disabled.<get-disabled>|<get-disabled>(){}[0]
    final val emoji // dev.kord.core.cache.data/TextInputComponentData.emoji|{}emoji[0]
        final fun <get-emoji>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> // dev.kord.core.cache.data/TextInputComponentData.emoji.<get-emoji>|<get-emoji>(){}[0]
    final val label // dev.kord.core.cache.data/TextInputComponentData.label|{}label[0]
        final fun <get-label>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/TextInputComponentData.label.<get-label>|<get-label>(){}[0]
    final val maxLength // dev.kord.core.cache.data/TextInputComponentData.maxLength|{}maxLength[0]
        final fun <get-maxLength>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/TextInputComponentData.maxLength.<get-maxLength>|<get-maxLength>(){}[0]
    final val maxValues // dev.kord.core.cache.data/TextInputComponentData.maxValues|{}maxValues[0]
        final fun <get-maxValues>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/TextInputComponentData.maxValues.<get-maxValues>|<get-maxValues>(){}[0]
    final val minLength // dev.kord.core.cache.data/TextInputComponentData.minLength|{}minLength[0]
        final fun <get-minLength>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/TextInputComponentData.minLength.<get-minLength>|<get-minLength>(){}[0]
    final val minValues // dev.kord.core.cache.data/TextInputComponentData.minValues|{}minValues[0]
        final fun <get-minValues>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/TextInputComponentData.minValues.<get-minValues>|<get-minValues>(){}[0]
    final val options // dev.kord.core.cache.data/TextInputComponentData.options|{}options[0]
        final fun <get-options>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/SelectOptionData>> // dev.kord.core.cache.data/TextInputComponentData.options.<get-options>|<get-options>(){}[0]
    final val placeholder // dev.kord.core.cache.data/TextInputComponentData.placeholder|{}placeholder[0]
        final fun <get-placeholder>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/TextInputComponentData.placeholder.<get-placeholder>|<get-placeholder>(){}[0]
    final val required // dev.kord.core.cache.data/TextInputComponentData.required|{}required[0]
        final fun <get-required>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/TextInputComponentData.required.<get-required>|<get-required>(){}[0]
    final val style // dev.kord.core.cache.data/TextInputComponentData.style|{}style[0]
        final fun <get-style>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/TextInputStyle> // dev.kord.core.cache.data/TextInputComponentData.style.<get-style>|<get-style>(){}[0]
    final val type // dev.kord.core.cache.data/TextInputComponentData.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ComponentType // dev.kord.core.cache.data/TextInputComponentData.type.<get-type>|<get-type>(){}[0]
    final val url // dev.kord.core.cache.data/TextInputComponentData.url|{}url[0]
        final fun <get-url>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/TextInputComponentData.url.<get-url>|<get-url>(){}[0]
    final val value // dev.kord.core.cache.data/TextInputComponentData.value|{}value[0]
        final fun <get-value>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/TextInputComponentData.value.<get-value>|<get-value>(){}[0]

    final fun component1(): dev.kord.common.entity/ComponentType // dev.kord.core.cache.data/TextInputComponentData.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/TextInputComponentData.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/TextInputComponentData.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/TextInputComponentData.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/SelectOptionData>> // dev.kord.core.cache.data/TextInputComponentData.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/TextInputComponentData.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/TextInputComponentData.component15|component15(){}[0]
    final fun component16(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/TextInputComponentData.component16|component16(){}[0]
    final fun component17(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/TextInputComponentData.component17|component17(){}[0]
    final fun component18(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> // dev.kord.core.cache.data/TextInputComponentData.component18|component18(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/TextInputStyle> // dev.kord.core.cache.data/TextInputComponentData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/TextInputComponentData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> // dev.kord.core.cache.data/TextInputComponentData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/TextInputComponentData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/TextInputComponentData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/TextInputComponentData.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ComponentData>> // dev.kord.core.cache.data/TextInputComponentData.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectDefaultValue>> // dev.kord.core.cache.data/TextInputComponentData.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/ComponentType = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/TextInputStyle> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ComponentData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectDefaultValue>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/SelectOptionData>> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> = ...): dev.kord.core.cache.data/TextInputComponentData // dev.kord.core.cache.data/TextInputComponentData.copy|copy(dev.kord.common.entity.ComponentType;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.TextInputStyle>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordPartialEmoji>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.ComponentData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordSelectDefaultValue>>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.SelectOptionData>>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.ChannelType>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/TextInputComponentData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/TextInputComponentData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/TextInputComponentData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/TextInputComponentData> { // dev.kord.core.cache.data/TextInputComponentData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/TextInputComponentData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/TextInputComponentData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/TextInputComponentData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/TextInputComponentData // dev.kord.core.cache.data/TextInputComponentData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/TextInputComponentData) // dev.kord.core.cache.data/TextInputComponentData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.TextInputComponentData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/TextInputComponentData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/TextInputComponentData.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/TextInputComponentData> // dev.kord.core.cache.data/TextInputComponentData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/ThreadListSyncData { // dev.kord.core.cache.data/ThreadListSyncData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., kotlin.collections/List<dev.kord.core.cache.data/ChannelData>, kotlin.collections/List<dev.kord.core.cache.data/ThreadMemberData>) // dev.kord.core.cache.data/ThreadListSyncData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;kotlin.collections.List<dev.kord.core.cache.data.ChannelData>;kotlin.collections.List<dev.kord.core.cache.data.ThreadMemberData>){}[0]

    final val channelIds // dev.kord.core.cache.data/ThreadListSyncData.channelIds|{}channelIds[0]
        final fun <get-channelIds>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.core.cache.data/ThreadListSyncData.channelIds.<get-channelIds>|<get-channelIds>(){}[0]
    final val guildId // dev.kord.core.cache.data/ThreadListSyncData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/ThreadListSyncData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val members // dev.kord.core.cache.data/ThreadListSyncData.members|{}members[0]
        final fun <get-members>(): kotlin.collections/List<dev.kord.core.cache.data/ThreadMemberData> // dev.kord.core.cache.data/ThreadListSyncData.members.<get-members>|<get-members>(){}[0]
    final val threads // dev.kord.core.cache.data/ThreadListSyncData.threads|{}threads[0]
        final fun <get-threads>(): kotlin.collections/List<dev.kord.core.cache.data/ChannelData> // dev.kord.core.cache.data/ThreadListSyncData.threads.<get-threads>|<get-threads>(){}[0]

    final object Companion { // dev.kord.core.cache.data/ThreadListSyncData.Companion|null[0]
        final fun from(dev.kord.gateway/ThreadListSync): dev.kord.core.cache.data/ThreadListSyncData // dev.kord.core.cache.data/ThreadListSyncData.Companion.from|from(dev.kord.gateway.ThreadListSync){}[0]
    }
}

final class dev.kord.core.cache.data/ThreadMemberData { // dev.kord.core.cache.data/ThreadMemberData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlinx.datetime/Instant, kotlin/Int) // dev.kord.core.cache.data/ThreadMemberData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlinx.datetime.Instant;kotlin.Int){}[0]

    final val flags // dev.kord.core.cache.data/ThreadMemberData.flags|{}flags[0]
        final fun <get-flags>(): kotlin/Int // dev.kord.core.cache.data/ThreadMemberData.flags.<get-flags>|<get-flags>(){}[0]
    final val id // dev.kord.core.cache.data/ThreadMemberData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/ThreadMemberData.id.<get-id>|<get-id>(){}[0]
    final val joinTimestamp // dev.kord.core.cache.data/ThreadMemberData.joinTimestamp|{}joinTimestamp[0]
        final fun <get-joinTimestamp>(): kotlinx.datetime/Instant // dev.kord.core.cache.data/ThreadMemberData.joinTimestamp.<get-joinTimestamp>|<get-joinTimestamp>(){}[0]
    final val userId // dev.kord.core.cache.data/ThreadMemberData.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/ThreadMemberData.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/ThreadMemberData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/ThreadMemberData.component2|component2(){}[0]
    final fun component3(): kotlinx.datetime/Instant // dev.kord.core.cache.data/ThreadMemberData.component3|component3(){}[0]
    final fun component4(): kotlin/Int // dev.kord.core.cache.data/ThreadMemberData.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlinx.datetime/Instant = ..., kotlin/Int = ...): dev.kord.core.cache.data/ThreadMemberData // dev.kord.core.cache.data/ThreadMemberData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlinx.datetime.Instant;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/ThreadMemberData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/ThreadMemberData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/ThreadMemberData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/ThreadMemberData> { // dev.kord.core.cache.data/ThreadMemberData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/ThreadMemberData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/ThreadMemberData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/ThreadMemberData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/ThreadMemberData // dev.kord.core.cache.data/ThreadMemberData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/ThreadMemberData) // dev.kord.core.cache.data/ThreadMemberData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.ThreadMemberData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/ThreadMemberData.Companion|null[0]
        final val description // dev.kord.core.cache.data/ThreadMemberData.Companion.description|{}description[0]
            final fun <get-description>(): dev.kord.cache.api.data/DataDescription<dev.kord.core.cache.data/ThreadMemberData, dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/ThreadMemberData.Companion.description.<get-description>|<get-description>(){}[0]

        final fun from(dev.kord.common.entity/DiscordThreadMember, dev.kord.common.entity/Snowflake? = ...): dev.kord.core.cache.data/ThreadMemberData // dev.kord.core.cache.data/ThreadMemberData.Companion.from|from(dev.kord.common.entity.DiscordThreadMember;dev.kord.common.entity.Snowflake?){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/ThreadMemberData> // dev.kord.core.cache.data/ThreadMemberData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/ThreadMembersUpdateEventData { // dev.kord.core.cache.data/ThreadMembersUpdateEventData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int, dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ThreadMemberData>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ...) // dev.kord.core.cache.data/ThreadMembersUpdateEventData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.core.cache.data.ThreadMemberData>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>){}[0]

    final val addedMembers // dev.kord.core.cache.data/ThreadMembersUpdateEventData.addedMembers|{}addedMembers[0]
        final fun <get-addedMembers>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ThreadMemberData>> // dev.kord.core.cache.data/ThreadMembersUpdateEventData.addedMembers.<get-addedMembers>|<get-addedMembers>(){}[0]
    final val guildId // dev.kord.core.cache.data/ThreadMembersUpdateEventData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/ThreadMembersUpdateEventData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.core.cache.data/ThreadMembersUpdateEventData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/ThreadMembersUpdateEventData.id.<get-id>|<get-id>(){}[0]
    final val memberCount // dev.kord.core.cache.data/ThreadMembersUpdateEventData.memberCount|{}memberCount[0]
        final fun <get-memberCount>(): kotlin/Int // dev.kord.core.cache.data/ThreadMembersUpdateEventData.memberCount.<get-memberCount>|<get-memberCount>(){}[0]
    final val removedMemberIds // dev.kord.core.cache.data/ThreadMembersUpdateEventData.removedMemberIds|{}removedMemberIds[0]
        final fun <get-removedMemberIds>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.core.cache.data/ThreadMembersUpdateEventData.removedMemberIds.<get-removedMemberIds>|<get-removedMemberIds>(){}[0]

    final object Companion { // dev.kord.core.cache.data/ThreadMembersUpdateEventData.Companion|null[0]
        final fun from(dev.kord.gateway/ThreadMembersUpdate): dev.kord.core.cache.data/ThreadMembersUpdateEventData // dev.kord.core.cache.data/ThreadMembersUpdateEventData.Companion.from|from(dev.kord.gateway.ThreadMembersUpdate){}[0]
    }
}

final class dev.kord.core.cache.data/ThreadMetadataData { // dev.kord.core.cache.data/ThreadMetadataData|null[0]
    constructor <init>(kotlin/Boolean, kotlinx.datetime/Instant, dev.kord.common.entity/ArchiveDuration, dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ...) // dev.kord.core.cache.data/ThreadMetadataData.<init>|<init>(kotlin.Boolean;kotlinx.datetime.Instant;dev.kord.common.entity.ArchiveDuration;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>){}[0]

    final val archiveTimestamp // dev.kord.core.cache.data/ThreadMetadataData.archiveTimestamp|{}archiveTimestamp[0]
        final fun <get-archiveTimestamp>(): kotlinx.datetime/Instant // dev.kord.core.cache.data/ThreadMetadataData.archiveTimestamp.<get-archiveTimestamp>|<get-archiveTimestamp>(){}[0]
    final val archived // dev.kord.core.cache.data/ThreadMetadataData.archived|{}archived[0]
        final fun <get-archived>(): kotlin/Boolean // dev.kord.core.cache.data/ThreadMetadataData.archived.<get-archived>|<get-archived>(){}[0]
    final val autoArchiveDuration // dev.kord.core.cache.data/ThreadMetadataData.autoArchiveDuration|{}autoArchiveDuration[0]
        final fun <get-autoArchiveDuration>(): dev.kord.common.entity/ArchiveDuration // dev.kord.core.cache.data/ThreadMetadataData.autoArchiveDuration.<get-autoArchiveDuration>|<get-autoArchiveDuration>(){}[0]
    final val createTimestamp // dev.kord.core.cache.data/ThreadMetadataData.createTimestamp|{}createTimestamp[0]
        final fun <get-createTimestamp>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.core.cache.data/ThreadMetadataData.createTimestamp.<get-createTimestamp>|<get-createTimestamp>(){}[0]
    final val invitable // dev.kord.core.cache.data/ThreadMetadataData.invitable|{}invitable[0]
        final fun <get-invitable>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/ThreadMetadataData.invitable.<get-invitable>|<get-invitable>(){}[0]
    final val locked // dev.kord.core.cache.data/ThreadMetadataData.locked|{}locked[0]
        final fun <get-locked>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/ThreadMetadataData.locked.<get-locked>|<get-locked>(){}[0]

    final fun component1(): kotlin/Boolean // dev.kord.core.cache.data/ThreadMetadataData.component1|component1(){}[0]
    final fun component2(): kotlinx.datetime/Instant // dev.kord.core.cache.data/ThreadMetadataData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/ArchiveDuration // dev.kord.core.cache.data/ThreadMetadataData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/ThreadMetadataData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/ThreadMetadataData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.core.cache.data/ThreadMetadataData.component6|component6(){}[0]
    final fun copy(kotlin/Boolean = ..., kotlinx.datetime/Instant = ..., dev.kord.common.entity/ArchiveDuration = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ...): dev.kord.core.cache.data/ThreadMetadataData // dev.kord.core.cache.data/ThreadMetadataData.copy|copy(kotlin.Boolean;kotlinx.datetime.Instant;dev.kord.common.entity.ArchiveDuration;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/ThreadMetadataData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/ThreadMetadataData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/ThreadMetadataData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/ThreadMetadataData> { // dev.kord.core.cache.data/ThreadMetadataData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/ThreadMetadataData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/ThreadMetadataData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/ThreadMetadataData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/ThreadMetadataData // dev.kord.core.cache.data/ThreadMetadataData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/ThreadMetadataData) // dev.kord.core.cache.data/ThreadMetadataData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.ThreadMetadataData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/ThreadMetadataData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/ThreadMetadataData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordThreadMetadata): dev.kord.core.cache.data/ThreadMetadataData // dev.kord.core.cache.data/ThreadMetadataData.Companion.from|from(dev.kord.common.entity.DiscordThreadMetadata){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/ThreadMetadataData> // dev.kord.core.cache.data/ThreadMetadataData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/UserData { // dev.kord.core.cache.data/UserData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlin/String? = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserFlags> = ..., kotlin/String? = ..., kotlin/Int? = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...) // dev.kord.core.cache.data/UserData.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlin.String?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.UserFlags>;kotlin.String?;kotlin.Int?;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]

    final val accentColor // dev.kord.core.cache.data/UserData.accentColor|{}accentColor[0]
        final fun <get-accentColor>(): kotlin/Int? // dev.kord.core.cache.data/UserData.accentColor.<get-accentColor>|<get-accentColor>(){}[0]
    final val avatar // dev.kord.core.cache.data/UserData.avatar|{}avatar[0]
        final fun <get-avatar>(): kotlin/String? // dev.kord.core.cache.data/UserData.avatar.<get-avatar>|<get-avatar>(){}[0]
    final val avatarDecoration // dev.kord.core.cache.data/UserData.avatarDecoration|{}avatarDecoration[0]
        final fun <get-avatarDecoration>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/UserData.avatarDecoration.<get-avatarDecoration>|<get-avatarDecoration>(){}[0]
    final val banner // dev.kord.core.cache.data/UserData.banner|{}banner[0]
        final fun <get-banner>(): kotlin/String? // dev.kord.core.cache.data/UserData.banner.<get-banner>|<get-banner>(){}[0]
    final val bot // dev.kord.core.cache.data/UserData.bot|{}bot[0]
        final fun <get-bot>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/UserData.bot.<get-bot>|<get-bot>(){}[0]
    final val discriminator // dev.kord.core.cache.data/UserData.discriminator|{}discriminator[0]
        final fun <get-discriminator>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/UserData.discriminator.<get-discriminator>|<get-discriminator>(){}[0]
    final val globalName // dev.kord.core.cache.data/UserData.globalName|{}globalName[0]
        final fun <get-globalName>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/UserData.globalName.<get-globalName>|<get-globalName>(){}[0]
    final val id // dev.kord.core.cache.data/UserData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/UserData.id.<get-id>|<get-id>(){}[0]
    final val publicFlags // dev.kord.core.cache.data/UserData.publicFlags|{}publicFlags[0]
        final fun <get-publicFlags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserFlags> // dev.kord.core.cache.data/UserData.publicFlags.<get-publicFlags>|<get-publicFlags>(){}[0]
    final val username // dev.kord.core.cache.data/UserData.username|{}username[0]
        final fun <get-username>(): kotlin/String // dev.kord.core.cache.data/UserData.username.<get-username>|<get-username>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/UserData.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/UserData.component10|component10(){}[0]
    final fun component2(): kotlin/String // dev.kord.core.cache.data/UserData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/UserData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.core.cache.data/UserData.component4|component4(){}[0]
    final fun component5(): kotlin/String? // dev.kord.core.cache.data/UserData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/UserData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserFlags> // dev.kord.core.cache.data/UserData.component7|component7(){}[0]
    final fun component8(): kotlin/String? // dev.kord.core.cache.data/UserData.component8|component8(){}[0]
    final fun component9(): kotlin/Int? // dev.kord.core.cache.data/UserData.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlin/String? = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserFlags> = ..., kotlin/String? = ..., kotlin/Int? = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...): dev.kord.core.cache.data/UserData // dev.kord.core.cache.data/UserData.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlin.String?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.UserFlags>;kotlin.String?;kotlin.Int?;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/UserData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/UserData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/UserData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/UserData> { // dev.kord.core.cache.data/UserData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/UserData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/UserData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/UserData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/UserData // dev.kord.core.cache.data/UserData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/UserData) // dev.kord.core.cache.data/UserData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.UserData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/UserData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/UserData.Companion.$childSerializers|{}$childSerializers[0]
        final val description // dev.kord.core.cache.data/UserData.Companion.description|{}description[0]
            final fun <get-description>(): dev.kord.cache.api.data/DataDescription<dev.kord.core.cache.data/UserData, dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/UserData.Companion.description.<get-description>|<get-description>(){}[0]

        final fun from(dev.kord.common.entity/DiscordOptionallyMemberUser): dev.kord.core.cache.data/UserData // dev.kord.core.cache.data/UserData.Companion.from|from(dev.kord.common.entity.DiscordOptionallyMemberUser){}[0]
        final fun from(dev.kord.common.entity/DiscordUser): dev.kord.core.cache.data/UserData // dev.kord.core.cache.data/UserData.Companion.from|from(dev.kord.common.entity.DiscordUser){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/UserData> // dev.kord.core.cache.data/UserData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/VoiceStateData { // dev.kord.core.cache.data/VoiceStateData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake?, dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/String, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, dev.kord.common.entity.optional/OptionalBoolean = ..., kotlinx.datetime/Instant?) // dev.kord.core.cache.data/VoiceStateData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.String;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;dev.kord.common.entity.optional.OptionalBoolean;kotlinx.datetime.Instant?){}[0]

    final val channelId // dev.kord.core.cache.data/VoiceStateData.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/VoiceStateData.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val deaf // dev.kord.core.cache.data/VoiceStateData.deaf|{}deaf[0]
        final fun <get-deaf>(): kotlin/Boolean // dev.kord.core.cache.data/VoiceStateData.deaf.<get-deaf>|<get-deaf>(){}[0]
    final val guildId // dev.kord.core.cache.data/VoiceStateData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/VoiceStateData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val memberId // dev.kord.core.cache.data/VoiceStateData.memberId|{}memberId[0]
        final fun <get-memberId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/VoiceStateData.memberId.<get-memberId>|<get-memberId>(){}[0]
    final val mute // dev.kord.core.cache.data/VoiceStateData.mute|{}mute[0]
        final fun <get-mute>(): kotlin/Boolean // dev.kord.core.cache.data/VoiceStateData.mute.<get-mute>|<get-mute>(){}[0]
    final val requestToSpeakTimestamp // dev.kord.core.cache.data/VoiceStateData.requestToSpeakTimestamp|{}requestToSpeakTimestamp[0]
        final fun <get-requestToSpeakTimestamp>(): kotlinx.datetime/Instant? // dev.kord.core.cache.data/VoiceStateData.requestToSpeakTimestamp.<get-requestToSpeakTimestamp>|<get-requestToSpeakTimestamp>(){}[0]
    final val selfDeaf // dev.kord.core.cache.data/VoiceStateData.selfDeaf|{}selfDeaf[0]
        final fun <get-selfDeaf>(): kotlin/Boolean // dev.kord.core.cache.data/VoiceStateData.selfDeaf.<get-selfDeaf>|<get-selfDeaf>(){}[0]
    final val selfMute // dev.kord.core.cache.data/VoiceStateData.selfMute|{}selfMute[0]
        final fun <get-selfMute>(): kotlin/Boolean // dev.kord.core.cache.data/VoiceStateData.selfMute.<get-selfMute>|<get-selfMute>(){}[0]
    final val selfStream // dev.kord.core.cache.data/VoiceStateData.selfStream|{}selfStream[0]
        final fun <get-selfStream>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/VoiceStateData.selfStream.<get-selfStream>|<get-selfStream>(){}[0]
    final val selfVideo // dev.kord.core.cache.data/VoiceStateData.selfVideo|{}selfVideo[0]
        final fun <get-selfVideo>(): kotlin/Boolean // dev.kord.core.cache.data/VoiceStateData.selfVideo.<get-selfVideo>|<get-selfVideo>(){}[0]
    final val sessionId // dev.kord.core.cache.data/VoiceStateData.sessionId|{}sessionId[0]
        final fun <get-sessionId>(): kotlin/String // dev.kord.core.cache.data/VoiceStateData.sessionId.<get-sessionId>|<get-sessionId>(){}[0]
    final val suppress // dev.kord.core.cache.data/VoiceStateData.suppress|{}suppress[0]
        final fun <get-suppress>(): kotlin/Boolean // dev.kord.core.cache.data/VoiceStateData.suppress.<get-suppress>|<get-suppress>(){}[0]
    final val userId // dev.kord.core.cache.data/VoiceStateData.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/VoiceStateData.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/VoiceStateData.component1|component1(){}[0]
    final fun component10(): kotlin/Boolean // dev.kord.core.cache.data/VoiceStateData.component10|component10(){}[0]
    final fun component11(): kotlin/Boolean // dev.kord.core.cache.data/VoiceStateData.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/VoiceStateData.component12|component12(){}[0]
    final fun component13(): kotlinx.datetime/Instant? // dev.kord.core.cache.data/VoiceStateData.component13|component13(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/VoiceStateData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/VoiceStateData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/VoiceStateData.component4|component4(){}[0]
    final fun component5(): kotlin/String // dev.kord.core.cache.data/VoiceStateData.component5|component5(){}[0]
    final fun component6(): kotlin/Boolean // dev.kord.core.cache.data/VoiceStateData.component6|component6(){}[0]
    final fun component7(): kotlin/Boolean // dev.kord.core.cache.data/VoiceStateData.component7|component7(){}[0]
    final fun component8(): kotlin/Boolean // dev.kord.core.cache.data/VoiceStateData.component8|component8(){}[0]
    final fun component9(): kotlin/Boolean // dev.kord.core.cache.data/VoiceStateData.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake? = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/String = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., kotlinx.datetime/Instant? = ...): dev.kord.core.cache.data/VoiceStateData // dev.kord.core.cache.data/VoiceStateData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.String;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;dev.kord.common.entity.optional.OptionalBoolean;kotlinx.datetime.Instant?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/VoiceStateData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/VoiceStateData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/VoiceStateData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/VoiceStateData> { // dev.kord.core.cache.data/VoiceStateData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/VoiceStateData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/VoiceStateData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/VoiceStateData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/VoiceStateData // dev.kord.core.cache.data/VoiceStateData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/VoiceStateData) // dev.kord.core.cache.data/VoiceStateData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.VoiceStateData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/VoiceStateData.Companion|null[0]
        final val description // dev.kord.core.cache.data/VoiceStateData.Companion.description|{}description[0]
            final fun <get-description>(): dev.kord.cache.api.data/DataDescription<dev.kord.core.cache.data/VoiceStateData, kotlin/String> // dev.kord.core.cache.data/VoiceStateData.Companion.description.<get-description>|<get-description>(){}[0]

        final fun from(dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordVoiceState): dev.kord.core.cache.data/VoiceStateData // dev.kord.core.cache.data/VoiceStateData.Companion.from|from(dev.kord.common.entity.Snowflake;dev.kord.common.entity.DiscordVoiceState){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/VoiceStateData> // dev.kord.core.cache.data/VoiceStateData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/WebhookData { // dev.kord.core.cache.data/WebhookData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/WebhookType, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/String? = ..., kotlin/String? = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity/Snowflake?) // dev.kord.core.cache.data/WebhookData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.WebhookType;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.String?;kotlin.String?;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.Snowflake?){}[0]

    final val applicationId // dev.kord.core.cache.data/WebhookData.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/WebhookData.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val avatar // dev.kord.core.cache.data/WebhookData.avatar|{}avatar[0]
        final fun <get-avatar>(): kotlin/String? // dev.kord.core.cache.data/WebhookData.avatar.<get-avatar>|<get-avatar>(){}[0]
    final val channelId // dev.kord.core.cache.data/WebhookData.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/WebhookData.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val guildId // dev.kord.core.cache.data/WebhookData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/WebhookData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.core.cache.data/WebhookData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/WebhookData.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.core.cache.data/WebhookData.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.core.cache.data/WebhookData.name.<get-name>|<get-name>(){}[0]
    final val token // dev.kord.core.cache.data/WebhookData.token|{}token[0]
        final fun <get-token>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/WebhookData.token.<get-token>|<get-token>(){}[0]
    final val type // dev.kord.core.cache.data/WebhookData.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/WebhookType // dev.kord.core.cache.data/WebhookData.type.<get-type>|<get-type>(){}[0]
    final val userId // dev.kord.core.cache.data/WebhookData.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/WebhookData.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/WebhookData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/WebhookType // dev.kord.core.cache.data/WebhookData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/WebhookData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/WebhookData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.cache.data/WebhookData.component5|component5(){}[0]
    final fun component6(): kotlin/String? // dev.kord.core.cache.data/WebhookData.component6|component6(){}[0]
    final fun component7(): kotlin/String? // dev.kord.core.cache.data/WebhookData.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/WebhookData.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/WebhookData.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/WebhookType = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/String? = ..., kotlin/String? = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity/Snowflake? = ...): dev.kord.core.cache.data/WebhookData // dev.kord.core.cache.data/WebhookData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.WebhookType;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.String?;kotlin.String?;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.Snowflake?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/WebhookData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/WebhookData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/WebhookData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/WebhookData> { // dev.kord.core.cache.data/WebhookData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/WebhookData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/WebhookData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/WebhookData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/WebhookData // dev.kord.core.cache.data/WebhookData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/WebhookData) // dev.kord.core.cache.data/WebhookData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.WebhookData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/WebhookData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/WebhookData.Companion.$childSerializers|{}$childSerializers[0]
        final val description // dev.kord.core.cache.data/WebhookData.Companion.description|{}description[0]
            final fun <get-description>(): dev.kord.cache.api.data/DataDescription<dev.kord.core.cache.data/WebhookData, dev.kord.common.entity/Snowflake> // dev.kord.core.cache.data/WebhookData.Companion.description.<get-description>|<get-description>(){}[0]

        final fun from(dev.kord.common.entity/DiscordWebhook): dev.kord.core.cache.data/WebhookData // dev.kord.core.cache.data/WebhookData.Companion.from|from(dev.kord.common.entity.DiscordWebhook){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/WebhookData> // dev.kord.core.cache.data/WebhookData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/WelcomeScreenChannelData { // dev.kord.core.cache.data/WelcomeScreenChannelData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake?, kotlin/String?) // dev.kord.core.cache.data/WelcomeScreenChannelData.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake?;kotlin.String?){}[0]

    final val channelId // dev.kord.core.cache.data/WelcomeScreenChannelData.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/WelcomeScreenChannelData.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val description // dev.kord.core.cache.data/WelcomeScreenChannelData.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.core.cache.data/WelcomeScreenChannelData.description.<get-description>|<get-description>(){}[0]
    final val emojiId // dev.kord.core.cache.data/WelcomeScreenChannelData.emojiId|{}emojiId[0]
        final fun <get-emojiId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/WelcomeScreenChannelData.emojiId.<get-emojiId>|<get-emojiId>(){}[0]
    final val emojiName // dev.kord.core.cache.data/WelcomeScreenChannelData.emojiName|{}emojiName[0]
        final fun <get-emojiName>(): kotlin/String? // dev.kord.core.cache.data/WelcomeScreenChannelData.emojiName.<get-emojiName>|<get-emojiName>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.cache.data/WelcomeScreenChannelData.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.core.cache.data/WelcomeScreenChannelData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake? // dev.kord.core.cache.data/WelcomeScreenChannelData.component3|component3(){}[0]
    final fun component4(): kotlin/String? // dev.kord.core.cache.data/WelcomeScreenChannelData.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., dev.kord.common.entity/Snowflake? = ..., kotlin/String? = ...): dev.kord.core.cache.data/WelcomeScreenChannelData // dev.kord.core.cache.data/WelcomeScreenChannelData.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake?;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/WelcomeScreenChannelData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/WelcomeScreenChannelData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/WelcomeScreenChannelData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/WelcomeScreenChannelData> { // dev.kord.core.cache.data/WelcomeScreenChannelData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/WelcomeScreenChannelData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/WelcomeScreenChannelData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/WelcomeScreenChannelData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/WelcomeScreenChannelData // dev.kord.core.cache.data/WelcomeScreenChannelData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/WelcomeScreenChannelData) // dev.kord.core.cache.data/WelcomeScreenChannelData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.WelcomeScreenChannelData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/WelcomeScreenChannelData.Companion|null[0]
        final fun from(dev.kord.common.entity/DiscordWelcomeScreenChannel): dev.kord.core.cache.data/WelcomeScreenChannelData // dev.kord.core.cache.data/WelcomeScreenChannelData.Companion.from|from(dev.kord.common.entity.DiscordWelcomeScreenChannel){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/WelcomeScreenChannelData> // dev.kord.core.cache.data/WelcomeScreenChannelData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache.data/WelcomeScreenData { // dev.kord.core.cache.data/WelcomeScreenData|null[0]
    constructor <init>(kotlin/String?, kotlin.collections/List<dev.kord.core.cache.data/WelcomeScreenChannelData>) // dev.kord.core.cache.data/WelcomeScreenData.<init>|<init>(kotlin.String?;kotlin.collections.List<dev.kord.core.cache.data.WelcomeScreenChannelData>){}[0]

    final val description // dev.kord.core.cache.data/WelcomeScreenData.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.core.cache.data/WelcomeScreenData.description.<get-description>|<get-description>(){}[0]
    final val welcomeChannels // dev.kord.core.cache.data/WelcomeScreenData.welcomeChannels|{}welcomeChannels[0]
        final fun <get-welcomeChannels>(): kotlin.collections/List<dev.kord.core.cache.data/WelcomeScreenChannelData> // dev.kord.core.cache.data/WelcomeScreenData.welcomeChannels.<get-welcomeChannels>|<get-welcomeChannels>(){}[0]

    final fun component1(): kotlin/String? // dev.kord.core.cache.data/WelcomeScreenData.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<dev.kord.core.cache.data/WelcomeScreenChannelData> // dev.kord.core.cache.data/WelcomeScreenData.component2|component2(){}[0]
    final fun copy(kotlin/String? = ..., kotlin.collections/List<dev.kord.core.cache.data/WelcomeScreenChannelData> = ...): dev.kord.core.cache.data/WelcomeScreenData // dev.kord.core.cache.data/WelcomeScreenData.copy|copy(kotlin.String?;kotlin.collections.List<dev.kord.core.cache.data.WelcomeScreenChannelData>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.cache.data/WelcomeScreenData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.cache.data/WelcomeScreenData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache.data/WelcomeScreenData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.cache.data/WelcomeScreenData> { // dev.kord.core.cache.data/WelcomeScreenData.$serializer|null[0]
        final val descriptor // dev.kord.core.cache.data/WelcomeScreenData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/WelcomeScreenData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.cache.data/WelcomeScreenData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.cache.data/WelcomeScreenData // dev.kord.core.cache.data/WelcomeScreenData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.cache.data/WelcomeScreenData) // dev.kord.core.cache.data/WelcomeScreenData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.cache.data.WelcomeScreenData){}[0]
    }

    final object Companion { // dev.kord.core.cache.data/WelcomeScreenData.Companion|null[0]
        final val $childSerializers // dev.kord.core.cache.data/WelcomeScreenData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordWelcomeScreen): dev.kord.core.cache.data/WelcomeScreenData // dev.kord.core.cache.data/WelcomeScreenData.Companion.from|from(dev.kord.common.entity.DiscordWelcomeScreen){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/WelcomeScreenData> // dev.kord.core.cache.data/WelcomeScreenData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.cache/CachingGateway : dev.kord.cache.api/DataCache, dev.kord.gateway/Gateway, kotlinx.coroutines/CoroutineScope { // dev.kord.core.cache/CachingGateway|null[0]
    constructor <init>(dev.kord.cache.api/DataCache, dev.kord.gateway/Gateway, kotlinx.coroutines/CoroutineDispatcher = ...) // dev.kord.core.cache/CachingGateway.<init>|<init>(dev.kord.cache.api.DataCache;dev.kord.gateway.Gateway;kotlinx.coroutines.CoroutineDispatcher){}[0]

    final val coroutineContext // dev.kord.core.cache/CachingGateway.coroutineContext|{}coroutineContext[0]
        final fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // dev.kord.core.cache/CachingGateway.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]
    final val events // dev.kord.core.cache/CachingGateway.events|{}events[0]
        final fun <get-events>(): kotlinx.coroutines.flow/SharedFlow<dev.kord.gateway/Event> // dev.kord.core.cache/CachingGateway.events.<get-events>|<get-events>(){}[0]
    final val ping // dev.kord.core.cache/CachingGateway.ping|{}ping[0]
        final fun <get-ping>(): kotlinx.coroutines.flow/StateFlow<kotlin.time/Duration?> // dev.kord.core.cache/CachingGateway.ping.<get-ping>|<get-ping>(){}[0]

    final fun <#A1: kotlin/Any> getEntry(kotlin.reflect/KType): dev.kord.cache.api/DataEntryCache<#A1>? // dev.kord.core.cache/CachingGateway.getEntry|getEntry(kotlin.reflect.KType){0ยง<kotlin.Any>}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache/CachingGateway.toString|toString(){}[0]
    final suspend fun detach() // dev.kord.core.cache/CachingGateway.detach|detach(){}[0]
    final suspend fun register(dev.kord.cache.api.data/DataDescription<out kotlin/Any, out kotlin/Any>) // dev.kord.core.cache/CachingGateway.register|register(dev.kord.cache.api.data.DataDescription<out|kotlin.Any,out|kotlin.Any>){}[0]
    final suspend fun register(kotlin.collections/Iterable<dev.kord.cache.api.data/DataDescription<out kotlin/Any, out kotlin/Any>>) // dev.kord.core.cache/CachingGateway.register|register(kotlin.collections.Iterable<dev.kord.cache.api.data.DataDescription<out|kotlin.Any,out|kotlin.Any>>){}[0]
    final suspend fun register(kotlin/Array<out dev.kord.cache.api.data/DataDescription<out kotlin/Any, out kotlin/Any>>...) // dev.kord.core.cache/CachingGateway.register|register(kotlin.Array<out|dev.kord.cache.api.data.DataDescription<out|kotlin.Any,out|kotlin.Any>>...){}[0]
    final suspend fun send(dev.kord.gateway/Command) // dev.kord.core.cache/CachingGateway.send|send(dev.kord.gateway.Command){}[0]
    final suspend fun start(dev.kord.gateway/GatewayConfiguration) // dev.kord.core.cache/CachingGateway.start|start(dev.kord.gateway.GatewayConfiguration){}[0]
    final suspend fun stop() // dev.kord.core.cache/CachingGateway.stop|stop(){}[0]
}

final class dev.kord.core.cache/DataCacheView : dev.kord.cache.api/DataCache { // dev.kord.core.cache/DataCacheView|null[0]
    constructor <init>(dev.kord.cache.api/DataCache) // dev.kord.core.cache/DataCacheView.<init>|<init>(dev.kord.cache.api.DataCache){}[0]

    final fun <#A1: kotlin/Any> getEntry(kotlin.reflect/KType): dev.kord.cache.api/DataEntryCache<#A1>? // dev.kord.core.cache/DataCacheView.getEntry|getEntry(kotlin.reflect.KType){0ยง<kotlin.Any>}[0]
    final fun toString(): kotlin/String // dev.kord.core.cache/DataCacheView.toString|toString(){}[0]
    final suspend fun register(dev.kord.cache.api.data/DataDescription<out kotlin/Any, out kotlin/Any>) // dev.kord.core.cache/DataCacheView.register|register(dev.kord.cache.api.data.DataDescription<out|kotlin.Any,out|kotlin.Any>){}[0]
    final suspend fun register(kotlin.collections/Iterable<dev.kord.cache.api.data/DataDescription<out kotlin/Any, out kotlin/Any>>) // dev.kord.core.cache/DataCacheView.register|register(kotlin.collections.Iterable<dev.kord.cache.api.data.DataDescription<out|kotlin.Any,out|kotlin.Any>>){}[0]
    final suspend fun register(kotlin/Array<out dev.kord.cache.api.data/DataDescription<out kotlin/Any, out kotlin/Any>>...) // dev.kord.core.cache/DataCacheView.register|register(kotlin.Array<out|dev.kord.cache.api.data.DataDescription<out|kotlin.Any,out|kotlin.Any>>...){}[0]
}

final class dev.kord.core.cache/KordCacheBuilder { // dev.kord.core.cache/KordCacheBuilder|null[0]
    constructor <init>() // dev.kord.core.cache/KordCacheBuilder.<init>|<init>(){}[0]

    final var defaultGenerator // dev.kord.core.cache/KordCacheBuilder.defaultGenerator|{}defaultGenerator[0]
        final fun <get-defaultGenerator>(): kotlin/Function2<dev.kord.cache.api/DataCache, dev.kord.cache.api.data/DataDescription<kotlin/Any, kotlin/Any>, dev.kord.cache.api/DataEntryCache<out kotlin/Any>> // dev.kord.core.cache/KordCacheBuilder.defaultGenerator.<get-defaultGenerator>|<get-defaultGenerator>(){}[0]
        final fun <set-defaultGenerator>(kotlin/Function2<dev.kord.cache.api/DataCache, dev.kord.cache.api.data/DataDescription<kotlin/Any, kotlin/Any>, dev.kord.cache.api/DataEntryCache<out kotlin/Any>>) // dev.kord.core.cache/KordCacheBuilder.defaultGenerator.<set-defaultGenerator>|<set-defaultGenerator>(kotlin.Function2<dev.kord.cache.api.DataCache,dev.kord.cache.api.data.DataDescription<kotlin.Any,kotlin.Any>,dev.kord.cache.api.DataEntryCache<out|kotlin.Any>>){}[0]

    final fun <#A1: kotlin/Any, #B1: kotlin/Any> forDescription(dev.kord.cache.api.data/DataDescription<#A1, #B1>, kotlin/Function2<dev.kord.cache.api/DataCache, dev.kord.cache.api.data/DataDescription<#B1, #A1>, dev.kord.cache.api/DataEntryCache<out #B1>>?) // dev.kord.core.cache/KordCacheBuilder.forDescription|forDescription(dev.kord.cache.api.data.DataDescription<0:0,0:1>;kotlin.Function2<dev.kord.cache.api.DataCache,dev.kord.cache.api.data.DataDescription<0:1,0:0>,dev.kord.cache.api.DataEntryCache<out|0:1>>?){0ยง<kotlin.Any>;1ยง<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any, #B1: kotlin/Any> none(): kotlin/Function2<dev.kord.cache.api/DataCache, dev.kord.cache.api.data/DataDescription<#B1, #A1>, dev.kord.cache.api/DataEntryCache<out #B1>> // dev.kord.core.cache/KordCacheBuilder.none|none(){0ยง<kotlin.Any>;1ยง<kotlin.Any>}[0]
    final fun autoModerationRules(kotlin/Function2<dev.kord.cache.api/DataCache, dev.kord.cache.api.data/DataDescription<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/AutoModerationRuleData>, dev.kord.cache.api/DataEntryCache<out dev.kord.common.entity/Snowflake>>) // dev.kord.core.cache/KordCacheBuilder.autoModerationRules|autoModerationRules(kotlin.Function2<dev.kord.cache.api.DataCache,dev.kord.cache.api.data.DataDescription<dev.kord.common.entity.Snowflake,dev.kord.core.cache.data.AutoModerationRuleData>,dev.kord.cache.api.DataEntryCache<out|dev.kord.common.entity.Snowflake>>){}[0]
    final fun build(): dev.kord.cache.api/DataCache // dev.kord.core.cache/KordCacheBuilder.build|build(){}[0]
    final fun channels(kotlin/Function2<dev.kord.cache.api/DataCache, dev.kord.cache.api.data/DataDescription<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/ChannelData>, dev.kord.cache.api/DataEntryCache<out dev.kord.common.entity/Snowflake>>) // dev.kord.core.cache/KordCacheBuilder.channels|channels(kotlin.Function2<dev.kord.cache.api.DataCache,dev.kord.cache.api.data.DataDescription<dev.kord.common.entity.Snowflake,dev.kord.core.cache.data.ChannelData>,dev.kord.cache.api.DataEntryCache<out|dev.kord.common.entity.Snowflake>>){}[0]
    final fun disableAll() // dev.kord.core.cache/KordCacheBuilder.disableAll|disableAll(){}[0]
    final fun emojis(kotlin/Function2<dev.kord.cache.api/DataCache, dev.kord.cache.api.data/DataDescription<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/EmojiData>, dev.kord.cache.api/DataEntryCache<out dev.kord.common.entity/Snowflake>>) // dev.kord.core.cache/KordCacheBuilder.emojis|emojis(kotlin.Function2<dev.kord.cache.api.DataCache,dev.kord.cache.api.data.DataDescription<dev.kord.common.entity.Snowflake,dev.kord.core.cache.data.EmojiData>,dev.kord.cache.api.DataEntryCache<out|dev.kord.common.entity.Snowflake>>){}[0]
    final fun guilds(kotlin/Function2<dev.kord.cache.api/DataCache, dev.kord.cache.api.data/DataDescription<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/GuildData>, dev.kord.cache.api/DataEntryCache<out dev.kord.common.entity/Snowflake>>) // dev.kord.core.cache/KordCacheBuilder.guilds|guilds(kotlin.Function2<dev.kord.cache.api.DataCache,dev.kord.cache.api.data.DataDescription<dev.kord.common.entity.Snowflake,dev.kord.core.cache.data.GuildData>,dev.kord.cache.api.DataEntryCache<out|dev.kord.common.entity.Snowflake>>){}[0]
    final fun members(kotlin/Function2<dev.kord.cache.api/DataCache, dev.kord.cache.api.data/DataDescription<kotlin/String, dev.kord.core.cache.data/MemberData>, dev.kord.cache.api/DataEntryCache<out kotlin/String>>) // dev.kord.core.cache/KordCacheBuilder.members|members(kotlin.Function2<dev.kord.cache.api.DataCache,dev.kord.cache.api.data.DataDescription<kotlin.String,dev.kord.core.cache.data.MemberData>,dev.kord.cache.api.DataEntryCache<out|kotlin.String>>){}[0]
    final fun messages(kotlin/Function2<dev.kord.cache.api/DataCache, dev.kord.cache.api.data/DataDescription<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/MessageData>, dev.kord.cache.api/DataEntryCache<out dev.kord.common.entity/Snowflake>>) // dev.kord.core.cache/KordCacheBuilder.messages|messages(kotlin.Function2<dev.kord.cache.api.DataCache,dev.kord.cache.api.data.DataDescription<dev.kord.common.entity.Snowflake,dev.kord.core.cache.data.MessageData>,dev.kord.cache.api.DataEntryCache<out|dev.kord.common.entity.Snowflake>>){}[0]
    final fun presences(kotlin/Function2<dev.kord.cache.api/DataCache, dev.kord.cache.api.data/DataDescription<kotlin/String, dev.kord.core.cache.data/PresenceData>, dev.kord.cache.api/DataEntryCache<out kotlin/String>>) // dev.kord.core.cache/KordCacheBuilder.presences|presences(kotlin.Function2<dev.kord.cache.api.DataCache,dev.kord.cache.api.data.DataDescription<kotlin.String,dev.kord.core.cache.data.PresenceData>,dev.kord.cache.api.DataEntryCache<out|kotlin.String>>){}[0]
    final fun roles(kotlin/Function2<dev.kord.cache.api/DataCache, dev.kord.cache.api.data/DataDescription<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/RoleData>, dev.kord.cache.api/DataEntryCache<out dev.kord.common.entity/Snowflake>>) // dev.kord.core.cache/KordCacheBuilder.roles|roles(kotlin.Function2<dev.kord.cache.api.DataCache,dev.kord.cache.api.data.DataDescription<dev.kord.common.entity.Snowflake,dev.kord.core.cache.data.RoleData>,dev.kord.cache.api.DataEntryCache<out|dev.kord.common.entity.Snowflake>>){}[0]
    final fun stickers(kotlin/Function2<dev.kord.cache.api/DataCache, dev.kord.cache.api.data/DataDescription<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/StickerData>, dev.kord.cache.api/DataEntryCache<out dev.kord.common.entity/Snowflake>>) // dev.kord.core.cache/KordCacheBuilder.stickers|stickers(kotlin.Function2<dev.kord.cache.api.DataCache,dev.kord.cache.api.data.DataDescription<dev.kord.common.entity.Snowflake,dev.kord.core.cache.data.StickerData>,dev.kord.cache.api.DataEntryCache<out|dev.kord.common.entity.Snowflake>>){}[0]
    final fun users(kotlin/Function2<dev.kord.cache.api/DataCache, dev.kord.cache.api.data/DataDescription<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/UserData>, dev.kord.cache.api/DataEntryCache<out dev.kord.common.entity/Snowflake>>) // dev.kord.core.cache/KordCacheBuilder.users|users(kotlin.Function2<dev.kord.cache.api.DataCache,dev.kord.cache.api.data.DataDescription<dev.kord.common.entity.Snowflake,dev.kord.core.cache.data.UserData>,dev.kord.cache.api.DataEntryCache<out|dev.kord.common.entity.Snowflake>>){}[0]
    final fun voiceState(kotlin/Function2<dev.kord.cache.api/DataCache, dev.kord.cache.api.data/DataDescription<kotlin/String, dev.kord.core.cache.data/VoiceStateData>, dev.kord.cache.api/DataEntryCache<out kotlin/String>>) // dev.kord.core.cache/KordCacheBuilder.voiceState|voiceState(kotlin.Function2<dev.kord.cache.api.DataCache,dev.kord.cache.api.data.DataDescription<kotlin.String,dev.kord.core.cache.data.VoiceStateData>,dev.kord.cache.api.DataEntryCache<out|kotlin.String>>){}[0]
    final fun webhooks(kotlin/Function2<dev.kord.cache.api/DataCache, dev.kord.cache.api.data/DataDescription<dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/WebhookData>, dev.kord.cache.api/DataEntryCache<out dev.kord.common.entity/Snowflake>>) // dev.kord.core.cache/KordCacheBuilder.webhooks|webhooks(kotlin.Function2<dev.kord.cache.api.DataCache,dev.kord.cache.api.data.DataDescription<dev.kord.common.entity.Snowflake,dev.kord.core.cache.data.WebhookData>,dev.kord.cache.api.DataEntryCache<out|dev.kord.common.entity.Snowflake>>){}[0]
}

final class dev.kord.core.cache/ViewKeys { // dev.kord.core.cache/ViewKeys|null[0]
    constructor <init>(kotlin.collections/MutableSet<kotlin/Any> = ...) // dev.kord.core.cache/ViewKeys.<init>|<init>(kotlin.collections.MutableSet<kotlin.Any>){}[0]

    final val keys // dev.kord.core.cache/ViewKeys.keys|{}keys[0]
        final fun <get-keys>(): kotlin.collections/Set<kotlin/Any> // dev.kord.core.cache/ViewKeys.keys.<get-keys>|<get-keys>(){}[0]

    final fun add(kotlin/Any) // dev.kord.core.cache/ViewKeys.add|add(kotlin.Any){}[0]
}

final class dev.kord.core.entity.application/ApplicationCommandParameter { // dev.kord.core.entity.application/ApplicationCommandParameter|null[0]
    constructor <init>(dev.kord.core.cache.data/ApplicationCommandParameterData) // dev.kord.core.entity.application/ApplicationCommandParameter.<init>|<init>(dev.kord.core.cache.data.ApplicationCommandParameterData){}[0]

    final val channelTypes // dev.kord.core.entity.application/ApplicationCommandParameter.channelTypes|{}channelTypes[0]
        final fun <get-channelTypes>(): kotlin.collections/List<dev.kord.common.entity/ChannelType> // dev.kord.core.entity.application/ApplicationCommandParameter.channelTypes.<get-channelTypes>|<get-channelTypes>(){}[0]
    final val choices // dev.kord.core.entity.application/ApplicationCommandParameter.choices|{}choices[0]
        final fun <get-choices>(): kotlin.collections/Map<kotlin/String, kotlin/String> // dev.kord.core.entity.application/ApplicationCommandParameter.choices.<get-choices>|<get-choices>(){}[0]
    final val data // dev.kord.core.entity.application/ApplicationCommandParameter.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ApplicationCommandParameterData // dev.kord.core.entity.application/ApplicationCommandParameter.data.<get-data>|<get-data>(){}[0]
    final val description // dev.kord.core.entity.application/ApplicationCommandParameter.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.core.entity.application/ApplicationCommandParameter.description.<get-description>|<get-description>(){}[0]
    final val isRequired // dev.kord.core.entity.application/ApplicationCommandParameter.isRequired|{}isRequired[0]
        final fun <get-isRequired>(): kotlin/Boolean // dev.kord.core.entity.application/ApplicationCommandParameter.isRequired.<get-isRequired>|<get-isRequired>(){}[0]
    final val name // dev.kord.core.entity.application/ApplicationCommandParameter.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.entity.application/ApplicationCommandParameter.name.<get-name>|<get-name>(){}[0]
}

final class dev.kord.core.entity.application/ApplicationCommandPermissions { // dev.kord.core.entity.application/ApplicationCommandPermissions|null[0]
    constructor <init>(dev.kord.core.cache.data/GuildApplicationCommandPermissionsData) // dev.kord.core.entity.application/ApplicationCommandPermissions.<init>|<init>(dev.kord.core.cache.data.GuildApplicationCommandPermissionsData){}[0]

    final val applicationId // dev.kord.core.entity.application/ApplicationCommandPermissions.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.application/ApplicationCommandPermissions.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val data // dev.kord.core.entity.application/ApplicationCommandPermissions.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/GuildApplicationCommandPermissionsData // dev.kord.core.entity.application/ApplicationCommandPermissions.data.<get-data>|<get-data>(){}[0]
    final val guildId // dev.kord.core.entity.application/ApplicationCommandPermissions.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.application/ApplicationCommandPermissions.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.core.entity.application/ApplicationCommandPermissions.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.application/ApplicationCommandPermissions.id.<get-id>|<get-id>(){}[0]
    final val permissions // dev.kord.core.entity.application/ApplicationCommandPermissions.permissions|{}permissions[0]
        final fun <get-permissions>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.application/GuildApplicationCommandPermission> // dev.kord.core.entity.application/ApplicationCommandPermissions.permissions.<get-permissions>|<get-permissions>(){}[0]
}

final class dev.kord.core.entity.application/ApplicationRoleConnectionMetadata : dev.kord.core/KordObject { // dev.kord.core.entity.application/ApplicationRoleConnectionMetadata|null[0]
    constructor <init>(dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata, dev.kord.core/Kord) // dev.kord.core.entity.application/ApplicationRoleConnectionMetadata.<init>|<init>(dev.kord.common.entity.DiscordApplicationRoleConnectionMetadata;dev.kord.core.Kord){}[0]

    final val data // dev.kord.core.entity.application/ApplicationRoleConnectionMetadata.data|{}data[0]
        final fun <get-data>(): dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata // dev.kord.core.entity.application/ApplicationRoleConnectionMetadata.data.<get-data>|<get-data>(){}[0]
    final val description // dev.kord.core.entity.application/ApplicationRoleConnectionMetadata.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.core.entity.application/ApplicationRoleConnectionMetadata.description.<get-description>|<get-description>(){}[0]
    final val descriptionLocalizations // dev.kord.core.entity.application/ApplicationRoleConnectionMetadata.descriptionLocalizations|{}descriptionLocalizations[0]
        final fun <get-descriptionLocalizations>(): kotlin.collections/Map<dev.kord.common/Locale, kotlin/String> // dev.kord.core.entity.application/ApplicationRoleConnectionMetadata.descriptionLocalizations.<get-descriptionLocalizations>|<get-descriptionLocalizations>(){}[0]
    final val key // dev.kord.core.entity.application/ApplicationRoleConnectionMetadata.key|{}key[0]
        final fun <get-key>(): kotlin/String // dev.kord.core.entity.application/ApplicationRoleConnectionMetadata.key.<get-key>|<get-key>(){}[0]
    final val kord // dev.kord.core.entity.application/ApplicationRoleConnectionMetadata.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.application/ApplicationRoleConnectionMetadata.kord.<get-kord>|<get-kord>(){}[0]
    final val name // dev.kord.core.entity.application/ApplicationRoleConnectionMetadata.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.entity.application/ApplicationRoleConnectionMetadata.name.<get-name>|<get-name>(){}[0]
    final val nameLocalizations // dev.kord.core.entity.application/ApplicationRoleConnectionMetadata.nameLocalizations|{}nameLocalizations[0]
        final fun <get-nameLocalizations>(): kotlin.collections/Map<dev.kord.common/Locale, kotlin/String> // dev.kord.core.entity.application/ApplicationRoleConnectionMetadata.nameLocalizations.<get-nameLocalizations>|<get-nameLocalizations>(){}[0]
    final val type // dev.kord.core.entity.application/ApplicationRoleConnectionMetadata.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ApplicationRoleConnectionMetadataType // dev.kord.core.entity.application/ApplicationRoleConnectionMetadata.type.<get-type>|<get-type>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity.application/ApplicationRoleConnectionMetadata.toString|toString(){}[0]
}

final class dev.kord.core.entity.application/ChatInputGroup { // dev.kord.core.entity.application/ChatInputGroup|null[0]
    constructor <init>(dev.kord.core.cache.data/ApplicationCommandGroupData) // dev.kord.core.entity.application/ChatInputGroup.<init>|<init>(dev.kord.core.cache.data.ApplicationCommandGroupData){}[0]

    final val data // dev.kord.core.entity.application/ChatInputGroup.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ApplicationCommandGroupData // dev.kord.core.entity.application/ChatInputGroup.data.<get-data>|<get-data>(){}[0]
    final val description // dev.kord.core.entity.application/ChatInputGroup.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.core.entity.application/ChatInputGroup.description.<get-description>|<get-description>(){}[0]
    final val name // dev.kord.core.entity.application/ChatInputGroup.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.entity.application/ChatInputGroup.name.<get-name>|<get-name>(){}[0]
    final val subcommands // dev.kord.core.entity.application/ChatInputGroup.subcommands|{}subcommands[0]
        final fun <get-subcommands>(): kotlin.collections/Map<kotlin/String, dev.kord.core.entity.application/ChatInputSubCommand> // dev.kord.core.entity.application/ChatInputGroup.subcommands.<get-subcommands>|<get-subcommands>(){}[0]
}

final class dev.kord.core.entity.application/ChatInputSubCommand { // dev.kord.core.entity.application/ChatInputSubCommand|null[0]
    constructor <init>(dev.kord.core.cache.data/ApplicationCommandSubcommandData) // dev.kord.core.entity.application/ChatInputSubCommand.<init>|<init>(dev.kord.core.cache.data.ApplicationCommandSubcommandData){}[0]

    final val data // dev.kord.core.entity.application/ChatInputSubCommand.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ApplicationCommandSubcommandData // dev.kord.core.entity.application/ChatInputSubCommand.data.<get-data>|<get-data>(){}[0]
    final val description // dev.kord.core.entity.application/ChatInputSubCommand.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.core.entity.application/ChatInputSubCommand.description.<get-description>|<get-description>(){}[0]
    final val name // dev.kord.core.entity.application/ChatInputSubCommand.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.entity.application/ChatInputSubCommand.name.<get-name>|<get-name>(){}[0]
    final val parameters // dev.kord.core.entity.application/ChatInputSubCommand.parameters|{}parameters[0]
        final fun <get-parameters>(): kotlin.collections/Map<kotlin/String, dev.kord.core.entity.application/ApplicationCommandParameter> // dev.kord.core.entity.application/ChatInputSubCommand.parameters.<get-parameters>|<get-parameters>(){}[0]
}

final class dev.kord.core.entity.application/GlobalChatInputCommand : dev.kord.core.behavior/GlobalChatInputCommandBehavior, dev.kord.core.entity.application/ChatInputCommandCommand, dev.kord.core.entity.application/GlobalApplicationCommand { // dev.kord.core.entity.application/GlobalChatInputCommand|null[0]
    constructor <init>(dev.kord.core.cache.data/ApplicationCommandData, dev.kord.rest.service/InteractionService) // dev.kord.core.entity.application/GlobalChatInputCommand.<init>|<init>(dev.kord.core.cache.data.ApplicationCommandData;dev.kord.rest.service.InteractionService){}[0]

    final val data // dev.kord.core.entity.application/GlobalChatInputCommand.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ApplicationCommandData // dev.kord.core.entity.application/GlobalChatInputCommand.data.<get-data>|<get-data>(){}[0]
    final val service // dev.kord.core.entity.application/GlobalChatInputCommand.service|{}service[0]
        final fun <get-service>(): dev.kord.rest.service/InteractionService // dev.kord.core.entity.application/GlobalChatInputCommand.service.<get-service>|<get-service>(){}[0]
}

final class dev.kord.core.entity.application/GlobalMessageCommand : dev.kord.core.behavior/GlobalMessageCommandBehavior, dev.kord.core.entity.application/GlobalApplicationCommand, dev.kord.core.entity.application/MessageCommand { // dev.kord.core.entity.application/GlobalMessageCommand|null[0]
    constructor <init>(dev.kord.core.cache.data/ApplicationCommandData, dev.kord.rest.service/InteractionService) // dev.kord.core.entity.application/GlobalMessageCommand.<init>|<init>(dev.kord.core.cache.data.ApplicationCommandData;dev.kord.rest.service.InteractionService){}[0]

    final val data // dev.kord.core.entity.application/GlobalMessageCommand.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ApplicationCommandData // dev.kord.core.entity.application/GlobalMessageCommand.data.<get-data>|<get-data>(){}[0]
    final val service // dev.kord.core.entity.application/GlobalMessageCommand.service|{}service[0]
        final fun <get-service>(): dev.kord.rest.service/InteractionService // dev.kord.core.entity.application/GlobalMessageCommand.service.<get-service>|<get-service>(){}[0]
}

final class dev.kord.core.entity.application/GlobalUserCommand : dev.kord.core.behavior/GlobalUserCommandBehavior, dev.kord.core.entity.application/GlobalApplicationCommand, dev.kord.core.entity.application/UserCommand { // dev.kord.core.entity.application/GlobalUserCommand|null[0]
    constructor <init>(dev.kord.core.cache.data/ApplicationCommandData, dev.kord.rest.service/InteractionService) // dev.kord.core.entity.application/GlobalUserCommand.<init>|<init>(dev.kord.core.cache.data.ApplicationCommandData;dev.kord.rest.service.InteractionService){}[0]

    final val data // dev.kord.core.entity.application/GlobalUserCommand.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ApplicationCommandData // dev.kord.core.entity.application/GlobalUserCommand.data.<get-data>|<get-data>(){}[0]
    final val service // dev.kord.core.entity.application/GlobalUserCommand.service|{}service[0]
        final fun <get-service>(): dev.kord.rest.service/InteractionService // dev.kord.core.entity.application/GlobalUserCommand.service.<get-service>|<get-service>(){}[0]
}

final class dev.kord.core.entity.application/GuildApplicationCommandPermission { // dev.kord.core.entity.application/GuildApplicationCommandPermission|null[0]
    constructor <init>(dev.kord.core.cache.data/GuildApplicationCommandPermissionData) // dev.kord.core.entity.application/GuildApplicationCommandPermission.<init>|<init>(dev.kord.core.cache.data.GuildApplicationCommandPermissionData){}[0]

    final val data // dev.kord.core.entity.application/GuildApplicationCommandPermission.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/GuildApplicationCommandPermissionData // dev.kord.core.entity.application/GuildApplicationCommandPermission.data.<get-data>|<get-data>(){}[0]
    final val id // dev.kord.core.entity.application/GuildApplicationCommandPermission.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.application/GuildApplicationCommandPermission.id.<get-id>|<get-id>(){}[0]
    final val permission // dev.kord.core.entity.application/GuildApplicationCommandPermission.permission|{}permission[0]
        final fun <get-permission>(): kotlin/Boolean // dev.kord.core.entity.application/GuildApplicationCommandPermission.permission.<get-permission>|<get-permission>(){}[0]
    final val type // dev.kord.core.entity.application/GuildApplicationCommandPermission.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ApplicationCommandPermissionType // dev.kord.core.entity.application/GuildApplicationCommandPermission.type.<get-type>|<get-type>(){}[0]
}

final class dev.kord.core.entity.application/GuildChatInputCommand : dev.kord.core.behavior/GuildChatInputCommandBehavior, dev.kord.core.entity.application/ChatInputCommandCommand, dev.kord.core.entity.application/GuildApplicationCommand { // dev.kord.core.entity.application/GuildChatInputCommand|null[0]
    constructor <init>(dev.kord.core.cache.data/ApplicationCommandData, dev.kord.rest.service/InteractionService) // dev.kord.core.entity.application/GuildChatInputCommand.<init>|<init>(dev.kord.core.cache.data.ApplicationCommandData;dev.kord.rest.service.InteractionService){}[0]

    final val data // dev.kord.core.entity.application/GuildChatInputCommand.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ApplicationCommandData // dev.kord.core.entity.application/GuildChatInputCommand.data.<get-data>|<get-data>(){}[0]
    final val guildId // dev.kord.core.entity.application/GuildChatInputCommand.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.application/GuildChatInputCommand.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val service // dev.kord.core.entity.application/GuildChatInputCommand.service|{}service[0]
        final fun <get-service>(): dev.kord.rest.service/InteractionService // dev.kord.core.entity.application/GuildChatInputCommand.service.<get-service>|<get-service>(){}[0]
}

final class dev.kord.core.entity.application/GuildMessageCommand : dev.kord.core.behavior/GuildMessageCommandBehavior, dev.kord.core.entity.application/GuildApplicationCommand, dev.kord.core.entity.application/MessageCommand { // dev.kord.core.entity.application/GuildMessageCommand|null[0]
    constructor <init>(dev.kord.core.cache.data/ApplicationCommandData, dev.kord.rest.service/InteractionService) // dev.kord.core.entity.application/GuildMessageCommand.<init>|<init>(dev.kord.core.cache.data.ApplicationCommandData;dev.kord.rest.service.InteractionService){}[0]

    final val data // dev.kord.core.entity.application/GuildMessageCommand.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ApplicationCommandData // dev.kord.core.entity.application/GuildMessageCommand.data.<get-data>|<get-data>(){}[0]
    final val guildId // dev.kord.core.entity.application/GuildMessageCommand.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.application/GuildMessageCommand.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val service // dev.kord.core.entity.application/GuildMessageCommand.service|{}service[0]
        final fun <get-service>(): dev.kord.rest.service/InteractionService // dev.kord.core.entity.application/GuildMessageCommand.service.<get-service>|<get-service>(){}[0]
}

final class dev.kord.core.entity.application/GuildUserCommand : dev.kord.core.behavior/GuildUserCommandBehavior, dev.kord.core.entity.application/GuildApplicationCommand, dev.kord.core.entity.application/UserCommand { // dev.kord.core.entity.application/GuildUserCommand|null[0]
    constructor <init>(dev.kord.core.cache.data/ApplicationCommandData, dev.kord.rest.service/InteractionService) // dev.kord.core.entity.application/GuildUserCommand.<init>|<init>(dev.kord.core.cache.data.ApplicationCommandData;dev.kord.rest.service.InteractionService){}[0]

    final val data // dev.kord.core.entity.application/GuildUserCommand.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ApplicationCommandData // dev.kord.core.entity.application/GuildUserCommand.data.<get-data>|<get-data>(){}[0]
    final val guildId // dev.kord.core.entity.application/GuildUserCommand.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.application/GuildUserCommand.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val service // dev.kord.core.entity.application/GuildUserCommand.service|{}service[0]
        final fun <get-service>(): dev.kord.rest.service/InteractionService // dev.kord.core.entity.application/GuildUserCommand.service.<get-service>|<get-service>(){}[0]
}

final class dev.kord.core.entity.application/UnknownGlobalApplicationCommand : dev.kord.core.entity.application/GlobalApplicationCommand { // dev.kord.core.entity.application/UnknownGlobalApplicationCommand|null[0]
    constructor <init>(dev.kord.core.cache.data/ApplicationCommandData, dev.kord.rest.service/InteractionService) // dev.kord.core.entity.application/UnknownGlobalApplicationCommand.<init>|<init>(dev.kord.core.cache.data.ApplicationCommandData;dev.kord.rest.service.InteractionService){}[0]

    final val data // dev.kord.core.entity.application/UnknownGlobalApplicationCommand.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ApplicationCommandData // dev.kord.core.entity.application/UnknownGlobalApplicationCommand.data.<get-data>|<get-data>(){}[0]
    final val service // dev.kord.core.entity.application/UnknownGlobalApplicationCommand.service|{}service[0]
        final fun <get-service>(): dev.kord.rest.service/InteractionService // dev.kord.core.entity.application/UnknownGlobalApplicationCommand.service.<get-service>|<get-service>(){}[0]
}

final class dev.kord.core.entity.application/UnknownGuildApplicationCommand : dev.kord.core.entity.application/GuildApplicationCommand { // dev.kord.core.entity.application/UnknownGuildApplicationCommand|null[0]
    constructor <init>(dev.kord.core.cache.data/ApplicationCommandData, dev.kord.rest.service/InteractionService) // dev.kord.core.entity.application/UnknownGuildApplicationCommand.<init>|<init>(dev.kord.core.cache.data.ApplicationCommandData;dev.kord.rest.service.InteractionService){}[0]

    final val data // dev.kord.core.entity.application/UnknownGuildApplicationCommand.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ApplicationCommandData // dev.kord.core.entity.application/UnknownGuildApplicationCommand.data.<get-data>|<get-data>(){}[0]
    final val guildId // dev.kord.core.entity.application/UnknownGuildApplicationCommand.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.application/UnknownGuildApplicationCommand.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val service // dev.kord.core.entity.application/UnknownGuildApplicationCommand.service|{}service[0]
        final fun <get-service>(): dev.kord.rest.service/InteractionService // dev.kord.core.entity.application/UnknownGuildApplicationCommand.service.<get-service>|<get-service>(){}[0]
}

final class dev.kord.core.entity.automoderation/BlockMessageAutoModerationAction : dev.kord.core.entity.automoderation/AutoModerationAction { // dev.kord.core.entity.automoderation/BlockMessageAutoModerationAction|null[0]
    constructor <init>(dev.kord.core.cache.data/AutoModerationActionData, dev.kord.core/Kord) // dev.kord.core.entity.automoderation/BlockMessageAutoModerationAction.<init>|<init>(dev.kord.core.cache.data.AutoModerationActionData;dev.kord.core.Kord){}[0]

    final val customMessage // dev.kord.core.entity.automoderation/BlockMessageAutoModerationAction.customMessage|{}customMessage[0]
        final fun <get-customMessage>(): kotlin/String? // dev.kord.core.entity.automoderation/BlockMessageAutoModerationAction.customMessage.<get-customMessage>|<get-customMessage>(){}[0]
    final val type // dev.kord.core.entity.automoderation/BlockMessageAutoModerationAction.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/AutoModerationActionType.BlockMessage // dev.kord.core.entity.automoderation/BlockMessageAutoModerationAction.type.<get-type>|<get-type>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity.automoderation/BlockMessageAutoModerationAction.toString|toString(){}[0]
}

final class dev.kord.core.entity.automoderation/KeywordAutoModerationRule : dev.kord.core.behavior.automoderation/KeywordAutoModerationRuleBehavior, dev.kord.core.entity.automoderation/AutoModerationRule { // dev.kord.core.entity.automoderation/KeywordAutoModerationRule|null[0]
    constructor <init>(dev.kord.core.cache.data/AutoModerationRuleData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier) // dev.kord.core.entity.automoderation/KeywordAutoModerationRule.<init>|<init>(dev.kord.core.cache.data.AutoModerationRuleData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val allowedKeywords // dev.kord.core.entity.automoderation/KeywordAutoModerationRule.allowedKeywords|{}allowedKeywords[0]
        final fun <get-allowedKeywords>(): kotlin.collections/List<kotlin/String> // dev.kord.core.entity.automoderation/KeywordAutoModerationRule.allowedKeywords.<get-allowedKeywords>|<get-allowedKeywords>(){}[0]
    final val keywords // dev.kord.core.entity.automoderation/KeywordAutoModerationRule.keywords|{}keywords[0]
        final fun <get-keywords>(): kotlin.collections/List<kotlin/String> // dev.kord.core.entity.automoderation/KeywordAutoModerationRule.keywords.<get-keywords>|<get-keywords>(){}[0]
    final val regexPatterns // dev.kord.core.entity.automoderation/KeywordAutoModerationRule.regexPatterns|{}regexPatterns[0]
        final fun <get-regexPatterns>(): kotlin.collections/List<kotlin/String> // dev.kord.core.entity.automoderation/KeywordAutoModerationRule.regexPatterns.<get-regexPatterns>|<get-regexPatterns>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity.automoderation/KeywordAutoModerationRule.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.automoderation/KeywordAutoModerationRule // dev.kord.core.entity.automoderation/KeywordAutoModerationRule.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun asAutoModerationRule(): dev.kord.core.entity.automoderation/KeywordAutoModerationRule // dev.kord.core.entity.automoderation/KeywordAutoModerationRule.asAutoModerationRule|asAutoModerationRule(){}[0]
    final suspend fun asAutoModerationRuleOrNull(): dev.kord.core.entity.automoderation/KeywordAutoModerationRule // dev.kord.core.entity.automoderation/KeywordAutoModerationRule.asAutoModerationRuleOrNull|asAutoModerationRuleOrNull(){}[0]
}

final class dev.kord.core.entity.automoderation/KeywordPresetAutoModerationRule : dev.kord.core.behavior.automoderation/KeywordPresetAutoModerationRuleBehavior, dev.kord.core.entity.automoderation/AutoModerationRule { // dev.kord.core.entity.automoderation/KeywordPresetAutoModerationRule|null[0]
    constructor <init>(dev.kord.core.cache.data/AutoModerationRuleData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier) // dev.kord.core.entity.automoderation/KeywordPresetAutoModerationRule.<init>|<init>(dev.kord.core.cache.data.AutoModerationRuleData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val allowedKeywords // dev.kord.core.entity.automoderation/KeywordPresetAutoModerationRule.allowedKeywords|{}allowedKeywords[0]
        final fun <get-allowedKeywords>(): kotlin.collections/List<kotlin/String> // dev.kord.core.entity.automoderation/KeywordPresetAutoModerationRule.allowedKeywords.<get-allowedKeywords>|<get-allowedKeywords>(){}[0]
    final val presets // dev.kord.core.entity.automoderation/KeywordPresetAutoModerationRule.presets|{}presets[0]
        final fun <get-presets>(): kotlin.collections/List<dev.kord.common.entity/AutoModerationRuleKeywordPresetType> // dev.kord.core.entity.automoderation/KeywordPresetAutoModerationRule.presets.<get-presets>|<get-presets>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity.automoderation/KeywordPresetAutoModerationRule.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.automoderation/KeywordPresetAutoModerationRule // dev.kord.core.entity.automoderation/KeywordPresetAutoModerationRule.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun asAutoModerationRule(): dev.kord.core.entity.automoderation/KeywordPresetAutoModerationRule // dev.kord.core.entity.automoderation/KeywordPresetAutoModerationRule.asAutoModerationRule|asAutoModerationRule(){}[0]
    final suspend fun asAutoModerationRuleOrNull(): dev.kord.core.entity.automoderation/KeywordPresetAutoModerationRule // dev.kord.core.entity.automoderation/KeywordPresetAutoModerationRule.asAutoModerationRuleOrNull|asAutoModerationRuleOrNull(){}[0]
}

final class dev.kord.core.entity.automoderation/MentionSpamAutoModerationRule : dev.kord.core.behavior.automoderation/MentionSpamAutoModerationRuleBehavior, dev.kord.core.entity.automoderation/AutoModerationRule { // dev.kord.core.entity.automoderation/MentionSpamAutoModerationRule|null[0]
    constructor <init>(dev.kord.core.cache.data/AutoModerationRuleData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier) // dev.kord.core.entity.automoderation/MentionSpamAutoModerationRule.<init>|<init>(dev.kord.core.cache.data.AutoModerationRuleData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val isMentionRaidProtectionEnabled // dev.kord.core.entity.automoderation/MentionSpamAutoModerationRule.isMentionRaidProtectionEnabled|{}isMentionRaidProtectionEnabled[0]
        final fun <get-isMentionRaidProtectionEnabled>(): kotlin/Boolean // dev.kord.core.entity.automoderation/MentionSpamAutoModerationRule.isMentionRaidProtectionEnabled.<get-isMentionRaidProtectionEnabled>|<get-isMentionRaidProtectionEnabled>(){}[0]
    final val mentionLimit // dev.kord.core.entity.automoderation/MentionSpamAutoModerationRule.mentionLimit|{}mentionLimit[0]
        final fun <get-mentionLimit>(): kotlin/Int // dev.kord.core.entity.automoderation/MentionSpamAutoModerationRule.mentionLimit.<get-mentionLimit>|<get-mentionLimit>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity.automoderation/MentionSpamAutoModerationRule.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.automoderation/MentionSpamAutoModerationRule // dev.kord.core.entity.automoderation/MentionSpamAutoModerationRule.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun asAutoModerationRule(): dev.kord.core.entity.automoderation/MentionSpamAutoModerationRule // dev.kord.core.entity.automoderation/MentionSpamAutoModerationRule.asAutoModerationRule|asAutoModerationRule(){}[0]
    final suspend fun asAutoModerationRuleOrNull(): dev.kord.core.entity.automoderation/MentionSpamAutoModerationRule // dev.kord.core.entity.automoderation/MentionSpamAutoModerationRule.asAutoModerationRuleOrNull|asAutoModerationRuleOrNull(){}[0]
}

final class dev.kord.core.entity.automoderation/SendAlertMessageAutoModerationAction : dev.kord.core.entity.automoderation/AutoModerationAction { // dev.kord.core.entity.automoderation/SendAlertMessageAutoModerationAction|null[0]
    constructor <init>(dev.kord.core.cache.data/AutoModerationActionData, dev.kord.core/Kord) // dev.kord.core.entity.automoderation/SendAlertMessageAutoModerationAction.<init>|<init>(dev.kord.core.cache.data.AutoModerationActionData;dev.kord.core.Kord){}[0]

    final val channelId // dev.kord.core.entity.automoderation/SendAlertMessageAutoModerationAction.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.automoderation/SendAlertMessageAutoModerationAction.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val type // dev.kord.core.entity.automoderation/SendAlertMessageAutoModerationAction.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/AutoModerationActionType.SendAlertMessage // dev.kord.core.entity.automoderation/SendAlertMessageAutoModerationAction.type.<get-type>|<get-type>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity.automoderation/SendAlertMessageAutoModerationAction.toString|toString(){}[0]
}

final class dev.kord.core.entity.automoderation/SpamAutoModerationRule : dev.kord.core.behavior.automoderation/SpamAutoModerationRuleBehavior, dev.kord.core.entity.automoderation/AutoModerationRule { // dev.kord.core.entity.automoderation/SpamAutoModerationRule|null[0]
    constructor <init>(dev.kord.core.cache.data/AutoModerationRuleData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier) // dev.kord.core.entity.automoderation/SpamAutoModerationRule.<init>|<init>(dev.kord.core.cache.data.AutoModerationRuleData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity.automoderation/SpamAutoModerationRule.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.automoderation/SpamAutoModerationRule // dev.kord.core.entity.automoderation/SpamAutoModerationRule.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun asAutoModerationRule(): dev.kord.core.entity.automoderation/SpamAutoModerationRule // dev.kord.core.entity.automoderation/SpamAutoModerationRule.asAutoModerationRule|asAutoModerationRule(){}[0]
    final suspend fun asAutoModerationRuleOrNull(): dev.kord.core.entity.automoderation/SpamAutoModerationRule // dev.kord.core.entity.automoderation/SpamAutoModerationRule.asAutoModerationRuleOrNull|asAutoModerationRuleOrNull(){}[0]
}

final class dev.kord.core.entity.automoderation/TimeoutAutoModerationAction : dev.kord.core.entity.automoderation/AutoModerationAction { // dev.kord.core.entity.automoderation/TimeoutAutoModerationAction|null[0]
    constructor <init>(dev.kord.core.cache.data/AutoModerationActionData, dev.kord.core/Kord) // dev.kord.core.entity.automoderation/TimeoutAutoModerationAction.<init>|<init>(dev.kord.core.cache.data.AutoModerationActionData;dev.kord.core.Kord){}[0]

    final val duration // dev.kord.core.entity.automoderation/TimeoutAutoModerationAction.duration|{}duration[0]
        final fun <get-duration>(): kotlin.time/Duration // dev.kord.core.entity.automoderation/TimeoutAutoModerationAction.duration.<get-duration>|<get-duration>(){}[0]
    final val type // dev.kord.core.entity.automoderation/TimeoutAutoModerationAction.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/AutoModerationActionType.Timeout // dev.kord.core.entity.automoderation/TimeoutAutoModerationAction.type.<get-type>|<get-type>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity.automoderation/TimeoutAutoModerationAction.toString|toString(){}[0]
}

final class dev.kord.core.entity.automoderation/UnknownAutoModerationAction : dev.kord.core.entity.automoderation/AutoModerationAction { // dev.kord.core.entity.automoderation/UnknownAutoModerationAction|null[0]
    constructor <init>(dev.kord.core.cache.data/AutoModerationActionData, dev.kord.core/Kord) // dev.kord.core.entity.automoderation/UnknownAutoModerationAction.<init>|<init>(dev.kord.core.cache.data.AutoModerationActionData;dev.kord.core.Kord){}[0]

    final val type // dev.kord.core.entity.automoderation/UnknownAutoModerationAction.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/AutoModerationActionType.Unknown // dev.kord.core.entity.automoderation/UnknownAutoModerationAction.type.<get-type>|<get-type>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity.automoderation/UnknownAutoModerationAction.toString|toString(){}[0]
}

final class dev.kord.core.entity.automoderation/UnknownAutoModerationRule : dev.kord.core.entity.automoderation/AutoModerationRule { // dev.kord.core.entity.automoderation/UnknownAutoModerationRule|null[0]
    constructor <init>(dev.kord.core.cache.data/AutoModerationRuleData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier) // dev.kord.core.entity.automoderation/UnknownAutoModerationRule.<init>|<init>(dev.kord.core.cache.data.AutoModerationRuleData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val triggerType // dev.kord.core.entity.automoderation/UnknownAutoModerationRule.triggerType|{}triggerType[0]
        final fun <get-triggerType>(): dev.kord.common.entity/AutoModerationRuleTriggerType.Unknown // dev.kord.core.entity.automoderation/UnknownAutoModerationRule.triggerType.<get-triggerType>|<get-triggerType>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity.automoderation/UnknownAutoModerationRule.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.automoderation/UnknownAutoModerationRule // dev.kord.core.entity.automoderation/UnknownAutoModerationRule.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun asAutoModerationRule(): dev.kord.core.entity.automoderation/UnknownAutoModerationRule // dev.kord.core.entity.automoderation/UnknownAutoModerationRule.asAutoModerationRule|asAutoModerationRule(){}[0]
    final suspend fun asAutoModerationRuleOrNull(): dev.kord.core.entity.automoderation/UnknownAutoModerationRule // dev.kord.core.entity.automoderation/UnknownAutoModerationRule.asAutoModerationRuleOrNull|asAutoModerationRuleOrNull(){}[0]
}

final class dev.kord.core.entity.channel.thread/DeletedThreadChannel : dev.kord.core.entity/Strategizable { // dev.kord.core.entity.channel.thread/DeletedThreadChannel|null[0]
    constructor <init>(dev.kord.core.cache.data/ChannelData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity.channel.thread/DeletedThreadChannel.<init>|<init>(dev.kord.core.cache.data.ChannelData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity.channel.thread/DeletedThreadChannel.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ChannelData // dev.kord.core.entity.channel.thread/DeletedThreadChannel.data.<get-data>|<get-data>(){}[0]
    final val guild // dev.kord.core.entity.channel.thread/DeletedThreadChannel.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.entity.channel.thread/DeletedThreadChannel.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.entity.channel.thread/DeletedThreadChannel.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.channel.thread/DeletedThreadChannel.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.core.entity.channel.thread/DeletedThreadChannel.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.channel.thread/DeletedThreadChannel.id.<get-id>|<get-id>(){}[0]
    final val kord // dev.kord.core.entity.channel.thread/DeletedThreadChannel.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.channel.thread/DeletedThreadChannel.kord.<get-kord>|<get-kord>(){}[0]
    final val parent // dev.kord.core.entity.channel.thread/DeletedThreadChannel.parent|{}parent[0]
        final fun <get-parent>(): dev.kord.core.behavior.channel.threads/ThreadParentChannelBehavior // dev.kord.core.entity.channel.thread/DeletedThreadChannel.parent.<get-parent>|<get-parent>(){}[0]
    final val parentId // dev.kord.core.entity.channel.thread/DeletedThreadChannel.parentId|{}parentId[0]
        final fun <get-parentId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.channel.thread/DeletedThreadChannel.parentId.<get-parentId>|<get-parentId>(){}[0]
    final val supplier // dev.kord.core.entity.channel.thread/DeletedThreadChannel.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.channel.thread/DeletedThreadChannel.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val type // dev.kord.core.entity.channel.thread/DeletedThreadChannel.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ChannelType // dev.kord.core.entity.channel.thread/DeletedThreadChannel.type.<get-type>|<get-type>(){}[0]

    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.channel.thread/DeletedThreadChannel // dev.kord.core.entity.channel.thread/DeletedThreadChannel.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.entity.channel.thread/DeletedThreadChannel.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.entity.channel.thread/DeletedThreadChannel.getGuildOrNull|getGuildOrNull(){}[0]
    final suspend fun getParent(): dev.kord.core.entity.channel/ThreadParentChannel // dev.kord.core.entity.channel.thread/DeletedThreadChannel.getParent|getParent(){}[0]
    final suspend fun getParentOrNull(): dev.kord.core.entity.channel/ThreadParentChannel? // dev.kord.core.entity.channel.thread/DeletedThreadChannel.getParentOrNull|getParentOrNull(){}[0]
}

final class dev.kord.core.entity.channel.thread/NewsChannelThread : dev.kord.core.entity.channel.thread/ThreadChannel { // dev.kord.core.entity.channel.thread/NewsChannelThread|null[0]
    constructor <init>(dev.kord.core.cache.data/ChannelData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity.channel.thread/NewsChannelThread.<init>|<init>(dev.kord.core.cache.data.ChannelData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity.channel.thread/NewsChannelThread.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ChannelData // dev.kord.core.entity.channel.thread/NewsChannelThread.data.<get-data>|<get-data>(){}[0]
    final val guildId // dev.kord.core.entity.channel.thread/NewsChannelThread.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.channel.thread/NewsChannelThread.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.entity.channel.thread/NewsChannelThread.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.channel.thread/NewsChannelThread.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.channel.thread/NewsChannelThread.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.channel.thread/NewsChannelThread.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.channel.thread/NewsChannelThread // dev.kord.core.entity.channel.thread/NewsChannelThread.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun asChannel(): dev.kord.core.entity.channel.thread/NewsChannelThread // dev.kord.core.entity.channel.thread/NewsChannelThread.asChannel|asChannel(){}[0]
    final suspend fun asChannelOrNull(): dev.kord.core.entity.channel.thread/NewsChannelThread // dev.kord.core.entity.channel.thread/NewsChannelThread.asChannelOrNull|asChannelOrNull(){}[0]
    final suspend fun getParent(): dev.kord.core.entity.channel/NewsChannel // dev.kord.core.entity.channel.thread/NewsChannelThread.getParent|getParent(){}[0]
    final suspend fun getParentOrNull(): dev.kord.core.entity.channel/NewsChannel? // dev.kord.core.entity.channel.thread/NewsChannelThread.getParentOrNull|getParentOrNull(){}[0]
}

final class dev.kord.core.entity.channel.thread/TextChannelThread : dev.kord.core.entity.channel.thread/ThreadChannel { // dev.kord.core.entity.channel.thread/TextChannelThread|null[0]
    constructor <init>(dev.kord.core.cache.data/ChannelData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity.channel.thread/TextChannelThread.<init>|<init>(dev.kord.core.cache.data.ChannelData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity.channel.thread/TextChannelThread.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ChannelData // dev.kord.core.entity.channel.thread/TextChannelThread.data.<get-data>|<get-data>(){}[0]
    final val guildId // dev.kord.core.entity.channel.thread/TextChannelThread.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.channel.thread/TextChannelThread.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val isInvitable // dev.kord.core.entity.channel.thread/TextChannelThread.isInvitable|{}isInvitable[0]
        final fun <get-isInvitable>(): kotlin/Boolean // dev.kord.core.entity.channel.thread/TextChannelThread.isInvitable.<get-isInvitable>|<get-isInvitable>(){}[0]
    final val isPrivate // dev.kord.core.entity.channel.thread/TextChannelThread.isPrivate|{}isPrivate[0]
        final fun <get-isPrivate>(): kotlin/Boolean // dev.kord.core.entity.channel.thread/TextChannelThread.isPrivate.<get-isPrivate>|<get-isPrivate>(){}[0]
    final val kord // dev.kord.core.entity.channel.thread/TextChannelThread.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.channel.thread/TextChannelThread.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.channel.thread/TextChannelThread.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.channel.thread/TextChannelThread.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.channel.thread/TextChannelThread // dev.kord.core.entity.channel.thread/TextChannelThread.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun asChannel(): dev.kord.core.entity.channel.thread/TextChannelThread // dev.kord.core.entity.channel.thread/TextChannelThread.asChannel|asChannel(){}[0]
    final suspend fun asChannelOrNull(): dev.kord.core.entity.channel.thread/TextChannelThread // dev.kord.core.entity.channel.thread/TextChannelThread.asChannelOrNull|asChannelOrNull(){}[0]
}

final class dev.kord.core.entity.channel.thread/ThreadMember : dev.kord.core.behavior/ThreadMemberBehavior { // dev.kord.core.entity.channel.thread/ThreadMember|null[0]
    constructor <init>(dev.kord.core.cache.data/ThreadMemberData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity.channel.thread/ThreadMember.<init>|<init>(dev.kord.core.cache.data.ThreadMemberData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity.channel.thread/ThreadMember.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ThreadMemberData // dev.kord.core.entity.channel.thread/ThreadMember.data.<get-data>|<get-data>(){}[0]
    final val flags // dev.kord.core.entity.channel.thread/ThreadMember.flags|{}flags[0]
        final fun <get-flags>(): kotlin/Int // dev.kord.core.entity.channel.thread/ThreadMember.flags.<get-flags>|<get-flags>(){}[0]
    final val id // dev.kord.core.entity.channel.thread/ThreadMember.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.channel.thread/ThreadMember.id.<get-id>|<get-id>(){}[0]
    final val joinTimestamp // dev.kord.core.entity.channel.thread/ThreadMember.joinTimestamp|{}joinTimestamp[0]
        final fun <get-joinTimestamp>(): kotlinx.datetime/Instant // dev.kord.core.entity.channel.thread/ThreadMember.joinTimestamp.<get-joinTimestamp>|<get-joinTimestamp>(){}[0]
    final val kord // dev.kord.core.entity.channel.thread/ThreadMember.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.channel.thread/ThreadMember.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.channel.thread/ThreadMember.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.channel.thread/ThreadMember.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val threadId // dev.kord.core.entity.channel.thread/ThreadMember.threadId|{}threadId[0]
        final fun <get-threadId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.channel.thread/ThreadMember.threadId.<get-threadId>|<get-threadId>(){}[0]

    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.channel.thread/ThreadMember // dev.kord.core.entity.channel.thread/ThreadMember.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.entity.channel/Category : dev.kord.core.behavior.channel/CategoryBehavior, dev.kord.core.entity.channel/TopGuildChannel { // dev.kord.core.entity.channel/Category|null[0]
    constructor <init>(dev.kord.core.cache.data/ChannelData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity.channel/Category.<init>|<init>(dev.kord.core.cache.data.ChannelData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity.channel/Category.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ChannelData // dev.kord.core.entity.channel/Category.data.<get-data>|<get-data>(){}[0]
    final val guild // dev.kord.core.entity.channel/Category.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.entity.channel/Category.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.entity.channel/Category.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.channel/Category.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.entity.channel/Category.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.channel/Category.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.channel/Category.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.channel/Category.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun compareTo(dev.kord.core.entity/Entity): kotlin/Int // dev.kord.core.entity.channel/Category.compareTo|compareTo(dev.kord.core.entity.Entity){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.channel/Category.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity.channel/Category.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity.channel/Category.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.channel/Category // dev.kord.core.entity.channel/Category.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun asChannel(): dev.kord.core.entity.channel/Category // dev.kord.core.entity.channel/Category.asChannel|asChannel(){}[0]
    final suspend fun asChannelOrNull(): dev.kord.core.entity.channel/Category // dev.kord.core.entity.channel/Category.asChannelOrNull|asChannelOrNull(){}[0]
}

final class dev.kord.core.entity.channel/DmChannel : dev.kord.core.entity.channel/MessageChannel { // dev.kord.core.entity.channel/DmChannel|null[0]
    constructor <init>(dev.kord.core.cache.data/ChannelData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity.channel/DmChannel.<init>|<init>(dev.kord.core.cache.data.ChannelData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity.channel/DmChannel.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ChannelData // dev.kord.core.entity.channel/DmChannel.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.entity.channel/DmChannel.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.channel/DmChannel.kord.<get-kord>|<get-kord>(){}[0]
    final val recipientBehaviors // dev.kord.core.entity.channel/DmChannel.recipientBehaviors|{}recipientBehaviors[0]
        final fun <get-recipientBehaviors>(): kotlin.collections/Set<dev.kord.core.behavior/UserBehavior> // dev.kord.core.entity.channel/DmChannel.recipientBehaviors.<get-recipientBehaviors>|<get-recipientBehaviors>(){}[0]
    final val recipientIds // dev.kord.core.entity.channel/DmChannel.recipientIds|{}recipientIds[0]
        final fun <get-recipientIds>(): kotlin.collections/Set<dev.kord.common.entity/Snowflake> // dev.kord.core.entity.channel/DmChannel.recipientIds.<get-recipientIds>|<get-recipientIds>(){}[0]
    final val recipients // dev.kord.core.entity.channel/DmChannel.recipients|{}recipients[0]
        final fun <get-recipients>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/User> // dev.kord.core.entity.channel/DmChannel.recipients.<get-recipients>|<get-recipients>(){}[0]
    final val supplier // dev.kord.core.entity.channel/DmChannel.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.channel/DmChannel.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun component1(): dev.kord.core.cache.data/ChannelData // dev.kord.core.entity.channel/DmChannel.component1|component1(){}[0]
    final fun component2(): dev.kord.core/Kord // dev.kord.core.entity.channel/DmChannel.component2|component2(){}[0]
    final fun component3(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.channel/DmChannel.component3|component3(){}[0]
    final fun copy(dev.kord.core.cache.data/ChannelData = ..., dev.kord.core/Kord = ..., dev.kord.core.supplier/EntitySupplier = ...): dev.kord.core.entity.channel/DmChannel // dev.kord.core.entity.channel/DmChannel.copy|copy(dev.kord.core.cache.data.ChannelData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.channel/DmChannel.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity.channel/DmChannel.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity.channel/DmChannel.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.channel/DmChannel // dev.kord.core.entity.channel/DmChannel.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun asChannel(): dev.kord.core.entity.channel/MessageChannel // dev.kord.core.entity.channel/DmChannel.asChannel|asChannel(){}[0]
    final suspend fun asChannelOrNull(): dev.kord.core.entity.channel/MessageChannel // dev.kord.core.entity.channel/DmChannel.asChannelOrNull|asChannelOrNull(){}[0]
}

final class dev.kord.core.entity.channel/ForumChannel : dev.kord.core.behavior.channel/ForumChannelBehavior, dev.kord.core.entity.channel/ThreadOnlyChannel { // dev.kord.core.entity.channel/ForumChannel|null[0]
    constructor <init>(dev.kord.core.cache.data/ChannelData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity.channel/ForumChannel.<init>|<init>(dev.kord.core.cache.data.ChannelData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity.channel/ForumChannel.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ChannelData // dev.kord.core.entity.channel/ForumChannel.data.<get-data>|<get-data>(){}[0]
    final val defaultForumLayout // dev.kord.core.entity.channel/ForumChannel.defaultForumLayout|{}defaultForumLayout[0]
        final fun <get-defaultForumLayout>(): dev.kord.common.entity/ForumLayoutType? // dev.kord.core.entity.channel/ForumChannel.defaultForumLayout.<get-defaultForumLayout>|<get-defaultForumLayout>(){}[0]
    final val kord // dev.kord.core.entity.channel/ForumChannel.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.channel/ForumChannel.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.channel/ForumChannel.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.channel/ForumChannel.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.channel/ForumChannel.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity.channel/ForumChannel.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity.channel/ForumChannel.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.channel/ForumChannel // dev.kord.core.entity.channel/ForumChannel.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun asChannel(): dev.kord.core.entity.channel/ForumChannel // dev.kord.core.entity.channel/ForumChannel.asChannel|asChannel(){}[0]
    final suspend fun asChannelOrNull(): dev.kord.core.entity.channel/ForumChannel // dev.kord.core.entity.channel/ForumChannel.asChannelOrNull|asChannelOrNull(){}[0]
}

final class dev.kord.core.entity.channel/MediaChannel : dev.kord.core.behavior.channel/MediaChannelBehavior, dev.kord.core.entity.channel/ThreadOnlyChannel { // dev.kord.core.entity.channel/MediaChannel|null[0]
    constructor <init>(dev.kord.core.cache.data/ChannelData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity.channel/MediaChannel.<init>|<init>(dev.kord.core.cache.data.ChannelData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity.channel/MediaChannel.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ChannelData // dev.kord.core.entity.channel/MediaChannel.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.entity.channel/MediaChannel.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.channel/MediaChannel.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.channel/MediaChannel.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.channel/MediaChannel.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.channel/MediaChannel.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity.channel/MediaChannel.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity.channel/MediaChannel.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.channel/MediaChannel // dev.kord.core.entity.channel/MediaChannel.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun asChannel(): dev.kord.core.entity.channel/MediaChannel // dev.kord.core.entity.channel/MediaChannel.asChannel|asChannel(){}[0]
    final suspend fun asChannelOrNull(): dev.kord.core.entity.channel/MediaChannel // dev.kord.core.entity.channel/MediaChannel.asChannelOrNull|asChannelOrNull(){}[0]
}

final class dev.kord.core.entity.channel/NewsChannel : dev.kord.core.behavior.channel/NewsChannelBehavior, dev.kord.core.entity.channel/CategorizableChannel, dev.kord.core.entity.channel/ThreadParentChannel, dev.kord.core.entity.channel/TopGuildMessageChannel { // dev.kord.core.entity.channel/NewsChannel|null[0]
    constructor <init>(dev.kord.core.cache.data/ChannelData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity.channel/NewsChannel.<init>|<init>(dev.kord.core.cache.data.ChannelData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity.channel/NewsChannel.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ChannelData // dev.kord.core.entity.channel/NewsChannel.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.entity.channel/NewsChannel.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.channel/NewsChannel.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.channel/NewsChannel.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.channel/NewsChannel.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.channel/NewsChannel.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity.channel/NewsChannel.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity.channel/NewsChannel.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.channel/NewsChannel // dev.kord.core.entity.channel/NewsChannel.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun asChannel(): dev.kord.core.entity.channel/NewsChannel // dev.kord.core.entity.channel/NewsChannel.asChannel|asChannel(){}[0]
    final suspend fun asChannelOrNull(): dev.kord.core.entity.channel/NewsChannel // dev.kord.core.entity.channel/NewsChannel.asChannelOrNull|asChannelOrNull(){}[0]
}

final class dev.kord.core.entity.channel/ResolvedChannel : dev.kord.core.entity.channel/Channel { // dev.kord.core.entity.channel/ResolvedChannel|null[0]
    constructor <init>(dev.kord.core.cache.data/ChannelData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...) // dev.kord.core.entity.channel/ResolvedChannel.<init>|<init>(dev.kord.core.cache.data.ChannelData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]

    final val data // dev.kord.core.entity.channel/ResolvedChannel.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ChannelData // dev.kord.core.entity.channel/ResolvedChannel.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.entity.channel/ResolvedChannel.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.channel/ResolvedChannel.kord.<get-kord>|<get-kord>(){}[0]
    final val name // dev.kord.core.entity.channel/ResolvedChannel.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.entity.channel/ResolvedChannel.name.<get-name>|<get-name>(){}[0]
    final val permissions // dev.kord.core.entity.channel/ResolvedChannel.permissions|{}permissions[0]
        final fun <get-permissions>(): dev.kord.common.entity/Permissions // dev.kord.core.entity.channel/ResolvedChannel.permissions.<get-permissions>|<get-permissions>(){}[0]
    final val strategy // dev.kord.core.entity.channel/ResolvedChannel.strategy|{}strategy[0]
        final fun <get-strategy>(): dev.kord.core.supplier/EntitySupplyStrategy<*> // dev.kord.core.entity.channel/ResolvedChannel.strategy.<get-strategy>|<get-strategy>(){}[0]
    final val supplier // dev.kord.core.entity.channel/ResolvedChannel.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.channel/ResolvedChannel.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity.channel/ResolvedChannel.toString|toString(){}[0]
    final suspend fun asChannel(): dev.kord.core.entity.channel/Channel // dev.kord.core.entity.channel/ResolvedChannel.asChannel|asChannel(){}[0]
    final suspend fun asChannelOrNull(): dev.kord.core.entity.channel/Channel // dev.kord.core.entity.channel/ResolvedChannel.asChannelOrNull|asChannelOrNull(){}[0]
}

final class dev.kord.core.entity.channel/StageChannel : dev.kord.core.behavior.channel/StageChannelBehavior, dev.kord.core.entity.channel/TopGuildMessageChannel { // dev.kord.core.entity.channel/StageChannel|null[0]
    constructor <init>(dev.kord.core.cache.data/ChannelData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity.channel/StageChannel.<init>|<init>(dev.kord.core.cache.data.ChannelData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val bitrate // dev.kord.core.entity.channel/StageChannel.bitrate|{}bitrate[0]
        final fun <get-bitrate>(): kotlin/Int // dev.kord.core.entity.channel/StageChannel.bitrate.<get-bitrate>|<get-bitrate>(){}[0]
    final val data // dev.kord.core.entity.channel/StageChannel.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ChannelData // dev.kord.core.entity.channel/StageChannel.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.entity.channel/StageChannel.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.channel/StageChannel.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.channel/StageChannel.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.channel/StageChannel.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val userLimit // dev.kord.core.entity.channel/StageChannel.userLimit|{}userLimit[0]
        final fun <get-userLimit>(): kotlin/Int // dev.kord.core.entity.channel/StageChannel.userLimit.<get-userLimit>|<get-userLimit>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.channel/StageChannel.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity.channel/StageChannel.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity.channel/StageChannel.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.channel/StageChannel // dev.kord.core.entity.channel/StageChannel.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun asChannel(): dev.kord.core.entity.channel/StageChannel // dev.kord.core.entity.channel/StageChannel.asChannel|asChannel(){}[0]
    final suspend fun asChannelOrNull(): dev.kord.core.entity.channel/StageChannel // dev.kord.core.entity.channel/StageChannel.asChannelOrNull|asChannelOrNull(){}[0]
}

final class dev.kord.core.entity.channel/TextChannel : dev.kord.core.behavior.channel/TextChannelBehavior, dev.kord.core.entity.channel/CategorizableChannel, dev.kord.core.entity.channel/ThreadParentChannel, dev.kord.core.entity.channel/TopGuildMessageChannel { // dev.kord.core.entity.channel/TextChannel|null[0]
    constructor <init>(dev.kord.core.cache.data/ChannelData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity.channel/TextChannel.<init>|<init>(dev.kord.core.cache.data.ChannelData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity.channel/TextChannel.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ChannelData // dev.kord.core.entity.channel/TextChannel.data.<get-data>|<get-data>(){}[0]
    final val defaultThreadRateLimitPerUser // dev.kord.core.entity.channel/TextChannel.defaultThreadRateLimitPerUser|{}defaultThreadRateLimitPerUser[0]
        final fun <get-defaultThreadRateLimitPerUser>(): kotlin.time/Duration? // dev.kord.core.entity.channel/TextChannel.defaultThreadRateLimitPerUser.<get-defaultThreadRateLimitPerUser>|<get-defaultThreadRateLimitPerUser>(){}[0]
    final val isNsfw // dev.kord.core.entity.channel/TextChannel.isNsfw|{}isNsfw[0]
        final fun <get-isNsfw>(): kotlin/Boolean // dev.kord.core.entity.channel/TextChannel.isNsfw.<get-isNsfw>|<get-isNsfw>(){}[0]
    final val kord // dev.kord.core.entity.channel/TextChannel.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.channel/TextChannel.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.channel/TextChannel.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.channel/TextChannel.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val userRateLimit // dev.kord.core.entity.channel/TextChannel.userRateLimit|{}userRateLimit[0]
        final fun <get-userRateLimit>(): kotlin.time/Duration? // dev.kord.core.entity.channel/TextChannel.userRateLimit.<get-userRateLimit>|<get-userRateLimit>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.channel/TextChannel.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity.channel/TextChannel.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity.channel/TextChannel.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.channel/TextChannel // dev.kord.core.entity.channel/TextChannel.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun asChannel(): dev.kord.core.entity.channel/TextChannel // dev.kord.core.entity.channel/TextChannel.asChannel|asChannel(){}[0]
    final suspend fun asChannelOrNull(): dev.kord.core.entity.channel/TextChannel // dev.kord.core.entity.channel/TextChannel.asChannelOrNull|asChannelOrNull(){}[0]
}

final class dev.kord.core.entity.channel/VoiceChannel : dev.kord.core.behavior.channel/VoiceChannelBehavior, dev.kord.core.entity.channel/TopGuildMessageChannel { // dev.kord.core.entity.channel/VoiceChannel|null[0]
    constructor <init>(dev.kord.core.cache.data/ChannelData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity.channel/VoiceChannel.<init>|<init>(dev.kord.core.cache.data.ChannelData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val bitrate // dev.kord.core.entity.channel/VoiceChannel.bitrate|{}bitrate[0]
        final fun <get-bitrate>(): kotlin/Int // dev.kord.core.entity.channel/VoiceChannel.bitrate.<get-bitrate>|<get-bitrate>(){}[0]
    final val data // dev.kord.core.entity.channel/VoiceChannel.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ChannelData // dev.kord.core.entity.channel/VoiceChannel.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.entity.channel/VoiceChannel.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.channel/VoiceChannel.kord.<get-kord>|<get-kord>(){}[0]
    final val rtcRegion // dev.kord.core.entity.channel/VoiceChannel.rtcRegion|{}rtcRegion[0]
        final fun <get-rtcRegion>(): kotlin/String? // dev.kord.core.entity.channel/VoiceChannel.rtcRegion.<get-rtcRegion>|<get-rtcRegion>(){}[0]
    final val supplier // dev.kord.core.entity.channel/VoiceChannel.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.channel/VoiceChannel.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val userLimit // dev.kord.core.entity.channel/VoiceChannel.userLimit|{}userLimit[0]
        final fun <get-userLimit>(): kotlin/Int // dev.kord.core.entity.channel/VoiceChannel.userLimit.<get-userLimit>|<get-userLimit>(){}[0]
    final val videoQualityMode // dev.kord.core.entity.channel/VoiceChannel.videoQualityMode|{}videoQualityMode[0]
        final fun <get-videoQualityMode>(): dev.kord.common.entity/VideoQualityMode? // dev.kord.core.entity.channel/VoiceChannel.videoQualityMode.<get-videoQualityMode>|<get-videoQualityMode>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.channel/VoiceChannel.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity.channel/VoiceChannel.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity.channel/VoiceChannel.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.channel/VoiceChannel // dev.kord.core.entity.channel/VoiceChannel.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun asChannel(): dev.kord.core.entity.channel/VoiceChannel // dev.kord.core.entity.channel/VoiceChannel.asChannel|asChannel(){}[0]
    final suspend fun asChannelOrNull(): dev.kord.core.entity.channel/VoiceChannel // dev.kord.core.entity.channel/VoiceChannel.asChannelOrNull|asChannelOrNull(){}[0]
    final suspend fun getRegion(): dev.kord.core.entity/Region // dev.kord.core.entity.channel/VoiceChannel.getRegion|getRegion(){}[0]
    final suspend fun getRegionOrNull(): dev.kord.core.entity/Region? // dev.kord.core.entity.channel/VoiceChannel.getRegionOrNull|getRegionOrNull(){}[0]
}

final class dev.kord.core.entity.channel/WelcomeScreenChannel : dev.kord.core.behavior.channel/ChannelBehavior { // dev.kord.core.entity.channel/WelcomeScreenChannel|null[0]
    constructor <init>(dev.kord.core.cache.data/WelcomeScreenChannelData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity.channel/WelcomeScreenChannel.<init>|<init>(dev.kord.core.cache.data.WelcomeScreenChannelData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity.channel/WelcomeScreenChannel.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/WelcomeScreenChannelData // dev.kord.core.entity.channel/WelcomeScreenChannel.data.<get-data>|<get-data>(){}[0]
    final val description // dev.kord.core.entity.channel/WelcomeScreenChannel.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.core.entity.channel/WelcomeScreenChannel.description.<get-description>|<get-description>(){}[0]
    final val emojiId // dev.kord.core.entity.channel/WelcomeScreenChannel.emojiId|{}emojiId[0]
        final fun <get-emojiId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity.channel/WelcomeScreenChannel.emojiId.<get-emojiId>|<get-emojiId>(){}[0]
    final val emojiName // dev.kord.core.entity.channel/WelcomeScreenChannel.emojiName|{}emojiName[0]
        final fun <get-emojiName>(): kotlin/String? // dev.kord.core.entity.channel/WelcomeScreenChannel.emojiName.<get-emojiName>|<get-emojiName>(){}[0]
    final val id // dev.kord.core.entity.channel/WelcomeScreenChannel.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.channel/WelcomeScreenChannel.id.<get-id>|<get-id>(){}[0]
    final val kord // dev.kord.core.entity.channel/WelcomeScreenChannel.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.channel/WelcomeScreenChannel.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.channel/WelcomeScreenChannel.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.channel/WelcomeScreenChannel.supplier.<get-supplier>|<get-supplier>(){}[0]
}

final class dev.kord.core.entity.component/ActionRowComponent : dev.kord.core.entity.component/Component { // dev.kord.core.entity.component/ActionRowComponent|null[0]
    constructor <init>(dev.kord.core.cache.data/ComponentData) // dev.kord.core.entity.component/ActionRowComponent.<init>|<init>(dev.kord.core.cache.data.ComponentData){}[0]

    final val components // dev.kord.core.entity.component/ActionRowComponent.components|{}components[0]
        final fun <get-components>(): kotlin.collections/List<dev.kord.core.entity.component/Component> // dev.kord.core.entity.component/ActionRowComponent.components.<get-components>|<get-components>(){}[0]
    final val data // dev.kord.core.entity.component/ActionRowComponent.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ComponentData // dev.kord.core.entity.component/ActionRowComponent.data.<get-data>|<get-data>(){}[0]
    final val interactionButtons // dev.kord.core.entity.component/ActionRowComponent.interactionButtons|{}interactionButtons[0]
        final fun <get-interactionButtons>(): kotlin.collections/Map<kotlin/String, dev.kord.core.entity.component/ButtonComponent> // dev.kord.core.entity.component/ActionRowComponent.interactionButtons.<get-interactionButtons>|<get-interactionButtons>(){}[0]
    final val linkButtons // dev.kord.core.entity.component/ActionRowComponent.linkButtons|{}linkButtons[0]
        final fun <get-linkButtons>(): kotlin.collections/List<dev.kord.core.entity.component/ButtonComponent> // dev.kord.core.entity.component/ActionRowComponent.linkButtons.<get-linkButtons>|<get-linkButtons>(){}[0]
    final val selectMenus // dev.kord.core.entity.component/ActionRowComponent.selectMenus|{}selectMenus[0]
        final fun <get-selectMenus>(): kotlin.collections/Map<kotlin/String, dev.kord.core.entity.component/SelectMenuComponent> // dev.kord.core.entity.component/ActionRowComponent.selectMenus.<get-selectMenus>|<get-selectMenus>(){}[0]
    final val textInputs // dev.kord.core.entity.component/ActionRowComponent.textInputs|{}textInputs[0]
        final fun <get-textInputs>(): kotlin.collections/Map<kotlin/String, dev.kord.core.entity.component/TextInputComponent> // dev.kord.core.entity.component/ActionRowComponent.textInputs.<get-textInputs>|<get-textInputs>(){}[0]
    final val type // dev.kord.core.entity.component/ActionRowComponent.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ComponentType.ActionRow // dev.kord.core.entity.component/ActionRowComponent.type.<get-type>|<get-type>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity.component/ActionRowComponent.toString|toString(){}[0]
}

final class dev.kord.core.entity.component/ButtonComponent : dev.kord.core.entity.component/Component { // dev.kord.core.entity.component/ButtonComponent|null[0]
    constructor <init>(dev.kord.core.cache.data/ChatComponentData) // dev.kord.core.entity.component/ButtonComponent.<init>|<init>(dev.kord.core.cache.data.ChatComponentData){}[0]

    final val customId // dev.kord.core.entity.component/ButtonComponent.customId|{}customId[0]
        final fun <get-customId>(): kotlin/String? // dev.kord.core.entity.component/ButtonComponent.customId.<get-customId>|<get-customId>(){}[0]
    final val data // dev.kord.core.entity.component/ButtonComponent.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ChatComponentData // dev.kord.core.entity.component/ButtonComponent.data.<get-data>|<get-data>(){}[0]
    final val disabled // dev.kord.core.entity.component/ButtonComponent.disabled|{}disabled[0]
        final fun <get-disabled>(): kotlin/Boolean // dev.kord.core.entity.component/ButtonComponent.disabled.<get-disabled>|<get-disabled>(){}[0]
    final val emoji // dev.kord.core.entity.component/ButtonComponent.emoji|{}emoji[0]
        final fun <get-emoji>(): dev.kord.core.entity/ReactionEmoji? // dev.kord.core.entity.component/ButtonComponent.emoji.<get-emoji>|<get-emoji>(){}[0]
    final val label // dev.kord.core.entity.component/ButtonComponent.label|{}label[0]
        final fun <get-label>(): kotlin/String? // dev.kord.core.entity.component/ButtonComponent.label.<get-label>|<get-label>(){}[0]
    final val style // dev.kord.core.entity.component/ButtonComponent.style|{}style[0]
        final fun <get-style>(): dev.kord.common.entity/ButtonStyle // dev.kord.core.entity.component/ButtonComponent.style.<get-style>|<get-style>(){}[0]
    final val type // dev.kord.core.entity.component/ButtonComponent.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ComponentType.Button // dev.kord.core.entity.component/ButtonComponent.type.<get-type>|<get-type>(){}[0]
    final val url // dev.kord.core.entity.component/ButtonComponent.url|{}url[0]
        final fun <get-url>(): kotlin/String? // dev.kord.core.entity.component/ButtonComponent.url.<get-url>|<get-url>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity.component/ButtonComponent.toString|toString(){}[0]
}

final class dev.kord.core.entity.component/ChannelSelectComponent : dev.kord.core.entity.component/SelectMenuComponent { // dev.kord.core.entity.component/ChannelSelectComponent|null[0]
    constructor <init>(dev.kord.core.cache.data/ComponentData) // dev.kord.core.entity.component/ChannelSelectComponent.<init>|<init>(dev.kord.core.cache.data.ComponentData){}[0]

    final val channelTypes // dev.kord.core.entity.component/ChannelSelectComponent.channelTypes|{}channelTypes[0]
        final fun <get-channelTypes>(): kotlin.collections/List<dev.kord.common.entity/ChannelType>? // dev.kord.core.entity.component/ChannelSelectComponent.channelTypes.<get-channelTypes>|<get-channelTypes>(){}[0]
    final val defaultValues // dev.kord.core.entity.component/ChannelSelectComponent.defaultValues|{}defaultValues[0]
        final fun <get-defaultValues>(): kotlin.collections/List<dev.kord.core.entity.component/SelectDefaultValue.Channel> // dev.kord.core.entity.component/ChannelSelectComponent.defaultValues.<get-defaultValues>|<get-defaultValues>(){}[0]
    final val type // dev.kord.core.entity.component/ChannelSelectComponent.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ComponentType.StringSelect // dev.kord.core.entity.component/ChannelSelectComponent.type.<get-type>|<get-type>(){}[0]
}

final class dev.kord.core.entity.component/MentionableSelectComponent : dev.kord.core.entity.component/SelectMenuComponent { // dev.kord.core.entity.component/MentionableSelectComponent|null[0]
    constructor <init>(dev.kord.core.cache.data/ComponentData) // dev.kord.core.entity.component/MentionableSelectComponent.<init>|<init>(dev.kord.core.cache.data.ComponentData){}[0]

    final val defaultValues // dev.kord.core.entity.component/MentionableSelectComponent.defaultValues|{}defaultValues[0]
        final fun <get-defaultValues>(): kotlin.collections/List<dev.kord.core.entity.component/SelectDefaultValue.Mentionable> // dev.kord.core.entity.component/MentionableSelectComponent.defaultValues.<get-defaultValues>|<get-defaultValues>(){}[0]
    final val type // dev.kord.core.entity.component/MentionableSelectComponent.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ComponentType.MentionableSelect // dev.kord.core.entity.component/MentionableSelectComponent.type.<get-type>|<get-type>(){}[0]
}

final class dev.kord.core.entity.component/RoleSelectComponent : dev.kord.core.entity.component/SelectMenuComponent { // dev.kord.core.entity.component/RoleSelectComponent|null[0]
    constructor <init>(dev.kord.core.cache.data/ComponentData) // dev.kord.core.entity.component/RoleSelectComponent.<init>|<init>(dev.kord.core.cache.data.ComponentData){}[0]

    final val defaultValues // dev.kord.core.entity.component/RoleSelectComponent.defaultValues|{}defaultValues[0]
        final fun <get-defaultValues>(): kotlin.collections/List<dev.kord.core.entity.component/SelectDefaultValue.Role> // dev.kord.core.entity.component/RoleSelectComponent.defaultValues.<get-defaultValues>|<get-defaultValues>(){}[0]
    final val type // dev.kord.core.entity.component/RoleSelectComponent.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ComponentType.RoleSelect // dev.kord.core.entity.component/RoleSelectComponent.type.<get-type>|<get-type>(){}[0]
}

final class dev.kord.core.entity.component/SelectOption { // dev.kord.core.entity.component/SelectOption|null[0]
    constructor <init>(dev.kord.core.cache.data/SelectOptionData) // dev.kord.core.entity.component/SelectOption.<init>|<init>(dev.kord.core.cache.data.SelectOptionData){}[0]

    final val data // dev.kord.core.entity.component/SelectOption.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/SelectOptionData // dev.kord.core.entity.component/SelectOption.data.<get-data>|<get-data>(){}[0]
    final val default // dev.kord.core.entity.component/SelectOption.default|{}default[0]
        final fun <get-default>(): kotlin/Boolean // dev.kord.core.entity.component/SelectOption.default.<get-default>|<get-default>(){}[0]
    final val description // dev.kord.core.entity.component/SelectOption.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.core.entity.component/SelectOption.description.<get-description>|<get-description>(){}[0]
    final val emoji // dev.kord.core.entity.component/SelectOption.emoji|{}emoji[0]
        final fun <get-emoji>(): dev.kord.common.entity/DiscordPartialEmoji? // dev.kord.core.entity.component/SelectOption.emoji.<get-emoji>|<get-emoji>(){}[0]
    final val label // dev.kord.core.entity.component/SelectOption.label|{}label[0]
        final fun <get-label>(): kotlin/String // dev.kord.core.entity.component/SelectOption.label.<get-label>|<get-label>(){}[0]
    final val value // dev.kord.core.entity.component/SelectOption.value|{}value[0]
        final fun <get-value>(): kotlin/String // dev.kord.core.entity.component/SelectOption.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.component/SelectOption.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity.component/SelectOption.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity.component/SelectOption.toString|toString(){}[0]
}

final class dev.kord.core.entity.component/StringSelectComponent : dev.kord.core.entity.component/SelectMenuComponent { // dev.kord.core.entity.component/StringSelectComponent|null[0]
    constructor <init>(dev.kord.core.cache.data/ComponentData) // dev.kord.core.entity.component/StringSelectComponent.<init>|<init>(dev.kord.core.cache.data.ComponentData){}[0]

    final val options // dev.kord.core.entity.component/StringSelectComponent.options|{}options[0]
        final fun <get-options>(): kotlin.collections/List<dev.kord.core.entity.component/SelectOption> // dev.kord.core.entity.component/StringSelectComponent.options.<get-options>|<get-options>(){}[0]
    final val type // dev.kord.core.entity.component/StringSelectComponent.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ComponentType.StringSelect // dev.kord.core.entity.component/StringSelectComponent.type.<get-type>|<get-type>(){}[0]
}

final class dev.kord.core.entity.component/TextInputComponent : dev.kord.core.entity.component/Component { // dev.kord.core.entity.component/TextInputComponent|null[0]
    constructor <init>(dev.kord.core.cache.data/TextInputComponentData) // dev.kord.core.entity.component/TextInputComponent.<init>|<init>(dev.kord.core.cache.data.TextInputComponentData){}[0]

    final val customId // dev.kord.core.entity.component/TextInputComponent.customId|{}customId[0]
        final fun <get-customId>(): kotlin/String // dev.kord.core.entity.component/TextInputComponent.customId.<get-customId>|<get-customId>(){}[0]
    final val data // dev.kord.core.entity.component/TextInputComponent.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/TextInputComponentData // dev.kord.core.entity.component/TextInputComponent.data.<get-data>|<get-data>(){}[0]
    final val label // dev.kord.core.entity.component/TextInputComponent.label|{}label[0]
        final fun <get-label>(): kotlin/String // dev.kord.core.entity.component/TextInputComponent.label.<get-label>|<get-label>(){}[0]
    final val maxLength // dev.kord.core.entity.component/TextInputComponent.maxLength|{}maxLength[0]
        final fun <get-maxLength>(): kotlin/Int? // dev.kord.core.entity.component/TextInputComponent.maxLength.<get-maxLength>|<get-maxLength>(){}[0]
    final val minLength // dev.kord.core.entity.component/TextInputComponent.minLength|{}minLength[0]
        final fun <get-minLength>(): kotlin/Int? // dev.kord.core.entity.component/TextInputComponent.minLength.<get-minLength>|<get-minLength>(){}[0]
    final val placeholder // dev.kord.core.entity.component/TextInputComponent.placeholder|{}placeholder[0]
        final fun <get-placeholder>(): kotlin/String? // dev.kord.core.entity.component/TextInputComponent.placeholder.<get-placeholder>|<get-placeholder>(){}[0]
    final val required // dev.kord.core.entity.component/TextInputComponent.required|{}required[0]
        final fun <get-required>(): kotlin/Boolean // dev.kord.core.entity.component/TextInputComponent.required.<get-required>|<get-required>(){}[0]
    final val style // dev.kord.core.entity.component/TextInputComponent.style|{}style[0]
        final fun <get-style>(): dev.kord.common.entity/TextInputStyle // dev.kord.core.entity.component/TextInputComponent.style.<get-style>|<get-style>(){}[0]
    final val type // dev.kord.core.entity.component/TextInputComponent.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ComponentType.TextInput // dev.kord.core.entity.component/TextInputComponent.type.<get-type>|<get-type>(){}[0]
    final val value // dev.kord.core.entity.component/TextInputComponent.value|{}value[0]
        final fun <get-value>(): kotlin/String? // dev.kord.core.entity.component/TextInputComponent.value.<get-value>|<get-value>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity.component/TextInputComponent.toString|toString(){}[0]
}

final class dev.kord.core.entity.component/UnknownComponent : dev.kord.core.entity.component/Component { // dev.kord.core.entity.component/UnknownComponent|null[0]
    constructor <init>(dev.kord.core.cache.data/ComponentData) // dev.kord.core.entity.component/UnknownComponent.<init>|<init>(dev.kord.core.cache.data.ComponentData){}[0]

    final val data // dev.kord.core.entity.component/UnknownComponent.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ComponentData // dev.kord.core.entity.component/UnknownComponent.data.<get-data>|<get-data>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity.component/UnknownComponent.toString|toString(){}[0]
}

final class dev.kord.core.entity.component/UserSelectComponent : dev.kord.core.entity.component/SelectMenuComponent { // dev.kord.core.entity.component/UserSelectComponent|null[0]
    constructor <init>(dev.kord.core.cache.data/ComponentData) // dev.kord.core.entity.component/UserSelectComponent.<init>|<init>(dev.kord.core.cache.data.ComponentData){}[0]

    final val defaultValues // dev.kord.core.entity.component/UserSelectComponent.defaultValues|{}defaultValues[0]
        final fun <get-defaultValues>(): kotlin.collections/List<dev.kord.core.entity.component/SelectDefaultValue.User> // dev.kord.core.entity.component/UserSelectComponent.defaultValues.<get-defaultValues>|<get-defaultValues>(){}[0]
    final val type // dev.kord.core.entity.component/UserSelectComponent.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ComponentType.UserSelect // dev.kord.core.entity.component/UserSelectComponent.type.<get-type>|<get-type>(){}[0]
}

final class dev.kord.core.entity.interaction.followup/EphemeralFollowupMessage : dev.kord.core.behavior.interaction.followup/EphemeralFollowupMessageBehavior, dev.kord.core.entity.interaction.followup/FollowupMessage { // dev.kord.core.entity.interaction.followup/EphemeralFollowupMessage|null[0]
    constructor <init>(dev.kord.core.entity/Message, dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity.interaction.followup/EphemeralFollowupMessage.<init>|<init>(dev.kord.core.entity.Message;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val applicationId // dev.kord.core.entity.interaction.followup/EphemeralFollowupMessage.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.interaction.followup/EphemeralFollowupMessage.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val kord // dev.kord.core.entity.interaction.followup/EphemeralFollowupMessage.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.interaction.followup/EphemeralFollowupMessage.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.interaction.followup/EphemeralFollowupMessage.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.interaction.followup/EphemeralFollowupMessage.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val token // dev.kord.core.entity.interaction.followup/EphemeralFollowupMessage.token|{}token[0]
        final fun <get-token>(): kotlin/String // dev.kord.core.entity.interaction.followup/EphemeralFollowupMessage.token.<get-token>|<get-token>(){}[0]

    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction.followup/EphemeralFollowupMessage // dev.kord.core.entity.interaction.followup/EphemeralFollowupMessage.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.entity.interaction.followup/PublicFollowupMessage : dev.kord.core.behavior.interaction.followup/PublicFollowupMessageBehavior, dev.kord.core.entity.interaction.followup/FollowupMessage { // dev.kord.core.entity.interaction.followup/PublicFollowupMessage|null[0]
    constructor <init>(dev.kord.core.entity/Message, dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity.interaction.followup/PublicFollowupMessage.<init>|<init>(dev.kord.core.entity.Message;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val applicationId // dev.kord.core.entity.interaction.followup/PublicFollowupMessage.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.interaction.followup/PublicFollowupMessage.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val kord // dev.kord.core.entity.interaction.followup/PublicFollowupMessage.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.interaction.followup/PublicFollowupMessage.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.interaction.followup/PublicFollowupMessage.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.interaction.followup/PublicFollowupMessage.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val token // dev.kord.core.entity.interaction.followup/PublicFollowupMessage.token|{}token[0]
        final fun <get-token>(): kotlin/String // dev.kord.core.entity.interaction.followup/PublicFollowupMessage.token.<get-token>|<get-token>(){}[0]

    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction.followup/PublicFollowupMessage // dev.kord.core.entity.interaction.followup/PublicFollowupMessage.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.entity.interaction.response/EphemeralMessageInteractionResponse : dev.kord.core.behavior.interaction.response/EphemeralMessageInteractionResponseBehavior, dev.kord.core.entity.interaction.response/MessageInteractionResponse { // dev.kord.core.entity.interaction.response/EphemeralMessageInteractionResponse|null[0]
    constructor <init>(dev.kord.core.entity/Message, dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity.interaction.response/EphemeralMessageInteractionResponse.<init>|<init>(dev.kord.core.entity.Message;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val applicationId // dev.kord.core.entity.interaction.response/EphemeralMessageInteractionResponse.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.interaction.response/EphemeralMessageInteractionResponse.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val kord // dev.kord.core.entity.interaction.response/EphemeralMessageInteractionResponse.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.interaction.response/EphemeralMessageInteractionResponse.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.interaction.response/EphemeralMessageInteractionResponse.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.interaction.response/EphemeralMessageInteractionResponse.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val token // dev.kord.core.entity.interaction.response/EphemeralMessageInteractionResponse.token|{}token[0]
        final fun <get-token>(): kotlin/String // dev.kord.core.entity.interaction.response/EphemeralMessageInteractionResponse.token.<get-token>|<get-token>(){}[0]

    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction.response/EphemeralMessageInteractionResponse // dev.kord.core.entity.interaction.response/EphemeralMessageInteractionResponse.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.entity.interaction.response/PublicMessageInteractionResponse : dev.kord.core.behavior.interaction.response/PublicMessageInteractionResponseBehavior, dev.kord.core.entity.interaction.response/MessageInteractionResponse { // dev.kord.core.entity.interaction.response/PublicMessageInteractionResponse|null[0]
    constructor <init>(dev.kord.core.entity/Message, dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity.interaction.response/PublicMessageInteractionResponse.<init>|<init>(dev.kord.core.entity.Message;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val applicationId // dev.kord.core.entity.interaction.response/PublicMessageInteractionResponse.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.interaction.response/PublicMessageInteractionResponse.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val kord // dev.kord.core.entity.interaction.response/PublicMessageInteractionResponse.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.interaction.response/PublicMessageInteractionResponse.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.interaction.response/PublicMessageInteractionResponse.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.interaction.response/PublicMessageInteractionResponse.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val token // dev.kord.core.entity.interaction.response/PublicMessageInteractionResponse.token|{}token[0]
        final fun <get-token>(): kotlin/String // dev.kord.core.entity.interaction.response/PublicMessageInteractionResponse.token.<get-token>|<get-token>(){}[0]

    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction.response/PublicMessageInteractionResponse // dev.kord.core.entity.interaction.response/PublicMessageInteractionResponse.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.entity.interaction/AttachmentOptionValue : dev.kord.core.entity.interaction/ResolvableOptionValue<dev.kord.core.entity/Attachment> { // dev.kord.core.entity.interaction/AttachmentOptionValue|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/Boolean, dev.kord.core.entity/Attachment?) // dev.kord.core.entity.interaction/AttachmentOptionValue.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.Boolean;dev.kord.core.entity.Attachment?){}[0]

    final val focused // dev.kord.core.entity.interaction/AttachmentOptionValue.focused|{}focused[0]
        final fun <get-focused>(): kotlin/Boolean // dev.kord.core.entity.interaction/AttachmentOptionValue.focused.<get-focused>|<get-focused>(){}[0]
    final val resolvedObject // dev.kord.core.entity.interaction/AttachmentOptionValue.resolvedObject|{}resolvedObject[0]
        final fun <get-resolvedObject>(): dev.kord.core.entity/Attachment? // dev.kord.core.entity.interaction/AttachmentOptionValue.resolvedObject.<get-resolvedObject>|<get-resolvedObject>(){}[0]
    final val value // dev.kord.core.entity.interaction/AttachmentOptionValue.value|{}value[0]
        final fun <get-value>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.interaction/AttachmentOptionValue.value.<get-value>|<get-value>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity.interaction/AttachmentOptionValue.toString|toString(){}[0]
}

final class dev.kord.core.entity.interaction/BooleanOptionValue : dev.kord.core.entity.interaction/OptionValue<kotlin/Boolean> { // dev.kord.core.entity.interaction/BooleanOptionValue|null[0]
    constructor <init>(kotlin/Boolean, kotlin/Boolean) // dev.kord.core.entity.interaction/BooleanOptionValue.<init>|<init>(kotlin.Boolean;kotlin.Boolean){}[0]

    final val focused // dev.kord.core.entity.interaction/BooleanOptionValue.focused|{}focused[0]
        final fun <get-focused>(): kotlin/Boolean // dev.kord.core.entity.interaction/BooleanOptionValue.focused.<get-focused>|<get-focused>(){}[0]
    final val value // dev.kord.core.entity.interaction/BooleanOptionValue.value|{}value[0]
        final fun <get-value>(): kotlin/Boolean // dev.kord.core.entity.interaction/BooleanOptionValue.value.<get-value>|<get-value>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity.interaction/BooleanOptionValue.toString|toString(){}[0]
}

final class dev.kord.core.entity.interaction/ChannelOptionValue : dev.kord.core.entity.interaction/ResolvableOptionValue<dev.kord.core.entity.channel/ResolvedChannel> { // dev.kord.core.entity.interaction/ChannelOptionValue|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/Boolean, dev.kord.core.entity.channel/ResolvedChannel?) // dev.kord.core.entity.interaction/ChannelOptionValue.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.Boolean;dev.kord.core.entity.channel.ResolvedChannel?){}[0]

    final val focused // dev.kord.core.entity.interaction/ChannelOptionValue.focused|{}focused[0]
        final fun <get-focused>(): kotlin/Boolean // dev.kord.core.entity.interaction/ChannelOptionValue.focused.<get-focused>|<get-focused>(){}[0]
    final val resolvedObject // dev.kord.core.entity.interaction/ChannelOptionValue.resolvedObject|{}resolvedObject[0]
        final fun <get-resolvedObject>(): dev.kord.core.entity.channel/ResolvedChannel? // dev.kord.core.entity.interaction/ChannelOptionValue.resolvedObject.<get-resolvedObject>|<get-resolvedObject>(){}[0]
    final val value // dev.kord.core.entity.interaction/ChannelOptionValue.value|{}value[0]
        final fun <get-value>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.interaction/ChannelOptionValue.value.<get-value>|<get-value>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity.interaction/ChannelOptionValue.toString|toString(){}[0]
}

final class dev.kord.core.entity.interaction/GlobalAutoCompleteInteraction : dev.kord.core.entity.interaction/AutoCompleteInteraction, dev.kord.core.entity.interaction/GlobalInteraction { // dev.kord.core.entity.interaction/GlobalAutoCompleteInteraction|null[0]
    constructor <init>(dev.kord.core.cache.data/InteractionData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity.interaction/GlobalAutoCompleteInteraction.<init>|<init>(dev.kord.core.cache.data.InteractionData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity.interaction/GlobalAutoCompleteInteraction.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/InteractionData // dev.kord.core.entity.interaction/GlobalAutoCompleteInteraction.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.entity.interaction/GlobalAutoCompleteInteraction.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.interaction/GlobalAutoCompleteInteraction.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.interaction/GlobalAutoCompleteInteraction.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.interaction/GlobalAutoCompleteInteraction.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.interaction/GlobalAutoCompleteInteraction.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity.interaction/GlobalAutoCompleteInteraction.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity.interaction/GlobalAutoCompleteInteraction.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/GlobalAutoCompleteInteraction // dev.kord.core.entity.interaction/GlobalAutoCompleteInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.entity.interaction/GlobalButtonInteraction : dev.kord.core.entity.interaction/ButtonInteraction, dev.kord.core.entity.interaction/GlobalComponentInteraction { // dev.kord.core.entity.interaction/GlobalButtonInteraction|null[0]
    constructor <init>(dev.kord.core.cache.data/InteractionData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier) // dev.kord.core.entity.interaction/GlobalButtonInteraction.<init>|<init>(dev.kord.core.cache.data.InteractionData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity.interaction/GlobalButtonInteraction.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/InteractionData // dev.kord.core.entity.interaction/GlobalButtonInteraction.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.entity.interaction/GlobalButtonInteraction.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.interaction/GlobalButtonInteraction.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.interaction/GlobalButtonInteraction.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.interaction/GlobalButtonInteraction.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.interaction/GlobalButtonInteraction.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity.interaction/GlobalButtonInteraction.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity.interaction/GlobalButtonInteraction.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/GlobalButtonInteraction // dev.kord.core.entity.interaction/GlobalButtonInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.entity.interaction/GlobalChatInputCommandInteraction : dev.kord.core.entity.interaction/ChatInputCommandInteraction, dev.kord.core.entity.interaction/GlobalApplicationCommandInteraction { // dev.kord.core.entity.interaction/GlobalChatInputCommandInteraction|null[0]
    constructor <init>(dev.kord.core.cache.data/InteractionData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier) // dev.kord.core.entity.interaction/GlobalChatInputCommandInteraction.<init>|<init>(dev.kord.core.cache.data.InteractionData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity.interaction/GlobalChatInputCommandInteraction.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/InteractionData // dev.kord.core.entity.interaction/GlobalChatInputCommandInteraction.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.entity.interaction/GlobalChatInputCommandInteraction.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.interaction/GlobalChatInputCommandInteraction.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.interaction/GlobalChatInputCommandInteraction.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.interaction/GlobalChatInputCommandInteraction.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.interaction/GlobalChatInputCommandInteraction.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity.interaction/GlobalChatInputCommandInteraction.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity.interaction/GlobalChatInputCommandInteraction.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/GlobalChatInputCommandInteraction // dev.kord.core.entity.interaction/GlobalChatInputCommandInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.entity.interaction/GlobalMessageCommandInteraction : dev.kord.core.entity.interaction/GlobalApplicationCommandInteraction, dev.kord.core.entity.interaction/MessageCommandInteraction { // dev.kord.core.entity.interaction/GlobalMessageCommandInteraction|null[0]
    constructor <init>(dev.kord.core.cache.data/InteractionData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier) // dev.kord.core.entity.interaction/GlobalMessageCommandInteraction.<init>|<init>(dev.kord.core.cache.data.InteractionData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity.interaction/GlobalMessageCommandInteraction.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/InteractionData // dev.kord.core.entity.interaction/GlobalMessageCommandInteraction.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.entity.interaction/GlobalMessageCommandInteraction.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.interaction/GlobalMessageCommandInteraction.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.interaction/GlobalMessageCommandInteraction.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.interaction/GlobalMessageCommandInteraction.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.interaction/GlobalMessageCommandInteraction.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity.interaction/GlobalMessageCommandInteraction.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity.interaction/GlobalMessageCommandInteraction.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/GlobalMessageCommandInteraction // dev.kord.core.entity.interaction/GlobalMessageCommandInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.entity.interaction/GlobalModalSubmitInteraction : dev.kord.core.entity.interaction/GlobalInteraction, dev.kord.core.entity.interaction/ModalSubmitInteraction { // dev.kord.core.entity.interaction/GlobalModalSubmitInteraction|null[0]
    constructor <init>(dev.kord.core.cache.data/InteractionData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity.interaction/GlobalModalSubmitInteraction.<init>|<init>(dev.kord.core.cache.data.InteractionData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity.interaction/GlobalModalSubmitInteraction.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/InteractionData // dev.kord.core.entity.interaction/GlobalModalSubmitInteraction.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.entity.interaction/GlobalModalSubmitInteraction.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.interaction/GlobalModalSubmitInteraction.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.interaction/GlobalModalSubmitInteraction.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.interaction/GlobalModalSubmitInteraction.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.interaction/GlobalModalSubmitInteraction.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity.interaction/GlobalModalSubmitInteraction.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity.interaction/GlobalModalSubmitInteraction.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/GlobalModalSubmitInteraction // dev.kord.core.entity.interaction/GlobalModalSubmitInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.entity.interaction/GlobalSelectMenuInteraction : dev.kord.core.entity.interaction/GlobalComponentInteraction, dev.kord.core.entity.interaction/SelectMenuInteraction { // dev.kord.core.entity.interaction/GlobalSelectMenuInteraction|null[0]
    constructor <init>(dev.kord.core.cache.data/InteractionData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier) // dev.kord.core.entity.interaction/GlobalSelectMenuInteraction.<init>|<init>(dev.kord.core.cache.data.InteractionData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity.interaction/GlobalSelectMenuInteraction.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/InteractionData // dev.kord.core.entity.interaction/GlobalSelectMenuInteraction.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.entity.interaction/GlobalSelectMenuInteraction.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.interaction/GlobalSelectMenuInteraction.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.interaction/GlobalSelectMenuInteraction.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.interaction/GlobalSelectMenuInteraction.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.interaction/GlobalSelectMenuInteraction.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity.interaction/GlobalSelectMenuInteraction.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity.interaction/GlobalSelectMenuInteraction.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/GlobalSelectMenuInteraction // dev.kord.core.entity.interaction/GlobalSelectMenuInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.entity.interaction/GlobalUserCommandInteraction : dev.kord.core.entity.interaction/GlobalApplicationCommandInteraction, dev.kord.core.entity.interaction/UserCommandInteraction { // dev.kord.core.entity.interaction/GlobalUserCommandInteraction|null[0]
    constructor <init>(dev.kord.core.cache.data/InteractionData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier) // dev.kord.core.entity.interaction/GlobalUserCommandInteraction.<init>|<init>(dev.kord.core.cache.data.InteractionData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity.interaction/GlobalUserCommandInteraction.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/InteractionData // dev.kord.core.entity.interaction/GlobalUserCommandInteraction.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.entity.interaction/GlobalUserCommandInteraction.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.interaction/GlobalUserCommandInteraction.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.interaction/GlobalUserCommandInteraction.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.interaction/GlobalUserCommandInteraction.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.interaction/GlobalUserCommandInteraction.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity.interaction/GlobalUserCommandInteraction.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity.interaction/GlobalUserCommandInteraction.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/GlobalUserCommandInteraction // dev.kord.core.entity.interaction/GlobalUserCommandInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.entity.interaction/GroupCommand : dev.kord.core.entity.interaction/InteractionCommand { // dev.kord.core.entity.interaction/GroupCommand|null[0]
    constructor <init>(dev.kord.core.cache.data/ApplicationInteractionData, dev.kord.core/Kord) // dev.kord.core.entity.interaction/GroupCommand.<init>|<init>(dev.kord.core.cache.data.ApplicationInteractionData;dev.kord.core.Kord){}[0]

    final val data // dev.kord.core.entity.interaction/GroupCommand.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ApplicationInteractionData // dev.kord.core.entity.interaction/GroupCommand.data.<get-data>|<get-data>(){}[0]
    final val groupName // dev.kord.core.entity.interaction/GroupCommand.groupName|{}groupName[0]
        final fun <get-groupName>(): kotlin/String // dev.kord.core.entity.interaction/GroupCommand.groupName.<get-groupName>|<get-groupName>(){}[0]
    final val kord // dev.kord.core.entity.interaction/GroupCommand.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.interaction/GroupCommand.kord.<get-kord>|<get-kord>(){}[0]
    final val name // dev.kord.core.entity.interaction/GroupCommand.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.entity.interaction/GroupCommand.name.<get-name>|<get-name>(){}[0]
    final val options // dev.kord.core.entity.interaction/GroupCommand.options|{}options[0]
        final fun <get-options>(): kotlin.collections/Map<kotlin/String, dev.kord.core.entity.interaction/OptionValue<*>> // dev.kord.core.entity.interaction/GroupCommand.options.<get-options>|<get-options>(){}[0]
}

final class dev.kord.core.entity.interaction/GuildAutoCompleteInteraction : dev.kord.core.entity.interaction/AutoCompleteInteraction, dev.kord.core.entity.interaction/GuildInteraction { // dev.kord.core.entity.interaction/GuildAutoCompleteInteraction|null[0]
    constructor <init>(dev.kord.core.cache.data/InteractionData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity.interaction/GuildAutoCompleteInteraction.<init>|<init>(dev.kord.core.cache.data.InteractionData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity.interaction/GuildAutoCompleteInteraction.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/InteractionData // dev.kord.core.entity.interaction/GuildAutoCompleteInteraction.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.entity.interaction/GuildAutoCompleteInteraction.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.interaction/GuildAutoCompleteInteraction.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.interaction/GuildAutoCompleteInteraction.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.interaction/GuildAutoCompleteInteraction.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.interaction/GuildAutoCompleteInteraction.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity.interaction/GuildAutoCompleteInteraction.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity.interaction/GuildAutoCompleteInteraction.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/GuildAutoCompleteInteraction // dev.kord.core.entity.interaction/GuildAutoCompleteInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.entity.interaction/GuildButtonInteraction : dev.kord.core.entity.interaction/ButtonInteraction, dev.kord.core.entity.interaction/GuildComponentInteraction { // dev.kord.core.entity.interaction/GuildButtonInteraction|null[0]
    constructor <init>(dev.kord.core.cache.data/InteractionData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier) // dev.kord.core.entity.interaction/GuildButtonInteraction.<init>|<init>(dev.kord.core.cache.data.InteractionData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity.interaction/GuildButtonInteraction.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/InteractionData // dev.kord.core.entity.interaction/GuildButtonInteraction.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.entity.interaction/GuildButtonInteraction.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.interaction/GuildButtonInteraction.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.interaction/GuildButtonInteraction.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.interaction/GuildButtonInteraction.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.interaction/GuildButtonInteraction.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity.interaction/GuildButtonInteraction.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity.interaction/GuildButtonInteraction.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/GuildButtonInteraction // dev.kord.core.entity.interaction/GuildButtonInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.entity.interaction/GuildChatInputCommandInteraction : dev.kord.core.entity.interaction/ChatInputCommandInteraction, dev.kord.core.entity.interaction/GuildApplicationCommandInteraction { // dev.kord.core.entity.interaction/GuildChatInputCommandInteraction|null[0]
    constructor <init>(dev.kord.core.cache.data/InteractionData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier) // dev.kord.core.entity.interaction/GuildChatInputCommandInteraction.<init>|<init>(dev.kord.core.cache.data.InteractionData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity.interaction/GuildChatInputCommandInteraction.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/InteractionData // dev.kord.core.entity.interaction/GuildChatInputCommandInteraction.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.entity.interaction/GuildChatInputCommandInteraction.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.interaction/GuildChatInputCommandInteraction.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.interaction/GuildChatInputCommandInteraction.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.interaction/GuildChatInputCommandInteraction.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.interaction/GuildChatInputCommandInteraction.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity.interaction/GuildChatInputCommandInteraction.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity.interaction/GuildChatInputCommandInteraction.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/GuildChatInputCommandInteraction // dev.kord.core.entity.interaction/GuildChatInputCommandInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.entity.interaction/GuildMessageCommandInteraction : dev.kord.core.entity.interaction/GuildApplicationCommandInteraction, dev.kord.core.entity.interaction/MessageCommandInteraction { // dev.kord.core.entity.interaction/GuildMessageCommandInteraction|null[0]
    constructor <init>(dev.kord.core.cache.data/InteractionData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier) // dev.kord.core.entity.interaction/GuildMessageCommandInteraction.<init>|<init>(dev.kord.core.cache.data.InteractionData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity.interaction/GuildMessageCommandInteraction.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/InteractionData // dev.kord.core.entity.interaction/GuildMessageCommandInteraction.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.entity.interaction/GuildMessageCommandInteraction.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.interaction/GuildMessageCommandInteraction.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.interaction/GuildMessageCommandInteraction.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.interaction/GuildMessageCommandInteraction.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.interaction/GuildMessageCommandInteraction.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity.interaction/GuildMessageCommandInteraction.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity.interaction/GuildMessageCommandInteraction.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/GuildMessageCommandInteraction // dev.kord.core.entity.interaction/GuildMessageCommandInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.entity.interaction/GuildModalSubmitInteraction : dev.kord.core.entity.interaction/GuildInteraction, dev.kord.core.entity.interaction/ModalSubmitInteraction { // dev.kord.core.entity.interaction/GuildModalSubmitInteraction|null[0]
    constructor <init>(dev.kord.core.cache.data/InteractionData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity.interaction/GuildModalSubmitInteraction.<init>|<init>(dev.kord.core.cache.data.InteractionData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity.interaction/GuildModalSubmitInteraction.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/InteractionData // dev.kord.core.entity.interaction/GuildModalSubmitInteraction.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.entity.interaction/GuildModalSubmitInteraction.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.interaction/GuildModalSubmitInteraction.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.interaction/GuildModalSubmitInteraction.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.interaction/GuildModalSubmitInteraction.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.interaction/GuildModalSubmitInteraction.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity.interaction/GuildModalSubmitInteraction.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity.interaction/GuildModalSubmitInteraction.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/GuildModalSubmitInteraction // dev.kord.core.entity.interaction/GuildModalSubmitInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.entity.interaction/GuildSelectMenuInteraction : dev.kord.core.entity.interaction/GuildComponentInteraction, dev.kord.core.entity.interaction/SelectMenuInteraction { // dev.kord.core.entity.interaction/GuildSelectMenuInteraction|null[0]
    constructor <init>(dev.kord.core.cache.data/InteractionData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier) // dev.kord.core.entity.interaction/GuildSelectMenuInteraction.<init>|<init>(dev.kord.core.cache.data.InteractionData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity.interaction/GuildSelectMenuInteraction.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/InteractionData // dev.kord.core.entity.interaction/GuildSelectMenuInteraction.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.entity.interaction/GuildSelectMenuInteraction.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.interaction/GuildSelectMenuInteraction.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.interaction/GuildSelectMenuInteraction.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.interaction/GuildSelectMenuInteraction.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.interaction/GuildSelectMenuInteraction.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity.interaction/GuildSelectMenuInteraction.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity.interaction/GuildSelectMenuInteraction.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/GuildSelectMenuInteraction // dev.kord.core.entity.interaction/GuildSelectMenuInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.entity.interaction/GuildUserCommandInteraction : dev.kord.core.entity.interaction/GuildApplicationCommandInteraction, dev.kord.core.entity.interaction/UserCommandInteraction { // dev.kord.core.entity.interaction/GuildUserCommandInteraction|null[0]
    constructor <init>(dev.kord.core.cache.data/InteractionData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier) // dev.kord.core.entity.interaction/GuildUserCommandInteraction.<init>|<init>(dev.kord.core.cache.data.InteractionData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity.interaction/GuildUserCommandInteraction.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/InteractionData // dev.kord.core.entity.interaction/GuildUserCommandInteraction.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.entity.interaction/GuildUserCommandInteraction.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.interaction/GuildUserCommandInteraction.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity.interaction/GuildUserCommandInteraction.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.interaction/GuildUserCommandInteraction.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.interaction/GuildUserCommandInteraction.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity.interaction/GuildUserCommandInteraction.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity.interaction/GuildUserCommandInteraction.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction/GuildUserCommandInteraction // dev.kord.core.entity.interaction/GuildUserCommandInteraction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.entity.interaction/IntegerOptionValue : dev.kord.core.entity.interaction/OptionValue<kotlin/Long> { // dev.kord.core.entity.interaction/IntegerOptionValue|null[0]
    constructor <init>(kotlin/Long, kotlin/Boolean) // dev.kord.core.entity.interaction/IntegerOptionValue.<init>|<init>(kotlin.Long;kotlin.Boolean){}[0]

    final val focused // dev.kord.core.entity.interaction/IntegerOptionValue.focused|{}focused[0]
        final fun <get-focused>(): kotlin/Boolean // dev.kord.core.entity.interaction/IntegerOptionValue.focused.<get-focused>|<get-focused>(){}[0]
    final val value // dev.kord.core.entity.interaction/IntegerOptionValue.value|{}value[0]
        final fun <get-value>(): kotlin/Long // dev.kord.core.entity.interaction/IntegerOptionValue.value.<get-value>|<get-value>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity.interaction/IntegerOptionValue.toString|toString(){}[0]
}

final class dev.kord.core.entity.interaction/MemberOptionValue : dev.kord.core.entity.interaction/UserOptionValue { // dev.kord.core.entity.interaction/MemberOptionValue|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/Boolean, dev.kord.core.entity/Member?) // dev.kord.core.entity.interaction/MemberOptionValue.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.Boolean;dev.kord.core.entity.Member?){}[0]

    final val resolvedObject // dev.kord.core.entity.interaction/MemberOptionValue.resolvedObject|{}resolvedObject[0]
        final fun <get-resolvedObject>(): dev.kord.core.entity/Member? // dev.kord.core.entity.interaction/MemberOptionValue.resolvedObject.<get-resolvedObject>|<get-resolvedObject>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity.interaction/MemberOptionValue.toString|toString(){}[0]
}

final class dev.kord.core.entity.interaction/MentionableOptionValue : dev.kord.core.entity.interaction/ResolvableOptionValue<dev.kord.core.entity/Entity> { // dev.kord.core.entity.interaction/MentionableOptionValue|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/Boolean, dev.kord.core.entity/Entity?) // dev.kord.core.entity.interaction/MentionableOptionValue.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.Boolean;dev.kord.core.entity.Entity?){}[0]

    final val focused // dev.kord.core.entity.interaction/MentionableOptionValue.focused|{}focused[0]
        final fun <get-focused>(): kotlin/Boolean // dev.kord.core.entity.interaction/MentionableOptionValue.focused.<get-focused>|<get-focused>(){}[0]
    final val resolvedObject // dev.kord.core.entity.interaction/MentionableOptionValue.resolvedObject|{}resolvedObject[0]
        final fun <get-resolvedObject>(): dev.kord.core.entity/Entity? // dev.kord.core.entity.interaction/MentionableOptionValue.resolvedObject.<get-resolvedObject>|<get-resolvedObject>(){}[0]
    final val value // dev.kord.core.entity.interaction/MentionableOptionValue.value|{}value[0]
        final fun <get-value>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.interaction/MentionableOptionValue.value.<get-value>|<get-value>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity.interaction/MentionableOptionValue.toString|toString(){}[0]
}

final class dev.kord.core.entity.interaction/NumberOptionValue : dev.kord.core.entity.interaction/OptionValue<kotlin/Double> { // dev.kord.core.entity.interaction/NumberOptionValue|null[0]
    constructor <init>(kotlin/Double, kotlin/Boolean) // dev.kord.core.entity.interaction/NumberOptionValue.<init>|<init>(kotlin.Double;kotlin.Boolean){}[0]

    final val focused // dev.kord.core.entity.interaction/NumberOptionValue.focused|{}focused[0]
        final fun <get-focused>(): kotlin/Boolean // dev.kord.core.entity.interaction/NumberOptionValue.focused.<get-focused>|<get-focused>(){}[0]
    final val value // dev.kord.core.entity.interaction/NumberOptionValue.value|{}value[0]
        final fun <get-value>(): kotlin/Double // dev.kord.core.entity.interaction/NumberOptionValue.value.<get-value>|<get-value>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity.interaction/NumberOptionValue.toString|toString(){}[0]
}

final class dev.kord.core.entity.interaction/ResolvedObjects { // dev.kord.core.entity.interaction/ResolvedObjects|null[0]
    constructor <init>(dev.kord.core.cache.data/ResolvedObjectsData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...) // dev.kord.core.entity.interaction/ResolvedObjects.<init>|<init>(dev.kord.core.cache.data.ResolvedObjectsData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]

    final val attachments // dev.kord.core.entity.interaction/ResolvedObjects.attachments|{}attachments[0]
        final fun <get-attachments>(): kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.entity/Attachment>? // dev.kord.core.entity.interaction/ResolvedObjects.attachments.<get-attachments>|<get-attachments>(){}[0]
    final val channels // dev.kord.core.entity.interaction/ResolvedObjects.channels|{}channels[0]
        final fun <get-channels>(): kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.entity.channel/ResolvedChannel>? // dev.kord.core.entity.interaction/ResolvedObjects.channels.<get-channels>|<get-channels>(){}[0]
    final val data // dev.kord.core.entity.interaction/ResolvedObjects.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ResolvedObjectsData // dev.kord.core.entity.interaction/ResolvedObjects.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.entity.interaction/ResolvedObjects.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.interaction/ResolvedObjects.kord.<get-kord>|<get-kord>(){}[0]
    final val members // dev.kord.core.entity.interaction/ResolvedObjects.members|{}members[0]
        final fun <get-members>(): kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.entity/Member>? // dev.kord.core.entity.interaction/ResolvedObjects.members.<get-members>|<get-members>(){}[0]
    final val messages // dev.kord.core.entity.interaction/ResolvedObjects.messages|{}messages[0]
        final fun <get-messages>(): kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.entity/Message>? // dev.kord.core.entity.interaction/ResolvedObjects.messages.<get-messages>|<get-messages>(){}[0]
    final val roles // dev.kord.core.entity.interaction/ResolvedObjects.roles|{}roles[0]
        final fun <get-roles>(): kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.entity/Role>? // dev.kord.core.entity.interaction/ResolvedObjects.roles.<get-roles>|<get-roles>(){}[0]
    final val strategy // dev.kord.core.entity.interaction/ResolvedObjects.strategy|{}strategy[0]
        final fun <get-strategy>(): dev.kord.core.supplier/EntitySupplyStrategy<*> // dev.kord.core.entity.interaction/ResolvedObjects.strategy.<get-strategy>|<get-strategy>(){}[0]
    final val users // dev.kord.core.entity.interaction/ResolvedObjects.users|{}users[0]
        final fun <get-users>(): kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.core.entity/User>? // dev.kord.core.entity.interaction/ResolvedObjects.users.<get-users>|<get-users>(){}[0]
}

final class dev.kord.core.entity.interaction/RoleOptionValue : dev.kord.core.entity.interaction/ResolvableOptionValue<dev.kord.core.entity/Role> { // dev.kord.core.entity.interaction/RoleOptionValue|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/Boolean, dev.kord.core.entity/Role?) // dev.kord.core.entity.interaction/RoleOptionValue.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.Boolean;dev.kord.core.entity.Role?){}[0]

    final val focused // dev.kord.core.entity.interaction/RoleOptionValue.focused|{}focused[0]
        final fun <get-focused>(): kotlin/Boolean // dev.kord.core.entity.interaction/RoleOptionValue.focused.<get-focused>|<get-focused>(){}[0]
    final val resolvedObject // dev.kord.core.entity.interaction/RoleOptionValue.resolvedObject|{}resolvedObject[0]
        final fun <get-resolvedObject>(): dev.kord.core.entity/Role? // dev.kord.core.entity.interaction/RoleOptionValue.resolvedObject.<get-resolvedObject>|<get-resolvedObject>(){}[0]
    final val value // dev.kord.core.entity.interaction/RoleOptionValue.value|{}value[0]
        final fun <get-value>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.interaction/RoleOptionValue.value.<get-value>|<get-value>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity.interaction/RoleOptionValue.toString|toString(){}[0]
}

final class dev.kord.core.entity.interaction/RootCommand : dev.kord.core.entity.interaction/InteractionCommand { // dev.kord.core.entity.interaction/RootCommand|null[0]
    constructor <init>(dev.kord.core.cache.data/ApplicationInteractionData, dev.kord.core/Kord) // dev.kord.core.entity.interaction/RootCommand.<init>|<init>(dev.kord.core.cache.data.ApplicationInteractionData;dev.kord.core.Kord){}[0]

    final val data // dev.kord.core.entity.interaction/RootCommand.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ApplicationInteractionData // dev.kord.core.entity.interaction/RootCommand.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.entity.interaction/RootCommand.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.interaction/RootCommand.kord.<get-kord>|<get-kord>(){}[0]
    final val options // dev.kord.core.entity.interaction/RootCommand.options|{}options[0]
        final fun <get-options>(): kotlin.collections/Map<kotlin/String, dev.kord.core.entity.interaction/OptionValue<*>> // dev.kord.core.entity.interaction/RootCommand.options.<get-options>|<get-options>(){}[0]
}

final class dev.kord.core.entity.interaction/StringOptionValue : dev.kord.core.entity.interaction/OptionValue<kotlin/String> { // dev.kord.core.entity.interaction/StringOptionValue|null[0]
    constructor <init>(kotlin/String, kotlin/Boolean) // dev.kord.core.entity.interaction/StringOptionValue.<init>|<init>(kotlin.String;kotlin.Boolean){}[0]

    final val focused // dev.kord.core.entity.interaction/StringOptionValue.focused|{}focused[0]
        final fun <get-focused>(): kotlin/Boolean // dev.kord.core.entity.interaction/StringOptionValue.focused.<get-focused>|<get-focused>(){}[0]
    final val value // dev.kord.core.entity.interaction/StringOptionValue.value|{}value[0]
        final fun <get-value>(): kotlin/String // dev.kord.core.entity.interaction/StringOptionValue.value.<get-value>|<get-value>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity.interaction/StringOptionValue.toString|toString(){}[0]
}

final class dev.kord.core.entity.interaction/SubCommand : dev.kord.core.entity.interaction/InteractionCommand { // dev.kord.core.entity.interaction/SubCommand|null[0]
    constructor <init>(dev.kord.core.cache.data/ApplicationInteractionData, dev.kord.core/Kord) // dev.kord.core.entity.interaction/SubCommand.<init>|<init>(dev.kord.core.cache.data.ApplicationInteractionData;dev.kord.core.Kord){}[0]

    final val data // dev.kord.core.entity.interaction/SubCommand.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ApplicationInteractionData // dev.kord.core.entity.interaction/SubCommand.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.entity.interaction/SubCommand.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.interaction/SubCommand.kord.<get-kord>|<get-kord>(){}[0]
    final val name // dev.kord.core.entity.interaction/SubCommand.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.entity.interaction/SubCommand.name.<get-name>|<get-name>(){}[0]
    final val options // dev.kord.core.entity.interaction/SubCommand.options|{}options[0]
        final fun <get-options>(): kotlin.collections/Map<kotlin/String, dev.kord.core.entity.interaction/OptionValue<*>> // dev.kord.core.entity.interaction/SubCommand.options.<get-options>|<get-options>(){}[0]
}

final class dev.kord.core.entity/Activity { // dev.kord.core.entity/Activity|null[0]
    constructor <init>(dev.kord.core.cache.data/ActivityData) // dev.kord.core.entity/Activity.<init>|<init>(dev.kord.core.cache.data.ActivityData){}[0]

    final val applicationId // dev.kord.core.entity/Activity.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/Activity.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val assets // dev.kord.core.entity/Activity.assets|{}assets[0]
        final fun <get-assets>(): dev.kord.core.entity/Activity.Assets // dev.kord.core.entity/Activity.assets.<get-assets>|<get-assets>(){}[0]
    final val buttons // dev.kord.core.entity/Activity.buttons|{}buttons[0]
        final fun <get-buttons>(): kotlin.collections/List<kotlin/String>? // dev.kord.core.entity/Activity.buttons.<get-buttons>|<get-buttons>(){}[0]
    final val data // dev.kord.core.entity/Activity.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ActivityData // dev.kord.core.entity/Activity.data.<get-data>|<get-data>(){}[0]
    final val details // dev.kord.core.entity/Activity.details|{}details[0]
        final fun <get-details>(): kotlin/String? // dev.kord.core.entity/Activity.details.<get-details>|<get-details>(){}[0]
    final val emoji // dev.kord.core.entity/Activity.emoji|{}emoji[0]
        final fun <get-emoji>(): dev.kord.common.entity/DiscordActivityEmoji? // dev.kord.core.entity/Activity.emoji.<get-emoji>|<get-emoji>(){}[0]
    final val end // dev.kord.core.entity/Activity.end|{}end[0]
        final fun <get-end>(): kotlinx.datetime/Instant? // dev.kord.core.entity/Activity.end.<get-end>|<get-end>(){}[0]
    final val flags // dev.kord.core.entity/Activity.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity/ActivityFlags? // dev.kord.core.entity/Activity.flags.<get-flags>|<get-flags>(){}[0]
    final val isInstance // dev.kord.core.entity/Activity.isInstance|{}isInstance[0]
        final fun <get-isInstance>(): kotlin/Boolean? // dev.kord.core.entity/Activity.isInstance.<get-isInstance>|<get-isInstance>(){}[0]
    final val name // dev.kord.core.entity/Activity.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.entity/Activity.name.<get-name>|<get-name>(){}[0]
    final val party // dev.kord.core.entity/Activity.party|{}party[0]
        final fun <get-party>(): dev.kord.core.entity/Activity.Party? // dev.kord.core.entity/Activity.party.<get-party>|<get-party>(){}[0]
    final val secrets // dev.kord.core.entity/Activity.secrets|{}secrets[0]
        final fun <get-secrets>(): dev.kord.core.entity/Activity.Secrets // dev.kord.core.entity/Activity.secrets.<get-secrets>|<get-secrets>(){}[0]
    final val start // dev.kord.core.entity/Activity.start|{}start[0]
        final fun <get-start>(): kotlinx.datetime/Instant? // dev.kord.core.entity/Activity.start.<get-start>|<get-start>(){}[0]
    final val state // dev.kord.core.entity/Activity.state|{}state[0]
        final fun <get-state>(): kotlin/String? // dev.kord.core.entity/Activity.state.<get-state>|<get-state>(){}[0]
    final val type // dev.kord.core.entity/Activity.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ActivityType // dev.kord.core.entity/Activity.type.<get-type>|<get-type>(){}[0]
    final val url // dev.kord.core.entity/Activity.url|{}url[0]
        final fun <get-url>(): kotlin/String? // dev.kord.core.entity/Activity.url.<get-url>|<get-url>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity/Activity.toString|toString(){}[0]

    final class Assets { // dev.kord.core.entity/Activity.Assets|null[0]
        constructor <init>(kotlin/String?, kotlin/String?, kotlin/String?, kotlin/String?) // dev.kord.core.entity/Activity.Assets.<init>|<init>(kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?){}[0]

        final val largeImage // dev.kord.core.entity/Activity.Assets.largeImage|{}largeImage[0]
            final fun <get-largeImage>(): kotlin/String? // dev.kord.core.entity/Activity.Assets.largeImage.<get-largeImage>|<get-largeImage>(){}[0]
        final val largeText // dev.kord.core.entity/Activity.Assets.largeText|{}largeText[0]
            final fun <get-largeText>(): kotlin/String? // dev.kord.core.entity/Activity.Assets.largeText.<get-largeText>|<get-largeText>(){}[0]
        final val smallImage // dev.kord.core.entity/Activity.Assets.smallImage|{}smallImage[0]
            final fun <get-smallImage>(): kotlin/String? // dev.kord.core.entity/Activity.Assets.smallImage.<get-smallImage>|<get-smallImage>(){}[0]
        final val smallText // dev.kord.core.entity/Activity.Assets.smallText|{}smallText[0]
            final fun <get-smallText>(): kotlin/String? // dev.kord.core.entity/Activity.Assets.smallText.<get-smallText>|<get-smallText>(){}[0]

        final fun component1(): kotlin/String? // dev.kord.core.entity/Activity.Assets.component1|component1(){}[0]
        final fun component2(): kotlin/String? // dev.kord.core.entity/Activity.Assets.component2|component2(){}[0]
        final fun component3(): kotlin/String? // dev.kord.core.entity/Activity.Assets.component3|component3(){}[0]
        final fun component4(): kotlin/String? // dev.kord.core.entity/Activity.Assets.component4|component4(){}[0]
        final fun copy(kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ...): dev.kord.core.entity/Activity.Assets // dev.kord.core.entity/Activity.Assets.copy|copy(kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/Activity.Assets.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.core.entity/Activity.Assets.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.core.entity/Activity.Assets.toString|toString(){}[0]
    }

    final class Party { // dev.kord.core.entity/Activity.Party|null[0]
        constructor <init>(kotlin/String?, kotlin/Int?, kotlin/Int?) // dev.kord.core.entity/Activity.Party.<init>|<init>(kotlin.String?;kotlin.Int?;kotlin.Int?){}[0]

        final val currentSize // dev.kord.core.entity/Activity.Party.currentSize|{}currentSize[0]
            final fun <get-currentSize>(): kotlin/Int? // dev.kord.core.entity/Activity.Party.currentSize.<get-currentSize>|<get-currentSize>(){}[0]
        final val id // dev.kord.core.entity/Activity.Party.id|{}id[0]
            final fun <get-id>(): kotlin/String? // dev.kord.core.entity/Activity.Party.id.<get-id>|<get-id>(){}[0]
        final val maxSize // dev.kord.core.entity/Activity.Party.maxSize|{}maxSize[0]
            final fun <get-maxSize>(): kotlin/Int? // dev.kord.core.entity/Activity.Party.maxSize.<get-maxSize>|<get-maxSize>(){}[0]

        final fun component1(): kotlin/String? // dev.kord.core.entity/Activity.Party.component1|component1(){}[0]
        final fun component2(): kotlin/Int? // dev.kord.core.entity/Activity.Party.component2|component2(){}[0]
        final fun component3(): kotlin/Int? // dev.kord.core.entity/Activity.Party.component3|component3(){}[0]
        final fun copy(kotlin/String? = ..., kotlin/Int? = ..., kotlin/Int? = ...): dev.kord.core.entity/Activity.Party // dev.kord.core.entity/Activity.Party.copy|copy(kotlin.String?;kotlin.Int?;kotlin.Int?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/Activity.Party.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.core.entity/Activity.Party.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.core.entity/Activity.Party.toString|toString(){}[0]
    }

    final class Secrets { // dev.kord.core.entity/Activity.Secrets|null[0]
        constructor <init>(kotlin/String?, kotlin/String?, kotlin/String?) // dev.kord.core.entity/Activity.Secrets.<init>|<init>(kotlin.String?;kotlin.String?;kotlin.String?){}[0]

        final val join // dev.kord.core.entity/Activity.Secrets.join|{}join[0]
            final fun <get-join>(): kotlin/String? // dev.kord.core.entity/Activity.Secrets.join.<get-join>|<get-join>(){}[0]
        final val match // dev.kord.core.entity/Activity.Secrets.match|{}match[0]
            final fun <get-match>(): kotlin/String? // dev.kord.core.entity/Activity.Secrets.match.<get-match>|<get-match>(){}[0]
        final val spectate // dev.kord.core.entity/Activity.Secrets.spectate|{}spectate[0]
            final fun <get-spectate>(): kotlin/String? // dev.kord.core.entity/Activity.Secrets.spectate.<get-spectate>|<get-spectate>(){}[0]

        final fun component1(): kotlin/String? // dev.kord.core.entity/Activity.Secrets.component1|component1(){}[0]
        final fun component2(): kotlin/String? // dev.kord.core.entity/Activity.Secrets.component2|component2(){}[0]
        final fun component3(): kotlin/String? // dev.kord.core.entity/Activity.Secrets.component3|component3(){}[0]
        final fun copy(kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ...): dev.kord.core.entity/Activity.Secrets // dev.kord.core.entity/Activity.Secrets.copy|copy(kotlin.String?;kotlin.String?;kotlin.String?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/Activity.Secrets.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.core.entity/Activity.Secrets.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.core.entity/Activity.Secrets.toString|toString(){}[0]
    }
}

final class dev.kord.core.entity/Application : dev.kord.core.entity/BaseApplication { // dev.kord.core.entity/Application|null[0]
    constructor <init>(dev.kord.core.cache.data/ApplicationData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/Application.<init>|<init>(dev.kord.core.cache.data.ApplicationData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity/Application.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ApplicationData // dev.kord.core.entity/Application.data.<get-data>|<get-data>(){}[0]
    final val isPublic // dev.kord.core.entity/Application.isPublic|{}isPublic[0]
        final fun <get-isPublic>(): kotlin/Boolean // dev.kord.core.entity/Application.isPublic.<get-isPublic>|<get-isPublic>(){}[0]
    final val requireCodeGrant // dev.kord.core.entity/Application.requireCodeGrant|{}requireCodeGrant[0]
        final fun <get-requireCodeGrant>(): kotlin/Boolean // dev.kord.core.entity/Application.requireCodeGrant.<get-requireCodeGrant>|<get-requireCodeGrant>(){}[0]
    final val team // dev.kord.core.entity/Application.team|{}team[0]
        final fun <get-team>(): dev.kord.core.entity/Team? // dev.kord.core.entity/Application.team.<get-team>|<get-team>(){}[0]
    final val teamId // dev.kord.core.entity/Application.teamId|{}teamId[0]
        final fun <get-teamId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/Application.teamId.<get-teamId>|<get-teamId>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity/Application.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/Application // dev.kord.core.entity/Application.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.entity/Asset : dev.kord.core/KordObject { // dev.kord.core.entity/Asset|null[0]
    final val cdnUrl // dev.kord.core.entity/Asset.cdnUrl|{}cdnUrl[0]
        final fun <get-cdnUrl>(): dev.kord.rest.route/CdnUrl // dev.kord.core.entity/Asset.cdnUrl.<get-cdnUrl>|<get-cdnUrl>(){}[0]
    final val isAnimated // dev.kord.core.entity/Asset.isAnimated|{}isAnimated[0]
        final fun <get-isAnimated>(): kotlin/Boolean // dev.kord.core.entity/Asset.isAnimated.<get-isAnimated>|<get-isAnimated>(){}[0]
    final val kord // dev.kord.core.entity/Asset.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/Asset.kord.<get-kord>|<get-kord>(){}[0]

    final suspend fun getImage(dev.kord.rest/Image.Format? = ..., dev.kord.rest/Image.Size? = ...): dev.kord.rest/Image // dev.kord.core.entity/Asset.getImage|getImage(dev.kord.rest.Image.Format?;dev.kord.rest.Image.Size?){}[0]

    final object Companion { // dev.kord.core.entity/Asset.Companion|null[0]
        final fun applicationCover(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord): dev.kord.core.entity/Asset // dev.kord.core.entity/Asset.Companion.applicationCover|applicationCover(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord){}[0]
        final fun applicationIcon(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord): dev.kord.core.entity/Asset // dev.kord.core.entity/Asset.Companion.applicationIcon|applicationIcon(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord){}[0]
        final fun defaultUserAvatar(dev.kord.common.entity/Snowflake, dev.kord.core/Kord): dev.kord.core.entity/Asset // dev.kord.core.entity/Asset.Companion.defaultUserAvatar|defaultUserAvatar(dev.kord.common.entity.Snowflake;dev.kord.core.Kord){}[0]
        final fun defaultUserAvatar(kotlin/Int, dev.kord.core/Kord): dev.kord.core.entity/Asset // dev.kord.core.entity/Asset.Companion.defaultUserAvatar|defaultUserAvatar(kotlin.Int;dev.kord.core.Kord){}[0]
        final fun emoji(dev.kord.common.entity/Snowflake, kotlin/Boolean, dev.kord.core/Kord): dev.kord.core.entity/Asset // dev.kord.core.entity/Asset.Companion.emoji|emoji(dev.kord.common.entity.Snowflake;kotlin.Boolean;dev.kord.core.Kord){}[0]
        final fun guildBanner(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord): dev.kord.core.entity/Asset // dev.kord.core.entity/Asset.Companion.guildBanner|guildBanner(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord){}[0]
        final fun guildDiscoverySplash(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord): dev.kord.core.entity/Asset // dev.kord.core.entity/Asset.Companion.guildDiscoverySplash|guildDiscoverySplash(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord){}[0]
        final fun guildIcon(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord): dev.kord.core.entity/Asset // dev.kord.core.entity/Asset.Companion.guildIcon|guildIcon(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord){}[0]
        final fun guildScheduledEventCover(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord): dev.kord.core.entity/Asset // dev.kord.core.entity/Asset.Companion.guildScheduledEventCover|guildScheduledEventCover(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord){}[0]
        final fun guildSplash(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord): dev.kord.core.entity/Asset // dev.kord.core.entity/Asset.Companion.guildSplash|guildSplash(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord){}[0]
        final fun memberAvatar(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord): dev.kord.core.entity/Asset // dev.kord.core.entity/Asset.Companion.memberAvatar|memberAvatar(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord){}[0]
        final fun memberBanner(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord): dev.kord.core.entity/Asset // dev.kord.core.entity/Asset.Companion.memberBanner|memberBanner(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord){}[0]
        final fun roleIcon(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord): dev.kord.core.entity/Asset // dev.kord.core.entity/Asset.Companion.roleIcon|roleIcon(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord){}[0]
        final fun sticker(dev.kord.common.entity/Snowflake, dev.kord.common.entity/MessageStickerType, dev.kord.core/Kord): dev.kord.core.entity/Asset // dev.kord.core.entity/Asset.Companion.sticker|sticker(dev.kord.common.entity.Snowflake;dev.kord.common.entity.MessageStickerType;dev.kord.core.Kord){}[0]
        final fun stickerPackBanner(dev.kord.common.entity/Snowflake, dev.kord.core/Kord): dev.kord.core.entity/Asset // dev.kord.core.entity/Asset.Companion.stickerPackBanner|stickerPackBanner(dev.kord.common.entity.Snowflake;dev.kord.core.Kord){}[0]
        final fun teamIcon(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord): dev.kord.core.entity/Asset // dev.kord.core.entity/Asset.Companion.teamIcon|teamIcon(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord){}[0]
        final fun userAvatar(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord): dev.kord.core.entity/Asset // dev.kord.core.entity/Asset.Companion.userAvatar|userAvatar(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord){}[0]
        final fun userAvatarDecoration(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord): dev.kord.core.entity/Asset // dev.kord.core.entity/Asset.Companion.userAvatarDecoration|userAvatarDecoration(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord){}[0]
        final fun userBanner(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord): dev.kord.core.entity/Asset // dev.kord.core.entity/Asset.Companion.userBanner|userBanner(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord){}[0]
    }
}

final class dev.kord.core.entity/Attachment : dev.kord.core.entity/KordEntity { // dev.kord.core.entity/Attachment|null[0]
    constructor <init>(dev.kord.core.cache.data/AttachmentData, dev.kord.core/Kord) // dev.kord.core.entity/Attachment.<init>|<init>(dev.kord.core.cache.data.AttachmentData;dev.kord.core.Kord){}[0]

    final val contentType // dev.kord.core.entity/Attachment.contentType|{}contentType[0]
        final fun <get-contentType>(): kotlin/String? // dev.kord.core.entity/Attachment.contentType.<get-contentType>|<get-contentType>(){}[0]
    final val data // dev.kord.core.entity/Attachment.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/AttachmentData // dev.kord.core.entity/Attachment.data.<get-data>|<get-data>(){}[0]
    final val description // dev.kord.core.entity/Attachment.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.core.entity/Attachment.description.<get-description>|<get-description>(){}[0]
    final val duration // dev.kord.core.entity/Attachment.duration|{}duration[0]
        final fun <get-duration>(): kotlin.time/Duration? // dev.kord.core.entity/Attachment.duration.<get-duration>|<get-duration>(){}[0]
    final val filename // dev.kord.core.entity/Attachment.filename|{}filename[0]
        final fun <get-filename>(): kotlin/String // dev.kord.core.entity/Attachment.filename.<get-filename>|<get-filename>(){}[0]
    final val flags // dev.kord.core.entity/Attachment.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity/AttachmentFlags? // dev.kord.core.entity/Attachment.flags.<get-flags>|<get-flags>(){}[0]
    final val height // dev.kord.core.entity/Attachment.height|{}height[0]
        final fun <get-height>(): kotlin/Int? // dev.kord.core.entity/Attachment.height.<get-height>|<get-height>(){}[0]
    final val id // dev.kord.core.entity/Attachment.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/Attachment.id.<get-id>|<get-id>(){}[0]
    final val isEphemeral // dev.kord.core.entity/Attachment.isEphemeral|{}isEphemeral[0]
        final fun <get-isEphemeral>(): kotlin/Boolean // dev.kord.core.entity/Attachment.isEphemeral.<get-isEphemeral>|<get-isEphemeral>(){}[0]
    final val isImage // dev.kord.core.entity/Attachment.isImage|{}isImage[0]
        final fun <get-isImage>(): kotlin/Boolean // dev.kord.core.entity/Attachment.isImage.<get-isImage>|<get-isImage>(){}[0]
    final val isSpoiler // dev.kord.core.entity/Attachment.isSpoiler|{}isSpoiler[0]
        final fun <get-isSpoiler>(): kotlin/Boolean // dev.kord.core.entity/Attachment.isSpoiler.<get-isSpoiler>|<get-isSpoiler>(){}[0]
    final val kord // dev.kord.core.entity/Attachment.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/Attachment.kord.<get-kord>|<get-kord>(){}[0]
    final val proxyUrl // dev.kord.core.entity/Attachment.proxyUrl|{}proxyUrl[0]
        final fun <get-proxyUrl>(): kotlin/String // dev.kord.core.entity/Attachment.proxyUrl.<get-proxyUrl>|<get-proxyUrl>(){}[0]
    final val size // dev.kord.core.entity/Attachment.size|{}size[0]
        final fun <get-size>(): kotlin/Int // dev.kord.core.entity/Attachment.size.<get-size>|<get-size>(){}[0]
    final val url // dev.kord.core.entity/Attachment.url|{}url[0]
        final fun <get-url>(): kotlin/String // dev.kord.core.entity/Attachment.url.<get-url>|<get-url>(){}[0]
    final val waveform // dev.kord.core.entity/Attachment.waveform|{}waveform[0]
        final fun <get-waveform>(): kotlin/ByteArray? // dev.kord.core.entity/Attachment.waveform.<get-waveform>|<get-waveform>(){}[0]
    final val width // dev.kord.core.entity/Attachment.width|{}width[0]
        final fun <get-width>(): kotlin/Int? // dev.kord.core.entity/Attachment.width.<get-width>|<get-width>(){}[0]

    final fun component1(): dev.kord.core.cache.data/AttachmentData // dev.kord.core.entity/Attachment.component1|component1(){}[0]
    final fun component2(): dev.kord.core/Kord // dev.kord.core.entity/Attachment.component2|component2(){}[0]
    final fun copy(dev.kord.core.cache.data/AttachmentData = ..., dev.kord.core/Kord = ...): dev.kord.core.entity/Attachment // dev.kord.core.entity/Attachment.copy|copy(dev.kord.core.cache.data.AttachmentData;dev.kord.core.Kord){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/Attachment.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity/Attachment.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity/Attachment.toString|toString(){}[0]
}

final class dev.kord.core.entity/AuditLog : dev.kord.core/KordObject { // dev.kord.core.entity/AuditLog|null[0]
    constructor <init>(dev.kord.common.entity/DiscordAuditLog, dev.kord.common.entity/Snowflake, dev.kord.core/Kord) // dev.kord.core.entity/AuditLog.<init>|<init>(dev.kord.common.entity.DiscordAuditLog;dev.kord.common.entity.Snowflake;dev.kord.core.Kord){}[0]

    final val applicationCommands // dev.kord.core.entity/AuditLog.applicationCommands|{}applicationCommands[0]
        final fun <get-applicationCommands>(): kotlin.collections/List<dev.kord.core.entity.application/ApplicationCommand> // dev.kord.core.entity/AuditLog.applicationCommands.<get-applicationCommands>|<get-applicationCommands>(){}[0]
    final val autoModerationRules // dev.kord.core.entity/AuditLog.autoModerationRules|{}autoModerationRules[0]
        final fun <get-autoModerationRules>(): kotlin.collections/List<dev.kord.core.entity.automoderation/AutoModerationRule> // dev.kord.core.entity/AuditLog.autoModerationRules.<get-autoModerationRules>|<get-autoModerationRules>(){}[0]
    final val data // dev.kord.core.entity/AuditLog.data|{}data[0]
        final fun <get-data>(): dev.kord.common.entity/DiscordAuditLog // dev.kord.core.entity/AuditLog.data.<get-data>|<get-data>(){}[0]
    final val entries // dev.kord.core.entity/AuditLog.entries|{}entries[0]
        final fun <get-entries>(): kotlin.collections/List<dev.kord.core.entity/AuditLogEntry> // dev.kord.core.entity/AuditLog.entries.<get-entries>|<get-entries>(){}[0]
    final val guildId // dev.kord.core.entity/AuditLog.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/AuditLog.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val integrations // dev.kord.core.entity/AuditLog.integrations|{}integrations[0]
        final fun <get-integrations>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.core.entity/AuditLog.integrations.<get-integrations>|<get-integrations>(){}[0]
    final val kord // dev.kord.core.entity/AuditLog.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/AuditLog.kord.<get-kord>|<get-kord>(){}[0]
    final val threads // dev.kord.core.entity/AuditLog.threads|{}threads[0]
        final fun <get-threads>(): kotlin.collections/List<dev.kord.core.entity.channel.thread/ThreadChannel> // dev.kord.core.entity/AuditLog.threads.<get-threads>|<get-threads>(){}[0]
    final val users // dev.kord.core.entity/AuditLog.users|{}users[0]
        final fun <get-users>(): kotlin.collections/List<dev.kord.core.entity/User> // dev.kord.core.entity/AuditLog.users.<get-users>|<get-users>(){}[0]
    final val webhooks // dev.kord.core.entity/AuditLog.webhooks|{}webhooks[0]
        final fun <get-webhooks>(): kotlin.collections/List<dev.kord.core.entity/Webhook> // dev.kord.core.entity/AuditLog.webhooks.<get-webhooks>|<get-webhooks>(){}[0]
}

final class dev.kord.core.entity/AuditLogEntry : dev.kord.core/KordObject { // dev.kord.core.entity/AuditLogEntry|null[0]
    constructor <init>(dev.kord.common.entity/DiscordAuditLogEntry, dev.kord.core/Kord) // dev.kord.core.entity/AuditLogEntry.<init>|<init>(dev.kord.common.entity.DiscordAuditLogEntry;dev.kord.core.Kord){}[0]

    final val actionType // dev.kord.core.entity/AuditLogEntry.actionType|{}actionType[0]
        final fun <get-actionType>(): dev.kord.common.entity/AuditLogEvent // dev.kord.core.entity/AuditLogEntry.actionType.<get-actionType>|<get-actionType>(){}[0]
    final val changes // dev.kord.core.entity/AuditLogEntry.changes|{}changes[0]
        final fun <get-changes>(): kotlin.collections/List<dev.kord.common.entity/AuditLogChange<*>> // dev.kord.core.entity/AuditLogEntry.changes.<get-changes>|<get-changes>(){}[0]
    final val data // dev.kord.core.entity/AuditLogEntry.data|{}data[0]
        final fun <get-data>(): dev.kord.common.entity/DiscordAuditLogEntry // dev.kord.core.entity/AuditLogEntry.data.<get-data>|<get-data>(){}[0]
    final val id // dev.kord.core.entity/AuditLogEntry.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/AuditLogEntry.id.<get-id>|<get-id>(){}[0]
    final val kord // dev.kord.core.entity/AuditLogEntry.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/AuditLogEntry.kord.<get-kord>|<get-kord>(){}[0]
    final val options // dev.kord.core.entity/AuditLogEntry.options|{}options[0]
        final fun <get-options>(): dev.kord.common.entity/AuditLogEntryOptionalInfo? // dev.kord.core.entity/AuditLogEntry.options.<get-options>|<get-options>(){}[0]
    final val reason // dev.kord.core.entity/AuditLogEntry.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.core.entity/AuditLogEntry.reason.<get-reason>|<get-reason>(){}[0]
    final val targetId // dev.kord.core.entity/AuditLogEntry.targetId|{}targetId[0]
        final fun <get-targetId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/AuditLogEntry.targetId.<get-targetId>|<get-targetId>(){}[0]
    final val userId // dev.kord.core.entity/AuditLogEntry.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/AuditLogEntry.userId.<get-userId>|<get-userId>(){}[0]

    final fun <#A1: kotlin/Any?> get(dev.kord.common.entity/AuditLogChangeKey<#A1>): dev.kord.common.entity/AuditLogChange<#A1>? // dev.kord.core.entity/AuditLogEntry.get|get(dev.kord.common.entity.AuditLogChangeKey<0:0>){0ยง<kotlin.Any?>}[0]
}

final class dev.kord.core.entity/Ban : dev.kord.core.entity/Strategizable, dev.kord.core/KordObject { // dev.kord.core.entity/Ban|null[0]
    constructor <init>(dev.kord.core.cache.data/BanData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/Ban.<init>|<init>(dev.kord.core.cache.data.BanData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity/Ban.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/BanData // dev.kord.core.entity/Ban.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.entity/Ban.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/Ban.kord.<get-kord>|<get-kord>(){}[0]
    final val reason // dev.kord.core.entity/Ban.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // dev.kord.core.entity/Ban.reason.<get-reason>|<get-reason>(){}[0]
    final val supplier // dev.kord.core.entity/Ban.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/Ban.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val user // dev.kord.core.entity/Ban.user|{}user[0]
        final fun <get-user>(): dev.kord.core.behavior/UserBehavior // dev.kord.core.entity/Ban.user.<get-user>|<get-user>(){}[0]
    final val userId // dev.kord.core.entity/Ban.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/Ban.userId.<get-userId>|<get-userId>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity/Ban.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/Ban // dev.kord.core.entity/Ban.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getUser(): dev.kord.core.entity/User // dev.kord.core.entity/Ban.getUser|getUser(){}[0]
    final suspend fun getUserOrNull(): dev.kord.core.entity/User? // dev.kord.core.entity/Ban.getUserOrNull|getUserOrNull(){}[0]
}

final class dev.kord.core.entity/ClientStatus { // dev.kord.core.entity/ClientStatus|null[0]
    constructor <init>(dev.kord.core.cache.data/ClientStatusData) // dev.kord.core.entity/ClientStatus.<init>|<init>(dev.kord.core.cache.data.ClientStatusData){}[0]

    final val data // dev.kord.core.entity/ClientStatus.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ClientStatusData // dev.kord.core.entity/ClientStatus.data.<get-data>|<get-data>(){}[0]
    final val desktop // dev.kord.core.entity/ClientStatus.desktop|{}desktop[0]
        final fun <get-desktop>(): dev.kord.core.entity/ClientStatus.Client.Desktop? // dev.kord.core.entity/ClientStatus.desktop.<get-desktop>|<get-desktop>(){}[0]
    final val mobile // dev.kord.core.entity/ClientStatus.mobile|{}mobile[0]
        final fun <get-mobile>(): dev.kord.core.entity/ClientStatus.Client.Mobile? // dev.kord.core.entity/ClientStatus.mobile.<get-mobile>|<get-mobile>(){}[0]
    final val web // dev.kord.core.entity/ClientStatus.web|{}web[0]
        final fun <get-web>(): dev.kord.core.entity/ClientStatus.Client.Web? // dev.kord.core.entity/ClientStatus.web.<get-web>|<get-web>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity/ClientStatus.toString|toString(){}[0]

    sealed class Client { // dev.kord.core.entity/ClientStatus.Client|null[0]
        constructor <init>(dev.kord.common.entity/PresenceStatus) // dev.kord.core.entity/ClientStatus.Client.<init>|<init>(dev.kord.common.entity.PresenceStatus){}[0]

        final val status // dev.kord.core.entity/ClientStatus.Client.status|{}status[0]
            final fun <get-status>(): dev.kord.common.entity/PresenceStatus // dev.kord.core.entity/ClientStatus.Client.status.<get-status>|<get-status>(){}[0]

        final class Desktop : dev.kord.core.entity/ClientStatus.Client { // dev.kord.core.entity/ClientStatus.Client.Desktop|null[0]
            constructor <init>(dev.kord.common.entity/PresenceStatus) // dev.kord.core.entity/ClientStatus.Client.Desktop.<init>|<init>(dev.kord.common.entity.PresenceStatus){}[0]
        }

        final class Mobile : dev.kord.core.entity/ClientStatus.Client { // dev.kord.core.entity/ClientStatus.Client.Mobile|null[0]
            constructor <init>(dev.kord.common.entity/PresenceStatus) // dev.kord.core.entity/ClientStatus.Client.Mobile.<init>|<init>(dev.kord.common.entity.PresenceStatus){}[0]
        }

        final class Web : dev.kord.core.entity/ClientStatus.Client { // dev.kord.core.entity/ClientStatus.Client.Web|null[0]
            constructor <init>(dev.kord.common.entity/PresenceStatus) // dev.kord.core.entity/ClientStatus.Client.Web.<init>|<init>(dev.kord.common.entity.PresenceStatus){}[0]
        }
    }
}

final class dev.kord.core.entity/Embed : dev.kord.core/KordObject { // dev.kord.core.entity/Embed|null[0]
    constructor <init>(dev.kord.core.cache.data/EmbedData, dev.kord.core/Kord) // dev.kord.core.entity/Embed.<init>|<init>(dev.kord.core.cache.data.EmbedData;dev.kord.core.Kord){}[0]

    final val author // dev.kord.core.entity/Embed.author|{}author[0]
        final fun <get-author>(): dev.kord.core.entity/Embed.Author? // dev.kord.core.entity/Embed.author.<get-author>|<get-author>(){}[0]
    final val color // dev.kord.core.entity/Embed.color|{}color[0]
        final fun <get-color>(): dev.kord.common/Color? // dev.kord.core.entity/Embed.color.<get-color>|<get-color>(){}[0]
    final val data // dev.kord.core.entity/Embed.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/EmbedData // dev.kord.core.entity/Embed.data.<get-data>|<get-data>(){}[0]
    final val description // dev.kord.core.entity/Embed.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.core.entity/Embed.description.<get-description>|<get-description>(){}[0]
    final val fields // dev.kord.core.entity/Embed.fields|{}fields[0]
        final fun <get-fields>(): kotlin.collections/List<dev.kord.core.entity/Embed.Field> // dev.kord.core.entity/Embed.fields.<get-fields>|<get-fields>(){}[0]
    final val footer // dev.kord.core.entity/Embed.footer|{}footer[0]
        final fun <get-footer>(): dev.kord.core.entity/Embed.Footer? // dev.kord.core.entity/Embed.footer.<get-footer>|<get-footer>(){}[0]
    final val image // dev.kord.core.entity/Embed.image|{}image[0]
        final fun <get-image>(): dev.kord.core.entity/Embed.Image? // dev.kord.core.entity/Embed.image.<get-image>|<get-image>(){}[0]
    final val kord // dev.kord.core.entity/Embed.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/Embed.kord.<get-kord>|<get-kord>(){}[0]
    final val provider // dev.kord.core.entity/Embed.provider|{}provider[0]
        final fun <get-provider>(): dev.kord.core.entity/Embed.Provider? // dev.kord.core.entity/Embed.provider.<get-provider>|<get-provider>(){}[0]
    final val thumbnail // dev.kord.core.entity/Embed.thumbnail|{}thumbnail[0]
        final fun <get-thumbnail>(): dev.kord.core.entity/Embed.Thumbnail? // dev.kord.core.entity/Embed.thumbnail.<get-thumbnail>|<get-thumbnail>(){}[0]
    final val timestamp // dev.kord.core.entity/Embed.timestamp|{}timestamp[0]
        final fun <get-timestamp>(): kotlinx.datetime/Instant? // dev.kord.core.entity/Embed.timestamp.<get-timestamp>|<get-timestamp>(){}[0]
    final val title // dev.kord.core.entity/Embed.title|{}title[0]
        final fun <get-title>(): kotlin/String? // dev.kord.core.entity/Embed.title.<get-title>|<get-title>(){}[0]
    final val type // dev.kord.core.entity/Embed.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/EmbedType? // dev.kord.core.entity/Embed.type.<get-type>|<get-type>(){}[0]
    final val url // dev.kord.core.entity/Embed.url|{}url[0]
        final fun <get-url>(): kotlin/String? // dev.kord.core.entity/Embed.url.<get-url>|<get-url>(){}[0]
    final val video // dev.kord.core.entity/Embed.video|{}video[0]
        final fun <get-video>(): dev.kord.core.entity/Embed.Video? // dev.kord.core.entity/Embed.video.<get-video>|<get-video>(){}[0]

    final fun apply(dev.kord.rest.builder.message/EmbedBuilder) // dev.kord.core.entity/Embed.apply|apply(dev.kord.rest.builder.message.EmbedBuilder){}[0]
    final fun component1(): dev.kord.core.cache.data/EmbedData // dev.kord.core.entity/Embed.component1|component1(){}[0]
    final fun component2(): dev.kord.core/Kord // dev.kord.core.entity/Embed.component2|component2(){}[0]
    final fun copy(dev.kord.core.cache.data/EmbedData = ..., dev.kord.core/Kord = ...): dev.kord.core.entity/Embed // dev.kord.core.entity/Embed.copy|copy(dev.kord.core.cache.data.EmbedData;dev.kord.core.Kord){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/Embed.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity/Embed.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity/Embed.toString|toString(){}[0]

    final class Author : dev.kord.core/KordObject { // dev.kord.core.entity/Embed.Author|null[0]
        constructor <init>(dev.kord.core.cache.data/EmbedAuthorData, dev.kord.core/Kord) // dev.kord.core.entity/Embed.Author.<init>|<init>(dev.kord.core.cache.data.EmbedAuthorData;dev.kord.core.Kord){}[0]

        final val data // dev.kord.core.entity/Embed.Author.data|{}data[0]
            final fun <get-data>(): dev.kord.core.cache.data/EmbedAuthorData // dev.kord.core.entity/Embed.Author.data.<get-data>|<get-data>(){}[0]
        final val iconUrl // dev.kord.core.entity/Embed.Author.iconUrl|{}iconUrl[0]
            final fun <get-iconUrl>(): kotlin/String? // dev.kord.core.entity/Embed.Author.iconUrl.<get-iconUrl>|<get-iconUrl>(){}[0]
        final val kord // dev.kord.core.entity/Embed.Author.kord|{}kord[0]
            final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/Embed.Author.kord.<get-kord>|<get-kord>(){}[0]
        final val name // dev.kord.core.entity/Embed.Author.name|{}name[0]
            final fun <get-name>(): kotlin/String? // dev.kord.core.entity/Embed.Author.name.<get-name>|<get-name>(){}[0]
        final val proxyIconUrl // dev.kord.core.entity/Embed.Author.proxyIconUrl|{}proxyIconUrl[0]
            final fun <get-proxyIconUrl>(): kotlin/String? // dev.kord.core.entity/Embed.Author.proxyIconUrl.<get-proxyIconUrl>|<get-proxyIconUrl>(){}[0]
        final val url // dev.kord.core.entity/Embed.Author.url|{}url[0]
            final fun <get-url>(): kotlin/String? // dev.kord.core.entity/Embed.Author.url.<get-url>|<get-url>(){}[0]

        final fun component1(): dev.kord.core.cache.data/EmbedAuthorData // dev.kord.core.entity/Embed.Author.component1|component1(){}[0]
        final fun component2(): dev.kord.core/Kord // dev.kord.core.entity/Embed.Author.component2|component2(){}[0]
        final fun copy(dev.kord.core.cache.data/EmbedAuthorData = ..., dev.kord.core/Kord = ...): dev.kord.core.entity/Embed.Author // dev.kord.core.entity/Embed.Author.copy|copy(dev.kord.core.cache.data.EmbedAuthorData;dev.kord.core.Kord){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/Embed.Author.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.core.entity/Embed.Author.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.core.entity/Embed.Author.toString|toString(){}[0]
    }

    final class Field : dev.kord.core/KordObject { // dev.kord.core.entity/Embed.Field|null[0]
        constructor <init>(dev.kord.core.cache.data/EmbedFieldData, dev.kord.core/Kord) // dev.kord.core.entity/Embed.Field.<init>|<init>(dev.kord.core.cache.data.EmbedFieldData;dev.kord.core.Kord){}[0]

        final val data // dev.kord.core.entity/Embed.Field.data|{}data[0]
            final fun <get-data>(): dev.kord.core.cache.data/EmbedFieldData // dev.kord.core.entity/Embed.Field.data.<get-data>|<get-data>(){}[0]
        final val inline // dev.kord.core.entity/Embed.Field.inline|{}inline[0]
            final fun <get-inline>(): kotlin/Boolean? // dev.kord.core.entity/Embed.Field.inline.<get-inline>|<get-inline>(){}[0]
        final val kord // dev.kord.core.entity/Embed.Field.kord|{}kord[0]
            final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/Embed.Field.kord.<get-kord>|<get-kord>(){}[0]
        final val name // dev.kord.core.entity/Embed.Field.name|{}name[0]
            final fun <get-name>(): kotlin/String // dev.kord.core.entity/Embed.Field.name.<get-name>|<get-name>(){}[0]
        final val value // dev.kord.core.entity/Embed.Field.value|{}value[0]
            final fun <get-value>(): kotlin/String // dev.kord.core.entity/Embed.Field.value.<get-value>|<get-value>(){}[0]

        final fun component1(): dev.kord.core.cache.data/EmbedFieldData // dev.kord.core.entity/Embed.Field.component1|component1(){}[0]
        final fun component2(): dev.kord.core/Kord // dev.kord.core.entity/Embed.Field.component2|component2(){}[0]
        final fun copy(dev.kord.core.cache.data/EmbedFieldData = ..., dev.kord.core/Kord = ...): dev.kord.core.entity/Embed.Field // dev.kord.core.entity/Embed.Field.copy|copy(dev.kord.core.cache.data.EmbedFieldData;dev.kord.core.Kord){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/Embed.Field.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.core.entity/Embed.Field.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.core.entity/Embed.Field.toString|toString(){}[0]
    }

    final class Footer : dev.kord.core/KordObject { // dev.kord.core.entity/Embed.Footer|null[0]
        constructor <init>(dev.kord.core.cache.data/EmbedFooterData, dev.kord.core/Kord) // dev.kord.core.entity/Embed.Footer.<init>|<init>(dev.kord.core.cache.data.EmbedFooterData;dev.kord.core.Kord){}[0]

        final val data // dev.kord.core.entity/Embed.Footer.data|{}data[0]
            final fun <get-data>(): dev.kord.core.cache.data/EmbedFooterData // dev.kord.core.entity/Embed.Footer.data.<get-data>|<get-data>(){}[0]
        final val iconUrl // dev.kord.core.entity/Embed.Footer.iconUrl|{}iconUrl[0]
            final fun <get-iconUrl>(): kotlin/String? // dev.kord.core.entity/Embed.Footer.iconUrl.<get-iconUrl>|<get-iconUrl>(){}[0]
        final val kord // dev.kord.core.entity/Embed.Footer.kord|{}kord[0]
            final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/Embed.Footer.kord.<get-kord>|<get-kord>(){}[0]
        final val proxyIconUrl // dev.kord.core.entity/Embed.Footer.proxyIconUrl|{}proxyIconUrl[0]
            final fun <get-proxyIconUrl>(): kotlin/String? // dev.kord.core.entity/Embed.Footer.proxyIconUrl.<get-proxyIconUrl>|<get-proxyIconUrl>(){}[0]
        final val text // dev.kord.core.entity/Embed.Footer.text|{}text[0]
            final fun <get-text>(): kotlin/String // dev.kord.core.entity/Embed.Footer.text.<get-text>|<get-text>(){}[0]

        final fun component1(): dev.kord.core.cache.data/EmbedFooterData // dev.kord.core.entity/Embed.Footer.component1|component1(){}[0]
        final fun component2(): dev.kord.core/Kord // dev.kord.core.entity/Embed.Footer.component2|component2(){}[0]
        final fun copy(dev.kord.core.cache.data/EmbedFooterData = ..., dev.kord.core/Kord = ...): dev.kord.core.entity/Embed.Footer // dev.kord.core.entity/Embed.Footer.copy|copy(dev.kord.core.cache.data.EmbedFooterData;dev.kord.core.Kord){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/Embed.Footer.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.core.entity/Embed.Footer.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.core.entity/Embed.Footer.toString|toString(){}[0]
    }

    final class Image : dev.kord.core/KordObject { // dev.kord.core.entity/Embed.Image|null[0]
        constructor <init>(dev.kord.core.cache.data/EmbedImageData, dev.kord.core/Kord) // dev.kord.core.entity/Embed.Image.<init>|<init>(dev.kord.core.cache.data.EmbedImageData;dev.kord.core.Kord){}[0]

        final val data // dev.kord.core.entity/Embed.Image.data|{}data[0]
            final fun <get-data>(): dev.kord.core.cache.data/EmbedImageData // dev.kord.core.entity/Embed.Image.data.<get-data>|<get-data>(){}[0]
        final val height // dev.kord.core.entity/Embed.Image.height|{}height[0]
            final fun <get-height>(): kotlin/Int? // dev.kord.core.entity/Embed.Image.height.<get-height>|<get-height>(){}[0]
        final val kord // dev.kord.core.entity/Embed.Image.kord|{}kord[0]
            final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/Embed.Image.kord.<get-kord>|<get-kord>(){}[0]
        final val proxyUrl // dev.kord.core.entity/Embed.Image.proxyUrl|{}proxyUrl[0]
            final fun <get-proxyUrl>(): kotlin/String? // dev.kord.core.entity/Embed.Image.proxyUrl.<get-proxyUrl>|<get-proxyUrl>(){}[0]
        final val url // dev.kord.core.entity/Embed.Image.url|{}url[0]
            final fun <get-url>(): kotlin/String? // dev.kord.core.entity/Embed.Image.url.<get-url>|<get-url>(){}[0]
        final val width // dev.kord.core.entity/Embed.Image.width|{}width[0]
            final fun <get-width>(): kotlin/Int? // dev.kord.core.entity/Embed.Image.width.<get-width>|<get-width>(){}[0]

        final fun component1(): dev.kord.core.cache.data/EmbedImageData // dev.kord.core.entity/Embed.Image.component1|component1(){}[0]
        final fun component2(): dev.kord.core/Kord // dev.kord.core.entity/Embed.Image.component2|component2(){}[0]
        final fun copy(dev.kord.core.cache.data/EmbedImageData = ..., dev.kord.core/Kord = ...): dev.kord.core.entity/Embed.Image // dev.kord.core.entity/Embed.Image.copy|copy(dev.kord.core.cache.data.EmbedImageData;dev.kord.core.Kord){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/Embed.Image.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.core.entity/Embed.Image.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.core.entity/Embed.Image.toString|toString(){}[0]
    }

    final class Provider : dev.kord.core/KordObject { // dev.kord.core.entity/Embed.Provider|null[0]
        constructor <init>(dev.kord.core.cache.data/EmbedProviderData, dev.kord.core/Kord) // dev.kord.core.entity/Embed.Provider.<init>|<init>(dev.kord.core.cache.data.EmbedProviderData;dev.kord.core.Kord){}[0]

        final val data // dev.kord.core.entity/Embed.Provider.data|{}data[0]
            final fun <get-data>(): dev.kord.core.cache.data/EmbedProviderData // dev.kord.core.entity/Embed.Provider.data.<get-data>|<get-data>(){}[0]
        final val kord // dev.kord.core.entity/Embed.Provider.kord|{}kord[0]
            final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/Embed.Provider.kord.<get-kord>|<get-kord>(){}[0]
        final val name // dev.kord.core.entity/Embed.Provider.name|{}name[0]
            final fun <get-name>(): kotlin/String? // dev.kord.core.entity/Embed.Provider.name.<get-name>|<get-name>(){}[0]
        final val url // dev.kord.core.entity/Embed.Provider.url|{}url[0]
            final fun <get-url>(): kotlin/String? // dev.kord.core.entity/Embed.Provider.url.<get-url>|<get-url>(){}[0]

        final fun component1(): dev.kord.core.cache.data/EmbedProviderData // dev.kord.core.entity/Embed.Provider.component1|component1(){}[0]
        final fun component2(): dev.kord.core/Kord // dev.kord.core.entity/Embed.Provider.component2|component2(){}[0]
        final fun copy(dev.kord.core.cache.data/EmbedProviderData = ..., dev.kord.core/Kord = ...): dev.kord.core.entity/Embed.Provider // dev.kord.core.entity/Embed.Provider.copy|copy(dev.kord.core.cache.data.EmbedProviderData;dev.kord.core.Kord){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/Embed.Provider.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.core.entity/Embed.Provider.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.core.entity/Embed.Provider.toString|toString(){}[0]
    }

    final class Thumbnail : dev.kord.core/KordObject { // dev.kord.core.entity/Embed.Thumbnail|null[0]
        constructor <init>(dev.kord.core.cache.data/EmbedThumbnailData, dev.kord.core/Kord) // dev.kord.core.entity/Embed.Thumbnail.<init>|<init>(dev.kord.core.cache.data.EmbedThumbnailData;dev.kord.core.Kord){}[0]

        final val data // dev.kord.core.entity/Embed.Thumbnail.data|{}data[0]
            final fun <get-data>(): dev.kord.core.cache.data/EmbedThumbnailData // dev.kord.core.entity/Embed.Thumbnail.data.<get-data>|<get-data>(){}[0]
        final val height // dev.kord.core.entity/Embed.Thumbnail.height|{}height[0]
            final fun <get-height>(): kotlin/Int? // dev.kord.core.entity/Embed.Thumbnail.height.<get-height>|<get-height>(){}[0]
        final val kord // dev.kord.core.entity/Embed.Thumbnail.kord|{}kord[0]
            final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/Embed.Thumbnail.kord.<get-kord>|<get-kord>(){}[0]
        final val proxyUrl // dev.kord.core.entity/Embed.Thumbnail.proxyUrl|{}proxyUrl[0]
            final fun <get-proxyUrl>(): kotlin/String? // dev.kord.core.entity/Embed.Thumbnail.proxyUrl.<get-proxyUrl>|<get-proxyUrl>(){}[0]
        final val url // dev.kord.core.entity/Embed.Thumbnail.url|{}url[0]
            final fun <get-url>(): kotlin/String? // dev.kord.core.entity/Embed.Thumbnail.url.<get-url>|<get-url>(){}[0]
        final val width // dev.kord.core.entity/Embed.Thumbnail.width|{}width[0]
            final fun <get-width>(): kotlin/Int? // dev.kord.core.entity/Embed.Thumbnail.width.<get-width>|<get-width>(){}[0]

        final fun component1(): dev.kord.core.cache.data/EmbedThumbnailData // dev.kord.core.entity/Embed.Thumbnail.component1|component1(){}[0]
        final fun component2(): dev.kord.core/Kord // dev.kord.core.entity/Embed.Thumbnail.component2|component2(){}[0]
        final fun copy(dev.kord.core.cache.data/EmbedThumbnailData = ..., dev.kord.core/Kord = ...): dev.kord.core.entity/Embed.Thumbnail // dev.kord.core.entity/Embed.Thumbnail.copy|copy(dev.kord.core.cache.data.EmbedThumbnailData;dev.kord.core.Kord){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/Embed.Thumbnail.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.core.entity/Embed.Thumbnail.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.core.entity/Embed.Thumbnail.toString|toString(){}[0]
    }

    final class Video : dev.kord.core/KordObject { // dev.kord.core.entity/Embed.Video|null[0]
        constructor <init>(dev.kord.core.cache.data/EmbedVideoData, dev.kord.core/Kord) // dev.kord.core.entity/Embed.Video.<init>|<init>(dev.kord.core.cache.data.EmbedVideoData;dev.kord.core.Kord){}[0]

        final val data // dev.kord.core.entity/Embed.Video.data|{}data[0]
            final fun <get-data>(): dev.kord.core.cache.data/EmbedVideoData // dev.kord.core.entity/Embed.Video.data.<get-data>|<get-data>(){}[0]
        final val height // dev.kord.core.entity/Embed.Video.height|{}height[0]
            final fun <get-height>(): kotlin/Int? // dev.kord.core.entity/Embed.Video.height.<get-height>|<get-height>(){}[0]
        final val kord // dev.kord.core.entity/Embed.Video.kord|{}kord[0]
            final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/Embed.Video.kord.<get-kord>|<get-kord>(){}[0]
        final val url // dev.kord.core.entity/Embed.Video.url|{}url[0]
            final fun <get-url>(): kotlin/String? // dev.kord.core.entity/Embed.Video.url.<get-url>|<get-url>(){}[0]
        final val width // dev.kord.core.entity/Embed.Video.width|{}width[0]
            final fun <get-width>(): kotlin/Int? // dev.kord.core.entity/Embed.Video.width.<get-width>|<get-width>(){}[0]

        final fun component1(): dev.kord.core.cache.data/EmbedVideoData // dev.kord.core.entity/Embed.Video.component1|component1(){}[0]
        final fun component2(): dev.kord.core/Kord // dev.kord.core.entity/Embed.Video.component2|component2(){}[0]
        final fun copy(dev.kord.core.cache.data/EmbedVideoData = ..., dev.kord.core/Kord = ...): dev.kord.core.entity/Embed.Video // dev.kord.core.entity/Embed.Video.copy|copy(dev.kord.core.cache.data.EmbedVideoData;dev.kord.core.Kord){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/Embed.Video.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.core.entity/Embed.Video.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.core.entity/Embed.Video.toString|toString(){}[0]
    }
}

final class dev.kord.core.entity/Guild : dev.kord.core.behavior/GuildBehavior { // dev.kord.core.entity/Guild|null[0]
    constructor <init>(dev.kord.core.cache.data/GuildData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/Guild.<init>|<init>(dev.kord.core.cache.data.GuildData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val afkChannel // dev.kord.core.entity/Guild.afkChannel|{}afkChannel[0]
        final fun <get-afkChannel>(): dev.kord.core.behavior.channel/VoiceChannelBehavior? // dev.kord.core.entity/Guild.afkChannel.<get-afkChannel>|<get-afkChannel>(){}[0]
    final val afkChannelId // dev.kord.core.entity/Guild.afkChannelId|{}afkChannelId[0]
        final fun <get-afkChannelId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/Guild.afkChannelId.<get-afkChannelId>|<get-afkChannelId>(){}[0]
    final val afkTimeout // dev.kord.core.entity/Guild.afkTimeout|{}afkTimeout[0]
        final fun <get-afkTimeout>(): kotlin.time/Duration // dev.kord.core.entity/Guild.afkTimeout.<get-afkTimeout>|<get-afkTimeout>(){}[0]
    final val applicationId // dev.kord.core.entity/Guild.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/Guild.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val approximateMemberCount // dev.kord.core.entity/Guild.approximateMemberCount|{}approximateMemberCount[0]
        final fun <get-approximateMemberCount>(): kotlin/Int? // dev.kord.core.entity/Guild.approximateMemberCount.<get-approximateMemberCount>|<get-approximateMemberCount>(){}[0]
    final val approximatePresenceCount // dev.kord.core.entity/Guild.approximatePresenceCount|{}approximatePresenceCount[0]
        final fun <get-approximatePresenceCount>(): kotlin/Int? // dev.kord.core.entity/Guild.approximatePresenceCount.<get-approximatePresenceCount>|<get-approximatePresenceCount>(){}[0]
    final val banner // dev.kord.core.entity/Guild.banner|{}banner[0]
        final fun <get-banner>(): dev.kord.core.entity/Asset? // dev.kord.core.entity/Guild.banner.<get-banner>|<get-banner>(){}[0]
    final val bannerHash // dev.kord.core.entity/Guild.bannerHash|{}bannerHash[0]
        final fun <get-bannerHash>(): kotlin/String? // dev.kord.core.entity/Guild.bannerHash.<get-bannerHash>|<get-bannerHash>(){}[0]
    final val channelBehaviors // dev.kord.core.entity/Guild.channelBehaviors|{}channelBehaviors[0]
        final fun <get-channelBehaviors>(): kotlin.collections/Set<dev.kord.core.behavior.channel/TopGuildChannelBehavior> // dev.kord.core.entity/Guild.channelBehaviors.<get-channelBehaviors>|<get-channelBehaviors>(){}[0]
    final val channelIds // dev.kord.core.entity/Guild.channelIds|{}channelIds[0]
        final fun <get-channelIds>(): kotlin.collections/Set<dev.kord.common.entity/Snowflake> // dev.kord.core.entity/Guild.channelIds.<get-channelIds>|<get-channelIds>(){}[0]
    final val contentFilter // dev.kord.core.entity/Guild.contentFilter|{}contentFilter[0]
        final fun <get-contentFilter>(): dev.kord.common.entity/ExplicitContentFilter // dev.kord.core.entity/Guild.contentFilter.<get-contentFilter>|<get-contentFilter>(){}[0]
    final val data // dev.kord.core.entity/Guild.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/GuildData // dev.kord.core.entity/Guild.data.<get-data>|<get-data>(){}[0]
    final val defaultMessageNotificationLevel // dev.kord.core.entity/Guild.defaultMessageNotificationLevel|{}defaultMessageNotificationLevel[0]
        final fun <get-defaultMessageNotificationLevel>(): dev.kord.common.entity/DefaultMessageNotificationLevel // dev.kord.core.entity/Guild.defaultMessageNotificationLevel.<get-defaultMessageNotificationLevel>|<get-defaultMessageNotificationLevel>(){}[0]
    final val description // dev.kord.core.entity/Guild.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.core.entity/Guild.description.<get-description>|<get-description>(){}[0]
    final val discoverySplash // dev.kord.core.entity/Guild.discoverySplash|{}discoverySplash[0]
        final fun <get-discoverySplash>(): dev.kord.core.entity/Asset? // dev.kord.core.entity/Guild.discoverySplash.<get-discoverySplash>|<get-discoverySplash>(){}[0]
    final val discoverySplashHash // dev.kord.core.entity/Guild.discoverySplashHash|{}discoverySplashHash[0]
        final fun <get-discoverySplashHash>(): kotlin/String? // dev.kord.core.entity/Guild.discoverySplashHash.<get-discoverySplashHash>|<get-discoverySplashHash>(){}[0]
    final val emojiIds // dev.kord.core.entity/Guild.emojiIds|{}emojiIds[0]
        final fun <get-emojiIds>(): kotlin.collections/Set<dev.kord.common.entity/Snowflake> // dev.kord.core.entity/Guild.emojiIds.<get-emojiIds>|<get-emojiIds>(){}[0]
    final val everyoneRole // dev.kord.core.entity/Guild.everyoneRole|{}everyoneRole[0]
        final fun <get-everyoneRole>(): dev.kord.core.behavior/RoleBehavior // dev.kord.core.entity/Guild.everyoneRole.<get-everyoneRole>|<get-everyoneRole>(){}[0]
    final val features // dev.kord.core.entity/Guild.features|{}features[0]
        final fun <get-features>(): kotlin.collections/Set<dev.kord.common.entity/GuildFeature> // dev.kord.core.entity/Guild.features.<get-features>|<get-features>(){}[0]
    final val icon // dev.kord.core.entity/Guild.icon|{}icon[0]
        final fun <get-icon>(): dev.kord.core.entity/Asset? // dev.kord.core.entity/Guild.icon.<get-icon>|<get-icon>(){}[0]
    final val iconHash // dev.kord.core.entity/Guild.iconHash|{}iconHash[0]
        final fun <get-iconHash>(): kotlin/String? // dev.kord.core.entity/Guild.iconHash.<get-iconHash>|<get-iconHash>(){}[0]
    final val id // dev.kord.core.entity/Guild.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/Guild.id.<get-id>|<get-id>(){}[0]
    final val isLarge // dev.kord.core.entity/Guild.isLarge|{}isLarge[0]
        final fun <get-isLarge>(): kotlin/Boolean? // dev.kord.core.entity/Guild.isLarge.<get-isLarge>|<get-isLarge>(){}[0]
    final val isOwner // dev.kord.core.entity/Guild.isOwner|{}isOwner[0]
        final fun <get-isOwner>(): kotlin/Boolean // dev.kord.core.entity/Guild.isOwner.<get-isOwner>|<get-isOwner>(){}[0]
    final val isWidgetEnabled // dev.kord.core.entity/Guild.isWidgetEnabled|{}isWidgetEnabled[0]
        final fun <get-isWidgetEnabled>(): kotlin/Boolean // dev.kord.core.entity/Guild.isWidgetEnabled.<get-isWidgetEnabled>|<get-isWidgetEnabled>(){}[0]
    final val joinedTime // dev.kord.core.entity/Guild.joinedTime|{}joinedTime[0]
        final fun <get-joinedTime>(): kotlinx.datetime/Instant? // dev.kord.core.entity/Guild.joinedTime.<get-joinedTime>|<get-joinedTime>(){}[0]
    final val kord // dev.kord.core.entity/Guild.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/Guild.kord.<get-kord>|<get-kord>(){}[0]
    final val maxMembers // dev.kord.core.entity/Guild.maxMembers|{}maxMembers[0]
        final fun <get-maxMembers>(): kotlin/Int? // dev.kord.core.entity/Guild.maxMembers.<get-maxMembers>|<get-maxMembers>(){}[0]
    final val maxPresences // dev.kord.core.entity/Guild.maxPresences|{}maxPresences[0]
        final fun <get-maxPresences>(): kotlin/Int // dev.kord.core.entity/Guild.maxPresences.<get-maxPresences>|<get-maxPresences>(){}[0]
    final val maxStageVideoChannelUsers // dev.kord.core.entity/Guild.maxStageVideoChannelUsers|{}maxStageVideoChannelUsers[0]
        final fun <get-maxStageVideoChannelUsers>(): kotlin/Int? // dev.kord.core.entity/Guild.maxStageVideoChannelUsers.<get-maxStageVideoChannelUsers>|<get-maxStageVideoChannelUsers>(){}[0]
    final val maxVideoChannelUsers // dev.kord.core.entity/Guild.maxVideoChannelUsers|{}maxVideoChannelUsers[0]
        final fun <get-maxVideoChannelUsers>(): kotlin/Int? // dev.kord.core.entity/Guild.maxVideoChannelUsers.<get-maxVideoChannelUsers>|<get-maxVideoChannelUsers>(){}[0]
    final val memberCount // dev.kord.core.entity/Guild.memberCount|{}memberCount[0]
        final fun <get-memberCount>(): kotlin/Int? // dev.kord.core.entity/Guild.memberCount.<get-memberCount>|<get-memberCount>(){}[0]
    final val mfaLevel // dev.kord.core.entity/Guild.mfaLevel|{}mfaLevel[0]
        final fun <get-mfaLevel>(): dev.kord.common.entity/MFALevel // dev.kord.core.entity/Guild.mfaLevel.<get-mfaLevel>|<get-mfaLevel>(){}[0]
    final val name // dev.kord.core.entity/Guild.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.entity/Guild.name.<get-name>|<get-name>(){}[0]
    final val nsfw // dev.kord.core.entity/Guild.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): dev.kord.common.entity/NsfwLevel // dev.kord.core.entity/Guild.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
    final val owner // dev.kord.core.entity/Guild.owner|{}owner[0]
        final fun <get-owner>(): dev.kord.core.behavior/MemberBehavior // dev.kord.core.entity/Guild.owner.<get-owner>|<get-owner>(){}[0]
    final val ownerId // dev.kord.core.entity/Guild.ownerId|{}ownerId[0]
        final fun <get-ownerId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/Guild.ownerId.<get-ownerId>|<get-ownerId>(){}[0]
    final val permissions // dev.kord.core.entity/Guild.permissions|{}permissions[0]
        final fun <get-permissions>(): dev.kord.common.entity/Permissions? // dev.kord.core.entity/Guild.permissions.<get-permissions>|<get-permissions>(){}[0]
    final val preferredLocale // dev.kord.core.entity/Guild.preferredLocale|{}preferredLocale[0]
        final fun <get-preferredLocale>(): dev.kord.common/Locale // dev.kord.core.entity/Guild.preferredLocale.<get-preferredLocale>|<get-preferredLocale>(){}[0]
    final val premiumProgressBarEnabled // dev.kord.core.entity/Guild.premiumProgressBarEnabled|{}premiumProgressBarEnabled[0]
        final fun <get-premiumProgressBarEnabled>(): kotlin/Boolean // dev.kord.core.entity/Guild.premiumProgressBarEnabled.<get-premiumProgressBarEnabled>|<get-premiumProgressBarEnabled>(){}[0]
    final val premiumSubscriptionCount // dev.kord.core.entity/Guild.premiumSubscriptionCount|{}premiumSubscriptionCount[0]
        final fun <get-premiumSubscriptionCount>(): kotlin/Int? // dev.kord.core.entity/Guild.premiumSubscriptionCount.<get-premiumSubscriptionCount>|<get-premiumSubscriptionCount>(){}[0]
    final val premiumTier // dev.kord.core.entity/Guild.premiumTier|{}premiumTier[0]
        final fun <get-premiumTier>(): dev.kord.common.entity/PremiumTier // dev.kord.core.entity/Guild.premiumTier.<get-premiumTier>|<get-premiumTier>(){}[0]
    final val publicUpdatesChannel // dev.kord.core.entity/Guild.publicUpdatesChannel|{}publicUpdatesChannel[0]
        final fun <get-publicUpdatesChannel>(): dev.kord.core.behavior.channel/TopGuildMessageChannelBehavior? // dev.kord.core.entity/Guild.publicUpdatesChannel.<get-publicUpdatesChannel>|<get-publicUpdatesChannel>(){}[0]
    final val publicUpdatesChannelId // dev.kord.core.entity/Guild.publicUpdatesChannelId|{}publicUpdatesChannelId[0]
        final fun <get-publicUpdatesChannelId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/Guild.publicUpdatesChannelId.<get-publicUpdatesChannelId>|<get-publicUpdatesChannelId>(){}[0]
    final val regionId // dev.kord.core.entity/Guild.regionId|{}regionId[0]
        final fun <get-regionId>(): kotlin/String // dev.kord.core.entity/Guild.regionId.<get-regionId>|<get-regionId>(){}[0]
    final val roleBehaviors // dev.kord.core.entity/Guild.roleBehaviors|{}roleBehaviors[0]
        final fun <get-roleBehaviors>(): kotlin.collections/Set<dev.kord.core.behavior/RoleBehavior> // dev.kord.core.entity/Guild.roleBehaviors.<get-roleBehaviors>|<get-roleBehaviors>(){}[0]
    final val roleIds // dev.kord.core.entity/Guild.roleIds|{}roleIds[0]
        final fun <get-roleIds>(): kotlin.collections/Set<dev.kord.common.entity/Snowflake> // dev.kord.core.entity/Guild.roleIds.<get-roleIds>|<get-roleIds>(){}[0]
    final val rulesChannel // dev.kord.core.entity/Guild.rulesChannel|{}rulesChannel[0]
        final fun <get-rulesChannel>(): dev.kord.core.behavior.channel/TopGuildMessageChannelBehavior? // dev.kord.core.entity/Guild.rulesChannel.<get-rulesChannel>|<get-rulesChannel>(){}[0]
    final val rulesChannelId // dev.kord.core.entity/Guild.rulesChannelId|{}rulesChannelId[0]
        final fun <get-rulesChannelId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/Guild.rulesChannelId.<get-rulesChannelId>|<get-rulesChannelId>(){}[0]
    final val safetyAlertsChannel // dev.kord.core.entity/Guild.safetyAlertsChannel|{}safetyAlertsChannel[0]
        final fun <get-safetyAlertsChannel>(): dev.kord.core.behavior.channel/TextChannelBehavior? // dev.kord.core.entity/Guild.safetyAlertsChannel.<get-safetyAlertsChannel>|<get-safetyAlertsChannel>(){}[0]
    final val safetyAlertsChannelId // dev.kord.core.entity/Guild.safetyAlertsChannelId|{}safetyAlertsChannelId[0]
        final fun <get-safetyAlertsChannelId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/Guild.safetyAlertsChannelId.<get-safetyAlertsChannelId>|<get-safetyAlertsChannelId>(){}[0]
    final val splash // dev.kord.core.entity/Guild.splash|{}splash[0]
        final fun <get-splash>(): dev.kord.core.entity/Asset? // dev.kord.core.entity/Guild.splash.<get-splash>|<get-splash>(){}[0]
    final val splashHash // dev.kord.core.entity/Guild.splashHash|{}splashHash[0]
        final fun <get-splashHash>(): kotlin/String? // dev.kord.core.entity/Guild.splashHash.<get-splashHash>|<get-splashHash>(){}[0]
    final val stageInstances // dev.kord.core.entity/Guild.stageInstances|{}stageInstances[0]
        final fun <get-stageInstances>(): kotlin.collections/Set<dev.kord.core.entity/StageInstance> // dev.kord.core.entity/Guild.stageInstances.<get-stageInstances>|<get-stageInstances>(){}[0]
    final val stickers // dev.kord.core.entity/Guild.stickers|{}stickers[0]
        final fun <get-stickers>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/GuildSticker> // dev.kord.core.entity/Guild.stickers.<get-stickers>|<get-stickers>(){}[0]
    final val supplier // dev.kord.core.entity/Guild.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/Guild.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val systemChannel // dev.kord.core.entity/Guild.systemChannel|{}systemChannel[0]
        final fun <get-systemChannel>(): dev.kord.core.behavior.channel/TextChannelBehavior? // dev.kord.core.entity/Guild.systemChannel.<get-systemChannel>|<get-systemChannel>(){}[0]
    final val systemChannelFlags // dev.kord.core.entity/Guild.systemChannelFlags|{}systemChannelFlags[0]
        final fun <get-systemChannelFlags>(): dev.kord.common.entity/SystemChannelFlags // dev.kord.core.entity/Guild.systemChannelFlags.<get-systemChannelFlags>|<get-systemChannelFlags>(){}[0]
    final val systemChannelId // dev.kord.core.entity/Guild.systemChannelId|{}systemChannelId[0]
        final fun <get-systemChannelId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/Guild.systemChannelId.<get-systemChannelId>|<get-systemChannelId>(){}[0]
    final val vanityCode // dev.kord.core.entity/Guild.vanityCode|{}vanityCode[0]
        final fun <get-vanityCode>(): kotlin/String? // dev.kord.core.entity/Guild.vanityCode.<get-vanityCode>|<get-vanityCode>(){}[0]
    final val vanityUrl // dev.kord.core.entity/Guild.vanityUrl|{}vanityUrl[0]
        final fun <get-vanityUrl>(): kotlin/String? // dev.kord.core.entity/Guild.vanityUrl.<get-vanityUrl>|<get-vanityUrl>(){}[0]
    final val verificationLevel // dev.kord.core.entity/Guild.verificationLevel|{}verificationLevel[0]
        final fun <get-verificationLevel>(): dev.kord.common.entity/VerificationLevel // dev.kord.core.entity/Guild.verificationLevel.<get-verificationLevel>|<get-verificationLevel>(){}[0]
    final val welcomeScreen // dev.kord.core.entity/Guild.welcomeScreen|{}welcomeScreen[0]
        final fun <get-welcomeScreen>(): dev.kord.core.entity/WelcomeScreen? // dev.kord.core.entity/Guild.welcomeScreen.<get-welcomeScreen>|<get-welcomeScreen>(){}[0]
    final val widgetChannel // dev.kord.core.entity/Guild.widgetChannel|{}widgetChannel[0]
        final fun <get-widgetChannel>(): dev.kord.core.behavior.channel/TopGuildChannelBehavior? // dev.kord.core.entity/Guild.widgetChannel.<get-widgetChannel>|<get-widgetChannel>(){}[0]
    final val widgetChannelId // dev.kord.core.entity/Guild.widgetChannelId|{}widgetChannelId[0]
        final fun <get-widgetChannelId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/Guild.widgetChannelId.<get-widgetChannelId>|<get-widgetChannelId>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/Guild.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity/Guild.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity/Guild.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/Guild // dev.kord.core.entity/Guild.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun asGuild(): dev.kord.core.entity/Guild // dev.kord.core.entity/Guild.asGuild|asGuild(){}[0]
    final suspend fun asGuildOrNull(): dev.kord.core.entity/Guild // dev.kord.core.entity/Guild.asGuildOrNull|asGuildOrNull(){}[0]
    final suspend fun getAfkChannel(): dev.kord.core.entity.channel/VoiceChannel? // dev.kord.core.entity/Guild.getAfkChannel|getAfkChannel(){}[0]
    final suspend fun getEmbedChannel(): dev.kord.core.entity.channel/TopGuildChannel? // dev.kord.core.entity/Guild.getEmbedChannel|getEmbedChannel(){}[0]
    final suspend fun getEmoji(dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildEmoji // dev.kord.core.entity/Guild.getEmoji|getEmoji(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getEmojiOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildEmoji? // dev.kord.core.entity/Guild.getEmojiOrNull|getEmojiOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getEveryoneRole(): dev.kord.core.entity/Role // dev.kord.core.entity/Guild.getEveryoneRole|getEveryoneRole(){}[0]
    final suspend fun getEveryoneRoleOrNull(): dev.kord.core.entity/Role? // dev.kord.core.entity/Guild.getEveryoneRoleOrNull|getEveryoneRoleOrNull(){}[0]
    final suspend fun getOwner(): dev.kord.core.entity/Member // dev.kord.core.entity/Guild.getOwner|getOwner(){}[0]
    final suspend fun getOwnerOrNull(): dev.kord.core.entity/Member? // dev.kord.core.entity/Guild.getOwnerOrNull|getOwnerOrNull(){}[0]
    final suspend fun getPublicUpdatesChannel(): dev.kord.core.entity.channel/TopGuildMessageChannel? // dev.kord.core.entity/Guild.getPublicUpdatesChannel|getPublicUpdatesChannel(){}[0]
    final suspend fun getRulesChannel(): dev.kord.core.entity.channel/TopGuildMessageChannel? // dev.kord.core.entity/Guild.getRulesChannel|getRulesChannel(){}[0]
    final suspend fun getSystemChannel(): dev.kord.core.entity.channel/TextChannel? // dev.kord.core.entity/Guild.getSystemChannel|getSystemChannel(){}[0]
    final suspend fun getWidgetChannel(): dev.kord.core.entity.channel/TopGuildMessageChannel? // dev.kord.core.entity/Guild.getWidgetChannel|getWidgetChannel(){}[0]
}

final class dev.kord.core.entity/GuildEmoji : dev.kord.core.entity/Emoji, dev.kord.core.entity/KordEntity, dev.kord.core.entity/Strategizable { // dev.kord.core.entity/GuildEmoji|null[0]
    constructor <init>(dev.kord.core.cache.data/EmojiData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/GuildEmoji.<init>|<init>(dev.kord.core.cache.data.EmojiData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity/GuildEmoji.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/EmojiData // dev.kord.core.entity/GuildEmoji.data.<get-data>|<get-data>(){}[0]
    final val guildId // dev.kord.core.entity/GuildEmoji.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/GuildEmoji.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.core.entity/GuildEmoji.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/GuildEmoji.id.<get-id>|<get-id>(){}[0]
    final val image // dev.kord.core.entity/GuildEmoji.image|{}image[0]
        final fun <get-image>(): dev.kord.core.entity/Asset // dev.kord.core.entity/GuildEmoji.image.<get-image>|<get-image>(){}[0]
    final val isAnimated // dev.kord.core.entity/GuildEmoji.isAnimated|{}isAnimated[0]
        final fun <get-isAnimated>(): kotlin/Boolean // dev.kord.core.entity/GuildEmoji.isAnimated.<get-isAnimated>|<get-isAnimated>(){}[0]
    final val isAvailable // dev.kord.core.entity/GuildEmoji.isAvailable|{}isAvailable[0]
        final fun <get-isAvailable>(): kotlin/Boolean // dev.kord.core.entity/GuildEmoji.isAvailable.<get-isAvailable>|<get-isAvailable>(){}[0]
    final val isManaged // dev.kord.core.entity/GuildEmoji.isManaged|{}isManaged[0]
        final fun <get-isManaged>(): kotlin/Boolean // dev.kord.core.entity/GuildEmoji.isManaged.<get-isManaged>|<get-isManaged>(){}[0]
    final val kord // dev.kord.core.entity/GuildEmoji.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/GuildEmoji.kord.<get-kord>|<get-kord>(){}[0]
    final val member // dev.kord.core.entity/GuildEmoji.member|{}member[0]
        final fun <get-member>(): dev.kord.core.behavior/MemberBehavior? // dev.kord.core.entity/GuildEmoji.member.<get-member>|<get-member>(){}[0]
    final val mention // dev.kord.core.entity/GuildEmoji.mention|{}mention[0]
        final fun <get-mention>(): kotlin/String // dev.kord.core.entity/GuildEmoji.mention.<get-mention>|<get-mention>(){}[0]
    final val name // dev.kord.core.entity/GuildEmoji.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.core.entity/GuildEmoji.name.<get-name>|<get-name>(){}[0]
    final val requiresColons // dev.kord.core.entity/GuildEmoji.requiresColons|{}requiresColons[0]
        final fun <get-requiresColons>(): kotlin/Boolean // dev.kord.core.entity/GuildEmoji.requiresColons.<get-requiresColons>|<get-requiresColons>(){}[0]
    final val roleBehaviors // dev.kord.core.entity/GuildEmoji.roleBehaviors|{}roleBehaviors[0]
        final fun <get-roleBehaviors>(): kotlin.collections/Set<dev.kord.core.behavior/RoleBehavior> // dev.kord.core.entity/GuildEmoji.roleBehaviors.<get-roleBehaviors>|<get-roleBehaviors>(){}[0]
    final val roleIds // dev.kord.core.entity/GuildEmoji.roleIds|{}roleIds[0]
        final fun <get-roleIds>(): kotlin.collections/Set<dev.kord.common.entity/Snowflake> // dev.kord.core.entity/GuildEmoji.roleIds.<get-roleIds>|<get-roleIds>(){}[0]
    final val roles // dev.kord.core.entity/GuildEmoji.roles|{}roles[0]
        final fun <get-roles>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Role> // dev.kord.core.entity/GuildEmoji.roles.<get-roles>|<get-roles>(){}[0]
    final val supplier // dev.kord.core.entity/GuildEmoji.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/GuildEmoji.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val user // dev.kord.core.entity/GuildEmoji.user|{}user[0]
        final fun <get-user>(): dev.kord.core.behavior/UserBehavior? // dev.kord.core.entity/GuildEmoji.user.<get-user>|<get-user>(){}[0]
    final val userId // dev.kord.core.entity/GuildEmoji.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/GuildEmoji.userId.<get-userId>|<get-userId>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/GuildEmoji.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity/GuildEmoji.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity/GuildEmoji.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/GuildEmoji // dev.kord.core.entity/GuildEmoji.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun delete(kotlin/String? = ...) // dev.kord.core.entity/GuildEmoji.delete|delete(kotlin.String?){}[0]
    final suspend fun getMember(): dev.kord.core.entity/Member? // dev.kord.core.entity/GuildEmoji.getMember|getMember(){}[0]
    final suspend fun getUser(): dev.kord.core.entity/User? // dev.kord.core.entity/GuildEmoji.getUser|getUser(){}[0]
    final suspend inline fun edit(kotlin/Function1<dev.kord.rest.builder.guild/EmojiModifyBuilder, kotlin/Unit>) // dev.kord.core.entity/GuildEmoji.edit|edit(kotlin.Function1<dev.kord.rest.builder.guild.EmojiModifyBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.core.entity/GuildOnboarding : dev.kord.core.entity/Strategizable, dev.kord.core/KordObject { // dev.kord.core.entity/GuildOnboarding|null[0]
    constructor <init>(dev.kord.common.entity/DiscordGuildOnboarding, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/GuildOnboarding.<init>|<init>(dev.kord.common.entity.DiscordGuildOnboarding;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity/GuildOnboarding.data|{}data[0]
        final fun <get-data>(): dev.kord.common.entity/DiscordGuildOnboarding // dev.kord.core.entity/GuildOnboarding.data.<get-data>|<get-data>(){}[0]
    final val defaultChannelBehaviors // dev.kord.core.entity/GuildOnboarding.defaultChannelBehaviors|{}defaultChannelBehaviors[0]
        final fun <get-defaultChannelBehaviors>(): kotlin.collections/List<dev.kord.core.behavior.channel/TopGuildChannelBehavior> // dev.kord.core.entity/GuildOnboarding.defaultChannelBehaviors.<get-defaultChannelBehaviors>|<get-defaultChannelBehaviors>(){}[0]
    final val defaultChannelIds // dev.kord.core.entity/GuildOnboarding.defaultChannelIds|{}defaultChannelIds[0]
        final fun <get-defaultChannelIds>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.core.entity/GuildOnboarding.defaultChannelIds.<get-defaultChannelIds>|<get-defaultChannelIds>(){}[0]
    final val defaultChannels // dev.kord.core.entity/GuildOnboarding.defaultChannels|{}defaultChannels[0]
        final fun <get-defaultChannels>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel/TopGuildChannel> // dev.kord.core.entity/GuildOnboarding.defaultChannels.<get-defaultChannels>|<get-defaultChannels>(){}[0]
    final val guild // dev.kord.core.entity/GuildOnboarding.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.entity/GuildOnboarding.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.entity/GuildOnboarding.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/GuildOnboarding.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val isEnabled // dev.kord.core.entity/GuildOnboarding.isEnabled|{}isEnabled[0]
        final fun <get-isEnabled>(): kotlin/Boolean // dev.kord.core.entity/GuildOnboarding.isEnabled.<get-isEnabled>|<get-isEnabled>(){}[0]
    final val kord // dev.kord.core.entity/GuildOnboarding.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/GuildOnboarding.kord.<get-kord>|<get-kord>(){}[0]
    final val mode // dev.kord.core.entity/GuildOnboarding.mode|{}mode[0]
        final fun <get-mode>(): dev.kord.common.entity/OnboardingMode // dev.kord.core.entity/GuildOnboarding.mode.<get-mode>|<get-mode>(){}[0]
    final val prompts // dev.kord.core.entity/GuildOnboarding.prompts|{}prompts[0]
        final fun <get-prompts>(): kotlin.collections/List<dev.kord.core.entity/GuildOnboarding.Prompt> // dev.kord.core.entity/GuildOnboarding.prompts.<get-prompts>|<get-prompts>(){}[0]
    final val supplier // dev.kord.core.entity/GuildOnboarding.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/GuildOnboarding.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity/GuildOnboarding.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/GuildOnboarding // dev.kord.core.entity/GuildOnboarding.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.entity/GuildOnboarding.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.entity/GuildOnboarding.getGuildOrNull|getGuildOrNull(){}[0]

    final class Prompt : dev.kord.core.entity/KordEntity { // dev.kord.core.entity/GuildOnboarding.Prompt|null[0]
        constructor <init>(dev.kord.common.entity/DiscordOnboardingPrompt, dev.kord.common.entity/Snowflake, dev.kord.core/Kord) // dev.kord.core.entity/GuildOnboarding.Prompt.<init>|<init>(dev.kord.common.entity.DiscordOnboardingPrompt;dev.kord.common.entity.Snowflake;dev.kord.core.Kord){}[0]

        final val data // dev.kord.core.entity/GuildOnboarding.Prompt.data|{}data[0]
            final fun <get-data>(): dev.kord.common.entity/DiscordOnboardingPrompt // dev.kord.core.entity/GuildOnboarding.Prompt.data.<get-data>|<get-data>(){}[0]
        final val guildId // dev.kord.core.entity/GuildOnboarding.Prompt.guildId|{}guildId[0]
            final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/GuildOnboarding.Prompt.guildId.<get-guildId>|<get-guildId>(){}[0]
        final val id // dev.kord.core.entity/GuildOnboarding.Prompt.id|{}id[0]
            final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/GuildOnboarding.Prompt.id.<get-id>|<get-id>(){}[0]
        final val isInOnboarding // dev.kord.core.entity/GuildOnboarding.Prompt.isInOnboarding|{}isInOnboarding[0]
            final fun <get-isInOnboarding>(): kotlin/Boolean // dev.kord.core.entity/GuildOnboarding.Prompt.isInOnboarding.<get-isInOnboarding>|<get-isInOnboarding>(){}[0]
        final val isRequired // dev.kord.core.entity/GuildOnboarding.Prompt.isRequired|{}isRequired[0]
            final fun <get-isRequired>(): kotlin/Boolean // dev.kord.core.entity/GuildOnboarding.Prompt.isRequired.<get-isRequired>|<get-isRequired>(){}[0]
        final val isSingleSelect // dev.kord.core.entity/GuildOnboarding.Prompt.isSingleSelect|{}isSingleSelect[0]
            final fun <get-isSingleSelect>(): kotlin/Boolean // dev.kord.core.entity/GuildOnboarding.Prompt.isSingleSelect.<get-isSingleSelect>|<get-isSingleSelect>(){}[0]
        final val kord // dev.kord.core.entity/GuildOnboarding.Prompt.kord|{}kord[0]
            final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/GuildOnboarding.Prompt.kord.<get-kord>|<get-kord>(){}[0]
        final val options // dev.kord.core.entity/GuildOnboarding.Prompt.options|{}options[0]
            final fun <get-options>(): kotlin.collections/List<dev.kord.core.entity/GuildOnboarding.Prompt.Option> // dev.kord.core.entity/GuildOnboarding.Prompt.options.<get-options>|<get-options>(){}[0]
        final val title // dev.kord.core.entity/GuildOnboarding.Prompt.title|{}title[0]
            final fun <get-title>(): kotlin/String // dev.kord.core.entity/GuildOnboarding.Prompt.title.<get-title>|<get-title>(){}[0]
        final val type // dev.kord.core.entity/GuildOnboarding.Prompt.type|{}type[0]
            final fun <get-type>(): dev.kord.common.entity/OnboardingPromptType // dev.kord.core.entity/GuildOnboarding.Prompt.type.<get-type>|<get-type>(){}[0]

        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/GuildOnboarding.Prompt.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.core.entity/GuildOnboarding.Prompt.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.core.entity/GuildOnboarding.Prompt.toString|toString(){}[0]

        final class Option : dev.kord.core.entity/KordEntity, dev.kord.core.entity/Strategizable { // dev.kord.core.entity/GuildOnboarding.Prompt.Option|null[0]
            constructor <init>(dev.kord.common.entity/DiscordOnboardingPromptOption, dev.kord.common.entity/Snowflake, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/GuildOnboarding.Prompt.Option.<init>|<init>(dev.kord.common.entity.DiscordOnboardingPromptOption;dev.kord.common.entity.Snowflake;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

            final val channelBehaviors // dev.kord.core.entity/GuildOnboarding.Prompt.Option.channelBehaviors|{}channelBehaviors[0]
                final fun <get-channelBehaviors>(): kotlin.collections/List<dev.kord.core.behavior.channel/TopGuildChannelBehavior> // dev.kord.core.entity/GuildOnboarding.Prompt.Option.channelBehaviors.<get-channelBehaviors>|<get-channelBehaviors>(){}[0]
            final val channelIds // dev.kord.core.entity/GuildOnboarding.Prompt.Option.channelIds|{}channelIds[0]
                final fun <get-channelIds>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.core.entity/GuildOnboarding.Prompt.Option.channelIds.<get-channelIds>|<get-channelIds>(){}[0]
            final val channels // dev.kord.core.entity/GuildOnboarding.Prompt.Option.channels|{}channels[0]
                final fun <get-channels>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel/TopGuildChannel> // dev.kord.core.entity/GuildOnboarding.Prompt.Option.channels.<get-channels>|<get-channels>(){}[0]
            final val data // dev.kord.core.entity/GuildOnboarding.Prompt.Option.data|{}data[0]
                final fun <get-data>(): dev.kord.common.entity/DiscordOnboardingPromptOption // dev.kord.core.entity/GuildOnboarding.Prompt.Option.data.<get-data>|<get-data>(){}[0]
            final val description // dev.kord.core.entity/GuildOnboarding.Prompt.Option.description|{}description[0]
                final fun <get-description>(): kotlin/String? // dev.kord.core.entity/GuildOnboarding.Prompt.Option.description.<get-description>|<get-description>(){}[0]
            final val emoji // dev.kord.core.entity/GuildOnboarding.Prompt.Option.emoji|{}emoji[0]
                final fun <get-emoji>(): dev.kord.core.entity/Emoji? // dev.kord.core.entity/GuildOnboarding.Prompt.Option.emoji.<get-emoji>|<get-emoji>(){}[0]
            final val guildId // dev.kord.core.entity/GuildOnboarding.Prompt.Option.guildId|{}guildId[0]
                final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/GuildOnboarding.Prompt.Option.guildId.<get-guildId>|<get-guildId>(){}[0]
            final val id // dev.kord.core.entity/GuildOnboarding.Prompt.Option.id|{}id[0]
                final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/GuildOnboarding.Prompt.Option.id.<get-id>|<get-id>(){}[0]
            final val kord // dev.kord.core.entity/GuildOnboarding.Prompt.Option.kord|{}kord[0]
                final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/GuildOnboarding.Prompt.Option.kord.<get-kord>|<get-kord>(){}[0]
            final val roleBehaviors // dev.kord.core.entity/GuildOnboarding.Prompt.Option.roleBehaviors|{}roleBehaviors[0]
                final fun <get-roleBehaviors>(): kotlin.collections/List<dev.kord.core.behavior/RoleBehavior> // dev.kord.core.entity/GuildOnboarding.Prompt.Option.roleBehaviors.<get-roleBehaviors>|<get-roleBehaviors>(){}[0]
            final val roleIds // dev.kord.core.entity/GuildOnboarding.Prompt.Option.roleIds|{}roleIds[0]
                final fun <get-roleIds>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.core.entity/GuildOnboarding.Prompt.Option.roleIds.<get-roleIds>|<get-roleIds>(){}[0]
            final val roles // dev.kord.core.entity/GuildOnboarding.Prompt.Option.roles|{}roles[0]
                final fun <get-roles>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Role> // dev.kord.core.entity/GuildOnboarding.Prompt.Option.roles.<get-roles>|<get-roles>(){}[0]
            final val supplier // dev.kord.core.entity/GuildOnboarding.Prompt.Option.supplier|{}supplier[0]
                final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/GuildOnboarding.Prompt.Option.supplier.<get-supplier>|<get-supplier>(){}[0]
            final val title // dev.kord.core.entity/GuildOnboarding.Prompt.Option.title|{}title[0]
                final fun <get-title>(): kotlin/String // dev.kord.core.entity/GuildOnboarding.Prompt.Option.title.<get-title>|<get-title>(){}[0]

            final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/GuildOnboarding.Prompt.Option.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // dev.kord.core.entity/GuildOnboarding.Prompt.Option.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // dev.kord.core.entity/GuildOnboarding.Prompt.Option.toString|toString(){}[0]
            final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/GuildOnboarding.Prompt.Option // dev.kord.core.entity/GuildOnboarding.Prompt.Option.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
        }
    }
}

final class dev.kord.core.entity/GuildPreview : dev.kord.core.entity/KordEntity { // dev.kord.core.entity/GuildPreview|null[0]
    constructor <init>(dev.kord.core.cache.data/GuildPreviewData, dev.kord.core/Kord) // dev.kord.core.entity/GuildPreview.<init>|<init>(dev.kord.core.cache.data.GuildPreviewData;dev.kord.core.Kord){}[0]

    final val approximateMemberCount // dev.kord.core.entity/GuildPreview.approximateMemberCount|{}approximateMemberCount[0]
        final fun <get-approximateMemberCount>(): kotlin/Int // dev.kord.core.entity/GuildPreview.approximateMemberCount.<get-approximateMemberCount>|<get-approximateMemberCount>(){}[0]
    final val approximatePresenceCount // dev.kord.core.entity/GuildPreview.approximatePresenceCount|{}approximatePresenceCount[0]
        final fun <get-approximatePresenceCount>(): kotlin/Int // dev.kord.core.entity/GuildPreview.approximatePresenceCount.<get-approximatePresenceCount>|<get-approximatePresenceCount>(){}[0]
    final val data // dev.kord.core.entity/GuildPreview.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/GuildPreviewData // dev.kord.core.entity/GuildPreview.data.<get-data>|<get-data>(){}[0]
    final val description // dev.kord.core.entity/GuildPreview.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.core.entity/GuildPreview.description.<get-description>|<get-description>(){}[0]
    final val discoverySplash // dev.kord.core.entity/GuildPreview.discoverySplash|{}discoverySplash[0]
        final fun <get-discoverySplash>(): kotlin/String? // dev.kord.core.entity/GuildPreview.discoverySplash.<get-discoverySplash>|<get-discoverySplash>(){}[0]
    final val emojis // dev.kord.core.entity/GuildPreview.emojis|{}emojis[0]
        final fun <get-emojis>(): kotlin.collections/Set<dev.kord.core.entity/GuildEmoji> // dev.kord.core.entity/GuildPreview.emojis.<get-emojis>|<get-emojis>(){}[0]
    final val features // dev.kord.core.entity/GuildPreview.features|{}features[0]
        final fun <get-features>(): kotlin.collections/Set<dev.kord.common.entity/GuildFeature> // dev.kord.core.entity/GuildPreview.features.<get-features>|<get-features>(){}[0]
    final val icon // dev.kord.core.entity/GuildPreview.icon|{}icon[0]
        final fun <get-icon>(): kotlin/String? // dev.kord.core.entity/GuildPreview.icon.<get-icon>|<get-icon>(){}[0]
    final val id // dev.kord.core.entity/GuildPreview.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/GuildPreview.id.<get-id>|<get-id>(){}[0]
    final val kord // dev.kord.core.entity/GuildPreview.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/GuildPreview.kord.<get-kord>|<get-kord>(){}[0]
    final val name // dev.kord.core.entity/GuildPreview.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.entity/GuildPreview.name.<get-name>|<get-name>(){}[0]
    final val splash // dev.kord.core.entity/GuildPreview.splash|{}splash[0]
        final fun <get-splash>(): kotlin/String? // dev.kord.core.entity/GuildPreview.splash.<get-splash>|<get-splash>(){}[0]
    final val stickers // dev.kord.core.entity/GuildPreview.stickers|{}stickers[0]
        final fun <get-stickers>(): kotlin.collections/Set<dev.kord.core.entity/Sticker> // dev.kord.core.entity/GuildPreview.stickers.<get-stickers>|<get-stickers>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity/GuildPreview.toString|toString(){}[0]
}

final class dev.kord.core.entity/GuildScheduledEvent : dev.kord.core.behavior/GuildScheduledEventBehavior { // dev.kord.core.entity/GuildScheduledEvent|null[0]
    constructor <init>(dev.kord.core.cache.data/GuildScheduledEventData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/GuildScheduledEvent.<init>|<init>(dev.kord.core.cache.data.GuildScheduledEventData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val channelId // dev.kord.core.entity/GuildScheduledEvent.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/GuildScheduledEvent.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val creator // dev.kord.core.entity/GuildScheduledEvent.creator|{}creator[0]
        final fun <get-creator>(): dev.kord.core.entity/User? // dev.kord.core.entity/GuildScheduledEvent.creator.<get-creator>|<get-creator>(){}[0]
    final val creatorId // dev.kord.core.entity/GuildScheduledEvent.creatorId|{}creatorId[0]
        final fun <get-creatorId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/GuildScheduledEvent.creatorId.<get-creatorId>|<get-creatorId>(){}[0]
    final val data // dev.kord.core.entity/GuildScheduledEvent.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/GuildScheduledEventData // dev.kord.core.entity/GuildScheduledEvent.data.<get-data>|<get-data>(){}[0]
    final val description // dev.kord.core.entity/GuildScheduledEvent.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.core.entity/GuildScheduledEvent.description.<get-description>|<get-description>(){}[0]
    final val entityId // dev.kord.core.entity/GuildScheduledEvent.entityId|{}entityId[0]
        final fun <get-entityId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/GuildScheduledEvent.entityId.<get-entityId>|<get-entityId>(){}[0]
    final val entityMetadata // dev.kord.core.entity/GuildScheduledEvent.entityMetadata|{}entityMetadata[0]
        final fun <get-entityMetadata>(): dev.kord.common.entity/GuildScheduledEventEntityMetadata? // dev.kord.core.entity/GuildScheduledEvent.entityMetadata.<get-entityMetadata>|<get-entityMetadata>(){}[0]
    final val entityType // dev.kord.core.entity/GuildScheduledEvent.entityType|{}entityType[0]
        final fun <get-entityType>(): dev.kord.common.entity/ScheduledEntityType // dev.kord.core.entity/GuildScheduledEvent.entityType.<get-entityType>|<get-entityType>(){}[0]
    final val guildId // dev.kord.core.entity/GuildScheduledEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/GuildScheduledEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.core.entity/GuildScheduledEvent.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/GuildScheduledEvent.id.<get-id>|<get-id>(){}[0]
    final val image // dev.kord.core.entity/GuildScheduledEvent.image|{}image[0]
        final fun <get-image>(): dev.kord.core.entity/Asset? // dev.kord.core.entity/GuildScheduledEvent.image.<get-image>|<get-image>(){}[0]
    final val imageHash // dev.kord.core.entity/GuildScheduledEvent.imageHash|{}imageHash[0]
        final fun <get-imageHash>(): kotlin/String? // dev.kord.core.entity/GuildScheduledEvent.imageHash.<get-imageHash>|<get-imageHash>(){}[0]
    final val kord // dev.kord.core.entity/GuildScheduledEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/GuildScheduledEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val name // dev.kord.core.entity/GuildScheduledEvent.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.entity/GuildScheduledEvent.name.<get-name>|<get-name>(){}[0]
    final val privacyLevel // dev.kord.core.entity/GuildScheduledEvent.privacyLevel|{}privacyLevel[0]
        final fun <get-privacyLevel>(): dev.kord.common.entity/GuildScheduledEventPrivacyLevel // dev.kord.core.entity/GuildScheduledEvent.privacyLevel.<get-privacyLevel>|<get-privacyLevel>(){}[0]
    final val scheduledEndTime // dev.kord.core.entity/GuildScheduledEvent.scheduledEndTime|{}scheduledEndTime[0]
        final fun <get-scheduledEndTime>(): kotlinx.datetime/Instant? // dev.kord.core.entity/GuildScheduledEvent.scheduledEndTime.<get-scheduledEndTime>|<get-scheduledEndTime>(){}[0]
    final val scheduledStartTime // dev.kord.core.entity/GuildScheduledEvent.scheduledStartTime|{}scheduledStartTime[0]
        final fun <get-scheduledStartTime>(): kotlinx.datetime/Instant // dev.kord.core.entity/GuildScheduledEvent.scheduledStartTime.<get-scheduledStartTime>|<get-scheduledStartTime>(){}[0]
    final val status // dev.kord.core.entity/GuildScheduledEvent.status|{}status[0]
        final fun <get-status>(): dev.kord.common.entity/GuildScheduledEventStatus // dev.kord.core.entity/GuildScheduledEvent.status.<get-status>|<get-status>(){}[0]
    final val supplier // dev.kord.core.entity/GuildScheduledEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/GuildScheduledEvent.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val userCount // dev.kord.core.entity/GuildScheduledEvent.userCount|{}userCount[0]
        final fun <get-userCount>(): kotlin/Int? // dev.kord.core.entity/GuildScheduledEvent.userCount.<get-userCount>|<get-userCount>(){}[0]

    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/Strategizable // dev.kord.core.entity/GuildScheduledEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun asGuildScheduledEvent(): dev.kord.core.entity/GuildScheduledEvent // dev.kord.core.entity/GuildScheduledEvent.asGuildScheduledEvent|asGuildScheduledEvent(){}[0]
    final suspend fun asGuildScheduledEventOrNull(): dev.kord.core.entity/GuildScheduledEvent // dev.kord.core.entity/GuildScheduledEvent.asGuildScheduledEventOrNull|asGuildScheduledEventOrNull(){}[0]
    final suspend fun getChannelOrNull(): dev.kord.core.entity.channel/TopGuildChannel? // dev.kord.core.entity/GuildScheduledEvent.getChannelOrNull|getChannelOrNull(){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.entity/GuildScheduledEvent.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.entity/GuildScheduledEvent.getGuildOrNull|getGuildOrNull(){}[0]
    final suspend inline fun <#A1: reified dev.kord.core.entity.channel/TopGuildChannel> getChannelOfOrNull(): #A1? // dev.kord.core.entity/GuildScheduledEvent.getChannelOfOrNull|getChannelOfOrNull(){0ยง<dev.kord.core.entity.channel.TopGuildChannel>}[0]
}

final class dev.kord.core.entity/GuildSticker : dev.kord.core.behavior/StickerBehavior, dev.kord.core.entity/Sticker { // dev.kord.core.entity/GuildSticker|null[0]
    constructor <init>(dev.kord.core.cache.data/StickerData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/GuildSticker.<init>|<init>(dev.kord.core.cache.data.StickerData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val guildId // dev.kord.core.entity/GuildSticker.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/GuildSticker.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val supplier // dev.kord.core.entity/GuildSticker.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/GuildSticker.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/Strategizable // dev.kord.core.entity/GuildSticker.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun asSticker(): dev.kord.core.entity/Sticker // dev.kord.core.entity/GuildSticker.asSticker|asSticker(){}[0]
    final suspend fun asStickerOrNull(): dev.kord.core.entity/Sticker // dev.kord.core.entity/GuildSticker.asStickerOrNull|asStickerOrNull(){}[0]
}

final class dev.kord.core.entity/GuildWidget : dev.kord.core.entity/Strategizable, dev.kord.core/KordObject { // dev.kord.core.entity/GuildWidget|null[0]
    constructor <init>(dev.kord.core.cache.data/GuildWidgetData, dev.kord.common.entity/Snowflake, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/GuildWidget.<init>|<init>(dev.kord.core.cache.data.GuildWidgetData;dev.kord.common.entity.Snowflake;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val channel // dev.kord.core.entity/GuildWidget.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.behavior.channel/ChannelBehavior? // dev.kord.core.entity/GuildWidget.channel.<get-channel>|<get-channel>(){}[0]
    final val channelId // dev.kord.core.entity/GuildWidget.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/GuildWidget.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val data // dev.kord.core.entity/GuildWidget.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/GuildWidgetData // dev.kord.core.entity/GuildWidget.data.<get-data>|<get-data>(){}[0]
    final val guild // dev.kord.core.entity/GuildWidget.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.entity/GuildWidget.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.entity/GuildWidget.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/GuildWidget.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val isEnabled // dev.kord.core.entity/GuildWidget.isEnabled|{}isEnabled[0]
        final fun <get-isEnabled>(): kotlin/Boolean // dev.kord.core.entity/GuildWidget.isEnabled.<get-isEnabled>|<get-isEnabled>(){}[0]
    final val kord // dev.kord.core.entity/GuildWidget.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/GuildWidget.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity/GuildWidget.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/GuildWidget.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/GuildWidget // dev.kord.core.entity/GuildWidget.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getChannelOrNull(): dev.kord.core.entity.channel/TopGuildChannel? // dev.kord.core.entity/GuildWidget.getChannelOrNull|getChannelOrNull(){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.entity/GuildWidget.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.entity/GuildWidget.getGuildOrNull|getGuildOrNull(){}[0]
    final suspend inline fun <#A1: reified dev.kord.core.entity.channel/Channel> getChannelOfOrNull(): #A1? // dev.kord.core.entity/GuildWidget.getChannelOfOrNull|getChannelOfOrNull(){0ยง<dev.kord.core.entity.channel.Channel>}[0]
    final suspend inline fun edit(kotlin/Function1<dev.kord.rest.builder.guild/GuildWidgetModifyBuilder, kotlin/Unit>): dev.kord.core.entity/GuildWidget // dev.kord.core.entity/GuildWidget.edit|edit(kotlin.Function1<dev.kord.rest.builder.guild.GuildWidgetModifyBuilder,kotlin.Unit>){}[0]
}

final class dev.kord.core.entity/Integration : dev.kord.core.entity/KordEntity, dev.kord.core.entity/Strategizable { // dev.kord.core.entity/Integration|null[0]
    constructor <init>(dev.kord.core.cache.data/IntegrationData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/Integration.<init>|<init>(dev.kord.core.cache.data.IntegrationData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity/Integration.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/IntegrationData // dev.kord.core.entity/Integration.data.<get-data>|<get-data>(){}[0]
    final val enablesEmoticons // dev.kord.core.entity/Integration.enablesEmoticons|{}enablesEmoticons[0]
        final fun <get-enablesEmoticons>(): kotlin/Boolean // dev.kord.core.entity/Integration.enablesEmoticons.<get-enablesEmoticons>|<get-enablesEmoticons>(){}[0]
    final val expireBehavior // dev.kord.core.entity/Integration.expireBehavior|{}expireBehavior[0]
        final fun <get-expireBehavior>(): dev.kord.common.entity/IntegrationExpireBehavior? // dev.kord.core.entity/Integration.expireBehavior.<get-expireBehavior>|<get-expireBehavior>(){}[0]
    final val expireGracePeriod // dev.kord.core.entity/Integration.expireGracePeriod|{}expireGracePeriod[0]
        final fun <get-expireGracePeriod>(): kotlin.time/Duration? // dev.kord.core.entity/Integration.expireGracePeriod.<get-expireGracePeriod>|<get-expireGracePeriod>(){}[0]
    final val guild // dev.kord.core.entity/Integration.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.entity/Integration.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.entity/Integration.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/Integration.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.core.entity/Integration.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/Integration.id.<get-id>|<get-id>(){}[0]
    final val isEnabled // dev.kord.core.entity/Integration.isEnabled|{}isEnabled[0]
        final fun <get-isEnabled>(): kotlin/Boolean // dev.kord.core.entity/Integration.isEnabled.<get-isEnabled>|<get-isEnabled>(){}[0]
    final val isSyncing // dev.kord.core.entity/Integration.isSyncing|{}isSyncing[0]
        final fun <get-isSyncing>(): kotlin/Boolean? // dev.kord.core.entity/Integration.isSyncing.<get-isSyncing>|<get-isSyncing>(){}[0]
    final val kord // dev.kord.core.entity/Integration.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/Integration.kord.<get-kord>|<get-kord>(){}[0]
    final val name // dev.kord.core.entity/Integration.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.entity/Integration.name.<get-name>|<get-name>(){}[0]
    final val role // dev.kord.core.entity/Integration.role|{}role[0]
        final fun <get-role>(): dev.kord.core.behavior/RoleBehavior // dev.kord.core.entity/Integration.role.<get-role>|<get-role>(){}[0]
    final val roleId // dev.kord.core.entity/Integration.roleId|{}roleId[0]
        final fun <get-roleId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/Integration.roleId.<get-roleId>|<get-roleId>(){}[0]
    final val supplier // dev.kord.core.entity/Integration.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/Integration.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val syncedAt // dev.kord.core.entity/Integration.syncedAt|{}syncedAt[0]
        final fun <get-syncedAt>(): kotlinx.datetime/Instant? // dev.kord.core.entity/Integration.syncedAt.<get-syncedAt>|<get-syncedAt>(){}[0]
    final val type // dev.kord.core.entity/Integration.type|{}type[0]
        final fun <get-type>(): kotlin/String // dev.kord.core.entity/Integration.type.<get-type>|<get-type>(){}[0]
    final val user // dev.kord.core.entity/Integration.user|{}user[0]
        final fun <get-user>(): dev.kord.core.behavior/UserBehavior // dev.kord.core.entity/Integration.user.<get-user>|<get-user>(){}[0]
    final val userId // dev.kord.core.entity/Integration.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/Integration.userId.<get-userId>|<get-userId>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/Integration.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity/Integration.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity/Integration.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/Integration // dev.kord.core.entity/Integration.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun delete(kotlin/String? = ...) // dev.kord.core.entity/Integration.delete|delete(kotlin.String?){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.entity/Integration.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.entity/Integration.getGuildOrNull|getGuildOrNull(){}[0]
    final suspend fun getRole(): dev.kord.core.entity/Role // dev.kord.core.entity/Integration.getRole|getRole(){}[0]
    final suspend fun getRoleOrNull(): dev.kord.core.entity/Role? // dev.kord.core.entity/Integration.getRoleOrNull|getRoleOrNull(){}[0]
    final suspend fun sync() // dev.kord.core.entity/Integration.sync|sync(){}[0]
}

final class dev.kord.core.entity/InviteWithMetadata : dev.kord.core.entity/Invite { // dev.kord.core.entity/InviteWithMetadata|null[0]
    constructor <init>(dev.kord.core.cache.data/InviteWithMetadataData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/InviteWithMetadata.<init>|<init>(dev.kord.core.cache.data.InviteWithMetadataData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val createdAt // dev.kord.core.entity/InviteWithMetadata.createdAt|{}createdAt[0]
        final fun <get-createdAt>(): kotlinx.datetime/Instant // dev.kord.core.entity/InviteWithMetadata.createdAt.<get-createdAt>|<get-createdAt>(){}[0]
    final val data // dev.kord.core.entity/InviteWithMetadata.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/InviteWithMetadataData // dev.kord.core.entity/InviteWithMetadata.data.<get-data>|<get-data>(){}[0]
    final val maxAge // dev.kord.core.entity/InviteWithMetadata.maxAge|{}maxAge[0]
        final fun <get-maxAge>(): kotlin.time/Duration // dev.kord.core.entity/InviteWithMetadata.maxAge.<get-maxAge>|<get-maxAge>(){}[0]
    final val maxUses // dev.kord.core.entity/InviteWithMetadata.maxUses|{}maxUses[0]
        final fun <get-maxUses>(): kotlin/Int // dev.kord.core.entity/InviteWithMetadata.maxUses.<get-maxUses>|<get-maxUses>(){}[0]
    final val temporary // dev.kord.core.entity/InviteWithMetadata.temporary|{}temporary[0]
        final fun <get-temporary>(): kotlin/Boolean // dev.kord.core.entity/InviteWithMetadata.temporary.<get-temporary>|<get-temporary>(){}[0]
    final val uses // dev.kord.core.entity/InviteWithMetadata.uses|{}uses[0]
        final fun <get-uses>(): kotlin/Int // dev.kord.core.entity/InviteWithMetadata.uses.<get-uses>|<get-uses>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity/InviteWithMetadata.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/InviteWithMetadata // dev.kord.core.entity/InviteWithMetadata.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.entity/Member : dev.kord.core.behavior/MemberBehavior, dev.kord.core.entity/User { // dev.kord.core.entity/Member|null[0]
    constructor <init>(dev.kord.core.cache.data/MemberData, dev.kord.core.cache.data/UserData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/Member.<init>|<init>(dev.kord.core.cache.data.MemberData;dev.kord.core.cache.data.UserData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val communicationDisabledUntil // dev.kord.core.entity/Member.communicationDisabledUntil|{}communicationDisabledUntil[0]
        final fun <get-communicationDisabledUntil>(): kotlinx.datetime/Instant? // dev.kord.core.entity/Member.communicationDisabledUntil.<get-communicationDisabledUntil>|<get-communicationDisabledUntil>(){}[0]
    final val effectiveName // dev.kord.core.entity/Member.effectiveName|{}effectiveName[0]
        final fun <get-effectiveName>(): kotlin/String // dev.kord.core.entity/Member.effectiveName.<get-effectiveName>|<get-effectiveName>(){}[0]
    final val flags // dev.kord.core.entity/Member.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity/GuildMemberFlags // dev.kord.core.entity/Member.flags.<get-flags>|<get-flags>(){}[0]
    final val guildId // dev.kord.core.entity/Member.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/Member.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val isPending // dev.kord.core.entity/Member.isPending|{}isPending[0]
        final fun <get-isPending>(): kotlin/Boolean // dev.kord.core.entity/Member.isPending.<get-isPending>|<get-isPending>(){}[0]
    final val joinedAt // dev.kord.core.entity/Member.joinedAt|{}joinedAt[0]
        final fun <get-joinedAt>(): kotlinx.datetime/Instant // dev.kord.core.entity/Member.joinedAt.<get-joinedAt>|<get-joinedAt>(){}[0]
    final val memberAvatar // dev.kord.core.entity/Member.memberAvatar|{}memberAvatar[0]
        final fun <get-memberAvatar>(): dev.kord.core.entity/Asset? // dev.kord.core.entity/Member.memberAvatar.<get-memberAvatar>|<get-memberAvatar>(){}[0]
    final val memberAvatarHash // dev.kord.core.entity/Member.memberAvatarHash|{}memberAvatarHash[0]
        final fun <get-memberAvatarHash>(): kotlin/String? // dev.kord.core.entity/Member.memberAvatarHash.<get-memberAvatarHash>|<get-memberAvatarHash>(){}[0]
    final val memberData // dev.kord.core.entity/Member.memberData|{}memberData[0]
        final fun <get-memberData>(): dev.kord.core.cache.data/MemberData // dev.kord.core.entity/Member.memberData.<get-memberData>|<get-memberData>(){}[0]
    final val nickname // dev.kord.core.entity/Member.nickname|{}nickname[0]
        final fun <get-nickname>(): kotlin/String? // dev.kord.core.entity/Member.nickname.<get-nickname>|<get-nickname>(){}[0]
    final val permissions // dev.kord.core.entity/Member.permissions|{}permissions[0]
        final fun <get-permissions>(): dev.kord.common.entity/Permissions? // dev.kord.core.entity/Member.permissions.<get-permissions>|<get-permissions>(){}[0]
    final val premiumSince // dev.kord.core.entity/Member.premiumSince|{}premiumSince[0]
        final fun <get-premiumSince>(): kotlinx.datetime/Instant? // dev.kord.core.entity/Member.premiumSince.<get-premiumSince>|<get-premiumSince>(){}[0]
    final val roleBehaviors // dev.kord.core.entity/Member.roleBehaviors|{}roleBehaviors[0]
        final fun <get-roleBehaviors>(): kotlin.collections/Set<dev.kord.core.behavior/RoleBehavior> // dev.kord.core.entity/Member.roleBehaviors.<get-roleBehaviors>|<get-roleBehaviors>(){}[0]
    final val roleIds // dev.kord.core.entity/Member.roleIds|{}roleIds[0]
        final fun <get-roleIds>(): kotlin.collections/Set<dev.kord.common.entity/Snowflake> // dev.kord.core.entity/Member.roleIds.<get-roleIds>|<get-roleIds>(){}[0]
    final val roles // dev.kord.core.entity/Member.roles|{}roles[0]
        final fun <get-roles>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Role> // dev.kord.core.entity/Member.roles.<get-roles>|<get-roles>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/Member.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity/Member.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity/Member.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/Member // dev.kord.core.entity/Member.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun asMember(): dev.kord.core.entity/Member // dev.kord.core.entity/Member.asMember|asMember(){}[0]
    final suspend fun asMember(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Member // dev.kord.core.entity/Member.asMember|asMember(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun asMemberOrNull(): dev.kord.core.entity/Member // dev.kord.core.entity/Member.asMemberOrNull|asMemberOrNull(){}[0]
    final suspend fun asMemberOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Member // dev.kord.core.entity/Member.asMemberOrNull|asMemberOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun asUser(): dev.kord.core.entity/User // dev.kord.core.entity/Member.asUser|asUser(){}[0]
    final suspend fun asUserOrNull(): dev.kord.core.entity/User // dev.kord.core.entity/Member.asUserOrNull|asUserOrNull(){}[0]
    final suspend fun getPermissions(): dev.kord.common.entity/Permissions // dev.kord.core.entity/Member.getPermissions|getPermissions(){}[0]
    final suspend fun isOwner(): kotlin/Boolean // dev.kord.core.entity/Member.isOwner|isOwner(){}[0]
}

final class dev.kord.core.entity/Message : dev.kord.core.behavior/MessageBehavior { // dev.kord.core.entity/Message|null[0]
    constructor <init>(dev.kord.core.cache.data/MessageData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/Message.<init>|<init>(dev.kord.core.cache.data.MessageData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val actionRows // dev.kord.core.entity/Message.actionRows|{}actionRows[0]
        final fun <get-actionRows>(): kotlin.collections/List<dev.kord.core.entity.component/ActionRowComponent> // dev.kord.core.entity/Message.actionRows.<get-actionRows>|<get-actionRows>(){}[0]
    final val applicationId // dev.kord.core.entity/Message.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/Message.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val attachments // dev.kord.core.entity/Message.attachments|{}attachments[0]
        final fun <get-attachments>(): kotlin.collections/Set<dev.kord.core.entity/Attachment> // dev.kord.core.entity/Message.attachments.<get-attachments>|<get-attachments>(){}[0]
    final val author // dev.kord.core.entity/Message.author|{}author[0]
        final fun <get-author>(): dev.kord.core.entity/User? // dev.kord.core.entity/Message.author.<get-author>|<get-author>(){}[0]
    final val channelId // dev.kord.core.entity/Message.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/Message.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val content // dev.kord.core.entity/Message.content|{}content[0]
        final fun <get-content>(): kotlin/String // dev.kord.core.entity/Message.content.<get-content>|<get-content>(){}[0]
    final val data // dev.kord.core.entity/Message.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/MessageData // dev.kord.core.entity/Message.data.<get-data>|<get-data>(){}[0]
    final val editedTimestamp // dev.kord.core.entity/Message.editedTimestamp|{}editedTimestamp[0]
        final fun <get-editedTimestamp>(): kotlinx.datetime/Instant? // dev.kord.core.entity/Message.editedTimestamp.<get-editedTimestamp>|<get-editedTimestamp>(){}[0]
    final val embeds // dev.kord.core.entity/Message.embeds|{}embeds[0]
        final fun <get-embeds>(): kotlin.collections/List<dev.kord.core.entity/Embed> // dev.kord.core.entity/Message.embeds.<get-embeds>|<get-embeds>(){}[0]
    final val flags // dev.kord.core.entity/Message.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity/MessageFlags? // dev.kord.core.entity/Message.flags.<get-flags>|<get-flags>(){}[0]
    final val id // dev.kord.core.entity/Message.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/Message.id.<get-id>|<get-id>(){}[0]
    final val interaction // dev.kord.core.entity/Message.interaction|{}interaction[0]
        final fun <get-interaction>(): dev.kord.core.entity/Message.Interaction? // dev.kord.core.entity/Message.interaction.<get-interaction>|<get-interaction>(){}[0]
    final val isPinned // dev.kord.core.entity/Message.isPinned|{}isPinned[0]
        final fun <get-isPinned>(): kotlin/Boolean // dev.kord.core.entity/Message.isPinned.<get-isPinned>|<get-isPinned>(){}[0]
    final val kord // dev.kord.core.entity/Message.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/Message.kord.<get-kord>|<get-kord>(){}[0]
    final val mentionedChannelBehaviors // dev.kord.core.entity/Message.mentionedChannelBehaviors|{}mentionedChannelBehaviors[0]
        final fun <get-mentionedChannelBehaviors>(): kotlin.collections/Set<dev.kord.core.behavior.channel/ChannelBehavior> // dev.kord.core.entity/Message.mentionedChannelBehaviors.<get-mentionedChannelBehaviors>|<get-mentionedChannelBehaviors>(){}[0]
    final val mentionedChannelIds // dev.kord.core.entity/Message.mentionedChannelIds|{}mentionedChannelIds[0]
        final fun <get-mentionedChannelIds>(): kotlin.collections/Set<dev.kord.common.entity/Snowflake> // dev.kord.core.entity/Message.mentionedChannelIds.<get-mentionedChannelIds>|<get-mentionedChannelIds>(){}[0]
    final val mentionedChannels // dev.kord.core.entity/Message.mentionedChannels|{}mentionedChannels[0]
        final fun <get-mentionedChannels>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel/Channel> // dev.kord.core.entity/Message.mentionedChannels.<get-mentionedChannels>|<get-mentionedChannels>(){}[0]
    final val mentionedRoleIds // dev.kord.core.entity/Message.mentionedRoleIds|{}mentionedRoleIds[0]
        final fun <get-mentionedRoleIds>(): kotlin.collections/Set<dev.kord.common.entity/Snowflake> // dev.kord.core.entity/Message.mentionedRoleIds.<get-mentionedRoleIds>|<get-mentionedRoleIds>(){}[0]
    final val mentionedRoles // dev.kord.core.entity/Message.mentionedRoles|{}mentionedRoles[0]
        final fun <get-mentionedRoles>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Role> // dev.kord.core.entity/Message.mentionedRoles.<get-mentionedRoles>|<get-mentionedRoles>(){}[0]
    final val mentionedUserBehaviors // dev.kord.core.entity/Message.mentionedUserBehaviors|{}mentionedUserBehaviors[0]
        final fun <get-mentionedUserBehaviors>(): kotlin.collections/Set<dev.kord.core.behavior/UserBehavior> // dev.kord.core.entity/Message.mentionedUserBehaviors.<get-mentionedUserBehaviors>|<get-mentionedUserBehaviors>(){}[0]
    final val mentionedUserIds // dev.kord.core.entity/Message.mentionedUserIds|{}mentionedUserIds[0]
        final fun <get-mentionedUserIds>(): kotlin.collections/Set<dev.kord.common.entity/Snowflake> // dev.kord.core.entity/Message.mentionedUserIds.<get-mentionedUserIds>|<get-mentionedUserIds>(){}[0]
    final val mentionedUsers // dev.kord.core.entity/Message.mentionedUsers|{}mentionedUsers[0]
        final fun <get-mentionedUsers>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/User> // dev.kord.core.entity/Message.mentionedUsers.<get-mentionedUsers>|<get-mentionedUsers>(){}[0]
    final val mentionsEveryone // dev.kord.core.entity/Message.mentionsEveryone|{}mentionsEveryone[0]
        final fun <get-mentionsEveryone>(): kotlin/Boolean // dev.kord.core.entity/Message.mentionsEveryone.<get-mentionsEveryone>|<get-mentionsEveryone>(){}[0]
    final val messageReference // dev.kord.core.entity/Message.messageReference|{}messageReference[0]
        final fun <get-messageReference>(): dev.kord.core.entity/MessageReference? // dev.kord.core.entity/Message.messageReference.<get-messageReference>|<get-messageReference>(){}[0]
    final val position // dev.kord.core.entity/Message.position|{}position[0]
        final fun <get-position>(): kotlin/Int? // dev.kord.core.entity/Message.position.<get-position>|<get-position>(){}[0]
    final val reactions // dev.kord.core.entity/Message.reactions|{}reactions[0]
        final fun <get-reactions>(): kotlin.collections/Set<dev.kord.core.entity/Reaction> // dev.kord.core.entity/Message.reactions.<get-reactions>|<get-reactions>(){}[0]
    final val referencedMessage // dev.kord.core.entity/Message.referencedMessage|{}referencedMessage[0]
        final fun <get-referencedMessage>(): dev.kord.core.entity/Message? // dev.kord.core.entity/Message.referencedMessage.<get-referencedMessage>|<get-referencedMessage>(){}[0]
    final val roleSubscriptionData // dev.kord.core.entity/Message.roleSubscriptionData|{}roleSubscriptionData[0]
        final fun <get-roleSubscriptionData>(): dev.kord.common.entity/RoleSubscription? // dev.kord.core.entity/Message.roleSubscriptionData.<get-roleSubscriptionData>|<get-roleSubscriptionData>(){}[0]
    final val stickers // dev.kord.core.entity/Message.stickers|{}stickers[0]
        final fun <get-stickers>(): kotlin.collections/List<dev.kord.core.entity/StickerItem> // dev.kord.core.entity/Message.stickers.<get-stickers>|<get-stickers>(){}[0]
    final val supplier // dev.kord.core.entity/Message.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/Message.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val timestamp // dev.kord.core.entity/Message.timestamp|{}timestamp[0]
        final fun <get-timestamp>(): kotlinx.datetime/Instant // dev.kord.core.entity/Message.timestamp.<get-timestamp>|<get-timestamp>(){}[0]
    final val tts // dev.kord.core.entity/Message.tts|{}tts[0]
        final fun <get-tts>(): kotlin/Boolean // dev.kord.core.entity/Message.tts.<get-tts>|<get-tts>(){}[0]
    final val type // dev.kord.core.entity/Message.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/MessageType // dev.kord.core.entity/Message.type.<get-type>|<get-type>(){}[0]
    final val webhookId // dev.kord.core.entity/Message.webhookId|{}webhookId[0]
        final fun <get-webhookId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/Message.webhookId.<get-webhookId>|<get-webhookId>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/Message.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity/Message.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity/Message.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/Message // dev.kord.core.entity/Message.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun asMessage(): dev.kord.core.entity/Message // dev.kord.core.entity/Message.asMessage|asMessage(){}[0]
    final suspend fun asMessageOrNull(): dev.kord.core.entity/Message // dev.kord.core.entity/Message.asMessageOrNull|asMessageOrNull(){}[0]
    final suspend fun getAuthorAsMember(): dev.kord.core.entity/Member // dev.kord.core.entity/Message.getAuthorAsMember|getAuthorAsMember(){}[0]
    final suspend fun getAuthorAsMemberOrNull(): dev.kord.core.entity/Member? // dev.kord.core.entity/Message.getAuthorAsMemberOrNull|getAuthorAsMemberOrNull(){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.entity/Message.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.entity/Message.getGuildOrNull|getGuildOrNull(){}[0]

    final class Interaction : dev.kord.core.entity/KordEntity, dev.kord.core.entity/Strategizable { // dev.kord.core.entity/Message.Interaction|null[0]
        constructor <init>(dev.kord.core.cache.data/MessageInteractionData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/Message.Interaction.<init>|<init>(dev.kord.core.cache.data.MessageInteractionData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

        final val data // dev.kord.core.entity/Message.Interaction.data|{}data[0]
            final fun <get-data>(): dev.kord.core.cache.data/MessageInteractionData // dev.kord.core.entity/Message.Interaction.data.<get-data>|<get-data>(){}[0]
        final val id // dev.kord.core.entity/Message.Interaction.id|{}id[0]
            final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/Message.Interaction.id.<get-id>|<get-id>(){}[0]
        final val kord // dev.kord.core.entity/Message.Interaction.kord|{}kord[0]
            final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/Message.Interaction.kord.<get-kord>|<get-kord>(){}[0]
        final val name // dev.kord.core.entity/Message.Interaction.name|{}name[0]
            final fun <get-name>(): kotlin/String // dev.kord.core.entity/Message.Interaction.name.<get-name>|<get-name>(){}[0]
        final val supplier // dev.kord.core.entity/Message.Interaction.supplier|{}supplier[0]
            final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/Message.Interaction.supplier.<get-supplier>|<get-supplier>(){}[0]
        final val type // dev.kord.core.entity/Message.Interaction.type|{}type[0]
            final fun <get-type>(): dev.kord.common.entity/InteractionType // dev.kord.core.entity/Message.Interaction.type.<get-type>|<get-type>(){}[0]
        final val user // dev.kord.core.entity/Message.Interaction.user|{}user[0]
            final fun <get-user>(): dev.kord.core.behavior/UserBehavior // dev.kord.core.entity/Message.Interaction.user.<get-user>|<get-user>(){}[0]

        final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/Message.Interaction // dev.kord.core.entity/Message.Interaction.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
        final suspend fun getUser(): dev.kord.core.entity/User // dev.kord.core.entity/Message.Interaction.getUser|getUser(){}[0]
        final suspend fun getUserOrNull(): dev.kord.core.entity/User? // dev.kord.core.entity/Message.Interaction.getUserOrNull|getUserOrNull(){}[0]
    }
}

final class dev.kord.core.entity/MessageReference : dev.kord.core/KordObject { // dev.kord.core.entity/MessageReference|null[0]
    constructor <init>(dev.kord.core.cache.data/MessageReferenceData, dev.kord.core/Kord) // dev.kord.core.entity/MessageReference.<init>|<init>(dev.kord.core.cache.data.MessageReferenceData;dev.kord.core.Kord){}[0]

    final val channel // dev.kord.core.entity/MessageReference.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.behavior.channel/MessageChannelBehavior // dev.kord.core.entity/MessageReference.channel.<get-channel>|<get-channel>(){}[0]
    final val data // dev.kord.core.entity/MessageReference.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/MessageReferenceData // dev.kord.core.entity/MessageReference.data.<get-data>|<get-data>(){}[0]
    final val guild // dev.kord.core.entity/MessageReference.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior? // dev.kord.core.entity/MessageReference.guild.<get-guild>|<get-guild>(){}[0]
    final val kord // dev.kord.core.entity/MessageReference.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/MessageReference.kord.<get-kord>|<get-kord>(){}[0]
    final val message // dev.kord.core.entity/MessageReference.message|{}message[0]
        final fun <get-message>(): dev.kord.core.behavior/MessageBehavior? // dev.kord.core.entity/MessageReference.message.<get-message>|<get-message>(){}[0]
}

final class dev.kord.core.entity/PartialApplication : dev.kord.core.entity/BaseApplication { // dev.kord.core.entity/PartialApplication|null[0]
    constructor <init>(dev.kord.core.cache.data/PartialApplicationData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/PartialApplication.<init>|<init>(dev.kord.core.cache.data.PartialApplicationData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity/PartialApplication.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/PartialApplicationData // dev.kord.core.entity/PartialApplication.data.<get-data>|<get-data>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity/PartialApplication.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/PartialApplication // dev.kord.core.entity/PartialApplication.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.entity/PartialGuild : dev.kord.core.behavior/GuildBehavior { // dev.kord.core.entity/PartialGuild|null[0]
    constructor <init>(dev.kord.core.cache.data/PartialGuildData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/PartialGuild.<init>|<init>(dev.kord.core.cache.data.PartialGuildData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val approximateMemberCount // dev.kord.core.entity/PartialGuild.approximateMemberCount|{}approximateMemberCount[0]
        final fun <get-approximateMemberCount>(): kotlin/Int? // dev.kord.core.entity/PartialGuild.approximateMemberCount.<get-approximateMemberCount>|<get-approximateMemberCount>(){}[0]
    final val approximatePresenceCount // dev.kord.core.entity/PartialGuild.approximatePresenceCount|{}approximatePresenceCount[0]
        final fun <get-approximatePresenceCount>(): kotlin/Int? // dev.kord.core.entity/PartialGuild.approximatePresenceCount.<get-approximatePresenceCount>|<get-approximatePresenceCount>(){}[0]
    final val banner // dev.kord.core.entity/PartialGuild.banner|{}banner[0]
        final fun <get-banner>(): dev.kord.core.entity/Asset? // dev.kord.core.entity/PartialGuild.banner.<get-banner>|<get-banner>(){}[0]
    final val bannerHash // dev.kord.core.entity/PartialGuild.bannerHash|{}bannerHash[0]
        final fun <get-bannerHash>(): kotlin/String? // dev.kord.core.entity/PartialGuild.bannerHash.<get-bannerHash>|<get-bannerHash>(){}[0]
    final val data // dev.kord.core.entity/PartialGuild.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/PartialGuildData // dev.kord.core.entity/PartialGuild.data.<get-data>|<get-data>(){}[0]
    final val description // dev.kord.core.entity/PartialGuild.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.core.entity/PartialGuild.description.<get-description>|<get-description>(){}[0]
    final val icon // dev.kord.core.entity/PartialGuild.icon|{}icon[0]
        final fun <get-icon>(): dev.kord.core.entity/Asset? // dev.kord.core.entity/PartialGuild.icon.<get-icon>|<get-icon>(){}[0]
    final val iconHash // dev.kord.core.entity/PartialGuild.iconHash|{}iconHash[0]
        final fun <get-iconHash>(): kotlin/String? // dev.kord.core.entity/PartialGuild.iconHash.<get-iconHash>|<get-iconHash>(){}[0]
    final val id // dev.kord.core.entity/PartialGuild.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/PartialGuild.id.<get-id>|<get-id>(){}[0]
    final val kord // dev.kord.core.entity/PartialGuild.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/PartialGuild.kord.<get-kord>|<get-kord>(){}[0]
    final val name // dev.kord.core.entity/PartialGuild.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.entity/PartialGuild.name.<get-name>|<get-name>(){}[0]
    final val nsfw // dev.kord.core.entity/PartialGuild.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): dev.kord.common.entity/NsfwLevel? // dev.kord.core.entity/PartialGuild.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
    final val owner // dev.kord.core.entity/PartialGuild.owner|{}owner[0]
        final fun <get-owner>(): kotlin/Boolean? // dev.kord.core.entity/PartialGuild.owner.<get-owner>|<get-owner>(){}[0]
    final val permissions // dev.kord.core.entity/PartialGuild.permissions|{}permissions[0]
        final fun <get-permissions>(): dev.kord.common.entity/Permissions? // dev.kord.core.entity/PartialGuild.permissions.<get-permissions>|<get-permissions>(){}[0]
    final val splash // dev.kord.core.entity/PartialGuild.splash|{}splash[0]
        final fun <get-splash>(): dev.kord.core.entity/Asset? // dev.kord.core.entity/PartialGuild.splash.<get-splash>|<get-splash>(){}[0]
    final val splashHash // dev.kord.core.entity/PartialGuild.splashHash|{}splashHash[0]
        final fun <get-splashHash>(): kotlin/String? // dev.kord.core.entity/PartialGuild.splashHash.<get-splashHash>|<get-splashHash>(){}[0]
    final val supplier // dev.kord.core.entity/PartialGuild.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/PartialGuild.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val vanityCode // dev.kord.core.entity/PartialGuild.vanityCode|{}vanityCode[0]
        final fun <get-vanityCode>(): kotlin/String? // dev.kord.core.entity/PartialGuild.vanityCode.<get-vanityCode>|<get-vanityCode>(){}[0]
    final val vanityUrl // dev.kord.core.entity/PartialGuild.vanityUrl|{}vanityUrl[0]
        final fun <get-vanityUrl>(): kotlin/String? // dev.kord.core.entity/PartialGuild.vanityUrl.<get-vanityUrl>|<get-vanityUrl>(){}[0]
    final val verificationLevel // dev.kord.core.entity/PartialGuild.verificationLevel|{}verificationLevel[0]
        final fun <get-verificationLevel>(): dev.kord.common.entity/VerificationLevel? // dev.kord.core.entity/PartialGuild.verificationLevel.<get-verificationLevel>|<get-verificationLevel>(){}[0]
    final val welcomeScreen // dev.kord.core.entity/PartialGuild.welcomeScreen|{}welcomeScreen[0]
        final fun <get-welcomeScreen>(): dev.kord.core.entity/WelcomeScreen? // dev.kord.core.entity/PartialGuild.welcomeScreen.<get-welcomeScreen>|<get-welcomeScreen>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/PartialGuild.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity/PartialGuild.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity/PartialGuild.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/PartialGuild // dev.kord.core.entity/PartialGuild.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.entity/PartialGuild.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.entity/PartialGuild.getGuildOrNull|getGuildOrNull(){}[0]
}

final class dev.kord.core.entity/PermissionOverwriteEntity : dev.kord.core.entity/PermissionOverwrite, dev.kord.core.entity/Strategizable, dev.kord.core/KordObject { // dev.kord.core.entity/PermissionOverwriteEntity|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/PermissionOverwriteData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/PermissionOverwriteEntity.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.core.cache.data.PermissionOverwriteData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val channel // dev.kord.core.entity/PermissionOverwriteEntity.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.behavior.channel/TopGuildChannelBehavior // dev.kord.core.entity/PermissionOverwriteEntity.channel.<get-channel>|<get-channel>(){}[0]
    final val channelId // dev.kord.core.entity/PermissionOverwriteEntity.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/PermissionOverwriteEntity.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val guild // dev.kord.core.entity/PermissionOverwriteEntity.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.entity/PermissionOverwriteEntity.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.entity/PermissionOverwriteEntity.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/PermissionOverwriteEntity.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.entity/PermissionOverwriteEntity.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/PermissionOverwriteEntity.kord.<get-kord>|<get-kord>(){}[0]
    final val supplier // dev.kord.core.entity/PermissionOverwriteEntity.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/PermissionOverwriteEntity.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity/PermissionOverwriteEntity.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/PermissionOverwriteEntity // dev.kord.core.entity/PermissionOverwriteEntity.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun delete(kotlin/String? = ...) // dev.kord.core.entity/PermissionOverwriteEntity.delete|delete(kotlin.String?){}[0]
    final suspend fun getChannel(): dev.kord.core.entity.channel/TopGuildChannel // dev.kord.core.entity/PermissionOverwriteEntity.getChannel|getChannel(){}[0]
    final suspend fun getChannelOrNull(): dev.kord.core.entity.channel/TopGuildChannel? // dev.kord.core.entity/PermissionOverwriteEntity.getChannelOrNull|getChannelOrNull(){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.entity/PermissionOverwriteEntity.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.entity/PermissionOverwriteEntity.getGuildOrNull|getGuildOrNull(){}[0]
}

final class dev.kord.core.entity/Presence : dev.kord.core.entity/Strategizable, dev.kord.core/KordObject { // dev.kord.core.entity/Presence|null[0]
    constructor <init>(dev.kord.core.cache.data/PresenceData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/Presence.<init>|<init>(dev.kord.core.cache.data.PresenceData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val activities // dev.kord.core.entity/Presence.activities|{}activities[0]
        final fun <get-activities>(): kotlin.collections/List<dev.kord.core.entity/Activity> // dev.kord.core.entity/Presence.activities.<get-activities>|<get-activities>(){}[0]
    final val clientStatus // dev.kord.core.entity/Presence.clientStatus|{}clientStatus[0]
        final fun <get-clientStatus>(): dev.kord.core.entity/ClientStatus // dev.kord.core.entity/Presence.clientStatus.<get-clientStatus>|<get-clientStatus>(){}[0]
    final val data // dev.kord.core.entity/Presence.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/PresenceData // dev.kord.core.entity/Presence.data.<get-data>|<get-data>(){}[0]
    final val guildId // dev.kord.core.entity/Presence.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/Presence.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.entity/Presence.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/Presence.kord.<get-kord>|<get-kord>(){}[0]
    final val status // dev.kord.core.entity/Presence.status|{}status[0]
        final fun <get-status>(): dev.kord.common.entity/PresenceStatus // dev.kord.core.entity/Presence.status.<get-status>|<get-status>(){}[0]
    final val supplier // dev.kord.core.entity/Presence.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/Presence.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val userId // dev.kord.core.entity/Presence.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/Presence.userId.<get-userId>|<get-userId>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity/Presence.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/Presence // dev.kord.core.entity/Presence.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getUser(): dev.kord.core.entity/User // dev.kord.core.entity/Presence.getUser|getUser(){}[0]
    final suspend fun getUserOrNull(): dev.kord.core.entity/User? // dev.kord.core.entity/Presence.getUserOrNull|getUserOrNull(){}[0]
}

final class dev.kord.core.entity/Reaction : dev.kord.core/KordObject { // dev.kord.core.entity/Reaction|null[0]
    constructor <init>(dev.kord.core.cache.data/ReactionData, dev.kord.core/Kord) // dev.kord.core.entity/Reaction.<init>|<init>(dev.kord.core.cache.data.ReactionData;dev.kord.core.Kord){}[0]

    final val count // dev.kord.core.entity/Reaction.count|{}count[0]
        final fun <get-count>(): kotlin/Int // dev.kord.core.entity/Reaction.count.<get-count>|<get-count>(){}[0]
    final val data // dev.kord.core.entity/Reaction.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ReactionData // dev.kord.core.entity/Reaction.data.<get-data>|<get-data>(){}[0]
    final val emoji // dev.kord.core.entity/Reaction.emoji|{}emoji[0]
        final fun <get-emoji>(): dev.kord.core.entity/ReactionEmoji // dev.kord.core.entity/Reaction.emoji.<get-emoji>|<get-emoji>(){}[0]
    final val id // dev.kord.core.entity/Reaction.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/Reaction.id.<get-id>|<get-id>(){}[0]
    final val isAnimated // dev.kord.core.entity/Reaction.isAnimated|{}isAnimated[0]
        final fun <get-isAnimated>(): kotlin/Boolean // dev.kord.core.entity/Reaction.isAnimated.<get-isAnimated>|<get-isAnimated>(){}[0]
    final val kord // dev.kord.core.entity/Reaction.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/Reaction.kord.<get-kord>|<get-kord>(){}[0]
    final val selfReacted // dev.kord.core.entity/Reaction.selfReacted|{}selfReacted[0]
        final fun <get-selfReacted>(): kotlin/Boolean // dev.kord.core.entity/Reaction.selfReacted.<get-selfReacted>|<get-selfReacted>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity/Reaction.toString|toString(){}[0]
}

final class dev.kord.core.entity/Region : dev.kord.core/KordObject { // dev.kord.core.entity/Region|null[0]
    constructor <init>(dev.kord.core.cache.data/RegionData, dev.kord.core/Kord) // dev.kord.core.entity/Region.<init>|<init>(dev.kord.core.cache.data.RegionData;dev.kord.core.Kord){}[0]

    final val data // dev.kord.core.entity/Region.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/RegionData // dev.kord.core.entity/Region.data.<get-data>|<get-data>(){}[0]
    final val id // dev.kord.core.entity/Region.id|{}id[0]
        final fun <get-id>(): kotlin/String // dev.kord.core.entity/Region.id.<get-id>|<get-id>(){}[0]
    final val isCustom // dev.kord.core.entity/Region.isCustom|{}isCustom[0]
        final fun <get-isCustom>(): kotlin/Boolean // dev.kord.core.entity/Region.isCustom.<get-isCustom>|<get-isCustom>(){}[0]
    final val isDeprecated // dev.kord.core.entity/Region.isDeprecated|{}isDeprecated[0]
        final fun <get-isDeprecated>(): kotlin/Boolean // dev.kord.core.entity/Region.isDeprecated.<get-isDeprecated>|<get-isDeprecated>(){}[0]
    final val isOptimal // dev.kord.core.entity/Region.isOptimal|{}isOptimal[0]
        final fun <get-isOptimal>(): kotlin/Boolean // dev.kord.core.entity/Region.isOptimal.<get-isOptimal>|<get-isOptimal>(){}[0]
    final val kord // dev.kord.core.entity/Region.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/Region.kord.<get-kord>|<get-kord>(){}[0]
    final val name // dev.kord.core.entity/Region.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.entity/Region.name.<get-name>|<get-name>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/Region.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity/Region.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity/Region.toString|toString(){}[0]
}

final class dev.kord.core.entity/Role : dev.kord.core.behavior/RoleBehavior { // dev.kord.core.entity/Role|null[0]
    constructor <init>(dev.kord.core.cache.data/RoleData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/Role.<init>|<init>(dev.kord.core.cache.data.RoleData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val color // dev.kord.core.entity/Role.color|{}color[0]
        final fun <get-color>(): dev.kord.common/Color // dev.kord.core.entity/Role.color.<get-color>|<get-color>(){}[0]
    final val data // dev.kord.core.entity/Role.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/RoleData // dev.kord.core.entity/Role.data.<get-data>|<get-data>(){}[0]
    final val flags // dev.kord.core.entity/Role.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity/RoleFlags // dev.kord.core.entity/Role.flags.<get-flags>|<get-flags>(){}[0]
    final val guildId // dev.kord.core.entity/Role.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/Role.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val hoisted // dev.kord.core.entity/Role.hoisted|{}hoisted[0]
        final fun <get-hoisted>(): kotlin/Boolean // dev.kord.core.entity/Role.hoisted.<get-hoisted>|<get-hoisted>(){}[0]
    final val icon // dev.kord.core.entity/Role.icon|{}icon[0]
        final fun <get-icon>(): dev.kord.core.entity/Asset? // dev.kord.core.entity/Role.icon.<get-icon>|<get-icon>(){}[0]
    final val iconHash // dev.kord.core.entity/Role.iconHash|{}iconHash[0]
        final fun <get-iconHash>(): kotlin/String? // dev.kord.core.entity/Role.iconHash.<get-iconHash>|<get-iconHash>(){}[0]
    final val id // dev.kord.core.entity/Role.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/Role.id.<get-id>|<get-id>(){}[0]
    final val kord // dev.kord.core.entity/Role.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/Role.kord.<get-kord>|<get-kord>(){}[0]
    final val managed // dev.kord.core.entity/Role.managed|{}managed[0]
        final fun <get-managed>(): kotlin/Boolean // dev.kord.core.entity/Role.managed.<get-managed>|<get-managed>(){}[0]
    final val mentionable // dev.kord.core.entity/Role.mentionable|{}mentionable[0]
        final fun <get-mentionable>(): kotlin/Boolean // dev.kord.core.entity/Role.mentionable.<get-mentionable>|<get-mentionable>(){}[0]
    final val name // dev.kord.core.entity/Role.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.entity/Role.name.<get-name>|<get-name>(){}[0]
    final val permissions // dev.kord.core.entity/Role.permissions|{}permissions[0]
        final fun <get-permissions>(): dev.kord.common.entity/Permissions // dev.kord.core.entity/Role.permissions.<get-permissions>|<get-permissions>(){}[0]
    final val rawPosition // dev.kord.core.entity/Role.rawPosition|{}rawPosition[0]
        final fun <get-rawPosition>(): kotlin/Int // dev.kord.core.entity/Role.rawPosition.<get-rawPosition>|<get-rawPosition>(){}[0]
    final val supplier // dev.kord.core.entity/Role.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/Role.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val tags // dev.kord.core.entity/Role.tags|{}tags[0]
        final fun <get-tags>(): dev.kord.core.entity/RoleTags? // dev.kord.core.entity/Role.tags.<get-tags>|<get-tags>(){}[0]
    final val unicodeEmoji // dev.kord.core.entity/Role.unicodeEmoji|{}unicodeEmoji[0]
        final fun <get-unicodeEmoji>(): kotlin/String? // dev.kord.core.entity/Role.unicodeEmoji.<get-unicodeEmoji>|<get-unicodeEmoji>(){}[0]

    final fun compareTo(dev.kord.core.entity/Entity): kotlin/Int // dev.kord.core.entity/Role.compareTo|compareTo(dev.kord.core.entity.Entity){}[0]
    final fun component1(): dev.kord.core.cache.data/RoleData // dev.kord.core.entity/Role.component1|component1(){}[0]
    final fun component2(): dev.kord.core/Kord // dev.kord.core.entity/Role.component2|component2(){}[0]
    final fun component3(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/Role.component3|component3(){}[0]
    final fun copy(dev.kord.core.cache.data/RoleData = ..., dev.kord.core/Kord = ..., dev.kord.core.supplier/EntitySupplier = ...): dev.kord.core.entity/Role // dev.kord.core.entity/Role.copy|copy(dev.kord.core.cache.data.RoleData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/Role.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity/Role.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity/Role.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/Role // dev.kord.core.entity/Role.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun asRole(): dev.kord.core.entity/Role // dev.kord.core.entity/Role.asRole|asRole(){}[0]
    final suspend fun asRoleOrNull(): dev.kord.core.entity/Role // dev.kord.core.entity/Role.asRoleOrNull|asRoleOrNull(){}[0]
}

final class dev.kord.core.entity/RoleTags : dev.kord.core.entity/Strategizable, dev.kord.core/KordObject { // dev.kord.core.entity/RoleTags|null[0]
    constructor <init>(dev.kord.core.cache.data/RoleTagsData, dev.kord.common.entity/Snowflake, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/RoleTags.<init>|<init>(dev.kord.core.cache.data.RoleTagsData;dev.kord.common.entity.Snowflake;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val botId // dev.kord.core.entity/RoleTags.botId|{}botId[0]
        final fun <get-botId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/RoleTags.botId.<get-botId>|<get-botId>(){}[0]
    final val data // dev.kord.core.entity/RoleTags.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/RoleTagsData // dev.kord.core.entity/RoleTags.data.<get-data>|<get-data>(){}[0]
    final val guild // dev.kord.core.entity/RoleTags.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.entity/RoleTags.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.entity/RoleTags.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/RoleTags.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val integrationId // dev.kord.core.entity/RoleTags.integrationId|{}integrationId[0]
        final fun <get-integrationId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/RoleTags.integrationId.<get-integrationId>|<get-integrationId>(){}[0]
    final val isAvailableForPurchase // dev.kord.core.entity/RoleTags.isAvailableForPurchase|{}isAvailableForPurchase[0]
        final fun <get-isAvailableForPurchase>(): kotlin/Boolean // dev.kord.core.entity/RoleTags.isAvailableForPurchase.<get-isAvailableForPurchase>|<get-isAvailableForPurchase>(){}[0]
    final val isLinkedRole // dev.kord.core.entity/RoleTags.isLinkedRole|{}isLinkedRole[0]
        final fun <get-isLinkedRole>(): kotlin/Boolean // dev.kord.core.entity/RoleTags.isLinkedRole.<get-isLinkedRole>|<get-isLinkedRole>(){}[0]
    final val isPremiumRole // dev.kord.core.entity/RoleTags.isPremiumRole|{}isPremiumRole[0]
        final fun <get-isPremiumRole>(): kotlin/Boolean // dev.kord.core.entity/RoleTags.isPremiumRole.<get-isPremiumRole>|<get-isPremiumRole>(){}[0]
    final val kord // dev.kord.core.entity/RoleTags.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/RoleTags.kord.<get-kord>|<get-kord>(){}[0]
    final val subscriptionListingId // dev.kord.core.entity/RoleTags.subscriptionListingId|{}subscriptionListingId[0]
        final fun <get-subscriptionListingId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/RoleTags.subscriptionListingId.<get-subscriptionListingId>|<get-subscriptionListingId>(){}[0]
    final val supplier // dev.kord.core.entity/RoleTags.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/RoleTags.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/Strategizable // dev.kord.core.entity/RoleTags.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getBot(): dev.kord.core.entity/Member? // dev.kord.core.entity/RoleTags.getBot|getBot(){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.entity/RoleTags.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.entity/RoleTags.getGuildOrNull|getGuildOrNull(){}[0]
    final suspend fun getIntegration(): dev.kord.core.entity/Integration? // dev.kord.core.entity/RoleTags.getIntegration|getIntegration(){}[0]
}

final class dev.kord.core.entity/StageInstance : dev.kord.core.behavior/StageInstanceBehavior { // dev.kord.core.entity/StageInstance|null[0]
    constructor <init>(dev.kord.core.cache.data/StageInstanceData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/StageInstance.<init>|<init>(dev.kord.core.cache.data.StageInstanceData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val channelId // dev.kord.core.entity/StageInstance.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/StageInstance.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val data // dev.kord.core.entity/StageInstance.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/StageInstanceData // dev.kord.core.entity/StageInstance.data.<get-data>|<get-data>(){}[0]
    final val guildId // dev.kord.core.entity/StageInstance.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/StageInstance.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val guildScheduledEventId // dev.kord.core.entity/StageInstance.guildScheduledEventId|{}guildScheduledEventId[0]
        final fun <get-guildScheduledEventId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/StageInstance.guildScheduledEventId.<get-guildScheduledEventId>|<get-guildScheduledEventId>(){}[0]
    final val id // dev.kord.core.entity/StageInstance.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/StageInstance.id.<get-id>|<get-id>(){}[0]
    final val kord // dev.kord.core.entity/StageInstance.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/StageInstance.kord.<get-kord>|<get-kord>(){}[0]
    final val privacyLevel // dev.kord.core.entity/StageInstance.privacyLevel|{}privacyLevel[0]
        final fun <get-privacyLevel>(): dev.kord.common.entity/StageInstancePrivacyLevel // dev.kord.core.entity/StageInstance.privacyLevel.<get-privacyLevel>|<get-privacyLevel>(){}[0]
    final val supplier // dev.kord.core.entity/StageInstance.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/StageInstance.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val topic // dev.kord.core.entity/StageInstance.topic|{}topic[0]
        final fun <get-topic>(): kotlin/String // dev.kord.core.entity/StageInstance.topic.<get-topic>|<get-topic>(){}[0]

    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/StageInstance // dev.kord.core.entity/StageInstance.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun asStageInstance(): dev.kord.core.entity/StageInstance // dev.kord.core.entity/StageInstance.asStageInstance|asStageInstance(){}[0]
    final suspend fun asStageInstanceOrNull(): dev.kord.core.entity/StageInstance // dev.kord.core.entity/StageInstance.asStageInstanceOrNull|asStageInstanceOrNull(){}[0]
}

final class dev.kord.core.entity/StandardEmoji : dev.kord.core.entity/Emoji { // dev.kord.core.entity/StandardEmoji|null[0]
    constructor <init>(kotlin/String) // dev.kord.core.entity/StandardEmoji.<init>|<init>(kotlin.String){}[0]

    final val mention // dev.kord.core.entity/StandardEmoji.mention|{}mention[0]
        final fun <get-mention>(): kotlin/String // dev.kord.core.entity/StandardEmoji.mention.<get-mention>|<get-mention>(){}[0]
    final val name // dev.kord.core.entity/StandardEmoji.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.entity/StandardEmoji.name.<get-name>|<get-name>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/StandardEmoji.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity/StandardEmoji.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity/StandardEmoji.toString|toString(){}[0]
}

final class dev.kord.core.entity/StickerItem : dev.kord.core.entity/KordEntity, dev.kord.core.entity/Strategizable { // dev.kord.core.entity/StickerItem|null[0]
    constructor <init>(dev.kord.core.cache.data/StickerItemData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/StickerItem.<init>|<init>(dev.kord.core.cache.data.StickerItemData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val asset // dev.kord.core.entity/StickerItem.asset|{}asset[0]
        final fun <get-asset>(): dev.kord.core.entity/Asset // dev.kord.core.entity/StickerItem.asset.<get-asset>|<get-asset>(){}[0]
    final val data // dev.kord.core.entity/StickerItem.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/StickerItemData // dev.kord.core.entity/StickerItem.data.<get-data>|<get-data>(){}[0]
    final val formatType // dev.kord.core.entity/StickerItem.formatType|{}formatType[0]
        final fun <get-formatType>(): dev.kord.common.entity/MessageStickerType // dev.kord.core.entity/StickerItem.formatType.<get-formatType>|<get-formatType>(){}[0]
    final val id // dev.kord.core.entity/StickerItem.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/StickerItem.id.<get-id>|<get-id>(){}[0]
    final val kord // dev.kord.core.entity/StickerItem.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/StickerItem.kord.<get-kord>|<get-kord>(){}[0]
    final val name // dev.kord.core.entity/StickerItem.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.entity/StickerItem.name.<get-name>|<get-name>(){}[0]
    final val supplier // dev.kord.core.entity/StickerItem.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/StickerItem.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/Strategizable // dev.kord.core.entity/StickerItem.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getSticker(): dev.kord.core.entity/Sticker // dev.kord.core.entity/StickerItem.getSticker|getSticker(){}[0]
    final suspend fun getStickerOrNull(): dev.kord.core.entity/Sticker? // dev.kord.core.entity/StickerItem.getStickerOrNull|getStickerOrNull(){}[0]
}

final class dev.kord.core.entity/StickerPack : dev.kord.core.entity/KordEntity { // dev.kord.core.entity/StickerPack|null[0]
    constructor <init>(dev.kord.core.cache.data/StickerPackData, dev.kord.core/Kord) // dev.kord.core.entity/StickerPack.<init>|<init>(dev.kord.core.cache.data.StickerPackData;dev.kord.core.Kord){}[0]

    final val banner // dev.kord.core.entity/StickerPack.banner|{}banner[0]
        final fun <get-banner>(): dev.kord.core.entity/Asset // dev.kord.core.entity/StickerPack.banner.<get-banner>|<get-banner>(){}[0]
    final val bannerId // dev.kord.core.entity/StickerPack.bannerId|{}bannerId[0]
        final fun <get-bannerId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/StickerPack.bannerId.<get-bannerId>|<get-bannerId>(){}[0]
    final val coverStickerId // dev.kord.core.entity/StickerPack.coverStickerId|{}coverStickerId[0]
        final fun <get-coverStickerId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/StickerPack.coverStickerId.<get-coverStickerId>|<get-coverStickerId>(){}[0]
    final val data // dev.kord.core.entity/StickerPack.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/StickerPackData // dev.kord.core.entity/StickerPack.data.<get-data>|<get-data>(){}[0]
    final val description // dev.kord.core.entity/StickerPack.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.core.entity/StickerPack.description.<get-description>|<get-description>(){}[0]
    final val id // dev.kord.core.entity/StickerPack.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/StickerPack.id.<get-id>|<get-id>(){}[0]
    final val kord // dev.kord.core.entity/StickerPack.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/StickerPack.kord.<get-kord>|<get-kord>(){}[0]
    final val name // dev.kord.core.entity/StickerPack.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.entity/StickerPack.name.<get-name>|<get-name>(){}[0]
    final val skuId // dev.kord.core.entity/StickerPack.skuId|{}skuId[0]
        final fun <get-skuId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/StickerPack.skuId.<get-skuId>|<get-skuId>(){}[0]
    final val stickers // dev.kord.core.entity/StickerPack.stickers|{}stickers[0]
        final fun <get-stickers>(): kotlin.collections/List<dev.kord.core.entity/Sticker> // dev.kord.core.entity/StickerPack.stickers.<get-stickers>|<get-stickers>(){}[0]
}

final class dev.kord.core.entity/Team : dev.kord.core.entity/KordEntity, dev.kord.core.entity/Strategizable { // dev.kord.core.entity/Team|null[0]
    constructor <init>(dev.kord.core.cache.data/TeamData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/Team.<init>|<init>(dev.kord.core.cache.data.TeamData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val data // dev.kord.core.entity/Team.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/TeamData // dev.kord.core.entity/Team.data.<get-data>|<get-data>(){}[0]
    final val icon // dev.kord.core.entity/Team.icon|{}icon[0]
        final fun <get-icon>(): dev.kord.core.entity/Asset? // dev.kord.core.entity/Team.icon.<get-icon>|<get-icon>(){}[0]
    final val iconHash // dev.kord.core.entity/Team.iconHash|{}iconHash[0]
        final fun <get-iconHash>(): kotlin/String? // dev.kord.core.entity/Team.iconHash.<get-iconHash>|<get-iconHash>(){}[0]
    final val id // dev.kord.core.entity/Team.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/Team.id.<get-id>|<get-id>(){}[0]
    final val kord // dev.kord.core.entity/Team.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/Team.kord.<get-kord>|<get-kord>(){}[0]
    final val members // dev.kord.core.entity/Team.members|{}members[0]
        final fun <get-members>(): kotlin.collections/List<dev.kord.core.entity/TeamMember> // dev.kord.core.entity/Team.members.<get-members>|<get-members>(){}[0]
    final val name // dev.kord.core.entity/Team.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.entity/Team.name.<get-name>|<get-name>(){}[0]
    final val ownerUserId // dev.kord.core.entity/Team.ownerUserId|{}ownerUserId[0]
        final fun <get-ownerUserId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/Team.ownerUserId.<get-ownerUserId>|<get-ownerUserId>(){}[0]
    final val supplier // dev.kord.core.entity/Team.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/Team.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity/Team.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/Team // dev.kord.core.entity/Team.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getUser(): dev.kord.core.entity/User // dev.kord.core.entity/Team.getUser|getUser(){}[0]
    final suspend fun getUserOrNUll(): dev.kord.core.entity/User? // dev.kord.core.entity/Team.getUserOrNUll|getUserOrNUll(){}[0]
}

final class dev.kord.core.entity/TeamMember { // dev.kord.core.entity/TeamMember|null[0]
    constructor <init>(dev.kord.core.cache.data/TeamMemberData, dev.kord.core/Kord) // dev.kord.core.entity/TeamMember.<init>|<init>(dev.kord.core.cache.data.TeamMemberData;dev.kord.core.Kord){}[0]

    final val data // dev.kord.core.entity/TeamMember.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/TeamMemberData // dev.kord.core.entity/TeamMember.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.entity/TeamMember.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/TeamMember.kord.<get-kord>|<get-kord>(){}[0]
    final val membershipState // dev.kord.core.entity/TeamMember.membershipState|{}membershipState[0]
        final fun <get-membershipState>(): dev.kord.common.entity/TeamMembershipState // dev.kord.core.entity/TeamMember.membershipState.<get-membershipState>|<get-membershipState>(){}[0]
    final val role // dev.kord.core.entity/TeamMember.role|{}role[0]
        final fun <get-role>(): dev.kord.common.entity/TeamMemberRole // dev.kord.core.entity/TeamMember.role.<get-role>|<get-role>(){}[0]
    final val teamId // dev.kord.core.entity/TeamMember.teamId|{}teamId[0]
        final fun <get-teamId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/TeamMember.teamId.<get-teamId>|<get-teamId>(){}[0]
    final val userId // dev.kord.core.entity/TeamMember.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/TeamMember.userId.<get-userId>|<get-userId>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity/TeamMember.toString|toString(){}[0]
    final suspend fun getUser(): dev.kord.core.entity/User? // dev.kord.core.entity/TeamMember.getUser|getUser(){}[0]
}

final class dev.kord.core.entity/Template : dev.kord.core.behavior/TemplateBehavior, dev.kord.core/KordObject { // dev.kord.core.entity/Template|null[0]
    constructor <init>(dev.kord.core.cache.data/TemplateData, dev.kord.core/Kord) // dev.kord.core.entity/Template.<init>|<init>(dev.kord.core.cache.data.TemplateData;dev.kord.core.Kord){}[0]

    final val code // dev.kord.core.entity/Template.code|{}code[0]
        final fun <get-code>(): kotlin/String // dev.kord.core.entity/Template.code.<get-code>|<get-code>(){}[0]
    final val createdAt // dev.kord.core.entity/Template.createdAt|{}createdAt[0]
        final fun <get-createdAt>(): kotlinx.datetime/Instant // dev.kord.core.entity/Template.createdAt.<get-createdAt>|<get-createdAt>(){}[0]
    final val creator // dev.kord.core.entity/Template.creator|{}creator[0]
        final fun <get-creator>(): dev.kord.core.entity/User // dev.kord.core.entity/Template.creator.<get-creator>|<get-creator>(){}[0]
    final val creatorId // dev.kord.core.entity/Template.creatorId|{}creatorId[0]
        final fun <get-creatorId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/Template.creatorId.<get-creatorId>|<get-creatorId>(){}[0]
    final val data // dev.kord.core.entity/Template.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/TemplateData // dev.kord.core.entity/Template.data.<get-data>|<get-data>(){}[0]
    final val description // dev.kord.core.entity/Template.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.core.entity/Template.description.<get-description>|<get-description>(){}[0]
    final val dirty // dev.kord.core.entity/Template.dirty|{}dirty[0]
        final fun <get-dirty>(): kotlin/Boolean? // dev.kord.core.entity/Template.dirty.<get-dirty>|<get-dirty>(){}[0]
    final val guildId // dev.kord.core.entity/Template.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/Template.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.entity/Template.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/Template.kord.<get-kord>|<get-kord>(){}[0]
    final val name // dev.kord.core.entity/Template.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.entity/Template.name.<get-name>|<get-name>(){}[0]
    final val partialGuild // dev.kord.core.entity/Template.partialGuild|{}partialGuild[0]
        final fun <get-partialGuild>(): dev.kord.core.entity/PartialGuild // dev.kord.core.entity/Template.partialGuild.<get-partialGuild>|<get-partialGuild>(){}[0]
    final val updatedAt // dev.kord.core.entity/Template.updatedAt|{}updatedAt[0]
        final fun <get-updatedAt>(): kotlinx.datetime/Instant // dev.kord.core.entity/Template.updatedAt.<get-updatedAt>|<get-updatedAt>(){}[0]
    final val usageCount // dev.kord.core.entity/Template.usageCount|{}usageCount[0]
        final fun <get-usageCount>(): kotlin/Int // dev.kord.core.entity/Template.usageCount.<get-usageCount>|<get-usageCount>(){}[0]
}

final class dev.kord.core.entity/VoiceState : dev.kord.core.entity/Strategizable, dev.kord.core/KordObject { // dev.kord.core.entity/VoiceState|null[0]
    constructor <init>(dev.kord.core.cache.data/VoiceStateData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/VoiceState.<init>|<init>(dev.kord.core.cache.data.VoiceStateData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val channelId // dev.kord.core.entity/VoiceState.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/VoiceState.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val data // dev.kord.core.entity/VoiceState.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/VoiceStateData // dev.kord.core.entity/VoiceState.data.<get-data>|<get-data>(){}[0]
    final val guildId // dev.kord.core.entity/VoiceState.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/VoiceState.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val isDeafened // dev.kord.core.entity/VoiceState.isDeafened|{}isDeafened[0]
        final fun <get-isDeafened>(): kotlin/Boolean // dev.kord.core.entity/VoiceState.isDeafened.<get-isDeafened>|<get-isDeafened>(){}[0]
    final val isMuted // dev.kord.core.entity/VoiceState.isMuted|{}isMuted[0]
        final fun <get-isMuted>(): kotlin/Boolean // dev.kord.core.entity/VoiceState.isMuted.<get-isMuted>|<get-isMuted>(){}[0]
    final val isSelfDeafened // dev.kord.core.entity/VoiceState.isSelfDeafened|{}isSelfDeafened[0]
        final fun <get-isSelfDeafened>(): kotlin/Boolean // dev.kord.core.entity/VoiceState.isSelfDeafened.<get-isSelfDeafened>|<get-isSelfDeafened>(){}[0]
    final val isSelfMuted // dev.kord.core.entity/VoiceState.isSelfMuted|{}isSelfMuted[0]
        final fun <get-isSelfMuted>(): kotlin/Boolean // dev.kord.core.entity/VoiceState.isSelfMuted.<get-isSelfMuted>|<get-isSelfMuted>(){}[0]
    final val isSelfStreaming // dev.kord.core.entity/VoiceState.isSelfStreaming|{}isSelfStreaming[0]
        final fun <get-isSelfStreaming>(): kotlin/Boolean // dev.kord.core.entity/VoiceState.isSelfStreaming.<get-isSelfStreaming>|<get-isSelfStreaming>(){}[0]
    final val isSelfVideo // dev.kord.core.entity/VoiceState.isSelfVideo|{}isSelfVideo[0]
        final fun <get-isSelfVideo>(): kotlin/Boolean // dev.kord.core.entity/VoiceState.isSelfVideo.<get-isSelfVideo>|<get-isSelfVideo>(){}[0]
    final val isSuppressed // dev.kord.core.entity/VoiceState.isSuppressed|{}isSuppressed[0]
        final fun <get-isSuppressed>(): kotlin/Boolean // dev.kord.core.entity/VoiceState.isSuppressed.<get-isSuppressed>|<get-isSuppressed>(){}[0]
    final val kord // dev.kord.core.entity/VoiceState.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/VoiceState.kord.<get-kord>|<get-kord>(){}[0]
    final val requestToSpeakTimestamp // dev.kord.core.entity/VoiceState.requestToSpeakTimestamp|{}requestToSpeakTimestamp[0]
        final fun <get-requestToSpeakTimestamp>(): kotlinx.datetime/Instant? // dev.kord.core.entity/VoiceState.requestToSpeakTimestamp.<get-requestToSpeakTimestamp>|<get-requestToSpeakTimestamp>(){}[0]
    final val sessionId // dev.kord.core.entity/VoiceState.sessionId|{}sessionId[0]
        final fun <get-sessionId>(): kotlin/String // dev.kord.core.entity/VoiceState.sessionId.<get-sessionId>|<get-sessionId>(){}[0]
    final val supplier // dev.kord.core.entity/VoiceState.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/VoiceState.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val userId // dev.kord.core.entity/VoiceState.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/VoiceState.userId.<get-userId>|<get-userId>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.entity/VoiceState.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/VoiceState // dev.kord.core.entity/VoiceState.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getChannelOrNull(): dev.kord.core.behavior.channel/BaseVoiceChannelBehavior? // dev.kord.core.entity/VoiceState.getChannelOrNull|getChannelOrNull(){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.entity/VoiceState.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.entity/VoiceState.getGuildOrNull|getGuildOrNull(){}[0]
    final suspend fun getMember(): dev.kord.core.entity/Member // dev.kord.core.entity/VoiceState.getMember|getMember(){}[0]
    final suspend fun getMemberOrNull(): dev.kord.core.entity/Member? // dev.kord.core.entity/VoiceState.getMemberOrNull|getMemberOrNull(){}[0]
}

final class dev.kord.core.entity/Webhook : dev.kord.core.behavior/WebhookBehavior, dev.kord.core.entity/Strategizable { // dev.kord.core.entity/Webhook|null[0]
    constructor <init>(dev.kord.core.cache.data/WebhookData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/Webhook.<init>|<init>(dev.kord.core.cache.data.WebhookData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val channel // dev.kord.core.entity/Webhook.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.behavior.channel/MessageChannelBehavior // dev.kord.core.entity/Webhook.channel.<get-channel>|<get-channel>(){}[0]
    final val channelId // dev.kord.core.entity/Webhook.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/Webhook.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val creatorId // dev.kord.core.entity/Webhook.creatorId|{}creatorId[0]
        final fun <get-creatorId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/Webhook.creatorId.<get-creatorId>|<get-creatorId>(){}[0]
    final val data // dev.kord.core.entity/Webhook.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/WebhookData // dev.kord.core.entity/Webhook.data.<get-data>|<get-data>(){}[0]
    final val guild // dev.kord.core.entity/Webhook.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior? // dev.kord.core.entity/Webhook.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.entity/Webhook.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/Webhook.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.core.entity/Webhook.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/Webhook.id.<get-id>|<get-id>(){}[0]
    final val kord // dev.kord.core.entity/Webhook.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/Webhook.kord.<get-kord>|<get-kord>(){}[0]
    final val name // dev.kord.core.entity/Webhook.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.core.entity/Webhook.name.<get-name>|<get-name>(){}[0]
    final val supplier // dev.kord.core.entity/Webhook.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/Webhook.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val token // dev.kord.core.entity/Webhook.token|{}token[0]
        final fun <get-token>(): kotlin/String? // dev.kord.core.entity/Webhook.token.<get-token>|<get-token>(){}[0]
    final val type // dev.kord.core.entity/Webhook.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/WebhookType // dev.kord.core.entity/Webhook.type.<get-type>|<get-type>(){}[0]

    final fun component1(): dev.kord.core.cache.data/WebhookData // dev.kord.core.entity/Webhook.component1|component1(){}[0]
    final fun component2(): dev.kord.core/Kord // dev.kord.core.entity/Webhook.component2|component2(){}[0]
    final fun component3(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/Webhook.component3|component3(){}[0]
    final fun copy(dev.kord.core.cache.data/WebhookData = ..., dev.kord.core/Kord = ..., dev.kord.core.supplier/EntitySupplier = ...): dev.kord.core.entity/Webhook // dev.kord.core.entity/Webhook.copy|copy(dev.kord.core.cache.data.WebhookData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/Webhook.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity/Webhook.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.entity/Webhook.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/Webhook // dev.kord.core.entity/Webhook.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getChannel(): dev.kord.core.entity.channel/MessageChannel // dev.kord.core.entity/Webhook.getChannel|getChannel(){}[0]
    final suspend fun getChannelOrNull(): dev.kord.core.entity.channel/MessageChannel? // dev.kord.core.entity/Webhook.getChannelOrNull|getChannelOrNull(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.entity/Webhook.getGuildOrNull|getGuildOrNull(){}[0]
}

final class dev.kord.core.entity/WelcomeScreen : dev.kord.core/KordObject { // dev.kord.core.entity/WelcomeScreen|null[0]
    constructor <init>(dev.kord.core.cache.data/WelcomeScreenData, dev.kord.core/Kord) // dev.kord.core.entity/WelcomeScreen.<init>|<init>(dev.kord.core.cache.data.WelcomeScreenData;dev.kord.core.Kord){}[0]

    final val data // dev.kord.core.entity/WelcomeScreen.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/WelcomeScreenData // dev.kord.core.entity/WelcomeScreen.data.<get-data>|<get-data>(){}[0]
    final val description // dev.kord.core.entity/WelcomeScreen.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.core.entity/WelcomeScreen.description.<get-description>|<get-description>(){}[0]
    final val kord // dev.kord.core.entity/WelcomeScreen.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/WelcomeScreen.kord.<get-kord>|<get-kord>(){}[0]
    final val welcomeScreenChannels // dev.kord.core.entity/WelcomeScreen.welcomeScreenChannels|{}welcomeScreenChannels[0]
        final fun <get-welcomeScreenChannels>(): kotlin.collections/List<dev.kord.core.entity.channel/WelcomeScreenChannel> // dev.kord.core.entity/WelcomeScreen.welcomeScreenChannels.<get-welcomeScreenChannels>|<get-welcomeScreenChannels>(){}[0]
}

final class dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData { // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.core.cache.data/AutoModerationActionData, dev.kord.common.entity/Snowflake, dev.kord.common.entity/AutoModerationRuleTriggerType, dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/String, kotlin/String?, kotlin/String?) // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.core.cache.data.AutoModerationActionData;dev.kord.common.entity.Snowflake;dev.kord.common.entity.AutoModerationRuleTriggerType;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.String;kotlin.String?;kotlin.String?){}[0]

    final val action // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.action|{}action[0]
        final fun <get-action>(): dev.kord.core.cache.data/AutoModerationActionData // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.action.<get-action>|<get-action>(){}[0]
    final val alertSystemMessageId // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.alertSystemMessageId|{}alertSystemMessageId[0]
        final fun <get-alertSystemMessageId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.alertSystemMessageId.<get-alertSystemMessageId>|<get-alertSystemMessageId>(){}[0]
    final val channelId // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val content // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.content|{}content[0]
        final fun <get-content>(): kotlin/String // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.content.<get-content>|<get-content>(){}[0]
    final val guildId // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val matchedContent // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.matchedContent|{}matchedContent[0]
        final fun <get-matchedContent>(): kotlin/String? // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.matchedContent.<get-matchedContent>|<get-matchedContent>(){}[0]
    final val matchedKeyword // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.matchedKeyword|{}matchedKeyword[0]
        final fun <get-matchedKeyword>(): kotlin/String? // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.matchedKeyword.<get-matchedKeyword>|<get-matchedKeyword>(){}[0]
    final val messageId // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.messageId|{}messageId[0]
        final fun <get-messageId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.messageId.<get-messageId>|<get-messageId>(){}[0]
    final val ruleId // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.ruleId|{}ruleId[0]
        final fun <get-ruleId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.ruleId.<get-ruleId>|<get-ruleId>(){}[0]
    final val ruleTriggerType // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.ruleTriggerType|{}ruleTriggerType[0]
        final fun <get-ruleTriggerType>(): dev.kord.common.entity/AutoModerationRuleTriggerType // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.ruleTriggerType.<get-ruleTriggerType>|<get-ruleTriggerType>(){}[0]
    final val userId // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.component1|component1(){}[0]
    final fun component10(): kotlin/String? // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.component10|component10(){}[0]
    final fun component11(): kotlin/String? // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.component11|component11(){}[0]
    final fun component2(): dev.kord.core.cache.data/AutoModerationActionData // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity/AutoModerationRuleTriggerType // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity/Snowflake // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.component8|component8(){}[0]
    final fun component9(): kotlin/String // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.core.cache.data/AutoModerationActionData = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/AutoModerationRuleTriggerType = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/String = ..., kotlin/String? = ..., kotlin/String? = ...): dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.core.cache.data.AutoModerationActionData;dev.kord.common.entity.Snowflake;dev.kord.common.entity.AutoModerationRuleTriggerType;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.String;kotlin.String?;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData> { // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.$serializer|null[0]
        final val descriptor // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData) // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.event.automoderation.data.AutoModerationActionExecutionEventData){}[0]
    }

    final object Companion { // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.Companion|null[0]
        final fun from(dev.kord.gateway/DiscordAutoModerationActionExecution): dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.Companion.from|from(dev.kord.gateway.DiscordAutoModerationActionExecution){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData> // dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent : dev.kord.core.event.automoderation/AutoModerationEvent { // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent|null[0]
    constructor <init>(dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.<init>|<init>(dev.kord.core.event.automoderation.data.AutoModerationActionExecutionEventData;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val action // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.action|{}action[0]
        final fun <get-action>(): dev.kord.core.entity.automoderation/AutoModerationAction // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.action.<get-action>|<get-action>(){}[0]
    final val alertSystemMessage // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.alertSystemMessage|{}alertSystemMessage[0]
        final fun <get-alertSystemMessage>(): dev.kord.core.behavior/MessageBehavior? // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.alertSystemMessage.<get-alertSystemMessage>|<get-alertSystemMessage>(){}[0]
    final val alertSystemMessageId // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.alertSystemMessageId|{}alertSystemMessageId[0]
        final fun <get-alertSystemMessageId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.alertSystemMessageId.<get-alertSystemMessageId>|<get-alertSystemMessageId>(){}[0]
    final val channel // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.behavior.channel/GuildMessageChannelBehavior? // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val channelId // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val content // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.content|{}content[0]
        final fun <get-content>(): kotlin/String // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.content.<get-content>|<get-content>(){}[0]
    final val customContext // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val data // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.data|{}data[0]
        final fun <get-data>(): dev.kord.core.event.automoderation.data/AutoModerationActionExecutionEventData // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.data.<get-data>|<get-data>(){}[0]
    final val guildId // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val matchedContent // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.matchedContent|{}matchedContent[0]
        final fun <get-matchedContent>(): kotlin/String? // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.matchedContent.<get-matchedContent>|<get-matchedContent>(){}[0]
    final val matchedKeyword // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.matchedKeyword|{}matchedKeyword[0]
        final fun <get-matchedKeyword>(): kotlin/String? // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.matchedKeyword.<get-matchedKeyword>|<get-matchedKeyword>(){}[0]
    final val member // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.member|{}member[0]
        final fun <get-member>(): dev.kord.core.behavior/MemberBehavior // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.member.<get-member>|<get-member>(){}[0]
    final val memberId // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.memberId|{}memberId[0]
        final fun <get-memberId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.memberId.<get-memberId>|<get-memberId>(){}[0]
    final val message // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.message|{}message[0]
        final fun <get-message>(): dev.kord.core.behavior/MessageBehavior? // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.message.<get-message>|<get-message>(){}[0]
    final val messageId // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.messageId|{}messageId[0]
        final fun <get-messageId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.messageId.<get-messageId>|<get-messageId>(){}[0]
    final val rule // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.rule|{}rule[0]
        final fun <get-rule>(): dev.kord.core.behavior.automoderation/TypedAutoModerationRuleBehavior // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.rule.<get-rule>|<get-rule>(){}[0]
    final val ruleId // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.ruleId|{}ruleId[0]
        final fun <get-ruleId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.ruleId.<get-ruleId>|<get-ruleId>(){}[0]
    final val shard // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent // dev.kord.core.event.automoderation/AutoModerationActionExecutionEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.event.automoderation/AutoModerationRuleCreateEvent : dev.kord.core.event.automoderation/AutoModerationRuleConfigurationEvent { // dev.kord.core.event.automoderation/AutoModerationRuleCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.automoderation/AutoModerationRule, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.automoderation/AutoModerationRuleCreateEvent.<init>|<init>(dev.kord.core.entity.automoderation.AutoModerationRule;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val customContext // dev.kord.core.event.automoderation/AutoModerationRuleCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.automoderation/AutoModerationRuleCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val kord // dev.kord.core.event.automoderation/AutoModerationRuleCreateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.automoderation/AutoModerationRuleCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val rule // dev.kord.core.event.automoderation/AutoModerationRuleCreateEvent.rule|{}rule[0]
        final fun <get-rule>(): dev.kord.core.entity.automoderation/AutoModerationRule // dev.kord.core.event.automoderation/AutoModerationRuleCreateEvent.rule.<get-rule>|<get-rule>(){}[0]
    final val shard // dev.kord.core.event.automoderation/AutoModerationRuleCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.automoderation/AutoModerationRuleCreateEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.automoderation/AutoModerationRuleCreateEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.automoderation/AutoModerationRuleCreateEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.automoderation/AutoModerationRuleCreateEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.automoderation/AutoModerationRuleCreateEvent // dev.kord.core.event.automoderation/AutoModerationRuleCreateEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.event.automoderation/AutoModerationRuleDeleteEvent : dev.kord.core.event.automoderation/AutoModerationRuleConfigurationEvent { // dev.kord.core.event.automoderation/AutoModerationRuleDeleteEvent|null[0]
    constructor <init>(dev.kord.core.entity.automoderation/AutoModerationRule, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.automoderation/AutoModerationRuleDeleteEvent.<init>|<init>(dev.kord.core.entity.automoderation.AutoModerationRule;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val customContext // dev.kord.core.event.automoderation/AutoModerationRuleDeleteEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.automoderation/AutoModerationRuleDeleteEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val kord // dev.kord.core.event.automoderation/AutoModerationRuleDeleteEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.automoderation/AutoModerationRuleDeleteEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val rule // dev.kord.core.event.automoderation/AutoModerationRuleDeleteEvent.rule|{}rule[0]
        final fun <get-rule>(): dev.kord.core.entity.automoderation/AutoModerationRule // dev.kord.core.event.automoderation/AutoModerationRuleDeleteEvent.rule.<get-rule>|<get-rule>(){}[0]
    final val shard // dev.kord.core.event.automoderation/AutoModerationRuleDeleteEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.automoderation/AutoModerationRuleDeleteEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.automoderation/AutoModerationRuleDeleteEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.automoderation/AutoModerationRuleDeleteEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.automoderation/AutoModerationRuleDeleteEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.automoderation/AutoModerationRuleDeleteEvent // dev.kord.core.event.automoderation/AutoModerationRuleDeleteEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.event.automoderation/AutoModerationRuleUpdateEvent : dev.kord.core.event.automoderation/AutoModerationRuleConfigurationEvent { // dev.kord.core.event.automoderation/AutoModerationRuleUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity.automoderation/AutoModerationRule, dev.kord.core.entity.automoderation/AutoModerationRule?, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.automoderation/AutoModerationRuleUpdateEvent.<init>|<init>(dev.kord.core.entity.automoderation.AutoModerationRule;dev.kord.core.entity.automoderation.AutoModerationRule?;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val customContext // dev.kord.core.event.automoderation/AutoModerationRuleUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.automoderation/AutoModerationRuleUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val kord // dev.kord.core.event.automoderation/AutoModerationRuleUpdateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.automoderation/AutoModerationRuleUpdateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val old // dev.kord.core.event.automoderation/AutoModerationRuleUpdateEvent.old|{}old[0]
        final fun <get-old>(): dev.kord.core.entity.automoderation/AutoModerationRule? // dev.kord.core.event.automoderation/AutoModerationRuleUpdateEvent.old.<get-old>|<get-old>(){}[0]
    final val rule // dev.kord.core.event.automoderation/AutoModerationRuleUpdateEvent.rule|{}rule[0]
        final fun <get-rule>(): dev.kord.core.entity.automoderation/AutoModerationRule // dev.kord.core.event.automoderation/AutoModerationRuleUpdateEvent.rule.<get-rule>|<get-rule>(){}[0]
    final val shard // dev.kord.core.event.automoderation/AutoModerationRuleUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.automoderation/AutoModerationRuleUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.automoderation/AutoModerationRuleUpdateEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.automoderation/AutoModerationRuleUpdateEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.automoderation/AutoModerationRuleUpdateEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.automoderation/AutoModerationRuleUpdateEvent // dev.kord.core.event.automoderation/AutoModerationRuleUpdateEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.event.channel.data/ChannelPinsUpdateEventData { // dev.kord.core.event.channel.data/ChannelPinsUpdateEventData|null[0]
    constructor <init>(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ...) // dev.kord.core.event.channel.data/ChannelPinsUpdateEventData.<init>|<init>(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>){}[0]

    final val channelId // dev.kord.core.event.channel.data/ChannelPinsUpdateEventData.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.channel.data/ChannelPinsUpdateEventData.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val guildId // dev.kord.core.event.channel.data/ChannelPinsUpdateEventData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.event.channel.data/ChannelPinsUpdateEventData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val lastPinTimestamp // dev.kord.core.event.channel.data/ChannelPinsUpdateEventData.lastPinTimestamp|{}lastPinTimestamp[0]
        final fun <get-lastPinTimestamp>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.core.event.channel.data/ChannelPinsUpdateEventData.lastPinTimestamp.<get-lastPinTimestamp>|<get-lastPinTimestamp>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.event.channel.data/ChannelPinsUpdateEventData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.core.event.channel.data/ChannelPinsUpdateEventData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.core.event.channel.data/ChannelPinsUpdateEventData.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ...): dev.kord.core.event.channel.data/ChannelPinsUpdateEventData // dev.kord.core.event.channel.data/ChannelPinsUpdateEventData.copy|copy(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.event.channel.data/ChannelPinsUpdateEventData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.event.channel.data/ChannelPinsUpdateEventData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.event.channel.data/ChannelPinsUpdateEventData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.event.channel.data/ChannelPinsUpdateEventData> { // dev.kord.core.event.channel.data/ChannelPinsUpdateEventData.$serializer|null[0]
        final val descriptor // dev.kord.core.event.channel.data/ChannelPinsUpdateEventData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.event.channel.data/ChannelPinsUpdateEventData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.event.channel.data/ChannelPinsUpdateEventData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.event.channel.data/ChannelPinsUpdateEventData // dev.kord.core.event.channel.data/ChannelPinsUpdateEventData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.event.channel.data/ChannelPinsUpdateEventData) // dev.kord.core.event.channel.data/ChannelPinsUpdateEventData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.event.channel.data.ChannelPinsUpdateEventData){}[0]
    }

    final object Companion { // dev.kord.core.event.channel.data/ChannelPinsUpdateEventData.Companion|null[0]
        final val $childSerializers // dev.kord.core.event.channel.data/ChannelPinsUpdateEventData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordPinsUpdateData): dev.kord.core.event.channel.data/ChannelPinsUpdateEventData // dev.kord.core.event.channel.data/ChannelPinsUpdateEventData.Companion.from|from(dev.kord.common.entity.DiscordPinsUpdateData){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.event.channel.data/ChannelPinsUpdateEventData> // dev.kord.core.event.channel.data/ChannelPinsUpdateEventData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.event.channel.data/TypingStartEventData { // dev.kord.core.event.channel.data/TypingStartEventData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity/Snowflake, kotlinx.datetime/Instant, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> = ...) // dev.kord.core.event.channel.data/TypingStartEventData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.Snowflake;kotlinx.datetime.Instant;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordGuildMember>){}[0]

    final val channelId // dev.kord.core.event.channel.data/TypingStartEventData.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.channel.data/TypingStartEventData.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val guildId // dev.kord.core.event.channel.data/TypingStartEventData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.event.channel.data/TypingStartEventData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val member // dev.kord.core.event.channel.data/TypingStartEventData.member|{}member[0]
        final fun <get-member>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> // dev.kord.core.event.channel.data/TypingStartEventData.member.<get-member>|<get-member>(){}[0]
    final val timestamp // dev.kord.core.event.channel.data/TypingStartEventData.timestamp|{}timestamp[0]
        final fun <get-timestamp>(): kotlinx.datetime/Instant // dev.kord.core.event.channel.data/TypingStartEventData.timestamp.<get-timestamp>|<get-timestamp>(){}[0]
    final val userId // dev.kord.core.event.channel.data/TypingStartEventData.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.channel.data/TypingStartEventData.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.event.channel.data/TypingStartEventData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.core.event.channel.data/TypingStartEventData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake // dev.kord.core.event.channel.data/TypingStartEventData.component3|component3(){}[0]
    final fun component4(): kotlinx.datetime/Instant // dev.kord.core.event.channel.data/TypingStartEventData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> // dev.kord.core.event.channel.data/TypingStartEventData.component5|component5(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity/Snowflake = ..., kotlinx.datetime/Instant = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> = ...): dev.kord.core.event.channel.data/TypingStartEventData // dev.kord.core.event.channel.data/TypingStartEventData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.Snowflake;kotlinx.datetime.Instant;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordGuildMember>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.event.channel.data/TypingStartEventData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.event.channel.data/TypingStartEventData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.event.channel.data/TypingStartEventData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.core.event.channel.data/TypingStartEventData> { // dev.kord.core.event.channel.data/TypingStartEventData.$serializer|null[0]
        final val descriptor // dev.kord.core.event.channel.data/TypingStartEventData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.event.channel.data/TypingStartEventData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.core.event.channel.data/TypingStartEventData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.core.event.channel.data/TypingStartEventData // dev.kord.core.event.channel.data/TypingStartEventData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.core.event.channel.data/TypingStartEventData) // dev.kord.core.event.channel.data/TypingStartEventData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.core.event.channel.data.TypingStartEventData){}[0]
    }

    final object Companion { // dev.kord.core.event.channel.data/TypingStartEventData.Companion|null[0]
        final val $childSerializers // dev.kord.core.event.channel.data/TypingStartEventData.Companion.$childSerializers|{}$childSerializers[0]

        final fun from(dev.kord.common.entity/DiscordTyping): dev.kord.core.event.channel.data/TypingStartEventData // dev.kord.core.event.channel.data/TypingStartEventData.Companion.from|from(dev.kord.common.entity.DiscordTyping){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.event.channel.data/TypingStartEventData> // dev.kord.core.event.channel.data/TypingStartEventData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.core.event.channel.thread/NewsChannelThreadCreateEvent : dev.kord.core.event.channel.thread/ThreadChannelCreateEvent { // dev.kord.core.event.channel.thread/NewsChannelThreadCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel.thread/NewsChannelThread, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel.thread/NewsChannelThreadCreateEvent.<init>|<init>(dev.kord.core.entity.channel.thread.NewsChannelThread;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel.thread/NewsChannelThreadCreateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel.thread/NewsChannelThread // dev.kord.core.event.channel.thread/NewsChannelThreadCreateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel.thread/NewsChannelThreadCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel.thread/NewsChannelThreadCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val shard // dev.kord.core.event.channel.thread/NewsChannelThreadCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel.thread/NewsChannelThreadCreateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel.thread/NewsChannelThreadCreateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel.thread/NewsChannelThreadDeleteEvent : dev.kord.core.event.channel.thread/ThreadChannelDeleteEvent { // dev.kord.core.event.channel.thread/NewsChannelThreadDeleteEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel.thread/DeletedThreadChannel, dev.kord.core.entity.channel.thread/NewsChannelThread?, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel.thread/NewsChannelThreadDeleteEvent.<init>|<init>(dev.kord.core.entity.channel.thread.DeletedThreadChannel;dev.kord.core.entity.channel.thread.NewsChannelThread?;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel.thread/NewsChannelThreadDeleteEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel.thread/DeletedThreadChannel // dev.kord.core.event.channel.thread/NewsChannelThreadDeleteEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel.thread/NewsChannelThreadDeleteEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel.thread/NewsChannelThreadDeleteEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val old // dev.kord.core.event.channel.thread/NewsChannelThreadDeleteEvent.old|{}old[0]
        final fun <get-old>(): dev.kord.core.entity.channel.thread/NewsChannelThread? // dev.kord.core.event.channel.thread/NewsChannelThreadDeleteEvent.old.<get-old>|<get-old>(){}[0]
    final val shard // dev.kord.core.event.channel.thread/NewsChannelThreadDeleteEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel.thread/NewsChannelThreadDeleteEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel.thread/NewsChannelThreadDeleteEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel.thread/NewsChannelThreadUpdateEvent : dev.kord.core.event.channel.thread/ThreadUpdateEvent { // dev.kord.core.event.channel.thread/NewsChannelThreadUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel.thread/NewsChannelThread, dev.kord.core.entity.channel.thread/NewsChannelThread?, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel.thread/NewsChannelThreadUpdateEvent.<init>|<init>(dev.kord.core.entity.channel.thread.NewsChannelThread;dev.kord.core.entity.channel.thread.NewsChannelThread?;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel.thread/NewsChannelThreadUpdateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel.thread/NewsChannelThread // dev.kord.core.event.channel.thread/NewsChannelThreadUpdateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel.thread/NewsChannelThreadUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel.thread/NewsChannelThreadUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val old // dev.kord.core.event.channel.thread/NewsChannelThreadUpdateEvent.old|{}old[0]
        final fun <get-old>(): dev.kord.core.entity.channel.thread/NewsChannelThread? // dev.kord.core.event.channel.thread/NewsChannelThreadUpdateEvent.old.<get-old>|<get-old>(){}[0]
    final val shard // dev.kord.core.event.channel.thread/NewsChannelThreadUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel.thread/NewsChannelThreadUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel.thread/NewsChannelThreadUpdateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel.thread/TextChannelThreadCreateEvent : dev.kord.core.event.channel.thread/ThreadChannelCreateEvent { // dev.kord.core.event.channel.thread/TextChannelThreadCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel.thread/TextChannelThread, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel.thread/TextChannelThreadCreateEvent.<init>|<init>(dev.kord.core.entity.channel.thread.TextChannelThread;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel.thread/TextChannelThreadCreateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel.thread/TextChannelThread // dev.kord.core.event.channel.thread/TextChannelThreadCreateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel.thread/TextChannelThreadCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel.thread/TextChannelThreadCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val shard // dev.kord.core.event.channel.thread/TextChannelThreadCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel.thread/TextChannelThreadCreateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel.thread/TextChannelThreadCreateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel.thread/TextChannelThreadDeleteEvent : dev.kord.core.event.channel.thread/ThreadChannelDeleteEvent { // dev.kord.core.event.channel.thread/TextChannelThreadDeleteEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel.thread/DeletedThreadChannel, dev.kord.core.entity.channel.thread/TextChannelThread?, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel.thread/TextChannelThreadDeleteEvent.<init>|<init>(dev.kord.core.entity.channel.thread.DeletedThreadChannel;dev.kord.core.entity.channel.thread.TextChannelThread?;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel.thread/TextChannelThreadDeleteEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel.thread/DeletedThreadChannel // dev.kord.core.event.channel.thread/TextChannelThreadDeleteEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel.thread/TextChannelThreadDeleteEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel.thread/TextChannelThreadDeleteEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val old // dev.kord.core.event.channel.thread/TextChannelThreadDeleteEvent.old|{}old[0]
        final fun <get-old>(): dev.kord.core.entity.channel.thread/TextChannelThread? // dev.kord.core.event.channel.thread/TextChannelThreadDeleteEvent.old.<get-old>|<get-old>(){}[0]
    final val shard // dev.kord.core.event.channel.thread/TextChannelThreadDeleteEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel.thread/TextChannelThreadDeleteEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel.thread/TextChannelThreadDeleteEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel.thread/TextChannelThreadUpdateEvent : dev.kord.core.event.channel.thread/ThreadUpdateEvent { // dev.kord.core.event.channel.thread/TextChannelThreadUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel.thread/TextChannelThread, dev.kord.core.entity.channel.thread/TextChannelThread?, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel.thread/TextChannelThreadUpdateEvent.<init>|<init>(dev.kord.core.entity.channel.thread.TextChannelThread;dev.kord.core.entity.channel.thread.TextChannelThread?;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel.thread/TextChannelThreadUpdateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel.thread/TextChannelThread // dev.kord.core.event.channel.thread/TextChannelThreadUpdateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel.thread/TextChannelThreadUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel.thread/TextChannelThreadUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val old // dev.kord.core.event.channel.thread/TextChannelThreadUpdateEvent.old|{}old[0]
        final fun <get-old>(): dev.kord.core.entity.channel.thread/TextChannelThread? // dev.kord.core.event.channel.thread/TextChannelThreadUpdateEvent.old.<get-old>|<get-old>(){}[0]
    final val shard // dev.kord.core.event.channel.thread/TextChannelThreadUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel.thread/TextChannelThreadUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel.thread/TextChannelThreadUpdateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel.thread/ThreadListSyncEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.channel.thread/ThreadListSyncEvent|null[0]
    constructor <init>(dev.kord.core.cache.data/ThreadListSyncData, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.channel.thread/ThreadListSyncEvent.<init>|<init>(dev.kord.core.cache.data.ThreadListSyncData;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val channelBehaviors // dev.kord.core.event.channel.thread/ThreadListSyncEvent.channelBehaviors|{}channelBehaviors[0]
        final fun <get-channelBehaviors>(): kotlin.collections/List<dev.kord.core.behavior.channel.threads/ThreadParentChannelBehavior> // dev.kord.core.event.channel.thread/ThreadListSyncEvent.channelBehaviors.<get-channelBehaviors>|<get-channelBehaviors>(){}[0]
    final val channelIds // dev.kord.core.event.channel.thread/ThreadListSyncEvent.channelIds|{}channelIds[0]
        final fun <get-channelIds>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.core.event.channel.thread/ThreadListSyncEvent.channelIds.<get-channelIds>|<get-channelIds>(){}[0]
    final val channels // dev.kord.core.event.channel.thread/ThreadListSyncEvent.channels|{}channels[0]
        final fun <get-channels>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel/TopGuildChannel> // dev.kord.core.event.channel.thread/ThreadListSyncEvent.channels.<get-channels>|<get-channels>(){}[0]
    final val customContext // dev.kord.core.event.channel.thread/ThreadListSyncEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel.thread/ThreadListSyncEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val data // dev.kord.core.event.channel.thread/ThreadListSyncEvent.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ThreadListSyncData // dev.kord.core.event.channel.thread/ThreadListSyncEvent.data.<get-data>|<get-data>(){}[0]
    final val guild // dev.kord.core.event.channel.thread/ThreadListSyncEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.event.channel.thread/ThreadListSyncEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.channel.thread/ThreadListSyncEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.channel.thread/ThreadListSyncEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.channel.thread/ThreadListSyncEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.channel.thread/ThreadListSyncEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val members // dev.kord.core.event.channel.thread/ThreadListSyncEvent.members|{}members[0]
        final fun <get-members>(): kotlin.collections/List<dev.kord.core.entity.channel.thread/ThreadMember> // dev.kord.core.event.channel.thread/ThreadListSyncEvent.members.<get-members>|<get-members>(){}[0]
    final val shard // dev.kord.core.event.channel.thread/ThreadListSyncEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel.thread/ThreadListSyncEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.channel.thread/ThreadListSyncEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.channel.thread/ThreadListSyncEvent.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val threads // dev.kord.core.event.channel.thread/ThreadListSyncEvent.threads|{}threads[0]
        final fun <get-threads>(): kotlin.collections/List<dev.kord.core.entity.channel.thread/ThreadChannel> // dev.kord.core.event.channel.thread/ThreadListSyncEvent.threads.<get-threads>|<get-threads>(){}[0]

    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.channel.thread/ThreadListSyncEvent // dev.kord.core.event.channel.thread/ThreadListSyncEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.event.channel.thread/ThreadListSyncEvent.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.channel.thread/ThreadListSyncEvent.getGuildOrNull|getGuildOrNull(){}[0]
}

final class dev.kord.core.event.channel.thread/ThreadMemberUpdateEvent : dev.kord.core.event/Event { // dev.kord.core.event.channel.thread/ThreadMemberUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel.thread/ThreadMember, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel.thread/ThreadMemberUpdateEvent.<init>|<init>(dev.kord.core.entity.channel.thread.ThreadMember;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val customContext // dev.kord.core.event.channel.thread/ThreadMemberUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel.thread/ThreadMemberUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val kord // dev.kord.core.event.channel.thread/ThreadMemberUpdateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.channel.thread/ThreadMemberUpdateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val member // dev.kord.core.event.channel.thread/ThreadMemberUpdateEvent.member|{}member[0]
        final fun <get-member>(): dev.kord.core.entity.channel.thread/ThreadMember // dev.kord.core.event.channel.thread/ThreadMemberUpdateEvent.member.<get-member>|<get-member>(){}[0]
    final val shard // dev.kord.core.event.channel.thread/ThreadMemberUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel.thread/ThreadMemberUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.channel.thread/ThreadMembersUpdateEvent : dev.kord.core.event/Event { // dev.kord.core.event.channel.thread/ThreadMembersUpdateEvent|null[0]
    constructor <init>(dev.kord.core.cache.data/ThreadMembersUpdateEventData, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel.thread/ThreadMembersUpdateEvent.<init>|<init>(dev.kord.core.cache.data.ThreadMembersUpdateEventData;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val addedMembers // dev.kord.core.event.channel.thread/ThreadMembersUpdateEvent.addedMembers|{}addedMembers[0]
        final fun <get-addedMembers>(): kotlin.collections/List<dev.kord.core.entity.channel.thread/ThreadMember> // dev.kord.core.event.channel.thread/ThreadMembersUpdateEvent.addedMembers.<get-addedMembers>|<get-addedMembers>(){}[0]
    final val customContext // dev.kord.core.event.channel.thread/ThreadMembersUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel.thread/ThreadMembersUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val data // dev.kord.core.event.channel.thread/ThreadMembersUpdateEvent.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ThreadMembersUpdateEventData // dev.kord.core.event.channel.thread/ThreadMembersUpdateEvent.data.<get-data>|<get-data>(){}[0]
    final val guildId // dev.kord.core.event.channel.thread/ThreadMembersUpdateEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.channel.thread/ThreadMembersUpdateEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.core.event.channel.thread/ThreadMembersUpdateEvent.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.channel.thread/ThreadMembersUpdateEvent.id.<get-id>|<get-id>(){}[0]
    final val kord // dev.kord.core.event.channel.thread/ThreadMembersUpdateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.channel.thread/ThreadMembersUpdateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val memberCount // dev.kord.core.event.channel.thread/ThreadMembersUpdateEvent.memberCount|{}memberCount[0]
        final fun <get-memberCount>(): kotlin/Int // dev.kord.core.event.channel.thread/ThreadMembersUpdateEvent.memberCount.<get-memberCount>|<get-memberCount>(){}[0]
    final val removedMemberBehaviors // dev.kord.core.event.channel.thread/ThreadMembersUpdateEvent.removedMemberBehaviors|{}removedMemberBehaviors[0]
        final fun <get-removedMemberBehaviors>(): kotlin.collections/List<dev.kord.core.behavior/MemberBehavior> // dev.kord.core.event.channel.thread/ThreadMembersUpdateEvent.removedMemberBehaviors.<get-removedMemberBehaviors>|<get-removedMemberBehaviors>(){}[0]
    final val removedMemberIds // dev.kord.core.event.channel.thread/ThreadMembersUpdateEvent.removedMemberIds|{}removedMemberIds[0]
        final fun <get-removedMemberIds>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.core.event.channel.thread/ThreadMembersUpdateEvent.removedMemberIds.<get-removedMemberIds>|<get-removedMemberIds>(){}[0]
    final val shard // dev.kord.core.event.channel.thread/ThreadMembersUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel.thread/ThreadMembersUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.channel.thread/UnknownChannelThreadCreateEvent : dev.kord.core.event.channel.thread/ThreadChannelCreateEvent { // dev.kord.core.event.channel.thread/UnknownChannelThreadCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel.thread/ThreadChannel, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel.thread/UnknownChannelThreadCreateEvent.<init>|<init>(dev.kord.core.entity.channel.thread.ThreadChannel;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel.thread/UnknownChannelThreadCreateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel.thread/ThreadChannel // dev.kord.core.event.channel.thread/UnknownChannelThreadCreateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel.thread/UnknownChannelThreadCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel.thread/UnknownChannelThreadCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val shard // dev.kord.core.event.channel.thread/UnknownChannelThreadCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel.thread/UnknownChannelThreadCreateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel.thread/UnknownChannelThreadCreateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel.thread/UnknownChannelThreadDeleteEvent : dev.kord.core.event.channel.thread/ThreadChannelDeleteEvent { // dev.kord.core.event.channel.thread/UnknownChannelThreadDeleteEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel.thread/DeletedThreadChannel, dev.kord.core.entity.channel.thread/ThreadChannel?, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel.thread/UnknownChannelThreadDeleteEvent.<init>|<init>(dev.kord.core.entity.channel.thread.DeletedThreadChannel;dev.kord.core.entity.channel.thread.ThreadChannel?;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel.thread/UnknownChannelThreadDeleteEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel.thread/DeletedThreadChannel // dev.kord.core.event.channel.thread/UnknownChannelThreadDeleteEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel.thread/UnknownChannelThreadDeleteEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel.thread/UnknownChannelThreadDeleteEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val old // dev.kord.core.event.channel.thread/UnknownChannelThreadDeleteEvent.old|{}old[0]
        final fun <get-old>(): dev.kord.core.entity.channel.thread/ThreadChannel? // dev.kord.core.event.channel.thread/UnknownChannelThreadDeleteEvent.old.<get-old>|<get-old>(){}[0]
    final val shard // dev.kord.core.event.channel.thread/UnknownChannelThreadDeleteEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel.thread/UnknownChannelThreadDeleteEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel.thread/UnknownChannelThreadDeleteEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel.thread/UnknownChannelThreadUpdateEvent : dev.kord.core.event.channel.thread/ThreadUpdateEvent { // dev.kord.core.event.channel.thread/UnknownChannelThreadUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel.thread/ThreadChannel, dev.kord.core.entity.channel.thread/ThreadChannel?, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel.thread/UnknownChannelThreadUpdateEvent.<init>|<init>(dev.kord.core.entity.channel.thread.ThreadChannel;dev.kord.core.entity.channel.thread.ThreadChannel?;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel.thread/UnknownChannelThreadUpdateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel.thread/ThreadChannel // dev.kord.core.event.channel.thread/UnknownChannelThreadUpdateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel.thread/UnknownChannelThreadUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel.thread/UnknownChannelThreadUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val old // dev.kord.core.event.channel.thread/UnknownChannelThreadUpdateEvent.old|{}old[0]
        final fun <get-old>(): dev.kord.core.entity.channel.thread/ThreadChannel? // dev.kord.core.event.channel.thread/UnknownChannelThreadUpdateEvent.old.<get-old>|<get-old>(){}[0]
    final val shard // dev.kord.core.event.channel.thread/UnknownChannelThreadUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel.thread/UnknownChannelThreadUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel.thread/UnknownChannelThreadUpdateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/CategoryCreateEvent : dev.kord.core.event.channel/ChannelCreateEvent { // dev.kord.core.event.channel/CategoryCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/Category, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/CategoryCreateEvent.<init>|<init>(dev.kord.core.entity.channel.Category;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/CategoryCreateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/Category // dev.kord.core.event.channel/CategoryCreateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/CategoryCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/CategoryCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val shard // dev.kord.core.event.channel/CategoryCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/CategoryCreateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/CategoryCreateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/CategoryDeleteEvent : dev.kord.core.event.channel/ChannelDeleteEvent { // dev.kord.core.event.channel/CategoryDeleteEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/Category, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/CategoryDeleteEvent.<init>|<init>(dev.kord.core.entity.channel.Category;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/CategoryDeleteEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/Category // dev.kord.core.event.channel/CategoryDeleteEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/CategoryDeleteEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/CategoryDeleteEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val shard // dev.kord.core.event.channel/CategoryDeleteEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/CategoryDeleteEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/CategoryDeleteEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/CategoryUpdateEvent : dev.kord.core.event.channel/ChannelUpdateEvent { // dev.kord.core.event.channel/CategoryUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/Category, dev.kord.core.entity.channel/Category?, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/CategoryUpdateEvent.<init>|<init>(dev.kord.core.entity.channel.Category;dev.kord.core.entity.channel.Category?;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/CategoryUpdateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/Category // dev.kord.core.event.channel/CategoryUpdateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/CategoryUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/CategoryUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val old // dev.kord.core.event.channel/CategoryUpdateEvent.old|{}old[0]
        final fun <get-old>(): dev.kord.core.entity.channel/Category? // dev.kord.core.event.channel/CategoryUpdateEvent.old.<get-old>|<get-old>(){}[0]
    final val shard // dev.kord.core.event.channel/CategoryUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/CategoryUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/CategoryUpdateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/ChannelPinsUpdateEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.channel/ChannelPinsUpdateEvent|null[0]
    constructor <init>(dev.kord.core.event.channel.data/ChannelPinsUpdateEventData, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.channel/ChannelPinsUpdateEvent.<init>|<init>(dev.kord.core.event.channel.data.ChannelPinsUpdateEventData;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val channel // dev.kord.core.event.channel/ChannelPinsUpdateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.behavior.channel/MessageChannelBehavior // dev.kord.core.event.channel/ChannelPinsUpdateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val channelId // dev.kord.core.event.channel/ChannelPinsUpdateEvent.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.channel/ChannelPinsUpdateEvent.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val customContext // dev.kord.core.event.channel/ChannelPinsUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/ChannelPinsUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val data // dev.kord.core.event.channel/ChannelPinsUpdateEvent.data|{}data[0]
        final fun <get-data>(): dev.kord.core.event.channel.data/ChannelPinsUpdateEventData // dev.kord.core.event.channel/ChannelPinsUpdateEvent.data.<get-data>|<get-data>(){}[0]
    final val guild // dev.kord.core.event.channel/ChannelPinsUpdateEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior? // dev.kord.core.event.channel/ChannelPinsUpdateEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.channel/ChannelPinsUpdateEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.event.channel/ChannelPinsUpdateEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.channel/ChannelPinsUpdateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.channel/ChannelPinsUpdateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val lastPinTimestamp // dev.kord.core.event.channel/ChannelPinsUpdateEvent.lastPinTimestamp|{}lastPinTimestamp[0]
        final fun <get-lastPinTimestamp>(): kotlinx.datetime/Instant? // dev.kord.core.event.channel/ChannelPinsUpdateEvent.lastPinTimestamp.<get-lastPinTimestamp>|<get-lastPinTimestamp>(){}[0]
    final val shard // dev.kord.core.event.channel/ChannelPinsUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/ChannelPinsUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.channel/ChannelPinsUpdateEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.channel/ChannelPinsUpdateEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/ChannelPinsUpdateEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.channel/ChannelPinsUpdateEvent // dev.kord.core.event.channel/ChannelPinsUpdateEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getChannel(): dev.kord.core.entity.channel/MessageChannel // dev.kord.core.event.channel/ChannelPinsUpdateEvent.getChannel|getChannel(){}[0]
    final suspend fun getChannelOrNull(): dev.kord.core.entity.channel/MessageChannel? // dev.kord.core.event.channel/ChannelPinsUpdateEvent.getChannelOrNull|getChannelOrNull(){}[0]
}

final class dev.kord.core.event.channel/DMChannelCreateEvent : dev.kord.core.event.channel/ChannelCreateEvent { // dev.kord.core.event.channel/DMChannelCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/DmChannel, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/DMChannelCreateEvent.<init>|<init>(dev.kord.core.entity.channel.DmChannel;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/DMChannelCreateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/DmChannel // dev.kord.core.event.channel/DMChannelCreateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/DMChannelCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/DMChannelCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val shard // dev.kord.core.event.channel/DMChannelCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/DMChannelCreateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/DMChannelCreateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/DMChannelDeleteEvent : dev.kord.core.event.channel/ChannelDeleteEvent { // dev.kord.core.event.channel/DMChannelDeleteEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/DmChannel, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/DMChannelDeleteEvent.<init>|<init>(dev.kord.core.entity.channel.DmChannel;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/DMChannelDeleteEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/DmChannel // dev.kord.core.event.channel/DMChannelDeleteEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/DMChannelDeleteEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/DMChannelDeleteEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val shard // dev.kord.core.event.channel/DMChannelDeleteEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/DMChannelDeleteEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/DMChannelDeleteEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/DMChannelUpdateEvent : dev.kord.core.event.channel/ChannelUpdateEvent { // dev.kord.core.event.channel/DMChannelUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/DmChannel, dev.kord.core.entity.channel/DmChannel?, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/DMChannelUpdateEvent.<init>|<init>(dev.kord.core.entity.channel.DmChannel;dev.kord.core.entity.channel.DmChannel?;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/DMChannelUpdateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/DmChannel // dev.kord.core.event.channel/DMChannelUpdateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/DMChannelUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/DMChannelUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val old // dev.kord.core.event.channel/DMChannelUpdateEvent.old|{}old[0]
        final fun <get-old>(): dev.kord.core.entity.channel/DmChannel? // dev.kord.core.event.channel/DMChannelUpdateEvent.old.<get-old>|<get-old>(){}[0]
    final val shard // dev.kord.core.event.channel/DMChannelUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/DMChannelUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/DMChannelUpdateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/ForumChannelCreateEvent : dev.kord.core.event.channel/ChannelCreateEvent { // dev.kord.core.event.channel/ForumChannelCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/ForumChannel, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/ForumChannelCreateEvent.<init>|<init>(dev.kord.core.entity.channel.ForumChannel;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/ForumChannelCreateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/ForumChannel // dev.kord.core.event.channel/ForumChannelCreateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/ForumChannelCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/ForumChannelCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val shard // dev.kord.core.event.channel/ForumChannelCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/ForumChannelCreateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/ForumChannelCreateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/ForumChannelDeleteEvent : dev.kord.core.event.channel/ChannelDeleteEvent { // dev.kord.core.event.channel/ForumChannelDeleteEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/ForumChannel, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/ForumChannelDeleteEvent.<init>|<init>(dev.kord.core.entity.channel.ForumChannel;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/ForumChannelDeleteEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/ForumChannel // dev.kord.core.event.channel/ForumChannelDeleteEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/ForumChannelDeleteEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/ForumChannelDeleteEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val shard // dev.kord.core.event.channel/ForumChannelDeleteEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/ForumChannelDeleteEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/ForumChannelDeleteEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/ForumChannelUpdateEvent : dev.kord.core.event.channel/ChannelUpdateEvent { // dev.kord.core.event.channel/ForumChannelUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/ForumChannel, dev.kord.core.entity.channel/ForumChannel?, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/ForumChannelUpdateEvent.<init>|<init>(dev.kord.core.entity.channel.ForumChannel;dev.kord.core.entity.channel.ForumChannel?;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/ForumChannelUpdateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/ForumChannel // dev.kord.core.event.channel/ForumChannelUpdateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/ForumChannelUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/ForumChannelUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val old // dev.kord.core.event.channel/ForumChannelUpdateEvent.old|{}old[0]
        final fun <get-old>(): dev.kord.core.entity.channel/ForumChannel? // dev.kord.core.event.channel/ForumChannelUpdateEvent.old.<get-old>|<get-old>(){}[0]
    final val shard // dev.kord.core.event.channel/ForumChannelUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/ForumChannelUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/ForumChannelUpdateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/MediaChannelCreateEvent : dev.kord.core.event.channel/ChannelCreateEvent { // dev.kord.core.event.channel/MediaChannelCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/MediaChannel, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/MediaChannelCreateEvent.<init>|<init>(dev.kord.core.entity.channel.MediaChannel;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/MediaChannelCreateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/MediaChannel // dev.kord.core.event.channel/MediaChannelCreateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/MediaChannelCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/MediaChannelCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val shard // dev.kord.core.event.channel/MediaChannelCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/MediaChannelCreateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/MediaChannelCreateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/MediaChannelDeleteEvent : dev.kord.core.event.channel/ChannelDeleteEvent { // dev.kord.core.event.channel/MediaChannelDeleteEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/MediaChannel, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/MediaChannelDeleteEvent.<init>|<init>(dev.kord.core.entity.channel.MediaChannel;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/MediaChannelDeleteEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/MediaChannel // dev.kord.core.event.channel/MediaChannelDeleteEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/MediaChannelDeleteEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/MediaChannelDeleteEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val shard // dev.kord.core.event.channel/MediaChannelDeleteEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/MediaChannelDeleteEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/MediaChannelDeleteEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/MediaChannelUpdateEvent : dev.kord.core.event.channel/ChannelUpdateEvent { // dev.kord.core.event.channel/MediaChannelUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/MediaChannel, dev.kord.core.entity.channel/MediaChannel?, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/MediaChannelUpdateEvent.<init>|<init>(dev.kord.core.entity.channel.MediaChannel;dev.kord.core.entity.channel.MediaChannel?;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/MediaChannelUpdateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/MediaChannel // dev.kord.core.event.channel/MediaChannelUpdateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/MediaChannelUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/MediaChannelUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val old // dev.kord.core.event.channel/MediaChannelUpdateEvent.old|{}old[0]
        final fun <get-old>(): dev.kord.core.entity.channel/MediaChannel? // dev.kord.core.event.channel/MediaChannelUpdateEvent.old.<get-old>|<get-old>(){}[0]
    final val shard // dev.kord.core.event.channel/MediaChannelUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/MediaChannelUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/MediaChannelUpdateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/NewsChannelCreateEvent : dev.kord.core.event.channel/ChannelCreateEvent { // dev.kord.core.event.channel/NewsChannelCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/NewsChannel, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/NewsChannelCreateEvent.<init>|<init>(dev.kord.core.entity.channel.NewsChannel;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/NewsChannelCreateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/NewsChannel // dev.kord.core.event.channel/NewsChannelCreateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/NewsChannelCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/NewsChannelCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val shard // dev.kord.core.event.channel/NewsChannelCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/NewsChannelCreateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/NewsChannelCreateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/NewsChannelDeleteEvent : dev.kord.core.event.channel/ChannelDeleteEvent { // dev.kord.core.event.channel/NewsChannelDeleteEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/NewsChannel, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/NewsChannelDeleteEvent.<init>|<init>(dev.kord.core.entity.channel.NewsChannel;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/NewsChannelDeleteEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/NewsChannel // dev.kord.core.event.channel/NewsChannelDeleteEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/NewsChannelDeleteEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/NewsChannelDeleteEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val shard // dev.kord.core.event.channel/NewsChannelDeleteEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/NewsChannelDeleteEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/NewsChannelDeleteEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/NewsChannelUpdateEvent : dev.kord.core.event.channel/ChannelUpdateEvent { // dev.kord.core.event.channel/NewsChannelUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/NewsChannel, dev.kord.core.entity.channel/NewsChannel?, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/NewsChannelUpdateEvent.<init>|<init>(dev.kord.core.entity.channel.NewsChannel;dev.kord.core.entity.channel.NewsChannel?;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/NewsChannelUpdateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/NewsChannel // dev.kord.core.event.channel/NewsChannelUpdateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/NewsChannelUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/NewsChannelUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val old // dev.kord.core.event.channel/NewsChannelUpdateEvent.old|{}old[0]
        final fun <get-old>(): dev.kord.core.entity.channel/NewsChannel? // dev.kord.core.event.channel/NewsChannelUpdateEvent.old.<get-old>|<get-old>(){}[0]
    final val shard // dev.kord.core.event.channel/NewsChannelUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/NewsChannelUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/NewsChannelUpdateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/StageChannelCreateEvent : dev.kord.core.event.channel/ChannelCreateEvent { // dev.kord.core.event.channel/StageChannelCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/StageChannel, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/StageChannelCreateEvent.<init>|<init>(dev.kord.core.entity.channel.StageChannel;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/StageChannelCreateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/StageChannel // dev.kord.core.event.channel/StageChannelCreateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/StageChannelCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/StageChannelCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val shard // dev.kord.core.event.channel/StageChannelCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/StageChannelCreateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/StageChannelCreateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/StageChannelDeleteEvent : dev.kord.core.event.channel/ChannelDeleteEvent { // dev.kord.core.event.channel/StageChannelDeleteEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/StageChannel, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/StageChannelDeleteEvent.<init>|<init>(dev.kord.core.entity.channel.StageChannel;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/StageChannelDeleteEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/StageChannel // dev.kord.core.event.channel/StageChannelDeleteEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/StageChannelDeleteEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/StageChannelDeleteEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val shard // dev.kord.core.event.channel/StageChannelDeleteEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/StageChannelDeleteEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/StageChannelDeleteEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/StageChannelUpdateEvent : dev.kord.core.event.channel/ChannelUpdateEvent { // dev.kord.core.event.channel/StageChannelUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/StageChannel, dev.kord.core.entity.channel/StageChannel?, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/StageChannelUpdateEvent.<init>|<init>(dev.kord.core.entity.channel.StageChannel;dev.kord.core.entity.channel.StageChannel?;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/StageChannelUpdateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/StageChannel // dev.kord.core.event.channel/StageChannelUpdateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/StageChannelUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/StageChannelUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val old // dev.kord.core.event.channel/StageChannelUpdateEvent.old|{}old[0]
        final fun <get-old>(): dev.kord.core.entity.channel/StageChannel? // dev.kord.core.event.channel/StageChannelUpdateEvent.old.<get-old>|<get-old>(){}[0]
    final val shard // dev.kord.core.event.channel/StageChannelUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/StageChannelUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/StageChannelUpdateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/TextChannelCreateEvent : dev.kord.core.event.channel/ChannelCreateEvent { // dev.kord.core.event.channel/TextChannelCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/TextChannel, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/TextChannelCreateEvent.<init>|<init>(dev.kord.core.entity.channel.TextChannel;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/TextChannelCreateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/TextChannel // dev.kord.core.event.channel/TextChannelCreateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/TextChannelCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/TextChannelCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val shard // dev.kord.core.event.channel/TextChannelCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/TextChannelCreateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/TextChannelCreateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/TextChannelDeleteEvent : dev.kord.core.event.channel/ChannelDeleteEvent { // dev.kord.core.event.channel/TextChannelDeleteEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/TextChannel, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/TextChannelDeleteEvent.<init>|<init>(dev.kord.core.entity.channel.TextChannel;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/TextChannelDeleteEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/TextChannel // dev.kord.core.event.channel/TextChannelDeleteEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/TextChannelDeleteEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/TextChannelDeleteEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val shard // dev.kord.core.event.channel/TextChannelDeleteEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/TextChannelDeleteEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/TextChannelDeleteEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/TextChannelUpdateEvent : dev.kord.core.event.channel/ChannelUpdateEvent { // dev.kord.core.event.channel/TextChannelUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/TextChannel, dev.kord.core.entity.channel/TextChannel?, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/TextChannelUpdateEvent.<init>|<init>(dev.kord.core.entity.channel.TextChannel;dev.kord.core.entity.channel.TextChannel?;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/TextChannelUpdateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/TextChannel // dev.kord.core.event.channel/TextChannelUpdateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/TextChannelUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/TextChannelUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val old // dev.kord.core.event.channel/TextChannelUpdateEvent.old|{}old[0]
        final fun <get-old>(): dev.kord.core.entity.channel/TextChannel? // dev.kord.core.event.channel/TextChannelUpdateEvent.old.<get-old>|<get-old>(){}[0]
    final val shard // dev.kord.core.event.channel/TextChannelUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/TextChannelUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/TextChannelUpdateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/TypingStartEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.channel/TypingStartEvent|null[0]
    constructor <init>(dev.kord.core.event.channel.data/TypingStartEventData, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.channel/TypingStartEvent.<init>|<init>(dev.kord.core.event.channel.data.TypingStartEventData;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val channel // dev.kord.core.event.channel/TypingStartEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.behavior.channel/MessageChannelBehavior // dev.kord.core.event.channel/TypingStartEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val channelId // dev.kord.core.event.channel/TypingStartEvent.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.channel/TypingStartEvent.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val customContext // dev.kord.core.event.channel/TypingStartEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/TypingStartEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val data // dev.kord.core.event.channel/TypingStartEvent.data|{}data[0]
        final fun <get-data>(): dev.kord.core.event.channel.data/TypingStartEventData // dev.kord.core.event.channel/TypingStartEvent.data.<get-data>|<get-data>(){}[0]
    final val guild // dev.kord.core.event.channel/TypingStartEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior? // dev.kord.core.event.channel/TypingStartEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.channel/TypingStartEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.event.channel/TypingStartEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.channel/TypingStartEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.channel/TypingStartEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.channel/TypingStartEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/TypingStartEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val started // dev.kord.core.event.channel/TypingStartEvent.started|{}started[0]
        final fun <get-started>(): kotlinx.datetime/Instant // dev.kord.core.event.channel/TypingStartEvent.started.<get-started>|<get-started>(){}[0]
    final val supplier // dev.kord.core.event.channel/TypingStartEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.channel/TypingStartEvent.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val user // dev.kord.core.event.channel/TypingStartEvent.user|{}user[0]
        final fun <get-user>(): dev.kord.core.behavior/UserBehavior // dev.kord.core.event.channel/TypingStartEvent.user.<get-user>|<get-user>(){}[0]
    final val userId // dev.kord.core.event.channel/TypingStartEvent.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.channel/TypingStartEvent.userId.<get-userId>|<get-userId>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/TypingStartEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.channel/TypingStartEvent // dev.kord.core.event.channel/TypingStartEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getChannel(): dev.kord.core.entity.channel/MessageChannel // dev.kord.core.event.channel/TypingStartEvent.getChannel|getChannel(){}[0]
    final suspend fun getChannelOrNull(): dev.kord.core.entity.channel/MessageChannel? // dev.kord.core.event.channel/TypingStartEvent.getChannelOrNull|getChannelOrNull(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.channel/TypingStartEvent.getGuildOrNull|getGuildOrNull(){}[0]
    final suspend fun getUser(): dev.kord.core.entity/User // dev.kord.core.event.channel/TypingStartEvent.getUser|getUser(){}[0]
    final suspend fun getUserOrNull(): dev.kord.core.entity/User? // dev.kord.core.event.channel/TypingStartEvent.getUserOrNull|getUserOrNull(){}[0]
}

final class dev.kord.core.event.channel/UnknownChannelCreateEvent : dev.kord.core.event.channel/ChannelCreateEvent { // dev.kord.core.event.channel/UnknownChannelCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/Channel, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/UnknownChannelCreateEvent.<init>|<init>(dev.kord.core.entity.channel.Channel;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/UnknownChannelCreateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/Channel // dev.kord.core.event.channel/UnknownChannelCreateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/UnknownChannelCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/UnknownChannelCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val shard // dev.kord.core.event.channel/UnknownChannelCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/UnknownChannelCreateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/UnknownChannelCreateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/UnknownChannelDeleteEvent : dev.kord.core.event.channel/ChannelDeleteEvent { // dev.kord.core.event.channel/UnknownChannelDeleteEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/Channel, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/UnknownChannelDeleteEvent.<init>|<init>(dev.kord.core.entity.channel.Channel;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/UnknownChannelDeleteEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/Channel // dev.kord.core.event.channel/UnknownChannelDeleteEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/UnknownChannelDeleteEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/UnknownChannelDeleteEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val shard // dev.kord.core.event.channel/UnknownChannelDeleteEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/UnknownChannelDeleteEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/UnknownChannelDeleteEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/UnknownChannelUpdateEvent : dev.kord.core.event.channel/ChannelUpdateEvent { // dev.kord.core.event.channel/UnknownChannelUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/Channel, dev.kord.core.entity.channel/Channel?, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/UnknownChannelUpdateEvent.<init>|<init>(dev.kord.core.entity.channel.Channel;dev.kord.core.entity.channel.Channel?;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/UnknownChannelUpdateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/Channel // dev.kord.core.event.channel/UnknownChannelUpdateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/UnknownChannelUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/UnknownChannelUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val old // dev.kord.core.event.channel/UnknownChannelUpdateEvent.old|{}old[0]
        final fun <get-old>(): dev.kord.core.entity.channel/Channel? // dev.kord.core.event.channel/UnknownChannelUpdateEvent.old.<get-old>|<get-old>(){}[0]
    final val shard // dev.kord.core.event.channel/UnknownChannelUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/UnknownChannelUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/UnknownChannelUpdateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/VoiceChannelCreateEvent : dev.kord.core.event.channel/ChannelCreateEvent { // dev.kord.core.event.channel/VoiceChannelCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/VoiceChannel, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/VoiceChannelCreateEvent.<init>|<init>(dev.kord.core.entity.channel.VoiceChannel;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/VoiceChannelCreateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/VoiceChannel // dev.kord.core.event.channel/VoiceChannelCreateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/VoiceChannelCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/VoiceChannelCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val shard // dev.kord.core.event.channel/VoiceChannelCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/VoiceChannelCreateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/VoiceChannelCreateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/VoiceChannelDeleteEvent : dev.kord.core.event.channel/ChannelDeleteEvent { // dev.kord.core.event.channel/VoiceChannelDeleteEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/VoiceChannel, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/VoiceChannelDeleteEvent.<init>|<init>(dev.kord.core.entity.channel.VoiceChannel;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/VoiceChannelDeleteEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/VoiceChannel // dev.kord.core.event.channel/VoiceChannelDeleteEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/VoiceChannelDeleteEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/VoiceChannelDeleteEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val shard // dev.kord.core.event.channel/VoiceChannelDeleteEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/VoiceChannelDeleteEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/VoiceChannelDeleteEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.channel/VoiceChannelUpdateEvent : dev.kord.core.event.channel/ChannelUpdateEvent { // dev.kord.core.event.channel/VoiceChannelUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity.channel/VoiceChannel, dev.kord.core.entity.channel/VoiceChannel?, kotlin/Int, kotlin/Any?) // dev.kord.core.event.channel/VoiceChannelUpdateEvent.<init>|<init>(dev.kord.core.entity.channel.VoiceChannel;dev.kord.core.entity.channel.VoiceChannel?;kotlin.Int;kotlin.Any?){}[0]

    final val channel // dev.kord.core.event.channel/VoiceChannelUpdateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/VoiceChannel // dev.kord.core.event.channel/VoiceChannelUpdateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val customContext // dev.kord.core.event.channel/VoiceChannelUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.channel/VoiceChannelUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val old // dev.kord.core.event.channel/VoiceChannelUpdateEvent.old|{}old[0]
        final fun <get-old>(): dev.kord.core.entity.channel/VoiceChannel? // dev.kord.core.event.channel/VoiceChannelUpdateEvent.old.<get-old>|<get-old>(){}[0]
    final val shard // dev.kord.core.event.channel/VoiceChannelUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.channel/VoiceChannelUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.channel/VoiceChannelUpdateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.gateway/ConnectEvent : dev.kord.core.event.gateway/GatewayEvent { // dev.kord.core.event.gateway/ConnectEvent|null[0]
    constructor <init>(dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.gateway/ConnectEvent.<init>|<init>(dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val customContext // dev.kord.core.event.gateway/ConnectEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.gateway/ConnectEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val kord // dev.kord.core.event.gateway/ConnectEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.gateway/ConnectEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.gateway/ConnectEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.gateway/ConnectEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.gateway/ReadyEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event.gateway/GatewayEvent { // dev.kord.core.event.gateway/ReadyEvent|null[0]
    constructor <init>(kotlin/Int, kotlin.collections/Set<dev.kord.common.entity/Snowflake>, dev.kord.core.entity/User, kotlin/String, kotlin/String, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.gateway/ReadyEvent.<init>|<init>(kotlin.Int;kotlin.collections.Set<dev.kord.common.entity.Snowflake>;dev.kord.core.entity.User;kotlin.String;kotlin.String;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val customContext // dev.kord.core.event.gateway/ReadyEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.gateway/ReadyEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val gatewayVersion // dev.kord.core.event.gateway/ReadyEvent.gatewayVersion|{}gatewayVersion[0]
        final fun <get-gatewayVersion>(): kotlin/Int // dev.kord.core.event.gateway/ReadyEvent.gatewayVersion.<get-gatewayVersion>|<get-gatewayVersion>(){}[0]
    final val guildIds // dev.kord.core.event.gateway/ReadyEvent.guildIds|{}guildIds[0]
        final fun <get-guildIds>(): kotlin.collections/Set<dev.kord.common.entity/Snowflake> // dev.kord.core.event.gateway/ReadyEvent.guildIds.<get-guildIds>|<get-guildIds>(){}[0]
    final val guilds // dev.kord.core.event.gateway/ReadyEvent.guilds|{}guilds[0]
        final fun <get-guilds>(): kotlin.collections/Set<dev.kord.core.behavior/GuildBehavior> // dev.kord.core.event.gateway/ReadyEvent.guilds.<get-guilds>|<get-guilds>(){}[0]
    final val kord // dev.kord.core.event.gateway/ReadyEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.gateway/ReadyEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val resumeGatewayUrl // dev.kord.core.event.gateway/ReadyEvent.resumeGatewayUrl|{}resumeGatewayUrl[0]
        final fun <get-resumeGatewayUrl>(): kotlin/String // dev.kord.core.event.gateway/ReadyEvent.resumeGatewayUrl.<get-resumeGatewayUrl>|<get-resumeGatewayUrl>(){}[0]
    final val self // dev.kord.core.event.gateway/ReadyEvent.self|{}self[0]
        final fun <get-self>(): dev.kord.core.entity/User // dev.kord.core.event.gateway/ReadyEvent.self.<get-self>|<get-self>(){}[0]
    final val sessionId // dev.kord.core.event.gateway/ReadyEvent.sessionId|{}sessionId[0]
        final fun <get-sessionId>(): kotlin/String // dev.kord.core.event.gateway/ReadyEvent.sessionId.<get-sessionId>|<get-sessionId>(){}[0]
    final val shard // dev.kord.core.event.gateway/ReadyEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.gateway/ReadyEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.gateway/ReadyEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.gateway/ReadyEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun getGuilds(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Guild> // dev.kord.core.event.gateway/ReadyEvent.getGuilds|getGuilds(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.event.gateway/ReadyEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.gateway/ReadyEvent // dev.kord.core.event.gateway/ReadyEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.event.gateway/ResumedEvent : dev.kord.core.event.gateway/GatewayEvent { // dev.kord.core.event.gateway/ResumedEvent|null[0]
    constructor <init>(dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.gateway/ResumedEvent.<init>|<init>(dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val customContext // dev.kord.core.event.gateway/ResumedEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.gateway/ResumedEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val kord // dev.kord.core.event.gateway/ResumedEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.gateway/ResumedEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.gateway/ResumedEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.gateway/ResumedEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.gateway/ResumedEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.guild/BanAddEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.guild/BanAddEvent|null[0]
    constructor <init>(dev.kord.core.entity/User, dev.kord.common.entity/Snowflake, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.guild/BanAddEvent.<init>|<init>(dev.kord.core.entity.User;dev.kord.common.entity.Snowflake;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val customContext // dev.kord.core.event.guild/BanAddEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.guild/BanAddEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val guild // dev.kord.core.event.guild/BanAddEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.event.guild/BanAddEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.guild/BanAddEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/BanAddEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.guild/BanAddEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.guild/BanAddEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.guild/BanAddEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.guild/BanAddEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.guild/BanAddEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.guild/BanAddEvent.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val user // dev.kord.core.event.guild/BanAddEvent.user|{}user[0]
        final fun <get-user>(): dev.kord.core.entity/User // dev.kord.core.event.guild/BanAddEvent.user.<get-user>|<get-user>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.guild/BanAddEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.guild/BanAddEvent // dev.kord.core.event.guild/BanAddEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getBan(): dev.kord.core.entity/Ban // dev.kord.core.event.guild/BanAddEvent.getBan|getBan(){}[0]
    final suspend fun getBanOrNull(): dev.kord.core.entity/Ban? // dev.kord.core.event.guild/BanAddEvent.getBanOrNull|getBanOrNull(){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.event.guild/BanAddEvent.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.guild/BanAddEvent.getGuildOrNull|getGuildOrNull(){}[0]
}

final class dev.kord.core.event.guild/BanRemoveEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.guild/BanRemoveEvent|null[0]
    constructor <init>(dev.kord.core.entity/User, dev.kord.common.entity/Snowflake, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.guild/BanRemoveEvent.<init>|<init>(dev.kord.core.entity.User;dev.kord.common.entity.Snowflake;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val customContext // dev.kord.core.event.guild/BanRemoveEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.guild/BanRemoveEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val guild // dev.kord.core.event.guild/BanRemoveEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.event.guild/BanRemoveEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.guild/BanRemoveEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/BanRemoveEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.guild/BanRemoveEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.guild/BanRemoveEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.guild/BanRemoveEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.guild/BanRemoveEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.guild/BanRemoveEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.guild/BanRemoveEvent.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val user // dev.kord.core.event.guild/BanRemoveEvent.user|{}user[0]
        final fun <get-user>(): dev.kord.core.entity/User // dev.kord.core.event.guild/BanRemoveEvent.user.<get-user>|<get-user>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.guild/BanRemoveEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.guild/BanRemoveEvent // dev.kord.core.event.guild/BanRemoveEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.event.guild/BanRemoveEvent.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.guild/BanRemoveEvent.getGuildOrNull|getGuildOrNull(){}[0]
}

final class dev.kord.core.event.guild/EmojisUpdateEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.guild/EmojisUpdateEvent|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin.collections/Set<dev.kord.core.entity/GuildEmoji>, kotlin.collections/Set<dev.kord.core.entity/GuildEmoji>?, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.guild/EmojisUpdateEvent.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.collections.Set<dev.kord.core.entity.GuildEmoji>;kotlin.collections.Set<dev.kord.core.entity.GuildEmoji>?;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val customContext // dev.kord.core.event.guild/EmojisUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.guild/EmojisUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val emojis // dev.kord.core.event.guild/EmojisUpdateEvent.emojis|{}emojis[0]
        final fun <get-emojis>(): kotlin.collections/Set<dev.kord.core.entity/GuildEmoji> // dev.kord.core.event.guild/EmojisUpdateEvent.emojis.<get-emojis>|<get-emojis>(){}[0]
    final val guild // dev.kord.core.event.guild/EmojisUpdateEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.event.guild/EmojisUpdateEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.guild/EmojisUpdateEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/EmojisUpdateEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.guild/EmojisUpdateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.guild/EmojisUpdateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val old // dev.kord.core.event.guild/EmojisUpdateEvent.old|{}old[0]
        final fun <get-old>(): kotlin.collections/Set<dev.kord.core.entity/GuildEmoji>? // dev.kord.core.event.guild/EmojisUpdateEvent.old.<get-old>|<get-old>(){}[0]
    final val shard // dev.kord.core.event.guild/EmojisUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.guild/EmojisUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.guild/EmojisUpdateEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.guild/EmojisUpdateEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.guild/EmojisUpdateEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.guild/EmojisUpdateEvent // dev.kord.core.event.guild/EmojisUpdateEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.event.guild/EmojisUpdateEvent.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.guild/EmojisUpdateEvent.getGuildOrNull|getGuildOrNull(){}[0]
}

final class dev.kord.core.event.guild/GuildAuditLogEntryCreateEvent : dev.kord.core.event/Event { // dev.kord.core.event.guild/GuildAuditLogEntryCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity/AuditLogEntry, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.guild/GuildAuditLogEntryCreateEvent.<init>|<init>(dev.kord.core.entity.AuditLogEntry;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val auditLogEntry // dev.kord.core.event.guild/GuildAuditLogEntryCreateEvent.auditLogEntry|{}auditLogEntry[0]
        final fun <get-auditLogEntry>(): dev.kord.core.entity/AuditLogEntry // dev.kord.core.event.guild/GuildAuditLogEntryCreateEvent.auditLogEntry.<get-auditLogEntry>|<get-auditLogEntry>(){}[0]
    final val customContext // dev.kord.core.event.guild/GuildAuditLogEntryCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.guild/GuildAuditLogEntryCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val kord // dev.kord.core.event.guild/GuildAuditLogEntryCreateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.guild/GuildAuditLogEntryCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.guild/GuildAuditLogEntryCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.guild/GuildAuditLogEntryCreateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.guild/GuildAuditLogEntryCreateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.guild/GuildCreateEvent : dev.kord.core.event/Event { // dev.kord.core.event.guild/GuildCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity/Guild, kotlin/Int, kotlin/Any?) // dev.kord.core.event.guild/GuildCreateEvent.<init>|<init>(dev.kord.core.entity.Guild;kotlin.Int;kotlin.Any?){}[0]

    final val customContext // dev.kord.core.event.guild/GuildCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.guild/GuildCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val guild // dev.kord.core.event.guild/GuildCreateEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.entity/Guild // dev.kord.core.event.guild/GuildCreateEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val kord // dev.kord.core.event.guild/GuildCreateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.guild/GuildCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.guild/GuildCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.guild/GuildCreateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.guild/GuildCreateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.guild/GuildDeleteEvent : dev.kord.core.event/Event { // dev.kord.core.event.guild/GuildDeleteEvent|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/Boolean, dev.kord.core.entity/Guild?, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.guild/GuildDeleteEvent.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.Boolean;dev.kord.core.entity.Guild?;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val customContext // dev.kord.core.event.guild/GuildDeleteEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.guild/GuildDeleteEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val guild // dev.kord.core.event.guild/GuildDeleteEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.entity/Guild? // dev.kord.core.event.guild/GuildDeleteEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.guild/GuildDeleteEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/GuildDeleteEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.guild/GuildDeleteEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.guild/GuildDeleteEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.guild/GuildDeleteEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.guild/GuildDeleteEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val unavailable // dev.kord.core.event.guild/GuildDeleteEvent.unavailable|{}unavailable[0]
        final fun <get-unavailable>(): kotlin/Boolean // dev.kord.core.event.guild/GuildDeleteEvent.unavailable.<get-unavailable>|<get-unavailable>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.guild/GuildDeleteEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.guild/GuildScheduledEventCreateEvent : dev.kord.core.event.guild/GuildScheduledEventEvent { // dev.kord.core.event.guild/GuildScheduledEventCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity/GuildScheduledEvent, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.guild/GuildScheduledEventCreateEvent.<init>|<init>(dev.kord.core.entity.GuildScheduledEvent;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val customContext // dev.kord.core.event.guild/GuildScheduledEventCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.guild/GuildScheduledEventCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val kord // dev.kord.core.event.guild/GuildScheduledEventCreateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.guild/GuildScheduledEventCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val scheduledEvent // dev.kord.core.event.guild/GuildScheduledEventCreateEvent.scheduledEvent|{}scheduledEvent[0]
        final fun <get-scheduledEvent>(): dev.kord.core.entity/GuildScheduledEvent // dev.kord.core.event.guild/GuildScheduledEventCreateEvent.scheduledEvent.<get-scheduledEvent>|<get-scheduledEvent>(){}[0]
    final val shard // dev.kord.core.event.guild/GuildScheduledEventCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.guild/GuildScheduledEventCreateEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.guild/GuildScheduledEventCreateEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.guild/GuildScheduledEventCreateEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun component1(): dev.kord.core.entity/GuildScheduledEvent // dev.kord.core.event.guild/GuildScheduledEventCreateEvent.component1|component1(){}[0]
    final fun component2(): dev.kord.core/Kord // dev.kord.core.event.guild/GuildScheduledEventCreateEvent.component2|component2(){}[0]
    final fun component3(): kotlin/Int // dev.kord.core.event.guild/GuildScheduledEventCreateEvent.component3|component3(){}[0]
    final fun component4(): kotlin/Any? // dev.kord.core.event.guild/GuildScheduledEventCreateEvent.component4|component4(){}[0]
    final fun component5(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.guild/GuildScheduledEventCreateEvent.component5|component5(){}[0]
    final fun copy(dev.kord.core.entity/GuildScheduledEvent = ..., dev.kord.core/Kord = ..., kotlin/Int = ..., kotlin/Any? = ..., dev.kord.core.supplier/EntitySupplier = ...): dev.kord.core.event.guild/GuildScheduledEventCreateEvent // dev.kord.core.event.guild/GuildScheduledEventCreateEvent.copy|copy(dev.kord.core.entity.GuildScheduledEvent;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.event.guild/GuildScheduledEventCreateEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.event.guild/GuildScheduledEventCreateEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.event.guild/GuildScheduledEventCreateEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.guild/GuildScheduledEventCreateEvent // dev.kord.core.event.guild/GuildScheduledEventCreateEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.event.guild/GuildScheduledEventDeleteEvent : dev.kord.core.event.guild/GuildScheduledEventEvent { // dev.kord.core.event.guild/GuildScheduledEventDeleteEvent|null[0]
    constructor <init>(dev.kord.core.entity/GuildScheduledEvent, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.guild/GuildScheduledEventDeleteEvent.<init>|<init>(dev.kord.core.entity.GuildScheduledEvent;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val customContext // dev.kord.core.event.guild/GuildScheduledEventDeleteEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.guild/GuildScheduledEventDeleteEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val kord // dev.kord.core.event.guild/GuildScheduledEventDeleteEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.guild/GuildScheduledEventDeleteEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val scheduledEvent // dev.kord.core.event.guild/GuildScheduledEventDeleteEvent.scheduledEvent|{}scheduledEvent[0]
        final fun <get-scheduledEvent>(): dev.kord.core.entity/GuildScheduledEvent // dev.kord.core.event.guild/GuildScheduledEventDeleteEvent.scheduledEvent.<get-scheduledEvent>|<get-scheduledEvent>(){}[0]
    final val shard // dev.kord.core.event.guild/GuildScheduledEventDeleteEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.guild/GuildScheduledEventDeleteEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.guild/GuildScheduledEventDeleteEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.guild/GuildScheduledEventDeleteEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun component1(): dev.kord.core.entity/GuildScheduledEvent // dev.kord.core.event.guild/GuildScheduledEventDeleteEvent.component1|component1(){}[0]
    final fun component2(): dev.kord.core/Kord // dev.kord.core.event.guild/GuildScheduledEventDeleteEvent.component2|component2(){}[0]
    final fun component3(): kotlin/Int // dev.kord.core.event.guild/GuildScheduledEventDeleteEvent.component3|component3(){}[0]
    final fun component4(): kotlin/Any? // dev.kord.core.event.guild/GuildScheduledEventDeleteEvent.component4|component4(){}[0]
    final fun component5(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.guild/GuildScheduledEventDeleteEvent.component5|component5(){}[0]
    final fun copy(dev.kord.core.entity/GuildScheduledEvent = ..., dev.kord.core/Kord = ..., kotlin/Int = ..., kotlin/Any? = ..., dev.kord.core.supplier/EntitySupplier = ...): dev.kord.core.event.guild/GuildScheduledEventDeleteEvent // dev.kord.core.event.guild/GuildScheduledEventDeleteEvent.copy|copy(dev.kord.core.entity.GuildScheduledEvent;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.event.guild/GuildScheduledEventDeleteEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.event.guild/GuildScheduledEventDeleteEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.event.guild/GuildScheduledEventDeleteEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.guild/GuildScheduledEventDeleteEvent // dev.kord.core.event.guild/GuildScheduledEventDeleteEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.event.guild/GuildScheduledEventUpdateEvent : dev.kord.core.event.guild/GuildScheduledEventEvent { // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity/GuildScheduledEvent, dev.kord.core.entity/GuildScheduledEvent?, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.<init>|<init>(dev.kord.core.entity.GuildScheduledEvent;dev.kord.core.entity.GuildScheduledEvent?;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val channelId // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val customContext // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val kord // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val oldEvent // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.oldEvent|{}oldEvent[0]
        final fun <get-oldEvent>(): dev.kord.core.entity/GuildScheduledEvent? // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.oldEvent.<get-oldEvent>|<get-oldEvent>(){}[0]
    final val scheduledEvent // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.scheduledEvent|{}scheduledEvent[0]
        final fun <get-scheduledEvent>(): dev.kord.core.entity/GuildScheduledEvent // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.scheduledEvent.<get-scheduledEvent>|<get-scheduledEvent>(){}[0]
    final val shard // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun component1(): dev.kord.core.entity/GuildScheduledEvent // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.component1|component1(){}[0]
    final fun component2(): dev.kord.core.entity/GuildScheduledEvent? // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.component2|component2(){}[0]
    final fun component3(): dev.kord.core/Kord // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.component3|component3(){}[0]
    final fun component4(): kotlin/Int // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.component4|component4(){}[0]
    final fun component5(): kotlin/Any? // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.component5|component5(){}[0]
    final fun component6(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.component6|component6(){}[0]
    final fun copy(dev.kord.core.entity/GuildScheduledEvent = ..., dev.kord.core.entity/GuildScheduledEvent? = ..., dev.kord.core/Kord = ..., kotlin/Int = ..., kotlin/Any? = ..., dev.kord.core.supplier/EntitySupplier = ...): dev.kord.core.event.guild/GuildScheduledEventUpdateEvent // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.copy|copy(dev.kord.core.entity.GuildScheduledEvent;dev.kord.core.entity.GuildScheduledEvent?;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.guild/GuildScheduledEventUpdateEvent // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getChannelOrNull(): dev.kord.core.entity.channel/TopGuildChannel? // dev.kord.core.event.guild/GuildScheduledEventUpdateEvent.getChannelOrNull|getChannelOrNull(){}[0]
}

final class dev.kord.core.event.guild/GuildScheduledEventUserAddEvent : dev.kord.core.event.guild/GuildScheduledEventUserEvent { // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val customContext // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val guildId // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val scheduledEventId // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.scheduledEventId|{}scheduledEventId[0]
        final fun <get-scheduledEventId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.scheduledEventId.<get-scheduledEventId>|<get-scheduledEventId>(){}[0]
    final val shard // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val userId // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.component3|component3(){}[0]
    final fun component4(): dev.kord.core/Kord // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.component4|component4(){}[0]
    final fun component5(): kotlin/Int // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.component5|component5(){}[0]
    final fun component6(): kotlin/Any? // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.component6|component6(){}[0]
    final fun component7(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.component7|component7(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.core/Kord = ..., kotlin/Int = ..., kotlin/Any? = ..., dev.kord.core.supplier/EntitySupplier = ...): dev.kord.core.event.guild/GuildScheduledEventUserAddEvent // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.guild/GuildScheduledEventUserAddEvent // dev.kord.core.event.guild/GuildScheduledEventUserAddEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent : dev.kord.core.event.guild/GuildScheduledEventUserEvent { // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val customContext // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val guildId // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val scheduledEventId // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.scheduledEventId|{}scheduledEventId[0]
        final fun <get-scheduledEventId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.scheduledEventId.<get-scheduledEventId>|<get-scheduledEventId>(){}[0]
    final val shard // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val userId // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.component3|component3(){}[0]
    final fun component4(): dev.kord.core/Kord // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.component4|component4(){}[0]
    final fun component5(): kotlin/Int // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.component5|component5(){}[0]
    final fun component6(): kotlin/Any? // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.component6|component6(){}[0]
    final fun component7(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.component7|component7(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.core/Kord = ..., kotlin/Int = ..., kotlin/Any? = ..., dev.kord.core.supplier/EntitySupplier = ...): dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent // dev.kord.core.event.guild/GuildScheduledEventUserRemoveEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

final class dev.kord.core.event.guild/GuildUpdateEvent : dev.kord.core.event/Event { // dev.kord.core.event.guild/GuildUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity/Guild, dev.kord.core.entity/Guild?, kotlin/Int, kotlin/Any?) // dev.kord.core.event.guild/GuildUpdateEvent.<init>|<init>(dev.kord.core.entity.Guild;dev.kord.core.entity.Guild?;kotlin.Int;kotlin.Any?){}[0]

    final val customContext // dev.kord.core.event.guild/GuildUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.guild/GuildUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val guild // dev.kord.core.event.guild/GuildUpdateEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.entity/Guild // dev.kord.core.event.guild/GuildUpdateEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val kord // dev.kord.core.event.guild/GuildUpdateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.guild/GuildUpdateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val old // dev.kord.core.event.guild/GuildUpdateEvent.old|{}old[0]
        final fun <get-old>(): dev.kord.core.entity/Guild? // dev.kord.core.event.guild/GuildUpdateEvent.old.<get-old>|<get-old>(){}[0]
    final val shard // dev.kord.core.event.guild/GuildUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.guild/GuildUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.guild/GuildUpdateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.guild/IntegrationCreateEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.guild/IntegrationCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity/Integration, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.guild/IntegrationCreateEvent.<init>|<init>(dev.kord.core.entity.Integration;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val customContext // dev.kord.core.event.guild/IntegrationCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.guild/IntegrationCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val guild // dev.kord.core.event.guild/IntegrationCreateEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.event.guild/IntegrationCreateEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.guild/IntegrationCreateEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/IntegrationCreateEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val integration // dev.kord.core.event.guild/IntegrationCreateEvent.integration|{}integration[0]
        final fun <get-integration>(): dev.kord.core.entity/Integration // dev.kord.core.event.guild/IntegrationCreateEvent.integration.<get-integration>|<get-integration>(){}[0]
    final val kord // dev.kord.core.event.guild/IntegrationCreateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.guild/IntegrationCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.guild/IntegrationCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.guild/IntegrationCreateEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.guild/IntegrationCreateEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.guild/IntegrationCreateEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.guild/IntegrationCreateEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.guild/IntegrationCreateEvent // dev.kord.core.event.guild/IntegrationCreateEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.event.guild/IntegrationCreateEvent.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.guild/IntegrationCreateEvent.getGuildOrNull|getGuildOrNull(){}[0]
}

final class dev.kord.core.event.guild/IntegrationDeleteEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.guild/IntegrationDeleteEvent|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake?, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.guild/IntegrationDeleteEvent.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val applicationId // dev.kord.core.event.guild/IntegrationDeleteEvent.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.event.guild/IntegrationDeleteEvent.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val customContext // dev.kord.core.event.guild/IntegrationDeleteEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.guild/IntegrationDeleteEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val guild // dev.kord.core.event.guild/IntegrationDeleteEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.event.guild/IntegrationDeleteEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.guild/IntegrationDeleteEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/IntegrationDeleteEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.core.event.guild/IntegrationDeleteEvent.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/IntegrationDeleteEvent.id.<get-id>|<get-id>(){}[0]
    final val kord // dev.kord.core.event.guild/IntegrationDeleteEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.guild/IntegrationDeleteEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.guild/IntegrationDeleteEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.guild/IntegrationDeleteEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.guild/IntegrationDeleteEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.guild/IntegrationDeleteEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.guild/IntegrationDeleteEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.guild/IntegrationDeleteEvent // dev.kord.core.event.guild/IntegrationDeleteEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.event.guild/IntegrationDeleteEvent.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.guild/IntegrationDeleteEvent.getGuildOrNull|getGuildOrNull(){}[0]
}

final class dev.kord.core.event.guild/IntegrationUpdateEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.guild/IntegrationUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity/Integration, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.guild/IntegrationUpdateEvent.<init>|<init>(dev.kord.core.entity.Integration;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val customContext // dev.kord.core.event.guild/IntegrationUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.guild/IntegrationUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val guild // dev.kord.core.event.guild/IntegrationUpdateEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.event.guild/IntegrationUpdateEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.guild/IntegrationUpdateEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/IntegrationUpdateEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val integration // dev.kord.core.event.guild/IntegrationUpdateEvent.integration|{}integration[0]
        final fun <get-integration>(): dev.kord.core.entity/Integration // dev.kord.core.event.guild/IntegrationUpdateEvent.integration.<get-integration>|<get-integration>(){}[0]
    final val kord // dev.kord.core.event.guild/IntegrationUpdateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.guild/IntegrationUpdateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.guild/IntegrationUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.guild/IntegrationUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.guild/IntegrationUpdateEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.guild/IntegrationUpdateEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.guild/IntegrationUpdateEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.guild/IntegrationUpdateEvent // dev.kord.core.event.guild/IntegrationUpdateEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.event.guild/IntegrationUpdateEvent.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.guild/IntegrationUpdateEvent.getGuildOrNull|getGuildOrNull(){}[0]
}

final class dev.kord.core.event.guild/IntegrationsUpdateEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.guild/IntegrationsUpdateEvent|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.guild/IntegrationsUpdateEvent.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val customContext // dev.kord.core.event.guild/IntegrationsUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.guild/IntegrationsUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val guild // dev.kord.core.event.guild/IntegrationsUpdateEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.event.guild/IntegrationsUpdateEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.guild/IntegrationsUpdateEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/IntegrationsUpdateEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.guild/IntegrationsUpdateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.guild/IntegrationsUpdateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.guild/IntegrationsUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.guild/IntegrationsUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.guild/IntegrationsUpdateEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.guild/IntegrationsUpdateEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.guild/IntegrationsUpdateEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.guild/IntegrationsUpdateEvent // dev.kord.core.event.guild/IntegrationsUpdateEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.event.guild/IntegrationsUpdateEvent.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.guild/IntegrationsUpdateEvent.getGuildOrNull|getGuildOrNull(){}[0]
}

final class dev.kord.core.event.guild/InviteCreateEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.guild/InviteCreateEvent|null[0]
    constructor <init>(dev.kord.core.cache.data/InviteCreateData, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.guild/InviteCreateEvent.<init>|<init>(dev.kord.core.cache.data.InviteCreateData;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val channel // dev.kord.core.event.guild/InviteCreateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.behavior.channel/ChannelBehavior // dev.kord.core.event.guild/InviteCreateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val channelId // dev.kord.core.event.guild/InviteCreateEvent.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/InviteCreateEvent.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val code // dev.kord.core.event.guild/InviteCreateEvent.code|{}code[0]
        final fun <get-code>(): kotlin/String // dev.kord.core.event.guild/InviteCreateEvent.code.<get-code>|<get-code>(){}[0]
    final val createdAt // dev.kord.core.event.guild/InviteCreateEvent.createdAt|{}createdAt[0]
        final fun <get-createdAt>(): kotlinx.datetime/Instant // dev.kord.core.event.guild/InviteCreateEvent.createdAt.<get-createdAt>|<get-createdAt>(){}[0]
    final val customContext // dev.kord.core.event.guild/InviteCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.guild/InviteCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val data // dev.kord.core.event.guild/InviteCreateEvent.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/InviteCreateData // dev.kord.core.event.guild/InviteCreateEvent.data.<get-data>|<get-data>(){}[0]
    final val guild // dev.kord.core.event.guild/InviteCreateEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior? // dev.kord.core.event.guild/InviteCreateEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.guild/InviteCreateEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.event.guild/InviteCreateEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val inviter // dev.kord.core.event.guild/InviteCreateEvent.inviter|{}inviter[0]
        final fun <get-inviter>(): dev.kord.core.behavior/UserBehavior? // dev.kord.core.event.guild/InviteCreateEvent.inviter.<get-inviter>|<get-inviter>(){}[0]
    final val inviterId // dev.kord.core.event.guild/InviteCreateEvent.inviterId|{}inviterId[0]
        final fun <get-inviterId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.event.guild/InviteCreateEvent.inviterId.<get-inviterId>|<get-inviterId>(){}[0]
    final val inviterMember // dev.kord.core.event.guild/InviteCreateEvent.inviterMember|{}inviterMember[0]
        final fun <get-inviterMember>(): dev.kord.core.behavior/MemberBehavior? // dev.kord.core.event.guild/InviteCreateEvent.inviterMember.<get-inviterMember>|<get-inviterMember>(){}[0]
    final val isTemporary // dev.kord.core.event.guild/InviteCreateEvent.isTemporary|{}isTemporary[0]
        final fun <get-isTemporary>(): kotlin/Boolean // dev.kord.core.event.guild/InviteCreateEvent.isTemporary.<get-isTemporary>|<get-isTemporary>(){}[0]
    final val kord // dev.kord.core.event.guild/InviteCreateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.guild/InviteCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val maxAge // dev.kord.core.event.guild/InviteCreateEvent.maxAge|{}maxAge[0]
        final fun <get-maxAge>(): kotlin.time/Duration // dev.kord.core.event.guild/InviteCreateEvent.maxAge.<get-maxAge>|<get-maxAge>(){}[0]
    final val maxUses // dev.kord.core.event.guild/InviteCreateEvent.maxUses|{}maxUses[0]
        final fun <get-maxUses>(): kotlin/Int // dev.kord.core.event.guild/InviteCreateEvent.maxUses.<get-maxUses>|<get-maxUses>(){}[0]
    final val shard // dev.kord.core.event.guild/InviteCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.guild/InviteCreateEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.guild/InviteCreateEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.guild/InviteCreateEvent.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val targetApplication // dev.kord.core.event.guild/InviteCreateEvent.targetApplication|{}targetApplication[0]
        final fun <get-targetApplication>(): dev.kord.core.entity/PartialApplication? // dev.kord.core.event.guild/InviteCreateEvent.targetApplication.<get-targetApplication>|<get-targetApplication>(){}[0]
    final val targetMember // dev.kord.core.event.guild/InviteCreateEvent.targetMember|{}targetMember[0]
        final fun <get-targetMember>(): dev.kord.core.behavior/MemberBehavior? // dev.kord.core.event.guild/InviteCreateEvent.targetMember.<get-targetMember>|<get-targetMember>(){}[0]
    final val targetType // dev.kord.core.event.guild/InviteCreateEvent.targetType|{}targetType[0]
        final fun <get-targetType>(): dev.kord.common.entity/InviteTargetType? // dev.kord.core.event.guild/InviteCreateEvent.targetType.<get-targetType>|<get-targetType>(){}[0]
    final val targetUser // dev.kord.core.event.guild/InviteCreateEvent.targetUser|{}targetUser[0]
        final fun <get-targetUser>(): dev.kord.core.behavior/UserBehavior? // dev.kord.core.event.guild/InviteCreateEvent.targetUser.<get-targetUser>|<get-targetUser>(){}[0]
    final val targetUserId // dev.kord.core.event.guild/InviteCreateEvent.targetUserId|{}targetUserId[0]
        final fun <get-targetUserId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.event.guild/InviteCreateEvent.targetUserId.<get-targetUserId>|<get-targetUserId>(){}[0]
    final val uses // dev.kord.core.event.guild/InviteCreateEvent.uses|{}uses[0]
        final fun <get-uses>(): kotlin/Int // dev.kord.core.event.guild/InviteCreateEvent.uses.<get-uses>|<get-uses>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.guild/InviteCreateEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.guild/InviteCreateEvent // dev.kord.core.event.guild/InviteCreateEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun delete(kotlin/String? = ...): dev.kord.core.entity/Invite // dev.kord.core.event.guild/InviteCreateEvent.delete|delete(kotlin.String?){}[0]
    final suspend fun getChannel(): dev.kord.core.entity.channel/Channel // dev.kord.core.event.guild/InviteCreateEvent.getChannel|getChannel(){}[0]
    final suspend fun getChannelOrNUll(): dev.kord.core.entity.channel/Channel? // dev.kord.core.event.guild/InviteCreateEvent.getChannelOrNUll|getChannelOrNUll(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.guild/InviteCreateEvent.getGuildOrNull|getGuildOrNull(){}[0]
    final suspend fun getInviterAsMemberOrNull(): dev.kord.core.entity/Member? // dev.kord.core.event.guild/InviteCreateEvent.getInviterAsMemberOrNull|getInviterAsMemberOrNull(){}[0]
    final suspend fun getInviterOrNull(): dev.kord.core.entity/User? // dev.kord.core.event.guild/InviteCreateEvent.getInviterOrNull|getInviterOrNull(){}[0]
    final suspend fun getTargetUserAsMemberOrNull(): dev.kord.core.entity/Member? // dev.kord.core.event.guild/InviteCreateEvent.getTargetUserAsMemberOrNull|getTargetUserAsMemberOrNull(){}[0]
    final suspend fun getTargetUserOrNull(): dev.kord.core.entity/User? // dev.kord.core.event.guild/InviteCreateEvent.getTargetUserOrNull|getTargetUserOrNull(){}[0]
}

final class dev.kord.core.event.guild/InviteDeleteEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.guild/InviteDeleteEvent|null[0]
    constructor <init>(dev.kord.core.cache.data/InviteDeleteData, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.guild/InviteDeleteEvent.<init>|<init>(dev.kord.core.cache.data.InviteDeleteData;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val channel // dev.kord.core.event.guild/InviteDeleteEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.behavior.channel/ChannelBehavior // dev.kord.core.event.guild/InviteDeleteEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val channelId // dev.kord.core.event.guild/InviteDeleteEvent.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/InviteDeleteEvent.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val code // dev.kord.core.event.guild/InviteDeleteEvent.code|{}code[0]
        final fun <get-code>(): kotlin/String // dev.kord.core.event.guild/InviteDeleteEvent.code.<get-code>|<get-code>(){}[0]
    final val customContext // dev.kord.core.event.guild/InviteDeleteEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.guild/InviteDeleteEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val data // dev.kord.core.event.guild/InviteDeleteEvent.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/InviteDeleteData // dev.kord.core.event.guild/InviteDeleteEvent.data.<get-data>|<get-data>(){}[0]
    final val guild // dev.kord.core.event.guild/InviteDeleteEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior? // dev.kord.core.event.guild/InviteDeleteEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.guild/InviteDeleteEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.event.guild/InviteDeleteEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.guild/InviteDeleteEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.guild/InviteDeleteEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.guild/InviteDeleteEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.guild/InviteDeleteEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.guild/InviteDeleteEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.guild/InviteDeleteEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.guild/InviteDeleteEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.guild/InviteDeleteEvent // dev.kord.core.event.guild/InviteDeleteEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getChannel(): dev.kord.core.entity.channel/Channel // dev.kord.core.event.guild/InviteDeleteEvent.getChannel|getChannel(){}[0]
    final suspend fun getChannelOrNull(): dev.kord.core.entity.channel/Channel? // dev.kord.core.event.guild/InviteDeleteEvent.getChannelOrNull|getChannelOrNull(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.guild/InviteDeleteEvent.getGuildOrNull|getGuildOrNull(){}[0]
}

final class dev.kord.core.event.guild/MemberJoinEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.guild/MemberJoinEvent|null[0]
    constructor <init>(dev.kord.core.entity/Member, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.guild/MemberJoinEvent.<init>|<init>(dev.kord.core.entity.Member;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val customContext // dev.kord.core.event.guild/MemberJoinEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.guild/MemberJoinEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val guild // dev.kord.core.event.guild/MemberJoinEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.event.guild/MemberJoinEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.guild/MemberJoinEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/MemberJoinEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.guild/MemberJoinEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.guild/MemberJoinEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val member // dev.kord.core.event.guild/MemberJoinEvent.member|{}member[0]
        final fun <get-member>(): dev.kord.core.entity/Member // dev.kord.core.event.guild/MemberJoinEvent.member.<get-member>|<get-member>(){}[0]
    final val shard // dev.kord.core.event.guild/MemberJoinEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.guild/MemberJoinEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.guild/MemberJoinEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.guild/MemberJoinEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.guild/MemberJoinEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.guild/MemberJoinEvent // dev.kord.core.event.guild/MemberJoinEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.event.guild/MemberJoinEvent.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.guild/MemberJoinEvent.getGuildOrNull|getGuildOrNull(){}[0]
}

final class dev.kord.core.event.guild/MemberLeaveEvent : dev.kord.core.event/Event { // dev.kord.core.event.guild/MemberLeaveEvent|null[0]
    constructor <init>(dev.kord.core.entity/User, dev.kord.core.entity/Member?, dev.kord.common.entity/Snowflake, kotlin/Int, kotlin/Any?) // dev.kord.core.event.guild/MemberLeaveEvent.<init>|<init>(dev.kord.core.entity.User;dev.kord.core.entity.Member?;dev.kord.common.entity.Snowflake;kotlin.Int;kotlin.Any?){}[0]

    final val customContext // dev.kord.core.event.guild/MemberLeaveEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.guild/MemberLeaveEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val guild // dev.kord.core.event.guild/MemberLeaveEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.event.guild/MemberLeaveEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.guild/MemberLeaveEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/MemberLeaveEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.guild/MemberLeaveEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.guild/MemberLeaveEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val old // dev.kord.core.event.guild/MemberLeaveEvent.old|{}old[0]
        final fun <get-old>(): dev.kord.core.entity/Member? // dev.kord.core.event.guild/MemberLeaveEvent.old.<get-old>|<get-old>(){}[0]
    final val shard // dev.kord.core.event.guild/MemberLeaveEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.guild/MemberLeaveEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val user // dev.kord.core.event.guild/MemberLeaveEvent.user|{}user[0]
        final fun <get-user>(): dev.kord.core.entity/User // dev.kord.core.event.guild/MemberLeaveEvent.user.<get-user>|<get-user>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.guild/MemberLeaveEvent.toString|toString(){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.event.guild/MemberLeaveEvent.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.guild/MemberLeaveEvent.getGuildOrNull|getGuildOrNull(){}[0]
}

final class dev.kord.core.event.guild/MemberUpdateEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.guild/MemberUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity/Member, dev.kord.core.entity/Member?, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.guild/MemberUpdateEvent.<init>|<init>(dev.kord.core.entity.Member;dev.kord.core.entity.Member?;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val customContext // dev.kord.core.event.guild/MemberUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.guild/MemberUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val guild // dev.kord.core.event.guild/MemberUpdateEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.event.guild/MemberUpdateEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.guild/MemberUpdateEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/MemberUpdateEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.guild/MemberUpdateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.guild/MemberUpdateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val member // dev.kord.core.event.guild/MemberUpdateEvent.member|{}member[0]
        final fun <get-member>(): dev.kord.core.entity/Member // dev.kord.core.event.guild/MemberUpdateEvent.member.<get-member>|<get-member>(){}[0]
    final val old // dev.kord.core.event.guild/MemberUpdateEvent.old|{}old[0]
        final fun <get-old>(): dev.kord.core.entity/Member? // dev.kord.core.event.guild/MemberUpdateEvent.old.<get-old>|<get-old>(){}[0]
    final val shard // dev.kord.core.event.guild/MemberUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.guild/MemberUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.guild/MemberUpdateEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.guild/MemberUpdateEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.guild/MemberUpdateEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.guild/MemberUpdateEvent // dev.kord.core.event.guild/MemberUpdateEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.event.guild/MemberUpdateEvent.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.guild/MemberUpdateEvent.getGuildOrNull|getGuildOrNull(){}[0]
}

final class dev.kord.core.event.guild/MembersChunkEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.guild/MembersChunkEvent|null[0]
    constructor <init>(dev.kord.core.cache.data/MembersChunkData, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.guild/MembersChunkEvent.<init>|<init>(dev.kord.core.cache.data.MembersChunkData;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val chunkCount // dev.kord.core.event.guild/MembersChunkEvent.chunkCount|{}chunkCount[0]
        final fun <get-chunkCount>(): kotlin/Int // dev.kord.core.event.guild/MembersChunkEvent.chunkCount.<get-chunkCount>|<get-chunkCount>(){}[0]
    final val chunkIndex // dev.kord.core.event.guild/MembersChunkEvent.chunkIndex|{}chunkIndex[0]
        final fun <get-chunkIndex>(): kotlin/Int // dev.kord.core.event.guild/MembersChunkEvent.chunkIndex.<get-chunkIndex>|<get-chunkIndex>(){}[0]
    final val customContext // dev.kord.core.event.guild/MembersChunkEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.guild/MembersChunkEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val data // dev.kord.core.event.guild/MembersChunkEvent.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/MembersChunkData // dev.kord.core.event.guild/MembersChunkEvent.data.<get-data>|<get-data>(){}[0]
    final val guild // dev.kord.core.event.guild/MembersChunkEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.event.guild/MembersChunkEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.guild/MembersChunkEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/MembersChunkEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val invalidIds // dev.kord.core.event.guild/MembersChunkEvent.invalidIds|{}invalidIds[0]
        final fun <get-invalidIds>(): kotlin.collections/Set<dev.kord.common.entity/Snowflake> // dev.kord.core.event.guild/MembersChunkEvent.invalidIds.<get-invalidIds>|<get-invalidIds>(){}[0]
    final val kord // dev.kord.core.event.guild/MembersChunkEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.guild/MembersChunkEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val members // dev.kord.core.event.guild/MembersChunkEvent.members|{}members[0]
        final fun <get-members>(): kotlin.collections/Set<dev.kord.core.entity/Member> // dev.kord.core.event.guild/MembersChunkEvent.members.<get-members>|<get-members>(){}[0]
    final val nonce // dev.kord.core.event.guild/MembersChunkEvent.nonce|{}nonce[0]
        final fun <get-nonce>(): kotlin/String? // dev.kord.core.event.guild/MembersChunkEvent.nonce.<get-nonce>|<get-nonce>(){}[0]
    final val presences // dev.kord.core.event.guild/MembersChunkEvent.presences|{}presences[0]
        final fun <get-presences>(): kotlin.collections/List<dev.kord.core.entity/Presence> // dev.kord.core.event.guild/MembersChunkEvent.presences.<get-presences>|<get-presences>(){}[0]
    final val shard // dev.kord.core.event.guild/MembersChunkEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.guild/MembersChunkEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.guild/MembersChunkEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.guild/MembersChunkEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.guild/MembersChunkEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.guild/MembersChunkEvent // dev.kord.core.event.guild/MembersChunkEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.event.guild/MembersChunkEvent.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.guild/MembersChunkEvent.getGuildOrNull|getGuildOrNull(){}[0]
}

final class dev.kord.core.event.guild/VoiceServerUpdateEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.guild/VoiceServerUpdateEvent|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity/Snowflake, kotlin/String?, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.guild/VoiceServerUpdateEvent.<init>|<init>(kotlin.String;dev.kord.common.entity.Snowflake;kotlin.String?;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val customContext // dev.kord.core.event.guild/VoiceServerUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.guild/VoiceServerUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val endpoint // dev.kord.core.event.guild/VoiceServerUpdateEvent.endpoint|{}endpoint[0]
        final fun <get-endpoint>(): kotlin/String? // dev.kord.core.event.guild/VoiceServerUpdateEvent.endpoint.<get-endpoint>|<get-endpoint>(){}[0]
    final val guild // dev.kord.core.event.guild/VoiceServerUpdateEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.event.guild/VoiceServerUpdateEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.guild/VoiceServerUpdateEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/VoiceServerUpdateEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.guild/VoiceServerUpdateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.guild/VoiceServerUpdateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.guild/VoiceServerUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.guild/VoiceServerUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.guild/VoiceServerUpdateEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.guild/VoiceServerUpdateEvent.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val token // dev.kord.core.event.guild/VoiceServerUpdateEvent.token|{}token[0]
        final fun <get-token>(): kotlin/String // dev.kord.core.event.guild/VoiceServerUpdateEvent.token.<get-token>|<get-token>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.guild/VoiceServerUpdateEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.guild/VoiceServerUpdateEvent // dev.kord.core.event.guild/VoiceServerUpdateEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.event.guild/VoiceServerUpdateEvent.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.guild/VoiceServerUpdateEvent.getGuildOrNull|getGuildOrNull(){}[0]
}

final class dev.kord.core.event.guild/WebhookUpdateEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.guild/WebhookUpdateEvent|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.guild/WebhookUpdateEvent.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val channel // dev.kord.core.event.guild/WebhookUpdateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.behavior.channel/TopGuildMessageChannelBehavior // dev.kord.core.event.guild/WebhookUpdateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val channelId // dev.kord.core.event.guild/WebhookUpdateEvent.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/WebhookUpdateEvent.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val customContext // dev.kord.core.event.guild/WebhookUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.guild/WebhookUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val guild // dev.kord.core.event.guild/WebhookUpdateEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.event.guild/WebhookUpdateEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.guild/WebhookUpdateEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.guild/WebhookUpdateEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.guild/WebhookUpdateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.guild/WebhookUpdateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.guild/WebhookUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.guild/WebhookUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.guild/WebhookUpdateEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.guild/WebhookUpdateEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.guild/WebhookUpdateEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.guild/WebhookUpdateEvent // dev.kord.core.event.guild/WebhookUpdateEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getChannel(): dev.kord.core.entity.channel/TopGuildMessageChannel // dev.kord.core.event.guild/WebhookUpdateEvent.getChannel|getChannel(){}[0]
    final suspend fun getChannelOrNull(): dev.kord.core.entity.channel/TopGuildMessageChannel? // dev.kord.core.event.guild/WebhookUpdateEvent.getChannelOrNull|getChannelOrNull(){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.event.guild/WebhookUpdateEvent.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.guild/WebhookUpdateEvent.getGuildOrNull|getGuildOrNull(){}[0]
}

final class dev.kord.core.event.interaction/ApplicationCommandPermissionsUpdateEvent : dev.kord.core.event/Event { // dev.kord.core.event.interaction/ApplicationCommandPermissionsUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity.application/ApplicationCommandPermissions, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.interaction/ApplicationCommandPermissionsUpdateEvent.<init>|<init>(dev.kord.core.entity.application.ApplicationCommandPermissions;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val customContext // dev.kord.core.event.interaction/ApplicationCommandPermissionsUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/ApplicationCommandPermissionsUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val kord // dev.kord.core.event.interaction/ApplicationCommandPermissionsUpdateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/ApplicationCommandPermissionsUpdateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val permissions // dev.kord.core.event.interaction/ApplicationCommandPermissionsUpdateEvent.permissions|{}permissions[0]
        final fun <get-permissions>(): dev.kord.core.entity.application/ApplicationCommandPermissions // dev.kord.core.event.interaction/ApplicationCommandPermissionsUpdateEvent.permissions.<get-permissions>|<get-permissions>(){}[0]
    final val shard // dev.kord.core.event.interaction/ApplicationCommandPermissionsUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/ApplicationCommandPermissionsUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.interaction/ChatInputCommandCreateEvent : dev.kord.core.event.interaction/ApplicationCommandCreateEvent { // dev.kord.core.event.interaction/ChatInputCommandCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.application/GuildChatInputCommand, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.interaction/ChatInputCommandCreateEvent.<init>|<init>(dev.kord.core.entity.application.GuildChatInputCommand;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val command // dev.kord.core.event.interaction/ChatInputCommandCreateEvent.command|{}command[0]
        final fun <get-command>(): dev.kord.core.entity.application/GuildChatInputCommand // dev.kord.core.event.interaction/ChatInputCommandCreateEvent.command.<get-command>|<get-command>(){}[0]
    final val customContext // dev.kord.core.event.interaction/ChatInputCommandCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/ChatInputCommandCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val kord // dev.kord.core.event.interaction/ChatInputCommandCreateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/ChatInputCommandCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.interaction/ChatInputCommandCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/ChatInputCommandCreateEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.interaction/ChatInputCommandDeleteEvent : dev.kord.core.event.interaction/ApplicationCommandDeleteEvent { // dev.kord.core.event.interaction/ChatInputCommandDeleteEvent|null[0]
    constructor <init>(dev.kord.core.entity.application/GuildChatInputCommand, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.interaction/ChatInputCommandDeleteEvent.<init>|<init>(dev.kord.core.entity.application.GuildChatInputCommand;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val command // dev.kord.core.event.interaction/ChatInputCommandDeleteEvent.command|{}command[0]
        final fun <get-command>(): dev.kord.core.entity.application/GuildChatInputCommand // dev.kord.core.event.interaction/ChatInputCommandDeleteEvent.command.<get-command>|<get-command>(){}[0]
    final val customContext // dev.kord.core.event.interaction/ChatInputCommandDeleteEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/ChatInputCommandDeleteEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val kord // dev.kord.core.event.interaction/ChatInputCommandDeleteEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/ChatInputCommandDeleteEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.interaction/ChatInputCommandDeleteEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/ChatInputCommandDeleteEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.interaction/ChatInputCommandUpdateEvent : dev.kord.core.event.interaction/ApplicationCommandUpdateEvent { // dev.kord.core.event.interaction/ChatInputCommandUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity.application/GuildChatInputCommand, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.interaction/ChatInputCommandUpdateEvent.<init>|<init>(dev.kord.core.entity.application.GuildChatInputCommand;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val command // dev.kord.core.event.interaction/ChatInputCommandUpdateEvent.command|{}command[0]
        final fun <get-command>(): dev.kord.core.entity.application/GuildChatInputCommand // dev.kord.core.event.interaction/ChatInputCommandUpdateEvent.command.<get-command>|<get-command>(){}[0]
    final val customContext // dev.kord.core.event.interaction/ChatInputCommandUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/ChatInputCommandUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val kord // dev.kord.core.event.interaction/ChatInputCommandUpdateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/ChatInputCommandUpdateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.interaction/ChatInputCommandUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/ChatInputCommandUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.interaction/GlobalAutoCompleteInteractionCreateEvent : dev.kord.core.event.interaction/AutoCompleteInteractionCreateEvent { // dev.kord.core.event.interaction/GlobalAutoCompleteInteractionCreateEvent|null[0]
    constructor <init>(dev.kord.core/Kord, kotlin/Int, dev.kord.core.entity.interaction/GlobalAutoCompleteInteraction, kotlin/Any?) // dev.kord.core.event.interaction/GlobalAutoCompleteInteractionCreateEvent.<init>|<init>(dev.kord.core.Kord;kotlin.Int;dev.kord.core.entity.interaction.GlobalAutoCompleteInteraction;kotlin.Any?){}[0]

    final val customContext // dev.kord.core.event.interaction/GlobalAutoCompleteInteractionCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/GlobalAutoCompleteInteractionCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val interaction // dev.kord.core.event.interaction/GlobalAutoCompleteInteractionCreateEvent.interaction|{}interaction[0]
        final fun <get-interaction>(): dev.kord.core.entity.interaction/GlobalAutoCompleteInteraction // dev.kord.core.event.interaction/GlobalAutoCompleteInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
    final val kord // dev.kord.core.event.interaction/GlobalAutoCompleteInteractionCreateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/GlobalAutoCompleteInteractionCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.interaction/GlobalAutoCompleteInteractionCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/GlobalAutoCompleteInteractionCreateEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.interaction/GlobalButtonInteractionCreateEvent : dev.kord.core.event.interaction/ButtonInteractionCreateEvent, dev.kord.core.event.interaction/GlobalComponentInteractionCreateEvent { // dev.kord.core.event.interaction/GlobalButtonInteractionCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.interaction/GlobalButtonInteraction, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.interaction/GlobalButtonInteractionCreateEvent.<init>|<init>(dev.kord.core.entity.interaction.GlobalButtonInteraction;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val customContext // dev.kord.core.event.interaction/GlobalButtonInteractionCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/GlobalButtonInteractionCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val interaction // dev.kord.core.event.interaction/GlobalButtonInteractionCreateEvent.interaction|{}interaction[0]
        final fun <get-interaction>(): dev.kord.core.entity.interaction/GlobalButtonInteraction // dev.kord.core.event.interaction/GlobalButtonInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
    final val kord // dev.kord.core.event.interaction/GlobalButtonInteractionCreateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/GlobalButtonInteractionCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.interaction/GlobalButtonInteractionCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/GlobalButtonInteractionCreateEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.interaction/GlobalChatInputCommandInteractionCreateEvent : dev.kord.core.event.interaction/ChatInputCommandInteractionCreateEvent, dev.kord.core.event.interaction/GlobalApplicationCommandInteractionCreateEvent { // dev.kord.core.event.interaction/GlobalChatInputCommandInteractionCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.interaction/GlobalChatInputCommandInteraction, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.interaction/GlobalChatInputCommandInteractionCreateEvent.<init>|<init>(dev.kord.core.entity.interaction.GlobalChatInputCommandInteraction;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val customContext // dev.kord.core.event.interaction/GlobalChatInputCommandInteractionCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/GlobalChatInputCommandInteractionCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val interaction // dev.kord.core.event.interaction/GlobalChatInputCommandInteractionCreateEvent.interaction|{}interaction[0]
        final fun <get-interaction>(): dev.kord.core.entity.interaction/GlobalChatInputCommandInteraction // dev.kord.core.event.interaction/GlobalChatInputCommandInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
    final val kord // dev.kord.core.event.interaction/GlobalChatInputCommandInteractionCreateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/GlobalChatInputCommandInteractionCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.interaction/GlobalChatInputCommandInteractionCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/GlobalChatInputCommandInteractionCreateEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.interaction/GlobalMessageCommandInteractionCreateEvent : dev.kord.core.event.interaction/GlobalApplicationCommandInteractionCreateEvent, dev.kord.core.event.interaction/MessageCommandInteractionCreateEvent { // dev.kord.core.event.interaction/GlobalMessageCommandInteractionCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.interaction/GlobalMessageCommandInteraction, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.interaction/GlobalMessageCommandInteractionCreateEvent.<init>|<init>(dev.kord.core.entity.interaction.GlobalMessageCommandInteraction;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val customContext // dev.kord.core.event.interaction/GlobalMessageCommandInteractionCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/GlobalMessageCommandInteractionCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val interaction // dev.kord.core.event.interaction/GlobalMessageCommandInteractionCreateEvent.interaction|{}interaction[0]
        final fun <get-interaction>(): dev.kord.core.entity.interaction/GlobalMessageCommandInteraction // dev.kord.core.event.interaction/GlobalMessageCommandInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
    final val kord // dev.kord.core.event.interaction/GlobalMessageCommandInteractionCreateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/GlobalMessageCommandInteractionCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.interaction/GlobalMessageCommandInteractionCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/GlobalMessageCommandInteractionCreateEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.interaction/GlobalModalSubmitInteractionCreateEvent : dev.kord.core.event.interaction/ModalSubmitInteractionCreateEvent { // dev.kord.core.event.interaction/GlobalModalSubmitInteractionCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.interaction/GlobalModalSubmitInteraction, kotlin/Int, dev.kord.core/Kord, kotlin/Any?) // dev.kord.core.event.interaction/GlobalModalSubmitInteractionCreateEvent.<init>|<init>(dev.kord.core.entity.interaction.GlobalModalSubmitInteraction;kotlin.Int;dev.kord.core.Kord;kotlin.Any?){}[0]

    final val customContext // dev.kord.core.event.interaction/GlobalModalSubmitInteractionCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/GlobalModalSubmitInteractionCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val interaction // dev.kord.core.event.interaction/GlobalModalSubmitInteractionCreateEvent.interaction|{}interaction[0]
        final fun <get-interaction>(): dev.kord.core.entity.interaction/GlobalModalSubmitInteraction // dev.kord.core.event.interaction/GlobalModalSubmitInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
    final val kord // dev.kord.core.event.interaction/GlobalModalSubmitInteractionCreateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/GlobalModalSubmitInteractionCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.interaction/GlobalModalSubmitInteractionCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/GlobalModalSubmitInteractionCreateEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.interaction/GlobalSelectMenuInteractionCreateEvent : dev.kord.core.event.interaction/GlobalComponentInteractionCreateEvent, dev.kord.core.event.interaction/SelectMenuInteractionCreateEvent { // dev.kord.core.event.interaction/GlobalSelectMenuInteractionCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.interaction/GlobalSelectMenuInteraction, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.interaction/GlobalSelectMenuInteractionCreateEvent.<init>|<init>(dev.kord.core.entity.interaction.GlobalSelectMenuInteraction;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val customContext // dev.kord.core.event.interaction/GlobalSelectMenuInteractionCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/GlobalSelectMenuInteractionCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val interaction // dev.kord.core.event.interaction/GlobalSelectMenuInteractionCreateEvent.interaction|{}interaction[0]
        final fun <get-interaction>(): dev.kord.core.entity.interaction/GlobalSelectMenuInteraction // dev.kord.core.event.interaction/GlobalSelectMenuInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
    final val kord // dev.kord.core.event.interaction/GlobalSelectMenuInteractionCreateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/GlobalSelectMenuInteractionCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.interaction/GlobalSelectMenuInteractionCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/GlobalSelectMenuInteractionCreateEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.interaction/GlobalUserCommandInteractionCreateEvent : dev.kord.core.event.interaction/GlobalApplicationCommandInteractionCreateEvent, dev.kord.core.event.interaction/UserCommandInteractionCreateEvent { // dev.kord.core.event.interaction/GlobalUserCommandInteractionCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.interaction/GlobalUserCommandInteraction, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.interaction/GlobalUserCommandInteractionCreateEvent.<init>|<init>(dev.kord.core.entity.interaction.GlobalUserCommandInteraction;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val customContext // dev.kord.core.event.interaction/GlobalUserCommandInteractionCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/GlobalUserCommandInteractionCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val interaction // dev.kord.core.event.interaction/GlobalUserCommandInteractionCreateEvent.interaction|{}interaction[0]
        final fun <get-interaction>(): dev.kord.core.entity.interaction/GlobalUserCommandInteraction // dev.kord.core.event.interaction/GlobalUserCommandInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
    final val kord // dev.kord.core.event.interaction/GlobalUserCommandInteractionCreateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/GlobalUserCommandInteractionCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.interaction/GlobalUserCommandInteractionCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/GlobalUserCommandInteractionCreateEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.interaction/GuildAutoCompleteInteractionCreateEvent : dev.kord.core.event.interaction/AutoCompleteInteractionCreateEvent { // dev.kord.core.event.interaction/GuildAutoCompleteInteractionCreateEvent|null[0]
    constructor <init>(dev.kord.core/Kord, kotlin/Int, dev.kord.core.entity.interaction/GuildAutoCompleteInteraction, kotlin/Any?) // dev.kord.core.event.interaction/GuildAutoCompleteInteractionCreateEvent.<init>|<init>(dev.kord.core.Kord;kotlin.Int;dev.kord.core.entity.interaction.GuildAutoCompleteInteraction;kotlin.Any?){}[0]

    final val customContext // dev.kord.core.event.interaction/GuildAutoCompleteInteractionCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/GuildAutoCompleteInteractionCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val interaction // dev.kord.core.event.interaction/GuildAutoCompleteInteractionCreateEvent.interaction|{}interaction[0]
        final fun <get-interaction>(): dev.kord.core.entity.interaction/GuildAutoCompleteInteraction // dev.kord.core.event.interaction/GuildAutoCompleteInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
    final val kord // dev.kord.core.event.interaction/GuildAutoCompleteInteractionCreateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/GuildAutoCompleteInteractionCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.interaction/GuildAutoCompleteInteractionCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/GuildAutoCompleteInteractionCreateEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.interaction/GuildButtonInteractionCreateEvent : dev.kord.core.event.interaction/ButtonInteractionCreateEvent, dev.kord.core.event.interaction/GuildComponentInteractionCreateEvent { // dev.kord.core.event.interaction/GuildButtonInteractionCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.interaction/GuildButtonInteraction, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.interaction/GuildButtonInteractionCreateEvent.<init>|<init>(dev.kord.core.entity.interaction.GuildButtonInteraction;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val customContext // dev.kord.core.event.interaction/GuildButtonInteractionCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/GuildButtonInteractionCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val interaction // dev.kord.core.event.interaction/GuildButtonInteractionCreateEvent.interaction|{}interaction[0]
        final fun <get-interaction>(): dev.kord.core.entity.interaction/GuildButtonInteraction // dev.kord.core.event.interaction/GuildButtonInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
    final val kord // dev.kord.core.event.interaction/GuildButtonInteractionCreateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/GuildButtonInteractionCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.interaction/GuildButtonInteractionCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/GuildButtonInteractionCreateEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.interaction/GuildChatInputCommandInteractionCreateEvent : dev.kord.core.event.interaction/ChatInputCommandInteractionCreateEvent, dev.kord.core.event.interaction/GuildApplicationCommandInteractionCreateEvent { // dev.kord.core.event.interaction/GuildChatInputCommandInteractionCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.interaction/GuildChatInputCommandInteraction, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.interaction/GuildChatInputCommandInteractionCreateEvent.<init>|<init>(dev.kord.core.entity.interaction.GuildChatInputCommandInteraction;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val customContext // dev.kord.core.event.interaction/GuildChatInputCommandInteractionCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/GuildChatInputCommandInteractionCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val interaction // dev.kord.core.event.interaction/GuildChatInputCommandInteractionCreateEvent.interaction|{}interaction[0]
        final fun <get-interaction>(): dev.kord.core.entity.interaction/GuildChatInputCommandInteraction // dev.kord.core.event.interaction/GuildChatInputCommandInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
    final val kord // dev.kord.core.event.interaction/GuildChatInputCommandInteractionCreateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/GuildChatInputCommandInteractionCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.interaction/GuildChatInputCommandInteractionCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/GuildChatInputCommandInteractionCreateEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.interaction/GuildMessageCommandInteractionCreateEvent : dev.kord.core.event.interaction/GuildApplicationCommandInteractionCreateEvent, dev.kord.core.event.interaction/MessageCommandInteractionCreateEvent { // dev.kord.core.event.interaction/GuildMessageCommandInteractionCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.interaction/GuildMessageCommandInteraction, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.interaction/GuildMessageCommandInteractionCreateEvent.<init>|<init>(dev.kord.core.entity.interaction.GuildMessageCommandInteraction;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val customContext // dev.kord.core.event.interaction/GuildMessageCommandInteractionCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/GuildMessageCommandInteractionCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val interaction // dev.kord.core.event.interaction/GuildMessageCommandInteractionCreateEvent.interaction|{}interaction[0]
        final fun <get-interaction>(): dev.kord.core.entity.interaction/GuildMessageCommandInteraction // dev.kord.core.event.interaction/GuildMessageCommandInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
    final val kord // dev.kord.core.event.interaction/GuildMessageCommandInteractionCreateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/GuildMessageCommandInteractionCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.interaction/GuildMessageCommandInteractionCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/GuildMessageCommandInteractionCreateEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.interaction/GuildModalSubmitInteractionCreateEvent : dev.kord.core.event.interaction/ModalSubmitInteractionCreateEvent { // dev.kord.core.event.interaction/GuildModalSubmitInteractionCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.interaction/GuildModalSubmitInteraction, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.interaction/GuildModalSubmitInteractionCreateEvent.<init>|<init>(dev.kord.core.entity.interaction.GuildModalSubmitInteraction;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val customContext // dev.kord.core.event.interaction/GuildModalSubmitInteractionCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/GuildModalSubmitInteractionCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val interaction // dev.kord.core.event.interaction/GuildModalSubmitInteractionCreateEvent.interaction|{}interaction[0]
        final fun <get-interaction>(): dev.kord.core.entity.interaction/GuildModalSubmitInteraction // dev.kord.core.event.interaction/GuildModalSubmitInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
    final val kord // dev.kord.core.event.interaction/GuildModalSubmitInteractionCreateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/GuildModalSubmitInteractionCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.interaction/GuildModalSubmitInteractionCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/GuildModalSubmitInteractionCreateEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.interaction/GuildSelectMenuInteractionCreateEvent : dev.kord.core.event.interaction/GuildComponentInteractionCreateEvent, dev.kord.core.event.interaction/SelectMenuInteractionCreateEvent { // dev.kord.core.event.interaction/GuildSelectMenuInteractionCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.interaction/GuildSelectMenuInteraction, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.interaction/GuildSelectMenuInteractionCreateEvent.<init>|<init>(dev.kord.core.entity.interaction.GuildSelectMenuInteraction;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val customContext // dev.kord.core.event.interaction/GuildSelectMenuInteractionCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/GuildSelectMenuInteractionCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val interaction // dev.kord.core.event.interaction/GuildSelectMenuInteractionCreateEvent.interaction|{}interaction[0]
        final fun <get-interaction>(): dev.kord.core.entity.interaction/GuildSelectMenuInteraction // dev.kord.core.event.interaction/GuildSelectMenuInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
    final val kord // dev.kord.core.event.interaction/GuildSelectMenuInteractionCreateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/GuildSelectMenuInteractionCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.interaction/GuildSelectMenuInteractionCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/GuildSelectMenuInteractionCreateEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.interaction/GuildUserCommandInteractionCreateEvent : dev.kord.core.event.interaction/GuildApplicationCommandInteractionCreateEvent, dev.kord.core.event.interaction/UserCommandInteractionCreateEvent { // dev.kord.core.event.interaction/GuildUserCommandInteractionCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.interaction/GuildUserCommandInteraction, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.interaction/GuildUserCommandInteractionCreateEvent.<init>|<init>(dev.kord.core.entity.interaction.GuildUserCommandInteraction;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val customContext // dev.kord.core.event.interaction/GuildUserCommandInteractionCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/GuildUserCommandInteractionCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val interaction // dev.kord.core.event.interaction/GuildUserCommandInteractionCreateEvent.interaction|{}interaction[0]
        final fun <get-interaction>(): dev.kord.core.entity.interaction/GuildUserCommandInteraction // dev.kord.core.event.interaction/GuildUserCommandInteractionCreateEvent.interaction.<get-interaction>|<get-interaction>(){}[0]
    final val kord // dev.kord.core.event.interaction/GuildUserCommandInteractionCreateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/GuildUserCommandInteractionCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.interaction/GuildUserCommandInteractionCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/GuildUserCommandInteractionCreateEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.interaction/MessageCommandCreateEvent : dev.kord.core.event.interaction/ApplicationCommandCreateEvent { // dev.kord.core.event.interaction/MessageCommandCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.application/GuildMessageCommand, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.interaction/MessageCommandCreateEvent.<init>|<init>(dev.kord.core.entity.application.GuildMessageCommand;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val command // dev.kord.core.event.interaction/MessageCommandCreateEvent.command|{}command[0]
        final fun <get-command>(): dev.kord.core.entity.application/GuildMessageCommand // dev.kord.core.event.interaction/MessageCommandCreateEvent.command.<get-command>|<get-command>(){}[0]
    final val customContext // dev.kord.core.event.interaction/MessageCommandCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/MessageCommandCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val kord // dev.kord.core.event.interaction/MessageCommandCreateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/MessageCommandCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.interaction/MessageCommandCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/MessageCommandCreateEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.interaction/MessageCommandDeleteEvent : dev.kord.core.event.interaction/ApplicationCommandDeleteEvent { // dev.kord.core.event.interaction/MessageCommandDeleteEvent|null[0]
    constructor <init>(dev.kord.core.entity.application/GuildMessageCommand, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.interaction/MessageCommandDeleteEvent.<init>|<init>(dev.kord.core.entity.application.GuildMessageCommand;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val command // dev.kord.core.event.interaction/MessageCommandDeleteEvent.command|{}command[0]
        final fun <get-command>(): dev.kord.core.entity.application/GuildMessageCommand // dev.kord.core.event.interaction/MessageCommandDeleteEvent.command.<get-command>|<get-command>(){}[0]
    final val customContext // dev.kord.core.event.interaction/MessageCommandDeleteEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/MessageCommandDeleteEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val kord // dev.kord.core.event.interaction/MessageCommandDeleteEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/MessageCommandDeleteEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.interaction/MessageCommandDeleteEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/MessageCommandDeleteEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.interaction/MessageCommandUpdateEvent : dev.kord.core.event.interaction/ApplicationCommandUpdateEvent { // dev.kord.core.event.interaction/MessageCommandUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity.application/GuildMessageCommand, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.interaction/MessageCommandUpdateEvent.<init>|<init>(dev.kord.core.entity.application.GuildMessageCommand;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val command // dev.kord.core.event.interaction/MessageCommandUpdateEvent.command|{}command[0]
        final fun <get-command>(): dev.kord.core.entity.application/GuildMessageCommand // dev.kord.core.event.interaction/MessageCommandUpdateEvent.command.<get-command>|<get-command>(){}[0]
    final val customContext // dev.kord.core.event.interaction/MessageCommandUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/MessageCommandUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val kord // dev.kord.core.event.interaction/MessageCommandUpdateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/MessageCommandUpdateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.interaction/MessageCommandUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/MessageCommandUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.interaction/UnknownApplicationCommandCreateEvent : dev.kord.core.event.interaction/ApplicationCommandCreateEvent { // dev.kord.core.event.interaction/UnknownApplicationCommandCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.application/UnknownGuildApplicationCommand, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.interaction/UnknownApplicationCommandCreateEvent.<init>|<init>(dev.kord.core.entity.application.UnknownGuildApplicationCommand;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val command // dev.kord.core.event.interaction/UnknownApplicationCommandCreateEvent.command|{}command[0]
        final fun <get-command>(): dev.kord.core.entity.application/UnknownGuildApplicationCommand // dev.kord.core.event.interaction/UnknownApplicationCommandCreateEvent.command.<get-command>|<get-command>(){}[0]
    final val customContext // dev.kord.core.event.interaction/UnknownApplicationCommandCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/UnknownApplicationCommandCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val kord // dev.kord.core.event.interaction/UnknownApplicationCommandCreateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/UnknownApplicationCommandCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.interaction/UnknownApplicationCommandCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/UnknownApplicationCommandCreateEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.interaction/UnknownApplicationCommandDeleteEvent : dev.kord.core.event.interaction/ApplicationCommandDeleteEvent { // dev.kord.core.event.interaction/UnknownApplicationCommandDeleteEvent|null[0]
    constructor <init>(dev.kord.core.entity.application/UnknownGuildApplicationCommand, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.interaction/UnknownApplicationCommandDeleteEvent.<init>|<init>(dev.kord.core.entity.application.UnknownGuildApplicationCommand;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val command // dev.kord.core.event.interaction/UnknownApplicationCommandDeleteEvent.command|{}command[0]
        final fun <get-command>(): dev.kord.core.entity.application/UnknownGuildApplicationCommand // dev.kord.core.event.interaction/UnknownApplicationCommandDeleteEvent.command.<get-command>|<get-command>(){}[0]
    final val customContext // dev.kord.core.event.interaction/UnknownApplicationCommandDeleteEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/UnknownApplicationCommandDeleteEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val kord // dev.kord.core.event.interaction/UnknownApplicationCommandDeleteEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/UnknownApplicationCommandDeleteEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.interaction/UnknownApplicationCommandDeleteEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/UnknownApplicationCommandDeleteEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.interaction/UnknownApplicationCommandUpdateEvent : dev.kord.core.event.interaction/ApplicationCommandUpdateEvent { // dev.kord.core.event.interaction/UnknownApplicationCommandUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity.application/UnknownGuildApplicationCommand, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.interaction/UnknownApplicationCommandUpdateEvent.<init>|<init>(dev.kord.core.entity.application.UnknownGuildApplicationCommand;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val command // dev.kord.core.event.interaction/UnknownApplicationCommandUpdateEvent.command|{}command[0]
        final fun <get-command>(): dev.kord.core.entity.application/UnknownGuildApplicationCommand // dev.kord.core.event.interaction/UnknownApplicationCommandUpdateEvent.command.<get-command>|<get-command>(){}[0]
    final val customContext // dev.kord.core.event.interaction/UnknownApplicationCommandUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/UnknownApplicationCommandUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val kord // dev.kord.core.event.interaction/UnknownApplicationCommandUpdateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/UnknownApplicationCommandUpdateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.interaction/UnknownApplicationCommandUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/UnknownApplicationCommandUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.interaction/UserCommandCreateEvent : dev.kord.core.event.interaction/ApplicationCommandCreateEvent { // dev.kord.core.event.interaction/UserCommandCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity.application/GuildUserCommand, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.interaction/UserCommandCreateEvent.<init>|<init>(dev.kord.core.entity.application.GuildUserCommand;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val command // dev.kord.core.event.interaction/UserCommandCreateEvent.command|{}command[0]
        final fun <get-command>(): dev.kord.core.entity.application/GuildUserCommand // dev.kord.core.event.interaction/UserCommandCreateEvent.command.<get-command>|<get-command>(){}[0]
    final val customContext // dev.kord.core.event.interaction/UserCommandCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/UserCommandCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val kord // dev.kord.core.event.interaction/UserCommandCreateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/UserCommandCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.interaction/UserCommandCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/UserCommandCreateEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.interaction/UserCommandDeleteEvent : dev.kord.core.event.interaction/ApplicationCommandDeleteEvent { // dev.kord.core.event.interaction/UserCommandDeleteEvent|null[0]
    constructor <init>(dev.kord.core.entity.application/GuildUserCommand, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.interaction/UserCommandDeleteEvent.<init>|<init>(dev.kord.core.entity.application.GuildUserCommand;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val command // dev.kord.core.event.interaction/UserCommandDeleteEvent.command|{}command[0]
        final fun <get-command>(): dev.kord.core.entity.application/GuildUserCommand // dev.kord.core.event.interaction/UserCommandDeleteEvent.command.<get-command>|<get-command>(){}[0]
    final val customContext // dev.kord.core.event.interaction/UserCommandDeleteEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/UserCommandDeleteEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val kord // dev.kord.core.event.interaction/UserCommandDeleteEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/UserCommandDeleteEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.interaction/UserCommandDeleteEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/UserCommandDeleteEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.interaction/UserCommandUpdateEvent : dev.kord.core.event.interaction/ApplicationCommandUpdateEvent { // dev.kord.core.event.interaction/UserCommandUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity.application/GuildUserCommand, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.interaction/UserCommandUpdateEvent.<init>|<init>(dev.kord.core.entity.application.GuildUserCommand;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val command // dev.kord.core.event.interaction/UserCommandUpdateEvent.command|{}command[0]
        final fun <get-command>(): dev.kord.core.entity.application/GuildUserCommand // dev.kord.core.event.interaction/UserCommandUpdateEvent.command.<get-command>|<get-command>(){}[0]
    final val customContext // dev.kord.core.event.interaction/UserCommandUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.interaction/UserCommandUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val kord // dev.kord.core.event.interaction/UserCommandUpdateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.interaction/UserCommandUpdateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val shard // dev.kord.core.event.interaction/UserCommandUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.interaction/UserCommandUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]
}

final class dev.kord.core.event.message/MessageBulkDeleteEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.message/MessageBulkDeleteEvent|null[0]
    constructor <init>(kotlin.collections/Set<dev.kord.common.entity/Snowflake>, kotlin.collections/Set<dev.kord.core.entity/Message>, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake?, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.message/MessageBulkDeleteEvent.<init>|<init>(kotlin.collections.Set<dev.kord.common.entity.Snowflake>;kotlin.collections.Set<dev.kord.core.entity.Message>;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val channel // dev.kord.core.event.message/MessageBulkDeleteEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.behavior.channel/MessageChannelBehavior // dev.kord.core.event.message/MessageBulkDeleteEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val channelId // dev.kord.core.event.message/MessageBulkDeleteEvent.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.message/MessageBulkDeleteEvent.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val customContext // dev.kord.core.event.message/MessageBulkDeleteEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.message/MessageBulkDeleteEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val guild // dev.kord.core.event.message/MessageBulkDeleteEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior? // dev.kord.core.event.message/MessageBulkDeleteEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.message/MessageBulkDeleteEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.event.message/MessageBulkDeleteEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.message/MessageBulkDeleteEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.message/MessageBulkDeleteEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val messageIds // dev.kord.core.event.message/MessageBulkDeleteEvent.messageIds|{}messageIds[0]
        final fun <get-messageIds>(): kotlin.collections/Set<dev.kord.common.entity/Snowflake> // dev.kord.core.event.message/MessageBulkDeleteEvent.messageIds.<get-messageIds>|<get-messageIds>(){}[0]
    final val messages // dev.kord.core.event.message/MessageBulkDeleteEvent.messages|{}messages[0]
        final fun <get-messages>(): kotlin.collections/Set<dev.kord.core.entity/Message> // dev.kord.core.event.message/MessageBulkDeleteEvent.messages.<get-messages>|<get-messages>(){}[0]
    final val shard // dev.kord.core.event.message/MessageBulkDeleteEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.message/MessageBulkDeleteEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.message/MessageBulkDeleteEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.message/MessageBulkDeleteEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.message/MessageBulkDeleteEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.message/MessageBulkDeleteEvent // dev.kord.core.event.message/MessageBulkDeleteEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getChannel(): dev.kord.core.entity.channel/MessageChannel // dev.kord.core.event.message/MessageBulkDeleteEvent.getChannel|getChannel(){}[0]
    final suspend fun getChannelOrNull(): dev.kord.core.entity.channel/MessageChannel? // dev.kord.core.event.message/MessageBulkDeleteEvent.getChannelOrNull|getChannelOrNull(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.message/MessageBulkDeleteEvent.getGuildOrNull|getGuildOrNull(){}[0]
}

final class dev.kord.core.event.message/MessageCreateEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.message/MessageCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity/Message, dev.kord.common.entity/Snowflake?, dev.kord.core.entity/Member?, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.message/MessageCreateEvent.<init>|<init>(dev.kord.core.entity.Message;dev.kord.common.entity.Snowflake?;dev.kord.core.entity.Member?;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val customContext // dev.kord.core.event.message/MessageCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.message/MessageCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val guildId // dev.kord.core.event.message/MessageCreateEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.event.message/MessageCreateEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.message/MessageCreateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.message/MessageCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val member // dev.kord.core.event.message/MessageCreateEvent.member|{}member[0]
        final fun <get-member>(): dev.kord.core.entity/Member? // dev.kord.core.event.message/MessageCreateEvent.member.<get-member>|<get-member>(){}[0]
    final val message // dev.kord.core.event.message/MessageCreateEvent.message|{}message[0]
        final fun <get-message>(): dev.kord.core.entity/Message // dev.kord.core.event.message/MessageCreateEvent.message.<get-message>|<get-message>(){}[0]
    final val shard // dev.kord.core.event.message/MessageCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.message/MessageCreateEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.message/MessageCreateEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.message/MessageCreateEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.message/MessageCreateEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.message/MessageCreateEvent // dev.kord.core.event.message/MessageCreateEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.message/MessageCreateEvent.getGuildOrNull|getGuildOrNull(){}[0]
}

final class dev.kord.core.event.message/MessageDeleteEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.message/MessageDeleteEvent|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake?, dev.kord.core.entity/Message?, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.message/MessageDeleteEvent.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?;dev.kord.core.entity.Message?;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val channel // dev.kord.core.event.message/MessageDeleteEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.behavior.channel/MessageChannelBehavior // dev.kord.core.event.message/MessageDeleteEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val channelId // dev.kord.core.event.message/MessageDeleteEvent.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.message/MessageDeleteEvent.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val customContext // dev.kord.core.event.message/MessageDeleteEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.message/MessageDeleteEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val guild // dev.kord.core.event.message/MessageDeleteEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior? // dev.kord.core.event.message/MessageDeleteEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.message/MessageDeleteEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.event.message/MessageDeleteEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.message/MessageDeleteEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.message/MessageDeleteEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val message // dev.kord.core.event.message/MessageDeleteEvent.message|{}message[0]
        final fun <get-message>(): dev.kord.core.entity/Message? // dev.kord.core.event.message/MessageDeleteEvent.message.<get-message>|<get-message>(){}[0]
    final val messageId // dev.kord.core.event.message/MessageDeleteEvent.messageId|{}messageId[0]
        final fun <get-messageId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.message/MessageDeleteEvent.messageId.<get-messageId>|<get-messageId>(){}[0]
    final val shard // dev.kord.core.event.message/MessageDeleteEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.message/MessageDeleteEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.message/MessageDeleteEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.message/MessageDeleteEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.message/MessageDeleteEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.message/MessageDeleteEvent // dev.kord.core.event.message/MessageDeleteEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getChannel(): dev.kord.core.entity.channel/MessageChannel // dev.kord.core.event.message/MessageDeleteEvent.getChannel|getChannel(){}[0]
    final suspend fun getChannelOrNull(): dev.kord.core.entity.channel/MessageChannel? // dev.kord.core.event.message/MessageDeleteEvent.getChannelOrNull|getChannelOrNull(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.message/MessageDeleteEvent.getGuildOrNull|getGuildOrNull(){}[0]
}

final class dev.kord.core.event.message/MessageUpdateEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.message/MessageUpdateEvent|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordPartialMessage, dev.kord.core.entity/Message?, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.message/MessageUpdateEvent.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.DiscordPartialMessage;dev.kord.core.entity.Message?;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val channel // dev.kord.core.event.message/MessageUpdateEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.behavior.channel/MessageChannelBehavior // dev.kord.core.event.message/MessageUpdateEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val channelId // dev.kord.core.event.message/MessageUpdateEvent.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.message/MessageUpdateEvent.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val customContext // dev.kord.core.event.message/MessageUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.message/MessageUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val kord // dev.kord.core.event.message/MessageUpdateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.message/MessageUpdateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val message // dev.kord.core.event.message/MessageUpdateEvent.message|{}message[0]
        final fun <get-message>(): dev.kord.core.behavior/MessageBehavior // dev.kord.core.event.message/MessageUpdateEvent.message.<get-message>|<get-message>(){}[0]
    final val messageId // dev.kord.core.event.message/MessageUpdateEvent.messageId|{}messageId[0]
        final fun <get-messageId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.message/MessageUpdateEvent.messageId.<get-messageId>|<get-messageId>(){}[0]
    final val new // dev.kord.core.event.message/MessageUpdateEvent.new|{}new[0]
        final fun <get-new>(): dev.kord.common.entity/DiscordPartialMessage // dev.kord.core.event.message/MessageUpdateEvent.new.<get-new>|<get-new>(){}[0]
    final val old // dev.kord.core.event.message/MessageUpdateEvent.old|{}old[0]
        final fun <get-old>(): dev.kord.core.entity/Message? // dev.kord.core.event.message/MessageUpdateEvent.old.<get-old>|<get-old>(){}[0]
    final val shard // dev.kord.core.event.message/MessageUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.message/MessageUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.message/MessageUpdateEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.message/MessageUpdateEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.message/MessageUpdateEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.message/MessageUpdateEvent // dev.kord.core.event.message/MessageUpdateEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getMessage(): dev.kord.core.entity/Message // dev.kord.core.event.message/MessageUpdateEvent.getMessage|getMessage(){}[0]
    final suspend fun getMessageOrNull(): dev.kord.core.entity/Message? // dev.kord.core.event.message/MessageUpdateEvent.getMessageOrNull|getMessageOrNull(){}[0]
}

final class dev.kord.core.event.message/ReactionAddEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.message/ReactionAddEvent|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake?, dev.kord.core.entity/ReactionEmoji, dev.kord.common.entity/Snowflake?, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.message/ReactionAddEvent.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?;dev.kord.core.entity.ReactionEmoji;dev.kord.common.entity.Snowflake?;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val channel // dev.kord.core.event.message/ReactionAddEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.behavior.channel/MessageChannelBehavior // dev.kord.core.event.message/ReactionAddEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val channelId // dev.kord.core.event.message/ReactionAddEvent.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.message/ReactionAddEvent.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val customContext // dev.kord.core.event.message/ReactionAddEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.message/ReactionAddEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val emoji // dev.kord.core.event.message/ReactionAddEvent.emoji|{}emoji[0]
        final fun <get-emoji>(): dev.kord.core.entity/ReactionEmoji // dev.kord.core.event.message/ReactionAddEvent.emoji.<get-emoji>|<get-emoji>(){}[0]
    final val guild // dev.kord.core.event.message/ReactionAddEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior? // dev.kord.core.event.message/ReactionAddEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.message/ReactionAddEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.event.message/ReactionAddEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.message/ReactionAddEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.message/ReactionAddEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val message // dev.kord.core.event.message/ReactionAddEvent.message|{}message[0]
        final fun <get-message>(): dev.kord.core.behavior/MessageBehavior // dev.kord.core.event.message/ReactionAddEvent.message.<get-message>|<get-message>(){}[0]
    final val messageAuthor // dev.kord.core.event.message/ReactionAddEvent.messageAuthor|{}messageAuthor[0]
        final fun <get-messageAuthor>(): dev.kord.core.behavior/UserBehavior? // dev.kord.core.event.message/ReactionAddEvent.messageAuthor.<get-messageAuthor>|<get-messageAuthor>(){}[0]
    final val messageAuthorAsMember // dev.kord.core.event.message/ReactionAddEvent.messageAuthorAsMember|{}messageAuthorAsMember[0]
        final fun <get-messageAuthorAsMember>(): dev.kord.core.behavior/MemberBehavior? // dev.kord.core.event.message/ReactionAddEvent.messageAuthorAsMember.<get-messageAuthorAsMember>|<get-messageAuthorAsMember>(){}[0]
    final val messageAuthorId // dev.kord.core.event.message/ReactionAddEvent.messageAuthorId|{}messageAuthorId[0]
        final fun <get-messageAuthorId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.event.message/ReactionAddEvent.messageAuthorId.<get-messageAuthorId>|<get-messageAuthorId>(){}[0]
    final val messageId // dev.kord.core.event.message/ReactionAddEvent.messageId|{}messageId[0]
        final fun <get-messageId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.message/ReactionAddEvent.messageId.<get-messageId>|<get-messageId>(){}[0]
    final val shard // dev.kord.core.event.message/ReactionAddEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.message/ReactionAddEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.message/ReactionAddEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.message/ReactionAddEvent.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val user // dev.kord.core.event.message/ReactionAddEvent.user|{}user[0]
        final fun <get-user>(): dev.kord.core.behavior/UserBehavior // dev.kord.core.event.message/ReactionAddEvent.user.<get-user>|<get-user>(){}[0]
    final val userAsMember // dev.kord.core.event.message/ReactionAddEvent.userAsMember|{}userAsMember[0]
        final fun <get-userAsMember>(): dev.kord.core.behavior/MemberBehavior? // dev.kord.core.event.message/ReactionAddEvent.userAsMember.<get-userAsMember>|<get-userAsMember>(){}[0]
    final val userId // dev.kord.core.event.message/ReactionAddEvent.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.message/ReactionAddEvent.userId.<get-userId>|<get-userId>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.message/ReactionAddEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.message/ReactionAddEvent // dev.kord.core.event.message/ReactionAddEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getChannel(): dev.kord.core.entity.channel/MessageChannel // dev.kord.core.event.message/ReactionAddEvent.getChannel|getChannel(){}[0]
    final suspend fun getChannelOrNull(): dev.kord.core.entity.channel/MessageChannel? // dev.kord.core.event.message/ReactionAddEvent.getChannelOrNull|getChannelOrNull(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.message/ReactionAddEvent.getGuildOrNull|getGuildOrNull(){}[0]
    final suspend fun getMessage(): dev.kord.core.entity/Message // dev.kord.core.event.message/ReactionAddEvent.getMessage|getMessage(){}[0]
    final suspend fun getMessageAuthorAsMemberOrNull(): dev.kord.core.entity/Member? // dev.kord.core.event.message/ReactionAddEvent.getMessageAuthorAsMemberOrNull|getMessageAuthorAsMemberOrNull(){}[0]
    final suspend fun getMessageAuthorOrNull(): dev.kord.core.entity/User? // dev.kord.core.event.message/ReactionAddEvent.getMessageAuthorOrNull|getMessageAuthorOrNull(){}[0]
    final suspend fun getMessageOrNull(): dev.kord.core.entity/Message? // dev.kord.core.event.message/ReactionAddEvent.getMessageOrNull|getMessageOrNull(){}[0]
    final suspend fun getUser(): dev.kord.core.entity/User // dev.kord.core.event.message/ReactionAddEvent.getUser|getUser(){}[0]
    final suspend fun getUserAsMember(): dev.kord.core.entity/Member? // dev.kord.core.event.message/ReactionAddEvent.getUserAsMember|getUserAsMember(){}[0]
    final suspend fun getUserOrNull(): dev.kord.core.entity/User? // dev.kord.core.event.message/ReactionAddEvent.getUserOrNull|getUserOrNull(){}[0]
}

final class dev.kord.core.event.message/ReactionRemoveAllEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.message/ReactionRemoveAllEvent|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake?, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.message/ReactionRemoveAllEvent.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val channel // dev.kord.core.event.message/ReactionRemoveAllEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.behavior.channel/MessageChannelBehavior // dev.kord.core.event.message/ReactionRemoveAllEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val channelId // dev.kord.core.event.message/ReactionRemoveAllEvent.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.message/ReactionRemoveAllEvent.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val customContext // dev.kord.core.event.message/ReactionRemoveAllEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.message/ReactionRemoveAllEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val guild // dev.kord.core.event.message/ReactionRemoveAllEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior? // dev.kord.core.event.message/ReactionRemoveAllEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.message/ReactionRemoveAllEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.event.message/ReactionRemoveAllEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.message/ReactionRemoveAllEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.message/ReactionRemoveAllEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val message // dev.kord.core.event.message/ReactionRemoveAllEvent.message|{}message[0]
        final fun <get-message>(): dev.kord.core.behavior/MessageBehavior // dev.kord.core.event.message/ReactionRemoveAllEvent.message.<get-message>|<get-message>(){}[0]
    final val messageId // dev.kord.core.event.message/ReactionRemoveAllEvent.messageId|{}messageId[0]
        final fun <get-messageId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.message/ReactionRemoveAllEvent.messageId.<get-messageId>|<get-messageId>(){}[0]
    final val shard // dev.kord.core.event.message/ReactionRemoveAllEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.message/ReactionRemoveAllEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.message/ReactionRemoveAllEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.message/ReactionRemoveAllEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.message/ReactionRemoveAllEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.message/ReactionRemoveAllEvent // dev.kord.core.event.message/ReactionRemoveAllEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getChannel(): dev.kord.core.entity.channel/MessageChannel // dev.kord.core.event.message/ReactionRemoveAllEvent.getChannel|getChannel(){}[0]
    final suspend fun getChannelOrNull(): dev.kord.core.entity.channel/MessageChannel? // dev.kord.core.event.message/ReactionRemoveAllEvent.getChannelOrNull|getChannelOrNull(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.message/ReactionRemoveAllEvent.getGuildOrNull|getGuildOrNull(){}[0]
    final suspend fun getMessage(): dev.kord.core.entity/Message // dev.kord.core.event.message/ReactionRemoveAllEvent.getMessage|getMessage(){}[0]
    final suspend fun getMessageOrNull(): dev.kord.core.entity/Message? // dev.kord.core.event.message/ReactionRemoveAllEvent.getMessageOrNull|getMessageOrNull(){}[0]
}

final class dev.kord.core.event.message/ReactionRemoveEmojiEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.message/ReactionRemoveEmojiEvent|null[0]
    constructor <init>(dev.kord.core.cache.data/ReactionRemoveEmojiData, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.message/ReactionRemoveEmojiEvent.<init>|<init>(dev.kord.core.cache.data.ReactionRemoveEmojiData;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val channel // dev.kord.core.event.message/ReactionRemoveEmojiEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.behavior.channel/GuildMessageChannelBehavior // dev.kord.core.event.message/ReactionRemoveEmojiEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val channelId // dev.kord.core.event.message/ReactionRemoveEmojiEvent.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.message/ReactionRemoveEmojiEvent.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val customContext // dev.kord.core.event.message/ReactionRemoveEmojiEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.message/ReactionRemoveEmojiEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val data // dev.kord.core.event.message/ReactionRemoveEmojiEvent.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/ReactionRemoveEmojiData // dev.kord.core.event.message/ReactionRemoveEmojiEvent.data.<get-data>|<get-data>(){}[0]
    final val emoji // dev.kord.core.event.message/ReactionRemoveEmojiEvent.emoji|{}emoji[0]
        final fun <get-emoji>(): dev.kord.core.entity/ReactionEmoji // dev.kord.core.event.message/ReactionRemoveEmojiEvent.emoji.<get-emoji>|<get-emoji>(){}[0]
    final val guild // dev.kord.core.event.message/ReactionRemoveEmojiEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.event.message/ReactionRemoveEmojiEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.message/ReactionRemoveEmojiEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.message/ReactionRemoveEmojiEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.message/ReactionRemoveEmojiEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.message/ReactionRemoveEmojiEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val message // dev.kord.core.event.message/ReactionRemoveEmojiEvent.message|{}message[0]
        final fun <get-message>(): dev.kord.core.behavior/MessageBehavior // dev.kord.core.event.message/ReactionRemoveEmojiEvent.message.<get-message>|<get-message>(){}[0]
    final val messageId // dev.kord.core.event.message/ReactionRemoveEmojiEvent.messageId|{}messageId[0]
        final fun <get-messageId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.message/ReactionRemoveEmojiEvent.messageId.<get-messageId>|<get-messageId>(){}[0]
    final val shard // dev.kord.core.event.message/ReactionRemoveEmojiEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.message/ReactionRemoveEmojiEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.message/ReactionRemoveEmojiEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.message/ReactionRemoveEmojiEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.message/ReactionRemoveEmojiEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.message/ReactionRemoveEmojiEvent // dev.kord.core.event.message/ReactionRemoveEmojiEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getChannel(): dev.kord.core.entity.channel/TopGuildMessageChannel // dev.kord.core.event.message/ReactionRemoveEmojiEvent.getChannel|getChannel(){}[0]
    final suspend fun getChannelOrNull(): dev.kord.core.entity.channel/TopGuildMessageChannel? // dev.kord.core.event.message/ReactionRemoveEmojiEvent.getChannelOrNull|getChannelOrNull(){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.event.message/ReactionRemoveEmojiEvent.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.message/ReactionRemoveEmojiEvent.getGuildOrNull|getGuildOrNull(){}[0]
    final suspend fun getMessage(): dev.kord.core.entity/Message // dev.kord.core.event.message/ReactionRemoveEmojiEvent.getMessage|getMessage(){}[0]
    final suspend fun getMessageOrNull(): dev.kord.core.entity/Message? // dev.kord.core.event.message/ReactionRemoveEmojiEvent.getMessageOrNull|getMessageOrNull(){}[0]
}

final class dev.kord.core.event.message/ReactionRemoveEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.message/ReactionRemoveEvent|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake?, dev.kord.core.entity/ReactionEmoji, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.message/ReactionRemoveEvent.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?;dev.kord.core.entity.ReactionEmoji;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val channel // dev.kord.core.event.message/ReactionRemoveEvent.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.behavior.channel/MessageChannelBehavior // dev.kord.core.event.message/ReactionRemoveEvent.channel.<get-channel>|<get-channel>(){}[0]
    final val channelId // dev.kord.core.event.message/ReactionRemoveEvent.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.message/ReactionRemoveEvent.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val customContext // dev.kord.core.event.message/ReactionRemoveEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.message/ReactionRemoveEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val emoji // dev.kord.core.event.message/ReactionRemoveEvent.emoji|{}emoji[0]
        final fun <get-emoji>(): dev.kord.core.entity/ReactionEmoji // dev.kord.core.event.message/ReactionRemoveEvent.emoji.<get-emoji>|<get-emoji>(){}[0]
    final val guild // dev.kord.core.event.message/ReactionRemoveEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior? // dev.kord.core.event.message/ReactionRemoveEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.message/ReactionRemoveEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.event.message/ReactionRemoveEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.message/ReactionRemoveEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.message/ReactionRemoveEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val message // dev.kord.core.event.message/ReactionRemoveEvent.message|{}message[0]
        final fun <get-message>(): dev.kord.core.behavior/MessageBehavior // dev.kord.core.event.message/ReactionRemoveEvent.message.<get-message>|<get-message>(){}[0]
    final val messageId // dev.kord.core.event.message/ReactionRemoveEvent.messageId|{}messageId[0]
        final fun <get-messageId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.message/ReactionRemoveEvent.messageId.<get-messageId>|<get-messageId>(){}[0]
    final val shard // dev.kord.core.event.message/ReactionRemoveEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.message/ReactionRemoveEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.message/ReactionRemoveEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.message/ReactionRemoveEvent.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val user // dev.kord.core.event.message/ReactionRemoveEvent.user|{}user[0]
        final fun <get-user>(): dev.kord.core.behavior/UserBehavior // dev.kord.core.event.message/ReactionRemoveEvent.user.<get-user>|<get-user>(){}[0]
    final val userAsMember // dev.kord.core.event.message/ReactionRemoveEvent.userAsMember|{}userAsMember[0]
        final fun <get-userAsMember>(): dev.kord.core.behavior/MemberBehavior? // dev.kord.core.event.message/ReactionRemoveEvent.userAsMember.<get-userAsMember>|<get-userAsMember>(){}[0]
    final val userId // dev.kord.core.event.message/ReactionRemoveEvent.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.message/ReactionRemoveEvent.userId.<get-userId>|<get-userId>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.message/ReactionRemoveEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.message/ReactionRemoveEvent // dev.kord.core.event.message/ReactionRemoveEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getChannel(): dev.kord.core.entity.channel/MessageChannel // dev.kord.core.event.message/ReactionRemoveEvent.getChannel|getChannel(){}[0]
    final suspend fun getChannelOrNull(): dev.kord.core.entity.channel/MessageChannel? // dev.kord.core.event.message/ReactionRemoveEvent.getChannelOrNull|getChannelOrNull(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.message/ReactionRemoveEvent.getGuildOrNull|getGuildOrNull(){}[0]
    final suspend fun getMessage(): dev.kord.core.entity/Message // dev.kord.core.event.message/ReactionRemoveEvent.getMessage|getMessage(){}[0]
    final suspend fun getMessageOrNull(): dev.kord.core.entity/Message? // dev.kord.core.event.message/ReactionRemoveEvent.getMessageOrNull|getMessageOrNull(){}[0]
    final suspend fun getUser(): dev.kord.core.entity/User // dev.kord.core.event.message/ReactionRemoveEvent.getUser|getUser(){}[0]
    final suspend fun getUserAsMember(): dev.kord.core.entity/Member? // dev.kord.core.event.message/ReactionRemoveEvent.getUserAsMember|getUserAsMember(){}[0]
    final suspend fun getUserOrNull(): dev.kord.core.entity/User? // dev.kord.core.event.message/ReactionRemoveEvent.getUserOrNull|getUserOrNull(){}[0]
}

final class dev.kord.core.event.role/RoleCreateEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.role/RoleCreateEvent|null[0]
    constructor <init>(dev.kord.core.entity/Role, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.role/RoleCreateEvent.<init>|<init>(dev.kord.core.entity.Role;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val customContext // dev.kord.core.event.role/RoleCreateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.role/RoleCreateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val guild // dev.kord.core.event.role/RoleCreateEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.event.role/RoleCreateEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.role/RoleCreateEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.role/RoleCreateEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.role/RoleCreateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.role/RoleCreateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val role // dev.kord.core.event.role/RoleCreateEvent.role|{}role[0]
        final fun <get-role>(): dev.kord.core.entity/Role // dev.kord.core.event.role/RoleCreateEvent.role.<get-role>|<get-role>(){}[0]
    final val shard // dev.kord.core.event.role/RoleCreateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.role/RoleCreateEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.role/RoleCreateEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.role/RoleCreateEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.role/RoleCreateEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.role/RoleCreateEvent // dev.kord.core.event.role/RoleCreateEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.event.role/RoleCreateEvent.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.role/RoleCreateEvent.getGuildOrNull|getGuildOrNull(){}[0]
}

final class dev.kord.core.event.role/RoleDeleteEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.role/RoleDeleteEvent|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.core.entity/Role?, dev.kord.core/Kord, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.role/RoleDeleteEvent.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.core.entity.Role?;dev.kord.core.Kord;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val customContext // dev.kord.core.event.role/RoleDeleteEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.role/RoleDeleteEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val guild // dev.kord.core.event.role/RoleDeleteEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.event.role/RoleDeleteEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.role/RoleDeleteEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.role/RoleDeleteEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.role/RoleDeleteEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.role/RoleDeleteEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val role // dev.kord.core.event.role/RoleDeleteEvent.role|{}role[0]
        final fun <get-role>(): dev.kord.core.entity/Role? // dev.kord.core.event.role/RoleDeleteEvent.role.<get-role>|<get-role>(){}[0]
    final val roleId // dev.kord.core.event.role/RoleDeleteEvent.roleId|{}roleId[0]
        final fun <get-roleId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.role/RoleDeleteEvent.roleId.<get-roleId>|<get-roleId>(){}[0]
    final val shard // dev.kord.core.event.role/RoleDeleteEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.role/RoleDeleteEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.role/RoleDeleteEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.role/RoleDeleteEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.role/RoleDeleteEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.role/RoleDeleteEvent // dev.kord.core.event.role/RoleDeleteEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.event.role/RoleDeleteEvent.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.role/RoleDeleteEvent.getGuildOrNull|getGuildOrNull(){}[0]
}

final class dev.kord.core.event.role/RoleUpdateEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.role/RoleUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity/Role, dev.kord.core.entity/Role?, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.role/RoleUpdateEvent.<init>|<init>(dev.kord.core.entity.Role;dev.kord.core.entity.Role?;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val customContext // dev.kord.core.event.role/RoleUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.role/RoleUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val guild // dev.kord.core.event.role/RoleUpdateEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.event.role/RoleUpdateEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.role/RoleUpdateEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.role/RoleUpdateEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.role/RoleUpdateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.role/RoleUpdateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val old // dev.kord.core.event.role/RoleUpdateEvent.old|{}old[0]
        final fun <get-old>(): dev.kord.core.entity/Role? // dev.kord.core.event.role/RoleUpdateEvent.old.<get-old>|<get-old>(){}[0]
    final val role // dev.kord.core.event.role/RoleUpdateEvent.role|{}role[0]
        final fun <get-role>(): dev.kord.core.entity/Role // dev.kord.core.event.role/RoleUpdateEvent.role.<get-role>|<get-role>(){}[0]
    final val shard // dev.kord.core.event.role/RoleUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.role/RoleUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.role/RoleUpdateEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.role/RoleUpdateEvent.supplier.<get-supplier>|<get-supplier>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.role/RoleUpdateEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.role/RoleUpdateEvent // dev.kord.core.event.role/RoleUpdateEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.event.role/RoleUpdateEvent.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.role/RoleUpdateEvent.getGuildOrNull|getGuildOrNull(){}[0]
}

final class dev.kord.core.event.user/PresenceUpdateEvent : dev.kord.core.entity/Strategizable, dev.kord.core.event/Event { // dev.kord.core.event.user/PresenceUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity/User?, dev.kord.common.entity/DiscordPresenceUser, dev.kord.common.entity/Snowflake, dev.kord.core.entity/Presence?, dev.kord.core.entity/Presence, kotlin/Int, kotlin/Any?, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.event.user/PresenceUpdateEvent.<init>|<init>(dev.kord.core.entity.User?;dev.kord.common.entity.DiscordPresenceUser;dev.kord.common.entity.Snowflake;dev.kord.core.entity.Presence?;dev.kord.core.entity.Presence;kotlin.Int;kotlin.Any?;dev.kord.core.supplier.EntitySupplier){}[0]

    final val customContext // dev.kord.core.event.user/PresenceUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.user/PresenceUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val guild // dev.kord.core.event.user/PresenceUpdateEvent.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior // dev.kord.core.event.user/PresenceUpdateEvent.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.event.user/PresenceUpdateEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.event.user/PresenceUpdateEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val kord // dev.kord.core.event.user/PresenceUpdateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.user/PresenceUpdateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val member // dev.kord.core.event.user/PresenceUpdateEvent.member|{}member[0]
        final fun <get-member>(): dev.kord.core.behavior/MemberBehavior // dev.kord.core.event.user/PresenceUpdateEvent.member.<get-member>|<get-member>(){}[0]
    final val old // dev.kord.core.event.user/PresenceUpdateEvent.old|{}old[0]
        final fun <get-old>(): dev.kord.core.entity/Presence? // dev.kord.core.event.user/PresenceUpdateEvent.old.<get-old>|<get-old>(){}[0]
    final val oldUser // dev.kord.core.event.user/PresenceUpdateEvent.oldUser|{}oldUser[0]
        final fun <get-oldUser>(): dev.kord.core.entity/User? // dev.kord.core.event.user/PresenceUpdateEvent.oldUser.<get-oldUser>|<get-oldUser>(){}[0]
    final val presence // dev.kord.core.event.user/PresenceUpdateEvent.presence|{}presence[0]
        final fun <get-presence>(): dev.kord.core.entity/Presence // dev.kord.core.event.user/PresenceUpdateEvent.presence.<get-presence>|<get-presence>(){}[0]
    final val shard // dev.kord.core.event.user/PresenceUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.user/PresenceUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val supplier // dev.kord.core.event.user/PresenceUpdateEvent.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.event.user/PresenceUpdateEvent.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val user // dev.kord.core.event.user/PresenceUpdateEvent.user|{}user[0]
        final fun <get-user>(): dev.kord.common.entity/DiscordPresenceUser // dev.kord.core.event.user/PresenceUpdateEvent.user.<get-user>|<get-user>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.user/PresenceUpdateEvent.toString|toString(){}[0]
    final fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.event.user/PresenceUpdateEvent // dev.kord.core.event.user/PresenceUpdateEvent.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getGuild(): dev.kord.core.entity/Guild // dev.kord.core.event.user/PresenceUpdateEvent.getGuild|getGuild(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.event.user/PresenceUpdateEvent.getGuildOrNull|getGuildOrNull(){}[0]
    final suspend fun getMember(): dev.kord.core.entity/Member // dev.kord.core.event.user/PresenceUpdateEvent.getMember|getMember(){}[0]
    final suspend fun getMemberOrNull(): dev.kord.core.entity/Member? // dev.kord.core.event.user/PresenceUpdateEvent.getMemberOrNull|getMemberOrNull(){}[0]
    final suspend fun getUser(): dev.kord.core.entity/User // dev.kord.core.event.user/PresenceUpdateEvent.getUser|getUser(){}[0]
    final suspend fun getUserOrNull(): dev.kord.core.entity/User? // dev.kord.core.event.user/PresenceUpdateEvent.getUserOrNull|getUserOrNull(){}[0]
}

final class dev.kord.core.event.user/UserUpdateEvent : dev.kord.core.event/Event { // dev.kord.core.event.user/UserUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity/User?, dev.kord.core.entity/User, kotlin/Int, kotlin/Any?) // dev.kord.core.event.user/UserUpdateEvent.<init>|<init>(dev.kord.core.entity.User?;dev.kord.core.entity.User;kotlin.Int;kotlin.Any?){}[0]

    final val customContext // dev.kord.core.event.user/UserUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.user/UserUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val kord // dev.kord.core.event.user/UserUpdateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.user/UserUpdateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val old // dev.kord.core.event.user/UserUpdateEvent.old|{}old[0]
        final fun <get-old>(): dev.kord.core.entity/User? // dev.kord.core.event.user/UserUpdateEvent.old.<get-old>|<get-old>(){}[0]
    final val shard // dev.kord.core.event.user/UserUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.user/UserUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val user // dev.kord.core.event.user/UserUpdateEvent.user|{}user[0]
        final fun <get-user>(): dev.kord.core.entity/User // dev.kord.core.event.user/UserUpdateEvent.user.<get-user>|<get-user>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.user/UserUpdateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event.user/VoiceStateUpdateEvent : dev.kord.core.event/Event { // dev.kord.core.event.user/VoiceStateUpdateEvent|null[0]
    constructor <init>(dev.kord.core.entity/VoiceState?, dev.kord.core.entity/VoiceState, kotlin/Int, kotlin/Any?) // dev.kord.core.event.user/VoiceStateUpdateEvent.<init>|<init>(dev.kord.core.entity.VoiceState?;dev.kord.core.entity.VoiceState;kotlin.Int;kotlin.Any?){}[0]

    final val customContext // dev.kord.core.event.user/VoiceStateUpdateEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.user/VoiceStateUpdateEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val kord // dev.kord.core.event.user/VoiceStateUpdateEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.user/VoiceStateUpdateEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val old // dev.kord.core.event.user/VoiceStateUpdateEvent.old|{}old[0]
        final fun <get-old>(): dev.kord.core.entity/VoiceState? // dev.kord.core.event.user/VoiceStateUpdateEvent.old.<get-old>|<get-old>(){}[0]
    final val shard // dev.kord.core.event.user/VoiceStateUpdateEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event.user/VoiceStateUpdateEvent.shard.<get-shard>|<get-shard>(){}[0]
    final val state // dev.kord.core.event.user/VoiceStateUpdateEvent.state|{}state[0]
        final fun <get-state>(): dev.kord.core.entity/VoiceState // dev.kord.core.event.user/VoiceStateUpdateEvent.state.<get-state>|<get-state>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event.user/VoiceStateUpdateEvent.toString|toString(){}[0]
}

final class dev.kord.core.event/UnknownEvent : dev.kord.core.event/Event { // dev.kord.core.event/UnknownEvent|null[0]
    constructor <init>(kotlin/String?, kotlinx.serialization.json/JsonElement?, dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event/UnknownEvent.<init>|<init>(kotlin.String?;kotlinx.serialization.json.JsonElement?;dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

    final val customContext // dev.kord.core.event/UnknownEvent.customContext|{}customContext[0]
        final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event/UnknownEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
    final val data // dev.kord.core.event/UnknownEvent.data|{}data[0]
        final fun <get-data>(): kotlinx.serialization.json/JsonElement? // dev.kord.core.event/UnknownEvent.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.event/UnknownEvent.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event/UnknownEvent.kord.<get-kord>|<get-kord>(){}[0]
    final val name // dev.kord.core.event/UnknownEvent.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.core.event/UnknownEvent.name.<get-name>|<get-name>(){}[0]
    final val shard // dev.kord.core.event/UnknownEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.event/UnknownEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.event/UnknownEvent.toString|toString(){}[0]
}

final class dev.kord.core.exception/EntityNotFoundException : kotlin/Exception { // dev.kord.core.exception/EntityNotFoundException|null[0]
    constructor <init>(kotlin/String) // dev.kord.core.exception/EntityNotFoundException.<init>|<init>(kotlin.String){}[0]
    constructor <init>(kotlin/String, kotlin/Throwable) // dev.kord.core.exception/EntityNotFoundException.<init>|<init>(kotlin.String;kotlin.Throwable){}[0]
    constructor <init>(kotlin/Throwable) // dev.kord.core.exception/EntityNotFoundException.<init>|<init>(kotlin.Throwable){}[0]

    final object Companion { // dev.kord.core.exception/EntityNotFoundException.Companion|null[0]
        final inline fun <#A2: reified dev.kord.core.entity.application/ApplicationCommand> applicationCommandNotFound(dev.kord.common.entity/Snowflake): kotlin/Nothing // dev.kord.core.exception/EntityNotFoundException.Companion.applicationCommandNotFound|applicationCommandNotFound(dev.kord.common.entity.Snowflake){0ยง<dev.kord.core.entity.application.ApplicationCommand>}[0]
        final inline fun <#A2: reified dev.kord.core.entity.channel/Channel> channelNotFound(dev.kord.common.entity/Snowflake): kotlin/Nothing // dev.kord.core.exception/EntityNotFoundException.Companion.channelNotFound|channelNotFound(dev.kord.common.entity.Snowflake){0ยง<dev.kord.core.entity.channel.Channel>}[0]
        final inline fun applicationCommandPermissionsNotFound(dev.kord.common.entity/Snowflake): kotlin/Nothing // dev.kord.core.exception/EntityNotFoundException.Companion.applicationCommandPermissionsNotFound|applicationCommandPermissionsNotFound(dev.kord.common.entity.Snowflake){}[0]
        final inline fun autoModerationRuleNotFound(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): kotlin/Nothing // dev.kord.core.exception/EntityNotFoundException.Companion.autoModerationRuleNotFound|autoModerationRuleNotFound(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
        final inline fun banNotFound(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): kotlin/Nothing // dev.kord.core.exception/EntityNotFoundException.Companion.banNotFound|banNotFound(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
        final inline fun emojiNotFound(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): kotlin/Nothing // dev.kord.core.exception/EntityNotFoundException.Companion.emojiNotFound|emojiNotFound(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
        final inline fun entityNotFound(kotlin/String, dev.kord.common.entity/Snowflake): kotlin/Nothing // dev.kord.core.exception/EntityNotFoundException.Companion.entityNotFound|entityNotFound(kotlin.String;dev.kord.common.entity.Snowflake){}[0]
        final inline fun followupMessageNotFound(kotlin/String, dev.kord.common.entity/Snowflake): kotlin/Nothing // dev.kord.core.exception/EntityNotFoundException.Companion.followupMessageNotFound|followupMessageNotFound(kotlin.String;dev.kord.common.entity.Snowflake){}[0]
        final inline fun guildEntityNotFound(kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): kotlin/Nothing // dev.kord.core.exception/EntityNotFoundException.Companion.guildEntityNotFound|guildEntityNotFound(kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
        final inline fun guildNotFound(dev.kord.common.entity/Snowflake): kotlin/Nothing // dev.kord.core.exception/EntityNotFoundException.Companion.guildNotFound|guildNotFound(dev.kord.common.entity.Snowflake){}[0]
        final inline fun guildScheduledEventNotFound(dev.kord.common.entity/Snowflake): kotlin/Nothing // dev.kord.core.exception/EntityNotFoundException.Companion.guildScheduledEventNotFound|guildScheduledEventNotFound(dev.kord.common.entity.Snowflake){}[0]
        final inline fun interactionNotFound(kotlin/String): kotlin/Nothing // dev.kord.core.exception/EntityNotFoundException.Companion.interactionNotFound|interactionNotFound(kotlin.String){}[0]
        final inline fun inviteNotFound(kotlin/String): kotlin/Nothing // dev.kord.core.exception/EntityNotFoundException.Companion.inviteNotFound|inviteNotFound(kotlin.String){}[0]
        final inline fun memberNotFound(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): kotlin/Nothing // dev.kord.core.exception/EntityNotFoundException.Companion.memberNotFound|memberNotFound(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
        final inline fun messageNotFound(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): kotlin/Nothing // dev.kord.core.exception/EntityNotFoundException.Companion.messageNotFound|messageNotFound(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
        final inline fun onboardingNotFound(dev.kord.common.entity/Snowflake): kotlin/Nothing // dev.kord.core.exception/EntityNotFoundException.Companion.onboardingNotFound|onboardingNotFound(dev.kord.common.entity.Snowflake){}[0]
        final inline fun roleNotFound(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): kotlin/Nothing // dev.kord.core.exception/EntityNotFoundException.Companion.roleNotFound|roleNotFound(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
        final inline fun selfNotFound(): kotlin/Nothing // dev.kord.core.exception/EntityNotFoundException.Companion.selfNotFound|selfNotFound(){}[0]
        final inline fun stageInstanceNotFound(dev.kord.common.entity/Snowflake): kotlin/Nothing // dev.kord.core.exception/EntityNotFoundException.Companion.stageInstanceNotFound|stageInstanceNotFound(dev.kord.common.entity.Snowflake){}[0]
        final inline fun stickerNotFound(dev.kord.common.entity/Snowflake): kotlin/Nothing // dev.kord.core.exception/EntityNotFoundException.Companion.stickerNotFound|stickerNotFound(dev.kord.common.entity.Snowflake){}[0]
        final inline fun templateNotFound(kotlin/String): kotlin/Nothing // dev.kord.core.exception/EntityNotFoundException.Companion.templateNotFound|templateNotFound(kotlin.String){}[0]
        final inline fun userNotFound(dev.kord.common.entity/Snowflake): kotlin/Nothing // dev.kord.core.exception/EntityNotFoundException.Companion.userNotFound|userNotFound(dev.kord.common.entity.Snowflake){}[0]
        final inline fun webhookMessageNotFound(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake? = ...): kotlin/Nothing // dev.kord.core.exception/EntityNotFoundException.Companion.webhookMessageNotFound|webhookMessageNotFound(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?){}[0]
        final inline fun webhookNotFound(dev.kord.common.entity/Snowflake): kotlin/Nothing // dev.kord.core.exception/EntityNotFoundException.Companion.webhookNotFound|webhookNotFound(dev.kord.common.entity.Snowflake){}[0]
        final inline fun welcomeScreenNotFound(dev.kord.common.entity/Snowflake): kotlin/Nothing // dev.kord.core.exception/EntityNotFoundException.Companion.welcomeScreenNotFound|welcomeScreenNotFound(dev.kord.common.entity.Snowflake){}[0]
        final inline fun widgetNotFound(dev.kord.common.entity/Snowflake): kotlin/Nothing // dev.kord.core.exception/EntityNotFoundException.Companion.widgetNotFound|widgetNotFound(dev.kord.common.entity.Snowflake){}[0]
    }
}

final class dev.kord.core.exception/GatewayNotFoundException : kotlin/Exception { // dev.kord.core.exception/GatewayNotFoundException|null[0]
    constructor <init>(kotlin/String) // dev.kord.core.exception/GatewayNotFoundException.<init>|<init>(kotlin.String){}[0]
    constructor <init>(kotlin/String, kotlin/Throwable) // dev.kord.core.exception/GatewayNotFoundException.<init>|<init>(kotlin.String;kotlin.Throwable){}[0]
    constructor <init>(kotlin/Throwable) // dev.kord.core.exception/GatewayNotFoundException.<init>|<init>(kotlin.Throwable){}[0]

    final object Companion { // dev.kord.core.exception/GatewayNotFoundException.Companion|null[0]
        final inline fun voiceConnectionGatewayNotFound(dev.kord.common.entity/Snowflake): kotlin/Nothing // dev.kord.core.exception/GatewayNotFoundException.Companion.voiceConnectionGatewayNotFound|voiceConnectionGatewayNotFound(dev.kord.common.entity.Snowflake){}[0]
    }
}

final class dev.kord.core.exception/KordInitializationException : kotlin/Exception { // dev.kord.core.exception/KordInitializationException|null[0]
    constructor <init>(kotlin/String) // dev.kord.core.exception/KordInitializationException.<init>|<init>(kotlin.String){}[0]
    constructor <init>(kotlin/String, kotlin/Throwable) // dev.kord.core.exception/KordInitializationException.<init>|<init>(kotlin.String;kotlin.Throwable){}[0]
    constructor <init>(kotlin/Throwable) // dev.kord.core.exception/KordInitializationException.<init>|<init>(kotlin.Throwable){}[0]
}

final class dev.kord.core.gateway.handler/DefaultGatewayEventInterceptor : dev.kord.core.gateway.handler/GatewayEventInterceptor { // dev.kord.core.gateway.handler/DefaultGatewayEventInterceptor|null[0]
    constructor <init>() // dev.kord.core.gateway.handler/DefaultGatewayEventInterceptor.<init>|<init>(){}[0]
    constructor <init>(kotlin.coroutines/SuspendFunction2<dev.kord.core.gateway/ShardEvent, dev.kord.core/Kord, kotlin/Any?>?) // dev.kord.core.gateway.handler/DefaultGatewayEventInterceptor.<init>|<init>(kotlin.coroutines.SuspendFunction2<dev.kord.core.gateway.ShardEvent,dev.kord.core.Kord,kotlin.Any?>?){}[0]

    final suspend fun handle(dev.kord.core.gateway/ShardEvent, dev.kord.core/Kord): dev.kord.core.event/Event? // dev.kord.core.gateway.handler/DefaultGatewayEventInterceptor.handle|handle(dev.kord.core.gateway.ShardEvent;dev.kord.core.Kord){}[0]
}

final class dev.kord.core.gateway/DefaultMasterGateway : dev.kord.core.gateway/MasterGateway { // dev.kord.core.gateway/DefaultMasterGateway|null[0]
    constructor <init>(kotlin.collections/Map<kotlin/Int, dev.kord.gateway/Gateway>) // dev.kord.core.gateway/DefaultMasterGateway.<init>|<init>(kotlin.collections.Map<kotlin.Int,dev.kord.gateway.Gateway>){}[0]

    final val averagePing // dev.kord.core.gateway/DefaultMasterGateway.averagePing|{}averagePing[0]
        final fun <get-averagePing>(): kotlin.time/Duration? // dev.kord.core.gateway/DefaultMasterGateway.averagePing.<get-averagePing>|<get-averagePing>(){}[0]
    final val events // dev.kord.core.gateway/DefaultMasterGateway.events|{}events[0]
        final fun <get-events>(): kotlinx.coroutines.flow/Flow<dev.kord.core.gateway/ShardEvent> // dev.kord.core.gateway/DefaultMasterGateway.events.<get-events>|<get-events>(){}[0]
    final val gateways // dev.kord.core.gateway/DefaultMasterGateway.gateways|{}gateways[0]
        final fun <get-gateways>(): kotlin.collections/Map<kotlin/Int, dev.kord.gateway/Gateway> // dev.kord.core.gateway/DefaultMasterGateway.gateways.<get-gateways>|<get-gateways>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core.gateway/DefaultMasterGateway.toString|toString(){}[0]
}

final class dev.kord.core.gateway/ShardEvent { // dev.kord.core.gateway/ShardEvent|null[0]
    constructor <init>(dev.kord.gateway/Event, dev.kord.gateway/Gateway, kotlin/Int) // dev.kord.core.gateway/ShardEvent.<init>|<init>(dev.kord.gateway.Event;dev.kord.gateway.Gateway;kotlin.Int){}[0]

    final val event // dev.kord.core.gateway/ShardEvent.event|{}event[0]
        final fun <get-event>(): dev.kord.gateway/Event // dev.kord.core.gateway/ShardEvent.event.<get-event>|<get-event>(){}[0]
    final val gateway // dev.kord.core.gateway/ShardEvent.gateway|{}gateway[0]
        final fun <get-gateway>(): dev.kord.gateway/Gateway // dev.kord.core.gateway/ShardEvent.gateway.<get-gateway>|<get-gateway>(){}[0]
    final val shard // dev.kord.core.gateway/ShardEvent.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Int // dev.kord.core.gateway/ShardEvent.shard.<get-shard>|<get-shard>(){}[0]

    final fun component1(): dev.kord.gateway/Event // dev.kord.core.gateway/ShardEvent.component1|component1(){}[0]
    final fun component2(): dev.kord.gateway/Gateway // dev.kord.core.gateway/ShardEvent.component2|component2(){}[0]
    final fun component3(): kotlin/Int // dev.kord.core.gateway/ShardEvent.component3|component3(){}[0]
    final fun copy(dev.kord.gateway/Event = ..., dev.kord.gateway/Gateway = ..., kotlin/Int = ...): dev.kord.core.gateway/ShardEvent // dev.kord.core.gateway/ShardEvent.copy|copy(dev.kord.gateway.Event;dev.kord.gateway.Gateway;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.gateway/ShardEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.gateway/ShardEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core.gateway/ShardEvent.toString|toString(){}[0]
}

final class dev.kord.core.live.channel/LiveCategory : dev.kord.core.entity/KordEntity, dev.kord.core.live.channel/LiveChannel { // dev.kord.core.live.channel/LiveCategory|null[0]
    constructor <init>(dev.kord.core.entity.channel/Category, kotlinx.coroutines/CoroutineScope = ...) // dev.kord.core.live.channel/LiveCategory.<init>|<init>(dev.kord.core.entity.channel.Category;kotlinx.coroutines.CoroutineScope){}[0]

    final val id // dev.kord.core.live.channel/LiveCategory.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.live.channel/LiveCategory.id.<get-id>|<get-id>(){}[0]

    final var channel // dev.kord.core.live.channel/LiveCategory.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/Category // dev.kord.core.live.channel/LiveCategory.channel.<get-channel>|<get-channel>(){}[0]
}

final class dev.kord.core.live.channel/LiveDmChannel : dev.kord.core.entity/KordEntity, dev.kord.core.live.channel/LiveChannel { // dev.kord.core.live.channel/LiveDmChannel|null[0]
    constructor <init>(dev.kord.core.entity.channel/DmChannel, kotlinx.coroutines/CoroutineScope = ...) // dev.kord.core.live.channel/LiveDmChannel.<init>|<init>(dev.kord.core.entity.channel.DmChannel;kotlinx.coroutines.CoroutineScope){}[0]

    final val id // dev.kord.core.live.channel/LiveDmChannel.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.live.channel/LiveDmChannel.id.<get-id>|<get-id>(){}[0]

    final var channel // dev.kord.core.live.channel/LiveDmChannel.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/DmChannel // dev.kord.core.live.channel/LiveDmChannel.channel.<get-channel>|<get-channel>(){}[0]
}

final class dev.kord.core.live.channel/LiveGuildChannel : dev.kord.core.entity/KordEntity, dev.kord.core.live.channel/LiveChannel { // dev.kord.core.live.channel/LiveGuildChannel|null[0]
    constructor <init>(dev.kord.core.entity.channel/TopGuildChannel, kotlinx.coroutines/CoroutineScope = ...) // dev.kord.core.live.channel/LiveGuildChannel.<init>|<init>(dev.kord.core.entity.channel.TopGuildChannel;kotlinx.coroutines.CoroutineScope){}[0]

    final val id // dev.kord.core.live.channel/LiveGuildChannel.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.live.channel/LiveGuildChannel.id.<get-id>|<get-id>(){}[0]

    final var channel // dev.kord.core.live.channel/LiveGuildChannel.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/TopGuildChannel // dev.kord.core.live.channel/LiveGuildChannel.channel.<get-channel>|<get-channel>(){}[0]
}

final class dev.kord.core.live.channel/LiveGuildMessageChannel : dev.kord.core.entity/KordEntity, dev.kord.core.live.channel/LiveChannel { // dev.kord.core.live.channel/LiveGuildMessageChannel|null[0]
    constructor <init>(dev.kord.core.entity.channel/TopGuildMessageChannel, kotlinx.coroutines/CoroutineScope = ...) // dev.kord.core.live.channel/LiveGuildMessageChannel.<init>|<init>(dev.kord.core.entity.channel.TopGuildMessageChannel;kotlinx.coroutines.CoroutineScope){}[0]

    final val id // dev.kord.core.live.channel/LiveGuildMessageChannel.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.live.channel/LiveGuildMessageChannel.id.<get-id>|<get-id>(){}[0]

    final var channel // dev.kord.core.live.channel/LiveGuildMessageChannel.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/TopGuildMessageChannel // dev.kord.core.live.channel/LiveGuildMessageChannel.channel.<get-channel>|<get-channel>(){}[0]
}

final class dev.kord.core.live.channel/LiveVoiceChannel : dev.kord.core.entity/KordEntity, dev.kord.core.live.channel/LiveChannel { // dev.kord.core.live.channel/LiveVoiceChannel|null[0]
    constructor <init>(dev.kord.core.entity.channel/VoiceChannel, kotlinx.coroutines/CoroutineScope = ...) // dev.kord.core.live.channel/LiveVoiceChannel.<init>|<init>(dev.kord.core.entity.channel.VoiceChannel;kotlinx.coroutines.CoroutineScope){}[0]

    final val id // dev.kord.core.live.channel/LiveVoiceChannel.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.live.channel/LiveVoiceChannel.id.<get-id>|<get-id>(){}[0]

    final var channel // dev.kord.core.live.channel/LiveVoiceChannel.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.entity.channel/VoiceChannel // dev.kord.core.live.channel/LiveVoiceChannel.channel.<get-channel>|<get-channel>(){}[0]
}

final class dev.kord.core.live.exception/LiveCancellationException : kotlin.coroutines.cancellation/CancellationException { // dev.kord.core.live.exception/LiveCancellationException|null[0]
    constructor <init>(dev.kord.core.event/Event, kotlin/String? = ...) // dev.kord.core.live.exception/LiveCancellationException.<init>|<init>(dev.kord.core.event.Event;kotlin.String?){}[0]

    final val event // dev.kord.core.live.exception/LiveCancellationException.event|{}event[0]
        final fun <get-event>(): dev.kord.core.event/Event // dev.kord.core.live.exception/LiveCancellationException.event.<get-event>|<get-event>(){}[0]
}

final class dev.kord.core.live/LiveGuild : dev.kord.core.entity/KordEntity, dev.kord.core.live/AbstractLiveKordEntity { // dev.kord.core.live/LiveGuild|null[0]
    constructor <init>(dev.kord.core.entity/Guild, kotlinx.coroutines/CoroutineScope = ...) // dev.kord.core.live/LiveGuild.<init>|<init>(dev.kord.core.entity.Guild;kotlinx.coroutines.CoroutineScope){}[0]

    final val id // dev.kord.core.live/LiveGuild.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.live/LiveGuild.id.<get-id>|<get-id>(){}[0]

    final var guild // dev.kord.core.live/LiveGuild.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.entity/Guild // dev.kord.core.live/LiveGuild.guild.<get-guild>|<get-guild>(){}[0]
}

final class dev.kord.core.live/LiveMember : dev.kord.core.entity/KordEntity, dev.kord.core.live/AbstractLiveKordEntity { // dev.kord.core.live/LiveMember|null[0]
    constructor <init>(dev.kord.core.entity/Member, kotlinx.coroutines/CoroutineScope = ...) // dev.kord.core.live/LiveMember.<init>|<init>(dev.kord.core.entity.Member;kotlinx.coroutines.CoroutineScope){}[0]

    final val id // dev.kord.core.live/LiveMember.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.live/LiveMember.id.<get-id>|<get-id>(){}[0]

    final var member // dev.kord.core.live/LiveMember.member|{}member[0]
        final fun <get-member>(): dev.kord.core.entity/Member // dev.kord.core.live/LiveMember.member.<get-member>|<get-member>(){}[0]
}

final class dev.kord.core.live/LiveMessage : dev.kord.core.entity/KordEntity, dev.kord.core.live/AbstractLiveKordEntity { // dev.kord.core.live/LiveMessage|null[0]
    constructor <init>(dev.kord.core.entity/Message, dev.kord.common.entity/Snowflake?, kotlinx.coroutines/CoroutineScope = ...) // dev.kord.core.live/LiveMessage.<init>|<init>(dev.kord.core.entity.Message;dev.kord.common.entity.Snowflake?;kotlinx.coroutines.CoroutineScope){}[0]

    final val guildId // dev.kord.core.live/LiveMessage.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.live/LiveMessage.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.core.live/LiveMessage.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.live/LiveMessage.id.<get-id>|<get-id>(){}[0]

    final var message // dev.kord.core.live/LiveMessage.message|{}message[0]
        final fun <get-message>(): dev.kord.core.entity/Message // dev.kord.core.live/LiveMessage.message.<get-message>|<get-message>(){}[0]
}

final class dev.kord.core.live/LiveRole : dev.kord.core.entity/KordEntity, dev.kord.core.live/AbstractLiveKordEntity { // dev.kord.core.live/LiveRole|null[0]
    constructor <init>(dev.kord.core.entity/Role, kotlinx.coroutines/CoroutineScope = ...) // dev.kord.core.live/LiveRole.<init>|<init>(dev.kord.core.entity.Role;kotlinx.coroutines.CoroutineScope){}[0]

    final val id // dev.kord.core.live/LiveRole.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.live/LiveRole.id.<get-id>|<get-id>(){}[0]

    final var role // dev.kord.core.live/LiveRole.role|{}role[0]
        final fun <get-role>(): dev.kord.core.entity/Role // dev.kord.core.live/LiveRole.role.<get-role>|<get-role>(){}[0]
}

final class dev.kord.core.live/LiveUser : dev.kord.core.entity/KordEntity, dev.kord.core.live/AbstractLiveKordEntity { // dev.kord.core.live/LiveUser|null[0]
    constructor <init>(dev.kord.core.entity/User, kotlinx.coroutines/CoroutineScope = ...) // dev.kord.core.live/LiveUser.<init>|<init>(dev.kord.core.entity.User;kotlinx.coroutines.CoroutineScope){}[0]

    final val id // dev.kord.core.live/LiveUser.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.live/LiveUser.id.<get-id>|<get-id>(){}[0]

    final var user // dev.kord.core.live/LiveUser.user|{}user[0]
        final fun <get-user>(): dev.kord.core.entity/User // dev.kord.core.live/LiveUser.user.<get-user>|<get-user>(){}[0]
}

final class dev.kord.core.supplier/CacheEntitySupplier : dev.kord.core.supplier/EntitySupplier { // dev.kord.core.supplier/CacheEntitySupplier|null[0]
    constructor <init>(dev.kord.core/Kord) // dev.kord.core.supplier/CacheEntitySupplier.<init>|<init>(dev.kord.core.Kord){}[0]

    final val channels // dev.kord.core.supplier/CacheEntitySupplier.channels|{}channels[0]
        final fun <get-channels>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel/Channel> // dev.kord.core.supplier/CacheEntitySupplier.channels.<get-channels>|<get-channels>(){}[0]
    final val guilds // dev.kord.core.supplier/CacheEntitySupplier.guilds|{}guilds[0]
        final fun <get-guilds>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Guild> // dev.kord.core.supplier/CacheEntitySupplier.guilds.<get-guilds>|<get-guilds>(){}[0]
    final val members // dev.kord.core.supplier/CacheEntitySupplier.members|{}members[0]
        final fun <get-members>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Member> // dev.kord.core.supplier/CacheEntitySupplier.members.<get-members>|<get-members>(){}[0]
    final val regions // dev.kord.core.supplier/CacheEntitySupplier.regions|{}regions[0]
        final fun <get-regions>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Region> // dev.kord.core.supplier/CacheEntitySupplier.regions.<get-regions>|<get-regions>(){}[0]
    final val roles // dev.kord.core.supplier/CacheEntitySupplier.roles|{}roles[0]
        final fun <get-roles>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Role> // dev.kord.core.supplier/CacheEntitySupplier.roles.<get-roles>|<get-roles>(){}[0]
    final val users // dev.kord.core.supplier/CacheEntitySupplier.users|{}users[0]
        final fun <get-users>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/User> // dev.kord.core.supplier/CacheEntitySupplier.users.<get-users>|<get-users>(){}[0]

    final fun getActiveThreads(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadChannel> // dev.kord.core.supplier/CacheEntitySupplier.getActiveThreads|getActiveThreads(dev.kord.common.entity.Snowflake){}[0]
    final fun getAutoModerationRules(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.automoderation/AutoModerationRule> // dev.kord.core.supplier/CacheEntitySupplier.getAutoModerationRules|getAutoModerationRules(dev.kord.common.entity.Snowflake){}[0]
    final fun getChannelPins(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Message> // dev.kord.core.supplier/CacheEntitySupplier.getChannelPins|getChannelPins(dev.kord.common.entity.Snowflake){}[0]
    final fun getChannelWebhooks(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Webhook> // dev.kord.core.supplier/CacheEntitySupplier.getChannelWebhooks|getChannelWebhooks(dev.kord.common.entity.Snowflake){}[0]
    final fun getCurrentUserGuilds(kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Guild> // dev.kord.core.supplier/CacheEntitySupplier.getCurrentUserGuilds|getCurrentUserGuilds(kotlin.Int?){}[0]
    final fun getEmojis(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/GuildEmoji> // dev.kord.core.supplier/CacheEntitySupplier.getEmojis|getEmojis(dev.kord.common.entity.Snowflake){}[0]
    final fun getGlobalApplicationCommands(dev.kord.common.entity/Snowflake, kotlin/Boolean?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.application/GlobalApplicationCommand> // dev.kord.core.supplier/CacheEntitySupplier.getGlobalApplicationCommands|getGlobalApplicationCommands(dev.kord.common.entity.Snowflake;kotlin.Boolean?){}[0]
    final fun getGuildApplicationCommandPermissions(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.application/ApplicationCommandPermissions> // dev.kord.core.supplier/CacheEntitySupplier.getGuildApplicationCommandPermissions|getGuildApplicationCommandPermissions(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun getGuildApplicationCommands(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Boolean?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.application/GuildApplicationCommand> // dev.kord.core.supplier/CacheEntitySupplier.getGuildApplicationCommands|getGuildApplicationCommands(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Boolean?){}[0]
    final fun getGuildBans(dev.kord.common.entity/Snowflake, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Ban> // dev.kord.core.supplier/CacheEntitySupplier.getGuildBans|getGuildBans(dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    final fun getGuildChannels(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel/TopGuildChannel> // dev.kord.core.supplier/CacheEntitySupplier.getGuildChannels|getGuildChannels(dev.kord.common.entity.Snowflake){}[0]
    final fun getGuildMembers(dev.kord.common.entity/Snowflake, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Member> // dev.kord.core.supplier/CacheEntitySupplier.getGuildMembers|getGuildMembers(dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    final fun getGuildRoles(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Role> // dev.kord.core.supplier/CacheEntitySupplier.getGuildRoles|getGuildRoles(dev.kord.common.entity.Snowflake){}[0]
    final fun getGuildScheduledEventMembersAfter(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Member> // dev.kord.core.supplier/CacheEntitySupplier.getGuildScheduledEventMembersAfter|getGuildScheduledEventMembersAfter(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    final fun getGuildScheduledEventMembersBefore(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Member> // dev.kord.core.supplier/CacheEntitySupplier.getGuildScheduledEventMembersBefore|getGuildScheduledEventMembersBefore(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    final fun getGuildScheduledEventUsersAfter(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/User> // dev.kord.core.supplier/CacheEntitySupplier.getGuildScheduledEventUsersAfter|getGuildScheduledEventUsersAfter(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    final fun getGuildScheduledEventUsersBefore(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/User> // dev.kord.core.supplier/CacheEntitySupplier.getGuildScheduledEventUsersBefore|getGuildScheduledEventUsersBefore(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    final fun getGuildScheduledEvents(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/GuildScheduledEvent> // dev.kord.core.supplier/CacheEntitySupplier.getGuildScheduledEvents|getGuildScheduledEvents(dev.kord.common.entity.Snowflake){}[0]
    final fun getGuildStickers(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/GuildSticker> // dev.kord.core.supplier/CacheEntitySupplier.getGuildStickers|getGuildStickers(dev.kord.common.entity.Snowflake){}[0]
    final fun getGuildVoiceRegions(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Region> // dev.kord.core.supplier/CacheEntitySupplier.getGuildVoiceRegions|getGuildVoiceRegions(dev.kord.common.entity.Snowflake){}[0]
    final fun getGuildWebhooks(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Webhook> // dev.kord.core.supplier/CacheEntitySupplier.getGuildWebhooks|getGuildWebhooks(dev.kord.common.entity.Snowflake){}[0]
    final fun getJoinedPrivateArchivedThreads(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake?, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadChannel> // dev.kord.core.supplier/CacheEntitySupplier.getJoinedPrivateArchivedThreads|getJoinedPrivateArchivedThreads(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?;kotlin.Int?){}[0]
    final fun getMessagesAfter(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Message> // dev.kord.core.supplier/CacheEntitySupplier.getMessagesAfter|getMessagesAfter(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    final fun getMessagesAround(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Message> // dev.kord.core.supplier/CacheEntitySupplier.getMessagesAround|getMessagesAround(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int){}[0]
    final fun getMessagesBefore(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Message> // dev.kord.core.supplier/CacheEntitySupplier.getMessagesBefore|getMessagesBefore(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    final fun getNitroStickerPacks(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/StickerPack> // dev.kord.core.supplier/CacheEntitySupplier.getNitroStickerPacks|getNitroStickerPacks(){}[0]
    final fun getPrivateArchivedThreads(dev.kord.common.entity/Snowflake, kotlinx.datetime/Instant?, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadChannel> // dev.kord.core.supplier/CacheEntitySupplier.getPrivateArchivedThreads|getPrivateArchivedThreads(dev.kord.common.entity.Snowflake;kotlinx.datetime.Instant?;kotlin.Int?){}[0]
    final fun getPublicArchivedThreads(dev.kord.common.entity/Snowflake, kotlinx.datetime/Instant?, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadChannel> // dev.kord.core.supplier/CacheEntitySupplier.getPublicArchivedThreads|getPublicArchivedThreads(dev.kord.common.entity.Snowflake;kotlinx.datetime.Instant?;kotlin.Int?){}[0]
    final fun getTemplates(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Template> // dev.kord.core.supplier/CacheEntitySupplier.getTemplates|getTemplates(dev.kord.common.entity.Snowflake){}[0]
    final fun getThreadMembers(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadMember> // dev.kord.core.supplier/CacheEntitySupplier.getThreadMembers|getThreadMembers(dev.kord.common.entity.Snowflake){}[0]
    final fun toString(): kotlin/String // dev.kord.core.supplier/CacheEntitySupplier.toString|toString(){}[0]
    final suspend fun getApplicationCommandPermissionsOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity.application/ApplicationCommandPermissions? // dev.kord.core.supplier/CacheEntitySupplier.getApplicationCommandPermissionsOrNull|getApplicationCommandPermissionsOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getAutoModerationRuleOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity.automoderation/AutoModerationRule? // dev.kord.core.supplier/CacheEntitySupplier.getAutoModerationRuleOrNull|getAutoModerationRuleOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getChannelOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity.channel/Channel? // dev.kord.core.supplier/CacheEntitySupplier.getChannelOrNull|getChannelOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getEmojiOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildEmoji? // dev.kord.core.supplier/CacheEntitySupplier.getEmojiOrNull|getEmojiOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getFollowupMessageOrNull(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake): dev.kord.core.entity.interaction.followup/FollowupMessage? // dev.kord.core.supplier/CacheEntitySupplier.getFollowupMessageOrNull|getFollowupMessageOrNull(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGlobalApplicationCommandOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity.application/GlobalApplicationCommand? // dev.kord.core.supplier/CacheEntitySupplier.getGlobalApplicationCommandOrNull|getGlobalApplicationCommandOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildApplicationCommandOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity.application/GuildApplicationCommand? // dev.kord.core.supplier/CacheEntitySupplier.getGuildApplicationCommandOrNull|getGuildApplicationCommandOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildBanOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/Ban? // dev.kord.core.supplier/CacheEntitySupplier.getGuildBanOrNull|getGuildBanOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Guild? // dev.kord.core.supplier/CacheEntitySupplier.getGuildOrNull|getGuildOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildPreviewOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildPreview? // dev.kord.core.supplier/CacheEntitySupplier.getGuildPreviewOrNull|getGuildPreviewOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildScheduledEventOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildScheduledEvent? // dev.kord.core.supplier/CacheEntitySupplier.getGuildScheduledEventOrNull|getGuildScheduledEventOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildStickerOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildSticker? // dev.kord.core.supplier/CacheEntitySupplier.getGuildStickerOrNull|getGuildStickerOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildWidgetOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildWidget? // dev.kord.core.supplier/CacheEntitySupplier.getGuildWidgetOrNull|getGuildWidgetOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getMemberOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/Member? // dev.kord.core.supplier/CacheEntitySupplier.getMemberOrNull|getMemberOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getMessageOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/Message? // dev.kord.core.supplier/CacheEntitySupplier.getMessageOrNull|getMessageOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getRole(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Role? // dev.kord.core.supplier/CacheEntitySupplier.getRole|getRole(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getRoleOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/Role? // dev.kord.core.supplier/CacheEntitySupplier.getRoleOrNull|getRoleOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getSelfOrNull(): dev.kord.core.entity/User? // dev.kord.core.supplier/CacheEntitySupplier.getSelfOrNull|getSelfOrNull(){}[0]
    final suspend fun getStageInstanceOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/StageInstance? // dev.kord.core.supplier/CacheEntitySupplier.getStageInstanceOrNull|getStageInstanceOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getStickerOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Sticker? // dev.kord.core.supplier/CacheEntitySupplier.getStickerOrNull|getStickerOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getTemplateOrNull(kotlin/String): dev.kord.core.entity/Template? // dev.kord.core.supplier/CacheEntitySupplier.getTemplateOrNull|getTemplateOrNull(kotlin.String){}[0]
    final suspend fun getUserOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/User? // dev.kord.core.supplier/CacheEntitySupplier.getUserOrNull|getUserOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getWebhookMessageOrNull(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake?): dev.kord.core.entity/Message? // dev.kord.core.supplier/CacheEntitySupplier.getWebhookMessageOrNull|getWebhookMessageOrNull(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?){}[0]
    final suspend fun getWebhookOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Webhook? // dev.kord.core.supplier/CacheEntitySupplier.getWebhookOrNull|getWebhookOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getWebhookWithTokenOrNull(dev.kord.common.entity/Snowflake, kotlin/String): dev.kord.core.entity/Webhook? // dev.kord.core.supplier/CacheEntitySupplier.getWebhookWithTokenOrNull|getWebhookWithTokenOrNull(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
}

final class dev.kord.core.supplier/RestEntitySupplier : dev.kord.core.supplier/EntitySupplier { // dev.kord.core.supplier/RestEntitySupplier|null[0]
    constructor <init>(dev.kord.core/Kord) // dev.kord.core.supplier/RestEntitySupplier.<init>|<init>(dev.kord.core.Kord){}[0]

    final val guilds // dev.kord.core.supplier/RestEntitySupplier.guilds|{}guilds[0]
        final fun <get-guilds>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Guild> // dev.kord.core.supplier/RestEntitySupplier.guilds.<get-guilds>|<get-guilds>(){}[0]
    final val kord // dev.kord.core.supplier/RestEntitySupplier.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.supplier/RestEntitySupplier.kord.<get-kord>|<get-kord>(){}[0]
    final val regions // dev.kord.core.supplier/RestEntitySupplier.regions|{}regions[0]
        final fun <get-regions>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Region> // dev.kord.core.supplier/RestEntitySupplier.regions.<get-regions>|<get-regions>(){}[0]

    final fun getActiveThreads(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadChannel> // dev.kord.core.supplier/RestEntitySupplier.getActiveThreads|getActiveThreads(dev.kord.common.entity.Snowflake){}[0]
    final fun getAuditLogEntries(dev.kord.common.entity/Snowflake, dev.kord.rest.json.request/AuditLogGetRequest = ...): kotlinx.coroutines.flow/Flow<dev.kord.common.entity/DiscordAuditLogEntry> // dev.kord.core.supplier/RestEntitySupplier.getAuditLogEntries|getAuditLogEntries(dev.kord.common.entity.Snowflake;dev.kord.rest.json.request.AuditLogGetRequest){}[0]
    final fun getAutoModerationRules(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.automoderation/AutoModerationRule> // dev.kord.core.supplier/RestEntitySupplier.getAutoModerationRules|getAutoModerationRules(dev.kord.common.entity.Snowflake){}[0]
    final fun getChannelPins(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Message> // dev.kord.core.supplier/RestEntitySupplier.getChannelPins|getChannelPins(dev.kord.common.entity.Snowflake){}[0]
    final fun getChannelWebhooks(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Webhook> // dev.kord.core.supplier/RestEntitySupplier.getChannelWebhooks|getChannelWebhooks(dev.kord.common.entity.Snowflake){}[0]
    final fun getCurrentUserGuilds(kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Guild> // dev.kord.core.supplier/RestEntitySupplier.getCurrentUserGuilds|getCurrentUserGuilds(kotlin.Int?){}[0]
    final fun getEmojis(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/GuildEmoji> // dev.kord.core.supplier/RestEntitySupplier.getEmojis|getEmojis(dev.kord.common.entity.Snowflake){}[0]
    final fun getGlobalApplicationCommands(dev.kord.common.entity/Snowflake, kotlin/Boolean?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.application/GlobalApplicationCommand> // dev.kord.core.supplier/RestEntitySupplier.getGlobalApplicationCommands|getGlobalApplicationCommands(dev.kord.common.entity.Snowflake;kotlin.Boolean?){}[0]
    final fun getGuildApplicationCommandPermissions(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.application/ApplicationCommandPermissions> // dev.kord.core.supplier/RestEntitySupplier.getGuildApplicationCommandPermissions|getGuildApplicationCommandPermissions(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun getGuildApplicationCommands(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Boolean?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.application/GuildApplicationCommand> // dev.kord.core.supplier/RestEntitySupplier.getGuildApplicationCommands|getGuildApplicationCommands(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Boolean?){}[0]
    final fun getGuildBans(dev.kord.common.entity/Snowflake, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Ban> // dev.kord.core.supplier/RestEntitySupplier.getGuildBans|getGuildBans(dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    final fun getGuildChannels(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel/TopGuildChannel> // dev.kord.core.supplier/RestEntitySupplier.getGuildChannels|getGuildChannels(dev.kord.common.entity.Snowflake){}[0]
    final fun getGuildMembers(dev.kord.common.entity/Snowflake, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Member> // dev.kord.core.supplier/RestEntitySupplier.getGuildMembers|getGuildMembers(dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    final fun getGuildRoles(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Role> // dev.kord.core.supplier/RestEntitySupplier.getGuildRoles|getGuildRoles(dev.kord.common.entity.Snowflake){}[0]
    final fun getGuildScheduledEventMembersAfter(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Member> // dev.kord.core.supplier/RestEntitySupplier.getGuildScheduledEventMembersAfter|getGuildScheduledEventMembersAfter(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    final fun getGuildScheduledEventMembersBefore(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Member> // dev.kord.core.supplier/RestEntitySupplier.getGuildScheduledEventMembersBefore|getGuildScheduledEventMembersBefore(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    final fun getGuildScheduledEventUsersAfter(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/User> // dev.kord.core.supplier/RestEntitySupplier.getGuildScheduledEventUsersAfter|getGuildScheduledEventUsersAfter(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    final fun getGuildScheduledEventUsersBefore(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/User> // dev.kord.core.supplier/RestEntitySupplier.getGuildScheduledEventUsersBefore|getGuildScheduledEventUsersBefore(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    final fun getGuildScheduledEvents(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/GuildScheduledEvent> // dev.kord.core.supplier/RestEntitySupplier.getGuildScheduledEvents|getGuildScheduledEvents(dev.kord.common.entity.Snowflake){}[0]
    final fun getGuildStickers(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/GuildSticker> // dev.kord.core.supplier/RestEntitySupplier.getGuildStickers|getGuildStickers(dev.kord.common.entity.Snowflake){}[0]
    final fun getGuildVoiceRegions(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Region> // dev.kord.core.supplier/RestEntitySupplier.getGuildVoiceRegions|getGuildVoiceRegions(dev.kord.common.entity.Snowflake){}[0]
    final fun getGuildWebhooks(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Webhook> // dev.kord.core.supplier/RestEntitySupplier.getGuildWebhooks|getGuildWebhooks(dev.kord.common.entity.Snowflake){}[0]
    final fun getJoinedPrivateArchivedThreads(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake?, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadChannel> // dev.kord.core.supplier/RestEntitySupplier.getJoinedPrivateArchivedThreads|getJoinedPrivateArchivedThreads(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?;kotlin.Int?){}[0]
    final fun getMessagesAfter(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Message> // dev.kord.core.supplier/RestEntitySupplier.getMessagesAfter|getMessagesAfter(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    final fun getMessagesAround(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Message> // dev.kord.core.supplier/RestEntitySupplier.getMessagesAround|getMessagesAround(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int){}[0]
    final fun getMessagesBefore(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Message> // dev.kord.core.supplier/RestEntitySupplier.getMessagesBefore|getMessagesBefore(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    final fun getNitroStickerPacks(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/StickerPack> // dev.kord.core.supplier/RestEntitySupplier.getNitroStickerPacks|getNitroStickerPacks(){}[0]
    final fun getPrivateArchivedThreads(dev.kord.common.entity/Snowflake, kotlinx.datetime/Instant?, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadChannel> // dev.kord.core.supplier/RestEntitySupplier.getPrivateArchivedThreads|getPrivateArchivedThreads(dev.kord.common.entity.Snowflake;kotlinx.datetime.Instant?;kotlin.Int?){}[0]
    final fun getPublicArchivedThreads(dev.kord.common.entity/Snowflake, kotlinx.datetime/Instant?, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadChannel> // dev.kord.core.supplier/RestEntitySupplier.getPublicArchivedThreads|getPublicArchivedThreads(dev.kord.common.entity.Snowflake;kotlinx.datetime.Instant?;kotlin.Int?){}[0]
    final fun getReactors(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.core.entity/ReactionEmoji): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/User> // dev.kord.core.supplier/RestEntitySupplier.getReactors|getReactors(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.core.entity.ReactionEmoji){}[0]
    final fun getTemplates(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Template> // dev.kord.core.supplier/RestEntitySupplier.getTemplates|getTemplates(dev.kord.common.entity.Snowflake){}[0]
    final fun getThreadMembers(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadMember> // dev.kord.core.supplier/RestEntitySupplier.getThreadMembers|getThreadMembers(dev.kord.common.entity.Snowflake){}[0]
    final fun toString(): kotlin/String // dev.kord.core.supplier/RestEntitySupplier.toString|toString(){}[0]
    final inline fun getAuditLogEntries(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.auditlog/AuditLogGetRequestBuilder, kotlin/Unit>): kotlinx.coroutines.flow/Flow<dev.kord.common.entity/DiscordAuditLogEntry> // dev.kord.core.supplier/RestEntitySupplier.getAuditLogEntries|getAuditLogEntries(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.auditlog.AuditLogGetRequestBuilder,kotlin.Unit>){}[0]
    final suspend fun getApplicationCommandPermissionsOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity.application/ApplicationCommandPermissions // dev.kord.core.supplier/RestEntitySupplier.getApplicationCommandPermissionsOrNull|getApplicationCommandPermissionsOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getApplicationInfo(): dev.kord.core.entity/Application // dev.kord.core.supplier/RestEntitySupplier.getApplicationInfo|getApplicationInfo(){}[0]
    final suspend fun getAutoModerationRuleOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity.automoderation/AutoModerationRule? // dev.kord.core.supplier/RestEntitySupplier.getAutoModerationRuleOrNull|getAutoModerationRuleOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getChannelOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity.channel/Channel? // dev.kord.core.supplier/RestEntitySupplier.getChannelOrNull|getChannelOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getEmojiOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildEmoji? // dev.kord.core.supplier/RestEntitySupplier.getEmojiOrNull|getEmojiOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getFollowupMessageOrNull(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake): dev.kord.core.entity.interaction.followup/FollowupMessage? // dev.kord.core.supplier/RestEntitySupplier.getFollowupMessageOrNull|getFollowupMessageOrNull(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGlobalApplicationCommandOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity.application/GlobalApplicationCommand? // dev.kord.core.supplier/RestEntitySupplier.getGlobalApplicationCommandOrNull|getGlobalApplicationCommandOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildApplicationCommandOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity.application/GuildApplicationCommand? // dev.kord.core.supplier/RestEntitySupplier.getGuildApplicationCommandOrNull|getGuildApplicationCommandOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildBanOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/Ban? // dev.kord.core.supplier/RestEntitySupplier.getGuildBanOrNull|getGuildBanOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildOnboarding(dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildOnboarding // dev.kord.core.supplier/RestEntitySupplier.getGuildOnboarding|getGuildOnboarding(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildOnboardingOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildOnboarding? // dev.kord.core.supplier/RestEntitySupplier.getGuildOnboardingOrNull|getGuildOnboardingOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Guild? // dev.kord.core.supplier/RestEntitySupplier.getGuildOrNull|getGuildOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildPreviewOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildPreview? // dev.kord.core.supplier/RestEntitySupplier.getGuildPreviewOrNull|getGuildPreviewOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildScheduledEventOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildScheduledEvent? // dev.kord.core.supplier/RestEntitySupplier.getGuildScheduledEventOrNull|getGuildScheduledEventOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildStickerOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildSticker? // dev.kord.core.supplier/RestEntitySupplier.getGuildStickerOrNull|getGuildStickerOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildWelcomeScreen(dev.kord.common.entity/Snowflake): dev.kord.core.entity/WelcomeScreen // dev.kord.core.supplier/RestEntitySupplier.getGuildWelcomeScreen|getGuildWelcomeScreen(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildWelcomeScreenOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/WelcomeScreen? // dev.kord.core.supplier/RestEntitySupplier.getGuildWelcomeScreenOrNull|getGuildWelcomeScreenOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildWidgetOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildWidget? // dev.kord.core.supplier/RestEntitySupplier.getGuildWidgetOrNull|getGuildWidgetOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getInvite(kotlin/String, kotlin/Boolean = ..., kotlin/Boolean = ..., dev.kord.common.entity/Snowflake? = ...): dev.kord.core.entity/Invite // dev.kord.core.supplier/RestEntitySupplier.getInvite|getInvite(kotlin.String;kotlin.Boolean;kotlin.Boolean;dev.kord.common.entity.Snowflake?){}[0]
    final suspend fun getInviteOrNull(kotlin/String, kotlin/Boolean = ..., kotlin/Boolean = ..., dev.kord.common.entity/Snowflake? = ...): dev.kord.core.entity/Invite? // dev.kord.core.supplier/RestEntitySupplier.getInviteOrNull|getInviteOrNull(kotlin.String;kotlin.Boolean;kotlin.Boolean;dev.kord.common.entity.Snowflake?){}[0]
    final suspend fun getMemberOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/Member? // dev.kord.core.supplier/RestEntitySupplier.getMemberOrNull|getMemberOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getMessageOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/Message? // dev.kord.core.supplier/RestEntitySupplier.getMessageOrNull|getMessageOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getOriginalInteraction(dev.kord.common.entity/Snowflake, kotlin/String): dev.kord.core.entity/Message // dev.kord.core.supplier/RestEntitySupplier.getOriginalInteraction|getOriginalInteraction(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    final suspend fun getOriginalInteractionOrNull(dev.kord.common.entity/Snowflake, kotlin/String): dev.kord.core.entity/Message? // dev.kord.core.supplier/RestEntitySupplier.getOriginalInteractionOrNull|getOriginalInteractionOrNull(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
    final suspend fun getRoleOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/Role? // dev.kord.core.supplier/RestEntitySupplier.getRoleOrNull|getRoleOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getSelfOrNull(): dev.kord.core.entity/User? // dev.kord.core.supplier/RestEntitySupplier.getSelfOrNull|getSelfOrNull(){}[0]
    final suspend fun getStageInstanceOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/StageInstance? // dev.kord.core.supplier/RestEntitySupplier.getStageInstanceOrNull|getStageInstanceOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getStickerOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Sticker? // dev.kord.core.supplier/RestEntitySupplier.getStickerOrNull|getStickerOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getTemplateOrNull(kotlin/String): dev.kord.core.entity/Template? // dev.kord.core.supplier/RestEntitySupplier.getTemplateOrNull|getTemplateOrNull(kotlin.String){}[0]
    final suspend fun getUserOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/User? // dev.kord.core.supplier/RestEntitySupplier.getUserOrNull|getUserOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getWebhookMessageOrNull(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake?): dev.kord.core.entity/Message? // dev.kord.core.supplier/RestEntitySupplier.getWebhookMessageOrNull|getWebhookMessageOrNull(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?){}[0]
    final suspend fun getWebhookOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Webhook? // dev.kord.core.supplier/RestEntitySupplier.getWebhookOrNull|getWebhookOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getWebhookWithTokenOrNull(dev.kord.common.entity/Snowflake, kotlin/String): dev.kord.core.entity/Webhook? // dev.kord.core.supplier/RestEntitySupplier.getWebhookWithTokenOrNull|getWebhookWithTokenOrNull(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
}

final class dev.kord.core.supplier/StoreEntitySupplier : dev.kord.core.supplier/EntitySupplier { // dev.kord.core.supplier/StoreEntitySupplier|null[0]
    constructor <init>(dev.kord.core.supplier/EntitySupplier, dev.kord.cache.api/DataCache) // dev.kord.core.supplier/StoreEntitySupplier.<init>|<init>(dev.kord.core.supplier.EntitySupplier;dev.kord.cache.api.DataCache){}[0]

    final val guilds // dev.kord.core.supplier/StoreEntitySupplier.guilds|{}guilds[0]
        final fun <get-guilds>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Guild> // dev.kord.core.supplier/StoreEntitySupplier.guilds.<get-guilds>|<get-guilds>(){}[0]
    final val regions // dev.kord.core.supplier/StoreEntitySupplier.regions|{}regions[0]
        final fun <get-regions>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Region> // dev.kord.core.supplier/StoreEntitySupplier.regions.<get-regions>|<get-regions>(){}[0]

    final fun getActiveThreads(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadChannel> // dev.kord.core.supplier/StoreEntitySupplier.getActiveThreads|getActiveThreads(dev.kord.common.entity.Snowflake){}[0]
    final fun getAutoModerationRules(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.automoderation/AutoModerationRule> // dev.kord.core.supplier/StoreEntitySupplier.getAutoModerationRules|getAutoModerationRules(dev.kord.common.entity.Snowflake){}[0]
    final fun getChannelPins(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Message> // dev.kord.core.supplier/StoreEntitySupplier.getChannelPins|getChannelPins(dev.kord.common.entity.Snowflake){}[0]
    final fun getChannelWebhooks(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Webhook> // dev.kord.core.supplier/StoreEntitySupplier.getChannelWebhooks|getChannelWebhooks(dev.kord.common.entity.Snowflake){}[0]
    final fun getCurrentUserGuilds(kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Guild> // dev.kord.core.supplier/StoreEntitySupplier.getCurrentUserGuilds|getCurrentUserGuilds(kotlin.Int?){}[0]
    final fun getEmojis(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/GuildEmoji> // dev.kord.core.supplier/StoreEntitySupplier.getEmojis|getEmojis(dev.kord.common.entity.Snowflake){}[0]
    final fun getGlobalApplicationCommands(dev.kord.common.entity/Snowflake, kotlin/Boolean?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.application/GlobalApplicationCommand> // dev.kord.core.supplier/StoreEntitySupplier.getGlobalApplicationCommands|getGlobalApplicationCommands(dev.kord.common.entity.Snowflake;kotlin.Boolean?){}[0]
    final fun getGuildApplicationCommandPermissions(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.application/ApplicationCommandPermissions> // dev.kord.core.supplier/StoreEntitySupplier.getGuildApplicationCommandPermissions|getGuildApplicationCommandPermissions(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun getGuildApplicationCommands(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Boolean?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.application/GuildApplicationCommand> // dev.kord.core.supplier/StoreEntitySupplier.getGuildApplicationCommands|getGuildApplicationCommands(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Boolean?){}[0]
    final fun getGuildBans(dev.kord.common.entity/Snowflake, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Ban> // dev.kord.core.supplier/StoreEntitySupplier.getGuildBans|getGuildBans(dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    final fun getGuildChannels(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel/TopGuildChannel> // dev.kord.core.supplier/StoreEntitySupplier.getGuildChannels|getGuildChannels(dev.kord.common.entity.Snowflake){}[0]
    final fun getGuildMembers(dev.kord.common.entity/Snowflake, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Member> // dev.kord.core.supplier/StoreEntitySupplier.getGuildMembers|getGuildMembers(dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    final fun getGuildRoles(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Role> // dev.kord.core.supplier/StoreEntitySupplier.getGuildRoles|getGuildRoles(dev.kord.common.entity.Snowflake){}[0]
    final fun getGuildScheduledEventMembersAfter(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Member> // dev.kord.core.supplier/StoreEntitySupplier.getGuildScheduledEventMembersAfter|getGuildScheduledEventMembersAfter(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    final fun getGuildScheduledEventMembersBefore(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Member> // dev.kord.core.supplier/StoreEntitySupplier.getGuildScheduledEventMembersBefore|getGuildScheduledEventMembersBefore(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    final fun getGuildScheduledEventUsersAfter(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/User> // dev.kord.core.supplier/StoreEntitySupplier.getGuildScheduledEventUsersAfter|getGuildScheduledEventUsersAfter(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    final fun getGuildScheduledEventUsersBefore(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/User> // dev.kord.core.supplier/StoreEntitySupplier.getGuildScheduledEventUsersBefore|getGuildScheduledEventUsersBefore(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    final fun getGuildScheduledEvents(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/GuildScheduledEvent> // dev.kord.core.supplier/StoreEntitySupplier.getGuildScheduledEvents|getGuildScheduledEvents(dev.kord.common.entity.Snowflake){}[0]
    final fun getGuildStickers(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/GuildSticker> // dev.kord.core.supplier/StoreEntitySupplier.getGuildStickers|getGuildStickers(dev.kord.common.entity.Snowflake){}[0]
    final fun getGuildVoiceRegions(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Region> // dev.kord.core.supplier/StoreEntitySupplier.getGuildVoiceRegions|getGuildVoiceRegions(dev.kord.common.entity.Snowflake){}[0]
    final fun getGuildWebhooks(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Webhook> // dev.kord.core.supplier/StoreEntitySupplier.getGuildWebhooks|getGuildWebhooks(dev.kord.common.entity.Snowflake){}[0]
    final fun getJoinedPrivateArchivedThreads(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake?, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadChannel> // dev.kord.core.supplier/StoreEntitySupplier.getJoinedPrivateArchivedThreads|getJoinedPrivateArchivedThreads(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?;kotlin.Int?){}[0]
    final fun getMessagesAfter(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Message> // dev.kord.core.supplier/StoreEntitySupplier.getMessagesAfter|getMessagesAfter(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    final fun getMessagesAround(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Message> // dev.kord.core.supplier/StoreEntitySupplier.getMessagesAround|getMessagesAround(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int){}[0]
    final fun getMessagesBefore(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Message> // dev.kord.core.supplier/StoreEntitySupplier.getMessagesBefore|getMessagesBefore(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.Int?){}[0]
    final fun getNitroStickerPacks(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/StickerPack> // dev.kord.core.supplier/StoreEntitySupplier.getNitroStickerPacks|getNitroStickerPacks(){}[0]
    final fun getPrivateArchivedThreads(dev.kord.common.entity/Snowflake, kotlinx.datetime/Instant?, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadChannel> // dev.kord.core.supplier/StoreEntitySupplier.getPrivateArchivedThreads|getPrivateArchivedThreads(dev.kord.common.entity.Snowflake;kotlinx.datetime.Instant?;kotlin.Int?){}[0]
    final fun getPublicArchivedThreads(dev.kord.common.entity/Snowflake, kotlinx.datetime/Instant?, kotlin/Int?): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadChannel> // dev.kord.core.supplier/StoreEntitySupplier.getPublicArchivedThreads|getPublicArchivedThreads(dev.kord.common.entity.Snowflake;kotlinx.datetime.Instant?;kotlin.Int?){}[0]
    final fun getTemplates(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Template> // dev.kord.core.supplier/StoreEntitySupplier.getTemplates|getTemplates(dev.kord.common.entity.Snowflake){}[0]
    final fun getThreadMembers(dev.kord.common.entity/Snowflake): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.channel.thread/ThreadMember> // dev.kord.core.supplier/StoreEntitySupplier.getThreadMembers|getThreadMembers(dev.kord.common.entity.Snowflake){}[0]
    final fun toString(): kotlin/String // dev.kord.core.supplier/StoreEntitySupplier.toString|toString(){}[0]
    final suspend fun getApplicationCommandPermissionsOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity.application/ApplicationCommandPermissions? // dev.kord.core.supplier/StoreEntitySupplier.getApplicationCommandPermissionsOrNull|getApplicationCommandPermissionsOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getAutoModerationRuleOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity.automoderation/AutoModerationRule? // dev.kord.core.supplier/StoreEntitySupplier.getAutoModerationRuleOrNull|getAutoModerationRuleOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getChannelOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity.channel/Channel? // dev.kord.core.supplier/StoreEntitySupplier.getChannelOrNull|getChannelOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getEmojiOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildEmoji? // dev.kord.core.supplier/StoreEntitySupplier.getEmojiOrNull|getEmojiOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getFollowupMessageOrNull(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake): dev.kord.core.entity.interaction.followup/FollowupMessage? // dev.kord.core.supplier/StoreEntitySupplier.getFollowupMessageOrNull|getFollowupMessageOrNull(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGlobalApplicationCommandOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity.application/GlobalApplicationCommand? // dev.kord.core.supplier/StoreEntitySupplier.getGlobalApplicationCommandOrNull|getGlobalApplicationCommandOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildApplicationCommandOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity.application/GuildApplicationCommand? // dev.kord.core.supplier/StoreEntitySupplier.getGuildApplicationCommandOrNull|getGuildApplicationCommandOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildBanOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/Ban? // dev.kord.core.supplier/StoreEntitySupplier.getGuildBanOrNull|getGuildBanOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Guild? // dev.kord.core.supplier/StoreEntitySupplier.getGuildOrNull|getGuildOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildPreviewOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildPreview? // dev.kord.core.supplier/StoreEntitySupplier.getGuildPreviewOrNull|getGuildPreviewOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildScheduledEventOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildScheduledEvent? // dev.kord.core.supplier/StoreEntitySupplier.getGuildScheduledEventOrNull|getGuildScheduledEventOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildStickerOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildSticker? // dev.kord.core.supplier/StoreEntitySupplier.getGuildStickerOrNull|getGuildStickerOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildWidgetOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/GuildWidget? // dev.kord.core.supplier/StoreEntitySupplier.getGuildWidgetOrNull|getGuildWidgetOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getMemberOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/Member? // dev.kord.core.supplier/StoreEntitySupplier.getMemberOrNull|getMemberOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getMessageOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/Message? // dev.kord.core.supplier/StoreEntitySupplier.getMessageOrNull|getMessageOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getRoleOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity/Role? // dev.kord.core.supplier/StoreEntitySupplier.getRoleOrNull|getRoleOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getSelfOrNull(): dev.kord.core.entity/User? // dev.kord.core.supplier/StoreEntitySupplier.getSelfOrNull|getSelfOrNull(){}[0]
    final suspend fun getStageInstanceOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/StageInstance? // dev.kord.core.supplier/StoreEntitySupplier.getStageInstanceOrNull|getStageInstanceOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getStickerOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Sticker? // dev.kord.core.supplier/StoreEntitySupplier.getStickerOrNull|getStickerOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getTemplateOrNull(kotlin/String): dev.kord.core.entity/Template? // dev.kord.core.supplier/StoreEntitySupplier.getTemplateOrNull|getTemplateOrNull(kotlin.String){}[0]
    final suspend fun getUserOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/User? // dev.kord.core.supplier/StoreEntitySupplier.getUserOrNull|getUserOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getWebhookMessageOrNull(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake?): dev.kord.core.entity/Message? // dev.kord.core.supplier/StoreEntitySupplier.getWebhookMessageOrNull|getWebhookMessageOrNull(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?){}[0]
    final suspend fun getWebhookOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Webhook? // dev.kord.core.supplier/StoreEntitySupplier.getWebhookOrNull|getWebhookOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getWebhookWithTokenOrNull(dev.kord.common.entity/Snowflake, kotlin/String): dev.kord.core.entity/Webhook? // dev.kord.core.supplier/StoreEntitySupplier.getWebhookWithTokenOrNull|getWebhookWithTokenOrNull(dev.kord.common.entity.Snowflake;kotlin.String){}[0]
}

final class dev.kord.core/ClientResources { // dev.kord.core/ClientResources|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.gateway.builder/Shards, kotlin/Int, io.ktor.client/HttpClient, dev.kord.core.supplier/EntitySupplyStrategy<*>) // dev.kord.core/ClientResources.<init>|<init>(kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.gateway.builder.Shards;kotlin.Int;io.ktor.client.HttpClient;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]

    final val applicationId // dev.kord.core/ClientResources.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity/Snowflake // dev.kord.core/ClientResources.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val defaultStrategy // dev.kord.core/ClientResources.defaultStrategy|{}defaultStrategy[0]
        final fun <get-defaultStrategy>(): dev.kord.core.supplier/EntitySupplyStrategy<*> // dev.kord.core/ClientResources.defaultStrategy.<get-defaultStrategy>|<get-defaultStrategy>(){}[0]
    final val httpClient // dev.kord.core/ClientResources.httpClient|{}httpClient[0]
        final fun <get-httpClient>(): io.ktor.client/HttpClient // dev.kord.core/ClientResources.httpClient.<get-httpClient>|<get-httpClient>(){}[0]
    final val maxConcurrency // dev.kord.core/ClientResources.maxConcurrency|{}maxConcurrency[0]
        final fun <get-maxConcurrency>(): kotlin/Int // dev.kord.core/ClientResources.maxConcurrency.<get-maxConcurrency>|<get-maxConcurrency>(){}[0]
    final val shards // dev.kord.core/ClientResources.shards|{}shards[0]
        final fun <get-shards>(): dev.kord.gateway.builder/Shards // dev.kord.core/ClientResources.shards.<get-shards>|<get-shards>(){}[0]
    final val token // dev.kord.core/ClientResources.token|{}token[0]
        final fun <get-token>(): kotlin/String // dev.kord.core/ClientResources.token.<get-token>|<get-token>(){}[0]

    final fun toString(): kotlin/String // dev.kord.core/ClientResources.toString|toString(){}[0]
}

final class dev.kord.core/Kord : kotlinx.coroutines/CoroutineScope { // dev.kord.core/Kord|null[0]
    constructor <init>(dev.kord.core/ClientResources, dev.kord.cache.api/DataCache, dev.kord.core.gateway/MasterGateway, dev.kord.rest.service/RestClient, dev.kord.common.entity/Snowflake, kotlinx.coroutines.flow/MutableSharedFlow<dev.kord.core.event/Event>, kotlinx.coroutines/CoroutineDispatcher, dev.kord.core.gateway.handler/GatewayEventInterceptor) // dev.kord.core/Kord.<init>|<init>(dev.kord.core.ClientResources;dev.kord.cache.api.DataCache;dev.kord.core.gateway.MasterGateway;dev.kord.rest.service.RestClient;dev.kord.common.entity.Snowflake;kotlinx.coroutines.flow.MutableSharedFlow<dev.kord.core.event.Event>;kotlinx.coroutines.CoroutineDispatcher;dev.kord.core.gateway.handler.GatewayEventInterceptor){}[0]

    final val cache // dev.kord.core/Kord.cache|{}cache[0]
        final fun <get-cache>(): dev.kord.cache.api/DataCache // dev.kord.core/Kord.cache.<get-cache>|<get-cache>(){}[0]
    final val coroutineContext // dev.kord.core/Kord.coroutineContext|{}coroutineContext[0]
        final fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // dev.kord.core/Kord.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]
    final val defaultSupplier // dev.kord.core/Kord.defaultSupplier|{}defaultSupplier[0]
        final fun <get-defaultSupplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core/Kord.defaultSupplier.<get-defaultSupplier>|<get-defaultSupplier>(){}[0]
    final val events // dev.kord.core/Kord.events|{}events[0]
        final fun <get-events>(): kotlinx.coroutines.flow/SharedFlow<dev.kord.core.event/Event> // dev.kord.core/Kord.events.<get-events>|<get-events>(){}[0]
    final val gateway // dev.kord.core/Kord.gateway|{}gateway[0]
        final fun <get-gateway>(): dev.kord.core.gateway/MasterGateway // dev.kord.core/Kord.gateway.<get-gateway>|<get-gateway>(){}[0]
    final val guilds // dev.kord.core/Kord.guilds|{}guilds[0]
        final fun <get-guilds>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Guild> // dev.kord.core/Kord.guilds.<get-guilds>|<get-guilds>(){}[0]
    final val nitroStickerPacks // dev.kord.core/Kord.nitroStickerPacks|{}nitroStickerPacks[0]
        final fun <get-nitroStickerPacks>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/StickerPack> // dev.kord.core/Kord.nitroStickerPacks.<get-nitroStickerPacks>|<get-nitroStickerPacks>(){}[0]
    final val regions // dev.kord.core/Kord.regions|{}regions[0]
        final fun <get-regions>(): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Region> // dev.kord.core/Kord.regions.<get-regions>|<get-regions>(){}[0]
    final val resources // dev.kord.core/Kord.resources|{}resources[0]
        final fun <get-resources>(): dev.kord.core/ClientResources // dev.kord.core/Kord.resources.<get-resources>|<get-resources>(){}[0]
    final val rest // dev.kord.core/Kord.rest|{}rest[0]
        final fun <get-rest>(): dev.kord.rest.service/RestClient // dev.kord.core/Kord.rest.<get-rest>|<get-rest>(){}[0]
    final val selfId // dev.kord.core/Kord.selfId|{}selfId[0]
        final fun <get-selfId>(): dev.kord.common.entity/Snowflake // dev.kord.core/Kord.selfId.<get-selfId>|<get-selfId>(){}[0]
    final val unsafe // dev.kord.core/Kord.unsafe|{}unsafe[0]
        final fun <get-unsafe>(): dev.kord.core/Unsafe // dev.kord.core/Kord.unsafe.<get-unsafe>|<get-unsafe>(){}[0]

    final fun <#A1: dev.kord.core.supplier/EntitySupplier> with(dev.kord.core.supplier/EntitySupplyStrategy<#A1>): #A1 // dev.kord.core/Kord.with|with(dev.kord.core.supplier.EntitySupplyStrategy<0:0>){0ยง<dev.kord.core.supplier.EntitySupplier>}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core/Kord.equals|equals(kotlin.Any?){}[0]
    final fun getGlobalApplicationCommands(kotlin/Boolean? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.application/GlobalApplicationCommand> // dev.kord.core/Kord.getGlobalApplicationCommands|getGlobalApplicationCommands(kotlin.Boolean?){}[0]
    final fun getGuildApplicationCommands(dev.kord.common.entity/Snowflake, kotlin/Boolean? = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.application/GuildApplicationCommand> // dev.kord.core/Kord.getGuildApplicationCommands|getGuildApplicationCommands(dev.kord.common.entity.Snowflake;kotlin.Boolean?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core/Kord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.core/Kord.toString|toString(){}[0]
    final suspend fun <#A1: kotlin/Any?> getGlobalApplicationCommandOf(dev.kord.common.entity/Snowflake): #A1 // dev.kord.core/Kord.getGlobalApplicationCommandOf|getGlobalApplicationCommandOf(dev.kord.common.entity.Snowflake){0ยง<kotlin.Any?>}[0]
    final suspend fun <#A1: kotlin/Any?> getGlobalApplicationCommandOfOrNull(dev.kord.common.entity/Snowflake): #A1? // dev.kord.core/Kord.getGlobalApplicationCommandOfOrNull|getGlobalApplicationCommandOfOrNull(dev.kord.common.entity.Snowflake){0ยง<kotlin.Any?>}[0]
    final suspend fun editSelf(kotlin/Function1<dev.kord.rest.builder.user/CurrentUserModifyBuilder, kotlin/Unit>): dev.kord.core.entity/User // dev.kord.core/Kord.editSelf|editSelf(kotlin.Function1<dev.kord.rest.builder.user.CurrentUserModifyBuilder,kotlin.Unit>){}[0]
    final suspend fun getApplicationInfo(): dev.kord.core.entity/Application // dev.kord.core/Kord.getApplicationInfo|getApplicationInfo(){}[0]
    final suspend fun getApplicationRoleConnectionMetadataRecords(): kotlin.collections/List<dev.kord.core.entity.application/ApplicationRoleConnectionMetadata> // dev.kord.core/Kord.getApplicationRoleConnectionMetadataRecords|getApplicationRoleConnectionMetadataRecords(){}[0]
    final suspend fun getChannel(dev.kord.common.entity/Snowflake, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.entity.channel/Channel? // dev.kord.core/Kord.getChannel|getChannel(dev.kord.common.entity.Snowflake;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getGlobalApplicationCommand(dev.kord.common.entity/Snowflake): dev.kord.core.entity.application/GlobalApplicationCommand // dev.kord.core/Kord.getGlobalApplicationCommand|getGlobalApplicationCommand(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGlobalApplicationCommandOrNull(dev.kord.common.entity/Snowflake): dev.kord.core.entity.application/GlobalApplicationCommand? // dev.kord.core/Kord.getGlobalApplicationCommandOrNull|getGlobalApplicationCommandOrNull(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuild(dev.kord.common.entity/Snowflake, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.entity/Guild // dev.kord.core/Kord.getGuild|getGuild(dev.kord.common.entity.Snowflake;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getGuildApplicationCommand(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity.application/GuildApplicationCommand // dev.kord.core/Kord.getGuildApplicationCommand|getGuildApplicationCommand(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildApplicationCommandOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.entity.application/GuildApplicationCommand? // dev.kord.core/Kord.getGuildApplicationCommandOrNull|getGuildApplicationCommandOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getGuildOrNull(dev.kord.common.entity/Snowflake, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.entity/Guild? // dev.kord.core/Kord.getGuildOrNull|getGuildOrNull(dev.kord.common.entity.Snowflake;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getGuildPreview(dev.kord.common.entity/Snowflake, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.entity/GuildPreview // dev.kord.core/Kord.getGuildPreview|getGuildPreview(dev.kord.common.entity.Snowflake;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getGuildPreviewOrNull(dev.kord.common.entity/Snowflake, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.entity/GuildPreview? // dev.kord.core/Kord.getGuildPreviewOrNull|getGuildPreviewOrNull(dev.kord.common.entity.Snowflake;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getInvite(kotlin/String, kotlin/Boolean = ..., kotlin/Boolean = ..., dev.kord.common.entity/Snowflake? = ...): dev.kord.core.entity/Invite // dev.kord.core/Kord.getInvite|getInvite(kotlin.String;kotlin.Boolean;kotlin.Boolean;dev.kord.common.entity.Snowflake?){}[0]
    final suspend fun getInviteOrNull(kotlin/String, kotlin/Boolean = ..., kotlin/Boolean = ..., dev.kord.common.entity/Snowflake? = ...): dev.kord.core.entity/Invite? // dev.kord.core/Kord.getInviteOrNull|getInviteOrNull(kotlin.String;kotlin.Boolean;kotlin.Boolean;dev.kord.common.entity.Snowflake?){}[0]
    final suspend fun getSelf(dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.entity/User // dev.kord.core/Kord.getSelf|getSelf(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getSticker(dev.kord.common.entity/Snowflake): dev.kord.core.entity/Sticker // dev.kord.core/Kord.getSticker|getSticker(dev.kord.common.entity.Snowflake){}[0]
    final suspend fun getUser(dev.kord.common.entity/Snowflake, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.entity/User? // dev.kord.core/Kord.getUser|getUser(dev.kord.common.entity.Snowflake;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getWebhook(dev.kord.common.entity/Snowflake, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.entity/Webhook // dev.kord.core/Kord.getWebhook|getWebhook(dev.kord.common.entity.Snowflake;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getWebhookOrNull(dev.kord.common.entity/Snowflake, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.entity/Webhook? // dev.kord.core/Kord.getWebhookOrNull|getWebhookOrNull(dev.kord.common.entity.Snowflake;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getWebhookWithToken(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.entity/Webhook // dev.kord.core/Kord.getWebhookWithToken|getWebhookWithToken(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun getWebhookWithTokenOrNull(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.entity/Webhook? // dev.kord.core/Kord.getWebhookWithTokenOrNull|getWebhookWithTokenOrNull(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final suspend fun logout() // dev.kord.core/Kord.logout|logout(){}[0]
    final suspend fun shutdown() // dev.kord.core/Kord.shutdown|shutdown(){}[0]
    final suspend inline fun <#A1: reified dev.kord.core.entity.application/GuildApplicationCommand> getGuildApplicationCommandOf(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): #A1 // dev.kord.core/Kord.getGuildApplicationCommandOf|getGuildApplicationCommandOf(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){0ยง<dev.kord.core.entity.application.GuildApplicationCommand>}[0]
    final suspend inline fun <#A1: reified dev.kord.core.entity.application/GuildApplicationCommand> getGuildApplicationCommandOfOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): #A1? // dev.kord.core/Kord.getGuildApplicationCommandOfOrNull|getGuildApplicationCommandOfOrNull(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){0ยง<dev.kord.core.entity.application.GuildApplicationCommand>}[0]
    final suspend inline fun <#A1: reified dev.kord.core.entity.channel/Channel> getChannelOf(dev.kord.common.entity/Snowflake, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): #A1? // dev.kord.core/Kord.getChannelOf|getChannelOf(dev.kord.common.entity.Snowflake;dev.kord.core.supplier.EntitySupplyStrategy<*>){0ยง<dev.kord.core.entity.channel.Channel>}[0]
    final suspend inline fun createGlobalApplicationCommands(kotlin/Function1<dev.kord.rest.builder.interaction/GlobalMultiApplicationCommandBuilder, kotlin/Unit>): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.application/GlobalApplicationCommand> // dev.kord.core/Kord.createGlobalApplicationCommands|createGlobalApplicationCommands(kotlin.Function1<dev.kord.rest.builder.interaction.GlobalMultiApplicationCommandBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createGlobalChatInputCommand(kotlin/String, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/GlobalChatInputCreateBuilder, kotlin/Unit> = ...): dev.kord.core.entity.application/GlobalChatInputCommand // dev.kord.core/Kord.createGlobalChatInputCommand|createGlobalChatInputCommand(kotlin.String;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.GlobalChatInputCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createGlobalMessageCommand(kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/GlobalMessageCommandCreateBuilder, kotlin/Unit> = ...): dev.kord.core.entity.application/GlobalMessageCommand // dev.kord.core/Kord.createGlobalMessageCommand|createGlobalMessageCommand(kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.GlobalMessageCommandCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createGlobalUserCommand(kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/GlobalUserCommandCreateBuilder, kotlin/Unit> = ...): dev.kord.core.entity.application/GlobalUserCommand // dev.kord.core/Kord.createGlobalUserCommand|createGlobalUserCommand(kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.GlobalUserCommandCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createGuild(kotlin/String, kotlin/Function1<dev.kord.rest.builder.guild/GuildCreateBuilder, kotlin/Unit>): dev.kord.core.entity/Guild // dev.kord.core/Kord.createGuild|createGuild(kotlin.String;kotlin.Function1<dev.kord.rest.builder.guild.GuildCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createGuildApplicationCommands(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.interaction/GuildMultiApplicationCommandBuilder, kotlin/Unit>): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.application/GuildApplicationCommand> // dev.kord.core/Kord.createGuildApplicationCommands|createGuildApplicationCommands(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.interaction.GuildMultiApplicationCommandBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createGuildChatInputCommand(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/ChatInputCreateBuilder, kotlin/Unit> = ...): dev.kord.core.entity.application/GuildChatInputCommand // dev.kord.core/Kord.createGuildChatInputCommand|createGuildChatInputCommand(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.ChatInputCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createGuildMessageCommand(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/MessageCommandCreateBuilder, kotlin/Unit> = ...): dev.kord.core.entity.application/GuildMessageCommand // dev.kord.core/Kord.createGuildMessageCommand|createGuildMessageCommand(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.MessageCommandCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun createGuildUserCommand(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/UserCommandCreateBuilder, kotlin/Unit> = ...): dev.kord.core.entity.application/GuildUserCommand // dev.kord.core/Kord.createGuildUserCommand|createGuildUserCommand(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.UserCommandCreateBuilder,kotlin.Unit>){}[0]
    final suspend inline fun editPresence(kotlin/Function1<dev.kord.gateway.builder/PresenceBuilder, kotlin/Unit>) // dev.kord.core/Kord.editPresence|editPresence(kotlin.Function1<dev.kord.gateway.builder.PresenceBuilder,kotlin.Unit>){}[0]
    final suspend inline fun login(kotlin/Function1<dev.kord.gateway.builder/LoginBuilder, kotlin/Unit> = ...) // dev.kord.core/Kord.login|login(kotlin.Function1<dev.kord.gateway.builder.LoginBuilder,kotlin.Unit>){}[0]
    final suspend inline fun updateApplicationRoleConnectionMetadataRecords(kotlin/Function1<dev.kord.rest.builder.application/ApplicationRoleConnectionMetadataRecordsBuilder, kotlin/Unit>): kotlin.collections/List<dev.kord.core.entity.application/ApplicationRoleConnectionMetadata> // dev.kord.core/Kord.updateApplicationRoleConnectionMetadataRecords|updateApplicationRoleConnectionMetadataRecords(kotlin.Function1<dev.kord.rest.builder.application.ApplicationRoleConnectionMetadataRecordsBuilder,kotlin.Unit>){}[0]

    final object Companion { // dev.kord.core/Kord.Companion|null[0]
        final inline fun proxy(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.core.builder.kord/KordProxyBuilder, kotlin/Unit> = ...): dev.kord.core/Kord // dev.kord.core/Kord.Companion.proxy|proxy(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.core.builder.kord.KordProxyBuilder,kotlin.Unit>){}[0]
        final inline fun restOnly(kotlin/String, kotlin/Function1<dev.kord.core.builder.kord/KordRestOnlyBuilder, kotlin/Unit> = ...): dev.kord.core/Kord // dev.kord.core/Kord.Companion.restOnly|restOnly(kotlin.String;kotlin.Function1<dev.kord.core.builder.kord.KordRestOnlyBuilder,kotlin.Unit>){}[0]
    }
}

final class dev.kord.core/Unsafe { // dev.kord.core/Unsafe|null[0]
    constructor <init>(dev.kord.core/Kord) // dev.kord.core/Unsafe.<init>|<init>(dev.kord.core.Kord){}[0]

    final fun applicationCommandInteraction(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake): dev.kord.core.behavior.interaction/ApplicationCommandInteractionBehavior // dev.kord.core/Unsafe.applicationCommandInteraction|applicationCommandInteraction(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake){}[0]
    final fun autoModerationRule(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.behavior.automoderation/AutoModerationRuleBehavior // dev.kord.core/Unsafe.autoModerationRule|autoModerationRule(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun categorizableChannel(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.behavior.channel/CategorizableChannelBehavior // dev.kord.core/Unsafe.categorizableChannel|categorizableChannel(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun channel(dev.kord.common.entity/Snowflake): dev.kord.core.behavior.channel/ChannelBehavior // dev.kord.core/Unsafe.channel|channel(dev.kord.common.entity.Snowflake){}[0]
    final fun componentInteraction(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake = ...): dev.kord.core.behavior.interaction/ComponentInteractionBehavior // dev.kord.core/Unsafe.componentInteraction|componentInteraction(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake){}[0]
    final fun globalApplicationCommand(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.behavior/GlobalApplicationCommandBehavior // dev.kord.core/Unsafe.globalApplicationCommand|globalApplicationCommand(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun globalApplicationCommand(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.behavior/GuildApplicationCommandBehavior // dev.kord.core/Unsafe.globalApplicationCommand|globalApplicationCommand(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun globalApplicationCommand(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.rest.service/InteractionService = ...): dev.kord.core.behavior/GlobalApplicationCommandBehavior // dev.kord.core/Unsafe.globalApplicationCommand|globalApplicationCommand(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.rest.service.InteractionService){}[0]
    final fun guild(dev.kord.common.entity/Snowflake): dev.kord.core.behavior/GuildBehavior // dev.kord.core/Unsafe.guild|guild(dev.kord.common.entity.Snowflake){}[0]
    final fun guildApplicationCommand(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.rest.service/InteractionService = ...): dev.kord.core.behavior/GuildApplicationCommandBehavior // dev.kord.core/Unsafe.guildApplicationCommand|guildApplicationCommand(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.rest.service.InteractionService){}[0]
    final fun guildChannel(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.behavior.channel/GuildChannelBehavior // dev.kord.core/Unsafe.guildChannel|guildChannel(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun guildEmoji(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.core/Kord): dev.kord.core.behavior/GuildEmojiBehavior // dev.kord.core/Unsafe.guildEmoji|guildEmoji(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.core.Kord){}[0]
    final fun guildMessageChannel(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.behavior.channel/GuildMessageChannelBehavior // dev.kord.core/Unsafe.guildMessageChannel|guildMessageChannel(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun guildScheduledEvent(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.behavior/GuildScheduledEventBehavior // dev.kord.core/Unsafe.guildScheduledEvent|guildScheduledEvent(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun keywordAutoModerationRule(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.behavior.automoderation/KeywordAutoModerationRuleBehavior // dev.kord.core/Unsafe.keywordAutoModerationRule|keywordAutoModerationRule(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun keywordPresetAutoModerationRule(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.behavior.automoderation/KeywordPresetAutoModerationRuleBehavior // dev.kord.core/Unsafe.keywordPresetAutoModerationRule|keywordPresetAutoModerationRule(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun member(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.behavior/MemberBehavior // dev.kord.core/Unsafe.member|member(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun mentionSpamAutoModerationRule(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.behavior.automoderation/MentionSpamAutoModerationRuleBehavior // dev.kord.core/Unsafe.mentionSpamAutoModerationRule|mentionSpamAutoModerationRule(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun message(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.behavior/MessageBehavior // dev.kord.core/Unsafe.message|message(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun messageChannel(dev.kord.common.entity/Snowflake): dev.kord.core.behavior.channel/MessageChannelBehavior // dev.kord.core/Unsafe.messageChannel|messageChannel(dev.kord.common.entity.Snowflake){}[0]
    final fun newsChannel(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.behavior.channel/NewsChannelBehavior // dev.kord.core/Unsafe.newsChannel|newsChannel(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun privateThreadParent(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.behavior.channel.threads/PrivateThreadParentChannelBehavior // dev.kord.core/Unsafe.privateThreadParent|privateThreadParent(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun publicThreadParent(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.behavior.channel.threads/ThreadParentChannelBehavior // dev.kord.core/Unsafe.publicThreadParent|publicThreadParent(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun role(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.behavior/RoleBehavior // dev.kord.core/Unsafe.role|role(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun spamAutoModerationRule(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.behavior.automoderation/SpamAutoModerationRuleBehavior // dev.kord.core/Unsafe.spamAutoModerationRule|spamAutoModerationRule(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun stageInstance(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.behavior/StageInstanceBehavior // dev.kord.core/Unsafe.stageInstance|stageInstance(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun textChannel(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.behavior.channel/TextChannelBehavior // dev.kord.core/Unsafe.textChannel|textChannel(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun thread(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.behavior.channel.threads/ThreadChannelBehavior // dev.kord.core/Unsafe.thread|thread(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun threadMember(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.behavior/ThreadMemberBehavior // dev.kord.core/Unsafe.threadMember|threadMember(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun toString(): kotlin/String // dev.kord.core/Unsafe.toString|toString(){}[0]
    final fun topGuildChannel(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.behavior.channel/TopGuildChannelBehavior // dev.kord.core/Unsafe.topGuildChannel|topGuildChannel(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun topGuildMessageChannel(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.behavior.channel/TopGuildMessageChannelBehavior // dev.kord.core/Unsafe.topGuildMessageChannel|topGuildMessageChannel(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun user(dev.kord.common.entity/Snowflake): dev.kord.core.behavior/UserBehavior // dev.kord.core/Unsafe.user|user(dev.kord.common.entity.Snowflake){}[0]
    final fun voiceChannel(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.behavior.channel/VoiceChannelBehavior // dev.kord.core/Unsafe.voiceChannel|voiceChannel(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun webhook(dev.kord.common.entity/Snowflake): dev.kord.core.behavior/WebhookBehavior // dev.kord.core/Unsafe.webhook|webhook(dev.kord.common.entity.Snowflake){}[0]
}

open class dev.kord.core.entity.interaction/UserOptionValue : dev.kord.core.entity.interaction/ResolvableOptionValue<dev.kord.core.entity/User> { // dev.kord.core.entity.interaction/UserOptionValue|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/Boolean, dev.kord.core.entity/User?) // dev.kord.core.entity.interaction/UserOptionValue.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.Boolean;dev.kord.core.entity.User?){}[0]

    open val focused // dev.kord.core.entity.interaction/UserOptionValue.focused|{}focused[0]
        open fun <get-focused>(): kotlin/Boolean // dev.kord.core.entity.interaction/UserOptionValue.focused.<get-focused>|<get-focused>(){}[0]
    open val resolvedObject // dev.kord.core.entity.interaction/UserOptionValue.resolvedObject|{}resolvedObject[0]
        open fun <get-resolvedObject>(): dev.kord.core.entity/User? // dev.kord.core.entity.interaction/UserOptionValue.resolvedObject.<get-resolvedObject>|<get-resolvedObject>(){}[0]
    open val value // dev.kord.core.entity.interaction/UserOptionValue.value|{}value[0]
        open fun <get-value>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.interaction/UserOptionValue.value.<get-value>|<get-value>(){}[0]

    open fun toString(): kotlin/String // dev.kord.core.entity.interaction/UserOptionValue.toString|toString(){}[0]
}

open class dev.kord.core.entity/Invite : dev.kord.core.entity/Strategizable, dev.kord.core/KordObject { // dev.kord.core.entity/Invite|null[0]
    constructor <init>(dev.kord.core.cache.data/BaseInviteData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/Invite.<init>|<init>(dev.kord.core.cache.data.BaseInviteData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val approximateMemberCount // dev.kord.core.entity/Invite.approximateMemberCount|{}approximateMemberCount[0]
        final fun <get-approximateMemberCount>(): kotlin/Int? // dev.kord.core.entity/Invite.approximateMemberCount.<get-approximateMemberCount>|<get-approximateMemberCount>(){}[0]
    final val approximatePresenceCount // dev.kord.core.entity/Invite.approximatePresenceCount|{}approximatePresenceCount[0]
        final fun <get-approximatePresenceCount>(): kotlin/Int? // dev.kord.core.entity/Invite.approximatePresenceCount.<get-approximatePresenceCount>|<get-approximatePresenceCount>(){}[0]
    final val channel // dev.kord.core.entity/Invite.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.core.behavior.channel/ChannelBehavior? // dev.kord.core.entity/Invite.channel.<get-channel>|<get-channel>(){}[0]
    final val channelId // dev.kord.core.entity/Invite.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/Invite.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val code // dev.kord.core.entity/Invite.code|{}code[0]
        final fun <get-code>(): kotlin/String // dev.kord.core.entity/Invite.code.<get-code>|<get-code>(){}[0]
    final val expiresAt // dev.kord.core.entity/Invite.expiresAt|{}expiresAt[0]
        final fun <get-expiresAt>(): kotlinx.datetime/Instant? // dev.kord.core.entity/Invite.expiresAt.<get-expiresAt>|<get-expiresAt>(){}[0]
    final val guildScheduledEvent // dev.kord.core.entity/Invite.guildScheduledEvent|{}guildScheduledEvent[0]
        final fun <get-guildScheduledEvent>(): dev.kord.core.entity/GuildScheduledEvent? // dev.kord.core.entity/Invite.guildScheduledEvent.<get-guildScheduledEvent>|<get-guildScheduledEvent>(){}[0]
    final val inviter // dev.kord.core.entity/Invite.inviter|{}inviter[0]
        final fun <get-inviter>(): dev.kord.core.behavior/UserBehavior? // dev.kord.core.entity/Invite.inviter.<get-inviter>|<get-inviter>(){}[0]
    final val inviterId // dev.kord.core.entity/Invite.inviterId|{}inviterId[0]
        final fun <get-inviterId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/Invite.inviterId.<get-inviterId>|<get-inviterId>(){}[0]
    final val kord // dev.kord.core.entity/Invite.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/Invite.kord.<get-kord>|<get-kord>(){}[0]
    final val partialGuild // dev.kord.core.entity/Invite.partialGuild|{}partialGuild[0]
        final fun <get-partialGuild>(): dev.kord.core.entity/PartialGuild? // dev.kord.core.entity/Invite.partialGuild.<get-partialGuild>|<get-partialGuild>(){}[0]
    final val supplier // dev.kord.core.entity/Invite.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/Invite.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val targetApplication // dev.kord.core.entity/Invite.targetApplication|{}targetApplication[0]
        final fun <get-targetApplication>(): dev.kord.core.entity/PartialApplication? // dev.kord.core.entity/Invite.targetApplication.<get-targetApplication>|<get-targetApplication>(){}[0]
    final val targetType // dev.kord.core.entity/Invite.targetType|{}targetType[0]
        final fun <get-targetType>(): dev.kord.common.entity/InviteTargetType? // dev.kord.core.entity/Invite.targetType.<get-targetType>|<get-targetType>(){}[0]
    final val targetUser // dev.kord.core.entity/Invite.targetUser|{}targetUser[0]
        final fun <get-targetUser>(): dev.kord.core.behavior/UserBehavior? // dev.kord.core.entity/Invite.targetUser.<get-targetUser>|<get-targetUser>(){}[0]
    final val targetUserId // dev.kord.core.entity/Invite.targetUserId|{}targetUserId[0]
        final fun <get-targetUserId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/Invite.targetUserId.<get-targetUserId>|<get-targetUserId>(){}[0]
    open val data // dev.kord.core.entity/Invite.data|{}data[0]
        open fun <get-data>(): dev.kord.core.cache.data/BaseInviteData // dev.kord.core.entity/Invite.data.<get-data>|<get-data>(){}[0]

    final suspend fun delete(kotlin/String? = ...): dev.kord.core.entity/Invite // dev.kord.core.entity/Invite.delete|delete(kotlin.String?){}[0]
    final suspend fun getChannelOrNull(): dev.kord.core.entity.channel/Channel? // dev.kord.core.entity/Invite.getChannelOrNull|getChannelOrNull(){}[0]
    final suspend fun getInviterOrNull(): dev.kord.core.entity/User? // dev.kord.core.entity/Invite.getInviterOrNull|getInviterOrNull(){}[0]
    final suspend fun getTargetUserOrNull(): dev.kord.core.entity/User? // dev.kord.core.entity/Invite.getTargetUserOrNull|getTargetUserOrNull(){}[0]
    open fun toString(): kotlin/String // dev.kord.core.entity/Invite.toString|toString(){}[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/Invite // dev.kord.core.entity/Invite.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

open class dev.kord.core.entity/PermissionOverwrite { // dev.kord.core.entity/PermissionOverwrite|null[0]
    constructor <init>(dev.kord.core.cache.data/PermissionOverwriteData) // dev.kord.core.entity/PermissionOverwrite.<init>|<init>(dev.kord.core.cache.data.PermissionOverwriteData){}[0]

    final val allowed // dev.kord.core.entity/PermissionOverwrite.allowed|{}allowed[0]
        final fun <get-allowed>(): dev.kord.common.entity/Permissions // dev.kord.core.entity/PermissionOverwrite.allowed.<get-allowed>|<get-allowed>(){}[0]
    final val data // dev.kord.core.entity/PermissionOverwrite.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/PermissionOverwriteData // dev.kord.core.entity/PermissionOverwrite.data.<get-data>|<get-data>(){}[0]
    final val denied // dev.kord.core.entity/PermissionOverwrite.denied|{}denied[0]
        final fun <get-denied>(): dev.kord.common.entity/Permissions // dev.kord.core.entity/PermissionOverwrite.denied.<get-denied>|<get-denied>(){}[0]
    final val target // dev.kord.core.entity/PermissionOverwrite.target|{}target[0]
        final fun <get-target>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/PermissionOverwrite.target.<get-target>|<get-target>(){}[0]
    final val type // dev.kord.core.entity/PermissionOverwrite.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/OverwriteType // dev.kord.core.entity/PermissionOverwrite.type.<get-type>|<get-type>(){}[0]

    open fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/PermissionOverwrite.equals|equals(kotlin.Any?){}[0]
    open fun hashCode(): kotlin/Int // dev.kord.core.entity/PermissionOverwrite.hashCode|hashCode(){}[0]
    open fun toString(): kotlin/String // dev.kord.core.entity/PermissionOverwrite.toString|toString(){}[0]

    final object Companion { // dev.kord.core.entity/PermissionOverwrite.Companion|null[0]
        final fun forEveryone(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Permissions = ..., dev.kord.common.entity/Permissions = ...): dev.kord.core.entity/PermissionOverwrite // dev.kord.core.entity/PermissionOverwrite.Companion.forEveryone|forEveryone(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Permissions;dev.kord.common.entity.Permissions){}[0]
        final fun forMember(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Permissions = ..., dev.kord.common.entity/Permissions = ...): dev.kord.core.entity/PermissionOverwrite // dev.kord.core.entity/PermissionOverwrite.Companion.forMember|forMember(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Permissions;dev.kord.common.entity.Permissions){}[0]
        final fun forRole(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Permissions = ..., dev.kord.common.entity/Permissions = ...): dev.kord.core.entity/PermissionOverwrite // dev.kord.core.entity/PermissionOverwrite.Companion.forRole|forRole(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Permissions;dev.kord.common.entity.Permissions){}[0]
    }
}

open class dev.kord.core.entity/Sticker : dev.kord.core.entity/KordEntity { // dev.kord.core.entity/Sticker|null[0]
    constructor <init>(dev.kord.core.cache.data/StickerData, dev.kord.core/Kord) // dev.kord.core.entity/Sticker.<init>|<init>(dev.kord.core.cache.data.StickerData;dev.kord.core.Kord){}[0]

    final val asset // dev.kord.core.entity/Sticker.asset|{}asset[0]
        final fun <get-asset>(): dev.kord.core.entity/Asset // dev.kord.core.entity/Sticker.asset.<get-asset>|<get-asset>(){}[0]
    final val available // dev.kord.core.entity/Sticker.available|{}available[0]
        final fun <get-available>(): kotlin/Boolean // dev.kord.core.entity/Sticker.available.<get-available>|<get-available>(){}[0]
    final val data // dev.kord.core.entity/Sticker.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/StickerData // dev.kord.core.entity/Sticker.data.<get-data>|<get-data>(){}[0]
    final val description // dev.kord.core.entity/Sticker.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.core.entity/Sticker.description.<get-description>|<get-description>(){}[0]
    final val formatType // dev.kord.core.entity/Sticker.formatType|{}formatType[0]
        final fun <get-formatType>(): dev.kord.common.entity/MessageStickerType // dev.kord.core.entity/Sticker.formatType.<get-formatType>|<get-formatType>(){}[0]
    final val name // dev.kord.core.entity/Sticker.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.entity/Sticker.name.<get-name>|<get-name>(){}[0]
    final val packId // dev.kord.core.entity/Sticker.packId|{}packId[0]
        final fun <get-packId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/Sticker.packId.<get-packId>|<get-packId>(){}[0]
    final val sortValue // dev.kord.core.entity/Sticker.sortValue|{}sortValue[0]
        final fun <get-sortValue>(): kotlin/Int? // dev.kord.core.entity/Sticker.sortValue.<get-sortValue>|<get-sortValue>(){}[0]
    final val tags // dev.kord.core.entity/Sticker.tags|{}tags[0]
        final fun <get-tags>(): kotlin.collections/List<kotlin/String> // dev.kord.core.entity/Sticker.tags.<get-tags>|<get-tags>(){}[0]
    final val user // dev.kord.core.entity/Sticker.user|{}user[0]
        final fun <get-user>(): dev.kord.core.entity/User? // dev.kord.core.entity/Sticker.user.<get-user>|<get-user>(){}[0]
    open val id // dev.kord.core.entity/Sticker.id|{}id[0]
        open fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/Sticker.id.<get-id>|<get-id>(){}[0]
    open val kord // dev.kord.core.entity/Sticker.kord|{}kord[0]
        open fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/Sticker.kord.<get-kord>|<get-kord>(){}[0]
}

open class dev.kord.core.entity/User : dev.kord.core.behavior/UserBehavior { // dev.kord.core.entity/User|null[0]
    constructor <init>(dev.kord.core.cache.data/UserData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/User.<init>|<init>(dev.kord.core.cache.data.UserData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    final val accentColor // dev.kord.core.entity/User.accentColor|{}accentColor[0]
        final fun <get-accentColor>(): dev.kord.common/Color? // dev.kord.core.entity/User.accentColor.<get-accentColor>|<get-accentColor>(){}[0]
    final val avatar // dev.kord.core.entity/User.avatar|{}avatar[0]
        final fun <get-avatar>(): dev.kord.core.entity/Asset? // dev.kord.core.entity/User.avatar.<get-avatar>|<get-avatar>(){}[0]
    final val avatarDecoration // dev.kord.core.entity/User.avatarDecoration|{}avatarDecoration[0]
        final fun <get-avatarDecoration>(): dev.kord.core.entity/Asset? // dev.kord.core.entity/User.avatarDecoration.<get-avatarDecoration>|<get-avatarDecoration>(){}[0]
    final val avatarDecorationHash // dev.kord.core.entity/User.avatarDecorationHash|{}avatarDecorationHash[0]
        final fun <get-avatarDecorationHash>(): kotlin/String? // dev.kord.core.entity/User.avatarDecorationHash.<get-avatarDecorationHash>|<get-avatarDecorationHash>(){}[0]
    final val avatarHash // dev.kord.core.entity/User.avatarHash|{}avatarHash[0]
        final fun <get-avatarHash>(): kotlin/String? // dev.kord.core.entity/User.avatarHash.<get-avatarHash>|<get-avatarHash>(){}[0]
    final val banner // dev.kord.core.entity/User.banner|{}banner[0]
        final fun <get-banner>(): dev.kord.core.entity/Asset? // dev.kord.core.entity/User.banner.<get-banner>|<get-banner>(){}[0]
    final val bannerHash // dev.kord.core.entity/User.bannerHash|{}bannerHash[0]
        final fun <get-bannerHash>(): kotlin/String? // dev.kord.core.entity/User.bannerHash.<get-bannerHash>|<get-bannerHash>(){}[0]
    final val data // dev.kord.core.entity/User.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/UserData // dev.kord.core.entity/User.data.<get-data>|<get-data>(){}[0]
    final val defaultAvatar // dev.kord.core.entity/User.defaultAvatar|{}defaultAvatar[0]
        final fun <get-defaultAvatar>(): dev.kord.core.entity/Asset // dev.kord.core.entity/User.defaultAvatar.<get-defaultAvatar>|<get-defaultAvatar>(){}[0]
    final val discriminator // dev.kord.core.entity/User.discriminator|{}discriminator[0]
        final fun <get-discriminator>(): kotlin/String // dev.kord.core.entity/User.discriminator.<get-discriminator>|<get-discriminator>(){}[0]
    final val globalName // dev.kord.core.entity/User.globalName|{}globalName[0]
        final fun <get-globalName>(): kotlin/String? // dev.kord.core.entity/User.globalName.<get-globalName>|<get-globalName>(){}[0]
    final val isBot // dev.kord.core.entity/User.isBot|{}isBot[0]
        final fun <get-isBot>(): kotlin/Boolean // dev.kord.core.entity/User.isBot.<get-isBot>|<get-isBot>(){}[0]
    final val isSelf // dev.kord.core.entity/User.isSelf|{}isSelf[0]
        final fun <get-isSelf>(): kotlin/Boolean // dev.kord.core.entity/User.isSelf.<get-isSelf>|<get-isSelf>(){}[0]
    final val publicFlags // dev.kord.core.entity/User.publicFlags|{}publicFlags[0]
        final fun <get-publicFlags>(): dev.kord.common.entity/UserFlags? // dev.kord.core.entity/User.publicFlags.<get-publicFlags>|<get-publicFlags>(){}[0]
    final val tag // dev.kord.core.entity/User.tag|{}tag[0]
        final fun <get-tag>(): kotlin/String // dev.kord.core.entity/User.tag.<get-tag>|<get-tag>(){}[0]
    final val username // dev.kord.core.entity/User.username|{}username[0]
        final fun <get-username>(): kotlin/String // dev.kord.core.entity/User.username.<get-username>|<get-username>(){}[0]
    open val id // dev.kord.core.entity/User.id|{}id[0]
        open fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/User.id.<get-id>|<get-id>(){}[0]
    open val kord // dev.kord.core.entity/User.kord|{}kord[0]
        open fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/User.kord.<get-kord>|<get-kord>(){}[0]
    open val supplier // dev.kord.core.entity/User.supplier|{}supplier[0]
        open fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/User.supplier.<get-supplier>|<get-supplier>(){}[0]

    open fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/User.equals|equals(kotlin.Any?){}[0]
    open fun hashCode(): kotlin/Int // dev.kord.core.entity/User.hashCode|hashCode(){}[0]
    open fun toString(): kotlin/String // dev.kord.core.entity/User.toString|toString(){}[0]
    open fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/User // dev.kord.core.entity/User.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    open suspend fun asUser(): dev.kord.core.entity/User // dev.kord.core.entity/User.asUser|asUser(){}[0]
    open suspend fun asUserOrNull(): dev.kord.core.entity/User // dev.kord.core.entity/User.asUserOrNull|asUserOrNull(){}[0]
}

sealed class dev.kord.core.cache.data/ComponentData { // dev.kord.core.cache.data/ComponentData|null[0]
    constructor <init>() // dev.kord.core.cache.data/ComponentData.<init>|<init>(){}[0]
    constructor <init>(kotlin/Int, kotlinx.serialization.internal/SerializationConstructorMarker?) // dev.kord.core.cache.data/ComponentData.<init>|<init>(kotlin.Int;kotlinx.serialization.internal.SerializationConstructorMarker?){}[0]

    abstract val channelTypes // dev.kord.core.cache.data/ComponentData.channelTypes|{}channelTypes[0]
        abstract fun <get-channelTypes>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> // dev.kord.core.cache.data/ComponentData.channelTypes.<get-channelTypes>|<get-channelTypes>(){}[0]
    abstract val components // dev.kord.core.cache.data/ComponentData.components|{}components[0]
        abstract fun <get-components>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/ComponentData>> // dev.kord.core.cache.data/ComponentData.components.<get-components>|<get-components>(){}[0]
    abstract val customId // dev.kord.core.cache.data/ComponentData.customId|{}customId[0]
        abstract fun <get-customId>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ComponentData.customId.<get-customId>|<get-customId>(){}[0]
    abstract val defaultValues // dev.kord.core.cache.data/ComponentData.defaultValues|{}defaultValues[0]
        abstract fun <get-defaultValues>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectDefaultValue>> // dev.kord.core.cache.data/ComponentData.defaultValues.<get-defaultValues>|<get-defaultValues>(){}[0]
    abstract val disabled // dev.kord.core.cache.data/ComponentData.disabled|{}disabled[0]
        abstract fun <get-disabled>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/ComponentData.disabled.<get-disabled>|<get-disabled>(){}[0]
    abstract val emoji // dev.kord.core.cache.data/ComponentData.emoji|{}emoji[0]
        abstract fun <get-emoji>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> // dev.kord.core.cache.data/ComponentData.emoji.<get-emoji>|<get-emoji>(){}[0]
    abstract val label // dev.kord.core.cache.data/ComponentData.label|{}label[0]
        abstract fun <get-label>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ComponentData.label.<get-label>|<get-label>(){}[0]
    abstract val maxLength // dev.kord.core.cache.data/ComponentData.maxLength|{}maxLength[0]
        abstract fun <get-maxLength>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ComponentData.maxLength.<get-maxLength>|<get-maxLength>(){}[0]
    abstract val maxValues // dev.kord.core.cache.data/ComponentData.maxValues|{}maxValues[0]
        abstract fun <get-maxValues>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ComponentData.maxValues.<get-maxValues>|<get-maxValues>(){}[0]
    abstract val minLength // dev.kord.core.cache.data/ComponentData.minLength|{}minLength[0]
        abstract fun <get-minLength>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ComponentData.minLength.<get-minLength>|<get-minLength>(){}[0]
    abstract val minValues // dev.kord.core.cache.data/ComponentData.minValues|{}minValues[0]
        abstract fun <get-minValues>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.core.cache.data/ComponentData.minValues.<get-minValues>|<get-minValues>(){}[0]
    abstract val options // dev.kord.core.cache.data/ComponentData.options|{}options[0]
        abstract fun <get-options>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.core.cache.data/SelectOptionData>> // dev.kord.core.cache.data/ComponentData.options.<get-options>|<get-options>(){}[0]
    abstract val placeholder // dev.kord.core.cache.data/ComponentData.placeholder|{}placeholder[0]
        abstract fun <get-placeholder>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ComponentData.placeholder.<get-placeholder>|<get-placeholder>(){}[0]
    abstract val required // dev.kord.core.cache.data/ComponentData.required|{}required[0]
        abstract fun <get-required>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.core.cache.data/ComponentData.required.<get-required>|<get-required>(){}[0]
    abstract val type // dev.kord.core.cache.data/ComponentData.type|{}type[0]
        abstract fun <get-type>(): dev.kord.common.entity/ComponentType // dev.kord.core.cache.data/ComponentData.type.<get-type>|<get-type>(){}[0]
    abstract val url // dev.kord.core.cache.data/ComponentData.url|{}url[0]
        abstract fun <get-url>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ComponentData.url.<get-url>|<get-url>(){}[0]
    abstract val value // dev.kord.core.cache.data/ComponentData.value|{}value[0]
        abstract fun <get-value>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.core.cache.data/ComponentData.value.<get-value>|<get-value>(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // dev.kord.core.cache.data/ComponentData.Companion|null[0]
        final fun from(dev.kord.common.entity/DiscordComponent): dev.kord.core.cache.data/ComponentData // dev.kord.core.cache.data/ComponentData.Companion.from|from(dev.kord.common.entity.DiscordComponent){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.core.cache.data/ComponentData> // dev.kord.core.cache.data/ComponentData.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // dev.kord.core.cache.data/ComponentData.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

sealed class dev.kord.core.entity.automoderation/AutoModerationAction : dev.kord.core/KordObject { // dev.kord.core.entity.automoderation/AutoModerationAction|null[0]
    constructor <init>(dev.kord.core.cache.data/AutoModerationActionData, dev.kord.core/Kord, dev.kord.common.entity/AutoModerationActionType?) // dev.kord.core.entity.automoderation/AutoModerationAction.<init>|<init>(dev.kord.core.cache.data.AutoModerationActionData;dev.kord.core.Kord;dev.kord.common.entity.AutoModerationActionType?){}[0]

    abstract val type // dev.kord.core.entity.automoderation/AutoModerationAction.type|{}type[0]
        abstract fun <get-type>(): dev.kord.common.entity/AutoModerationActionType // dev.kord.core.entity.automoderation/AutoModerationAction.type.<get-type>|<get-type>(){}[0]
    final val data // dev.kord.core.entity.automoderation/AutoModerationAction.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/AutoModerationActionData // dev.kord.core.entity.automoderation/AutoModerationAction.data.<get-data>|<get-data>(){}[0]
    final val kord // dev.kord.core.entity.automoderation/AutoModerationAction.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.automoderation/AutoModerationAction.kord.<get-kord>|<get-kord>(){}[0]

    abstract fun toString(): kotlin/String // dev.kord.core.entity.automoderation/AutoModerationAction.toString|toString(){}[0]
}

sealed class dev.kord.core.entity.automoderation/AutoModerationRule : dev.kord.core.behavior.automoderation/TypedAutoModerationRuleBehavior { // dev.kord.core.entity.automoderation/AutoModerationRule|null[0]
    constructor <init>(dev.kord.core.cache.data/AutoModerationRuleData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier, dev.kord.common.entity/AutoModerationRuleTriggerType?) // dev.kord.core.entity.automoderation/AutoModerationRule.<init>|<init>(dev.kord.core.cache.data.AutoModerationRuleData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier;dev.kord.common.entity.AutoModerationRuleTriggerType?){}[0]

    final val actions // dev.kord.core.entity.automoderation/AutoModerationRule.actions|{}actions[0]
        final fun <get-actions>(): kotlin.collections/List<dev.kord.core.entity.automoderation/AutoModerationAction> // dev.kord.core.entity.automoderation/AutoModerationRule.actions.<get-actions>|<get-actions>(){}[0]
    final val creator // dev.kord.core.entity.automoderation/AutoModerationRule.creator|{}creator[0]
        final fun <get-creator>(): dev.kord.core.behavior/MemberBehavior // dev.kord.core.entity.automoderation/AutoModerationRule.creator.<get-creator>|<get-creator>(){}[0]
    final val creatorId // dev.kord.core.entity.automoderation/AutoModerationRule.creatorId|{}creatorId[0]
        final fun <get-creatorId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.automoderation/AutoModerationRule.creatorId.<get-creatorId>|<get-creatorId>(){}[0]
    final val data // dev.kord.core.entity.automoderation/AutoModerationRule.data|{}data[0]
        final fun <get-data>(): dev.kord.core.cache.data/AutoModerationRuleData // dev.kord.core.entity.automoderation/AutoModerationRule.data.<get-data>|<get-data>(){}[0]
    final val eventType // dev.kord.core.entity.automoderation/AutoModerationRule.eventType|{}eventType[0]
        final fun <get-eventType>(): dev.kord.common.entity/AutoModerationRuleEventType // dev.kord.core.entity.automoderation/AutoModerationRule.eventType.<get-eventType>|<get-eventType>(){}[0]
    final val exemptChannelIds // dev.kord.core.entity.automoderation/AutoModerationRule.exemptChannelIds|{}exemptChannelIds[0]
        final fun <get-exemptChannelIds>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.core.entity.automoderation/AutoModerationRule.exemptChannelIds.<get-exemptChannelIds>|<get-exemptChannelIds>(){}[0]
    final val exemptChannels // dev.kord.core.entity.automoderation/AutoModerationRule.exemptChannels|{}exemptChannels[0]
        final fun <get-exemptChannels>(): kotlin.collections/List<dev.kord.core.behavior.channel/GuildMessageChannelBehavior> // dev.kord.core.entity.automoderation/AutoModerationRule.exemptChannels.<get-exemptChannels>|<get-exemptChannels>(){}[0]
    final val exemptRoleIds // dev.kord.core.entity.automoderation/AutoModerationRule.exemptRoleIds|{}exemptRoleIds[0]
        final fun <get-exemptRoleIds>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.core.entity.automoderation/AutoModerationRule.exemptRoleIds.<get-exemptRoleIds>|<get-exemptRoleIds>(){}[0]
    final val exemptRoles // dev.kord.core.entity.automoderation/AutoModerationRule.exemptRoles|{}exemptRoles[0]
        final fun <get-exemptRoles>(): kotlin.collections/List<dev.kord.core.behavior/RoleBehavior> // dev.kord.core.entity.automoderation/AutoModerationRule.exemptRoles.<get-exemptRoles>|<get-exemptRoles>(){}[0]
    final val guildId // dev.kord.core.entity.automoderation/AutoModerationRule.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.automoderation/AutoModerationRule.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.core.entity.automoderation/AutoModerationRule.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.automoderation/AutoModerationRule.id.<get-id>|<get-id>(){}[0]
    final val isEnabled // dev.kord.core.entity.automoderation/AutoModerationRule.isEnabled|{}isEnabled[0]
        final fun <get-isEnabled>(): kotlin/Boolean // dev.kord.core.entity.automoderation/AutoModerationRule.isEnabled.<get-isEnabled>|<get-isEnabled>(){}[0]
    final val kord // dev.kord.core.entity.automoderation/AutoModerationRule.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity.automoderation/AutoModerationRule.kord.<get-kord>|<get-kord>(){}[0]
    final val name // dev.kord.core.entity.automoderation/AutoModerationRule.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.entity.automoderation/AutoModerationRule.name.<get-name>|<get-name>(){}[0]
    final val supplier // dev.kord.core.entity.automoderation/AutoModerationRule.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity.automoderation/AutoModerationRule.supplier.<get-supplier>|<get-supplier>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.automoderation/AutoModerationRule // dev.kord.core.entity.automoderation/AutoModerationRule.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    abstract suspend fun asAutoModerationRule(): dev.kord.core.entity.automoderation/AutoModerationRule // dev.kord.core.entity.automoderation/AutoModerationRule.asAutoModerationRule|asAutoModerationRule(){}[0]
    abstract suspend fun asAutoModerationRuleOrNull(): dev.kord.core.entity.automoderation/AutoModerationRule // dev.kord.core.entity.automoderation/AutoModerationRule.asAutoModerationRuleOrNull|asAutoModerationRuleOrNull(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.automoderation/AutoModerationRule.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity.automoderation/AutoModerationRule.hashCode|hashCode(){}[0]
}

sealed class dev.kord.core.entity.component/SelectMenuComponent : dev.kord.core.entity.component/Component { // dev.kord.core.entity.component/SelectMenuComponent|null[0]
    constructor <init>(dev.kord.core.cache.data/ComponentData) // dev.kord.core.entity.component/SelectMenuComponent.<init>|<init>(dev.kord.core.cache.data.ComponentData){}[0]

    final val customId // dev.kord.core.entity.component/SelectMenuComponent.customId|{}customId[0]
        final fun <get-customId>(): kotlin/String // dev.kord.core.entity.component/SelectMenuComponent.customId.<get-customId>|<get-customId>(){}[0]
    final val disabled // dev.kord.core.entity.component/SelectMenuComponent.disabled|{}disabled[0]
        final fun <get-disabled>(): kotlin/Boolean // dev.kord.core.entity.component/SelectMenuComponent.disabled.<get-disabled>|<get-disabled>(){}[0]
    final val maxValues // dev.kord.core.entity.component/SelectMenuComponent.maxValues|{}maxValues[0]
        final fun <get-maxValues>(): kotlin/Int // dev.kord.core.entity.component/SelectMenuComponent.maxValues.<get-maxValues>|<get-maxValues>(){}[0]
    final val minValues // dev.kord.core.entity.component/SelectMenuComponent.minValues|{}minValues[0]
        final fun <get-minValues>(): kotlin/Int // dev.kord.core.entity.component/SelectMenuComponent.minValues.<get-minValues>|<get-minValues>(){}[0]
    final val placeholder // dev.kord.core.entity.component/SelectMenuComponent.placeholder|{}placeholder[0]
        final fun <get-placeholder>(): kotlin/String? // dev.kord.core.entity.component/SelectMenuComponent.placeholder.<get-placeholder>|<get-placeholder>(){}[0]
    open val data // dev.kord.core.entity.component/SelectMenuComponent.data|{}data[0]
        open fun <get-data>(): dev.kord.core.cache.data/ComponentData // dev.kord.core.entity.component/SelectMenuComponent.data.<get-data>|<get-data>(){}[0]

    open fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity.component/SelectMenuComponent.equals|equals(kotlin.Any?){}[0]
    open fun hashCode(): kotlin/Int // dev.kord.core.entity.component/SelectMenuComponent.hashCode|hashCode(){}[0]
    open fun toString(): kotlin/String // dev.kord.core.entity.component/SelectMenuComponent.toString|toString(){}[0]
}

sealed class dev.kord.core.entity.interaction.followup/FollowupMessage : dev.kord.core.behavior.interaction.followup/FollowupMessageBehavior { // dev.kord.core.entity.interaction.followup/FollowupMessage|null[0]
    constructor <init>(dev.kord.core.entity/Message) // dev.kord.core.entity.interaction.followup/FollowupMessage.<init>|<init>(dev.kord.core.entity.Message){}[0]

    final val message // dev.kord.core.entity.interaction.followup/FollowupMessage.message|{}message[0]
        final fun <get-message>(): dev.kord.core.entity/Message // dev.kord.core.entity.interaction.followup/FollowupMessage.message.<get-message>|<get-message>(){}[0]
    open val channelId // dev.kord.core.entity.interaction.followup/FollowupMessage.channelId|{}channelId[0]
        open fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.interaction.followup/FollowupMessage.channelId.<get-channelId>|<get-channelId>(){}[0]
    open val id // dev.kord.core.entity.interaction.followup/FollowupMessage.id|{}id[0]
        open fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity.interaction.followup/FollowupMessage.id.<get-id>|<get-id>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction.followup/FollowupMessage // dev.kord.core.entity.interaction.followup/FollowupMessage.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

sealed class dev.kord.core.entity.interaction.response/MessageInteractionResponse : dev.kord.core.behavior.interaction.response/MessageInteractionResponseBehavior { // dev.kord.core.entity.interaction.response/MessageInteractionResponse|null[0]
    constructor <init>(dev.kord.core.entity/Message) // dev.kord.core.entity.interaction.response/MessageInteractionResponse.<init>|<init>(dev.kord.core.entity.Message){}[0]

    final val message // dev.kord.core.entity.interaction.response/MessageInteractionResponse.message|{}message[0]
        final fun <get-message>(): dev.kord.core.entity/Message // dev.kord.core.entity.interaction.response/MessageInteractionResponse.message.<get-message>|<get-message>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity.interaction.response/MessageInteractionResponse // dev.kord.core.entity.interaction.response/MessageInteractionResponse.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
}

sealed class dev.kord.core.entity/BaseApplication : dev.kord.core.entity/KordEntity, dev.kord.core.entity/Strategizable { // dev.kord.core.entity/BaseApplication|null[0]
    constructor <init>(dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...) // dev.kord.core.entity/BaseApplication.<init>|<init>(dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]

    abstract val data // dev.kord.core.entity/BaseApplication.data|{}data[0]
        abstract fun <get-data>(): dev.kord.core.cache.data/BaseApplicationData // dev.kord.core.entity/BaseApplication.data.<get-data>|<get-data>(){}[0]
    final val coverImage // dev.kord.core.entity/BaseApplication.coverImage|{}coverImage[0]
        final fun <get-coverImage>(): dev.kord.core.entity/Asset? // dev.kord.core.entity/BaseApplication.coverImage.<get-coverImage>|<get-coverImage>(){}[0]
    final val coverImageHash // dev.kord.core.entity/BaseApplication.coverImageHash|{}coverImageHash[0]
        final fun <get-coverImageHash>(): kotlin/String? // dev.kord.core.entity/BaseApplication.coverImageHash.<get-coverImageHash>|<get-coverImageHash>(){}[0]
    final val customInstallUrl // dev.kord.core.entity/BaseApplication.customInstallUrl|{}customInstallUrl[0]
        final fun <get-customInstallUrl>(): kotlin/String? // dev.kord.core.entity/BaseApplication.customInstallUrl.<get-customInstallUrl>|<get-customInstallUrl>(){}[0]
    final val description // dev.kord.core.entity/BaseApplication.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.core.entity/BaseApplication.description.<get-description>|<get-description>(){}[0]
    final val flags // dev.kord.core.entity/BaseApplication.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity/ApplicationFlags? // dev.kord.core.entity/BaseApplication.flags.<get-flags>|<get-flags>(){}[0]
    final val guild // dev.kord.core.entity/BaseApplication.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.core.behavior/GuildBehavior? // dev.kord.core.entity/BaseApplication.guild.<get-guild>|<get-guild>(){}[0]
    final val guildId // dev.kord.core.entity/BaseApplication.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/BaseApplication.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val icon // dev.kord.core.entity/BaseApplication.icon|{}icon[0]
        final fun <get-icon>(): dev.kord.core.entity/Asset? // dev.kord.core.entity/BaseApplication.icon.<get-icon>|<get-icon>(){}[0]
    final val iconHash // dev.kord.core.entity/BaseApplication.iconHash|{}iconHash[0]
        final fun <get-iconHash>(): kotlin/String? // dev.kord.core.entity/BaseApplication.iconHash.<get-iconHash>|<get-iconHash>(){}[0]
    final val id // dev.kord.core.entity/BaseApplication.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/BaseApplication.id.<get-id>|<get-id>(){}[0]
    final val installParams // dev.kord.core.entity/BaseApplication.installParams|{}installParams[0]
        final fun <get-installParams>(): dev.kord.common.entity/InstallParams? // dev.kord.core.entity/BaseApplication.installParams.<get-installParams>|<get-installParams>(){}[0]
    final val kord // dev.kord.core.entity/BaseApplication.kord|{}kord[0]
        final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.entity/BaseApplication.kord.<get-kord>|<get-kord>(){}[0]
    final val name // dev.kord.core.entity/BaseApplication.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.core.entity/BaseApplication.name.<get-name>|<get-name>(){}[0]
    final val owner // dev.kord.core.entity/BaseApplication.owner|{}owner[0]
        final fun <get-owner>(): dev.kord.core.behavior/UserBehavior? // dev.kord.core.entity/BaseApplication.owner.<get-owner>|<get-owner>(){}[0]
    final val ownerId // dev.kord.core.entity/BaseApplication.ownerId|{}ownerId[0]
        final fun <get-ownerId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/BaseApplication.ownerId.<get-ownerId>|<get-ownerId>(){}[0]
    final val primarySkuId // dev.kord.core.entity/BaseApplication.primarySkuId|{}primarySkuId[0]
        final fun <get-primarySkuId>(): dev.kord.common.entity/Snowflake? // dev.kord.core.entity/BaseApplication.primarySkuId.<get-primarySkuId>|<get-primarySkuId>(){}[0]
    final val privacyPolicyUrl // dev.kord.core.entity/BaseApplication.privacyPolicyUrl|{}privacyPolicyUrl[0]
        final fun <get-privacyPolicyUrl>(): kotlin/String? // dev.kord.core.entity/BaseApplication.privacyPolicyUrl.<get-privacyPolicyUrl>|<get-privacyPolicyUrl>(){}[0]
    final val roleConnectionsVerificationUrl // dev.kord.core.entity/BaseApplication.roleConnectionsVerificationUrl|{}roleConnectionsVerificationUrl[0]
        final fun <get-roleConnectionsVerificationUrl>(): kotlin/String? // dev.kord.core.entity/BaseApplication.roleConnectionsVerificationUrl.<get-roleConnectionsVerificationUrl>|<get-roleConnectionsVerificationUrl>(){}[0]
    final val rpcOrigins // dev.kord.core.entity/BaseApplication.rpcOrigins|{}rpcOrigins[0]
        final fun <get-rpcOrigins>(): kotlin.collections/List<kotlin/String> // dev.kord.core.entity/BaseApplication.rpcOrigins.<get-rpcOrigins>|<get-rpcOrigins>(){}[0]
    final val slug // dev.kord.core.entity/BaseApplication.slug|{}slug[0]
        final fun <get-slug>(): kotlin/String? // dev.kord.core.entity/BaseApplication.slug.<get-slug>|<get-slug>(){}[0]
    final val supplier // dev.kord.core.entity/BaseApplication.supplier|{}supplier[0]
        final fun <get-supplier>(): dev.kord.core.supplier/EntitySupplier // dev.kord.core.entity/BaseApplication.supplier.<get-supplier>|<get-supplier>(){}[0]
    final val tags // dev.kord.core.entity/BaseApplication.tags|{}tags[0]
        final fun <get-tags>(): kotlin.collections/List<kotlin/String> // dev.kord.core.entity/BaseApplication.tags.<get-tags>|<get-tags>(){}[0]
    final val termsOfServiceUrl // dev.kord.core.entity/BaseApplication.termsOfServiceUrl|{}termsOfServiceUrl[0]
        final fun <get-termsOfServiceUrl>(): kotlin/String? // dev.kord.core.entity/BaseApplication.termsOfServiceUrl.<get-termsOfServiceUrl>|<get-termsOfServiceUrl>(){}[0]
    final val verifyKey // dev.kord.core.entity/BaseApplication.verifyKey|{}verifyKey[0]
        final fun <get-verifyKey>(): kotlin/String // dev.kord.core.entity/BaseApplication.verifyKey.<get-verifyKey>|<get-verifyKey>(){}[0]

    abstract fun withStrategy(dev.kord.core.supplier/EntitySupplyStrategy<*>): dev.kord.core.entity/BaseApplication // dev.kord.core.entity/BaseApplication.withStrategy|withStrategy(dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/BaseApplication.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.core.entity/BaseApplication.hashCode|hashCode(){}[0]
    final suspend fun getGuildOrNull(): dev.kord.core.entity/Guild? // dev.kord.core.entity/BaseApplication.getGuildOrNull|getGuildOrNull(){}[0]
    final suspend fun getOwnerOrNull(): dev.kord.core.entity/User? // dev.kord.core.entity/BaseApplication.getOwnerOrNull|getOwnerOrNull(){}[0]
}

sealed class dev.kord.core.entity/ReactionEmoji { // dev.kord.core.entity/ReactionEmoji|null[0]
    constructor <init>() // dev.kord.core.entity/ReactionEmoji.<init>|<init>(){}[0]

    abstract val mention // dev.kord.core.entity/ReactionEmoji.mention|{}mention[0]
        abstract fun <get-mention>(): kotlin/String // dev.kord.core.entity/ReactionEmoji.mention.<get-mention>|<get-mention>(){}[0]
    abstract val name // dev.kord.core.entity/ReactionEmoji.name|{}name[0]
        abstract fun <get-name>(): kotlin/String // dev.kord.core.entity/ReactionEmoji.name.<get-name>|<get-name>(){}[0]
    abstract val urlFormat // dev.kord.core.entity/ReactionEmoji.urlFormat|{}urlFormat[0]
        abstract fun <get-urlFormat>(): kotlin/String // dev.kord.core.entity/ReactionEmoji.urlFormat.<get-urlFormat>|<get-urlFormat>(){}[0]

    final class Custom : dev.kord.core.entity/ReactionEmoji { // dev.kord.core.entity/ReactionEmoji.Custom|null[0]
        constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Boolean) // dev.kord.core.entity/ReactionEmoji.Custom.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Boolean){}[0]

        final val id // dev.kord.core.entity/ReactionEmoji.Custom.id|{}id[0]
            final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/ReactionEmoji.Custom.id.<get-id>|<get-id>(){}[0]
        final val isAnimated // dev.kord.core.entity/ReactionEmoji.Custom.isAnimated|{}isAnimated[0]
            final fun <get-isAnimated>(): kotlin/Boolean // dev.kord.core.entity/ReactionEmoji.Custom.isAnimated.<get-isAnimated>|<get-isAnimated>(){}[0]
        final val mention // dev.kord.core.entity/ReactionEmoji.Custom.mention|{}mention[0]
            final fun <get-mention>(): kotlin/String // dev.kord.core.entity/ReactionEmoji.Custom.mention.<get-mention>|<get-mention>(){}[0]
        final val name // dev.kord.core.entity/ReactionEmoji.Custom.name|{}name[0]
            final fun <get-name>(): kotlin/String // dev.kord.core.entity/ReactionEmoji.Custom.name.<get-name>|<get-name>(){}[0]
        final val urlFormat // dev.kord.core.entity/ReactionEmoji.Custom.urlFormat|{}urlFormat[0]
            final fun <get-urlFormat>(): kotlin/String // dev.kord.core.entity/ReactionEmoji.Custom.urlFormat.<get-urlFormat>|<get-urlFormat>(){}[0]

        final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.core.entity/ReactionEmoji.Custom.component1|component1(){}[0]
        final fun component2(): kotlin/String // dev.kord.core.entity/ReactionEmoji.Custom.component2|component2(){}[0]
        final fun component3(): kotlin/Boolean // dev.kord.core.entity/ReactionEmoji.Custom.component3|component3(){}[0]
        final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., kotlin/Boolean = ...): dev.kord.core.entity/ReactionEmoji.Custom // dev.kord.core.entity/ReactionEmoji.Custom.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Boolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/ReactionEmoji.Custom.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.core.entity/ReactionEmoji.Custom.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.core.entity/ReactionEmoji.Custom.toString|toString(){}[0]
    }

    final class Unicode : dev.kord.core.entity/ReactionEmoji { // dev.kord.core.entity/ReactionEmoji.Unicode|null[0]
        constructor <init>(kotlin/String) // dev.kord.core.entity/ReactionEmoji.Unicode.<init>|<init>(kotlin.String){}[0]

        final val mention // dev.kord.core.entity/ReactionEmoji.Unicode.mention|{}mention[0]
            final fun <get-mention>(): kotlin/String // dev.kord.core.entity/ReactionEmoji.Unicode.mention.<get-mention>|<get-mention>(){}[0]
        final val name // dev.kord.core.entity/ReactionEmoji.Unicode.name|{}name[0]
            final fun <get-name>(): kotlin/String // dev.kord.core.entity/ReactionEmoji.Unicode.name.<get-name>|<get-name>(){}[0]
        final val urlFormat // dev.kord.core.entity/ReactionEmoji.Unicode.urlFormat|{}urlFormat[0]
            final fun <get-urlFormat>(): kotlin/String // dev.kord.core.entity/ReactionEmoji.Unicode.urlFormat.<get-urlFormat>|<get-urlFormat>(){}[0]

        final fun component1(): kotlin/String // dev.kord.core.entity/ReactionEmoji.Unicode.component1|component1(){}[0]
        final fun copy(kotlin/String = ...): dev.kord.core.entity/ReactionEmoji.Unicode // dev.kord.core.entity/ReactionEmoji.Unicode.copy|copy(kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.core.entity/ReactionEmoji.Unicode.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.core.entity/ReactionEmoji.Unicode.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.core.entity/ReactionEmoji.Unicode.toString|toString(){}[0]
    }

    final object Companion { // dev.kord.core.entity/ReactionEmoji.Companion|null[0]
        final fun from(dev.kord.core.cache.data/RemovedReactionData): dev.kord.core.entity/ReactionEmoji // dev.kord.core.entity/ReactionEmoji.Companion.from|from(dev.kord.core.cache.data.RemovedReactionData){}[0]
        final fun from(dev.kord.core.entity/GuildEmoji): dev.kord.core.entity/ReactionEmoji.Custom // dev.kord.core.entity/ReactionEmoji.Companion.from|from(dev.kord.core.entity.GuildEmoji){}[0]
    }
}

sealed class dev.kord.core.event.gateway/DisconnectEvent : dev.kord.core.event.gateway/GatewayEvent { // dev.kord.core.event.gateway/DisconnectEvent|null[0]
    constructor <init>() // dev.kord.core.event.gateway/DisconnectEvent.<init>|<init>(){}[0]

    final class DetachEvent : dev.kord.core.event.gateway/DisconnectEvent { // dev.kord.core.event.gateway/DisconnectEvent.DetachEvent|null[0]
        constructor <init>(dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.gateway/DisconnectEvent.DetachEvent.<init>|<init>(dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

        final val customContext // dev.kord.core.event.gateway/DisconnectEvent.DetachEvent.customContext|{}customContext[0]
            final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.gateway/DisconnectEvent.DetachEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
        final val kord // dev.kord.core.event.gateway/DisconnectEvent.DetachEvent.kord|{}kord[0]
            final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.gateway/DisconnectEvent.DetachEvent.kord.<get-kord>|<get-kord>(){}[0]
        final val shard // dev.kord.core.event.gateway/DisconnectEvent.DetachEvent.shard|{}shard[0]
            final fun <get-shard>(): kotlin/Int // dev.kord.core.event.gateway/DisconnectEvent.DetachEvent.shard.<get-shard>|<get-shard>(){}[0]

        final fun toString(): kotlin/String // dev.kord.core.event.gateway/DisconnectEvent.DetachEvent.toString|toString(){}[0]
    }

    final class DiscordCloseEvent : dev.kord.core.event.gateway/DisconnectEvent { // dev.kord.core.event.gateway/DisconnectEvent.DiscordCloseEvent|null[0]
        constructor <init>(dev.kord.core/Kord, kotlin/Int, dev.kord.gateway/GatewayCloseCode, kotlin/Boolean, kotlin/Any?) // dev.kord.core.event.gateway/DisconnectEvent.DiscordCloseEvent.<init>|<init>(dev.kord.core.Kord;kotlin.Int;dev.kord.gateway.GatewayCloseCode;kotlin.Boolean;kotlin.Any?){}[0]

        final val closeCode // dev.kord.core.event.gateway/DisconnectEvent.DiscordCloseEvent.closeCode|{}closeCode[0]
            final fun <get-closeCode>(): dev.kord.gateway/GatewayCloseCode // dev.kord.core.event.gateway/DisconnectEvent.DiscordCloseEvent.closeCode.<get-closeCode>|<get-closeCode>(){}[0]
        final val customContext // dev.kord.core.event.gateway/DisconnectEvent.DiscordCloseEvent.customContext|{}customContext[0]
            final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.gateway/DisconnectEvent.DiscordCloseEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
        final val kord // dev.kord.core.event.gateway/DisconnectEvent.DiscordCloseEvent.kord|{}kord[0]
            final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.gateway/DisconnectEvent.DiscordCloseEvent.kord.<get-kord>|<get-kord>(){}[0]
        final val recoverable // dev.kord.core.event.gateway/DisconnectEvent.DiscordCloseEvent.recoverable|{}recoverable[0]
            final fun <get-recoverable>(): kotlin/Boolean // dev.kord.core.event.gateway/DisconnectEvent.DiscordCloseEvent.recoverable.<get-recoverable>|<get-recoverable>(){}[0]
        final val shard // dev.kord.core.event.gateway/DisconnectEvent.DiscordCloseEvent.shard|{}shard[0]
            final fun <get-shard>(): kotlin/Int // dev.kord.core.event.gateway/DisconnectEvent.DiscordCloseEvent.shard.<get-shard>|<get-shard>(){}[0]

        final fun toString(): kotlin/String // dev.kord.core.event.gateway/DisconnectEvent.DiscordCloseEvent.toString|toString(){}[0]
    }

    final class ReconnectingEvent : dev.kord.core.event.gateway/DisconnectEvent { // dev.kord.core.event.gateway/DisconnectEvent.ReconnectingEvent|null[0]
        constructor <init>(dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.gateway/DisconnectEvent.ReconnectingEvent.<init>|<init>(dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

        final val customContext // dev.kord.core.event.gateway/DisconnectEvent.ReconnectingEvent.customContext|{}customContext[0]
            final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.gateway/DisconnectEvent.ReconnectingEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
        final val kord // dev.kord.core.event.gateway/DisconnectEvent.ReconnectingEvent.kord|{}kord[0]
            final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.gateway/DisconnectEvent.ReconnectingEvent.kord.<get-kord>|<get-kord>(){}[0]
        final val shard // dev.kord.core.event.gateway/DisconnectEvent.ReconnectingEvent.shard|{}shard[0]
            final fun <get-shard>(): kotlin/Int // dev.kord.core.event.gateway/DisconnectEvent.ReconnectingEvent.shard.<get-shard>|<get-shard>(){}[0]

        final fun toString(): kotlin/String // dev.kord.core.event.gateway/DisconnectEvent.ReconnectingEvent.toString|toString(){}[0]
    }

    final class RetryLimitReachedEvent : dev.kord.core.event.gateway/DisconnectEvent { // dev.kord.core.event.gateway/DisconnectEvent.RetryLimitReachedEvent|null[0]
        constructor <init>(dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.gateway/DisconnectEvent.RetryLimitReachedEvent.<init>|<init>(dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

        final val customContext // dev.kord.core.event.gateway/DisconnectEvent.RetryLimitReachedEvent.customContext|{}customContext[0]
            final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.gateway/DisconnectEvent.RetryLimitReachedEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
        final val kord // dev.kord.core.event.gateway/DisconnectEvent.RetryLimitReachedEvent.kord|{}kord[0]
            final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.gateway/DisconnectEvent.RetryLimitReachedEvent.kord.<get-kord>|<get-kord>(){}[0]
        final val shard // dev.kord.core.event.gateway/DisconnectEvent.RetryLimitReachedEvent.shard|{}shard[0]
            final fun <get-shard>(): kotlin/Int // dev.kord.core.event.gateway/DisconnectEvent.RetryLimitReachedEvent.shard.<get-shard>|<get-shard>(){}[0]

        final fun toString(): kotlin/String // dev.kord.core.event.gateway/DisconnectEvent.RetryLimitReachedEvent.toString|toString(){}[0]
    }

    final class SessionReset : dev.kord.core.event.gateway/DisconnectEvent { // dev.kord.core.event.gateway/DisconnectEvent.SessionReset|null[0]
        constructor <init>(dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.gateway/DisconnectEvent.SessionReset.<init>|<init>(dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

        final val customContext // dev.kord.core.event.gateway/DisconnectEvent.SessionReset.customContext|{}customContext[0]
            final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.gateway/DisconnectEvent.SessionReset.customContext.<get-customContext>|<get-customContext>(){}[0]
        final val kord // dev.kord.core.event.gateway/DisconnectEvent.SessionReset.kord|{}kord[0]
            final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.gateway/DisconnectEvent.SessionReset.kord.<get-kord>|<get-kord>(){}[0]
        final val shard // dev.kord.core.event.gateway/DisconnectEvent.SessionReset.shard|{}shard[0]
            final fun <get-shard>(): kotlin/Int // dev.kord.core.event.gateway/DisconnectEvent.SessionReset.shard.<get-shard>|<get-shard>(){}[0]

        final fun toString(): kotlin/String // dev.kord.core.event.gateway/DisconnectEvent.SessionReset.toString|toString(){}[0]
    }

    final class TimeoutEvent : dev.kord.core.event.gateway/DisconnectEvent { // dev.kord.core.event.gateway/DisconnectEvent.TimeoutEvent|null[0]
        constructor <init>(dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.gateway/DisconnectEvent.TimeoutEvent.<init>|<init>(dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

        final val customContext // dev.kord.core.event.gateway/DisconnectEvent.TimeoutEvent.customContext|{}customContext[0]
            final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.gateway/DisconnectEvent.TimeoutEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
        final val kord // dev.kord.core.event.gateway/DisconnectEvent.TimeoutEvent.kord|{}kord[0]
            final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.gateway/DisconnectEvent.TimeoutEvent.kord.<get-kord>|<get-kord>(){}[0]
        final val shard // dev.kord.core.event.gateway/DisconnectEvent.TimeoutEvent.shard|{}shard[0]
            final fun <get-shard>(): kotlin/Int // dev.kord.core.event.gateway/DisconnectEvent.TimeoutEvent.shard.<get-shard>|<get-shard>(){}[0]

        final fun toString(): kotlin/String // dev.kord.core.event.gateway/DisconnectEvent.TimeoutEvent.toString|toString(){}[0]
    }

    final class UserCloseEvent : dev.kord.core.event.gateway/DisconnectEvent { // dev.kord.core.event.gateway/DisconnectEvent.UserCloseEvent|null[0]
        constructor <init>(dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.gateway/DisconnectEvent.UserCloseEvent.<init>|<init>(dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

        final val customContext // dev.kord.core.event.gateway/DisconnectEvent.UserCloseEvent.customContext|{}customContext[0]
            final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.gateway/DisconnectEvent.UserCloseEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
        final val kord // dev.kord.core.event.gateway/DisconnectEvent.UserCloseEvent.kord|{}kord[0]
            final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.gateway/DisconnectEvent.UserCloseEvent.kord.<get-kord>|<get-kord>(){}[0]
        final val shard // dev.kord.core.event.gateway/DisconnectEvent.UserCloseEvent.shard|{}shard[0]
            final fun <get-shard>(): kotlin/Int // dev.kord.core.event.gateway/DisconnectEvent.UserCloseEvent.shard.<get-shard>|<get-shard>(){}[0]

        final fun toString(): kotlin/String // dev.kord.core.event.gateway/DisconnectEvent.UserCloseEvent.toString|toString(){}[0]
    }

    final class ZombieConnectionEvent : dev.kord.core.event.gateway/DisconnectEvent { // dev.kord.core.event.gateway/DisconnectEvent.ZombieConnectionEvent|null[0]
        constructor <init>(dev.kord.core/Kord, kotlin/Int, kotlin/Any?) // dev.kord.core.event.gateway/DisconnectEvent.ZombieConnectionEvent.<init>|<init>(dev.kord.core.Kord;kotlin.Int;kotlin.Any?){}[0]

        final val customContext // dev.kord.core.event.gateway/DisconnectEvent.ZombieConnectionEvent.customContext|{}customContext[0]
            final fun <get-customContext>(): kotlin/Any? // dev.kord.core.event.gateway/DisconnectEvent.ZombieConnectionEvent.customContext.<get-customContext>|<get-customContext>(){}[0]
        final val kord // dev.kord.core.event.gateway/DisconnectEvent.ZombieConnectionEvent.kord|{}kord[0]
            final fun <get-kord>(): dev.kord.core/Kord // dev.kord.core.event.gateway/DisconnectEvent.ZombieConnectionEvent.kord.<get-kord>|<get-kord>(){}[0]
        final val shard // dev.kord.core.event.gateway/DisconnectEvent.ZombieConnectionEvent.shard|{}shard[0]
            final fun <get-shard>(): kotlin/Int // dev.kord.core.event.gateway/DisconnectEvent.ZombieConnectionEvent.shard.<get-shard>|<get-shard>(){}[0]

        final fun toString(): kotlin/String // dev.kord.core.event.gateway/DisconnectEvent.ZombieConnectionEvent.toString|toString(){}[0]
    }
}

sealed class dev.kord.core.event.gateway/GatewayEvent : dev.kord.core.event/Event { // dev.kord.core.event.gateway/GatewayEvent|null[0]
    constructor <init>() // dev.kord.core.event.gateway/GatewayEvent.<init>|<init>(){}[0]
}

final object dev.kord.core.cache.data/NotSerializable : kotlinx.serialization/KSerializer<kotlin/Any?> { // dev.kord.core.cache.data/NotSerializable|null[0]
    final val descriptor // dev.kord.core.cache.data/NotSerializable.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.core.cache.data/NotSerializable.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlin/Nothing // dev.kord.core.cache.data/NotSerializable.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlin/Any?): kotlin/Nothing // dev.kord.core.cache.data/NotSerializable.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlin.Any?){}[0]
}

final val dev.kord.core.cache.data/id // dev.kord.core.cache.data/id|@dev.kord.core.cache.data.PresenceData{}id[0]
    final fun (dev.kord.core.cache.data/PresenceData).<get-id>(): kotlin/String // dev.kord.core.cache.data/id.<get-id>|<get-id>@dev.kord.core.cache.data.PresenceData(){}[0]
final val dev.kord.core.cache.data/id // dev.kord.core.cache.data/id|@dev.kord.core.cache.data.VoiceStateData{}id[0]
    final fun (dev.kord.core.cache.data/VoiceStateData).<get-id>(): kotlin/String // dev.kord.core.cache.data/id.<get-id>|<get-id>@dev.kord.core.cache.data.VoiceStateData(){}[0]
final val dev.kord.core.entity/effectiveName // dev.kord.core.entity/effectiveName|@dev.kord.core.entity.User{}effectiveName[0]
    final fun (dev.kord.core.entity/User).<get-effectiveName>(): kotlin/String // dev.kord.core.entity/effectiveName.<get-effectiveName>|<get-effectiveName>@dev.kord.core.entity.User(){}[0]
final val dev.kord.core/kordLogger // dev.kord.core/kordLogger|{}kordLogger[0]
    final fun <get-kordLogger>(): mu/KLogger // dev.kord.core/kordLogger.<get-kordLogger>|<get-kordLogger>(){}[0]

final fun (dev.kord.cache.api/DataCache).dev.kord.core.cache/createView(): dev.kord.core.cache/DataCacheView // dev.kord.core.cache/createView|createView@dev.kord.cache.api.DataCache(){}[0]
final fun (dev.kord.common.entity/DiscordChannel).dev.kord.core.cache.data/toData(): dev.kord.core.cache.data/ChannelData // dev.kord.core.cache.data/toData|toData@dev.kord.common.entity.DiscordChannel(){}[0]
final fun (dev.kord.common.entity/DiscordEmoji).dev.kord.core.cache.data/toData(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.cache.data/EmojiData // dev.kord.core.cache.data/toData|toData@dev.kord.common.entity.DiscordEmoji(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
final fun (dev.kord.common.entity/DiscordGuild).dev.kord.core.cache.data/toData(): dev.kord.core.cache.data/GuildData // dev.kord.core.cache.data/toData|toData@dev.kord.common.entity.DiscordGuild(){}[0]
final fun (dev.kord.common.entity/DiscordGuildMember).dev.kord.core.cache.data/toData(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.cache.data/MemberData // dev.kord.core.cache.data/toData|toData@dev.kord.common.entity.DiscordGuildMember(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
final fun (dev.kord.common.entity/DiscordInteractionGuildMember).dev.kord.core.cache.data/toData(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): dev.kord.core.cache.data/MemberData // dev.kord.core.cache.data/toData|toData@dev.kord.common.entity.DiscordInteractionGuildMember(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
final fun (dev.kord.common.entity/DiscordMessage).dev.kord.core.cache.data/toData(): dev.kord.core.cache.data/MessageData // dev.kord.core.cache.data/toData|toData@dev.kord.common.entity.DiscordMessage(){}[0]
final fun (dev.kord.common.entity/DiscordRole).dev.kord.core.cache.data/toData(dev.kord.common.entity/Snowflake): dev.kord.core.cache.data/RoleData // dev.kord.core.cache.data/toData|toData@dev.kord.common.entity.DiscordRole(dev.kord.common.entity.Snowflake){}[0]
final fun (dev.kord.common.entity/DiscordStageInstance).dev.kord.core.cache.data/toData(): dev.kord.core.cache.data/StageInstanceData // dev.kord.core.cache.data/toData|toData@dev.kord.common.entity.DiscordStageInstance(){}[0]
final fun (dev.kord.common.entity/DiscordTemplate).dev.kord.core.cache.data/toData(): dev.kord.core.cache.data/TemplateData // dev.kord.core.cache.data/toData|toData@dev.kord.common.entity.DiscordTemplate(){}[0]
final fun (dev.kord.common.entity/DiscordThreadMember).dev.kord.core.cache.data/toData(dev.kord.common.entity/Snowflake?): dev.kord.core.cache.data/ThreadMemberData // dev.kord.core.cache.data/toData|toData@dev.kord.common.entity.DiscordThreadMember(dev.kord.common.entity.Snowflake?){}[0]
final fun (dev.kord.common.entity/DiscordUser).dev.kord.core.cache.data/toData(): dev.kord.core.cache.data/UserData // dev.kord.core.cache.data/toData|toData@dev.kord.common.entity.DiscordUser(){}[0]
final fun (dev.kord.core.entity.channel/Category).dev.kord.core.live.channel/live(kotlinx.coroutines/CoroutineScope = ...): dev.kord.core.live.channel/LiveCategory // dev.kord.core.live.channel/live|live@dev.kord.core.entity.channel.Category(kotlinx.coroutines.CoroutineScope){}[0]
final fun (dev.kord.core.entity.channel/Channel).dev.kord.core.live.channel/live(kotlinx.coroutines/CoroutineScope = ...): dev.kord.core.live.channel/LiveChannel // dev.kord.core.live.channel/live|live@dev.kord.core.entity.channel.Channel(kotlinx.coroutines.CoroutineScope){}[0]
final fun (dev.kord.core.entity.channel/DmChannel).dev.kord.core.live.channel/live(kotlinx.coroutines/CoroutineScope = ...): dev.kord.core.live.channel/LiveDmChannel // dev.kord.core.live.channel/live|live@dev.kord.core.entity.channel.DmChannel(kotlinx.coroutines.CoroutineScope){}[0]
final fun (dev.kord.core.entity.channel/TopGuildChannel).dev.kord.core.live.channel/live(kotlinx.coroutines/CoroutineScope = ...): dev.kord.core.live.channel/LiveGuildChannel // dev.kord.core.live.channel/live|live@dev.kord.core.entity.channel.TopGuildChannel(kotlinx.coroutines.CoroutineScope){}[0]
final fun (dev.kord.core.entity.channel/TopGuildMessageChannel).dev.kord.core.live.channel/live(kotlinx.coroutines/CoroutineScope = ...): dev.kord.core.live.channel/LiveGuildMessageChannel // dev.kord.core.live.channel/live|live@dev.kord.core.entity.channel.TopGuildMessageChannel(kotlinx.coroutines.CoroutineScope){}[0]
final fun (dev.kord.core.entity.channel/VoiceChannel).dev.kord.core.live.channel/live(kotlinx.coroutines/CoroutineScope = ...): dev.kord.core.live.channel/LiveVoiceChannel // dev.kord.core.live.channel/live|live@dev.kord.core.entity.channel.VoiceChannel(kotlinx.coroutines.CoroutineScope){}[0]
final fun (dev.kord.core.entity/Attachment).dev.kord.core.entity/toRawType(): dev.kord.common.entity/DiscordAttachment // dev.kord.core.entity/toRawType|toRawType@dev.kord.core.entity.Attachment(){}[0]
final fun (dev.kord.core.entity/Guild).dev.kord.core.live/live(kotlinx.coroutines/CoroutineScope = ...): dev.kord.core.live/LiveGuild // dev.kord.core.live/live|live@dev.kord.core.entity.Guild(kotlinx.coroutines.CoroutineScope){}[0]
final fun (dev.kord.core.entity/Member).dev.kord.core.live/live(kotlinx.coroutines/CoroutineScope = ...): dev.kord.core.live/LiveMember // dev.kord.core.live/live|live@dev.kord.core.entity.Member(kotlinx.coroutines.CoroutineScope){}[0]
final fun (dev.kord.core.entity/Role).dev.kord.core.live/live(kotlinx.coroutines/CoroutineScope = ...): dev.kord.core.live/LiveRole // dev.kord.core.live/live|live@dev.kord.core.entity.Role(kotlinx.coroutines.CoroutineScope){}[0]
final fun (dev.kord.core.entity/User).dev.kord.core.live/live(kotlinx.coroutines/CoroutineScope = ...): dev.kord.core.live/LiveUser // dev.kord.core.live/live|live@dev.kord.core.entity.User(kotlinx.coroutines.CoroutineScope){}[0]
final fun (dev.kord.core.live.channel/LiveCategory).dev.kord.core.live.channel/onUpdate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.channel/CategoryUpdateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live.channel/onUpdate|onUpdate@dev.kord.core.live.channel.LiveCategory(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.channel.CategoryUpdateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live.channel/LiveChannel).dev.kord.core.live.channel/onChannelUpdate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.channel/ChannelUpdateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live.channel/onChannelUpdate|onChannelUpdate@dev.kord.core.live.channel.LiveChannel(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.channel.ChannelUpdateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live.channel/LiveChannel).dev.kord.core.live.channel/onGuildUpdate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.guild/GuildUpdateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live.channel/onGuildUpdate|onGuildUpdate@dev.kord.core.live.channel.LiveChannel(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.guild.GuildUpdateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live.channel/LiveChannel).dev.kord.core.live.channel/onMessageCreate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.message/MessageCreateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live.channel/onMessageCreate|onMessageCreate@dev.kord.core.live.channel.LiveChannel(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.message.MessageCreateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live.channel/LiveChannel).dev.kord.core.live.channel/onMessageDelete(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.message/MessageDeleteEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live.channel/onMessageDelete|onMessageDelete@dev.kord.core.live.channel.LiveChannel(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.message.MessageDeleteEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live.channel/LiveChannel).dev.kord.core.live.channel/onMessageUpdate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.message/MessageUpdateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live.channel/onMessageUpdate|onMessageUpdate@dev.kord.core.live.channel.LiveChannel(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.message.MessageUpdateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live.channel/LiveChannel).dev.kord.core.live.channel/onReactionAdd(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.message/ReactionAddEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live.channel/onReactionAdd|onReactionAdd@dev.kord.core.live.channel.LiveChannel(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.message.ReactionAddEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live.channel/LiveChannel).dev.kord.core.live.channel/onReactionRemove(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.message/ReactionRemoveEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live.channel/onReactionRemove|onReactionRemove@dev.kord.core.live.channel.LiveChannel(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.message.ReactionRemoveEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live.channel/LiveChannel).dev.kord.core.live.channel/onReactionRemoveAll(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.message/ReactionRemoveAllEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live.channel/onReactionRemoveAll|onReactionRemoveAll@dev.kord.core.live.channel.LiveChannel(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.message.ReactionRemoveAllEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live.channel/LiveChannel).dev.kord.core.live.channel/onVoiceStateUpdate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.user/VoiceStateUpdateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live.channel/onVoiceStateUpdate|onVoiceStateUpdate@dev.kord.core.live.channel.LiveChannel(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.user.VoiceStateUpdateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live.channel/LiveDmChannel).dev.kord.core.live.channel/onUpdate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.channel/DMChannelUpdateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live.channel/onUpdate|onUpdate@dev.kord.core.live.channel.LiveDmChannel(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.channel.DMChannelUpdateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live.channel/LiveGuildChannel).dev.kord.core.live.channel/onUpdate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.channel/ChannelUpdateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live.channel/onUpdate|onUpdate@dev.kord.core.live.channel.LiveGuildChannel(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.channel.ChannelUpdateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live.channel/LiveGuildMessageChannel).dev.kord.core.live.channel/onUpdate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.channel/ChannelUpdateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live.channel/onUpdate|onUpdate@dev.kord.core.live.channel.LiveGuildMessageChannel(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.channel.ChannelUpdateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live.channel/LiveVoiceChannel).dev.kord.core.live.channel/onUpdate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.channel/VoiceChannelUpdateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live.channel/onUpdate|onUpdate@dev.kord.core.live.channel.LiveVoiceChannel(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.channel.VoiceChannelUpdateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onBanAdd(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.guild/BanAddEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onBanAdd|onBanAdd@dev.kord.core.live.LiveGuild(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.guild.BanAddEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onBanRemove(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.guild/BanRemoveEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onBanRemove|onBanRemove@dev.kord.core.live.LiveGuild(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.guild.BanRemoveEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onChannelCreate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.channel/ChannelCreateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onChannelCreate|onChannelCreate@dev.kord.core.live.LiveGuild(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.channel.ChannelCreateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onChannelDelete(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.channel/ChannelDeleteEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onChannelDelete|onChannelDelete@dev.kord.core.live.LiveGuild(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.channel.ChannelDeleteEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onChannelUpdate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.channel/ChannelUpdateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onChannelUpdate|onChannelUpdate@dev.kord.core.live.LiveGuild(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.channel.ChannelUpdateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onEmojisUpdate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.guild/EmojisUpdateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onEmojisUpdate|onEmojisUpdate@dev.kord.core.live.LiveGuild(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.guild.EmojisUpdateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onGuildCreate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.guild/GuildCreateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onGuildCreate|onGuildCreate@dev.kord.core.live.LiveGuild(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.guild.GuildCreateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onGuildUpdate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.guild/GuildUpdateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onGuildUpdate|onGuildUpdate@dev.kord.core.live.LiveGuild(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.guild.GuildUpdateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onIntegrationsUpdate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.guild/IntegrationsUpdateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onIntegrationsUpdate|onIntegrationsUpdate@dev.kord.core.live.LiveGuild(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.guild.IntegrationsUpdateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onMemberJoin(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.guild/MemberJoinEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onMemberJoin|onMemberJoin@dev.kord.core.live.LiveGuild(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.guild.MemberJoinEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onMemberLeave(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.guild/MemberLeaveEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onMemberLeave|onMemberLeave@dev.kord.core.live.LiveGuild(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.guild.MemberLeaveEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onMemberUpdate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.guild/MemberUpdateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onMemberUpdate|onMemberUpdate@dev.kord.core.live.LiveGuild(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.guild.MemberUpdateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onMessageCreate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.message/MessageCreateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onMessageCreate|onMessageCreate@dev.kord.core.live.LiveGuild(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.message.MessageCreateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onMessageDelete(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.message/MessageDeleteEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onMessageDelete|onMessageDelete@dev.kord.core.live.LiveGuild(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.message.MessageDeleteEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onMessageUpdate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.message/MessageUpdateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onMessageUpdate|onMessageUpdate@dev.kord.core.live.LiveGuild(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.message.MessageUpdateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onPresenceUpdate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.user/PresenceUpdateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onPresenceUpdate|onPresenceUpdate@dev.kord.core.live.LiveGuild(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.user.PresenceUpdateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onReactionAdd(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.message/ReactionAddEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onReactionAdd|onReactionAdd@dev.kord.core.live.LiveGuild(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.message.ReactionAddEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onReactionRemove(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.message/ReactionRemoveEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onReactionRemove|onReactionRemove@dev.kord.core.live.LiveGuild(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.message.ReactionRemoveEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onReactionRemoveAll(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.message/ReactionRemoveAllEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onReactionRemoveAll|onReactionRemoveAll@dev.kord.core.live.LiveGuild(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.message.ReactionRemoveAllEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onRoleCreate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.role/RoleCreateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onRoleCreate|onRoleCreate@dev.kord.core.live.LiveGuild(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.role.RoleCreateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onRoleDelete(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.role/RoleDeleteEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onRoleDelete|onRoleDelete@dev.kord.core.live.LiveGuild(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.role.RoleDeleteEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onRoleUpdate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.role/RoleUpdateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onRoleUpdate|onRoleUpdate@dev.kord.core.live.LiveGuild(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.role.RoleUpdateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onVoiceServerUpdate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.guild/VoiceServerUpdateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onVoiceServerUpdate|onVoiceServerUpdate@dev.kord.core.live.LiveGuild(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.guild.VoiceServerUpdateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onVoiceStateUpdate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.user/VoiceStateUpdateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onVoiceStateUpdate|onVoiceStateUpdate@dev.kord.core.live.LiveGuild(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.user.VoiceStateUpdateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onWebhookUpdate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.guild/WebhookUpdateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onWebhookUpdate|onWebhookUpdate@dev.kord.core.live.LiveGuild(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.guild.WebhookUpdateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveMember).dev.kord.core.live/onUpdate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.guild/MemberUpdateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onUpdate|onUpdate@dev.kord.core.live.LiveMember(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.guild.MemberUpdateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveMessage).dev.kord.core.live/onReactionAdd(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.message/ReactionAddEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onReactionAdd|onReactionAdd@dev.kord.core.live.LiveMessage(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.message.ReactionAddEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveMessage).dev.kord.core.live/onReactionRemove(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.message/ReactionRemoveEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onReactionRemove|onReactionRemove@dev.kord.core.live.LiveMessage(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.message.ReactionRemoveEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveMessage).dev.kord.core.live/onReactionRemoveAll(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.message/ReactionRemoveAllEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onReactionRemoveAll|onReactionRemoveAll@dev.kord.core.live.LiveMessage(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.message.ReactionRemoveAllEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveMessage).dev.kord.core.live/onUpdate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.message/MessageUpdateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onUpdate|onUpdate@dev.kord.core.live.LiveMessage(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.message.MessageUpdateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveRole).dev.kord.core.live/onUpdate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.role/RoleUpdateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onUpdate|onUpdate@dev.kord.core.live.LiveRole(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.role.RoleUpdateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.live/LiveUser).dev.kord.core.live/onUpdate(kotlinx.coroutines/CoroutineScope = ..., kotlin.coroutines/SuspendFunction1<dev.kord.core.event.user/UserUpdateEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onUpdate|onUpdate@dev.kord.core.live.LiveUser(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.user.UserUpdateEvent,kotlin.Unit>){}[0]
final fun (dev.kord.core.supplier/EntitySupplier).dev.kord.core.supplier/withFallback(dev.kord.core.supplier/EntitySupplier): dev.kord.core.supplier/EntitySupplier // dev.kord.core.supplier/withFallback|withFallback@dev.kord.core.supplier.EntitySupplier(dev.kord.core.supplier.EntitySupplier){}[0]
final fun (dev.kord.gateway/Intents.Builder).dev.kord.core/enableEvent(kotlin.reflect/KClass<out dev.kord.core.event/Event>) // dev.kord.core/enableEvent|enableEvent@dev.kord.gateway.Intents.Builder(kotlin.reflect.KClass<out|dev.kord.core.event.Event>){}[0]
final fun (dev.kord.gateway/Intents.Builder).dev.kord.core/enableEvents(kotlin.collections/Iterable<kotlin.reflect/KClass<out dev.kord.core.event/Event>>) // dev.kord.core/enableEvents|enableEvents@dev.kord.gateway.Intents.Builder(kotlin.collections.Iterable<kotlin.reflect.KClass<out|dev.kord.core.event.Event>>){}[0]
final fun (dev.kord.gateway/Intents.Builder).dev.kord.core/enableEvents(kotlin/Array<out kotlin.reflect/KClass<out dev.kord.core.event/Event>>...) // dev.kord.core/enableEvents|enableEvents@dev.kord.gateway.Intents.Builder(kotlin.Array<out|kotlin.reflect.KClass<out|dev.kord.core.event.Event>>...){}[0]
final fun (dev.kord.rest.builder.component/ButtonBuilder).dev.kord.core.builder.components/emoji(dev.kord.core.entity/GuildEmoji) // dev.kord.core.builder.components/emoji|emoji@dev.kord.rest.builder.component.ButtonBuilder(dev.kord.core.entity.GuildEmoji){}[0]
final fun (dev.kord.rest.builder.component/ButtonBuilder).dev.kord.core.builder.components/emoji(dev.kord.core.entity/ReactionEmoji.Custom) // dev.kord.core.builder.components/emoji|emoji@dev.kord.rest.builder.component.ButtonBuilder(dev.kord.core.entity.ReactionEmoji.Custom){}[0]
final fun (dev.kord.rest.builder.component/ButtonBuilder).dev.kord.core.builder.components/emoji(dev.kord.core.entity/ReactionEmoji.Unicode) // dev.kord.core.builder.components/emoji|emoji@dev.kord.rest.builder.component.ButtonBuilder(dev.kord.core.entity.ReactionEmoji.Unicode){}[0]
final fun <#A: kotlin/Any> (dev.kord.cache.api/QueryBuilder<#A>).dev.kord.core.cache/idEq(kotlin.reflect/KProperty1<#A, dev.kord.common.entity.optional/Optional<kotlin/String>>, kotlin/String?) // dev.kord.core.cache/idEq|idEq@dev.kord.cache.api.QueryBuilder<0:0>(kotlin.reflect.KProperty1<0:0,dev.kord.common.entity.optional.Optional<kotlin.String>>;kotlin.String?){0ยง<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (dev.kord.cache.api/QueryBuilder<#A>).dev.kord.core.cache/idEq(kotlin.reflect/KProperty1<#A, dev.kord.common.entity.optional/OptionalSnowflake>, dev.kord.common.entity/Snowflake?) // dev.kord.core.cache/idEq|idEq@dev.kord.cache.api.QueryBuilder<0:0>(kotlin.reflect.KProperty1<0:0,dev.kord.common.entity.optional.OptionalSnowflake>;dev.kord.common.entity.Snowflake?){0ยง<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (dev.kord.cache.api/QueryBuilder<#A>).dev.kord.core.cache/idEq(kotlin.reflect/KProperty1<#A, dev.kord.common.entity.optional/OptionalSnowflake?>, dev.kord.common.entity/Snowflake?) // dev.kord.core.cache/idEq|idEq@dev.kord.cache.api.QueryBuilder<0:0>(kotlin.reflect.KProperty1<0:0,dev.kord.common.entity.optional.OptionalSnowflake?>;dev.kord.common.entity.Snowflake?){0ยง<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (dev.kord.cache.api/QueryBuilder<#A>).dev.kord.core.cache/idEq(kotlin.reflect/KProperty1<#A, dev.kord.common.entity/Snowflake?>, dev.kord.common.entity/Snowflake?) // dev.kord.core.cache/idEq|idEq@dev.kord.cache.api.QueryBuilder<0:0>(kotlin.reflect.KProperty1<0:0,dev.kord.common.entity.Snowflake?>;dev.kord.common.entity.Snowflake?){0ยง<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (dev.kord.cache.api/QueryBuilder<#A>).dev.kord.core.cache/idEq(kotlin.reflect/KProperty1<#A, kotlin/Boolean?>, kotlin/Boolean?) // dev.kord.core.cache/idEq|idEq@dev.kord.cache.api.QueryBuilder<0:0>(kotlin.reflect.KProperty1<0:0,kotlin.Boolean?>;kotlin.Boolean?){0ยง<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (dev.kord.cache.api/QueryBuilder<#A>).dev.kord.core.cache/idEq(kotlin.reflect/KProperty1<#A, kotlin/String?>, kotlin/String?) // dev.kord.core.cache/idEq|idEq@dev.kord.cache.api.QueryBuilder<0:0>(kotlin.reflect.KProperty1<0:0,kotlin.String?>;kotlin.String?){0ยง<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (dev.kord.cache.api/QueryBuilder<#A>).dev.kord.core.cache/idGt(kotlin.reflect/KProperty1<#A, dev.kord.common.entity/Snowflake>, dev.kord.common.entity/Snowflake) // dev.kord.core.cache/idGt|idGt@dev.kord.cache.api.QueryBuilder<0:0>(kotlin.reflect.KProperty1<0:0,dev.kord.common.entity.Snowflake>;dev.kord.common.entity.Snowflake){0ยง<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (dev.kord.cache.api/QueryBuilder<#A>).dev.kord.core.cache/idLt(kotlin.reflect/KProperty1<#A, dev.kord.common.entity/Snowflake>, dev.kord.common.entity/Snowflake) // dev.kord.core.cache/idLt|idLt@dev.kord.cache.api.QueryBuilder<0:0>(kotlin.reflect.KProperty1<0:0,dev.kord.common.entity.Snowflake>;dev.kord.common.entity.Snowflake){0ยง<kotlin.Any>}[0]
final fun dev.kord.core.behavior.channel/CategoryBehavior(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.behavior.channel/CategoryBehavior // dev.kord.core.behavior.channel/CategoryBehavior|CategoryBehavior(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
final fun dev.kord.core.behavior.channel/ChannelBehavior(dev.kord.common.entity/Snowflake, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.behavior.channel/ChannelBehavior // dev.kord.core.behavior.channel/ChannelBehavior|ChannelBehavior(dev.kord.common.entity.Snowflake;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
final fun dev.kord.core.behavior.channel/GuildChannelBehavior(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.behavior.channel/GuildChannelBehavior // dev.kord.core.behavior.channel/GuildChannelBehavior|GuildChannelBehavior(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
final fun dev.kord.core.behavior.channel/MessageChannelBehavior(dev.kord.common.entity/Snowflake, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.behavior.channel/MessageChannelBehavior // dev.kord.core.behavior.channel/MessageChannelBehavior|MessageChannelBehavior(dev.kord.common.entity.Snowflake;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
final fun dev.kord.core.behavior.channel/NewsChannelBehavior(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.behavior.channel/NewsChannelBehavior // dev.kord.core.behavior.channel/NewsChannelBehavior|NewsChannelBehavior(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
final fun dev.kord.core.behavior.channel/StageChannelBehavior(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...): dev.kord.core.behavior.channel/StageChannelBehavior // dev.kord.core.behavior.channel/StageChannelBehavior|StageChannelBehavior(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]
final fun dev.kord.core.behavior.channel/TextChannelBehavior(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.behavior.channel/TextChannelBehavior // dev.kord.core.behavior.channel/TextChannelBehavior|TextChannelBehavior(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
final fun dev.kord.core.behavior.channel/VoiceChannelBehavior(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.behavior.channel/VoiceChannelBehavior // dev.kord.core.behavior.channel/VoiceChannelBehavior|VoiceChannelBehavior(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
final fun dev.kord.core.behavior.interaction.followup/EphemeralFollowupMessageBehavior(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier): dev.kord.core.behavior.interaction.followup/EphemeralFollowupMessageBehavior // dev.kord.core.behavior.interaction.followup/EphemeralFollowupMessageBehavior|EphemeralFollowupMessageBehavior(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]
final fun dev.kord.core.behavior.interaction.followup/PublicFollowupMessageBehavior(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier): dev.kord.core.behavior.interaction.followup/PublicFollowupMessageBehavior // dev.kord.core.behavior.interaction.followup/PublicFollowupMessageBehavior|PublicFollowupMessageBehavior(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]
final fun dev.kord.core.behavior.interaction.response/DeferredEphemeralMessageInteractionResponseBehavior(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...): dev.kord.core.behavior.interaction.response/DeferredEphemeralMessageInteractionResponseBehavior // dev.kord.core.behavior.interaction.response/DeferredEphemeralMessageInteractionResponseBehavior|DeferredEphemeralMessageInteractionResponseBehavior(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]
final fun dev.kord.core.behavior.interaction.response/DeferredPublicMessageInteractionResponseBehavior(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...): dev.kord.core.behavior.interaction.response/DeferredPublicMessageInteractionResponseBehavior // dev.kord.core.behavior.interaction.response/DeferredPublicMessageInteractionResponseBehavior|DeferredPublicMessageInteractionResponseBehavior(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]
final fun dev.kord.core.behavior.interaction.response/EphemeralMessageInteractionResponseBehavior(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...): dev.kord.core.behavior.interaction.response/EphemeralMessageInteractionResponseBehavior // dev.kord.core.behavior.interaction.response/EphemeralMessageInteractionResponseBehavior|EphemeralMessageInteractionResponseBehavior(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]
final fun dev.kord.core.behavior.interaction.response/FollowupPermittingInteractionResponseBehavior(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...): dev.kord.core.behavior.interaction.response/FollowupPermittingInteractionResponseBehavior // dev.kord.core.behavior.interaction.response/FollowupPermittingInteractionResponseBehavior|FollowupPermittingInteractionResponseBehavior(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]
final fun dev.kord.core.behavior.interaction.response/PopupInteractionResponseBehavior(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...): dev.kord.core.behavior.interaction.response/PopupInteractionResponseBehavior // dev.kord.core.behavior.interaction.response/PopupInteractionResponseBehavior|PopupInteractionResponseBehavior(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]
final fun dev.kord.core.behavior.interaction.response/PublicMessageInteractionResponseBehavior(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...): dev.kord.core.behavior.interaction.response/PublicMessageInteractionResponseBehavior // dev.kord.core.behavior.interaction.response/PublicMessageInteractionResponseBehavior|PublicMessageInteractionResponseBehavior(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]
final fun dev.kord.core.behavior.interaction/ActionInteractionBehavior(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.behavior.interaction/ActionInteractionBehavior // dev.kord.core.behavior.interaction/ActionInteractionBehavior|ActionInteractionBehavior(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
final fun dev.kord.core.behavior.interaction/ComponentInteractionBehavior(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.behavior.interaction/ComponentInteractionBehavior // dev.kord.core.behavior.interaction/ComponentInteractionBehavior|ComponentInteractionBehavior(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
final fun dev.kord.core.behavior.interaction/GuildInteractionBehavior(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...): dev.kord.core.behavior.interaction/GuildInteractionBehavior // dev.kord.core.behavior.interaction/GuildInteractionBehavior|GuildInteractionBehavior(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]
final fun dev.kord.core.behavior/GlobalApplicationCommandBehavior(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.rest.service/InteractionService): dev.kord.core.behavior/GlobalApplicationCommandBehavior // dev.kord.core.behavior/GlobalApplicationCommandBehavior|GlobalApplicationCommandBehavior(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.rest.service.InteractionService){}[0]
final fun dev.kord.core.behavior/GuildApplicationCommandBehavior(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.rest.service/InteractionService): dev.kord.core.behavior/GuildApplicationCommandBehavior // dev.kord.core.behavior/GuildApplicationCommandBehavior|GuildApplicationCommandBehavior(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.rest.service.InteractionService){}[0]
final fun dev.kord.core.behavior/GuildBehavior(dev.kord.common.entity/Snowflake, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.behavior/GuildBehavior // dev.kord.core.behavior/GuildBehavior|GuildBehavior(dev.kord.common.entity.Snowflake;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
final fun dev.kord.core.behavior/MemberBehavior(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.behavior/MemberBehavior // dev.kord.core.behavior/MemberBehavior|MemberBehavior(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
final fun dev.kord.core.behavior/MessageBehavior(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.behavior/MessageBehavior // dev.kord.core.behavior/MessageBehavior|MessageBehavior(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
final fun dev.kord.core.behavior/RoleBehavior(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.behavior/RoleBehavior // dev.kord.core.behavior/RoleBehavior|RoleBehavior(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
final fun dev.kord.core.behavior/StickerBehavior(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier): dev.kord.core.behavior/StickerBehavior // dev.kord.core.behavior/StickerBehavior|StickerBehavior(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]
final fun dev.kord.core.behavior/TemplateBehavior(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord): dev.kord.core.behavior/TemplateBehavior // dev.kord.core.behavior/TemplateBehavior|TemplateBehavior(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord){}[0]
final fun dev.kord.core.behavior/ThreadMemberBehavior(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...): dev.kord.core.behavior/ThreadMemberBehavior // dev.kord.core.behavior/ThreadMemberBehavior|ThreadMemberBehavior(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]
final fun dev.kord.core.behavior/UserBehavior(dev.kord.common.entity/Snowflake, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplyStrategy<*> = ...): dev.kord.core.behavior/UserBehavior // dev.kord.core.behavior/UserBehavior|UserBehavior(dev.kord.common.entity.Snowflake;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplyStrategy<*>){}[0]
final fun dev.kord.core.cache.data/ApplicationCommandGroupData(dev.kord.core.cache.data/ApplicationCommandOptionData): dev.kord.core.cache.data/ApplicationCommandGroupData // dev.kord.core.cache.data/ApplicationCommandGroupData|ApplicationCommandGroupData(dev.kord.core.cache.data.ApplicationCommandOptionData){}[0]
final fun dev.kord.core.cache.data/ApplicationCommandParameterData(dev.kord.core.cache.data/ApplicationCommandOptionData): dev.kord.core.cache.data/ApplicationCommandParameterData // dev.kord.core.cache.data/ApplicationCommandParameterData|ApplicationCommandParameterData(dev.kord.core.cache.data.ApplicationCommandOptionData){}[0]
final fun dev.kord.core.cache.data/ApplicationCommandSubCommandData(dev.kord.core.cache.data/ApplicationCommandOptionData): dev.kord.core.cache.data/ApplicationCommandSubcommandData // dev.kord.core.cache.data/ApplicationCommandSubCommandData|ApplicationCommandSubCommandData(dev.kord.core.cache.data.ApplicationCommandOptionData){}[0]
final fun dev.kord.core.entity.application/GlobalApplicationCommand(dev.kord.core.cache.data/ApplicationCommandData, dev.kord.rest.service/InteractionService): dev.kord.core.entity.application/GlobalApplicationCommand // dev.kord.core.entity.application/GlobalApplicationCommand|GlobalApplicationCommand(dev.kord.core.cache.data.ApplicationCommandData;dev.kord.rest.service.InteractionService){}[0]
final fun dev.kord.core.entity.application/GuildApplicationCommand(dev.kord.core.cache.data/ApplicationCommandData, dev.kord.rest.service/InteractionService): dev.kord.core.entity.application/GuildApplicationCommand // dev.kord.core.entity.application/GuildApplicationCommand|GuildApplicationCommand(dev.kord.core.cache.data.ApplicationCommandData;dev.kord.rest.service.InteractionService){}[0]
final fun dev.kord.core.entity.automoderation/AutoModerationRule(dev.kord.core.cache.data/AutoModerationRuleData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...): dev.kord.core.entity.automoderation/AutoModerationRule // dev.kord.core.entity.automoderation/AutoModerationRule|AutoModerationRule(dev.kord.core.cache.data.AutoModerationRuleData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]
final fun dev.kord.core.entity.component/Component(dev.kord.core.cache.data/ComponentData): dev.kord.core.entity.component/Component // dev.kord.core.entity.component/Component|Component(dev.kord.core.cache.data.ComponentData){}[0]
final fun dev.kord.core.entity.interaction.followup/FollowupMessage(dev.kord.core.entity/Message, dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.core/Kord): dev.kord.core.entity.interaction.followup/FollowupMessage // dev.kord.core.entity.interaction.followup/FollowupMessage|FollowupMessage(dev.kord.core.entity.Message;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.core.Kord){}[0]
final fun dev.kord.core.entity.interaction/ComponentInteraction(dev.kord.core.cache.data/InteractionData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...): dev.kord.core.entity.interaction/ComponentInteraction // dev.kord.core.entity.interaction/ComponentInteraction|ComponentInteraction(dev.kord.core.cache.data.InteractionData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]
final fun dev.kord.core.entity.interaction/GlobalApplicationCommandInteraction(dev.kord.core.cache.data/InteractionData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...): dev.kord.core.entity.interaction/GlobalApplicationCommandInteraction // dev.kord.core.entity.interaction/GlobalApplicationCommandInteraction|GlobalApplicationCommandInteraction(dev.kord.core.cache.data.InteractionData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]
final fun dev.kord.core.entity.interaction/GuildApplicationCommandInteraction(dev.kord.core.cache.data/InteractionData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...): dev.kord.core.entity.interaction/GuildApplicationCommandInteraction // dev.kord.core.entity.interaction/GuildApplicationCommandInteraction|GuildApplicationCommandInteraction(dev.kord.core.cache.data.InteractionData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]
final fun dev.kord.core.entity.interaction/InteractionCommand(dev.kord.core.cache.data/ApplicationInteractionData, dev.kord.core/Kord): dev.kord.core.entity.interaction/InteractionCommand // dev.kord.core.entity.interaction/InteractionCommand|InteractionCommand(dev.kord.core.cache.data.ApplicationInteractionData;dev.kord.core.Kord){}[0]
final fun dev.kord.core.entity.interaction/ModalSubmitInteraction(dev.kord.core.cache.data/InteractionData, dev.kord.core/Kord, dev.kord.core.supplier/EntitySupplier = ...): dev.kord.core.entity.interaction/ModalSubmitInteraction // dev.kord.core.entity.interaction/ModalSubmitInteraction|ModalSubmitInteraction(dev.kord.core.cache.data.InteractionData;dev.kord.core.Kord;dev.kord.core.supplier.EntitySupplier){}[0]
final fun dev.kord.core.entity.interaction/OptionValue(dev.kord.common.entity/CommandArgument<*>, dev.kord.core.entity.interaction/ResolvedObjects?): dev.kord.core.entity.interaction/OptionValue<*> // dev.kord.core.entity.interaction/OptionValue|OptionValue(dev.kord.common.entity.CommandArgument<*>;dev.kord.core.entity.interaction.ResolvedObjects?){}[0]
final fun dev.kord.core/logCaughtThrowable(kotlin/Throwable) // dev.kord.core/logCaughtThrowable|logCaughtThrowable(kotlin.Throwable){}[0]
final inline fun (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/getAuditLogEntries(kotlin/Function1<dev.kord.rest.builder.auditlog/AuditLogGetRequestBuilder, kotlin/Unit> = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/AuditLogEntry> // dev.kord.core.behavior/getAuditLogEntries|getAuditLogEntries@dev.kord.core.behavior.GuildBehavior(kotlin.Function1<dev.kord.rest.builder.auditlog.AuditLogGetRequestBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/requestMembers(kotlin/Function1<dev.kord.gateway.builder/RequestGuildMembersBuilder, kotlin/Unit> = ...): kotlinx.coroutines.flow/Flow<dev.kord.core.event.guild/MembersChunkEvent> // dev.kord.core.behavior/requestMembers|requestMembers@dev.kord.core.behavior.GuildBehavior(kotlin.Function1<dev.kord.gateway.builder.RequestGuildMembersBuilder,kotlin.Unit>){}[0]
final inline fun (dev.kord.core.entity.channel/Category).dev.kord.core.live.channel/live(kotlinx.coroutines/CoroutineScope = ..., kotlin/Function1<dev.kord.core.live.channel/LiveCategory, kotlin/Unit>): dev.kord.core.live.channel/LiveCategory // dev.kord.core.live.channel/live|live@dev.kord.core.entity.channel.Category(kotlinx.coroutines.CoroutineScope;kotlin.Function1<dev.kord.core.live.channel.LiveCategory,kotlin.Unit>){}[0]
final inline fun (dev.kord.core.entity.channel/Channel).dev.kord.core.live.channel/live(kotlinx.coroutines/CoroutineScope = ..., kotlin/Function1<dev.kord.core.live.channel/LiveChannel, kotlin/Unit>): dev.kord.core.live.channel/LiveChannel // dev.kord.core.live.channel/live|live@dev.kord.core.entity.channel.Channel(kotlinx.coroutines.CoroutineScope;kotlin.Function1<dev.kord.core.live.channel.LiveChannel,kotlin.Unit>){}[0]
final inline fun (dev.kord.core.entity.channel/DmChannel).dev.kord.core.live.channel/live(kotlinx.coroutines/CoroutineScope = ..., kotlin/Function1<dev.kord.core.live.channel/LiveDmChannel, kotlin/Unit>): dev.kord.core.live.channel/LiveDmChannel // dev.kord.core.live.channel/live|live@dev.kord.core.entity.channel.DmChannel(kotlinx.coroutines.CoroutineScope;kotlin.Function1<dev.kord.core.live.channel.LiveDmChannel,kotlin.Unit>){}[0]
final inline fun (dev.kord.core.entity.channel/TopGuildChannel).dev.kord.core.live.channel/live(kotlinx.coroutines/CoroutineScope = ..., kotlin/Function1<dev.kord.core.live.channel/LiveGuildChannel, kotlin/Unit>): dev.kord.core.live.channel/LiveGuildChannel // dev.kord.core.live.channel/live|live@dev.kord.core.entity.channel.TopGuildChannel(kotlinx.coroutines.CoroutineScope;kotlin.Function1<dev.kord.core.live.channel.LiveGuildChannel,kotlin.Unit>){}[0]
final inline fun (dev.kord.core.entity.channel/TopGuildMessageChannel).dev.kord.core.live.channel/live(kotlinx.coroutines/CoroutineScope = ..., kotlin/Function1<dev.kord.core.live.channel/LiveGuildMessageChannel, kotlin/Unit>): dev.kord.core.live.channel/LiveGuildMessageChannel // dev.kord.core.live.channel/live|live@dev.kord.core.entity.channel.TopGuildMessageChannel(kotlinx.coroutines.CoroutineScope;kotlin.Function1<dev.kord.core.live.channel.LiveGuildMessageChannel,kotlin.Unit>){}[0]
final inline fun (dev.kord.core.entity.channel/VoiceChannel).dev.kord.core.live.channel/live(kotlinx.coroutines/CoroutineScope = ..., kotlin/Function1<dev.kord.core.live.channel/LiveVoiceChannel, kotlin/Unit>): dev.kord.core.live.channel/LiveVoiceChannel // dev.kord.core.live.channel/live|live@dev.kord.core.entity.channel.VoiceChannel(kotlinx.coroutines.CoroutineScope;kotlin.Function1<dev.kord.core.live.channel.LiveVoiceChannel,kotlin.Unit>){}[0]
final inline fun (dev.kord.core.entity/Guild).dev.kord.core.live/live(kotlinx.coroutines/CoroutineScope = ..., kotlin/Function1<dev.kord.core.live/LiveGuild, kotlin/Unit>): dev.kord.core.live/LiveGuild // dev.kord.core.live/live|live@dev.kord.core.entity.Guild(kotlinx.coroutines.CoroutineScope;kotlin.Function1<dev.kord.core.live.LiveGuild,kotlin.Unit>){}[0]
final inline fun (dev.kord.core.entity/Member).dev.kord.core.live/live(kotlinx.coroutines/CoroutineScope = ..., kotlin/Function1<dev.kord.core.live/LiveMember, kotlin/Unit>): dev.kord.core.live/LiveMember // dev.kord.core.live/live|live@dev.kord.core.entity.Member(kotlinx.coroutines.CoroutineScope;kotlin.Function1<dev.kord.core.live.LiveMember,kotlin.Unit>){}[0]
final inline fun (dev.kord.core.entity/Role).dev.kord.core.live/live(kotlinx.coroutines/CoroutineScope = ..., kotlin/Function1<dev.kord.core.live/LiveRole, kotlin/Unit>): dev.kord.core.live/LiveRole // dev.kord.core.live/live|live@dev.kord.core.entity.Role(kotlinx.coroutines.CoroutineScope;kotlin.Function1<dev.kord.core.live.LiveRole,kotlin.Unit>){}[0]
final inline fun (dev.kord.core.entity/User).dev.kord.core.live/live(kotlinx.coroutines/CoroutineScope = ..., kotlin/Function1<dev.kord.core.live/LiveUser, kotlin/Unit>): dev.kord.core.live/LiveUser // dev.kord.core.live/live|live@dev.kord.core.entity.User(kotlinx.coroutines.CoroutineScope;kotlin.Function1<dev.kord.core.live.LiveUser,kotlin.Unit>){}[0]
final inline fun (dev.kord.core.live.channel/LiveChannel).dev.kord.core.live.channel/onReactionAdd(dev.kord.core.entity/ReactionEmoji, kotlinx.coroutines/CoroutineScope = ..., crossinline kotlin.coroutines/SuspendFunction1<dev.kord.core.event.message/ReactionAddEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live.channel/onReactionAdd|onReactionAdd@dev.kord.core.live.channel.LiveChannel(dev.kord.core.entity.ReactionEmoji;kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.message.ReactionAddEvent,kotlin.Unit>){}[0]
final inline fun (dev.kord.core.live.channel/LiveChannel).dev.kord.core.live.channel/onReactionRemove(dev.kord.core.entity/ReactionEmoji, kotlinx.coroutines/CoroutineScope = ..., crossinline kotlin.coroutines/SuspendFunction1<dev.kord.core.event.message/ReactionRemoveEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live.channel/onReactionRemove|onReactionRemove@dev.kord.core.live.channel.LiveChannel(dev.kord.core.entity.ReactionEmoji;kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.message.ReactionRemoveEvent,kotlin.Unit>){}[0]
final inline fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onReactionAdd(dev.kord.core.entity/ReactionEmoji, kotlinx.coroutines/CoroutineScope = ..., crossinline kotlin.coroutines/SuspendFunction1<dev.kord.core.event.message/ReactionAddEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onReactionAdd|onReactionAdd@dev.kord.core.live.LiveGuild(dev.kord.core.entity.ReactionEmoji;kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.message.ReactionAddEvent,kotlin.Unit>){}[0]
final inline fun (dev.kord.core.live/LiveGuild).dev.kord.core.live/onReactionRemove(dev.kord.core.entity/ReactionEmoji, kotlinx.coroutines/CoroutineScope = ..., crossinline kotlin.coroutines/SuspendFunction1<dev.kord.core.event.message/ReactionRemoveEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onReactionRemove|onReactionRemove@dev.kord.core.live.LiveGuild(dev.kord.core.entity.ReactionEmoji;kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.message.ReactionRemoveEvent,kotlin.Unit>){}[0]
final inline fun (dev.kord.core.live/LiveMessage).dev.kord.core.live/onReactionAdd(dev.kord.core.entity/ReactionEmoji, kotlinx.coroutines/CoroutineScope = ..., crossinline kotlin.coroutines/SuspendFunction1<dev.kord.core.event.message/ReactionAddEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onReactionAdd|onReactionAdd@dev.kord.core.live.LiveMessage(dev.kord.core.entity.ReactionEmoji;kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.message.ReactionAddEvent,kotlin.Unit>){}[0]
final inline fun (dev.kord.core.live/LiveMessage).dev.kord.core.live/onReactionRemove(dev.kord.core.entity/ReactionEmoji, kotlinx.coroutines/CoroutineScope = ..., crossinline kotlin.coroutines/SuspendFunction1<dev.kord.core.event.message/ReactionRemoveEvent, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/onReactionRemove|onReactionRemove@dev.kord.core.live.LiveMessage(dev.kord.core.entity.ReactionEmoji;kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<dev.kord.core.event.message.ReactionRemoveEvent,kotlin.Unit>){}[0]
final inline fun <#A: reified dev.kord.core.event/Event> (dev.kord.core.live/LiveKordEntity).dev.kord.core.live/on(kotlinx.coroutines/CoroutineScope = ..., noinline kotlin.coroutines/SuspendFunction1<#A, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core.live/on|on@dev.kord.core.live.LiveKordEntity(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<0:0,kotlin.Unit>){0ยง<dev.kord.core.event.Event>}[0]
final inline fun <#A: reified dev.kord.core.event/Event> (dev.kord.core/Kord).dev.kord.core/on(kotlinx.coroutines/CoroutineScope = ..., noinline kotlin.coroutines/SuspendFunction1<#A, kotlin/Unit>): kotlinx.coroutines/Job // dev.kord.core/on|on@dev.kord.core.Kord(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<0:0,kotlin.Unit>){0ยง<dev.kord.core.event.Event>}[0]
final inline fun <#A: reified dev.kord.core.event/Event> (dev.kord.gateway/Intents.Builder).dev.kord.core/enableEvent() // dev.kord.core/enableEvent|enableEvent@dev.kord.gateway.Intents.Builder(){0ยง<dev.kord.core.event.Event>}[0]
final suspend fun (dev.kord.core.behavior.channel/CategoryBehavior).dev.kord.core.behavior.channel/edit(kotlin/Function1<dev.kord.rest.builder.channel/CategoryModifyBuilder, kotlin/Unit>): dev.kord.core.entity.channel/Category // dev.kord.core.behavior.channel/edit|edit@dev.kord.core.behavior.channel.CategoryBehavior(kotlin.Function1<dev.kord.rest.builder.channel.CategoryModifyBuilder,kotlin.Unit>){}[0]
final suspend fun (dev.kord.core.behavior.channel/StageChannelBehavior).dev.kord.core.behavior.channel/edit(kotlin/Function1<dev.kord.rest.builder.channel/StageVoiceChannelModifyBuilder, kotlin/Unit>): dev.kord.core.entity.channel/StageChannel // dev.kord.core.behavior.channel/edit|edit@dev.kord.core.behavior.channel.StageChannelBehavior(kotlin.Function1<dev.kord.rest.builder.channel.StageVoiceChannelModifyBuilder,kotlin.Unit>){}[0]
final suspend fun (dev.kord.core.behavior.interaction/AutoCompleteInteractionBehavior).dev.kord.core.behavior.interaction/suggest(kotlin.collections/List<dev.kord.common.entity/Choice>) // dev.kord.core.behavior.interaction/suggest|suggest@dev.kord.core.behavior.interaction.AutoCompleteInteractionBehavior(kotlin.collections.List<dev.kord.common.entity.Choice>){}[0]
final suspend fun (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/createScheduledEvent(kotlin/String, dev.kord.common.entity/GuildScheduledEventPrivacyLevel, kotlinx.datetime/Instant, dev.kord.common.entity/ScheduledEntityType, kotlin/Function1<dev.kord.rest.builder.guild/ScheduledEventCreateBuilder, kotlin/Unit>): dev.kord.core.entity/GuildScheduledEvent // dev.kord.core.behavior/createScheduledEvent|createScheduledEvent@dev.kord.core.behavior.GuildBehavior(kotlin.String;dev.kord.common.entity.GuildScheduledEventPrivacyLevel;kotlinx.datetime.Instant;dev.kord.common.entity.ScheduledEntityType;kotlin.Function1<dev.kord.rest.builder.guild.ScheduledEventCreateBuilder,kotlin.Unit>){}[0]
final suspend fun (dev.kord.core.behavior/TemplateBehavior).dev.kord.core.behavior/createGuild(kotlin/String, kotlin/Function1<dev.kord.rest.builder.template/GuildFromTemplateCreateBuilder, kotlin/Unit>): dev.kord.core.entity/Guild // dev.kord.core.behavior/createGuild|createGuild@dev.kord.core.behavior.TemplateBehavior(kotlin.String;kotlin.Function1<dev.kord.rest.builder.template.GuildFromTemplateCreateBuilder,kotlin.Unit>){}[0]
final suspend fun (dev.kord.core.behavior/TemplateBehavior).dev.kord.core.behavior/edit(kotlin/Function1<dev.kord.rest.builder.template/GuildTemplateModifyBuilder, kotlin/Unit>): dev.kord.core.entity/Template // dev.kord.core.behavior/edit|edit@dev.kord.core.behavior.TemplateBehavior(kotlin.Function1<dev.kord.rest.builder.template.GuildTemplateModifyBuilder,kotlin.Unit>){}[0]
final suspend fun (dev.kord.core.entity/Message).dev.kord.core.live/live(kotlinx.coroutines/CoroutineScope = ...): dev.kord.core.live/LiveMessage // dev.kord.core.live/live|live@dev.kord.core.entity.Message(kotlinx.coroutines.CoroutineScope){}[0]
final suspend fun (dev.kord.core.entity/Message).dev.kord.core.live/live(kotlinx.coroutines/CoroutineScope = ..., kotlin/Function1<dev.kord.core.live/LiveMessage, kotlin/Unit>): dev.kord.core.live/LiveMessage // dev.kord.core.live/live|live@dev.kord.core.entity.Message(kotlinx.coroutines.CoroutineScope;kotlin.Function1<dev.kord.core.live.LiveMessage,kotlin.Unit>){}[0]
final suspend fun <#A: dev.kord.core.behavior.channel/MessageChannelBehavior, #B: kotlin/Any?> (#A).dev.kord.core.behavior.channel/withTyping(kotlin.coroutines/SuspendFunction1<#A, #B>): #B // dev.kord.core.behavior.channel/withTyping|withTyping@0:0(kotlin.coroutines.SuspendFunction1<0:0,0:1>){0ยง<dev.kord.core.behavior.channel.MessageChannelBehavior>;1ยง<kotlin.Any?>}[0]
final suspend inline fun (dev.kord.core.behavior.automoderation/AutoModerationRuleBehavior).dev.kord.core.behavior.automoderation/edit(kotlin/Function1<dev.kord.rest.builder.automoderation/UntypedAutoModerationRuleModifyBuilder, kotlin/Unit>): dev.kord.core.entity.automoderation/AutoModerationRule // dev.kord.core.behavior.automoderation/edit|edit@dev.kord.core.behavior.automoderation.AutoModerationRuleBehavior(kotlin.Function1<dev.kord.rest.builder.automoderation.UntypedAutoModerationRuleModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.automoderation/KeywordAutoModerationRuleBehavior).dev.kord.core.behavior.automoderation/edit(kotlin/Function1<dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleModifyBuilder, kotlin/Unit>): dev.kord.core.entity.automoderation/KeywordAutoModerationRule // dev.kord.core.behavior.automoderation/edit|edit@dev.kord.core.behavior.automoderation.KeywordAutoModerationRuleBehavior(kotlin.Function1<dev.kord.rest.builder.automoderation.KeywordAutoModerationRuleModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.automoderation/KeywordPresetAutoModerationRuleBehavior).dev.kord.core.behavior.automoderation/edit(kotlin/Function1<dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleModifyBuilder, kotlin/Unit>): dev.kord.core.entity.automoderation/KeywordPresetAutoModerationRule // dev.kord.core.behavior.automoderation/edit|edit@dev.kord.core.behavior.automoderation.KeywordPresetAutoModerationRuleBehavior(kotlin.Function1<dev.kord.rest.builder.automoderation.KeywordPresetAutoModerationRuleModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.automoderation/MentionSpamAutoModerationRuleBehavior).dev.kord.core.behavior.automoderation/edit(kotlin/Function1<dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleModifyBuilder, kotlin/Unit>): dev.kord.core.entity.automoderation/MentionSpamAutoModerationRule // dev.kord.core.behavior.automoderation/edit|edit@dev.kord.core.behavior.automoderation.MentionSpamAutoModerationRuleBehavior(kotlin.Function1<dev.kord.rest.builder.automoderation.MentionSpamAutoModerationRuleModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.automoderation/SpamAutoModerationRuleBehavior).dev.kord.core.behavior.automoderation/edit(kotlin/Function1<dev.kord.rest.builder.automoderation/SpamAutoModerationRuleModifyBuilder, kotlin/Unit>): dev.kord.core.entity.automoderation/SpamAutoModerationRule // dev.kord.core.behavior.automoderation/edit|edit@dev.kord.core.behavior.automoderation.SpamAutoModerationRuleBehavior(kotlin.Function1<dev.kord.rest.builder.automoderation.SpamAutoModerationRuleModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.channel.threads/ThreadChannelBehavior).dev.kord.core.behavior.channel.threads/edit(kotlin/Function1<dev.kord.rest.builder.channel.thread/ThreadModifyBuilder, kotlin/Unit>): dev.kord.core.entity.channel.thread/ThreadChannel // dev.kord.core.behavior.channel.threads/edit|edit@dev.kord.core.behavior.channel.threads.ThreadChannelBehavior(kotlin.Function1<dev.kord.rest.builder.channel.thread.ThreadModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.channel/CategorizableChannelBehavior).dev.kord.core.behavior.channel/createInvite(kotlin/Function1<dev.kord.rest.builder.channel/InviteCreateBuilder, kotlin/Unit> = ...): dev.kord.core.entity/InviteWithMetadata // dev.kord.core.behavior.channel/createInvite|createInvite@dev.kord.core.behavior.channel.CategorizableChannelBehavior(kotlin.Function1<dev.kord.rest.builder.channel.InviteCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.channel/CategorizableChannelBehavior).dev.kord.core.behavior.channel/createWebhook(kotlin/String, kotlin/Function1<dev.kord.rest.builder.webhook/WebhookCreateBuilder, kotlin/Unit> = ...): dev.kord.core.entity/Webhook // dev.kord.core.behavior.channel/createWebhook|createWebhook@dev.kord.core.behavior.channel.CategorizableChannelBehavior(kotlin.String;kotlin.Function1<dev.kord.rest.builder.webhook.WebhookCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.channel/CategoryBehavior).dev.kord.core.behavior.channel/createNewsChannel(kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel/NewsChannelCreateBuilder, kotlin/Unit> = ...): dev.kord.core.entity.channel/NewsChannel // dev.kord.core.behavior.channel/createNewsChannel|createNewsChannel@dev.kord.core.behavior.channel.CategoryBehavior(kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.NewsChannelCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.channel/CategoryBehavior).dev.kord.core.behavior.channel/createStageChannel(kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel/StageChannelCreateBuilder, kotlin/Unit> = ...): dev.kord.core.entity.channel/StageChannel // dev.kord.core.behavior.channel/createStageChannel|createStageChannel@dev.kord.core.behavior.channel.CategoryBehavior(kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.StageChannelCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.channel/CategoryBehavior).dev.kord.core.behavior.channel/createTextChannel(kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel/TextChannelCreateBuilder, kotlin/Unit> = ...): dev.kord.core.entity.channel/TextChannel // dev.kord.core.behavior.channel/createTextChannel|createTextChannel@dev.kord.core.behavior.channel.CategoryBehavior(kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.TextChannelCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.channel/CategoryBehavior).dev.kord.core.behavior.channel/createVoiceChannel(kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel/VoiceChannelCreateBuilder, kotlin/Unit> = ...): dev.kord.core.entity.channel/VoiceChannel // dev.kord.core.behavior.channel/createVoiceChannel|createVoiceChannel@dev.kord.core.behavior.channel.CategoryBehavior(kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.VoiceChannelCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.channel/ForumChannelBehavior).dev.kord.core.behavior.channel/edit(kotlin/Function1<dev.kord.rest.builder.channel/ForumChannelModifyBuilder, kotlin/Unit>): dev.kord.core.entity.channel/ForumChannel // dev.kord.core.behavior.channel/edit|edit@dev.kord.core.behavior.channel.ForumChannelBehavior(kotlin.Function1<dev.kord.rest.builder.channel.ForumChannelModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.channel/MediaChannelBehavior).dev.kord.core.behavior.channel/edit(kotlin/Function1<dev.kord.rest.builder.channel/MediaChannelModifyBuilder, kotlin/Unit>): dev.kord.core.entity.channel/MediaChannel // dev.kord.core.behavior.channel/edit|edit@dev.kord.core.behavior.channel.MediaChannelBehavior(kotlin.Function1<dev.kord.rest.builder.channel.MediaChannelModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.channel/MessageChannelBehavior).dev.kord.core.behavior.channel/createEmbed(kotlin/Function1<dev.kord.rest.builder.message/EmbedBuilder, kotlin/Unit>): dev.kord.core.entity/Message // dev.kord.core.behavior.channel/createEmbed|createEmbed@dev.kord.core.behavior.channel.MessageChannelBehavior(kotlin.Function1<dev.kord.rest.builder.message.EmbedBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.channel/MessageChannelBehavior).dev.kord.core.behavior.channel/createMessage(kotlin/Function1<dev.kord.rest.builder.message.create/UserMessageCreateBuilder, kotlin/Unit>): dev.kord.core.entity/Message // dev.kord.core.behavior.channel/createMessage|createMessage@dev.kord.core.behavior.channel.MessageChannelBehavior(kotlin.Function1<dev.kord.rest.builder.message.create.UserMessageCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.channel/NewsChannelBehavior).dev.kord.core.behavior.channel/edit(kotlin/Function1<dev.kord.rest.builder.channel/NewsChannelModifyBuilder, kotlin/Unit>): dev.kord.core.entity.channel/NewsChannel // dev.kord.core.behavior.channel/edit|edit@dev.kord.core.behavior.channel.NewsChannelBehavior(kotlin.Function1<dev.kord.rest.builder.channel.NewsChannelModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.channel/StageChannelBehavior).dev.kord.core.behavior.channel/createStageInstance(kotlin/String, kotlin/Function1<dev.kord.rest.builder.stage/StageInstanceCreateBuilder, kotlin/Unit> = ...): dev.kord.core.entity/StageInstance // dev.kord.core.behavior.channel/createStageInstance|createStageInstance@dev.kord.core.behavior.channel.StageChannelBehavior(kotlin.String;kotlin.Function1<dev.kord.rest.builder.stage.StageInstanceCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.channel/StageChannelBehavior).dev.kord.core.behavior.channel/editCurrentVoiceState(kotlin/Function1<dev.kord.rest.builder.guild/CurrentVoiceStateModifyBuilder, kotlin/Unit>) // dev.kord.core.behavior.channel/editCurrentVoiceState|editCurrentVoiceState@dev.kord.core.behavior.channel.StageChannelBehavior(kotlin.Function1<dev.kord.rest.builder.guild.CurrentVoiceStateModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.channel/StageChannelBehavior).dev.kord.core.behavior.channel/editVoiceState(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.guild/VoiceStateModifyBuilder, kotlin/Unit>) // dev.kord.core.behavior.channel/editVoiceState|editVoiceState@dev.kord.core.behavior.channel.StageChannelBehavior(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.guild.VoiceStateModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.channel/TextChannelBehavior).dev.kord.core.behavior.channel/edit(kotlin/Function1<dev.kord.rest.builder.channel/TextChannelModifyBuilder, kotlin/Unit>): dev.kord.core.entity.channel/TextChannel // dev.kord.core.behavior.channel/edit|edit@dev.kord.core.behavior.channel.TextChannelBehavior(kotlin.Function1<dev.kord.rest.builder.channel.TextChannelModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.channel/TopGuildChannelBehavior).dev.kord.core.behavior.channel/editMemberPermission(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.channel/ChannelPermissionModifyBuilder, kotlin/Unit>) // dev.kord.core.behavior.channel/editMemberPermission|editMemberPermission@dev.kord.core.behavior.channel.TopGuildChannelBehavior(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.channel.ChannelPermissionModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.channel/TopGuildChannelBehavior).dev.kord.core.behavior.channel/editRolePermission(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.channel/ChannelPermissionModifyBuilder, kotlin/Unit>) // dev.kord.core.behavior.channel/editRolePermission|editRolePermission@dev.kord.core.behavior.channel.TopGuildChannelBehavior(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.channel.ChannelPermissionModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.channel/VoiceChannelBehavior).dev.kord.core.behavior.channel/edit(kotlin/Function1<dev.kord.rest.builder.channel/VoiceChannelModifyBuilder, kotlin/Unit>): dev.kord.core.entity.channel/VoiceChannel // dev.kord.core.behavior.channel/edit|edit@dev.kord.core.behavior.channel.VoiceChannelBehavior(kotlin.Function1<dev.kord.rest.builder.channel.VoiceChannelModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.interaction.followup/EphemeralFollowupMessageBehavior).dev.kord.core.behavior.interaction.followup/edit(kotlin/Function1<dev.kord.rest.builder.message.modify/FollowupMessageModifyBuilder, kotlin/Unit>): dev.kord.core.entity.interaction.followup/EphemeralFollowupMessage // dev.kord.core.behavior.interaction.followup/edit|edit@dev.kord.core.behavior.interaction.followup.EphemeralFollowupMessageBehavior(kotlin.Function1<dev.kord.rest.builder.message.modify.FollowupMessageModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.interaction.followup/FollowupMessageBehavior).dev.kord.core.behavior.interaction.followup/edit(kotlin/Function1<dev.kord.rest.builder.message.modify/FollowupMessageModifyBuilder, kotlin/Unit>): dev.kord.core.entity.interaction.followup/FollowupMessage // dev.kord.core.behavior.interaction.followup/edit|edit@dev.kord.core.behavior.interaction.followup.FollowupMessageBehavior(kotlin.Function1<dev.kord.rest.builder.message.modify.FollowupMessageModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.interaction.followup/PublicFollowupMessageBehavior).dev.kord.core.behavior.interaction.followup/edit(kotlin/Function1<dev.kord.rest.builder.message.modify/FollowupMessageModifyBuilder, kotlin/Unit>): dev.kord.core.entity.interaction.followup/PublicFollowupMessage // dev.kord.core.behavior.interaction.followup/edit|edit@dev.kord.core.behavior.interaction.followup.PublicFollowupMessageBehavior(kotlin.Function1<dev.kord.rest.builder.message.modify.FollowupMessageModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.interaction.response/DeferredEphemeralMessageInteractionResponseBehavior).dev.kord.core.behavior.interaction.response/respond(kotlin/Function1<dev.kord.rest.builder.message.modify/InteractionResponseModifyBuilder, kotlin/Unit>): dev.kord.core.entity.interaction.response/EphemeralMessageInteractionResponse // dev.kord.core.behavior.interaction.response/respond|respond@dev.kord.core.behavior.interaction.response.DeferredEphemeralMessageInteractionResponseBehavior(kotlin.Function1<dev.kord.rest.builder.message.modify.InteractionResponseModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.interaction.response/DeferredMessageInteractionResponseBehavior).dev.kord.core.behavior.interaction.response/respond(kotlin/Function1<dev.kord.rest.builder.message.modify/InteractionResponseModifyBuilder, kotlin/Unit>): dev.kord.core.entity.interaction.response/MessageInteractionResponse // dev.kord.core.behavior.interaction.response/respond|respond@dev.kord.core.behavior.interaction.response.DeferredMessageInteractionResponseBehavior(kotlin.Function1<dev.kord.rest.builder.message.modify.InteractionResponseModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.interaction.response/DeferredPublicMessageInteractionResponseBehavior).dev.kord.core.behavior.interaction.response/respond(kotlin/Function1<dev.kord.rest.builder.message.modify/InteractionResponseModifyBuilder, kotlin/Unit>): dev.kord.core.entity.interaction.response/PublicMessageInteractionResponse // dev.kord.core.behavior.interaction.response/respond|respond@dev.kord.core.behavior.interaction.response.DeferredPublicMessageInteractionResponseBehavior(kotlin.Function1<dev.kord.rest.builder.message.modify.InteractionResponseModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.interaction.response/EphemeralInteractionResponseBehavior).dev.kord.core.behavior.interaction.response/editEphemeralOriginalResponse(kotlin/Function1<dev.kord.rest.builder.message.modify/InteractionResponseModifyBuilder, kotlin/Unit>): dev.kord.core.entity.interaction.response/EphemeralMessageInteractionResponse // dev.kord.core.behavior.interaction.response/editEphemeralOriginalResponse|editEphemeralOriginalResponse@dev.kord.core.behavior.interaction.response.EphemeralInteractionResponseBehavior(kotlin.Function1<dev.kord.rest.builder.message.modify.InteractionResponseModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.interaction.response/EphemeralMessageInteractionResponseBehavior).dev.kord.core.behavior.interaction.response/edit(kotlin/Function1<dev.kord.rest.builder.message.modify/InteractionResponseModifyBuilder, kotlin/Unit>): dev.kord.core.entity.interaction.response/EphemeralMessageInteractionResponse // dev.kord.core.behavior.interaction.response/edit|edit@dev.kord.core.behavior.interaction.response.EphemeralMessageInteractionResponseBehavior(kotlin.Function1<dev.kord.rest.builder.message.modify.InteractionResponseModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.interaction.response/FollowupPermittingInteractionResponseBehavior).dev.kord.core.behavior.interaction.response/createEphemeralFollowup(kotlin/Function1<dev.kord.rest.builder.message.create/FollowupMessageCreateBuilder, kotlin/Unit>): dev.kord.core.entity.interaction.followup/EphemeralFollowupMessage // dev.kord.core.behavior.interaction.response/createEphemeralFollowup|createEphemeralFollowup@dev.kord.core.behavior.interaction.response.FollowupPermittingInteractionResponseBehavior(kotlin.Function1<dev.kord.rest.builder.message.create.FollowupMessageCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.interaction.response/FollowupPermittingInteractionResponseBehavior).dev.kord.core.behavior.interaction.response/createPublicFollowup(kotlin/Function1<dev.kord.rest.builder.message.create/FollowupMessageCreateBuilder, kotlin/Unit>): dev.kord.core.entity.interaction.followup/PublicFollowupMessage // dev.kord.core.behavior.interaction.response/createPublicFollowup|createPublicFollowup@dev.kord.core.behavior.interaction.response.FollowupPermittingInteractionResponseBehavior(kotlin.Function1<dev.kord.rest.builder.message.create.FollowupMessageCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.interaction.response/InteractionResponseBehavior).dev.kord.core.behavior.interaction.response/editOriginalResponse(kotlin/Function1<dev.kord.rest.builder.message.modify/InteractionResponseModifyBuilder, kotlin/Unit>): dev.kord.core.entity/Message // dev.kord.core.behavior.interaction.response/editOriginalResponse|editOriginalResponse@dev.kord.core.behavior.interaction.response.InteractionResponseBehavior(kotlin.Function1<dev.kord.rest.builder.message.modify.InteractionResponseModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.interaction.response/InteractionResponseBehavior).dev.kord.core.behavior.interaction.response/editOriginalResponseWithUnknownVisibility(kotlin/Function1<dev.kord.rest.builder.message.modify/InteractionResponseModifyBuilder, kotlin/Unit>): dev.kord.core.entity.interaction.response/MessageInteractionResponse // dev.kord.core.behavior.interaction.response/editOriginalResponseWithUnknownVisibility|editOriginalResponseWithUnknownVisibility@dev.kord.core.behavior.interaction.response.InteractionResponseBehavior(kotlin.Function1<dev.kord.rest.builder.message.modify.InteractionResponseModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.interaction.response/MessageInteractionResponseBehavior).dev.kord.core.behavior.interaction.response/edit(kotlin/Function1<dev.kord.rest.builder.message.modify/InteractionResponseModifyBuilder, kotlin/Unit>): dev.kord.core.entity.interaction.response/MessageInteractionResponse // dev.kord.core.behavior.interaction.response/edit|edit@dev.kord.core.behavior.interaction.response.MessageInteractionResponseBehavior(kotlin.Function1<dev.kord.rest.builder.message.modify.InteractionResponseModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.interaction.response/PublicInteractionResponseBehavior).dev.kord.core.behavior.interaction.response/editPublicOriginalResponse(kotlin/Function1<dev.kord.rest.builder.message.modify/InteractionResponseModifyBuilder, kotlin/Unit>): dev.kord.core.entity.interaction.response/PublicMessageInteractionResponse // dev.kord.core.behavior.interaction.response/editPublicOriginalResponse|editPublicOriginalResponse@dev.kord.core.behavior.interaction.response.PublicInteractionResponseBehavior(kotlin.Function1<dev.kord.rest.builder.message.modify.InteractionResponseModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.interaction.response/PublicMessageInteractionResponseBehavior).dev.kord.core.behavior.interaction.response/edit(kotlin/Function1<dev.kord.rest.builder.message.modify/InteractionResponseModifyBuilder, kotlin/Unit>): dev.kord.core.entity.interaction.response/PublicMessageInteractionResponse // dev.kord.core.behavior.interaction.response/edit|edit@dev.kord.core.behavior.interaction.response.PublicMessageInteractionResponseBehavior(kotlin.Function1<dev.kord.rest.builder.message.modify.InteractionResponseModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.interaction/ActionInteractionBehavior).dev.kord.core.behavior.interaction/respondEphemeral(kotlin/Function1<dev.kord.rest.builder.message.create/InteractionResponseCreateBuilder, kotlin/Unit>): dev.kord.core.behavior.interaction.response/EphemeralMessageInteractionResponseBehavior // dev.kord.core.behavior.interaction/respondEphemeral|respondEphemeral@dev.kord.core.behavior.interaction.ActionInteractionBehavior(kotlin.Function1<dev.kord.rest.builder.message.create.InteractionResponseCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.interaction/ActionInteractionBehavior).dev.kord.core.behavior.interaction/respondPublic(kotlin/Function1<dev.kord.rest.builder.message.create/InteractionResponseCreateBuilder, kotlin/Unit>): dev.kord.core.behavior.interaction.response/PublicMessageInteractionResponseBehavior // dev.kord.core.behavior.interaction/respondPublic|respondPublic@dev.kord.core.behavior.interaction.ActionInteractionBehavior(kotlin.Function1<dev.kord.rest.builder.message.create.InteractionResponseCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.interaction/AutoCompleteInteractionBehavior).dev.kord.core.behavior.interaction/suggestInteger(kotlin/Function1<dev.kord.rest.builder.interaction/IntegerOptionBuilder, kotlin/Unit>) // dev.kord.core.behavior.interaction/suggestInteger|suggestInteger@dev.kord.core.behavior.interaction.AutoCompleteInteractionBehavior(kotlin.Function1<dev.kord.rest.builder.interaction.IntegerOptionBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.interaction/AutoCompleteInteractionBehavior).dev.kord.core.behavior.interaction/suggestNumber(kotlin/Function1<dev.kord.rest.builder.interaction/NumberOptionBuilder, kotlin/Unit>) // dev.kord.core.behavior.interaction/suggestNumber|suggestNumber@dev.kord.core.behavior.interaction.AutoCompleteInteractionBehavior(kotlin.Function1<dev.kord.rest.builder.interaction.NumberOptionBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.interaction/AutoCompleteInteractionBehavior).dev.kord.core.behavior.interaction/suggestString(kotlin/Function1<dev.kord.rest.builder.interaction/StringChoiceBuilder, kotlin/Unit>) // dev.kord.core.behavior.interaction/suggestString|suggestString@dev.kord.core.behavior.interaction.AutoCompleteInteractionBehavior(kotlin.Function1<dev.kord.rest.builder.interaction.StringChoiceBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.interaction/ComponentInteractionBehavior).dev.kord.core.behavior.interaction/updateEphemeralMessage(kotlin/Function1<dev.kord.rest.builder.message.create/UpdateMessageInteractionResponseCreateBuilder, kotlin/Unit>): dev.kord.core.behavior.interaction.response/EphemeralMessageInteractionResponseBehavior // dev.kord.core.behavior.interaction/updateEphemeralMessage|updateEphemeralMessage@dev.kord.core.behavior.interaction.ComponentInteractionBehavior(kotlin.Function1<dev.kord.rest.builder.message.create.UpdateMessageInteractionResponseCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.interaction/ComponentInteractionBehavior).dev.kord.core.behavior.interaction/updatePublicMessage(kotlin/Function1<dev.kord.rest.builder.message.create/UpdateMessageInteractionResponseCreateBuilder, kotlin/Unit>): dev.kord.core.behavior.interaction.response/PublicMessageInteractionResponseBehavior // dev.kord.core.behavior.interaction/updatePublicMessage|updatePublicMessage@dev.kord.core.behavior.interaction.ComponentInteractionBehavior(kotlin.Function1<dev.kord.rest.builder.message.create.UpdateMessageInteractionResponseCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior.interaction/ModalParentInteractionBehavior).dev.kord.core.behavior.interaction/modal(kotlin/String, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/ModalBuilder, kotlin/Unit>): dev.kord.core.behavior.interaction.response/PopupInteractionResponseBehavior // dev.kord.core.behavior.interaction/modal|modal@dev.kord.core.behavior.interaction.ModalParentInteractionBehavior(kotlin.String;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.ModalBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/ban(dev.kord.common.entity/Snowflake, kotlin/Function1<dev.kord.rest.builder.ban/BanCreateBuilder, kotlin/Unit>) // dev.kord.core.behavior/ban|ban@dev.kord.core.behavior.GuildBehavior(dev.kord.common.entity.Snowflake;kotlin.Function1<dev.kord.rest.builder.ban.BanCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/createApplicationCommands(kotlin/Function1<dev.kord.rest.builder.interaction/GuildMultiApplicationCommandBuilder, kotlin/Unit>): kotlinx.coroutines.flow/Flow<dev.kord.core.entity.application/GuildApplicationCommand> // dev.kord.core.behavior/createApplicationCommands|createApplicationCommands@dev.kord.core.behavior.GuildBehavior(kotlin.Function1<dev.kord.rest.builder.interaction.GuildMultiApplicationCommandBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/createCategory(kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel/CategoryCreateBuilder, kotlin/Unit> = ...): dev.kord.core.entity.channel/Category // dev.kord.core.behavior/createCategory|createCategory@dev.kord.core.behavior.GuildBehavior(kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.CategoryCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/createChatInputCommand(kotlin/String, kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/ChatInputCreateBuilder, kotlin/Unit> = ...): dev.kord.core.entity.application/GuildChatInputCommand // dev.kord.core.behavior/createChatInputCommand|createChatInputCommand@dev.kord.core.behavior.GuildBehavior(kotlin.String;kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.ChatInputCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/createEmoji(kotlin/String, dev.kord.rest/Image, kotlin/Function1<dev.kord.rest.builder.guild/EmojiCreateBuilder, kotlin/Unit> = ...): dev.kord.core.entity/GuildEmoji // dev.kord.core.behavior/createEmoji|createEmoji@dev.kord.core.behavior.GuildBehavior(kotlin.String;dev.kord.rest.Image;kotlin.Function1<dev.kord.rest.builder.guild.EmojiCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/createForumChannel(kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel/ForumChannelCreateBuilder, kotlin/Unit> = ...): dev.kord.core.entity.channel/ForumChannel // dev.kord.core.behavior/createForumChannel|createForumChannel@dev.kord.core.behavior.GuildBehavior(kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.ForumChannelCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/createKeywordAutoModerationRule(kotlin/String, dev.kord.common.entity/AutoModerationRuleEventType = ..., kotlin/Function1<dev.kord.rest.builder.automoderation/KeywordAutoModerationRuleCreateBuilder, kotlin/Unit>): dev.kord.core.entity.automoderation/KeywordAutoModerationRule // dev.kord.core.behavior/createKeywordAutoModerationRule|createKeywordAutoModerationRule@dev.kord.core.behavior.GuildBehavior(kotlin.String;dev.kord.common.entity.AutoModerationRuleEventType;kotlin.Function1<dev.kord.rest.builder.automoderation.KeywordAutoModerationRuleCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/createKeywordPresetAutoModerationRule(kotlin/String, dev.kord.common.entity/AutoModerationRuleEventType = ..., kotlin/Function1<dev.kord.rest.builder.automoderation/KeywordPresetAutoModerationRuleCreateBuilder, kotlin/Unit>): dev.kord.core.entity.automoderation/KeywordPresetAutoModerationRule // dev.kord.core.behavior/createKeywordPresetAutoModerationRule|createKeywordPresetAutoModerationRule@dev.kord.core.behavior.GuildBehavior(kotlin.String;dev.kord.common.entity.AutoModerationRuleEventType;kotlin.Function1<dev.kord.rest.builder.automoderation.KeywordPresetAutoModerationRuleCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/createMediaChannel(kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel/MediaChannelCreateBuilder, kotlin/Unit> = ...): dev.kord.core.entity.channel/MediaChannel // dev.kord.core.behavior/createMediaChannel|createMediaChannel@dev.kord.core.behavior.GuildBehavior(kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.MediaChannelCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/createMentionSpamAutoModerationRule(kotlin/String, dev.kord.common.entity/AutoModerationRuleEventType = ..., kotlin/Function1<dev.kord.rest.builder.automoderation/MentionSpamAutoModerationRuleCreateBuilder, kotlin/Unit>): dev.kord.core.entity.automoderation/MentionSpamAutoModerationRule // dev.kord.core.behavior/createMentionSpamAutoModerationRule|createMentionSpamAutoModerationRule@dev.kord.core.behavior.GuildBehavior(kotlin.String;dev.kord.common.entity.AutoModerationRuleEventType;kotlin.Function1<dev.kord.rest.builder.automoderation.MentionSpamAutoModerationRuleCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/createMessageCommand(kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/MessageCommandCreateBuilder, kotlin/Unit> = ...): dev.kord.core.entity.application/GuildMessageCommand // dev.kord.core.behavior/createMessageCommand|createMessageCommand@dev.kord.core.behavior.GuildBehavior(kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.MessageCommandCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/createNewsChannel(kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel/NewsChannelCreateBuilder, kotlin/Unit> = ...): dev.kord.core.entity.channel/NewsChannel // dev.kord.core.behavior/createNewsChannel|createNewsChannel@dev.kord.core.behavior.GuildBehavior(kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.NewsChannelCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/createRole(kotlin/Function1<dev.kord.rest.builder.role/RoleCreateBuilder, kotlin/Unit> = ...): dev.kord.core.entity/Role // dev.kord.core.behavior/createRole|createRole@dev.kord.core.behavior.GuildBehavior(kotlin.Function1<dev.kord.rest.builder.role.RoleCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/createSpamAutoModerationRule(kotlin/String, dev.kord.common.entity/AutoModerationRuleEventType = ..., kotlin/Function1<dev.kord.rest.builder.automoderation/SpamAutoModerationRuleCreateBuilder, kotlin/Unit>): dev.kord.core.entity.automoderation/SpamAutoModerationRule // dev.kord.core.behavior/createSpamAutoModerationRule|createSpamAutoModerationRule@dev.kord.core.behavior.GuildBehavior(kotlin.String;dev.kord.common.entity.AutoModerationRuleEventType;kotlin.Function1<dev.kord.rest.builder.automoderation.SpamAutoModerationRuleCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/createStageChannel(kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel/StageChannelCreateBuilder, kotlin/Unit> = ...): dev.kord.core.entity.channel/StageChannel // dev.kord.core.behavior/createStageChannel|createStageChannel@dev.kord.core.behavior.GuildBehavior(kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.StageChannelCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/createTextChannel(kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel/TextChannelCreateBuilder, kotlin/Unit> = ...): dev.kord.core.entity.channel/TextChannel // dev.kord.core.behavior/createTextChannel|createTextChannel@dev.kord.core.behavior.GuildBehavior(kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.TextChannelCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/createUserCommand(kotlin/String, kotlin/Function1<dev.kord.rest.builder.interaction/UserCommandCreateBuilder, kotlin/Unit> = ...): dev.kord.core.entity.application/GuildUserCommand // dev.kord.core.behavior/createUserCommand|createUserCommand@dev.kord.core.behavior.GuildBehavior(kotlin.String;kotlin.Function1<dev.kord.rest.builder.interaction.UserCommandCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/createVoiceChannel(kotlin/String, kotlin/Function1<dev.kord.rest.builder.channel/VoiceChannelCreateBuilder, kotlin/Unit> = ...): dev.kord.core.entity.channel/VoiceChannel // dev.kord.core.behavior/createVoiceChannel|createVoiceChannel@dev.kord.core.behavior.GuildBehavior(kotlin.String;kotlin.Function1<dev.kord.rest.builder.channel.VoiceChannelCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/edit(kotlin/Function1<dev.kord.rest.builder.guild/GuildModifyBuilder, kotlin/Unit>): dev.kord.core.entity/Guild // dev.kord.core.behavior/edit|edit@dev.kord.core.behavior.GuildBehavior(kotlin.Function1<dev.kord.rest.builder.guild.GuildModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/editOnboarding(kotlin/Function1<dev.kord.rest.builder.guild/GuildOnboardingModifyBuilder, kotlin/Unit>): dev.kord.core.entity/GuildOnboarding // dev.kord.core.behavior/editOnboarding|editOnboarding@dev.kord.core.behavior.GuildBehavior(kotlin.Function1<dev.kord.rest.builder.guild.GuildOnboardingModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/editWidget(kotlin/Function1<dev.kord.rest.builder.guild/GuildWidgetModifyBuilder, kotlin/Unit>): dev.kord.core.entity/GuildWidget // dev.kord.core.behavior/editWidget|editWidget@dev.kord.core.behavior.GuildBehavior(kotlin.Function1<dev.kord.rest.builder.guild.GuildWidgetModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/swapChannelPositions(kotlin/Function1<dev.kord.rest.builder.channel/GuildChannelPositionModifyBuilder, kotlin/Unit>) // dev.kord.core.behavior/swapChannelPositions|swapChannelPositions@dev.kord.core.behavior.GuildBehavior(kotlin.Function1<dev.kord.rest.builder.channel.GuildChannelPositionModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/swapRolePositions(kotlin/Function1<dev.kord.rest.builder.role/RolePositionsModifyBuilder, kotlin/Unit>): kotlinx.coroutines.flow/Flow<dev.kord.core.entity/Role> // dev.kord.core.behavior/swapRolePositions|swapRolePositions@dev.kord.core.behavior.GuildBehavior(kotlin.Function1<dev.kord.rest.builder.role.RolePositionsModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/GuildEmojiBehavior).dev.kord.core.behavior/edit(kotlin/Function1<dev.kord.rest.builder.guild/EmojiModifyBuilder, kotlin/Unit>): dev.kord.core.entity/GuildEmoji // dev.kord.core.behavior/edit|edit@dev.kord.core.behavior.GuildEmojiBehavior(kotlin.Function1<dev.kord.rest.builder.guild.EmojiModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/GuildScheduledEventBehavior).dev.kord.core.behavior/edit(kotlin/Function1<dev.kord.rest.builder.scheduled_events/ScheduledEventModifyBuilder, kotlin/Unit>): dev.kord.core.entity/GuildScheduledEvent // dev.kord.core.behavior/edit|edit@dev.kord.core.behavior.GuildScheduledEventBehavior(kotlin.Function1<dev.kord.rest.builder.scheduled_events.ScheduledEventModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/MemberBehavior).dev.kord.core.behavior/ban(kotlin/Function1<dev.kord.rest.builder.ban/BanCreateBuilder, kotlin/Unit> = ...) // dev.kord.core.behavior/ban|ban@dev.kord.core.behavior.MemberBehavior(kotlin.Function1<dev.kord.rest.builder.ban.BanCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/MemberBehavior).dev.kord.core.behavior/edit(kotlin/Function1<dev.kord.rest.builder.member/MemberModifyBuilder, kotlin/Unit>): dev.kord.core.entity/Member // dev.kord.core.behavior/edit|edit@dev.kord.core.behavior.MemberBehavior(kotlin.Function1<dev.kord.rest.builder.member.MemberModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/MessageBehavior).dev.kord.core.behavior/edit(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake? = ..., kotlin/Function1<dev.kord.rest.builder.message.modify/WebhookMessageModifyBuilder, kotlin/Unit>): dev.kord.core.entity/Message // dev.kord.core.behavior/edit|edit@dev.kord.core.behavior.MessageBehavior(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake?;kotlin.Function1<dev.kord.rest.builder.message.modify.WebhookMessageModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/MessageBehavior).dev.kord.core.behavior/edit(kotlin/Function1<dev.kord.rest.builder.message.modify/UserMessageModifyBuilder, kotlin/Unit>): dev.kord.core.entity/Message // dev.kord.core.behavior/edit|edit@dev.kord.core.behavior.MessageBehavior(kotlin.Function1<dev.kord.rest.builder.message.modify.UserMessageModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/MessageBehavior).dev.kord.core.behavior/reply(kotlin/Function1<dev.kord.rest.builder.message.create/UserMessageCreateBuilder, kotlin/Unit>): dev.kord.core.entity/Message // dev.kord.core.behavior/reply|reply@dev.kord.core.behavior.MessageBehavior(kotlin.Function1<dev.kord.rest.builder.message.create.UserMessageCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/RoleBehavior).dev.kord.core.behavior/edit(kotlin/Function1<dev.kord.rest.builder.role/RoleModifyBuilder, kotlin/Unit>): dev.kord.core.entity/Role // dev.kord.core.behavior/edit|edit@dev.kord.core.behavior.RoleBehavior(kotlin.Function1<dev.kord.rest.builder.role.RoleModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/StageInstanceBehavior).dev.kord.core.behavior/edit(kotlin/Function1<dev.kord.rest.builder.stage/StageInstanceModifyBuilder, kotlin/Unit>): dev.kord.core.entity/StageInstance // dev.kord.core.behavior/edit|edit@dev.kord.core.behavior.StageInstanceBehavior(kotlin.Function1<dev.kord.rest.builder.stage.StageInstanceModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/StickerBehavior).dev.kord.core.behavior/edit(kotlin/Function1<dev.kord.rest.builder.guild/StickerModifyBuilder, kotlin/Unit>): dev.kord.core.entity/Sticker // dev.kord.core.behavior/edit|edit@dev.kord.core.behavior.StickerBehavior(kotlin.Function1<dev.kord.rest.builder.guild.StickerModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/WebhookBehavior).dev.kord.core.behavior/edit(kotlin/Function1<dev.kord.rest.builder.webhook/WebhookModifyBuilder, kotlin/Unit>): dev.kord.core.entity/Webhook // dev.kord.core.behavior/edit|edit@dev.kord.core.behavior.WebhookBehavior(kotlin.Function1<dev.kord.rest.builder.webhook.WebhookModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/WebhookBehavior).dev.kord.core.behavior/edit(kotlin/String, kotlin/Function1<dev.kord.rest.builder.webhook/WebhookModifyBuilder, kotlin/Unit>): dev.kord.core.entity/Webhook // dev.kord.core.behavior/edit|edit@dev.kord.core.behavior.WebhookBehavior(kotlin.String;kotlin.Function1<dev.kord.rest.builder.webhook.WebhookModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/WebhookBehavior).dev.kord.core.behavior/execute(kotlin/String, dev.kord.common.entity/Snowflake? = ..., kotlin/Function1<dev.kord.rest.builder.message.create/WebhookMessageCreateBuilder, kotlin/Unit>): dev.kord.core.entity/Message // dev.kord.core.behavior/execute|execute@dev.kord.core.behavior.WebhookBehavior(kotlin.String;dev.kord.common.entity.Snowflake?;kotlin.Function1<dev.kord.rest.builder.message.create.WebhookMessageCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.behavior/WebhookBehavior).dev.kord.core.behavior/executeIgnored(kotlin/String, dev.kord.common.entity/Snowflake? = ..., kotlin/Function1<dev.kord.rest.builder.message.create/WebhookMessageCreateBuilder, kotlin/Unit>) // dev.kord.core.behavior/executeIgnored|executeIgnored@dev.kord.core.behavior.WebhookBehavior(kotlin.String;dev.kord.common.entity.Snowflake?;kotlin.Function1<dev.kord.rest.builder.message.create.WebhookMessageCreateBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.entity/Integration).dev.kord.core.entity/edit(kotlin/Function1<dev.kord.rest.builder.integration/IntegrationModifyBuilder, kotlin/Unit>) // dev.kord.core.entity/edit|edit@dev.kord.core.entity.Integration(kotlin.Function1<dev.kord.rest.builder.integration.IntegrationModifyBuilder,kotlin.Unit>){}[0]
final suspend inline fun (dev.kord.core.gateway/MasterGateway).dev.kord.core.gateway/start(kotlin/String, kotlin/Function1<dev.kord.gateway/GatewayConfigurationBuilder, kotlin/Unit> = ...) // dev.kord.core.gateway/start|start@dev.kord.core.gateway.MasterGateway(kotlin.String;kotlin.Function1<dev.kord.gateway.GatewayConfigurationBuilder,kotlin.Unit>){}[0]
final suspend inline fun <#A: reified dev.kord.core.entity.application/GlobalApplicationCommand> (dev.kord.core.supplier/EntitySupplier).dev.kord.core.supplier/getGlobalApplicationCommandOf(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): #A // dev.kord.core.supplier/getGlobalApplicationCommandOf|getGlobalApplicationCommandOf@dev.kord.core.supplier.EntitySupplier(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){0ยง<dev.kord.core.entity.application.GlobalApplicationCommand>}[0]
final suspend inline fun <#A: reified dev.kord.core.entity.application/GlobalApplicationCommand> (dev.kord.core.supplier/EntitySupplier).dev.kord.core.supplier/getGlobalApplicationCommandOfOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): #A? // dev.kord.core.supplier/getGlobalApplicationCommandOfOrNull|getGlobalApplicationCommandOfOrNull@dev.kord.core.supplier.EntitySupplier(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){0ยง<dev.kord.core.entity.application.GlobalApplicationCommand>}[0]
final suspend inline fun <#A: reified dev.kord.core.entity.application/GlobalApplicationCommand> (dev.kord.core.supplier/EntitySupplier).dev.kord.core.supplier/getGlobalApplicationOf(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): #A // dev.kord.core.supplier/getGlobalApplicationOf|getGlobalApplicationOf@dev.kord.core.supplier.EntitySupplier(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){0ยง<dev.kord.core.entity.application.GlobalApplicationCommand>}[0]
final suspend inline fun <#A: reified dev.kord.core.entity.application/GlobalApplicationCommand> (dev.kord.core.supplier/EntitySupplier).dev.kord.core.supplier/getGlobalApplicationOfOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): #A? // dev.kord.core.supplier/getGlobalApplicationOfOrNull|getGlobalApplicationOfOrNull@dev.kord.core.supplier.EntitySupplier(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){0ยง<dev.kord.core.entity.application.GlobalApplicationCommand>}[0]
final suspend inline fun <#A: reified dev.kord.core.entity.application/GuildApplicationCommand> (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/getApplicationCommandOf(dev.kord.common.entity/Snowflake): #A // dev.kord.core.behavior/getApplicationCommandOf|getApplicationCommandOf@dev.kord.core.behavior.GuildBehavior(dev.kord.common.entity.Snowflake){0ยง<dev.kord.core.entity.application.GuildApplicationCommand>}[0]
final suspend inline fun <#A: reified dev.kord.core.entity.application/GuildApplicationCommand> (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/getApplicationCommandOfOrNull(dev.kord.common.entity/Snowflake): #A? // dev.kord.core.behavior/getApplicationCommandOfOrNull|getApplicationCommandOfOrNull@dev.kord.core.behavior.GuildBehavior(dev.kord.common.entity.Snowflake){0ยง<dev.kord.core.entity.application.GuildApplicationCommand>}[0]
final suspend inline fun <#A: reified dev.kord.core.entity.application/GuildApplicationCommand> (dev.kord.core.supplier/EntitySupplier).dev.kord.core.supplier/getGuildApplicationCommandOf(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): #A // dev.kord.core.supplier/getGuildApplicationCommandOf|getGuildApplicationCommandOf@dev.kord.core.supplier.EntitySupplier(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){0ยง<dev.kord.core.entity.application.GuildApplicationCommand>}[0]
final suspend inline fun <#A: reified dev.kord.core.entity.application/GuildApplicationCommand> (dev.kord.core.supplier/EntitySupplier).dev.kord.core.supplier/getGuildApplicationCommandOfOrNull(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake): #A? // dev.kord.core.supplier/getGuildApplicationCommandOfOrNull|getGuildApplicationCommandOfOrNull@dev.kord.core.supplier.EntitySupplier(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){0ยง<dev.kord.core.entity.application.GuildApplicationCommand>}[0]
final suspend inline fun <#A: reified dev.kord.core.entity.channel/Channel> (dev.kord.core.behavior.channel/ChannelBehavior).dev.kord.core.behavior.channel/asChannelOf(): #A // dev.kord.core.behavior.channel/asChannelOf|asChannelOf@dev.kord.core.behavior.channel.ChannelBehavior(){0ยง<dev.kord.core.entity.channel.Channel>}[0]
final suspend inline fun <#A: reified dev.kord.core.entity.channel/Channel> (dev.kord.core.behavior.channel/ChannelBehavior).dev.kord.core.behavior.channel/asChannelOfOrNull(): #A? // dev.kord.core.behavior.channel/asChannelOfOrNull|asChannelOfOrNull@dev.kord.core.behavior.channel.ChannelBehavior(){0ยง<dev.kord.core.entity.channel.Channel>}[0]
final suspend inline fun <#A: reified dev.kord.core.entity.channel/Channel> (dev.kord.core.supplier/EntitySupplier).dev.kord.core.supplier/getChannelOf(dev.kord.common.entity/Snowflake): #A // dev.kord.core.supplier/getChannelOf|getChannelOf@dev.kord.core.supplier.EntitySupplier(dev.kord.common.entity.Snowflake){0ยง<dev.kord.core.entity.channel.Channel>}[0]
final suspend inline fun <#A: reified dev.kord.core.entity.channel/Channel> (dev.kord.core.supplier/EntitySupplier).dev.kord.core.supplier/getChannelOfOrNull(dev.kord.common.entity/Snowflake): #A? // dev.kord.core.supplier/getChannelOfOrNull|getChannelOfOrNull@dev.kord.core.supplier.EntitySupplier(dev.kord.common.entity.Snowflake){0ยง<dev.kord.core.entity.channel.Channel>}[0]
final suspend inline fun <#A: reified dev.kord.core.entity.channel/GuildChannel> (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/getChannelOf(dev.kord.common.entity/Snowflake): #A // dev.kord.core.behavior/getChannelOf|getChannelOf@dev.kord.core.behavior.GuildBehavior(dev.kord.common.entity.Snowflake){0ยง<dev.kord.core.entity.channel.GuildChannel>}[0]
final suspend inline fun <#A: reified dev.kord.core.entity.channel/GuildChannel> (dev.kord.core.behavior/GuildBehavior).dev.kord.core.behavior/getChannelOfOrNull(dev.kord.common.entity/Snowflake): #A? // dev.kord.core.behavior/getChannelOfOrNull|getChannelOfOrNull@dev.kord.core.behavior.GuildBehavior(dev.kord.common.entity.Snowflake){0ยง<dev.kord.core.entity.channel.GuildChannel>}[0]
final suspend inline fun dev.kord.core/Kord(kotlin/String, kotlin/Function1<dev.kord.core.builder.kord/KordBuilder, kotlin/Unit> = ...): dev.kord.core/Kord // dev.kord.core/Kord|Kord(kotlin.String;kotlin.Function1<dev.kord.core.builder.kord.KordBuilder,kotlin.Unit>){}[0]
