// Klib ABI Dump
// Targets: [js]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <kord:common>
open annotation class dev.kord.common.annotation/DeprecatedSinceKord : kotlin/Annotation { // dev.kord.common.annotation/DeprecatedSinceKord|null[0]
    constructor <init>(kotlin/String) // dev.kord.common.annotation/DeprecatedSinceKord.<init>|<init>(kotlin.String){}[0]

    final val version // dev.kord.common.annotation/DeprecatedSinceKord.version|{}version[0]
        final fun <get-version>(): kotlin/String // dev.kord.common.annotation/DeprecatedSinceKord.version.<get-version>|<get-version>(){}[0]
}

open annotation class dev.kord.common.annotation/KordDsl : kotlin/Annotation { // dev.kord.common.annotation/KordDsl|null[0]
    constructor <init>() // dev.kord.common.annotation/KordDsl.<init>|<init>(){}[0]
}

open annotation class dev.kord.common.annotation/KordExperimental : kotlin/Annotation { // dev.kord.common.annotation/KordExperimental|null[0]
    constructor <init>() // dev.kord.common.annotation/KordExperimental.<init>|<init>(){}[0]
}

open annotation class dev.kord.common.annotation/KordInternal : kotlin/Annotation { // dev.kord.common.annotation/KordInternal|null[0]
    constructor <init>() // dev.kord.common.annotation/KordInternal.<init>|<init>(){}[0]
}

open annotation class dev.kord.common.annotation/KordPreview : kotlin/Annotation { // dev.kord.common.annotation/KordPreview|null[0]
    constructor <init>() // dev.kord.common.annotation/KordPreview.<init>|<init>(){}[0]
}

open annotation class dev.kord.common.annotation/KordUnsafe : kotlin/Annotation { // dev.kord.common.annotation/KordUnsafe|null[0]
    constructor <init>() // dev.kord.common.annotation/KordUnsafe.<init>|<init>(){}[0]
}

open annotation class dev.kord.common.annotation/KordVoice : kotlin/Annotation { // dev.kord.common.annotation/KordVoice|null[0]
    constructor <init>() // dev.kord.common.annotation/KordVoice.<init>|<init>(){}[0]
}

final enum class dev.kord.common/DiscordTimestampStyle : kotlin/Enum<dev.kord.common/DiscordTimestampStyle> { // dev.kord.common/DiscordTimestampStyle|null[0]
    enum entry LongDate // dev.kord.common/DiscordTimestampStyle.LongDate|null[0]
    enum entry LongDateTime // dev.kord.common/DiscordTimestampStyle.LongDateTime|null[0]
    enum entry LongTime // dev.kord.common/DiscordTimestampStyle.LongTime|null[0]
    enum entry RelativeTime // dev.kord.common/DiscordTimestampStyle.RelativeTime|null[0]
    enum entry ShortDate // dev.kord.common/DiscordTimestampStyle.ShortDate|null[0]
    enum entry ShortDateTime // dev.kord.common/DiscordTimestampStyle.ShortDateTime|null[0]
    enum entry ShortTime // dev.kord.common/DiscordTimestampStyle.ShortTime|null[0]

    final val entries // dev.kord.common/DiscordTimestampStyle.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<dev.kord.common/DiscordTimestampStyle> // dev.kord.common/DiscordTimestampStyle.entries.<get-entries>|<get-entries>#static(){}[0]
    final val style // dev.kord.common/DiscordTimestampStyle.style|{}style[0]
        final fun <get-style>(): kotlin/String // dev.kord.common/DiscordTimestampStyle.style.<get-style>|<get-style>(){}[0]

    final fun valueOf(kotlin/String): dev.kord.common/DiscordTimestampStyle // dev.kord.common/DiscordTimestampStyle.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<dev.kord.common/DiscordTimestampStyle> // dev.kord.common/DiscordTimestampStyle.values|values#static(){}[0]
}

abstract interface dev.kord.common.ratelimit/IntervalRateLimiter : dev.kord.common.ratelimit/RateLimiter { // dev.kord.common.ratelimit/IntervalRateLimiter|null[0]
    abstract val interval // dev.kord.common.ratelimit/IntervalRateLimiter.interval|{}interval[0]
        abstract fun <get-interval>(): kotlin.time/Duration // dev.kord.common.ratelimit/IntervalRateLimiter.interval.<get-interval>|<get-interval>(){}[0]
    abstract val limit // dev.kord.common.ratelimit/IntervalRateLimiter.limit|{}limit[0]
        abstract fun <get-limit>(): kotlin/Int // dev.kord.common.ratelimit/IntervalRateLimiter.limit.<get-limit>|<get-limit>(){}[0]

    abstract suspend fun consume() // dev.kord.common.ratelimit/IntervalRateLimiter.consume|consume(){}[0]
}

abstract interface dev.kord.common.ratelimit/RateLimiter { // dev.kord.common.ratelimit/RateLimiter|null[0]
    abstract suspend fun consume() // dev.kord.common.ratelimit/RateLimiter.consume|consume(){}[0]
}

sealed interface dev.kord.common.entity/BaseDiscordApplication { // dev.kord.common.entity/BaseDiscordApplication|null[0]
    abstract val coverImage // dev.kord.common.entity/BaseDiscordApplication.coverImage|{}coverImage[0]
        abstract fun <get-coverImage>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/BaseDiscordApplication.coverImage.<get-coverImage>|<get-coverImage>(){}[0]
    abstract val customInstallUrl // dev.kord.common.entity/BaseDiscordApplication.customInstallUrl|{}customInstallUrl[0]
        abstract fun <get-customInstallUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/BaseDiscordApplication.customInstallUrl.<get-customInstallUrl>|<get-customInstallUrl>(){}[0]
    abstract val description // dev.kord.common.entity/BaseDiscordApplication.description|{}description[0]
        abstract fun <get-description>(): kotlin/String // dev.kord.common.entity/BaseDiscordApplication.description.<get-description>|<get-description>(){}[0]
    abstract val flags // dev.kord.common.entity/BaseDiscordApplication.flags|{}flags[0]
        abstract fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationFlags> // dev.kord.common.entity/BaseDiscordApplication.flags.<get-flags>|<get-flags>(){}[0]
    abstract val guildId // dev.kord.common.entity/BaseDiscordApplication.guildId|{}guildId[0]
        abstract fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/BaseDiscordApplication.guildId.<get-guildId>|<get-guildId>(){}[0]
    abstract val icon // dev.kord.common.entity/BaseDiscordApplication.icon|{}icon[0]
        abstract fun <get-icon>(): kotlin/String? // dev.kord.common.entity/BaseDiscordApplication.icon.<get-icon>|<get-icon>(){}[0]
    abstract val id // dev.kord.common.entity/BaseDiscordApplication.id|{}id[0]
        abstract fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/BaseDiscordApplication.id.<get-id>|<get-id>(){}[0]
    abstract val installParams // dev.kord.common.entity/BaseDiscordApplication.installParams|{}installParams[0]
        abstract fun <get-installParams>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InstallParams> // dev.kord.common.entity/BaseDiscordApplication.installParams.<get-installParams>|<get-installParams>(){}[0]
    abstract val name // dev.kord.common.entity/BaseDiscordApplication.name|{}name[0]
        abstract fun <get-name>(): kotlin/String // dev.kord.common.entity/BaseDiscordApplication.name.<get-name>|<get-name>(){}[0]
    abstract val owner // dev.kord.common.entity/BaseDiscordApplication.owner|{}owner[0]
        abstract fun <get-owner>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/BaseDiscordApplication.owner.<get-owner>|<get-owner>(){}[0]
    abstract val primarySkuId // dev.kord.common.entity/BaseDiscordApplication.primarySkuId|{}primarySkuId[0]
        abstract fun <get-primarySkuId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/BaseDiscordApplication.primarySkuId.<get-primarySkuId>|<get-primarySkuId>(){}[0]
    abstract val privacyPolicyUrl // dev.kord.common.entity/BaseDiscordApplication.privacyPolicyUrl|{}privacyPolicyUrl[0]
        abstract fun <get-privacyPolicyUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/BaseDiscordApplication.privacyPolicyUrl.<get-privacyPolicyUrl>|<get-privacyPolicyUrl>(){}[0]
    abstract val roleConnectionsVerificationUrl // dev.kord.common.entity/BaseDiscordApplication.roleConnectionsVerificationUrl|{}roleConnectionsVerificationUrl[0]
        abstract fun <get-roleConnectionsVerificationUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/BaseDiscordApplication.roleConnectionsVerificationUrl.<get-roleConnectionsVerificationUrl>|<get-roleConnectionsVerificationUrl>(){}[0]
    abstract val rpcOrigins // dev.kord.common.entity/BaseDiscordApplication.rpcOrigins|{}rpcOrigins[0]
        abstract fun <get-rpcOrigins>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.common.entity/BaseDiscordApplication.rpcOrigins.<get-rpcOrigins>|<get-rpcOrigins>(){}[0]
    abstract val slug // dev.kord.common.entity/BaseDiscordApplication.slug|{}slug[0]
        abstract fun <get-slug>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/BaseDiscordApplication.slug.<get-slug>|<get-slug>(){}[0]
    abstract val tags // dev.kord.common.entity/BaseDiscordApplication.tags|{}tags[0]
        abstract fun <get-tags>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.common.entity/BaseDiscordApplication.tags.<get-tags>|<get-tags>(){}[0]
    abstract val termsOfServiceUrl // dev.kord.common.entity/BaseDiscordApplication.termsOfServiceUrl|{}termsOfServiceUrl[0]
        abstract fun <get-termsOfServiceUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/BaseDiscordApplication.termsOfServiceUrl.<get-termsOfServiceUrl>|<get-termsOfServiceUrl>(){}[0]
    abstract val verifyKey // dev.kord.common.entity/BaseDiscordApplication.verifyKey|{}verifyKey[0]
        abstract fun <get-verifyKey>(): kotlin/String // dev.kord.common.entity/BaseDiscordApplication.verifyKey.<get-verifyKey>|<get-verifyKey>(){}[0]
}

sealed interface dev.kord.common.entity/BaseDiscordInvite { // dev.kord.common.entity/BaseDiscordInvite|null[0]
    abstract val approximateMemberCount // dev.kord.common.entity/BaseDiscordInvite.approximateMemberCount|{}approximateMemberCount[0]
        abstract fun <get-approximateMemberCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/BaseDiscordInvite.approximateMemberCount.<get-approximateMemberCount>|<get-approximateMemberCount>(){}[0]
    abstract val approximatePresenceCount // dev.kord.common.entity/BaseDiscordInvite.approximatePresenceCount|{}approximatePresenceCount[0]
        abstract fun <get-approximatePresenceCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/BaseDiscordInvite.approximatePresenceCount.<get-approximatePresenceCount>|<get-approximatePresenceCount>(){}[0]
    abstract val channel // dev.kord.common.entity/BaseDiscordInvite.channel|{}channel[0]
        abstract fun <get-channel>(): dev.kord.common.entity/DiscordChannel? // dev.kord.common.entity/BaseDiscordInvite.channel.<get-channel>|<get-channel>(){}[0]
    abstract val code // dev.kord.common.entity/BaseDiscordInvite.code|{}code[0]
        abstract fun <get-code>(): kotlin/String // dev.kord.common.entity/BaseDiscordInvite.code.<get-code>|<get-code>(){}[0]
    abstract val expiresAt // dev.kord.common.entity/BaseDiscordInvite.expiresAt|{}expiresAt[0]
        abstract fun <get-expiresAt>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/BaseDiscordInvite.expiresAt.<get-expiresAt>|<get-expiresAt>(){}[0]
    abstract val guild // dev.kord.common.entity/BaseDiscordInvite.guild|{}guild[0]
        abstract fun <get-guild>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialGuild> // dev.kord.common.entity/BaseDiscordInvite.guild.<get-guild>|<get-guild>(){}[0]
    abstract val guildScheduledEvent // dev.kord.common.entity/BaseDiscordInvite.guildScheduledEvent|{}guildScheduledEvent[0]
        abstract fun <get-guildScheduledEvent>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildScheduledEvent> // dev.kord.common.entity/BaseDiscordInvite.guildScheduledEvent.<get-guildScheduledEvent>|<get-guildScheduledEvent>(){}[0]
    abstract val inviter // dev.kord.common.entity/BaseDiscordInvite.inviter|{}inviter[0]
        abstract fun <get-inviter>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/BaseDiscordInvite.inviter.<get-inviter>|<get-inviter>(){}[0]
    abstract val targetApplication // dev.kord.common.entity/BaseDiscordInvite.targetApplication|{}targetApplication[0]
        abstract fun <get-targetApplication>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialApplication> // dev.kord.common.entity/BaseDiscordInvite.targetApplication.<get-targetApplication>|<get-targetApplication>(){}[0]
    abstract val targetType // dev.kord.common.entity/BaseDiscordInvite.targetType|{}targetType[0]
        abstract fun <get-targetType>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> // dev.kord.common.entity/BaseDiscordInvite.targetType.<get-targetType>|<get-targetType>(){}[0]
    abstract val targetUser // dev.kord.common.entity/BaseDiscordInvite.targetUser|{}targetUser[0]
        abstract fun <get-targetUser>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/BaseDiscordInvite.targetUser.<get-targetUser>|<get-targetUser>(){}[0]
}

abstract class dev.kord.common.exception/RequestException : kotlin/Exception { // dev.kord.common.exception/RequestException|null[0]
    constructor <init>(kotlin/String) // dev.kord.common.exception/RequestException.<init>|<init>(kotlin.String){}[0]
    constructor <init>(kotlin/String, kotlin/Throwable) // dev.kord.common.exception/RequestException.<init>|<init>(kotlin.String;kotlin.Throwable){}[0]
    constructor <init>(kotlin/Throwable) // dev.kord.common.exception/RequestException.<init>|<init>(kotlin.Throwable){}[0]
}

abstract class dev.kord.common.ratelimit/AbstractIntervalRateLimiter : dev.kord.common.ratelimit/IntervalRateLimiter { // dev.kord.common.ratelimit/AbstractIntervalRateLimiter|null[0]
    constructor <init>(kotlin/Int, kotlin.time/Duration) // dev.kord.common.ratelimit/AbstractIntervalRateLimiter.<init>|<init>(kotlin.Int;kotlin.time.Duration){}[0]

    final val interval // dev.kord.common.ratelimit/AbstractIntervalRateLimiter.interval|{}interval[0]
        final fun <get-interval>(): kotlin.time/Duration // dev.kord.common.ratelimit/AbstractIntervalRateLimiter.interval.<get-interval>|<get-interval>(){}[0]
    final val limit // dev.kord.common.ratelimit/AbstractIntervalRateLimiter.limit|{}limit[0]
        final fun <get-limit>(): kotlin/Int // dev.kord.common.ratelimit/AbstractIntervalRateLimiter.limit.<get-limit>|<get-limit>(){}[0]
    final val limitIsExceeded // dev.kord.common.ratelimit/AbstractIntervalRateLimiter.limitIsExceeded|{}limitIsExceeded[0]
        final fun <get-limitIsExceeded>(): kotlin/Boolean // dev.kord.common.ratelimit/AbstractIntervalRateLimiter.limitIsExceeded.<get-limitIsExceeded>|<get-limitIsExceeded>(){}[0]

    final var remainingConsumes // dev.kord.common.ratelimit/AbstractIntervalRateLimiter.remainingConsumes|{}remainingConsumes[0]
        final fun <get-remainingConsumes>(): kotlin/Int // dev.kord.common.ratelimit/AbstractIntervalRateLimiter.remainingConsumes.<get-remainingConsumes>|<get-remainingConsumes>(){}[0]
        final fun <set-remainingConsumes>(kotlin/Int) // dev.kord.common.ratelimit/AbstractIntervalRateLimiter.remainingConsumes.<set-remainingConsumes>|<set-remainingConsumes>(kotlin.Int){}[0]

    abstract suspend fun consumeUnderLock() // dev.kord.common.ratelimit/AbstractIntervalRateLimiter.consumeUnderLock|consumeUnderLock(){}[0]
    final suspend fun consume() // dev.kord.common.ratelimit/AbstractIntervalRateLimiter.consume|consume(){}[0]
}

final class <#A: kotlin/Any?> dev.kord.common.entity/AuditLogChange { // dev.kord.common.entity/AuditLogChange|null[0]
    constructor <init>(#A?, #A?, dev.kord.common.entity/AuditLogChangeKey<#A>) // dev.kord.common.entity/AuditLogChange.<init>|<init>(1:0?;1:0?;dev.kord.common.entity.AuditLogChangeKey<1:0>){}[0]

    final val key // dev.kord.common.entity/AuditLogChange.key|{}key[0]
        final fun <get-key>(): dev.kord.common.entity/AuditLogChangeKey<#A> // dev.kord.common.entity/AuditLogChange.key.<get-key>|<get-key>(){}[0]
    final val new // dev.kord.common.entity/AuditLogChange.new|{}new[0]
        final fun <get-new>(): #A? // dev.kord.common.entity/AuditLogChange.new.<get-new>|<get-new>(){}[0]
    final val old // dev.kord.common.entity/AuditLogChange.old|{}old[0]
        final fun <get-old>(): #A? // dev.kord.common.entity/AuditLogChange.old.<get-old>|<get-old>(){}[0]

    final fun component1(): #A? // dev.kord.common.entity/AuditLogChange.component1|component1(){}[0]
    final fun component2(): #A? // dev.kord.common.entity/AuditLogChange.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/AuditLogChangeKey<#A> // dev.kord.common.entity/AuditLogChange.component3|component3(){}[0]
    final fun copy(#A? = ..., #A? = ..., dev.kord.common.entity/AuditLogChangeKey<#A> = ...): dev.kord.common.entity/AuditLogChange<#A> // dev.kord.common.entity/AuditLogChange.copy|copy(1:0?;1:0?;dev.kord.common.entity.AuditLogChangeKey<1:0>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/AuditLogChange.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/AuditLogChange.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/AuditLogChange.toString|toString(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // dev.kord.common.entity/AuditLogChange.Companion|null[0]
        final fun <#A2: kotlin/Any?> serializer(kotlinx.serialization/KSerializer<#A2>): kotlinx.serialization/KSerializer<dev.kord.common.entity/AuditLogChange<#A2>> // dev.kord.common.entity/AuditLogChange.Companion.serializer|serializer(kotlinx.serialization.KSerializer<0:0>){0§<kotlin.Any?>}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // dev.kord.common.entity/AuditLogChange.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

final class dev.kord.common.entity/ActivityFlags { // dev.kord.common.entity/ActivityFlags|null[0]
    final val value // dev.kord.common.entity/ActivityFlags.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/ActivityFlags.value.<get-value>|<get-value>(){}[0]
    final val values // dev.kord.common.entity/ActivityFlags.values|{}values[0]
        final fun <get-values>(): kotlin.collections/Set<dev.kord.common.entity/ActivityFlag> // dev.kord.common.entity/ActivityFlags.values.<get-values>|<get-values>(){}[0]

    final fun contains(dev.kord.common.entity/ActivityFlag): kotlin/Boolean // dev.kord.common.entity/ActivityFlags.contains|contains(dev.kord.common.entity.ActivityFlag){}[0]
    final fun contains(dev.kord.common.entity/ActivityFlags): kotlin/Boolean // dev.kord.common.entity/ActivityFlags.contains|contains(dev.kord.common.entity.ActivityFlags){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/ActivityFlags.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/ActivityFlags.hashCode|hashCode(){}[0]
    final fun minus(dev.kord.common.entity/ActivityFlag): dev.kord.common.entity/ActivityFlags // dev.kord.common.entity/ActivityFlags.minus|minus(dev.kord.common.entity.ActivityFlag){}[0]
    final fun minus(dev.kord.common.entity/ActivityFlags): dev.kord.common.entity/ActivityFlags // dev.kord.common.entity/ActivityFlags.minus|minus(dev.kord.common.entity.ActivityFlags){}[0]
    final fun plus(dev.kord.common.entity/ActivityFlag): dev.kord.common.entity/ActivityFlags // dev.kord.common.entity/ActivityFlags.plus|plus(dev.kord.common.entity.ActivityFlag){}[0]
    final fun plus(dev.kord.common.entity/ActivityFlags): dev.kord.common.entity/ActivityFlags // dev.kord.common.entity/ActivityFlags.plus|plus(dev.kord.common.entity.ActivityFlags){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/ActivityFlags.toString|toString(){}[0]
    final inline fun copy(kotlin/Function1<dev.kord.common.entity/ActivityFlags.Builder, kotlin/Unit>): dev.kord.common.entity/ActivityFlags // dev.kord.common.entity/ActivityFlags.copy|copy(kotlin.Function1<dev.kord.common.entity.ActivityFlags.Builder,kotlin.Unit>){}[0]

    final class Builder { // dev.kord.common.entity/ActivityFlags.Builder|null[0]
        constructor <init>(kotlin/Int = ...) // dev.kord.common.entity/ActivityFlags.Builder.<init>|<init>(kotlin.Int){}[0]

        final fun (dev.kord.common.entity/ActivityFlag).unaryMinus() // dev.kord.common.entity/ActivityFlags.Builder.unaryMinus|unaryMinus@dev.kord.common.entity.ActivityFlag(){}[0]
        final fun (dev.kord.common.entity/ActivityFlag).unaryPlus() // dev.kord.common.entity/ActivityFlags.Builder.unaryPlus|unaryPlus@dev.kord.common.entity.ActivityFlag(){}[0]
        final fun (dev.kord.common.entity/ActivityFlags).unaryMinus() // dev.kord.common.entity/ActivityFlags.Builder.unaryMinus|unaryMinus@dev.kord.common.entity.ActivityFlags(){}[0]
        final fun (dev.kord.common.entity/ActivityFlags).unaryPlus() // dev.kord.common.entity/ActivityFlags.Builder.unaryPlus|unaryPlus@dev.kord.common.entity.ActivityFlags(){}[0]
        final fun build(): dev.kord.common.entity/ActivityFlags // dev.kord.common.entity/ActivityFlags.Builder.build|build(){}[0]
    }

    final object Companion { // dev.kord.common.entity/ActivityFlags.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/ActivityFlags> // dev.kord.common.entity/ActivityFlags.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/AllRemovedMessageReactions { // dev.kord.common.entity/AllRemovedMessageReactions|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalSnowflake = ...) // dev.kord.common.entity/AllRemovedMessageReactions.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake){}[0]

    final val channelId // dev.kord.common.entity/AllRemovedMessageReactions.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/AllRemovedMessageReactions.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val guildId // dev.kord.common.entity/AllRemovedMessageReactions.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/AllRemovedMessageReactions.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val messageId // dev.kord.common.entity/AllRemovedMessageReactions.messageId|{}messageId[0]
        final fun <get-messageId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/AllRemovedMessageReactions.messageId.<get-messageId>|<get-messageId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/AllRemovedMessageReactions.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/AllRemovedMessageReactions.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/AllRemovedMessageReactions.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ...): dev.kord.common.entity/AllRemovedMessageReactions // dev.kord.common.entity/AllRemovedMessageReactions.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/AllRemovedMessageReactions.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/AllRemovedMessageReactions.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/AllRemovedMessageReactions.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/AllRemovedMessageReactions> { // dev.kord.common.entity/AllRemovedMessageReactions.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/AllRemovedMessageReactions.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/AllRemovedMessageReactions.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/AllRemovedMessageReactions.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/AllRemovedMessageReactions // dev.kord.common.entity/AllRemovedMessageReactions.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/AllRemovedMessageReactions) // dev.kord.common.entity/AllRemovedMessageReactions.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.AllRemovedMessageReactions){}[0]
    }

    final object Companion { // dev.kord.common.entity/AllRemovedMessageReactions.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/AllRemovedMessageReactions> // dev.kord.common.entity/AllRemovedMessageReactions.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/AllowedMentions { // dev.kord.common.entity/AllowedMentions|null[0]
    constructor <init>(kotlin.collections/List<dev.kord.common.entity/AllowedMentionType>, kotlin.collections/List<kotlin/String>, kotlin.collections/List<kotlin/String>, dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.common.entity/AllowedMentions.<init>|<init>(kotlin.collections.List<dev.kord.common.entity.AllowedMentionType>;kotlin.collections.List<kotlin.String>;kotlin.collections.List<kotlin.String>;dev.kord.common.entity.optional.OptionalBoolean){}[0]

    final val parse // dev.kord.common.entity/AllowedMentions.parse|{}parse[0]
        final fun <get-parse>(): kotlin.collections/List<dev.kord.common.entity/AllowedMentionType> // dev.kord.common.entity/AllowedMentions.parse.<get-parse>|<get-parse>(){}[0]
    final val repliedUser // dev.kord.common.entity/AllowedMentions.repliedUser|{}repliedUser[0]
        final fun <get-repliedUser>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/AllowedMentions.repliedUser.<get-repliedUser>|<get-repliedUser>(){}[0]
    final val roles // dev.kord.common.entity/AllowedMentions.roles|{}roles[0]
        final fun <get-roles>(): kotlin.collections/List<kotlin/String> // dev.kord.common.entity/AllowedMentions.roles.<get-roles>|<get-roles>(){}[0]
    final val users // dev.kord.common.entity/AllowedMentions.users|{}users[0]
        final fun <get-users>(): kotlin.collections/List<kotlin/String> // dev.kord.common.entity/AllowedMentions.users.<get-users>|<get-users>(){}[0]

    final fun component1(): kotlin.collections/List<dev.kord.common.entity/AllowedMentionType> // dev.kord.common.entity/AllowedMentions.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<kotlin/String> // dev.kord.common.entity/AllowedMentions.component2|component2(){}[0]
    final fun component3(): kotlin.collections/List<kotlin/String> // dev.kord.common.entity/AllowedMentions.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/AllowedMentions.component4|component4(){}[0]
    final fun copy(kotlin.collections/List<dev.kord.common.entity/AllowedMentionType> = ..., kotlin.collections/List<kotlin/String> = ..., kotlin.collections/List<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.common.entity/AllowedMentions // dev.kord.common.entity/AllowedMentions.copy|copy(kotlin.collections.List<dev.kord.common.entity.AllowedMentionType>;kotlin.collections.List<kotlin.String>;kotlin.collections.List<kotlin.String>;dev.kord.common.entity.optional.OptionalBoolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/AllowedMentions.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/AllowedMentions.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/AllowedMentions.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/AllowedMentions> { // dev.kord.common.entity/AllowedMentions.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/AllowedMentions.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/AllowedMentions.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/AllowedMentions.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/AllowedMentions // dev.kord.common.entity/AllowedMentions.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/AllowedMentions) // dev.kord.common.entity/AllowedMentions.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.AllowedMentions){}[0]
    }

    final object Companion { // dev.kord.common.entity/AllowedMentions.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/AllowedMentions.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/AllowedMentions> // dev.kord.common.entity/AllowedMentions.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/ApplicationCommandOption { // dev.kord.common.entity/ApplicationCommandOption|null[0]
    constructor <init>(dev.kord.common.entity/ApplicationCommandOptionType, kotlin/String, dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> = ..., kotlin/String, dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Choice>> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ApplicationCommandOption>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> = ..., dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonPrimitive> = ..., dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonPrimitive> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ...) // dev.kord.common.entity/ApplicationCommandOption.<init>|<init>(dev.kord.common.entity.ApplicationCommandOptionType;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Choice>>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.ApplicationCommandOption>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.ChannelType>>;dev.kord.common.entity.optional.Optional<kotlinx.serialization.json.JsonPrimitive>;dev.kord.common.entity.optional.Optional<kotlinx.serialization.json.JsonPrimitive>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt){}[0]

    final val autocomplete // dev.kord.common.entity/ApplicationCommandOption.autocomplete|{}autocomplete[0]
        final fun <get-autocomplete>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/ApplicationCommandOption.autocomplete.<get-autocomplete>|<get-autocomplete>(){}[0]
    final val channelTypes // dev.kord.common.entity/ApplicationCommandOption.channelTypes|{}channelTypes[0]
        final fun <get-channelTypes>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> // dev.kord.common.entity/ApplicationCommandOption.channelTypes.<get-channelTypes>|<get-channelTypes>(){}[0]
    final val choices // dev.kord.common.entity/ApplicationCommandOption.choices|{}choices[0]
        final fun <get-choices>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Choice>> // dev.kord.common.entity/ApplicationCommandOption.choices.<get-choices>|<get-choices>(){}[0]
    final val default // dev.kord.common.entity/ApplicationCommandOption.default|{}default[0]
        final fun <get-default>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/ApplicationCommandOption.default.<get-default>|<get-default>(){}[0]
    final val description // dev.kord.common.entity/ApplicationCommandOption.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.common.entity/ApplicationCommandOption.description.<get-description>|<get-description>(){}[0]
    final val descriptionLocalizations // dev.kord.common.entity/ApplicationCommandOption.descriptionLocalizations|{}descriptionLocalizations[0]
        final fun <get-descriptionLocalizations>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.common.entity/ApplicationCommandOption.descriptionLocalizations.<get-descriptionLocalizations>|<get-descriptionLocalizations>(){}[0]
    final val maxLength // dev.kord.common.entity/ApplicationCommandOption.maxLength|{}maxLength[0]
        final fun <get-maxLength>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/ApplicationCommandOption.maxLength.<get-maxLength>|<get-maxLength>(){}[0]
    final val maxValue // dev.kord.common.entity/ApplicationCommandOption.maxValue|{}maxValue[0]
        final fun <get-maxValue>(): dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonPrimitive> // dev.kord.common.entity/ApplicationCommandOption.maxValue.<get-maxValue>|<get-maxValue>(){}[0]
    final val minLength // dev.kord.common.entity/ApplicationCommandOption.minLength|{}minLength[0]
        final fun <get-minLength>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/ApplicationCommandOption.minLength.<get-minLength>|<get-minLength>(){}[0]
    final val minValue // dev.kord.common.entity/ApplicationCommandOption.minValue|{}minValue[0]
        final fun <get-minValue>(): dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonPrimitive> // dev.kord.common.entity/ApplicationCommandOption.minValue.<get-minValue>|<get-minValue>(){}[0]
    final val name // dev.kord.common.entity/ApplicationCommandOption.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/ApplicationCommandOption.name.<get-name>|<get-name>(){}[0]
    final val nameLocalizations // dev.kord.common.entity/ApplicationCommandOption.nameLocalizations|{}nameLocalizations[0]
        final fun <get-nameLocalizations>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.common.entity/ApplicationCommandOption.nameLocalizations.<get-nameLocalizations>|<get-nameLocalizations>(){}[0]
    final val options // dev.kord.common.entity/ApplicationCommandOption.options|{}options[0]
        final fun <get-options>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ApplicationCommandOption>> // dev.kord.common.entity/ApplicationCommandOption.options.<get-options>|<get-options>(){}[0]
    final val required // dev.kord.common.entity/ApplicationCommandOption.required|{}required[0]
        final fun <get-required>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/ApplicationCommandOption.required.<get-required>|<get-required>(){}[0]
    final val type // dev.kord.common.entity/ApplicationCommandOption.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/ApplicationCommandOption.type.<get-type>|<get-type>(){}[0]

    final fun component1(): dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/ApplicationCommandOption.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ApplicationCommandOption>> // dev.kord.common.entity/ApplicationCommandOption.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> // dev.kord.common.entity/ApplicationCommandOption.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonPrimitive> // dev.kord.common.entity/ApplicationCommandOption.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonPrimitive> // dev.kord.common.entity/ApplicationCommandOption.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/ApplicationCommandOption.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/ApplicationCommandOption.component15|component15(){}[0]
    final fun component2(): kotlin/String // dev.kord.common.entity/ApplicationCommandOption.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.common.entity/ApplicationCommandOption.component3|component3(){}[0]
    final fun component4(): kotlin/String // dev.kord.common.entity/ApplicationCommandOption.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.common.entity/ApplicationCommandOption.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/ApplicationCommandOption.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/ApplicationCommandOption.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Choice>> // dev.kord.common.entity/ApplicationCommandOption.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/ApplicationCommandOption.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/ApplicationCommandOptionType = ..., kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> = ..., kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Choice>> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ApplicationCommandOption>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> = ..., dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonPrimitive> = ..., dev.kord.common.entity.optional/Optional<kotlinx.serialization.json/JsonPrimitive> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ...): dev.kord.common.entity/ApplicationCommandOption // dev.kord.common.entity/ApplicationCommandOption.copy|copy(dev.kord.common.entity.ApplicationCommandOptionType;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Choice>>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.ApplicationCommandOption>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.ChannelType>>;dev.kord.common.entity.optional.Optional<kotlinx.serialization.json.JsonPrimitive>;dev.kord.common.entity.optional.Optional<kotlinx.serialization.json.JsonPrimitive>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/ApplicationCommandOption.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/ApplicationCommandOption.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/ApplicationCommandOption.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/ApplicationCommandOption> { // dev.kord.common.entity/ApplicationCommandOption.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/ApplicationCommandOption.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/ApplicationCommandOption.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/ApplicationCommandOption.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/ApplicationCommandOption // dev.kord.common.entity/ApplicationCommandOption.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/ApplicationCommandOption) // dev.kord.common.entity/ApplicationCommandOption.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.ApplicationCommandOption){}[0]
    }

    final object Companion { // dev.kord.common.entity/ApplicationCommandOption.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/ApplicationCommandOption.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/ApplicationCommandOption> // dev.kord.common.entity/ApplicationCommandOption.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/ApplicationFlags { // dev.kord.common.entity/ApplicationFlags|null[0]
    final val code // dev.kord.common.entity/ApplicationFlags.code|{}code[0]
        final fun <get-code>(): kotlin/Int // dev.kord.common.entity/ApplicationFlags.code.<get-code>|<get-code>(){}[0]
    final val values // dev.kord.common.entity/ApplicationFlags.values|{}values[0]
        final fun <get-values>(): kotlin.collections/Set<dev.kord.common.entity/ApplicationFlag> // dev.kord.common.entity/ApplicationFlags.values.<get-values>|<get-values>(){}[0]

    final fun contains(dev.kord.common.entity/ApplicationFlag): kotlin/Boolean // dev.kord.common.entity/ApplicationFlags.contains|contains(dev.kord.common.entity.ApplicationFlag){}[0]
    final fun contains(dev.kord.common.entity/ApplicationFlags): kotlin/Boolean // dev.kord.common.entity/ApplicationFlags.contains|contains(dev.kord.common.entity.ApplicationFlags){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/ApplicationFlags.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/ApplicationFlags.hashCode|hashCode(){}[0]
    final fun minus(dev.kord.common.entity/ApplicationFlag): dev.kord.common.entity/ApplicationFlags // dev.kord.common.entity/ApplicationFlags.minus|minus(dev.kord.common.entity.ApplicationFlag){}[0]
    final fun minus(dev.kord.common.entity/ApplicationFlags): dev.kord.common.entity/ApplicationFlags // dev.kord.common.entity/ApplicationFlags.minus|minus(dev.kord.common.entity.ApplicationFlags){}[0]
    final fun plus(dev.kord.common.entity/ApplicationFlag): dev.kord.common.entity/ApplicationFlags // dev.kord.common.entity/ApplicationFlags.plus|plus(dev.kord.common.entity.ApplicationFlag){}[0]
    final fun plus(dev.kord.common.entity/ApplicationFlags): dev.kord.common.entity/ApplicationFlags // dev.kord.common.entity/ApplicationFlags.plus|plus(dev.kord.common.entity.ApplicationFlags){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/ApplicationFlags.toString|toString(){}[0]
    final inline fun copy(kotlin/Function1<dev.kord.common.entity/ApplicationFlags.Builder, kotlin/Unit>): dev.kord.common.entity/ApplicationFlags // dev.kord.common.entity/ApplicationFlags.copy|copy(kotlin.Function1<dev.kord.common.entity.ApplicationFlags.Builder,kotlin.Unit>){}[0]

    final class Builder { // dev.kord.common.entity/ApplicationFlags.Builder|null[0]
        constructor <init>(kotlin/Int = ...) // dev.kord.common.entity/ApplicationFlags.Builder.<init>|<init>(kotlin.Int){}[0]

        final fun (dev.kord.common.entity/ApplicationFlag).unaryMinus() // dev.kord.common.entity/ApplicationFlags.Builder.unaryMinus|unaryMinus@dev.kord.common.entity.ApplicationFlag(){}[0]
        final fun (dev.kord.common.entity/ApplicationFlag).unaryPlus() // dev.kord.common.entity/ApplicationFlags.Builder.unaryPlus|unaryPlus@dev.kord.common.entity.ApplicationFlag(){}[0]
        final fun (dev.kord.common.entity/ApplicationFlags).unaryMinus() // dev.kord.common.entity/ApplicationFlags.Builder.unaryMinus|unaryMinus@dev.kord.common.entity.ApplicationFlags(){}[0]
        final fun (dev.kord.common.entity/ApplicationFlags).unaryPlus() // dev.kord.common.entity/ApplicationFlags.Builder.unaryPlus|unaryPlus@dev.kord.common.entity.ApplicationFlags(){}[0]
        final fun build(): dev.kord.common.entity/ApplicationFlags // dev.kord.common.entity/ApplicationFlags.Builder.build|build(){}[0]
    }

    final object Companion { // dev.kord.common.entity/ApplicationFlags.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/ApplicationFlags> // dev.kord.common.entity/ApplicationFlags.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/AttachmentFlags { // dev.kord.common.entity/AttachmentFlags|null[0]
    final val value // dev.kord.common.entity/AttachmentFlags.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/AttachmentFlags.value.<get-value>|<get-value>(){}[0]
    final val values // dev.kord.common.entity/AttachmentFlags.values|{}values[0]
        final fun <get-values>(): kotlin.collections/Set<dev.kord.common.entity/AttachmentFlag> // dev.kord.common.entity/AttachmentFlags.values.<get-values>|<get-values>(){}[0]

    final fun contains(dev.kord.common.entity/AttachmentFlag): kotlin/Boolean // dev.kord.common.entity/AttachmentFlags.contains|contains(dev.kord.common.entity.AttachmentFlag){}[0]
    final fun contains(dev.kord.common.entity/AttachmentFlags): kotlin/Boolean // dev.kord.common.entity/AttachmentFlags.contains|contains(dev.kord.common.entity.AttachmentFlags){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/AttachmentFlags.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/AttachmentFlags.hashCode|hashCode(){}[0]
    final fun minus(dev.kord.common.entity/AttachmentFlag): dev.kord.common.entity/AttachmentFlags // dev.kord.common.entity/AttachmentFlags.minus|minus(dev.kord.common.entity.AttachmentFlag){}[0]
    final fun minus(dev.kord.common.entity/AttachmentFlags): dev.kord.common.entity/AttachmentFlags // dev.kord.common.entity/AttachmentFlags.minus|minus(dev.kord.common.entity.AttachmentFlags){}[0]
    final fun plus(dev.kord.common.entity/AttachmentFlag): dev.kord.common.entity/AttachmentFlags // dev.kord.common.entity/AttachmentFlags.plus|plus(dev.kord.common.entity.AttachmentFlag){}[0]
    final fun plus(dev.kord.common.entity/AttachmentFlags): dev.kord.common.entity/AttachmentFlags // dev.kord.common.entity/AttachmentFlags.plus|plus(dev.kord.common.entity.AttachmentFlags){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/AttachmentFlags.toString|toString(){}[0]
    final inline fun copy(kotlin/Function1<dev.kord.common.entity/AttachmentFlags.Builder, kotlin/Unit>): dev.kord.common.entity/AttachmentFlags // dev.kord.common.entity/AttachmentFlags.copy|copy(kotlin.Function1<dev.kord.common.entity.AttachmentFlags.Builder,kotlin.Unit>){}[0]

    final class Builder { // dev.kord.common.entity/AttachmentFlags.Builder|null[0]
        constructor <init>(kotlin/Int = ...) // dev.kord.common.entity/AttachmentFlags.Builder.<init>|<init>(kotlin.Int){}[0]

        final fun (dev.kord.common.entity/AttachmentFlag).unaryMinus() // dev.kord.common.entity/AttachmentFlags.Builder.unaryMinus|unaryMinus@dev.kord.common.entity.AttachmentFlag(){}[0]
        final fun (dev.kord.common.entity/AttachmentFlag).unaryPlus() // dev.kord.common.entity/AttachmentFlags.Builder.unaryPlus|unaryPlus@dev.kord.common.entity.AttachmentFlag(){}[0]
        final fun (dev.kord.common.entity/AttachmentFlags).unaryMinus() // dev.kord.common.entity/AttachmentFlags.Builder.unaryMinus|unaryMinus@dev.kord.common.entity.AttachmentFlags(){}[0]
        final fun (dev.kord.common.entity/AttachmentFlags).unaryPlus() // dev.kord.common.entity/AttachmentFlags.Builder.unaryPlus|unaryPlus@dev.kord.common.entity.AttachmentFlags(){}[0]
        final fun build(): dev.kord.common.entity/AttachmentFlags // dev.kord.common.entity/AttachmentFlags.Builder.build|build(){}[0]
    }

    final object Companion { // dev.kord.common.entity/AttachmentFlags.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/AttachmentFlags> // dev.kord.common.entity/AttachmentFlags.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/AuditLogEntryOptionalInfo { // dev.kord.common.entity/AuditLogEntryOptionalInfo|null[0]
    constructor <init>(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/OverwriteType> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...) // dev.kord.common.entity/AuditLogEntryOptionalInfo.<init>|<init>(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.OverwriteType>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]

    final val applicationId // dev.kord.common.entity/AuditLogEntryOptionalInfo.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/AuditLogEntryOptionalInfo.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val autoModerationRuleName // dev.kord.common.entity/AuditLogEntryOptionalInfo.autoModerationRuleName|{}autoModerationRuleName[0]
        final fun <get-autoModerationRuleName>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/AuditLogEntryOptionalInfo.autoModerationRuleName.<get-autoModerationRuleName>|<get-autoModerationRuleName>(){}[0]
    final val autoModerationRuleTriggerType // dev.kord.common.entity/AuditLogEntryOptionalInfo.autoModerationRuleTriggerType|{}autoModerationRuleTriggerType[0]
        final fun <get-autoModerationRuleTriggerType>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/AuditLogEntryOptionalInfo.autoModerationRuleTriggerType.<get-autoModerationRuleTriggerType>|<get-autoModerationRuleTriggerType>(){}[0]
    final val channelId // dev.kord.common.entity/AuditLogEntryOptionalInfo.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/AuditLogEntryOptionalInfo.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val count // dev.kord.common.entity/AuditLogEntryOptionalInfo.count|{}count[0]
        final fun <get-count>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/AuditLogEntryOptionalInfo.count.<get-count>|<get-count>(){}[0]
    final val deleteMemberDays // dev.kord.common.entity/AuditLogEntryOptionalInfo.deleteMemberDays|{}deleteMemberDays[0]
        final fun <get-deleteMemberDays>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/AuditLogEntryOptionalInfo.deleteMemberDays.<get-deleteMemberDays>|<get-deleteMemberDays>(){}[0]
    final val id // dev.kord.common.entity/AuditLogEntryOptionalInfo.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/AuditLogEntryOptionalInfo.id.<get-id>|<get-id>(){}[0]
    final val integrationType // dev.kord.common.entity/AuditLogEntryOptionalInfo.integrationType|{}integrationType[0]
        final fun <get-integrationType>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/AuditLogEntryOptionalInfo.integrationType.<get-integrationType>|<get-integrationType>(){}[0]
    final val membersRemoved // dev.kord.common.entity/AuditLogEntryOptionalInfo.membersRemoved|{}membersRemoved[0]
        final fun <get-membersRemoved>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/AuditLogEntryOptionalInfo.membersRemoved.<get-membersRemoved>|<get-membersRemoved>(){}[0]
    final val messageId // dev.kord.common.entity/AuditLogEntryOptionalInfo.messageId|{}messageId[0]
        final fun <get-messageId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/AuditLogEntryOptionalInfo.messageId.<get-messageId>|<get-messageId>(){}[0]
    final val roleName // dev.kord.common.entity/AuditLogEntryOptionalInfo.roleName|{}roleName[0]
        final fun <get-roleName>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/AuditLogEntryOptionalInfo.roleName.<get-roleName>|<get-roleName>(){}[0]
    final val type // dev.kord.common.entity/AuditLogEntryOptionalInfo.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/OverwriteType> // dev.kord.common.entity/AuditLogEntryOptionalInfo.type.<get-type>|<get-type>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/AuditLogEntryOptionalInfo.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/OverwriteType> // dev.kord.common.entity/AuditLogEntryOptionalInfo.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/AuditLogEntryOptionalInfo.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/AuditLogEntryOptionalInfo.component12|component12(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/AuditLogEntryOptionalInfo.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/AuditLogEntryOptionalInfo.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/AuditLogEntryOptionalInfo.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/AuditLogEntryOptionalInfo.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/AuditLogEntryOptionalInfo.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/AuditLogEntryOptionalInfo.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/AuditLogEntryOptionalInfo.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/AuditLogEntryOptionalInfo.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/OverwriteType> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...): dev.kord.common.entity/AuditLogEntryOptionalInfo // dev.kord.common.entity/AuditLogEntryOptionalInfo.copy|copy(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.OverwriteType>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/AuditLogEntryOptionalInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/AuditLogEntryOptionalInfo.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/AuditLogEntryOptionalInfo.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/AuditLogEntryOptionalInfo> { // dev.kord.common.entity/AuditLogEntryOptionalInfo.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/AuditLogEntryOptionalInfo.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/AuditLogEntryOptionalInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/AuditLogEntryOptionalInfo.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/AuditLogEntryOptionalInfo // dev.kord.common.entity/AuditLogEntryOptionalInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/AuditLogEntryOptionalInfo) // dev.kord.common.entity/AuditLogEntryOptionalInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.AuditLogEntryOptionalInfo){}[0]
    }

    final object Companion { // dev.kord.common.entity/AuditLogEntryOptionalInfo.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/AuditLogEntryOptionalInfo.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/AuditLogEntryOptionalInfo> // dev.kord.common.entity/AuditLogEntryOptionalInfo.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/BulkDeleteData { // dev.kord.common.entity/BulkDeleteData|null[0]
    constructor <init>(kotlin.collections/List<dev.kord.common.entity/Snowflake>, dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalSnowflake = ...) // dev.kord.common.entity/BulkDeleteData.<init>|<init>(kotlin.collections.List<dev.kord.common.entity.Snowflake>;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake){}[0]

    final val channelId // dev.kord.common.entity/BulkDeleteData.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/BulkDeleteData.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val guildId // dev.kord.common.entity/BulkDeleteData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/BulkDeleteData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val ids // dev.kord.common.entity/BulkDeleteData.ids|{}ids[0]
        final fun <get-ids>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/BulkDeleteData.ids.<get-ids>|<get-ids>(){}[0]

    final fun component1(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/BulkDeleteData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/BulkDeleteData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/BulkDeleteData.component3|component3(){}[0]
    final fun copy(kotlin.collections/List<dev.kord.common.entity/Snowflake> = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ...): dev.kord.common.entity/BulkDeleteData // dev.kord.common.entity/BulkDeleteData.copy|copy(kotlin.collections.List<dev.kord.common.entity.Snowflake>;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/BulkDeleteData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/BulkDeleteData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/BulkDeleteData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/BulkDeleteData> { // dev.kord.common.entity/BulkDeleteData.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/BulkDeleteData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/BulkDeleteData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/BulkDeleteData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/BulkDeleteData // dev.kord.common.entity/BulkDeleteData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/BulkDeleteData) // dev.kord.common.entity/BulkDeleteData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.BulkDeleteData){}[0]
    }

    final object Companion { // dev.kord.common.entity/BulkDeleteData.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/BulkDeleteData.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/BulkDeleteData> // dev.kord.common.entity/BulkDeleteData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/ChannelFlags { // dev.kord.common.entity/ChannelFlags|null[0]
    final val code // dev.kord.common.entity/ChannelFlags.code|{}code[0]
        final fun <get-code>(): kotlin/Int // dev.kord.common.entity/ChannelFlags.code.<get-code>|<get-code>(){}[0]
    final val values // dev.kord.common.entity/ChannelFlags.values|{}values[0]
        final fun <get-values>(): kotlin.collections/Set<dev.kord.common.entity/ChannelFlag> // dev.kord.common.entity/ChannelFlags.values.<get-values>|<get-values>(){}[0]

    final fun contains(dev.kord.common.entity/ChannelFlag): kotlin/Boolean // dev.kord.common.entity/ChannelFlags.contains|contains(dev.kord.common.entity.ChannelFlag){}[0]
    final fun contains(dev.kord.common.entity/ChannelFlags): kotlin/Boolean // dev.kord.common.entity/ChannelFlags.contains|contains(dev.kord.common.entity.ChannelFlags){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/ChannelFlags.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/ChannelFlags.hashCode|hashCode(){}[0]
    final fun minus(dev.kord.common.entity/ChannelFlag): dev.kord.common.entity/ChannelFlags // dev.kord.common.entity/ChannelFlags.minus|minus(dev.kord.common.entity.ChannelFlag){}[0]
    final fun minus(dev.kord.common.entity/ChannelFlags): dev.kord.common.entity/ChannelFlags // dev.kord.common.entity/ChannelFlags.minus|minus(dev.kord.common.entity.ChannelFlags){}[0]
    final fun plus(dev.kord.common.entity/ChannelFlag): dev.kord.common.entity/ChannelFlags // dev.kord.common.entity/ChannelFlags.plus|plus(dev.kord.common.entity.ChannelFlag){}[0]
    final fun plus(dev.kord.common.entity/ChannelFlags): dev.kord.common.entity/ChannelFlags // dev.kord.common.entity/ChannelFlags.plus|plus(dev.kord.common.entity.ChannelFlags){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/ChannelFlags.toString|toString(){}[0]
    final inline fun copy(kotlin/Function1<dev.kord.common.entity/ChannelFlags.Builder, kotlin/Unit>): dev.kord.common.entity/ChannelFlags // dev.kord.common.entity/ChannelFlags.copy|copy(kotlin.Function1<dev.kord.common.entity.ChannelFlags.Builder,kotlin.Unit>){}[0]

    final class Builder { // dev.kord.common.entity/ChannelFlags.Builder|null[0]
        constructor <init>(kotlin/Int = ...) // dev.kord.common.entity/ChannelFlags.Builder.<init>|<init>(kotlin.Int){}[0]

        final fun (dev.kord.common.entity/ChannelFlag).unaryMinus() // dev.kord.common.entity/ChannelFlags.Builder.unaryMinus|unaryMinus@dev.kord.common.entity.ChannelFlag(){}[0]
        final fun (dev.kord.common.entity/ChannelFlag).unaryPlus() // dev.kord.common.entity/ChannelFlags.Builder.unaryPlus|unaryPlus@dev.kord.common.entity.ChannelFlag(){}[0]
        final fun (dev.kord.common.entity/ChannelFlags).unaryMinus() // dev.kord.common.entity/ChannelFlags.Builder.unaryMinus|unaryMinus@dev.kord.common.entity.ChannelFlags(){}[0]
        final fun (dev.kord.common.entity/ChannelFlags).unaryPlus() // dev.kord.common.entity/ChannelFlags.Builder.unaryPlus|unaryPlus@dev.kord.common.entity.ChannelFlags(){}[0]
        final fun build(): dev.kord.common.entity/ChannelFlags // dev.kord.common.entity/ChannelFlags.Builder.build|build(){}[0]
    }

    final object Companion { // dev.kord.common.entity/ChannelFlags.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/ChannelFlags> // dev.kord.common.entity/ChannelFlags.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/CommandGroup : dev.kord.common.entity/Option { // dev.kord.common.entity/CommandGroup|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/SubCommand>> = ...) // dev.kord.common.entity/CommandGroup.<init>|<init>(kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.SubCommand>>){}[0]

    final val name // dev.kord.common.entity/CommandGroup.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/CommandGroup.name.<get-name>|<get-name>(){}[0]
    final val options // dev.kord.common.entity/CommandGroup.options|{}options[0]
        final fun <get-options>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/SubCommand>> // dev.kord.common.entity/CommandGroup.options.<get-options>|<get-options>(){}[0]
    final val type // dev.kord.common.entity/CommandGroup.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/CommandGroup.type.<get-type>|<get-type>(){}[0]

    final fun component1(): kotlin/String // dev.kord.common.entity/CommandGroup.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/SubCommand>> // dev.kord.common.entity/CommandGroup.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/SubCommand>> = ...): dev.kord.common.entity/CommandGroup // dev.kord.common.entity/CommandGroup.copy|copy(kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.SubCommand>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/CommandGroup.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/CommandGroup.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/CommandGroup.toString|toString(){}[0]
}

final class dev.kord.common.entity/DefaultReaction { // dev.kord.common.entity/DefaultReaction|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake?, kotlin/String?) // dev.kord.common.entity/DefaultReaction.<init>|<init>(dev.kord.common.entity.Snowflake?;kotlin.String?){}[0]

    final val emojiId // dev.kord.common.entity/DefaultReaction.emojiId|{}emojiId[0]
        final fun <get-emojiId>(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DefaultReaction.emojiId.<get-emojiId>|<get-emojiId>(){}[0]
    final val emojiName // dev.kord.common.entity/DefaultReaction.emojiName|{}emojiName[0]
        final fun <get-emojiName>(): kotlin/String? // dev.kord.common.entity/DefaultReaction.emojiName.<get-emojiName>|<get-emojiName>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DefaultReaction.component1|component1(){}[0]
    final fun component2(): kotlin/String? // dev.kord.common.entity/DefaultReaction.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake? = ..., kotlin/String? = ...): dev.kord.common.entity/DefaultReaction // dev.kord.common.entity/DefaultReaction.copy|copy(dev.kord.common.entity.Snowflake?;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DefaultReaction.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DefaultReaction.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DefaultReaction.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DefaultReaction> { // dev.kord.common.entity/DefaultReaction.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DefaultReaction.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DefaultReaction.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DefaultReaction.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DefaultReaction // dev.kord.common.entity/DefaultReaction.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DefaultReaction) // dev.kord.common.entity/DefaultReaction.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DefaultReaction){}[0]
    }

    final object Companion { // dev.kord.common.entity/DefaultReaction.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DefaultReaction> // dev.kord.common.entity/DefaultReaction.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DeletedMessage { // dev.kord.common.entity/DeletedMessage|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalSnowflake = ...) // dev.kord.common.entity/DeletedMessage.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake){}[0]

    final val channelId // dev.kord.common.entity/DeletedMessage.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DeletedMessage.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val guildId // dev.kord.common.entity/DeletedMessage.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DeletedMessage.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.common.entity/DeletedMessage.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DeletedMessage.id.<get-id>|<get-id>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DeletedMessage.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DeletedMessage.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DeletedMessage.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ...): dev.kord.common.entity/DeletedMessage // dev.kord.common.entity/DeletedMessage.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DeletedMessage.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DeletedMessage.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DeletedMessage.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DeletedMessage> { // dev.kord.common.entity/DeletedMessage.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DeletedMessage.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DeletedMessage.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DeletedMessage.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DeletedMessage // dev.kord.common.entity/DeletedMessage.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DeletedMessage) // dev.kord.common.entity/DeletedMessage.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DeletedMessage){}[0]
    }

    final object Companion { // dev.kord.common.entity/DeletedMessage.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DeletedMessage> // dev.kord.common.entity/DeletedMessage.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordActivity { // dev.kord.common.entity/DiscordActivity|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity/ActivityType, dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlinx.datetime/Instant, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityTimestamps> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityEmoji?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityParty> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityAssets> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivitySecrets> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ActivityFlags> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ...) // dev.kord.common.entity/DiscordActivity.<init>|<init>(kotlin.String;dev.kord.common.entity.ActivityType;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlinx.datetime.Instant;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordActivityTimestamps>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordActivityEmoji?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordActivityParty>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordActivityAssets>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordActivitySecrets>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ActivityFlags>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>){}[0]

    final val applicationId // dev.kord.common.entity/DiscordActivity.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordActivity.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val assets // dev.kord.common.entity/DiscordActivity.assets|{}assets[0]
        final fun <get-assets>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityAssets> // dev.kord.common.entity/DiscordActivity.assets.<get-assets>|<get-assets>(){}[0]
    final val buttons // dev.kord.common.entity/DiscordActivity.buttons|{}buttons[0]
        final fun <get-buttons>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.common.entity/DiscordActivity.buttons.<get-buttons>|<get-buttons>(){}[0]
    final val createdAt // dev.kord.common.entity/DiscordActivity.createdAt|{}createdAt[0]
        final fun <get-createdAt>(): kotlinx.datetime/Instant // dev.kord.common.entity/DiscordActivity.createdAt.<get-createdAt>|<get-createdAt>(){}[0]
    final val details // dev.kord.common.entity/DiscordActivity.details|{}details[0]
        final fun <get-details>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordActivity.details.<get-details>|<get-details>(){}[0]
    final val emoji // dev.kord.common.entity/DiscordActivity.emoji|{}emoji[0]
        final fun <get-emoji>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityEmoji?> // dev.kord.common.entity/DiscordActivity.emoji.<get-emoji>|<get-emoji>(){}[0]
    final val flags // dev.kord.common.entity/DiscordActivity.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ActivityFlags> // dev.kord.common.entity/DiscordActivity.flags.<get-flags>|<get-flags>(){}[0]
    final val instance // dev.kord.common.entity/DiscordActivity.instance|{}instance[0]
        final fun <get-instance>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordActivity.instance.<get-instance>|<get-instance>(){}[0]
    final val name // dev.kord.common.entity/DiscordActivity.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordActivity.name.<get-name>|<get-name>(){}[0]
    final val party // dev.kord.common.entity/DiscordActivity.party|{}party[0]
        final fun <get-party>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityParty> // dev.kord.common.entity/DiscordActivity.party.<get-party>|<get-party>(){}[0]
    final val secrets // dev.kord.common.entity/DiscordActivity.secrets|{}secrets[0]
        final fun <get-secrets>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivitySecrets> // dev.kord.common.entity/DiscordActivity.secrets.<get-secrets>|<get-secrets>(){}[0]
    final val state // dev.kord.common.entity/DiscordActivity.state|{}state[0]
        final fun <get-state>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordActivity.state.<get-state>|<get-state>(){}[0]
    final val timestamps // dev.kord.common.entity/DiscordActivity.timestamps|{}timestamps[0]
        final fun <get-timestamps>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityTimestamps> // dev.kord.common.entity/DiscordActivity.timestamps.<get-timestamps>|<get-timestamps>(){}[0]
    final val type // dev.kord.common.entity/DiscordActivity.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ActivityType // dev.kord.common.entity/DiscordActivity.type.<get-type>|<get-type>(){}[0]
    final val url // dev.kord.common.entity/DiscordActivity.url|{}url[0]
        final fun <get-url>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordActivity.url.<get-url>|<get-url>(){}[0]

    final fun component1(): kotlin/String // dev.kord.common.entity/DiscordActivity.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityParty> // dev.kord.common.entity/DiscordActivity.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityAssets> // dev.kord.common.entity/DiscordActivity.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivitySecrets> // dev.kord.common.entity/DiscordActivity.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordActivity.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ActivityFlags> // dev.kord.common.entity/DiscordActivity.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.common.entity/DiscordActivity.component15|component15(){}[0]
    final fun component2(): dev.kord.common.entity/ActivityType // dev.kord.common.entity/DiscordActivity.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordActivity.component3|component3(){}[0]
    final fun component4(): kotlinx.datetime/Instant // dev.kord.common.entity/DiscordActivity.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityTimestamps> // dev.kord.common.entity/DiscordActivity.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordActivity.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordActivity.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordActivity.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityEmoji?> // dev.kord.common.entity/DiscordActivity.component9|component9(){}[0]
    final fun copy(kotlin/String = ..., dev.kord.common.entity/ActivityType = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlinx.datetime/Instant = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityTimestamps> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityEmoji?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityParty> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityAssets> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivitySecrets> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ActivityFlags> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ...): dev.kord.common.entity/DiscordActivity // dev.kord.common.entity/DiscordActivity.copy|copy(kotlin.String;dev.kord.common.entity.ActivityType;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlinx.datetime.Instant;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordActivityTimestamps>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordActivityEmoji?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordActivityParty>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordActivityAssets>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordActivitySecrets>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ActivityFlags>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordActivity.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordActivity.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordActivity.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordActivity> { // dev.kord.common.entity/DiscordActivity.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordActivity.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordActivity.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordActivity.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordActivity // dev.kord.common.entity/DiscordActivity.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordActivity) // dev.kord.common.entity/DiscordActivity.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordActivity){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordActivity.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordActivity.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordActivity> // dev.kord.common.entity/DiscordActivity.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordActivityAssets { // dev.kord.common.entity/DiscordActivityAssets|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...) // dev.kord.common.entity/DiscordActivityAssets.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]

    final val largeImage // dev.kord.common.entity/DiscordActivityAssets.largeImage|{}largeImage[0]
        final fun <get-largeImage>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordActivityAssets.largeImage.<get-largeImage>|<get-largeImage>(){}[0]
    final val largeText // dev.kord.common.entity/DiscordActivityAssets.largeText|{}largeText[0]
        final fun <get-largeText>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordActivityAssets.largeText.<get-largeText>|<get-largeText>(){}[0]
    final val smallImage // dev.kord.common.entity/DiscordActivityAssets.smallImage|{}smallImage[0]
        final fun <get-smallImage>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordActivityAssets.smallImage.<get-smallImage>|<get-smallImage>(){}[0]
    final val smallText // dev.kord.common.entity/DiscordActivityAssets.smallText|{}smallText[0]
        final fun <get-smallText>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordActivityAssets.smallText.<get-smallText>|<get-smallText>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordActivityAssets.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordActivityAssets.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordActivityAssets.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordActivityAssets.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...): dev.kord.common.entity/DiscordActivityAssets // dev.kord.common.entity/DiscordActivityAssets.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordActivityAssets.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordActivityAssets.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordActivityAssets.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordActivityAssets> { // dev.kord.common.entity/DiscordActivityAssets.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordActivityAssets.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordActivityAssets.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordActivityAssets.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordActivityAssets // dev.kord.common.entity/DiscordActivityAssets.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordActivityAssets) // dev.kord.common.entity/DiscordActivityAssets.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordActivityAssets){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordActivityAssets.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordActivityAssets.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordActivityAssets> // dev.kord.common.entity/DiscordActivityAssets.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordActivityEmoji { // dev.kord.common.entity/DiscordActivityEmoji|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.common.entity/DiscordActivityEmoji.<init>|<init>(kotlin.String;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalBoolean){}[0]

    final val animated // dev.kord.common.entity/DiscordActivityEmoji.animated|{}animated[0]
        final fun <get-animated>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordActivityEmoji.animated.<get-animated>|<get-animated>(){}[0]
    final val id // dev.kord.common.entity/DiscordActivityEmoji.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordActivityEmoji.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.common.entity/DiscordActivityEmoji.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordActivityEmoji.name.<get-name>|<get-name>(){}[0]

    final fun component1(): kotlin/String // dev.kord.common.entity/DiscordActivityEmoji.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordActivityEmoji.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordActivityEmoji.component3|component3(){}[0]
    final fun copy(kotlin/String = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.common.entity/DiscordActivityEmoji // dev.kord.common.entity/DiscordActivityEmoji.copy|copy(kotlin.String;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalBoolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordActivityEmoji.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordActivityEmoji.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordActivityEmoji.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordActivityEmoji> { // dev.kord.common.entity/DiscordActivityEmoji.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordActivityEmoji.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordActivityEmoji.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordActivityEmoji.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordActivityEmoji // dev.kord.common.entity/DiscordActivityEmoji.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordActivityEmoji) // dev.kord.common.entity/DiscordActivityEmoji.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordActivityEmoji){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordActivityEmoji.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordActivityEmoji> // dev.kord.common.entity/DiscordActivityEmoji.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordActivityParty { // dev.kord.common.entity/DiscordActivityParty|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityPartySize> = ...) // dev.kord.common.entity/DiscordActivityParty.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordActivityPartySize>){}[0]

    final val id // dev.kord.common.entity/DiscordActivityParty.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordActivityParty.id.<get-id>|<get-id>(){}[0]
    final val size // dev.kord.common.entity/DiscordActivityParty.size|{}size[0]
        final fun <get-size>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityPartySize> // dev.kord.common.entity/DiscordActivityParty.size.<get-size>|<get-size>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordActivityParty.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityPartySize> // dev.kord.common.entity/DiscordActivityParty.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordActivityPartySize> = ...): dev.kord.common.entity/DiscordActivityParty // dev.kord.common.entity/DiscordActivityParty.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordActivityPartySize>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordActivityParty.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordActivityParty.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordActivityParty.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordActivityParty> { // dev.kord.common.entity/DiscordActivityParty.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordActivityParty.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordActivityParty.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordActivityParty.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordActivityParty // dev.kord.common.entity/DiscordActivityParty.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordActivityParty) // dev.kord.common.entity/DiscordActivityParty.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordActivityParty){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordActivityParty.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordActivityParty.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordActivityParty> // dev.kord.common.entity/DiscordActivityParty.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordActivityPartySize { // dev.kord.common.entity/DiscordActivityPartySize|null[0]
    constructor <init>(kotlin/Int, kotlin/Int) // dev.kord.common.entity/DiscordActivityPartySize.<init>|<init>(kotlin.Int;kotlin.Int){}[0]

    final val current // dev.kord.common.entity/DiscordActivityPartySize.current|{}current[0]
        final fun <get-current>(): kotlin/Int // dev.kord.common.entity/DiscordActivityPartySize.current.<get-current>|<get-current>(){}[0]
    final val maximum // dev.kord.common.entity/DiscordActivityPartySize.maximum|{}maximum[0]
        final fun <get-maximum>(): kotlin/Int // dev.kord.common.entity/DiscordActivityPartySize.maximum.<get-maximum>|<get-maximum>(){}[0]

    final fun component1(): kotlin/Int // dev.kord.common.entity/DiscordActivityPartySize.component1|component1(){}[0]
    final fun component2(): kotlin/Int // dev.kord.common.entity/DiscordActivityPartySize.component2|component2(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/Int = ...): dev.kord.common.entity/DiscordActivityPartySize // dev.kord.common.entity/DiscordActivityPartySize.copy|copy(kotlin.Int;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordActivityPartySize.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordActivityPartySize.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordActivityPartySize.toString|toString(){}[0]

    final object Companion { // dev.kord.common.entity/DiscordActivityPartySize.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordActivityPartySize> // dev.kord.common.entity/DiscordActivityPartySize.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordActivitySecrets { // dev.kord.common.entity/DiscordActivitySecrets|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...) // dev.kord.common.entity/DiscordActivitySecrets.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]

    final val join // dev.kord.common.entity/DiscordActivitySecrets.join|{}join[0]
        final fun <get-join>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordActivitySecrets.join.<get-join>|<get-join>(){}[0]
    final val match // dev.kord.common.entity/DiscordActivitySecrets.match|{}match[0]
        final fun <get-match>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordActivitySecrets.match.<get-match>|<get-match>(){}[0]
    final val spectate // dev.kord.common.entity/DiscordActivitySecrets.spectate|{}spectate[0]
        final fun <get-spectate>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordActivitySecrets.spectate.<get-spectate>|<get-spectate>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordActivitySecrets.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordActivitySecrets.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordActivitySecrets.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...): dev.kord.common.entity/DiscordActivitySecrets // dev.kord.common.entity/DiscordActivitySecrets.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordActivitySecrets.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordActivitySecrets.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordActivitySecrets.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordActivitySecrets> { // dev.kord.common.entity/DiscordActivitySecrets.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordActivitySecrets.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordActivitySecrets.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordActivitySecrets.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordActivitySecrets // dev.kord.common.entity/DiscordActivitySecrets.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordActivitySecrets) // dev.kord.common.entity/DiscordActivitySecrets.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordActivitySecrets){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordActivitySecrets.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordActivitySecrets.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordActivitySecrets> // dev.kord.common.entity/DiscordActivitySecrets.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordActivityTimestamps { // dev.kord.common.entity/DiscordActivityTimestamps|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ...) // dev.kord.common.entity/DiscordActivityTimestamps.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>){}[0]

    final val end // dev.kord.common.entity/DiscordActivityTimestamps.end|{}end[0]
        final fun <get-end>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.common.entity/DiscordActivityTimestamps.end.<get-end>|<get-end>(){}[0]
    final val start // dev.kord.common.entity/DiscordActivityTimestamps.start|{}start[0]
        final fun <get-start>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.common.entity/DiscordActivityTimestamps.start.<get-start>|<get-start>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.common.entity/DiscordActivityTimestamps.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.common.entity/DiscordActivityTimestamps.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ...): dev.kord.common.entity/DiscordActivityTimestamps // dev.kord.common.entity/DiscordActivityTimestamps.copy|copy(dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordActivityTimestamps.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordActivityTimestamps.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordActivityTimestamps.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordActivityTimestamps> { // dev.kord.common.entity/DiscordActivityTimestamps.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordActivityTimestamps.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordActivityTimestamps.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordActivityTimestamps.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordActivityTimestamps // dev.kord.common.entity/DiscordActivityTimestamps.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordActivityTimestamps) // dev.kord.common.entity/DiscordActivityTimestamps.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordActivityTimestamps){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordActivityTimestamps.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordActivityTimestamps.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordActivityTimestamps> // dev.kord.common.entity/DiscordActivityTimestamps.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordAddedGuildMember { // dev.kord.common.entity/DiscordAddedGuildMember|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlin.collections/List<dev.kord.common.entity/Snowflake>, kotlinx.datetime/Instant, dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ..., kotlin/Boolean, kotlin/Boolean, dev.kord.common.entity/GuildMemberFlags, dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ...) // dev.kord.common.entity/DiscordAddedGuildMember.<init>|<init>(dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlin.collections.List<dev.kord.common.entity.Snowflake>;kotlinx.datetime.Instant;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>;kotlin.Boolean;kotlin.Boolean;dev.kord.common.entity.GuildMemberFlags;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>){}[0]

    final val avatar // dev.kord.common.entity/DiscordAddedGuildMember.avatar|{}avatar[0]
        final fun <get-avatar>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordAddedGuildMember.avatar.<get-avatar>|<get-avatar>(){}[0]
    final val communicationDisabledUntil // dev.kord.common.entity/DiscordAddedGuildMember.communicationDisabledUntil|{}communicationDisabledUntil[0]
        final fun <get-communicationDisabledUntil>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordAddedGuildMember.communicationDisabledUntil.<get-communicationDisabledUntil>|<get-communicationDisabledUntil>(){}[0]
    final val deaf // dev.kord.common.entity/DiscordAddedGuildMember.deaf|{}deaf[0]
        final fun <get-deaf>(): kotlin/Boolean // dev.kord.common.entity/DiscordAddedGuildMember.deaf.<get-deaf>|<get-deaf>(){}[0]
    final val flags // dev.kord.common.entity/DiscordAddedGuildMember.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity/GuildMemberFlags // dev.kord.common.entity/DiscordAddedGuildMember.flags.<get-flags>|<get-flags>(){}[0]
    final val guildId // dev.kord.common.entity/DiscordAddedGuildMember.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordAddedGuildMember.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val joinedAt // dev.kord.common.entity/DiscordAddedGuildMember.joinedAt|{}joinedAt[0]
        final fun <get-joinedAt>(): kotlinx.datetime/Instant // dev.kord.common.entity/DiscordAddedGuildMember.joinedAt.<get-joinedAt>|<get-joinedAt>(){}[0]
    final val mute // dev.kord.common.entity/DiscordAddedGuildMember.mute|{}mute[0]
        final fun <get-mute>(): kotlin/Boolean // dev.kord.common.entity/DiscordAddedGuildMember.mute.<get-mute>|<get-mute>(){}[0]
    final val nick // dev.kord.common.entity/DiscordAddedGuildMember.nick|{}nick[0]
        final fun <get-nick>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordAddedGuildMember.nick.<get-nick>|<get-nick>(){}[0]
    final val pending // dev.kord.common.entity/DiscordAddedGuildMember.pending|{}pending[0]
        final fun <get-pending>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordAddedGuildMember.pending.<get-pending>|<get-pending>(){}[0]
    final val premiumSince // dev.kord.common.entity/DiscordAddedGuildMember.premiumSince|{}premiumSince[0]
        final fun <get-premiumSince>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordAddedGuildMember.premiumSince.<get-premiumSince>|<get-premiumSince>(){}[0]
    final val roles // dev.kord.common.entity/DiscordAddedGuildMember.roles|{}roles[0]
        final fun <get-roles>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/DiscordAddedGuildMember.roles.<get-roles>|<get-roles>(){}[0]
    final val user // dev.kord.common.entity/DiscordAddedGuildMember.user|{}user[0]
        final fun <get-user>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordAddedGuildMember.user.<get-user>|<get-user>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordAddedGuildMember.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordAddedGuildMember.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordAddedGuildMember.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordAddedGuildMember.component12|component12(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordAddedGuildMember.component2|component2(){}[0]
    final fun component3(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/DiscordAddedGuildMember.component3|component3(){}[0]
    final fun component4(): kotlinx.datetime/Instant // dev.kord.common.entity/DiscordAddedGuildMember.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordAddedGuildMember.component5|component5(){}[0]
    final fun component6(): kotlin/Boolean // dev.kord.common.entity/DiscordAddedGuildMember.component6|component6(){}[0]
    final fun component7(): kotlin/Boolean // dev.kord.common.entity/DiscordAddedGuildMember.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity/GuildMemberFlags // dev.kord.common.entity/DiscordAddedGuildMember.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordAddedGuildMember.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlin.collections/List<dev.kord.common.entity/Snowflake> = ..., kotlinx.datetime/Instant = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., dev.kord.common.entity/GuildMemberFlags = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ...): dev.kord.common.entity/DiscordAddedGuildMember // dev.kord.common.entity/DiscordAddedGuildMember.copy|copy(dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlin.collections.List<dev.kord.common.entity.Snowflake>;kotlinx.datetime.Instant;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>;kotlin.Boolean;kotlin.Boolean;dev.kord.common.entity.GuildMemberFlags;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordAddedGuildMember.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordAddedGuildMember.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordAddedGuildMember.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordAddedGuildMember> { // dev.kord.common.entity/DiscordAddedGuildMember.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordAddedGuildMember.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordAddedGuildMember.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordAddedGuildMember.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordAddedGuildMember // dev.kord.common.entity/DiscordAddedGuildMember.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordAddedGuildMember) // dev.kord.common.entity/DiscordAddedGuildMember.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordAddedGuildMember){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordAddedGuildMember.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordAddedGuildMember.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordAddedGuildMember> // dev.kord.common.entity/DiscordAddedGuildMember.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordApplication : dev.kord.common.entity/BaseDiscordApplication { // dev.kord.common.entity/DiscordApplication|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/String?, kotlin/String, dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., kotlin/Boolean, kotlin/Boolean, dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., kotlin/String, dev.kord.common.entity/DiscordTeam?, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationFlags> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InstallParams> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...) // dev.kord.common.entity/DiscordApplication.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String?;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;kotlin.Boolean;kotlin.Boolean;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;kotlin.String;dev.kord.common.entity.DiscordTeam?;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ApplicationFlags>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.InstallParams>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]

    final val botPublic // dev.kord.common.entity/DiscordApplication.botPublic|{}botPublic[0]
        final fun <get-botPublic>(): kotlin/Boolean // dev.kord.common.entity/DiscordApplication.botPublic.<get-botPublic>|<get-botPublic>(){}[0]
    final val botRequireCodeGrant // dev.kord.common.entity/DiscordApplication.botRequireCodeGrant|{}botRequireCodeGrant[0]
        final fun <get-botRequireCodeGrant>(): kotlin/Boolean // dev.kord.common.entity/DiscordApplication.botRequireCodeGrant.<get-botRequireCodeGrant>|<get-botRequireCodeGrant>(){}[0]
    final val coverImage // dev.kord.common.entity/DiscordApplication.coverImage|{}coverImage[0]
        final fun <get-coverImage>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordApplication.coverImage.<get-coverImage>|<get-coverImage>(){}[0]
    final val customInstallUrl // dev.kord.common.entity/DiscordApplication.customInstallUrl|{}customInstallUrl[0]
        final fun <get-customInstallUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordApplication.customInstallUrl.<get-customInstallUrl>|<get-customInstallUrl>(){}[0]
    final val description // dev.kord.common.entity/DiscordApplication.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.common.entity/DiscordApplication.description.<get-description>|<get-description>(){}[0]
    final val flags // dev.kord.common.entity/DiscordApplication.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationFlags> // dev.kord.common.entity/DiscordApplication.flags.<get-flags>|<get-flags>(){}[0]
    final val guildId // dev.kord.common.entity/DiscordApplication.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordApplication.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val icon // dev.kord.common.entity/DiscordApplication.icon|{}icon[0]
        final fun <get-icon>(): kotlin/String? // dev.kord.common.entity/DiscordApplication.icon.<get-icon>|<get-icon>(){}[0]
    final val id // dev.kord.common.entity/DiscordApplication.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordApplication.id.<get-id>|<get-id>(){}[0]
    final val installParams // dev.kord.common.entity/DiscordApplication.installParams|{}installParams[0]
        final fun <get-installParams>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InstallParams> // dev.kord.common.entity/DiscordApplication.installParams.<get-installParams>|<get-installParams>(){}[0]
    final val name // dev.kord.common.entity/DiscordApplication.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordApplication.name.<get-name>|<get-name>(){}[0]
    final val owner // dev.kord.common.entity/DiscordApplication.owner|{}owner[0]
        final fun <get-owner>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordApplication.owner.<get-owner>|<get-owner>(){}[0]
    final val primarySkuId // dev.kord.common.entity/DiscordApplication.primarySkuId|{}primarySkuId[0]
        final fun <get-primarySkuId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordApplication.primarySkuId.<get-primarySkuId>|<get-primarySkuId>(){}[0]
    final val privacyPolicyUrl // dev.kord.common.entity/DiscordApplication.privacyPolicyUrl|{}privacyPolicyUrl[0]
        final fun <get-privacyPolicyUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordApplication.privacyPolicyUrl.<get-privacyPolicyUrl>|<get-privacyPolicyUrl>(){}[0]
    final val roleConnectionsVerificationUrl // dev.kord.common.entity/DiscordApplication.roleConnectionsVerificationUrl|{}roleConnectionsVerificationUrl[0]
        final fun <get-roleConnectionsVerificationUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordApplication.roleConnectionsVerificationUrl.<get-roleConnectionsVerificationUrl>|<get-roleConnectionsVerificationUrl>(){}[0]
    final val rpcOrigins // dev.kord.common.entity/DiscordApplication.rpcOrigins|{}rpcOrigins[0]
        final fun <get-rpcOrigins>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.common.entity/DiscordApplication.rpcOrigins.<get-rpcOrigins>|<get-rpcOrigins>(){}[0]
    final val slug // dev.kord.common.entity/DiscordApplication.slug|{}slug[0]
        final fun <get-slug>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordApplication.slug.<get-slug>|<get-slug>(){}[0]
    final val tags // dev.kord.common.entity/DiscordApplication.tags|{}tags[0]
        final fun <get-tags>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.common.entity/DiscordApplication.tags.<get-tags>|<get-tags>(){}[0]
    final val team // dev.kord.common.entity/DiscordApplication.team|{}team[0]
        final fun <get-team>(): dev.kord.common.entity/DiscordTeam? // dev.kord.common.entity/DiscordApplication.team.<get-team>|<get-team>(){}[0]
    final val termsOfServiceUrl // dev.kord.common.entity/DiscordApplication.termsOfServiceUrl|{}termsOfServiceUrl[0]
        final fun <get-termsOfServiceUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordApplication.termsOfServiceUrl.<get-termsOfServiceUrl>|<get-termsOfServiceUrl>(){}[0]
    final val verifyKey // dev.kord.common.entity/DiscordApplication.verifyKey|{}verifyKey[0]
        final fun <get-verifyKey>(): kotlin/String // dev.kord.common.entity/DiscordApplication.verifyKey.<get-verifyKey>|<get-verifyKey>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordApplication.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordApplication.component10|component10(){}[0]
    final fun component11(): kotlin/String // dev.kord.common.entity/DiscordApplication.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity/DiscordTeam? // dev.kord.common.entity/DiscordApplication.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordApplication.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordApplication.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordApplication.component15|component15(){}[0]
    final fun component16(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordApplication.component16|component16(){}[0]
    final fun component17(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationFlags> // dev.kord.common.entity/DiscordApplication.component17|component17(){}[0]
    final fun component18(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.common.entity/DiscordApplication.component18|component18(){}[0]
    final fun component19(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InstallParams> // dev.kord.common.entity/DiscordApplication.component19|component19(){}[0]
    final fun component2(): kotlin/String // dev.kord.common.entity/DiscordApplication.component2|component2(){}[0]
    final fun component20(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordApplication.component20|component20(){}[0]
    final fun component21(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordApplication.component21|component21(){}[0]
    final fun component3(): kotlin/String? // dev.kord.common.entity/DiscordApplication.component3|component3(){}[0]
    final fun component4(): kotlin/String // dev.kord.common.entity/DiscordApplication.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.common.entity/DiscordApplication.component5|component5(){}[0]
    final fun component6(): kotlin/Boolean // dev.kord.common.entity/DiscordApplication.component6|component6(){}[0]
    final fun component7(): kotlin/Boolean // dev.kord.common.entity/DiscordApplication.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordApplication.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordApplication.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., kotlin/String? = ..., kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., kotlin/String = ..., dev.kord.common.entity/DiscordTeam? = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationFlags> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InstallParams> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...): dev.kord.common.entity/DiscordApplication // dev.kord.common.entity/DiscordApplication.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String?;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;kotlin.Boolean;kotlin.Boolean;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;kotlin.String;dev.kord.common.entity.DiscordTeam?;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ApplicationFlags>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.InstallParams>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordApplication.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordApplication.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordApplication.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordApplication> { // dev.kord.common.entity/DiscordApplication.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordApplication.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordApplication.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordApplication.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordApplication // dev.kord.common.entity/DiscordApplication.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordApplication) // dev.kord.common.entity/DiscordApplication.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordApplication){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordApplication.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordApplication.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordApplication> // dev.kord.common.entity/DiscordApplication.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordApplicationCommand { // dev.kord.common.entity/DiscordApplicationCommand|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationCommandType> = ..., dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> = ..., kotlin/String?, dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ApplicationCommandOption>> = ..., dev.kord.common.entity/Permissions?, dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean? = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity/Snowflake) // dev.kord.common.entity/DiscordApplicationCommand.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ApplicationCommandType>;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>;kotlin.String?;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.ApplicationCommandOption>>;dev.kord.common.entity.Permissions?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.Snowflake){}[0]

    final val applicationId // dev.kord.common.entity/DiscordApplicationCommand.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordApplicationCommand.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val defaultMemberPermissions // dev.kord.common.entity/DiscordApplicationCommand.defaultMemberPermissions|{}defaultMemberPermissions[0]
        final fun <get-defaultMemberPermissions>(): dev.kord.common.entity/Permissions? // dev.kord.common.entity/DiscordApplicationCommand.defaultMemberPermissions.<get-defaultMemberPermissions>|<get-defaultMemberPermissions>(){}[0]
    final val defaultPermission // dev.kord.common.entity/DiscordApplicationCommand.defaultPermission|{}defaultPermission[0]
        final fun <get-defaultPermission>(): dev.kord.common.entity.optional/OptionalBoolean? // dev.kord.common.entity/DiscordApplicationCommand.defaultPermission.<get-defaultPermission>|<get-defaultPermission>(){}[0]
    final val description // dev.kord.common.entity/DiscordApplicationCommand.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.common.entity/DiscordApplicationCommand.description.<get-description>|<get-description>(){}[0]
    final val descriptionLocalizations // dev.kord.common.entity/DiscordApplicationCommand.descriptionLocalizations|{}descriptionLocalizations[0]
        final fun <get-descriptionLocalizations>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.common.entity/DiscordApplicationCommand.descriptionLocalizations.<get-descriptionLocalizations>|<get-descriptionLocalizations>(){}[0]
    final val dmPermission // dev.kord.common.entity/DiscordApplicationCommand.dmPermission|{}dmPermission[0]
        final fun <get-dmPermission>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordApplicationCommand.dmPermission.<get-dmPermission>|<get-dmPermission>(){}[0]
    final val guildId // dev.kord.common.entity/DiscordApplicationCommand.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordApplicationCommand.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.common.entity/DiscordApplicationCommand.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordApplicationCommand.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.common.entity/DiscordApplicationCommand.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordApplicationCommand.name.<get-name>|<get-name>(){}[0]
    final val nameLocalizations // dev.kord.common.entity/DiscordApplicationCommand.nameLocalizations|{}nameLocalizations[0]
        final fun <get-nameLocalizations>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.common.entity/DiscordApplicationCommand.nameLocalizations.<get-nameLocalizations>|<get-nameLocalizations>(){}[0]
    final val nsfw // dev.kord.common.entity/DiscordApplicationCommand.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordApplicationCommand.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
    final val options // dev.kord.common.entity/DiscordApplicationCommand.options|{}options[0]
        final fun <get-options>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ApplicationCommandOption>> // dev.kord.common.entity/DiscordApplicationCommand.options.<get-options>|<get-options>(){}[0]
    final val type // dev.kord.common.entity/DiscordApplicationCommand.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationCommandType> // dev.kord.common.entity/DiscordApplicationCommand.type.<get-type>|<get-type>(){}[0]
    final val version // dev.kord.common.entity/DiscordApplicationCommand.version|{}version[0]
        final fun <get-version>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordApplicationCommand.version.<get-version>|<get-version>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordApplicationCommand.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity/Permissions? // dev.kord.common.entity/DiscordApplicationCommand.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordApplicationCommand.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/OptionalBoolean? // dev.kord.common.entity/DiscordApplicationCommand.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordApplicationCommand.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordApplicationCommand.component14|component14(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationCommandType> // dev.kord.common.entity/DiscordApplicationCommand.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordApplicationCommand.component3|component3(){}[0]
    final fun component4(): kotlin/String // dev.kord.common.entity/DiscordApplicationCommand.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.common.entity/DiscordApplicationCommand.component5|component5(){}[0]
    final fun component6(): kotlin/String? // dev.kord.common.entity/DiscordApplicationCommand.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.common.entity/DiscordApplicationCommand.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordApplicationCommand.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ApplicationCommandOption>> // dev.kord.common.entity/DiscordApplicationCommand.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationCommandType> = ..., dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> = ..., kotlin/String? = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ApplicationCommandOption>> = ..., dev.kord.common.entity/Permissions? = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean? = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity/Snowflake = ...): dev.kord.common.entity/DiscordApplicationCommand // dev.kord.common.entity/DiscordApplicationCommand.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ApplicationCommandType>;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>;kotlin.String?;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.ApplicationCommandOption>>;dev.kord.common.entity.Permissions?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.Snowflake){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordApplicationCommand.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordApplicationCommand.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordApplicationCommand.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordApplicationCommand> { // dev.kord.common.entity/DiscordApplicationCommand.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordApplicationCommand.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordApplicationCommand.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordApplicationCommand.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordApplicationCommand // dev.kord.common.entity/DiscordApplicationCommand.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordApplicationCommand) // dev.kord.common.entity/DiscordApplicationCommand.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordApplicationCommand){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordApplicationCommand.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordApplicationCommand.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordApplicationCommand> // dev.kord.common.entity/DiscordApplicationCommand.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata { // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata|null[0]
    constructor <init>(dev.kord.common.entity/ApplicationRoleConnectionMetadataType, kotlin/String, kotlin/String, dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>> = ..., kotlin/String, dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>> = ...) // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.<init>|<init>(dev.kord.common.entity.ApplicationRoleConnectionMetadataType;kotlin.String;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>>;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>>){}[0]

    final val description // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.description.<get-description>|<get-description>(){}[0]
    final val descriptionLocalizations // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.descriptionLocalizations|{}descriptionLocalizations[0]
        final fun <get-descriptionLocalizations>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>> // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.descriptionLocalizations.<get-descriptionLocalizations>|<get-descriptionLocalizations>(){}[0]
    final val key // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.key|{}key[0]
        final fun <get-key>(): kotlin/String // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.key.<get-key>|<get-key>(){}[0]
    final val name // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.name.<get-name>|<get-name>(){}[0]
    final val nameLocalizations // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.nameLocalizations|{}nameLocalizations[0]
        final fun <get-nameLocalizations>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>> // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.nameLocalizations.<get-nameLocalizations>|<get-nameLocalizations>(){}[0]
    final val type // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ApplicationRoleConnectionMetadataType // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.type.<get-type>|<get-type>(){}[0]

    final fun component1(): dev.kord.common.entity/ApplicationRoleConnectionMetadataType // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.component2|component2(){}[0]
    final fun component3(): kotlin/String // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>> // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.component4|component4(){}[0]
    final fun component5(): kotlin/String // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>> // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.component6|component6(){}[0]
    final fun copy(dev.kord.common.entity/ApplicationRoleConnectionMetadataType = ..., kotlin/String = ..., kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>> = ..., kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>> = ...): dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.copy|copy(dev.kord.common.entity.ApplicationRoleConnectionMetadataType;kotlin.String;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>>;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata> { // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata) // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordApplicationRoleConnectionMetadata){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata> // dev.kord.common.entity/DiscordApplicationRoleConnectionMetadata.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordAttachment { // dev.kord.common.entity/DiscordAttachment|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., kotlin/Int, kotlin/String, kotlin/String, dev.kord.common.entity.optional/OptionalInt? = ..., dev.kord.common.entity.optional/OptionalInt? = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AttachmentFlags> = ...) // dev.kord.common.entity/DiscordAttachment.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;kotlin.Int;kotlin.String;kotlin.String;dev.kord.common.entity.optional.OptionalInt?;dev.kord.common.entity.optional.OptionalInt?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.AttachmentFlags>){}[0]

    final val contentType // dev.kord.common.entity/DiscordAttachment.contentType|{}contentType[0]
        final fun <get-contentType>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordAttachment.contentType.<get-contentType>|<get-contentType>(){}[0]
    final val description // dev.kord.common.entity/DiscordAttachment.description|{}description[0]
        final fun <get-description>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordAttachment.description.<get-description>|<get-description>(){}[0]
    final val durationSecs // dev.kord.common.entity/DiscordAttachment.durationSecs|{}durationSecs[0]
        final fun <get-durationSecs>(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.common.entity/DiscordAttachment.durationSecs.<get-durationSecs>|<get-durationSecs>(){}[0]
    final val ephemeral // dev.kord.common.entity/DiscordAttachment.ephemeral|{}ephemeral[0]
        final fun <get-ephemeral>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordAttachment.ephemeral.<get-ephemeral>|<get-ephemeral>(){}[0]
    final val filename // dev.kord.common.entity/DiscordAttachment.filename|{}filename[0]
        final fun <get-filename>(): kotlin/String // dev.kord.common.entity/DiscordAttachment.filename.<get-filename>|<get-filename>(){}[0]
    final val flags // dev.kord.common.entity/DiscordAttachment.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AttachmentFlags> // dev.kord.common.entity/DiscordAttachment.flags.<get-flags>|<get-flags>(){}[0]
    final val height // dev.kord.common.entity/DiscordAttachment.height|{}height[0]
        final fun <get-height>(): dev.kord.common.entity.optional/OptionalInt? // dev.kord.common.entity/DiscordAttachment.height.<get-height>|<get-height>(){}[0]
    final val id // dev.kord.common.entity/DiscordAttachment.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordAttachment.id.<get-id>|<get-id>(){}[0]
    final val proxyUrl // dev.kord.common.entity/DiscordAttachment.proxyUrl|{}proxyUrl[0]
        final fun <get-proxyUrl>(): kotlin/String // dev.kord.common.entity/DiscordAttachment.proxyUrl.<get-proxyUrl>|<get-proxyUrl>(){}[0]
    final val size // dev.kord.common.entity/DiscordAttachment.size|{}size[0]
        final fun <get-size>(): kotlin/Int // dev.kord.common.entity/DiscordAttachment.size.<get-size>|<get-size>(){}[0]
    final val url // dev.kord.common.entity/DiscordAttachment.url|{}url[0]
        final fun <get-url>(): kotlin/String // dev.kord.common.entity/DiscordAttachment.url.<get-url>|<get-url>(){}[0]
    final val waveform // dev.kord.common.entity/DiscordAttachment.waveform|{}waveform[0]
        final fun <get-waveform>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordAttachment.waveform.<get-waveform>|<get-waveform>(){}[0]
    final val width // dev.kord.common.entity/DiscordAttachment.width|{}width[0]
        final fun <get-width>(): dev.kord.common.entity.optional/OptionalInt? // dev.kord.common.entity/DiscordAttachment.width.<get-width>|<get-width>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordAttachment.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordAttachment.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.common.entity/DiscordAttachment.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordAttachment.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AttachmentFlags> // dev.kord.common.entity/DiscordAttachment.component13|component13(){}[0]
    final fun component2(): kotlin/String // dev.kord.common.entity/DiscordAttachment.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordAttachment.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordAttachment.component4|component4(){}[0]
    final fun component5(): kotlin/Int // dev.kord.common.entity/DiscordAttachment.component5|component5(){}[0]
    final fun component6(): kotlin/String // dev.kord.common.entity/DiscordAttachment.component6|component6(){}[0]
    final fun component7(): kotlin/String // dev.kord.common.entity/DiscordAttachment.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/OptionalInt? // dev.kord.common.entity/DiscordAttachment.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/OptionalInt? // dev.kord.common.entity/DiscordAttachment.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., kotlin/Int = ..., kotlin/String = ..., kotlin/String = ..., dev.kord.common.entity.optional/OptionalInt? = ..., dev.kord.common.entity.optional/OptionalInt? = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AttachmentFlags> = ...): dev.kord.common.entity/DiscordAttachment // dev.kord.common.entity/DiscordAttachment.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;kotlin.Int;kotlin.String;kotlin.String;dev.kord.common.entity.optional.OptionalInt?;dev.kord.common.entity.optional.OptionalInt?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.AttachmentFlags>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordAttachment.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordAttachment.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordAttachment.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordAttachment> { // dev.kord.common.entity/DiscordAttachment.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordAttachment.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordAttachment.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordAttachment.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordAttachment // dev.kord.common.entity/DiscordAttachment.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordAttachment) // dev.kord.common.entity/DiscordAttachment.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordAttachment){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordAttachment.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordAttachment.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordAttachment> // dev.kord.common.entity/DiscordAttachment.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordAuditLog { // dev.kord.common.entity/DiscordAuditLog|null[0]
    constructor <init>(kotlin.collections/List<dev.kord.common.entity/DiscordWebhook>, kotlin.collections/List<dev.kord.common.entity/DiscordUser>, kotlin.collections/List<dev.kord.common.entity/DiscordApplicationCommand>, kotlin.collections/List<dev.kord.common.entity/DiscordAuditLogEntry>, kotlin.collections/List<dev.kord.common.entity/DiscordAutoModerationRule>, kotlin.collections/List<dev.kord.common.entity/DiscordPartialIntegration>, kotlin.collections/List<dev.kord.common.entity/DiscordChannel>) // dev.kord.common.entity/DiscordAuditLog.<init>|<init>(kotlin.collections.List<dev.kord.common.entity.DiscordWebhook>;kotlin.collections.List<dev.kord.common.entity.DiscordUser>;kotlin.collections.List<dev.kord.common.entity.DiscordApplicationCommand>;kotlin.collections.List<dev.kord.common.entity.DiscordAuditLogEntry>;kotlin.collections.List<dev.kord.common.entity.DiscordAutoModerationRule>;kotlin.collections.List<dev.kord.common.entity.DiscordPartialIntegration>;kotlin.collections.List<dev.kord.common.entity.DiscordChannel>){}[0]

    final val applicationCommands // dev.kord.common.entity/DiscordAuditLog.applicationCommands|{}applicationCommands[0]
        final fun <get-applicationCommands>(): kotlin.collections/List<dev.kord.common.entity/DiscordApplicationCommand> // dev.kord.common.entity/DiscordAuditLog.applicationCommands.<get-applicationCommands>|<get-applicationCommands>(){}[0]
    final val auditLogEntries // dev.kord.common.entity/DiscordAuditLog.auditLogEntries|{}auditLogEntries[0]
        final fun <get-auditLogEntries>(): kotlin.collections/List<dev.kord.common.entity/DiscordAuditLogEntry> // dev.kord.common.entity/DiscordAuditLog.auditLogEntries.<get-auditLogEntries>|<get-auditLogEntries>(){}[0]
    final val autoModerationRules // dev.kord.common.entity/DiscordAuditLog.autoModerationRules|{}autoModerationRules[0]
        final fun <get-autoModerationRules>(): kotlin.collections/List<dev.kord.common.entity/DiscordAutoModerationRule> // dev.kord.common.entity/DiscordAuditLog.autoModerationRules.<get-autoModerationRules>|<get-autoModerationRules>(){}[0]
    final val integrations // dev.kord.common.entity/DiscordAuditLog.integrations|{}integrations[0]
        final fun <get-integrations>(): kotlin.collections/List<dev.kord.common.entity/DiscordPartialIntegration> // dev.kord.common.entity/DiscordAuditLog.integrations.<get-integrations>|<get-integrations>(){}[0]
    final val threads // dev.kord.common.entity/DiscordAuditLog.threads|{}threads[0]
        final fun <get-threads>(): kotlin.collections/List<dev.kord.common.entity/DiscordChannel> // dev.kord.common.entity/DiscordAuditLog.threads.<get-threads>|<get-threads>(){}[0]
    final val users // dev.kord.common.entity/DiscordAuditLog.users|{}users[0]
        final fun <get-users>(): kotlin.collections/List<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordAuditLog.users.<get-users>|<get-users>(){}[0]
    final val webhooks // dev.kord.common.entity/DiscordAuditLog.webhooks|{}webhooks[0]
        final fun <get-webhooks>(): kotlin.collections/List<dev.kord.common.entity/DiscordWebhook> // dev.kord.common.entity/DiscordAuditLog.webhooks.<get-webhooks>|<get-webhooks>(){}[0]

    final fun component1(): kotlin.collections/List<dev.kord.common.entity/DiscordWebhook> // dev.kord.common.entity/DiscordAuditLog.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordAuditLog.component2|component2(){}[0]
    final fun component3(): kotlin.collections/List<dev.kord.common.entity/DiscordApplicationCommand> // dev.kord.common.entity/DiscordAuditLog.component3|component3(){}[0]
    final fun component4(): kotlin.collections/List<dev.kord.common.entity/DiscordAuditLogEntry> // dev.kord.common.entity/DiscordAuditLog.component4|component4(){}[0]
    final fun component5(): kotlin.collections/List<dev.kord.common.entity/DiscordAutoModerationRule> // dev.kord.common.entity/DiscordAuditLog.component5|component5(){}[0]
    final fun component6(): kotlin.collections/List<dev.kord.common.entity/DiscordPartialIntegration> // dev.kord.common.entity/DiscordAuditLog.component6|component6(){}[0]
    final fun component7(): kotlin.collections/List<dev.kord.common.entity/DiscordChannel> // dev.kord.common.entity/DiscordAuditLog.component7|component7(){}[0]
    final fun copy(kotlin.collections/List<dev.kord.common.entity/DiscordWebhook> = ..., kotlin.collections/List<dev.kord.common.entity/DiscordUser> = ..., kotlin.collections/List<dev.kord.common.entity/DiscordApplicationCommand> = ..., kotlin.collections/List<dev.kord.common.entity/DiscordAuditLogEntry> = ..., kotlin.collections/List<dev.kord.common.entity/DiscordAutoModerationRule> = ..., kotlin.collections/List<dev.kord.common.entity/DiscordPartialIntegration> = ..., kotlin.collections/List<dev.kord.common.entity/DiscordChannel> = ...): dev.kord.common.entity/DiscordAuditLog // dev.kord.common.entity/DiscordAuditLog.copy|copy(kotlin.collections.List<dev.kord.common.entity.DiscordWebhook>;kotlin.collections.List<dev.kord.common.entity.DiscordUser>;kotlin.collections.List<dev.kord.common.entity.DiscordApplicationCommand>;kotlin.collections.List<dev.kord.common.entity.DiscordAuditLogEntry>;kotlin.collections.List<dev.kord.common.entity.DiscordAutoModerationRule>;kotlin.collections.List<dev.kord.common.entity.DiscordPartialIntegration>;kotlin.collections.List<dev.kord.common.entity.DiscordChannel>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordAuditLog.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordAuditLog.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordAuditLog.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordAuditLog> { // dev.kord.common.entity/DiscordAuditLog.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordAuditLog.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordAuditLog.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordAuditLog.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordAuditLog // dev.kord.common.entity/DiscordAuditLog.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordAuditLog) // dev.kord.common.entity/DiscordAuditLog.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordAuditLog){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordAuditLog.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordAuditLog.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordAuditLog> // dev.kord.common.entity/DiscordAuditLog.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordAuditLogEntry { // dev.kord.common.entity/DiscordAuditLogEntry|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake?, dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/AuditLogChange<in kotlin/Any?>>> = ..., dev.kord.common.entity/Snowflake?, dev.kord.common.entity/Snowflake, dev.kord.common.entity/AuditLogEvent, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AuditLogEntryOptionalInfo> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...) // dev.kord.common.entity/DiscordAuditLogEntry.<init>|<init>(dev.kord.common.entity.Snowflake?;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.AuditLogChange<in|kotlin.Any?>>>;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.Snowflake;dev.kord.common.entity.AuditLogEvent;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.AuditLogEntryOptionalInfo>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]

    final val actionType // dev.kord.common.entity/DiscordAuditLogEntry.actionType|{}actionType[0]
        final fun <get-actionType>(): dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/DiscordAuditLogEntry.actionType.<get-actionType>|<get-actionType>(){}[0]
    final val changes // dev.kord.common.entity/DiscordAuditLogEntry.changes|{}changes[0]
        final fun <get-changes>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/AuditLogChange<in kotlin/Any?>>> // dev.kord.common.entity/DiscordAuditLogEntry.changes.<get-changes>|<get-changes>(){}[0]
    final val id // dev.kord.common.entity/DiscordAuditLogEntry.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordAuditLogEntry.id.<get-id>|<get-id>(){}[0]
    final val options // dev.kord.common.entity/DiscordAuditLogEntry.options|{}options[0]
        final fun <get-options>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AuditLogEntryOptionalInfo> // dev.kord.common.entity/DiscordAuditLogEntry.options.<get-options>|<get-options>(){}[0]
    final val reason // dev.kord.common.entity/DiscordAuditLogEntry.reason|{}reason[0]
        final fun <get-reason>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordAuditLogEntry.reason.<get-reason>|<get-reason>(){}[0]
    final val targetId // dev.kord.common.entity/DiscordAuditLogEntry.targetId|{}targetId[0]
        final fun <get-targetId>(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordAuditLogEntry.targetId.<get-targetId>|<get-targetId>(){}[0]
    final val userId // dev.kord.common.entity/DiscordAuditLogEntry.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordAuditLogEntry.userId.<get-userId>|<get-userId>(){}[0]

    final fun <#A1: kotlin/Any?> get(dev.kord.common.entity/AuditLogChangeKey<#A1>): dev.kord.common.entity/AuditLogChange<#A1>? // dev.kord.common.entity/DiscordAuditLogEntry.get|get(dev.kord.common.entity.AuditLogChangeKey<0:0>){0§<kotlin.Any?>}[0]
    final fun component1(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordAuditLogEntry.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/AuditLogChange<in kotlin/Any?>>> // dev.kord.common.entity/DiscordAuditLogEntry.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordAuditLogEntry.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordAuditLogEntry.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/DiscordAuditLogEntry.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AuditLogEntryOptionalInfo> // dev.kord.common.entity/DiscordAuditLogEntry.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordAuditLogEntry.component7|component7(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake? = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/AuditLogChange<in kotlin/Any?>>> = ..., dev.kord.common.entity/Snowflake? = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/AuditLogEvent = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/AuditLogEntryOptionalInfo> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...): dev.kord.common.entity/DiscordAuditLogEntry // dev.kord.common.entity/DiscordAuditLogEntry.copy|copy(dev.kord.common.entity.Snowflake?;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.AuditLogChange<in|kotlin.Any?>>>;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.Snowflake;dev.kord.common.entity.AuditLogEvent;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.AuditLogEntryOptionalInfo>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordAuditLogEntry.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordAuditLogEntry.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordAuditLogEntry.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordAuditLogEntry> { // dev.kord.common.entity/DiscordAuditLogEntry.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordAuditLogEntry.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordAuditLogEntry.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordAuditLogEntry.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordAuditLogEntry // dev.kord.common.entity/DiscordAuditLogEntry.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordAuditLogEntry) // dev.kord.common.entity/DiscordAuditLogEntry.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordAuditLogEntry){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordAuditLogEntry.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordAuditLogEntry.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordAuditLogEntry> // dev.kord.common.entity/DiscordAuditLogEntry.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordAuditLogRoleChange { // dev.kord.common.entity/DiscordAuditLogRoleChange|null[0]
    constructor <init>(kotlin/String, kotlin/String? = ..., kotlin/Int? = ..., kotlin/Boolean? = ..., kotlin/Int? = ..., dev.kord.common.entity/Permissions? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ...) // dev.kord.common.entity/DiscordAuditLogRoleChange.<init>|<init>(kotlin.String;kotlin.String?;kotlin.Int?;kotlin.Boolean?;kotlin.Int?;dev.kord.common.entity.Permissions?;kotlin.Boolean?;kotlin.Boolean?){}[0]

    final val color // dev.kord.common.entity/DiscordAuditLogRoleChange.color|{}color[0]
        final fun <get-color>(): kotlin/Int? // dev.kord.common.entity/DiscordAuditLogRoleChange.color.<get-color>|<get-color>(){}[0]
    final val hoist // dev.kord.common.entity/DiscordAuditLogRoleChange.hoist|{}hoist[0]
        final fun <get-hoist>(): kotlin/Boolean? // dev.kord.common.entity/DiscordAuditLogRoleChange.hoist.<get-hoist>|<get-hoist>(){}[0]
    final val id // dev.kord.common.entity/DiscordAuditLogRoleChange.id|{}id[0]
        final fun <get-id>(): kotlin/String // dev.kord.common.entity/DiscordAuditLogRoleChange.id.<get-id>|<get-id>(){}[0]
    final val managed // dev.kord.common.entity/DiscordAuditLogRoleChange.managed|{}managed[0]
        final fun <get-managed>(): kotlin/Boolean? // dev.kord.common.entity/DiscordAuditLogRoleChange.managed.<get-managed>|<get-managed>(){}[0]
    final val mentionable // dev.kord.common.entity/DiscordAuditLogRoleChange.mentionable|{}mentionable[0]
        final fun <get-mentionable>(): kotlin/Boolean? // dev.kord.common.entity/DiscordAuditLogRoleChange.mentionable.<get-mentionable>|<get-mentionable>(){}[0]
    final val name // dev.kord.common.entity/DiscordAuditLogRoleChange.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.common.entity/DiscordAuditLogRoleChange.name.<get-name>|<get-name>(){}[0]
    final val permissions // dev.kord.common.entity/DiscordAuditLogRoleChange.permissions|{}permissions[0]
        final fun <get-permissions>(): dev.kord.common.entity/Permissions? // dev.kord.common.entity/DiscordAuditLogRoleChange.permissions.<get-permissions>|<get-permissions>(){}[0]
    final val position // dev.kord.common.entity/DiscordAuditLogRoleChange.position|{}position[0]
        final fun <get-position>(): kotlin/Int? // dev.kord.common.entity/DiscordAuditLogRoleChange.position.<get-position>|<get-position>(){}[0]

    final fun component1(): kotlin/String // dev.kord.common.entity/DiscordAuditLogRoleChange.component1|component1(){}[0]
    final fun component2(): kotlin/String? // dev.kord.common.entity/DiscordAuditLogRoleChange.component2|component2(){}[0]
    final fun component3(): kotlin/Int? // dev.kord.common.entity/DiscordAuditLogRoleChange.component3|component3(){}[0]
    final fun component4(): kotlin/Boolean? // dev.kord.common.entity/DiscordAuditLogRoleChange.component4|component4(){}[0]
    final fun component5(): kotlin/Int? // dev.kord.common.entity/DiscordAuditLogRoleChange.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity/Permissions? // dev.kord.common.entity/DiscordAuditLogRoleChange.component6|component6(){}[0]
    final fun component7(): kotlin/Boolean? // dev.kord.common.entity/DiscordAuditLogRoleChange.component7|component7(){}[0]
    final fun component8(): kotlin/Boolean? // dev.kord.common.entity/DiscordAuditLogRoleChange.component8|component8(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String? = ..., kotlin/Int? = ..., kotlin/Boolean? = ..., kotlin/Int? = ..., dev.kord.common.entity/Permissions? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ...): dev.kord.common.entity/DiscordAuditLogRoleChange // dev.kord.common.entity/DiscordAuditLogRoleChange.copy|copy(kotlin.String;kotlin.String?;kotlin.Int?;kotlin.Boolean?;kotlin.Int?;dev.kord.common.entity.Permissions?;kotlin.Boolean?;kotlin.Boolean?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordAuditLogRoleChange.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordAuditLogRoleChange.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordAuditLogRoleChange.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordAuditLogRoleChange> { // dev.kord.common.entity/DiscordAuditLogRoleChange.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordAuditLogRoleChange.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordAuditLogRoleChange.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordAuditLogRoleChange.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordAuditLogRoleChange // dev.kord.common.entity/DiscordAuditLogRoleChange.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordAuditLogRoleChange) // dev.kord.common.entity/DiscordAuditLogRoleChange.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordAuditLogRoleChange){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordAuditLogRoleChange.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordAuditLogRoleChange> // dev.kord.common.entity/DiscordAuditLogRoleChange.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordAutoComplete { // dev.kord.common.entity/DiscordAutoComplete|null[0]
    constructor <init>(kotlin.collections/List<dev.kord.common.entity/Choice>) // dev.kord.common.entity/DiscordAutoComplete.<init>|<init>(kotlin.collections.List<dev.kord.common.entity.Choice>){}[0]

    final val choices // dev.kord.common.entity/DiscordAutoComplete.choices|{}choices[0]
        final fun <get-choices>(): kotlin.collections/List<dev.kord.common.entity/Choice> // dev.kord.common.entity/DiscordAutoComplete.choices.<get-choices>|<get-choices>(){}[0]

    final fun component1(): kotlin.collections/List<dev.kord.common.entity/Choice> // dev.kord.common.entity/DiscordAutoComplete.component1|component1(){}[0]
    final fun copy(kotlin.collections/List<dev.kord.common.entity/Choice> = ...): dev.kord.common.entity/DiscordAutoComplete // dev.kord.common.entity/DiscordAutoComplete.copy|copy(kotlin.collections.List<dev.kord.common.entity.Choice>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordAutoComplete.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordAutoComplete.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordAutoComplete.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordAutoComplete> { // dev.kord.common.entity/DiscordAutoComplete.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordAutoComplete.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordAutoComplete.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordAutoComplete.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordAutoComplete // dev.kord.common.entity/DiscordAutoComplete.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordAutoComplete) // dev.kord.common.entity/DiscordAutoComplete.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordAutoComplete){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordAutoComplete.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordAutoComplete.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordAutoComplete> // dev.kord.common.entity/DiscordAutoComplete.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordAutoModerationAction { // dev.kord.common.entity/DiscordAutoModerationAction|null[0]
    constructor <init>(dev.kord.common.entity/AutoModerationActionType, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordAutoModerationActionMetadata> = ...) // dev.kord.common.entity/DiscordAutoModerationAction.<init>|<init>(dev.kord.common.entity.AutoModerationActionType;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordAutoModerationActionMetadata>){}[0]

    final val metadata // dev.kord.common.entity/DiscordAutoModerationAction.metadata|{}metadata[0]
        final fun <get-metadata>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordAutoModerationActionMetadata> // dev.kord.common.entity/DiscordAutoModerationAction.metadata.<get-metadata>|<get-metadata>(){}[0]
    final val type // dev.kord.common.entity/DiscordAutoModerationAction.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/AutoModerationActionType // dev.kord.common.entity/DiscordAutoModerationAction.type.<get-type>|<get-type>(){}[0]

    final fun component1(): dev.kord.common.entity/AutoModerationActionType // dev.kord.common.entity/DiscordAutoModerationAction.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordAutoModerationActionMetadata> // dev.kord.common.entity/DiscordAutoModerationAction.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/AutoModerationActionType = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordAutoModerationActionMetadata> = ...): dev.kord.common.entity/DiscordAutoModerationAction // dev.kord.common.entity/DiscordAutoModerationAction.copy|copy(dev.kord.common.entity.AutoModerationActionType;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordAutoModerationActionMetadata>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordAutoModerationAction.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordAutoModerationAction.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordAutoModerationAction.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordAutoModerationAction> { // dev.kord.common.entity/DiscordAutoModerationAction.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordAutoModerationAction.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordAutoModerationAction.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordAutoModerationAction.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordAutoModerationAction // dev.kord.common.entity/DiscordAutoModerationAction.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordAutoModerationAction) // dev.kord.common.entity/DiscordAutoModerationAction.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordAutoModerationAction){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordAutoModerationAction.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordAutoModerationAction.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordAutoModerationAction> // dev.kord.common.entity/DiscordAutoModerationAction.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordAutoModerationActionMetadata { // dev.kord.common.entity/DiscordAutoModerationActionMetadata|null[0]
    constructor <init>(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...) // dev.kord.common.entity/DiscordAutoModerationActionMetadata.<init>|<init>(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]

    final val channelId // dev.kord.common.entity/DiscordAutoModerationActionMetadata.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordAutoModerationActionMetadata.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val customMessage // dev.kord.common.entity/DiscordAutoModerationActionMetadata.customMessage|{}customMessage[0]
        final fun <get-customMessage>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordAutoModerationActionMetadata.customMessage.<get-customMessage>|<get-customMessage>(){}[0]
    final val durationSeconds // dev.kord.common.entity/DiscordAutoModerationActionMetadata.durationSeconds|{}durationSeconds[0]
        final fun <get-durationSeconds>(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.common.entity/DiscordAutoModerationActionMetadata.durationSeconds.<get-durationSeconds>|<get-durationSeconds>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordAutoModerationActionMetadata.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.common.entity/DiscordAutoModerationActionMetadata.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordAutoModerationActionMetadata.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...): dev.kord.common.entity/DiscordAutoModerationActionMetadata // dev.kord.common.entity/DiscordAutoModerationActionMetadata.copy|copy(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordAutoModerationActionMetadata.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordAutoModerationActionMetadata.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordAutoModerationActionMetadata.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordAutoModerationActionMetadata> { // dev.kord.common.entity/DiscordAutoModerationActionMetadata.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordAutoModerationActionMetadata.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordAutoModerationActionMetadata.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordAutoModerationActionMetadata.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordAutoModerationActionMetadata // dev.kord.common.entity/DiscordAutoModerationActionMetadata.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordAutoModerationActionMetadata) // dev.kord.common.entity/DiscordAutoModerationActionMetadata.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordAutoModerationActionMetadata){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordAutoModerationActionMetadata.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordAutoModerationActionMetadata.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordAutoModerationActionMetadata> // dev.kord.common.entity/DiscordAutoModerationActionMetadata.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordAutoModerationRule { // dev.kord.common.entity/DiscordAutoModerationRule|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.common.entity/AutoModerationRuleEventType, dev.kord.common.entity/AutoModerationRuleTriggerType, dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata, kotlin.collections/List<dev.kord.common.entity/DiscordAutoModerationAction>, kotlin/Boolean, kotlin.collections/List<dev.kord.common.entity/Snowflake>, kotlin.collections/List<dev.kord.common.entity/Snowflake>) // dev.kord.common.entity/DiscordAutoModerationRule.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.AutoModerationRuleEventType;dev.kord.common.entity.AutoModerationRuleTriggerType;dev.kord.common.entity.DiscordAutoModerationRuleTriggerMetadata;kotlin.collections.List<dev.kord.common.entity.DiscordAutoModerationAction>;kotlin.Boolean;kotlin.collections.List<dev.kord.common.entity.Snowflake>;kotlin.collections.List<dev.kord.common.entity.Snowflake>){}[0]

    final val actions // dev.kord.common.entity/DiscordAutoModerationRule.actions|{}actions[0]
        final fun <get-actions>(): kotlin.collections/List<dev.kord.common.entity/DiscordAutoModerationAction> // dev.kord.common.entity/DiscordAutoModerationRule.actions.<get-actions>|<get-actions>(){}[0]
    final val creatorId // dev.kord.common.entity/DiscordAutoModerationRule.creatorId|{}creatorId[0]
        final fun <get-creatorId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordAutoModerationRule.creatorId.<get-creatorId>|<get-creatorId>(){}[0]
    final val enabled // dev.kord.common.entity/DiscordAutoModerationRule.enabled|{}enabled[0]
        final fun <get-enabled>(): kotlin/Boolean // dev.kord.common.entity/DiscordAutoModerationRule.enabled.<get-enabled>|<get-enabled>(){}[0]
    final val eventType // dev.kord.common.entity/DiscordAutoModerationRule.eventType|{}eventType[0]
        final fun <get-eventType>(): dev.kord.common.entity/AutoModerationRuleEventType // dev.kord.common.entity/DiscordAutoModerationRule.eventType.<get-eventType>|<get-eventType>(){}[0]
    final val exemptChannels // dev.kord.common.entity/DiscordAutoModerationRule.exemptChannels|{}exemptChannels[0]
        final fun <get-exemptChannels>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/DiscordAutoModerationRule.exemptChannels.<get-exemptChannels>|<get-exemptChannels>(){}[0]
    final val exemptRoles // dev.kord.common.entity/DiscordAutoModerationRule.exemptRoles|{}exemptRoles[0]
        final fun <get-exemptRoles>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/DiscordAutoModerationRule.exemptRoles.<get-exemptRoles>|<get-exemptRoles>(){}[0]
    final val guildId // dev.kord.common.entity/DiscordAutoModerationRule.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordAutoModerationRule.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.common.entity/DiscordAutoModerationRule.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordAutoModerationRule.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.common.entity/DiscordAutoModerationRule.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordAutoModerationRule.name.<get-name>|<get-name>(){}[0]
    final val triggerMetadata // dev.kord.common.entity/DiscordAutoModerationRule.triggerMetadata|{}triggerMetadata[0]
        final fun <get-triggerMetadata>(): dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata // dev.kord.common.entity/DiscordAutoModerationRule.triggerMetadata.<get-triggerMetadata>|<get-triggerMetadata>(){}[0]
    final val triggerType // dev.kord.common.entity/DiscordAutoModerationRule.triggerType|{}triggerType[0]
        final fun <get-triggerType>(): dev.kord.common.entity/AutoModerationRuleTriggerType // dev.kord.common.entity/DiscordAutoModerationRule.triggerType.<get-triggerType>|<get-triggerType>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordAutoModerationRule.component1|component1(){}[0]
    final fun component10(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/DiscordAutoModerationRule.component10|component10(){}[0]
    final fun component11(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/DiscordAutoModerationRule.component11|component11(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordAutoModerationRule.component2|component2(){}[0]
    final fun component3(): kotlin/String // dev.kord.common.entity/DiscordAutoModerationRule.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordAutoModerationRule.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity/AutoModerationRuleEventType // dev.kord.common.entity/DiscordAutoModerationRule.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity/AutoModerationRuleTriggerType // dev.kord.common.entity/DiscordAutoModerationRule.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata // dev.kord.common.entity/DiscordAutoModerationRule.component7|component7(){}[0]
    final fun component8(): kotlin.collections/List<dev.kord.common.entity/DiscordAutoModerationAction> // dev.kord.common.entity/DiscordAutoModerationRule.component8|component8(){}[0]
    final fun component9(): kotlin/Boolean // dev.kord.common.entity/DiscordAutoModerationRule.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/AutoModerationRuleEventType = ..., dev.kord.common.entity/AutoModerationRuleTriggerType = ..., dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata = ..., kotlin.collections/List<dev.kord.common.entity/DiscordAutoModerationAction> = ..., kotlin/Boolean = ..., kotlin.collections/List<dev.kord.common.entity/Snowflake> = ..., kotlin.collections/List<dev.kord.common.entity/Snowflake> = ...): dev.kord.common.entity/DiscordAutoModerationRule // dev.kord.common.entity/DiscordAutoModerationRule.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.AutoModerationRuleEventType;dev.kord.common.entity.AutoModerationRuleTriggerType;dev.kord.common.entity.DiscordAutoModerationRuleTriggerMetadata;kotlin.collections.List<dev.kord.common.entity.DiscordAutoModerationAction>;kotlin.Boolean;kotlin.collections.List<dev.kord.common.entity.Snowflake>;kotlin.collections.List<dev.kord.common.entity.Snowflake>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordAutoModerationRule.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordAutoModerationRule.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordAutoModerationRule.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordAutoModerationRule> { // dev.kord.common.entity/DiscordAutoModerationRule.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordAutoModerationRule.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordAutoModerationRule.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordAutoModerationRule.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordAutoModerationRule // dev.kord.common.entity/DiscordAutoModerationRule.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordAutoModerationRule) // dev.kord.common.entity/DiscordAutoModerationRule.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordAutoModerationRule){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordAutoModerationRule.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordAutoModerationRule.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordAutoModerationRule> // dev.kord.common.entity/DiscordAutoModerationRule.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata { // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/AutoModerationRuleKeywordPresetType>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.AutoModerationRuleKeywordPresetType>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalBoolean){}[0]

    final val allowList // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.allowList|{}allowList[0]
        final fun <get-allowList>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.allowList.<get-allowList>|<get-allowList>(){}[0]
    final val keywordFilter // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.keywordFilter|{}keywordFilter[0]
        final fun <get-keywordFilter>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.keywordFilter.<get-keywordFilter>|<get-keywordFilter>(){}[0]
    final val mentionRaidProtectionEnabled // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.mentionRaidProtectionEnabled|{}mentionRaidProtectionEnabled[0]
        final fun <get-mentionRaidProtectionEnabled>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.mentionRaidProtectionEnabled.<get-mentionRaidProtectionEnabled>|<get-mentionRaidProtectionEnabled>(){}[0]
    final val mentionTotalLimit // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.mentionTotalLimit|{}mentionTotalLimit[0]
        final fun <get-mentionTotalLimit>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.mentionTotalLimit.<get-mentionTotalLimit>|<get-mentionTotalLimit>(){}[0]
    final val presets // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.presets|{}presets[0]
        final fun <get-presets>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/AutoModerationRuleKeywordPresetType>> // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.presets.<get-presets>|<get-presets>(){}[0]
    final val regexPatterns // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.regexPatterns|{}regexPatterns[0]
        final fun <get-regexPatterns>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.regexPatterns.<get-regexPatterns>|<get-regexPatterns>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/AutoModerationRuleKeywordPresetType>> // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.component6|component6(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/AutoModerationRuleKeywordPresetType>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.AutoModerationRuleKeywordPresetType>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalBoolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata> { // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata) // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordAutoModerationRuleTriggerMetadata){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata> // dev.kord.common.entity/DiscordAutoModerationRuleTriggerMetadata.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordBotActivity { // dev.kord.common.entity/DiscordBotActivity|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity/ActivityType, dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...) // dev.kord.common.entity/DiscordBotActivity.<init>|<init>(kotlin.String;dev.kord.common.entity.ActivityType;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]

    final val name // dev.kord.common.entity/DiscordBotActivity.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordBotActivity.name.<get-name>|<get-name>(){}[0]
    final val state // dev.kord.common.entity/DiscordBotActivity.state|{}state[0]
        final fun <get-state>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordBotActivity.state.<get-state>|<get-state>(){}[0]
    final val type // dev.kord.common.entity/DiscordBotActivity.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ActivityType // dev.kord.common.entity/DiscordBotActivity.type.<get-type>|<get-type>(){}[0]
    final val url // dev.kord.common.entity/DiscordBotActivity.url|{}url[0]
        final fun <get-url>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordBotActivity.url.<get-url>|<get-url>(){}[0]

    final fun component1(): kotlin/String // dev.kord.common.entity/DiscordBotActivity.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/ActivityType // dev.kord.common.entity/DiscordBotActivity.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordBotActivity.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordBotActivity.component4|component4(){}[0]
    final fun copy(kotlin/String = ..., dev.kord.common.entity/ActivityType = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...): dev.kord.common.entity/DiscordBotActivity // dev.kord.common.entity/DiscordBotActivity.copy|copy(kotlin.String;dev.kord.common.entity.ActivityType;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordBotActivity.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordBotActivity.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordBotActivity.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordBotActivity> { // dev.kord.common.entity/DiscordBotActivity.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordBotActivity.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordBotActivity.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordBotActivity.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordBotActivity // dev.kord.common.entity/DiscordBotActivity.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordBotActivity) // dev.kord.common.entity/DiscordBotActivity.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordBotActivity){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordBotActivity.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordBotActivity.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordBotActivity> // dev.kord.common.entity/DiscordBotActivity.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordChannel { // dev.kord.common.entity/DiscordChannel|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/ChannelType, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Overwrite>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordUser>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/VideoQualityMode> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordThreadMetadata> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ArchiveDuration> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordThreadMember> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ChannelFlags> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ForumTag>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DefaultReaction?> = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/SortOrderType?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ForumLayoutType> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessage> = ...) // dev.kord.common.entity/DiscordChannel.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.ChannelType;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Overwrite>>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalSnowflake?;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordUser>>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake?;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.VideoQualityMode>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordThreadMetadata>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ArchiveDuration>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordThreadMember>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ChannelFlags>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.ForumTag>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DefaultReaction?>;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.SortOrderType?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ForumLayoutType>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordMessage>){}[0]

    final val applicationId // dev.kord.common.entity/DiscordChannel.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordChannel.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val appliedTags // dev.kord.common.entity/DiscordChannel.appliedTags|{}appliedTags[0]
        final fun <get-appliedTags>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.common.entity/DiscordChannel.appliedTags.<get-appliedTags>|<get-appliedTags>(){}[0]
    final val availableTags // dev.kord.common.entity/DiscordChannel.availableTags|{}availableTags[0]
        final fun <get-availableTags>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ForumTag>> // dev.kord.common.entity/DiscordChannel.availableTags.<get-availableTags>|<get-availableTags>(){}[0]
    final val bitrate // dev.kord.common.entity/DiscordChannel.bitrate|{}bitrate[0]
        final fun <get-bitrate>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordChannel.bitrate.<get-bitrate>|<get-bitrate>(){}[0]
    final val defaultAutoArchiveDuration // dev.kord.common.entity/DiscordChannel.defaultAutoArchiveDuration|{}defaultAutoArchiveDuration[0]
        final fun <get-defaultAutoArchiveDuration>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ArchiveDuration> // dev.kord.common.entity/DiscordChannel.defaultAutoArchiveDuration.<get-defaultAutoArchiveDuration>|<get-defaultAutoArchiveDuration>(){}[0]
    final val defaultForumLayout // dev.kord.common.entity/DiscordChannel.defaultForumLayout|{}defaultForumLayout[0]
        final fun <get-defaultForumLayout>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ForumLayoutType> // dev.kord.common.entity/DiscordChannel.defaultForumLayout.<get-defaultForumLayout>|<get-defaultForumLayout>(){}[0]
    final val defaultReactionEmoji // dev.kord.common.entity/DiscordChannel.defaultReactionEmoji|{}defaultReactionEmoji[0]
        final fun <get-defaultReactionEmoji>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DefaultReaction?> // dev.kord.common.entity/DiscordChannel.defaultReactionEmoji.<get-defaultReactionEmoji>|<get-defaultReactionEmoji>(){}[0]
    final val defaultSortOrder // dev.kord.common.entity/DiscordChannel.defaultSortOrder|{}defaultSortOrder[0]
        final fun <get-defaultSortOrder>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/SortOrderType?> // dev.kord.common.entity/DiscordChannel.defaultSortOrder.<get-defaultSortOrder>|<get-defaultSortOrder>(){}[0]
    final val defaultThreadRateLimitPerUser // dev.kord.common.entity/DiscordChannel.defaultThreadRateLimitPerUser|{}defaultThreadRateLimitPerUser[0]
        final fun <get-defaultThreadRateLimitPerUser>(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.common.entity/DiscordChannel.defaultThreadRateLimitPerUser.<get-defaultThreadRateLimitPerUser>|<get-defaultThreadRateLimitPerUser>(){}[0]
    final val flags // dev.kord.common.entity/DiscordChannel.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ChannelFlags> // dev.kord.common.entity/DiscordChannel.flags.<get-flags>|<get-flags>(){}[0]
    final val guildId // dev.kord.common.entity/DiscordChannel.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordChannel.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val icon // dev.kord.common.entity/DiscordChannel.icon|{}icon[0]
        final fun <get-icon>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordChannel.icon.<get-icon>|<get-icon>(){}[0]
    final val id // dev.kord.common.entity/DiscordChannel.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordChannel.id.<get-id>|<get-id>(){}[0]
    final val lastMessageId // dev.kord.common.entity/DiscordChannel.lastMessageId|{}lastMessageId[0]
        final fun <get-lastMessageId>(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.common.entity/DiscordChannel.lastMessageId.<get-lastMessageId>|<get-lastMessageId>(){}[0]
    final val lastPinTimestamp // dev.kord.common.entity/DiscordChannel.lastPinTimestamp|{}lastPinTimestamp[0]
        final fun <get-lastPinTimestamp>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordChannel.lastPinTimestamp.<get-lastPinTimestamp>|<get-lastPinTimestamp>(){}[0]
    final val member // dev.kord.common.entity/DiscordChannel.member|{}member[0]
        final fun <get-member>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordThreadMember> // dev.kord.common.entity/DiscordChannel.member.<get-member>|<get-member>(){}[0]
    final val memberCount // dev.kord.common.entity/DiscordChannel.memberCount|{}memberCount[0]
        final fun <get-memberCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordChannel.memberCount.<get-memberCount>|<get-memberCount>(){}[0]
    final val message // dev.kord.common.entity/DiscordChannel.message|{}message[0]
        final fun <get-message>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessage> // dev.kord.common.entity/DiscordChannel.message.<get-message>|<get-message>(){}[0]
    final val messageCount // dev.kord.common.entity/DiscordChannel.messageCount|{}messageCount[0]
        final fun <get-messageCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordChannel.messageCount.<get-messageCount>|<get-messageCount>(){}[0]
    final val name // dev.kord.common.entity/DiscordChannel.name|{}name[0]
        final fun <get-name>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordChannel.name.<get-name>|<get-name>(){}[0]
    final val nsfw // dev.kord.common.entity/DiscordChannel.nsfw|{}nsfw[0]
        final fun <get-nsfw>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordChannel.nsfw.<get-nsfw>|<get-nsfw>(){}[0]
    final val ownerId // dev.kord.common.entity/DiscordChannel.ownerId|{}ownerId[0]
        final fun <get-ownerId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordChannel.ownerId.<get-ownerId>|<get-ownerId>(){}[0]
    final val parentId // dev.kord.common.entity/DiscordChannel.parentId|{}parentId[0]
        final fun <get-parentId>(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.common.entity/DiscordChannel.parentId.<get-parentId>|<get-parentId>(){}[0]
    final val permissionOverwrites // dev.kord.common.entity/DiscordChannel.permissionOverwrites|{}permissionOverwrites[0]
        final fun <get-permissionOverwrites>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Overwrite>> // dev.kord.common.entity/DiscordChannel.permissionOverwrites.<get-permissionOverwrites>|<get-permissionOverwrites>(){}[0]
    final val permissions // dev.kord.common.entity/DiscordChannel.permissions|{}permissions[0]
        final fun <get-permissions>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> // dev.kord.common.entity/DiscordChannel.permissions.<get-permissions>|<get-permissions>(){}[0]
    final val position // dev.kord.common.entity/DiscordChannel.position|{}position[0]
        final fun <get-position>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordChannel.position.<get-position>|<get-position>(){}[0]
    final val rateLimitPerUser // dev.kord.common.entity/DiscordChannel.rateLimitPerUser|{}rateLimitPerUser[0]
        final fun <get-rateLimitPerUser>(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.common.entity/DiscordChannel.rateLimitPerUser.<get-rateLimitPerUser>|<get-rateLimitPerUser>(){}[0]
    final val recipients // dev.kord.common.entity/DiscordChannel.recipients|{}recipients[0]
        final fun <get-recipients>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordUser>> // dev.kord.common.entity/DiscordChannel.recipients.<get-recipients>|<get-recipients>(){}[0]
    final val rtcRegion // dev.kord.common.entity/DiscordChannel.rtcRegion|{}rtcRegion[0]
        final fun <get-rtcRegion>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordChannel.rtcRegion.<get-rtcRegion>|<get-rtcRegion>(){}[0]
    final val threadMetadata // dev.kord.common.entity/DiscordChannel.threadMetadata|{}threadMetadata[0]
        final fun <get-threadMetadata>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordThreadMetadata> // dev.kord.common.entity/DiscordChannel.threadMetadata.<get-threadMetadata>|<get-threadMetadata>(){}[0]
    final val topic // dev.kord.common.entity/DiscordChannel.topic|{}topic[0]
        final fun <get-topic>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordChannel.topic.<get-topic>|<get-topic>(){}[0]
    final val totalMessageSent // dev.kord.common.entity/DiscordChannel.totalMessageSent|{}totalMessageSent[0]
        final fun <get-totalMessageSent>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordChannel.totalMessageSent.<get-totalMessageSent>|<get-totalMessageSent>(){}[0]
    final val type // dev.kord.common.entity/DiscordChannel.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ChannelType // dev.kord.common.entity/DiscordChannel.type.<get-type>|<get-type>(){}[0]
    final val userLimit // dev.kord.common.entity/DiscordChannel.userLimit|{}userLimit[0]
        final fun <get-userLimit>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordChannel.userLimit.<get-userLimit>|<get-userLimit>(){}[0]
    final val videoQualityMode // dev.kord.common.entity/DiscordChannel.videoQualityMode|{}videoQualityMode[0]
        final fun <get-videoQualityMode>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/VideoQualityMode> // dev.kord.common.entity/DiscordChannel.videoQualityMode.<get-videoQualityMode>|<get-videoQualityMode>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordChannel.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordChannel.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordChannel.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.common.entity/DiscordChannel.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordUser>> // dev.kord.common.entity/DiscordChannel.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordChannel.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordChannel.component15|component15(){}[0]
    final fun component16(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordChannel.component16|component16(){}[0]
    final fun component17(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.common.entity/DiscordChannel.component17|component17(){}[0]
    final fun component18(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordChannel.component18|component18(){}[0]
    final fun component19(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordChannel.component19|component19(){}[0]
    final fun component2(): dev.kord.common.entity/ChannelType // dev.kord.common.entity/DiscordChannel.component2|component2(){}[0]
    final fun component20(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/VideoQualityMode> // dev.kord.common.entity/DiscordChannel.component20|component20(){}[0]
    final fun component21(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> // dev.kord.common.entity/DiscordChannel.component21|component21(){}[0]
    final fun component22(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordChannel.component22|component22(){}[0]
    final fun component23(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordChannel.component23|component23(){}[0]
    final fun component24(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordThreadMetadata> // dev.kord.common.entity/DiscordChannel.component24|component24(){}[0]
    final fun component25(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ArchiveDuration> // dev.kord.common.entity/DiscordChannel.component25|component25(){}[0]
    final fun component26(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordThreadMember> // dev.kord.common.entity/DiscordChannel.component26|component26(){}[0]
    final fun component27(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ChannelFlags> // dev.kord.common.entity/DiscordChannel.component27|component27(){}[0]
    final fun component28(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordChannel.component28|component28(){}[0]
    final fun component29(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ForumTag>> // dev.kord.common.entity/DiscordChannel.component29|component29(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordChannel.component3|component3(){}[0]
    final fun component30(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.common.entity/DiscordChannel.component30|component30(){}[0]
    final fun component31(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DefaultReaction?> // dev.kord.common.entity/DiscordChannel.component31|component31(){}[0]
    final fun component32(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.common.entity/DiscordChannel.component32|component32(){}[0]
    final fun component33(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/SortOrderType?> // dev.kord.common.entity/DiscordChannel.component33|component33(){}[0]
    final fun component34(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ForumLayoutType> // dev.kord.common.entity/DiscordChannel.component34|component34(){}[0]
    final fun component35(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessage> // dev.kord.common.entity/DiscordChannel.component35|component35(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordChannel.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Overwrite>> // dev.kord.common.entity/DiscordChannel.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordChannel.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordChannel.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordChannel.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.common.entity/DiscordChannel.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/ChannelType = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Overwrite>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordUser>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/VideoQualityMode> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordThreadMetadata> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ArchiveDuration> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordThreadMember> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ChannelFlags> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ForumTag>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DefaultReaction?> = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/SortOrderType?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ForumLayoutType> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessage> = ...): dev.kord.common.entity/DiscordChannel // dev.kord.common.entity/DiscordChannel.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.ChannelType;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Overwrite>>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalSnowflake?;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordUser>>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake?;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.VideoQualityMode>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordThreadMetadata>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ArchiveDuration>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordThreadMember>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ChannelFlags>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.ForumTag>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DefaultReaction?>;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.SortOrderType?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ForumLayoutType>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordMessage>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordChannel.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordChannel.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordChannel.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordChannel> { // dev.kord.common.entity/DiscordChannel.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordChannel.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordChannel.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordChannel.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordChannel // dev.kord.common.entity/DiscordChannel.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordChannel) // dev.kord.common.entity/DiscordChannel.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordChannel){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordChannel.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordChannel.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordChannel> // dev.kord.common.entity/DiscordChannel.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordChatComponent : dev.kord.common.entity/DiscordComponent { // dev.kord.common.entity/DiscordChatComponent|null[0]
    constructor <init>(dev.kord.common.entity/ComponentType, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ButtonStyle> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectOption>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectDefaultValue>> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> = ...) // dev.kord.common.entity/DiscordChatComponent.<init>|<init>(dev.kord.common.entity.ComponentType;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ButtonStyle>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordPartialEmoji>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordComponent>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordSelectOption>>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordSelectDefaultValue>>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.ChannelType>>){}[0]

    final val channelTypes // dev.kord.common.entity/DiscordChatComponent.channelTypes|{}channelTypes[0]
        final fun <get-channelTypes>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> // dev.kord.common.entity/DiscordChatComponent.channelTypes.<get-channelTypes>|<get-channelTypes>(){}[0]
    final val components // dev.kord.common.entity/DiscordChatComponent.components|{}components[0]
        final fun <get-components>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> // dev.kord.common.entity/DiscordChatComponent.components.<get-components>|<get-components>(){}[0]
    final val customId // dev.kord.common.entity/DiscordChatComponent.customId|{}customId[0]
        final fun <get-customId>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordChatComponent.customId.<get-customId>|<get-customId>(){}[0]
    final val defaultValues // dev.kord.common.entity/DiscordChatComponent.defaultValues|{}defaultValues[0]
        final fun <get-defaultValues>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectDefaultValue>> // dev.kord.common.entity/DiscordChatComponent.defaultValues.<get-defaultValues>|<get-defaultValues>(){}[0]
    final val disabled // dev.kord.common.entity/DiscordChatComponent.disabled|{}disabled[0]
        final fun <get-disabled>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordChatComponent.disabled.<get-disabled>|<get-disabled>(){}[0]
    final val emoji // dev.kord.common.entity/DiscordChatComponent.emoji|{}emoji[0]
        final fun <get-emoji>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> // dev.kord.common.entity/DiscordChatComponent.emoji.<get-emoji>|<get-emoji>(){}[0]
    final val label // dev.kord.common.entity/DiscordChatComponent.label|{}label[0]
        final fun <get-label>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordChatComponent.label.<get-label>|<get-label>(){}[0]
    final val maxLength // dev.kord.common.entity/DiscordChatComponent.maxLength|{}maxLength[0]
        final fun <get-maxLength>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordChatComponent.maxLength.<get-maxLength>|<get-maxLength>(){}[0]
    final val maxValues // dev.kord.common.entity/DiscordChatComponent.maxValues|{}maxValues[0]
        final fun <get-maxValues>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordChatComponent.maxValues.<get-maxValues>|<get-maxValues>(){}[0]
    final val minLength // dev.kord.common.entity/DiscordChatComponent.minLength|{}minLength[0]
        final fun <get-minLength>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordChatComponent.minLength.<get-minLength>|<get-minLength>(){}[0]
    final val minValues // dev.kord.common.entity/DiscordChatComponent.minValues|{}minValues[0]
        final fun <get-minValues>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordChatComponent.minValues.<get-minValues>|<get-minValues>(){}[0]
    final val options // dev.kord.common.entity/DiscordChatComponent.options|{}options[0]
        final fun <get-options>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectOption>> // dev.kord.common.entity/DiscordChatComponent.options.<get-options>|<get-options>(){}[0]
    final val placeholder // dev.kord.common.entity/DiscordChatComponent.placeholder|{}placeholder[0]
        final fun <get-placeholder>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordChatComponent.placeholder.<get-placeholder>|<get-placeholder>(){}[0]
    final val required // dev.kord.common.entity/DiscordChatComponent.required|{}required[0]
        final fun <get-required>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordChatComponent.required.<get-required>|<get-required>(){}[0]
    final val style // dev.kord.common.entity/DiscordChatComponent.style|{}style[0]
        final fun <get-style>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ButtonStyle> // dev.kord.common.entity/DiscordChatComponent.style.<get-style>|<get-style>(){}[0]
    final val type // dev.kord.common.entity/DiscordChatComponent.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ComponentType // dev.kord.common.entity/DiscordChatComponent.type.<get-type>|<get-type>(){}[0]
    final val url // dev.kord.common.entity/DiscordChatComponent.url|{}url[0]
        final fun <get-url>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordChatComponent.url.<get-url>|<get-url>(){}[0]
    final val value // dev.kord.common.entity/DiscordChatComponent.value|{}value[0]
        final fun <get-value>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordChatComponent.value.<get-value>|<get-value>(){}[0]

    final fun component1(): dev.kord.common.entity/ComponentType // dev.kord.common.entity/DiscordChatComponent.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordChatComponent.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectDefaultValue>> // dev.kord.common.entity/DiscordChatComponent.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordChatComponent.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordChatComponent.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordChatComponent.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordChatComponent.component15|component15(){}[0]
    final fun component16(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordChatComponent.component16|component16(){}[0]
    final fun component17(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordChatComponent.component17|component17(){}[0]
    final fun component18(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> // dev.kord.common.entity/DiscordChatComponent.component18|component18(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ButtonStyle> // dev.kord.common.entity/DiscordChatComponent.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordChatComponent.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> // dev.kord.common.entity/DiscordChatComponent.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordChatComponent.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordChatComponent.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordChatComponent.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> // dev.kord.common.entity/DiscordChatComponent.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectOption>> // dev.kord.common.entity/DiscordChatComponent.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/ComponentType = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ButtonStyle> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectOption>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectDefaultValue>> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> = ...): dev.kord.common.entity/DiscordChatComponent // dev.kord.common.entity/DiscordChatComponent.copy|copy(dev.kord.common.entity.ComponentType;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ButtonStyle>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordPartialEmoji>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordComponent>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordSelectOption>>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordSelectDefaultValue>>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.ChannelType>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordChatComponent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordChatComponent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordChatComponent.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordChatComponent> { // dev.kord.common.entity/DiscordChatComponent.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordChatComponent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordChatComponent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordChatComponent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordChatComponent // dev.kord.common.entity/DiscordChatComponent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordChatComponent) // dev.kord.common.entity/DiscordChatComponent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordChatComponent){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordChatComponent.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordChatComponent.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordChatComponent> // dev.kord.common.entity/DiscordChatComponent.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordClientStatus { // dev.kord.common.entity/DiscordClientStatus|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<dev.kord.common.entity/PresenceStatus> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/PresenceStatus> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/PresenceStatus> = ...) // dev.kord.common.entity/DiscordClientStatus.<init>|<init>(dev.kord.common.entity.optional.Optional<dev.kord.common.entity.PresenceStatus>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.PresenceStatus>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.PresenceStatus>){}[0]

    final val desktop // dev.kord.common.entity/DiscordClientStatus.desktop|{}desktop[0]
        final fun <get-desktop>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/PresenceStatus> // dev.kord.common.entity/DiscordClientStatus.desktop.<get-desktop>|<get-desktop>(){}[0]
    final val mobile // dev.kord.common.entity/DiscordClientStatus.mobile|{}mobile[0]
        final fun <get-mobile>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/PresenceStatus> // dev.kord.common.entity/DiscordClientStatus.mobile.<get-mobile>|<get-mobile>(){}[0]
    final val web // dev.kord.common.entity/DiscordClientStatus.web|{}web[0]
        final fun <get-web>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/PresenceStatus> // dev.kord.common.entity/DiscordClientStatus.web.<get-web>|<get-web>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/PresenceStatus> // dev.kord.common.entity/DiscordClientStatus.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/PresenceStatus> // dev.kord.common.entity/DiscordClientStatus.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/PresenceStatus> // dev.kord.common.entity/DiscordClientStatus.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<dev.kord.common.entity/PresenceStatus> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/PresenceStatus> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/PresenceStatus> = ...): dev.kord.common.entity/DiscordClientStatus // dev.kord.common.entity/DiscordClientStatus.copy|copy(dev.kord.common.entity.optional.Optional<dev.kord.common.entity.PresenceStatus>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.PresenceStatus>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.PresenceStatus>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordClientStatus.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordClientStatus.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordClientStatus.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordClientStatus> { // dev.kord.common.entity/DiscordClientStatus.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordClientStatus.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordClientStatus.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordClientStatus.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordClientStatus // dev.kord.common.entity/DiscordClientStatus.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordClientStatus) // dev.kord.common.entity/DiscordClientStatus.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordClientStatus){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordClientStatus.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordClientStatus.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordClientStatus> // dev.kord.common.entity/DiscordClientStatus.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordConnection { // dev.kord.common.entity/DiscordConnection|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/String, dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordIntegration>> = ..., kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, dev.kord.common.entity/DiscordConnectionVisibility) // dev.kord.common.entity/DiscordConnection.<init>|<init>(kotlin.String;kotlin.String;kotlin.String;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordIntegration>>;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;dev.kord.common.entity.DiscordConnectionVisibility){}[0]

    final val friendSync // dev.kord.common.entity/DiscordConnection.friendSync|{}friendSync[0]
        final fun <get-friendSync>(): kotlin/Boolean // dev.kord.common.entity/DiscordConnection.friendSync.<get-friendSync>|<get-friendSync>(){}[0]
    final val id // dev.kord.common.entity/DiscordConnection.id|{}id[0]
        final fun <get-id>(): kotlin/String // dev.kord.common.entity/DiscordConnection.id.<get-id>|<get-id>(){}[0]
    final val integrations // dev.kord.common.entity/DiscordConnection.integrations|{}integrations[0]
        final fun <get-integrations>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordIntegration>> // dev.kord.common.entity/DiscordConnection.integrations.<get-integrations>|<get-integrations>(){}[0]
    final val name // dev.kord.common.entity/DiscordConnection.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordConnection.name.<get-name>|<get-name>(){}[0]
    final val revoked // dev.kord.common.entity/DiscordConnection.revoked|{}revoked[0]
        final fun <get-revoked>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordConnection.revoked.<get-revoked>|<get-revoked>(){}[0]
    final val showActivity // dev.kord.common.entity/DiscordConnection.showActivity|{}showActivity[0]
        final fun <get-showActivity>(): kotlin/Boolean // dev.kord.common.entity/DiscordConnection.showActivity.<get-showActivity>|<get-showActivity>(){}[0]
    final val type // dev.kord.common.entity/DiscordConnection.type|{}type[0]
        final fun <get-type>(): kotlin/String // dev.kord.common.entity/DiscordConnection.type.<get-type>|<get-type>(){}[0]
    final val verified // dev.kord.common.entity/DiscordConnection.verified|{}verified[0]
        final fun <get-verified>(): kotlin/Boolean // dev.kord.common.entity/DiscordConnection.verified.<get-verified>|<get-verified>(){}[0]
    final val visibility // dev.kord.common.entity/DiscordConnection.visibility|{}visibility[0]
        final fun <get-visibility>(): dev.kord.common.entity/DiscordConnectionVisibility // dev.kord.common.entity/DiscordConnection.visibility.<get-visibility>|<get-visibility>(){}[0]

    final fun component1(): kotlin/String // dev.kord.common.entity/DiscordConnection.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.common.entity/DiscordConnection.component2|component2(){}[0]
    final fun component3(): kotlin/String // dev.kord.common.entity/DiscordConnection.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordConnection.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordIntegration>> // dev.kord.common.entity/DiscordConnection.component5|component5(){}[0]
    final fun component6(): kotlin/Boolean // dev.kord.common.entity/DiscordConnection.component6|component6(){}[0]
    final fun component7(): kotlin/Boolean // dev.kord.common.entity/DiscordConnection.component7|component7(){}[0]
    final fun component8(): kotlin/Boolean // dev.kord.common.entity/DiscordConnection.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity/DiscordConnectionVisibility // dev.kord.common.entity/DiscordConnection.component9|component9(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordIntegration>> = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., dev.kord.common.entity/DiscordConnectionVisibility = ...): dev.kord.common.entity/DiscordConnection // dev.kord.common.entity/DiscordConnection.copy|copy(kotlin.String;kotlin.String;kotlin.String;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordIntegration>>;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;dev.kord.common.entity.DiscordConnectionVisibility){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordConnection.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordConnection.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordConnection.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordConnection> { // dev.kord.common.entity/DiscordConnection.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordConnection.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordConnection.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordConnection.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordConnection // dev.kord.common.entity/DiscordConnection.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordConnection) // dev.kord.common.entity/DiscordConnection.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordConnection){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordConnection.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordConnection.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordConnection> // dev.kord.common.entity/DiscordConnection.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordDeletedGuildRole { // dev.kord.common.entity/DiscordDeletedGuildRole|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake) // dev.kord.common.entity/DiscordDeletedGuildRole.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]

    final val guildId // dev.kord.common.entity/DiscordDeletedGuildRole.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordDeletedGuildRole.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.common.entity/DiscordDeletedGuildRole.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordDeletedGuildRole.id.<get-id>|<get-id>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordDeletedGuildRole.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordDeletedGuildRole.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ...): dev.kord.common.entity/DiscordDeletedGuildRole // dev.kord.common.entity/DiscordDeletedGuildRole.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordDeletedGuildRole.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordDeletedGuildRole.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordDeletedGuildRole.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordDeletedGuildRole> { // dev.kord.common.entity/DiscordDeletedGuildRole.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordDeletedGuildRole.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordDeletedGuildRole.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordDeletedGuildRole.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordDeletedGuildRole // dev.kord.common.entity/DiscordDeletedGuildRole.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordDeletedGuildRole) // dev.kord.common.entity/DiscordDeletedGuildRole.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordDeletedGuildRole){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordDeletedGuildRole.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordDeletedGuildRole> // dev.kord.common.entity/DiscordDeletedGuildRole.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordEmbed { // dev.kord.common.entity/DiscordEmbed|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/EmbedType> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordEmbed.Footer> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordEmbed.Image> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordEmbed.Thumbnail> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordEmbed.Video> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordEmbed.Provider> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordEmbed.Author> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordEmbed.Field>> = ...) // dev.kord.common.entity/DiscordEmbed.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.EmbedType>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordEmbed.Footer>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordEmbed.Image>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordEmbed.Thumbnail>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordEmbed.Video>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordEmbed.Provider>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordEmbed.Author>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordEmbed.Field>>){}[0]

    final val author // dev.kord.common.entity/DiscordEmbed.author|{}author[0]
        final fun <get-author>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordEmbed.Author> // dev.kord.common.entity/DiscordEmbed.author.<get-author>|<get-author>(){}[0]
    final val color // dev.kord.common.entity/DiscordEmbed.color|{}color[0]
        final fun <get-color>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordEmbed.color.<get-color>|<get-color>(){}[0]
    final val description // dev.kord.common.entity/DiscordEmbed.description|{}description[0]
        final fun <get-description>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.description.<get-description>|<get-description>(){}[0]
    final val fields // dev.kord.common.entity/DiscordEmbed.fields|{}fields[0]
        final fun <get-fields>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordEmbed.Field>> // dev.kord.common.entity/DiscordEmbed.fields.<get-fields>|<get-fields>(){}[0]
    final val footer // dev.kord.common.entity/DiscordEmbed.footer|{}footer[0]
        final fun <get-footer>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordEmbed.Footer> // dev.kord.common.entity/DiscordEmbed.footer.<get-footer>|<get-footer>(){}[0]
    final val image // dev.kord.common.entity/DiscordEmbed.image|{}image[0]
        final fun <get-image>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordEmbed.Image> // dev.kord.common.entity/DiscordEmbed.image.<get-image>|<get-image>(){}[0]
    final val provider // dev.kord.common.entity/DiscordEmbed.provider|{}provider[0]
        final fun <get-provider>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordEmbed.Provider> // dev.kord.common.entity/DiscordEmbed.provider.<get-provider>|<get-provider>(){}[0]
    final val thumbnail // dev.kord.common.entity/DiscordEmbed.thumbnail|{}thumbnail[0]
        final fun <get-thumbnail>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordEmbed.Thumbnail> // dev.kord.common.entity/DiscordEmbed.thumbnail.<get-thumbnail>|<get-thumbnail>(){}[0]
    final val timestamp // dev.kord.common.entity/DiscordEmbed.timestamp|{}timestamp[0]
        final fun <get-timestamp>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.common.entity/DiscordEmbed.timestamp.<get-timestamp>|<get-timestamp>(){}[0]
    final val title // dev.kord.common.entity/DiscordEmbed.title|{}title[0]
        final fun <get-title>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.title.<get-title>|<get-title>(){}[0]
    final val type // dev.kord.common.entity/DiscordEmbed.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/EmbedType> // dev.kord.common.entity/DiscordEmbed.type.<get-type>|<get-type>(){}[0]
    final val url // dev.kord.common.entity/DiscordEmbed.url|{}url[0]
        final fun <get-url>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.url.<get-url>|<get-url>(){}[0]
    final val video // dev.kord.common.entity/DiscordEmbed.video|{}video[0]
        final fun <get-video>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordEmbed.Video> // dev.kord.common.entity/DiscordEmbed.video.<get-video>|<get-video>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordEmbed.Video> // dev.kord.common.entity/DiscordEmbed.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordEmbed.Provider> // dev.kord.common.entity/DiscordEmbed.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordEmbed.Author> // dev.kord.common.entity/DiscordEmbed.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordEmbed.Field>> // dev.kord.common.entity/DiscordEmbed.component13|component13(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/EmbedType> // dev.kord.common.entity/DiscordEmbed.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.common.entity/DiscordEmbed.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordEmbed.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordEmbed.Footer> // dev.kord.common.entity/DiscordEmbed.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordEmbed.Image> // dev.kord.common.entity/DiscordEmbed.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordEmbed.Thumbnail> // dev.kord.common.entity/DiscordEmbed.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/EmbedType> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordEmbed.Footer> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordEmbed.Image> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordEmbed.Thumbnail> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordEmbed.Video> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordEmbed.Provider> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordEmbed.Author> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordEmbed.Field>> = ...): dev.kord.common.entity/DiscordEmbed // dev.kord.common.entity/DiscordEmbed.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.EmbedType>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordEmbed.Footer>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordEmbed.Image>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordEmbed.Thumbnail>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordEmbed.Video>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordEmbed.Provider>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordEmbed.Author>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordEmbed.Field>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordEmbed.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordEmbed.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordEmbed.toString|toString(){}[0]

    final class Author { // dev.kord.common.entity/DiscordEmbed.Author|null[0]
        constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...) // dev.kord.common.entity/DiscordEmbed.Author.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]

        final val iconUrl // dev.kord.common.entity/DiscordEmbed.Author.iconUrl|{}iconUrl[0]
            final fun <get-iconUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.Author.iconUrl.<get-iconUrl>|<get-iconUrl>(){}[0]
        final val name // dev.kord.common.entity/DiscordEmbed.Author.name|{}name[0]
            final fun <get-name>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.Author.name.<get-name>|<get-name>(){}[0]
        final val proxyIconUrl // dev.kord.common.entity/DiscordEmbed.Author.proxyIconUrl|{}proxyIconUrl[0]
            final fun <get-proxyIconUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.Author.proxyIconUrl.<get-proxyIconUrl>|<get-proxyIconUrl>(){}[0]
        final val url // dev.kord.common.entity/DiscordEmbed.Author.url|{}url[0]
            final fun <get-url>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordEmbed.Author.url.<get-url>|<get-url>(){}[0]

        final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.Author.component1|component1(){}[0]
        final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordEmbed.Author.component2|component2(){}[0]
        final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.Author.component3|component3(){}[0]
        final fun component4(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.Author.component4|component4(){}[0]
        final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...): dev.kord.common.entity/DiscordEmbed.Author // dev.kord.common.entity/DiscordEmbed.Author.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordEmbed.Author.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordEmbed.Author.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity/DiscordEmbed.Author.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordEmbed.Author> { // dev.kord.common.entity/DiscordEmbed.Author.$serializer|null[0]
            final val descriptor // dev.kord.common.entity/DiscordEmbed.Author.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordEmbed.Author.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordEmbed.Author.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordEmbed.Author // dev.kord.common.entity/DiscordEmbed.Author.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordEmbed.Author) // dev.kord.common.entity/DiscordEmbed.Author.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordEmbed.Author){}[0]
        }

        final object Companion { // dev.kord.common.entity/DiscordEmbed.Author.Companion|null[0]
            final val $childSerializers // dev.kord.common.entity/DiscordEmbed.Author.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordEmbed.Author> // dev.kord.common.entity/DiscordEmbed.Author.Companion.serializer|serializer(){}[0]
        }
    }

    final class Field { // dev.kord.common.entity/DiscordEmbed.Field|null[0]
        constructor <init>(kotlin/String, kotlin/String, dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.common.entity/DiscordEmbed.Field.<init>|<init>(kotlin.String;kotlin.String;dev.kord.common.entity.optional.OptionalBoolean){}[0]

        final val inline // dev.kord.common.entity/DiscordEmbed.Field.inline|{}inline[0]
            final fun <get-inline>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordEmbed.Field.inline.<get-inline>|<get-inline>(){}[0]
        final val name // dev.kord.common.entity/DiscordEmbed.Field.name|{}name[0]
            final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordEmbed.Field.name.<get-name>|<get-name>(){}[0]
        final val value // dev.kord.common.entity/DiscordEmbed.Field.value|{}value[0]
            final fun <get-value>(): kotlin/String // dev.kord.common.entity/DiscordEmbed.Field.value.<get-value>|<get-value>(){}[0]

        final fun component1(): kotlin/String // dev.kord.common.entity/DiscordEmbed.Field.component1|component1(){}[0]
        final fun component2(): kotlin/String // dev.kord.common.entity/DiscordEmbed.Field.component2|component2(){}[0]
        final fun component3(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordEmbed.Field.component3|component3(){}[0]
        final fun copy(kotlin/String = ..., kotlin/String = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.common.entity/DiscordEmbed.Field // dev.kord.common.entity/DiscordEmbed.Field.copy|copy(kotlin.String;kotlin.String;dev.kord.common.entity.optional.OptionalBoolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordEmbed.Field.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordEmbed.Field.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity/DiscordEmbed.Field.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordEmbed.Field> { // dev.kord.common.entity/DiscordEmbed.Field.$serializer|null[0]
            final val descriptor // dev.kord.common.entity/DiscordEmbed.Field.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordEmbed.Field.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordEmbed.Field.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordEmbed.Field // dev.kord.common.entity/DiscordEmbed.Field.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordEmbed.Field) // dev.kord.common.entity/DiscordEmbed.Field.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordEmbed.Field){}[0]
        }

        final object Companion { // dev.kord.common.entity/DiscordEmbed.Field.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordEmbed.Field> // dev.kord.common.entity/DiscordEmbed.Field.Companion.serializer|serializer(){}[0]
        }
    }

    final class Footer { // dev.kord.common.entity/DiscordEmbed.Footer|null[0]
        constructor <init>(kotlin/String, dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...) // dev.kord.common.entity/DiscordEmbed.Footer.<init>|<init>(kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]

        final val iconUrl // dev.kord.common.entity/DiscordEmbed.Footer.iconUrl|{}iconUrl[0]
            final fun <get-iconUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.Footer.iconUrl.<get-iconUrl>|<get-iconUrl>(){}[0]
        final val proxyIconUrl // dev.kord.common.entity/DiscordEmbed.Footer.proxyIconUrl|{}proxyIconUrl[0]
            final fun <get-proxyIconUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.Footer.proxyIconUrl.<get-proxyIconUrl>|<get-proxyIconUrl>(){}[0]
        final val text // dev.kord.common.entity/DiscordEmbed.Footer.text|{}text[0]
            final fun <get-text>(): kotlin/String // dev.kord.common.entity/DiscordEmbed.Footer.text.<get-text>|<get-text>(){}[0]

        final fun component1(): kotlin/String // dev.kord.common.entity/DiscordEmbed.Footer.component1|component1(){}[0]
        final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.Footer.component2|component2(){}[0]
        final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.Footer.component3|component3(){}[0]
        final fun copy(kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...): dev.kord.common.entity/DiscordEmbed.Footer // dev.kord.common.entity/DiscordEmbed.Footer.copy|copy(kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordEmbed.Footer.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordEmbed.Footer.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity/DiscordEmbed.Footer.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordEmbed.Footer> { // dev.kord.common.entity/DiscordEmbed.Footer.$serializer|null[0]
            final val descriptor // dev.kord.common.entity/DiscordEmbed.Footer.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordEmbed.Footer.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordEmbed.Footer.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordEmbed.Footer // dev.kord.common.entity/DiscordEmbed.Footer.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordEmbed.Footer) // dev.kord.common.entity/DiscordEmbed.Footer.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordEmbed.Footer){}[0]
        }

        final object Companion { // dev.kord.common.entity/DiscordEmbed.Footer.Companion|null[0]
            final val $childSerializers // dev.kord.common.entity/DiscordEmbed.Footer.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordEmbed.Footer> // dev.kord.common.entity/DiscordEmbed.Footer.Companion.serializer|serializer(){}[0]
        }
    }

    final class Image { // dev.kord.common.entity/DiscordEmbed.Image|null[0]
        constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ...) // dev.kord.common.entity/DiscordEmbed.Image.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt){}[0]

        final val height // dev.kord.common.entity/DiscordEmbed.Image.height|{}height[0]
            final fun <get-height>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordEmbed.Image.height.<get-height>|<get-height>(){}[0]
        final val proxyUrl // dev.kord.common.entity/DiscordEmbed.Image.proxyUrl|{}proxyUrl[0]
            final fun <get-proxyUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.Image.proxyUrl.<get-proxyUrl>|<get-proxyUrl>(){}[0]
        final val url // dev.kord.common.entity/DiscordEmbed.Image.url|{}url[0]
            final fun <get-url>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.Image.url.<get-url>|<get-url>(){}[0]
        final val width // dev.kord.common.entity/DiscordEmbed.Image.width|{}width[0]
            final fun <get-width>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordEmbed.Image.width.<get-width>|<get-width>(){}[0]

        final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.Image.component1|component1(){}[0]
        final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.Image.component2|component2(){}[0]
        final fun component3(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordEmbed.Image.component3|component3(){}[0]
        final fun component4(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordEmbed.Image.component4|component4(){}[0]
        final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ...): dev.kord.common.entity/DiscordEmbed.Image // dev.kord.common.entity/DiscordEmbed.Image.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordEmbed.Image.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordEmbed.Image.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity/DiscordEmbed.Image.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordEmbed.Image> { // dev.kord.common.entity/DiscordEmbed.Image.$serializer|null[0]
            final val descriptor // dev.kord.common.entity/DiscordEmbed.Image.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordEmbed.Image.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordEmbed.Image.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordEmbed.Image // dev.kord.common.entity/DiscordEmbed.Image.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordEmbed.Image) // dev.kord.common.entity/DiscordEmbed.Image.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordEmbed.Image){}[0]
        }

        final object Companion { // dev.kord.common.entity/DiscordEmbed.Image.Companion|null[0]
            final val $childSerializers // dev.kord.common.entity/DiscordEmbed.Image.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordEmbed.Image> // dev.kord.common.entity/DiscordEmbed.Image.Companion.serializer|serializer(){}[0]
        }
    }

    final class Provider { // dev.kord.common.entity/DiscordEmbed.Provider|null[0]
        constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...) // dev.kord.common.entity/DiscordEmbed.Provider.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]

        final val name // dev.kord.common.entity/DiscordEmbed.Provider.name|{}name[0]
            final fun <get-name>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.Provider.name.<get-name>|<get-name>(){}[0]
        final val url // dev.kord.common.entity/DiscordEmbed.Provider.url|{}url[0]
            final fun <get-url>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordEmbed.Provider.url.<get-url>|<get-url>(){}[0]

        final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.Provider.component1|component1(){}[0]
        final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordEmbed.Provider.component2|component2(){}[0]
        final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...): dev.kord.common.entity/DiscordEmbed.Provider // dev.kord.common.entity/DiscordEmbed.Provider.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordEmbed.Provider.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordEmbed.Provider.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity/DiscordEmbed.Provider.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordEmbed.Provider> { // dev.kord.common.entity/DiscordEmbed.Provider.$serializer|null[0]
            final val descriptor // dev.kord.common.entity/DiscordEmbed.Provider.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordEmbed.Provider.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordEmbed.Provider.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordEmbed.Provider // dev.kord.common.entity/DiscordEmbed.Provider.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordEmbed.Provider) // dev.kord.common.entity/DiscordEmbed.Provider.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordEmbed.Provider){}[0]
        }

        final object Companion { // dev.kord.common.entity/DiscordEmbed.Provider.Companion|null[0]
            final val $childSerializers // dev.kord.common.entity/DiscordEmbed.Provider.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordEmbed.Provider> // dev.kord.common.entity/DiscordEmbed.Provider.Companion.serializer|serializer(){}[0]
        }
    }

    final class Thumbnail { // dev.kord.common.entity/DiscordEmbed.Thumbnail|null[0]
        constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ...) // dev.kord.common.entity/DiscordEmbed.Thumbnail.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt){}[0]

        final val height // dev.kord.common.entity/DiscordEmbed.Thumbnail.height|{}height[0]
            final fun <get-height>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordEmbed.Thumbnail.height.<get-height>|<get-height>(){}[0]
        final val proxyUrl // dev.kord.common.entity/DiscordEmbed.Thumbnail.proxyUrl|{}proxyUrl[0]
            final fun <get-proxyUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.Thumbnail.proxyUrl.<get-proxyUrl>|<get-proxyUrl>(){}[0]
        final val url // dev.kord.common.entity/DiscordEmbed.Thumbnail.url|{}url[0]
            final fun <get-url>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.Thumbnail.url.<get-url>|<get-url>(){}[0]
        final val width // dev.kord.common.entity/DiscordEmbed.Thumbnail.width|{}width[0]
            final fun <get-width>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordEmbed.Thumbnail.width.<get-width>|<get-width>(){}[0]

        final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.Thumbnail.component1|component1(){}[0]
        final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.Thumbnail.component2|component2(){}[0]
        final fun component3(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordEmbed.Thumbnail.component3|component3(){}[0]
        final fun component4(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordEmbed.Thumbnail.component4|component4(){}[0]
        final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ...): dev.kord.common.entity/DiscordEmbed.Thumbnail // dev.kord.common.entity/DiscordEmbed.Thumbnail.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordEmbed.Thumbnail.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordEmbed.Thumbnail.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity/DiscordEmbed.Thumbnail.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordEmbed.Thumbnail> { // dev.kord.common.entity/DiscordEmbed.Thumbnail.$serializer|null[0]
            final val descriptor // dev.kord.common.entity/DiscordEmbed.Thumbnail.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordEmbed.Thumbnail.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordEmbed.Thumbnail.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordEmbed.Thumbnail // dev.kord.common.entity/DiscordEmbed.Thumbnail.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordEmbed.Thumbnail) // dev.kord.common.entity/DiscordEmbed.Thumbnail.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordEmbed.Thumbnail){}[0]
        }

        final object Companion { // dev.kord.common.entity/DiscordEmbed.Thumbnail.Companion|null[0]
            final val $childSerializers // dev.kord.common.entity/DiscordEmbed.Thumbnail.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordEmbed.Thumbnail> // dev.kord.common.entity/DiscordEmbed.Thumbnail.Companion.serializer|serializer(){}[0]
        }
    }

    final class Video { // dev.kord.common.entity/DiscordEmbed.Video|null[0]
        constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ...) // dev.kord.common.entity/DiscordEmbed.Video.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt){}[0]

        final val height // dev.kord.common.entity/DiscordEmbed.Video.height|{}height[0]
            final fun <get-height>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordEmbed.Video.height.<get-height>|<get-height>(){}[0]
        final val url // dev.kord.common.entity/DiscordEmbed.Video.url|{}url[0]
            final fun <get-url>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.Video.url.<get-url>|<get-url>(){}[0]
        final val width // dev.kord.common.entity/DiscordEmbed.Video.width|{}width[0]
            final fun <get-width>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordEmbed.Video.width.<get-width>|<get-width>(){}[0]

        final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordEmbed.Video.component1|component1(){}[0]
        final fun component2(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordEmbed.Video.component2|component2(){}[0]
        final fun component3(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordEmbed.Video.component3|component3(){}[0]
        final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ...): dev.kord.common.entity/DiscordEmbed.Video // dev.kord.common.entity/DiscordEmbed.Video.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordEmbed.Video.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordEmbed.Video.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity/DiscordEmbed.Video.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordEmbed.Video> { // dev.kord.common.entity/DiscordEmbed.Video.$serializer|null[0]
            final val descriptor // dev.kord.common.entity/DiscordEmbed.Video.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordEmbed.Video.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordEmbed.Video.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordEmbed.Video // dev.kord.common.entity/DiscordEmbed.Video.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordEmbed.Video) // dev.kord.common.entity/DiscordEmbed.Video.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordEmbed.Video){}[0]
        }

        final object Companion { // dev.kord.common.entity/DiscordEmbed.Video.Companion|null[0]
            final val $childSerializers // dev.kord.common.entity/DiscordEmbed.Video.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordEmbed.Video> // dev.kord.common.entity/DiscordEmbed.Video.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordEmbed> { // dev.kord.common.entity/DiscordEmbed.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordEmbed.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordEmbed.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordEmbed.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordEmbed // dev.kord.common.entity/DiscordEmbed.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordEmbed) // dev.kord.common.entity/DiscordEmbed.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordEmbed){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordEmbed.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordEmbed.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordEmbed> // dev.kord.common.entity/DiscordEmbed.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordEmoji { // dev.kord.common.entity/DiscordEmoji|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake?, kotlin/String?, dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.common.entity/DiscordEmoji.<init>|<init>(dev.kord.common.entity.Snowflake?;kotlin.String?;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean){}[0]

    final val animated // dev.kord.common.entity/DiscordEmoji.animated|{}animated[0]
        final fun <get-animated>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordEmoji.animated.<get-animated>|<get-animated>(){}[0]
    final val available // dev.kord.common.entity/DiscordEmoji.available|{}available[0]
        final fun <get-available>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordEmoji.available.<get-available>|<get-available>(){}[0]
    final val id // dev.kord.common.entity/DiscordEmoji.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordEmoji.id.<get-id>|<get-id>(){}[0]
    final val managed // dev.kord.common.entity/DiscordEmoji.managed|{}managed[0]
        final fun <get-managed>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordEmoji.managed.<get-managed>|<get-managed>(){}[0]
    final val name // dev.kord.common.entity/DiscordEmoji.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.common.entity/DiscordEmoji.name.<get-name>|<get-name>(){}[0]
    final val requireColons // dev.kord.common.entity/DiscordEmoji.requireColons|{}requireColons[0]
        final fun <get-requireColons>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordEmoji.requireColons.<get-requireColons>|<get-requireColons>(){}[0]
    final val roles // dev.kord.common.entity/DiscordEmoji.roles|{}roles[0]
        final fun <get-roles>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.common.entity/DiscordEmoji.roles.<get-roles>|<get-roles>(){}[0]
    final val user // dev.kord.common.entity/DiscordEmoji.user|{}user[0]
        final fun <get-user>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordEmoji.user.<get-user>|<get-user>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordEmoji.component1|component1(){}[0]
    final fun component2(): kotlin/String? // dev.kord.common.entity/DiscordEmoji.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.common.entity/DiscordEmoji.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordEmoji.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordEmoji.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordEmoji.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordEmoji.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordEmoji.component8|component8(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake? = ..., kotlin/String? = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.common.entity/DiscordEmoji // dev.kord.common.entity/DiscordEmoji.copy|copy(dev.kord.common.entity.Snowflake?;kotlin.String?;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordEmoji.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordEmoji.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordEmoji.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordEmoji> { // dev.kord.common.entity/DiscordEmoji.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordEmoji.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordEmoji.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordEmoji.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordEmoji // dev.kord.common.entity/DiscordEmoji.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordEmoji) // dev.kord.common.entity/DiscordEmoji.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordEmoji){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordEmoji.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordEmoji.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordEmoji> // dev.kord.common.entity/DiscordEmoji.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordGuild { // dev.kord.common.entity/DiscordGuild|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/String?, dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> = ..., kotlin/String, dev.kord.common.entity/Snowflake?, kotlin.time/Duration, dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ..., dev.kord.common.entity/VerificationLevel, dev.kord.common.entity/DefaultMessageNotificationLevel, dev.kord.common.entity/ExplicitContentFilter, kotlin.collections/List<dev.kord.common.entity/DiscordRole>, kotlin.collections/List<dev.kord.common.entity/DiscordEmoji>, kotlin.collections/List<dev.kord.common.entity/GuildFeature>, dev.kord.common.entity/MFALevel, dev.kord.common.entity/Snowflake?, dev.kord.common.entity/Snowflake?, dev.kord.common.entity/SystemChannelFlags, dev.kord.common.entity/Snowflake?, dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordVoiceState>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordGuildMember>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordChannel>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordChannel>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordPresenceUpdate>> = ..., dev.kord.common.entity.optional/OptionalInt? = ..., dev.kord.common.entity.optional/OptionalInt = ..., kotlin/String?, kotlin/String?, kotlin/String?, dev.kord.common.entity/PremiumTier, dev.kord.common.entity.optional/OptionalInt = ..., kotlin/String, dev.kord.common.entity/Snowflake?, dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordWelcomeScreen> = ..., dev.kord.common.entity/NsfwLevel, dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordStageInstance>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordMessageSticker>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordGuildScheduledEvent>> = ..., kotlin/Boolean, dev.kord.common.entity/Snowflake?) // dev.kord.common.entity/DiscordGuild.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String?;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions>;kotlin.String;dev.kord.common.entity.Snowflake?;kotlin.time.Duration;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalSnowflake?;dev.kord.common.entity.VerificationLevel;dev.kord.common.entity.DefaultMessageNotificationLevel;dev.kord.common.entity.ExplicitContentFilter;kotlin.collections.List<dev.kord.common.entity.DiscordRole>;kotlin.collections.List<dev.kord.common.entity.DiscordEmoji>;kotlin.collections.List<dev.kord.common.entity.GuildFeature>;dev.kord.common.entity.MFALevel;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.SystemChannelFlags;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordVoiceState>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordGuildMember>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordChannel>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordChannel>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordPresenceUpdate>>;dev.kord.common.entity.optional.OptionalInt?;dev.kord.common.entity.optional.OptionalInt;kotlin.String?;kotlin.String?;kotlin.String?;dev.kord.common.entity.PremiumTier;dev.kord.common.entity.optional.OptionalInt;kotlin.String;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordWelcomeScreen>;dev.kord.common.entity.NsfwLevel;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordStageInstance>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordMessageSticker>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordGuildScheduledEvent>>;kotlin.Boolean;dev.kord.common.entity.Snowflake?){}[0]

    final val afkChannelId // dev.kord.common.entity/DiscordGuild.afkChannelId|{}afkChannelId[0]
        final fun <get-afkChannelId>(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordGuild.afkChannelId.<get-afkChannelId>|<get-afkChannelId>(){}[0]
    final val afkTimeout // dev.kord.common.entity/DiscordGuild.afkTimeout|{}afkTimeout[0]
        final fun <get-afkTimeout>(): kotlin.time/Duration // dev.kord.common.entity/DiscordGuild.afkTimeout.<get-afkTimeout>|<get-afkTimeout>(){}[0]
    final val applicationId // dev.kord.common.entity/DiscordGuild.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordGuild.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val approximateMemberCount // dev.kord.common.entity/DiscordGuild.approximateMemberCount|{}approximateMemberCount[0]
        final fun <get-approximateMemberCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordGuild.approximateMemberCount.<get-approximateMemberCount>|<get-approximateMemberCount>(){}[0]
    final val approximatePresenceCount // dev.kord.common.entity/DiscordGuild.approximatePresenceCount|{}approximatePresenceCount[0]
        final fun <get-approximatePresenceCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordGuild.approximatePresenceCount.<get-approximatePresenceCount>|<get-approximatePresenceCount>(){}[0]
    final val banner // dev.kord.common.entity/DiscordGuild.banner|{}banner[0]
        final fun <get-banner>(): kotlin/String? // dev.kord.common.entity/DiscordGuild.banner.<get-banner>|<get-banner>(){}[0]
    final val channels // dev.kord.common.entity/DiscordGuild.channels|{}channels[0]
        final fun <get-channels>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordChannel>> // dev.kord.common.entity/DiscordGuild.channels.<get-channels>|<get-channels>(){}[0]
    final val defaultMessageNotifications // dev.kord.common.entity/DiscordGuild.defaultMessageNotifications|{}defaultMessageNotifications[0]
        final fun <get-defaultMessageNotifications>(): dev.kord.common.entity/DefaultMessageNotificationLevel // dev.kord.common.entity/DiscordGuild.defaultMessageNotifications.<get-defaultMessageNotifications>|<get-defaultMessageNotifications>(){}[0]
    final val description // dev.kord.common.entity/DiscordGuild.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.common.entity/DiscordGuild.description.<get-description>|<get-description>(){}[0]
    final val discoverySplash // dev.kord.common.entity/DiscordGuild.discoverySplash|{}discoverySplash[0]
        final fun <get-discoverySplash>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordGuild.discoverySplash.<get-discoverySplash>|<get-discoverySplash>(){}[0]
    final val emojis // dev.kord.common.entity/DiscordGuild.emojis|{}emojis[0]
        final fun <get-emojis>(): kotlin.collections/List<dev.kord.common.entity/DiscordEmoji> // dev.kord.common.entity/DiscordGuild.emojis.<get-emojis>|<get-emojis>(){}[0]
    final val explicitContentFilter // dev.kord.common.entity/DiscordGuild.explicitContentFilter|{}explicitContentFilter[0]
        final fun <get-explicitContentFilter>(): dev.kord.common.entity/ExplicitContentFilter // dev.kord.common.entity/DiscordGuild.explicitContentFilter.<get-explicitContentFilter>|<get-explicitContentFilter>(){}[0]
    final val features // dev.kord.common.entity/DiscordGuild.features|{}features[0]
        final fun <get-features>(): kotlin.collections/List<dev.kord.common.entity/GuildFeature> // dev.kord.common.entity/DiscordGuild.features.<get-features>|<get-features>(){}[0]
    final val guildScheduledEvents // dev.kord.common.entity/DiscordGuild.guildScheduledEvents|{}guildScheduledEvents[0]
        final fun <get-guildScheduledEvents>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordGuildScheduledEvent>> // dev.kord.common.entity/DiscordGuild.guildScheduledEvents.<get-guildScheduledEvents>|<get-guildScheduledEvents>(){}[0]
    final val icon // dev.kord.common.entity/DiscordGuild.icon|{}icon[0]
        final fun <get-icon>(): kotlin/String? // dev.kord.common.entity/DiscordGuild.icon.<get-icon>|<get-icon>(){}[0]
    final val iconHash // dev.kord.common.entity/DiscordGuild.iconHash|{}iconHash[0]
        final fun <get-iconHash>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordGuild.iconHash.<get-iconHash>|<get-iconHash>(){}[0]
    final val id // dev.kord.common.entity/DiscordGuild.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordGuild.id.<get-id>|<get-id>(){}[0]
    final val joinedAt // dev.kord.common.entity/DiscordGuild.joinedAt|{}joinedAt[0]
        final fun <get-joinedAt>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.common.entity/DiscordGuild.joinedAt.<get-joinedAt>|<get-joinedAt>(){}[0]
    final val large // dev.kord.common.entity/DiscordGuild.large|{}large[0]
        final fun <get-large>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordGuild.large.<get-large>|<get-large>(){}[0]
    final val maxMembers // dev.kord.common.entity/DiscordGuild.maxMembers|{}maxMembers[0]
        final fun <get-maxMembers>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordGuild.maxMembers.<get-maxMembers>|<get-maxMembers>(){}[0]
    final val maxPresences // dev.kord.common.entity/DiscordGuild.maxPresences|{}maxPresences[0]
        final fun <get-maxPresences>(): dev.kord.common.entity.optional/OptionalInt? // dev.kord.common.entity/DiscordGuild.maxPresences.<get-maxPresences>|<get-maxPresences>(){}[0]
    final val maxStageVideoChannelUsers // dev.kord.common.entity/DiscordGuild.maxStageVideoChannelUsers|{}maxStageVideoChannelUsers[0]
        final fun <get-maxStageVideoChannelUsers>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordGuild.maxStageVideoChannelUsers.<get-maxStageVideoChannelUsers>|<get-maxStageVideoChannelUsers>(){}[0]
    final val maxVideoChannelUsers // dev.kord.common.entity/DiscordGuild.maxVideoChannelUsers|{}maxVideoChannelUsers[0]
        final fun <get-maxVideoChannelUsers>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordGuild.maxVideoChannelUsers.<get-maxVideoChannelUsers>|<get-maxVideoChannelUsers>(){}[0]
    final val memberCount // dev.kord.common.entity/DiscordGuild.memberCount|{}memberCount[0]
        final fun <get-memberCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordGuild.memberCount.<get-memberCount>|<get-memberCount>(){}[0]
    final val members // dev.kord.common.entity/DiscordGuild.members|{}members[0]
        final fun <get-members>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordGuildMember>> // dev.kord.common.entity/DiscordGuild.members.<get-members>|<get-members>(){}[0]
    final val mfaLevel // dev.kord.common.entity/DiscordGuild.mfaLevel|{}mfaLevel[0]
        final fun <get-mfaLevel>(): dev.kord.common.entity/MFALevel // dev.kord.common.entity/DiscordGuild.mfaLevel.<get-mfaLevel>|<get-mfaLevel>(){}[0]
    final val name // dev.kord.common.entity/DiscordGuild.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordGuild.name.<get-name>|<get-name>(){}[0]
    final val nsfwLevel // dev.kord.common.entity/DiscordGuild.nsfwLevel|{}nsfwLevel[0]
        final fun <get-nsfwLevel>(): dev.kord.common.entity/NsfwLevel // dev.kord.common.entity/DiscordGuild.nsfwLevel.<get-nsfwLevel>|<get-nsfwLevel>(){}[0]
    final val owner // dev.kord.common.entity/DiscordGuild.owner|{}owner[0]
        final fun <get-owner>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordGuild.owner.<get-owner>|<get-owner>(){}[0]
    final val ownerId // dev.kord.common.entity/DiscordGuild.ownerId|{}ownerId[0]
        final fun <get-ownerId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordGuild.ownerId.<get-ownerId>|<get-ownerId>(){}[0]
    final val permissions // dev.kord.common.entity/DiscordGuild.permissions|{}permissions[0]
        final fun <get-permissions>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> // dev.kord.common.entity/DiscordGuild.permissions.<get-permissions>|<get-permissions>(){}[0]
    final val preferredLocale // dev.kord.common.entity/DiscordGuild.preferredLocale|{}preferredLocale[0]
        final fun <get-preferredLocale>(): kotlin/String // dev.kord.common.entity/DiscordGuild.preferredLocale.<get-preferredLocale>|<get-preferredLocale>(){}[0]
    final val premiumProgressBarEnabled // dev.kord.common.entity/DiscordGuild.premiumProgressBarEnabled|{}premiumProgressBarEnabled[0]
        final fun <get-premiumProgressBarEnabled>(): kotlin/Boolean // dev.kord.common.entity/DiscordGuild.premiumProgressBarEnabled.<get-premiumProgressBarEnabled>|<get-premiumProgressBarEnabled>(){}[0]
    final val premiumSubscriptionCount // dev.kord.common.entity/DiscordGuild.premiumSubscriptionCount|{}premiumSubscriptionCount[0]
        final fun <get-premiumSubscriptionCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordGuild.premiumSubscriptionCount.<get-premiumSubscriptionCount>|<get-premiumSubscriptionCount>(){}[0]
    final val premiumTier // dev.kord.common.entity/DiscordGuild.premiumTier|{}premiumTier[0]
        final fun <get-premiumTier>(): dev.kord.common.entity/PremiumTier // dev.kord.common.entity/DiscordGuild.premiumTier.<get-premiumTier>|<get-premiumTier>(){}[0]
    final val presences // dev.kord.common.entity/DiscordGuild.presences|{}presences[0]
        final fun <get-presences>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordPresenceUpdate>> // dev.kord.common.entity/DiscordGuild.presences.<get-presences>|<get-presences>(){}[0]
    final val publicUpdatesChannelId // dev.kord.common.entity/DiscordGuild.publicUpdatesChannelId|{}publicUpdatesChannelId[0]
        final fun <get-publicUpdatesChannelId>(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordGuild.publicUpdatesChannelId.<get-publicUpdatesChannelId>|<get-publicUpdatesChannelId>(){}[0]
    final val region // dev.kord.common.entity/DiscordGuild.region|{}region[0]
        final fun <get-region>(): kotlin/String // dev.kord.common.entity/DiscordGuild.region.<get-region>|<get-region>(){}[0]
    final val roles // dev.kord.common.entity/DiscordGuild.roles|{}roles[0]
        final fun <get-roles>(): kotlin.collections/List<dev.kord.common.entity/DiscordRole> // dev.kord.common.entity/DiscordGuild.roles.<get-roles>|<get-roles>(){}[0]
    final val rulesChannelId // dev.kord.common.entity/DiscordGuild.rulesChannelId|{}rulesChannelId[0]
        final fun <get-rulesChannelId>(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordGuild.rulesChannelId.<get-rulesChannelId>|<get-rulesChannelId>(){}[0]
    final val safetyAlertsChannelId // dev.kord.common.entity/DiscordGuild.safetyAlertsChannelId|{}safetyAlertsChannelId[0]
        final fun <get-safetyAlertsChannelId>(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordGuild.safetyAlertsChannelId.<get-safetyAlertsChannelId>|<get-safetyAlertsChannelId>(){}[0]
    final val splash // dev.kord.common.entity/DiscordGuild.splash|{}splash[0]
        final fun <get-splash>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordGuild.splash.<get-splash>|<get-splash>(){}[0]
    final val stageInstances // dev.kord.common.entity/DiscordGuild.stageInstances|{}stageInstances[0]
        final fun <get-stageInstances>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordStageInstance>> // dev.kord.common.entity/DiscordGuild.stageInstances.<get-stageInstances>|<get-stageInstances>(){}[0]
    final val stickers // dev.kord.common.entity/DiscordGuild.stickers|{}stickers[0]
        final fun <get-stickers>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordMessageSticker>> // dev.kord.common.entity/DiscordGuild.stickers.<get-stickers>|<get-stickers>(){}[0]
    final val systemChannelFlags // dev.kord.common.entity/DiscordGuild.systemChannelFlags|{}systemChannelFlags[0]
        final fun <get-systemChannelFlags>(): dev.kord.common.entity/SystemChannelFlags // dev.kord.common.entity/DiscordGuild.systemChannelFlags.<get-systemChannelFlags>|<get-systemChannelFlags>(){}[0]
    final val systemChannelId // dev.kord.common.entity/DiscordGuild.systemChannelId|{}systemChannelId[0]
        final fun <get-systemChannelId>(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordGuild.systemChannelId.<get-systemChannelId>|<get-systemChannelId>(){}[0]
    final val threads // dev.kord.common.entity/DiscordGuild.threads|{}threads[0]
        final fun <get-threads>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordChannel>> // dev.kord.common.entity/DiscordGuild.threads.<get-threads>|<get-threads>(){}[0]
    final val unavailable // dev.kord.common.entity/DiscordGuild.unavailable|{}unavailable[0]
        final fun <get-unavailable>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordGuild.unavailable.<get-unavailable>|<get-unavailable>(){}[0]
    final val vanityUrlCode // dev.kord.common.entity/DiscordGuild.vanityUrlCode|{}vanityUrlCode[0]
        final fun <get-vanityUrlCode>(): kotlin/String? // dev.kord.common.entity/DiscordGuild.vanityUrlCode.<get-vanityUrlCode>|<get-vanityUrlCode>(){}[0]
    final val verificationLevel // dev.kord.common.entity/DiscordGuild.verificationLevel|{}verificationLevel[0]
        final fun <get-verificationLevel>(): dev.kord.common.entity/VerificationLevel // dev.kord.common.entity/DiscordGuild.verificationLevel.<get-verificationLevel>|<get-verificationLevel>(){}[0]
    final val voiceStates // dev.kord.common.entity/DiscordGuild.voiceStates|{}voiceStates[0]
        final fun <get-voiceStates>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordVoiceState>> // dev.kord.common.entity/DiscordGuild.voiceStates.<get-voiceStates>|<get-voiceStates>(){}[0]
    final val welcomeScreen // dev.kord.common.entity/DiscordGuild.welcomeScreen|{}welcomeScreen[0]
        final fun <get-welcomeScreen>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordWelcomeScreen> // dev.kord.common.entity/DiscordGuild.welcomeScreen.<get-welcomeScreen>|<get-welcomeScreen>(){}[0]
    final val widgetChannelId // dev.kord.common.entity/DiscordGuild.widgetChannelId|{}widgetChannelId[0]
        final fun <get-widgetChannelId>(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.common.entity/DiscordGuild.widgetChannelId.<get-widgetChannelId>|<get-widgetChannelId>(){}[0]
    final val widgetEnabled // dev.kord.common.entity/DiscordGuild.widgetEnabled|{}widgetEnabled[0]
        final fun <get-widgetEnabled>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordGuild.widgetEnabled.<get-widgetEnabled>|<get-widgetEnabled>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordGuild.component1|component1(){}[0]
    final fun component10(): kotlin/String // dev.kord.common.entity/DiscordGuild.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordGuild.component11|component11(){}[0]
    final fun component12(): kotlin.time/Duration // dev.kord.common.entity/DiscordGuild.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordGuild.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.common.entity/DiscordGuild.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity/VerificationLevel // dev.kord.common.entity/DiscordGuild.component15|component15(){}[0]
    final fun component16(): dev.kord.common.entity/DefaultMessageNotificationLevel // dev.kord.common.entity/DiscordGuild.component16|component16(){}[0]
    final fun component17(): dev.kord.common.entity/ExplicitContentFilter // dev.kord.common.entity/DiscordGuild.component17|component17(){}[0]
    final fun component18(): kotlin.collections/List<dev.kord.common.entity/DiscordRole> // dev.kord.common.entity/DiscordGuild.component18|component18(){}[0]
    final fun component19(): kotlin.collections/List<dev.kord.common.entity/DiscordEmoji> // dev.kord.common.entity/DiscordGuild.component19|component19(){}[0]
    final fun component2(): kotlin/String // dev.kord.common.entity/DiscordGuild.component2|component2(){}[0]
    final fun component20(): kotlin.collections/List<dev.kord.common.entity/GuildFeature> // dev.kord.common.entity/DiscordGuild.component20|component20(){}[0]
    final fun component21(): dev.kord.common.entity/MFALevel // dev.kord.common.entity/DiscordGuild.component21|component21(){}[0]
    final fun component22(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordGuild.component22|component22(){}[0]
    final fun component23(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordGuild.component23|component23(){}[0]
    final fun component24(): dev.kord.common.entity/SystemChannelFlags // dev.kord.common.entity/DiscordGuild.component24|component24(){}[0]
    final fun component25(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordGuild.component25|component25(){}[0]
    final fun component26(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.common.entity/DiscordGuild.component26|component26(){}[0]
    final fun component27(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordGuild.component27|component27(){}[0]
    final fun component28(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordGuild.component28|component28(){}[0]
    final fun component29(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordGuild.component29|component29(){}[0]
    final fun component3(): kotlin/String? // dev.kord.common.entity/DiscordGuild.component3|component3(){}[0]
    final fun component30(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordVoiceState>> // dev.kord.common.entity/DiscordGuild.component30|component30(){}[0]
    final fun component31(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordGuildMember>> // dev.kord.common.entity/DiscordGuild.component31|component31(){}[0]
    final fun component32(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordChannel>> // dev.kord.common.entity/DiscordGuild.component32|component32(){}[0]
    final fun component33(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordChannel>> // dev.kord.common.entity/DiscordGuild.component33|component33(){}[0]
    final fun component34(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordPresenceUpdate>> // dev.kord.common.entity/DiscordGuild.component34|component34(){}[0]
    final fun component35(): dev.kord.common.entity.optional/OptionalInt? // dev.kord.common.entity/DiscordGuild.component35|component35(){}[0]
    final fun component36(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordGuild.component36|component36(){}[0]
    final fun component37(): kotlin/String? // dev.kord.common.entity/DiscordGuild.component37|component37(){}[0]
    final fun component38(): kotlin/String? // dev.kord.common.entity/DiscordGuild.component38|component38(){}[0]
    final fun component39(): kotlin/String? // dev.kord.common.entity/DiscordGuild.component39|component39(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordGuild.component4|component4(){}[0]
    final fun component40(): dev.kord.common.entity/PremiumTier // dev.kord.common.entity/DiscordGuild.component40|component40(){}[0]
    final fun component41(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordGuild.component41|component41(){}[0]
    final fun component42(): kotlin/String // dev.kord.common.entity/DiscordGuild.component42|component42(){}[0]
    final fun component43(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordGuild.component43|component43(){}[0]
    final fun component44(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordGuild.component44|component44(){}[0]
    final fun component45(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordGuild.component45|component45(){}[0]
    final fun component46(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordGuild.component46|component46(){}[0]
    final fun component47(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordGuild.component47|component47(){}[0]
    final fun component48(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordWelcomeScreen> // dev.kord.common.entity/DiscordGuild.component48|component48(){}[0]
    final fun component49(): dev.kord.common.entity/NsfwLevel // dev.kord.common.entity/DiscordGuild.component49|component49(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordGuild.component5|component5(){}[0]
    final fun component50(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordStageInstance>> // dev.kord.common.entity/DiscordGuild.component50|component50(){}[0]
    final fun component51(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordMessageSticker>> // dev.kord.common.entity/DiscordGuild.component51|component51(){}[0]
    final fun component52(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordGuildScheduledEvent>> // dev.kord.common.entity/DiscordGuild.component52|component52(){}[0]
    final fun component53(): kotlin/Boolean // dev.kord.common.entity/DiscordGuild.component53|component53(){}[0]
    final fun component54(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordGuild.component54|component54(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordGuild.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordGuild.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordGuild.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> // dev.kord.common.entity/DiscordGuild.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., kotlin/String? = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> = ..., kotlin/String = ..., dev.kord.common.entity/Snowflake? = ..., kotlin.time/Duration = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ..., dev.kord.common.entity/VerificationLevel = ..., dev.kord.common.entity/DefaultMessageNotificationLevel = ..., dev.kord.common.entity/ExplicitContentFilter = ..., kotlin.collections/List<dev.kord.common.entity/DiscordRole> = ..., kotlin.collections/List<dev.kord.common.entity/DiscordEmoji> = ..., kotlin.collections/List<dev.kord.common.entity/GuildFeature> = ..., dev.kord.common.entity/MFALevel = ..., dev.kord.common.entity/Snowflake? = ..., dev.kord.common.entity/Snowflake? = ..., dev.kord.common.entity/SystemChannelFlags = ..., dev.kord.common.entity/Snowflake? = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordVoiceState>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordGuildMember>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordChannel>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordChannel>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordPresenceUpdate>> = ..., dev.kord.common.entity.optional/OptionalInt? = ..., dev.kord.common.entity.optional/OptionalInt = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., dev.kord.common.entity/PremiumTier = ..., dev.kord.common.entity.optional/OptionalInt = ..., kotlin/String = ..., dev.kord.common.entity/Snowflake? = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordWelcomeScreen> = ..., dev.kord.common.entity/NsfwLevel = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordStageInstance>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordMessageSticker>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordGuildScheduledEvent>> = ..., kotlin/Boolean = ..., dev.kord.common.entity/Snowflake? = ...): dev.kord.common.entity/DiscordGuild // dev.kord.common.entity/DiscordGuild.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String?;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions>;kotlin.String;dev.kord.common.entity.Snowflake?;kotlin.time.Duration;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalSnowflake?;dev.kord.common.entity.VerificationLevel;dev.kord.common.entity.DefaultMessageNotificationLevel;dev.kord.common.entity.ExplicitContentFilter;kotlin.collections.List<dev.kord.common.entity.DiscordRole>;kotlin.collections.List<dev.kord.common.entity.DiscordEmoji>;kotlin.collections.List<dev.kord.common.entity.GuildFeature>;dev.kord.common.entity.MFALevel;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.SystemChannelFlags;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordVoiceState>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordGuildMember>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordChannel>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordChannel>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordPresenceUpdate>>;dev.kord.common.entity.optional.OptionalInt?;dev.kord.common.entity.optional.OptionalInt;kotlin.String?;kotlin.String?;kotlin.String?;dev.kord.common.entity.PremiumTier;dev.kord.common.entity.optional.OptionalInt;kotlin.String;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordWelcomeScreen>;dev.kord.common.entity.NsfwLevel;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordStageInstance>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordMessageSticker>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordGuildScheduledEvent>>;kotlin.Boolean;dev.kord.common.entity.Snowflake?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordGuild.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordGuild.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordGuild.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordGuild> { // dev.kord.common.entity/DiscordGuild.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordGuild.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordGuild.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordGuild.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordGuild // dev.kord.common.entity/DiscordGuild.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordGuild) // dev.kord.common.entity/DiscordGuild.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordGuild){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordGuild.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordGuild.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordGuild> // dev.kord.common.entity/DiscordGuild.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordGuildApplicationCommandPermission { // dev.kord.common.entity/DiscordGuildApplicationCommandPermission|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/ApplicationCommandPermissionType, kotlin/Boolean) // dev.kord.common.entity/DiscordGuildApplicationCommandPermission.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.ApplicationCommandPermissionType;kotlin.Boolean){}[0]

    final val id // dev.kord.common.entity/DiscordGuildApplicationCommandPermission.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordGuildApplicationCommandPermission.id.<get-id>|<get-id>(){}[0]
    final val permission // dev.kord.common.entity/DiscordGuildApplicationCommandPermission.permission|{}permission[0]
        final fun <get-permission>(): kotlin/Boolean // dev.kord.common.entity/DiscordGuildApplicationCommandPermission.permission.<get-permission>|<get-permission>(){}[0]
    final val type // dev.kord.common.entity/DiscordGuildApplicationCommandPermission.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ApplicationCommandPermissionType // dev.kord.common.entity/DiscordGuildApplicationCommandPermission.type.<get-type>|<get-type>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordGuildApplicationCommandPermission.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/ApplicationCommandPermissionType // dev.kord.common.entity/DiscordGuildApplicationCommandPermission.component2|component2(){}[0]
    final fun component3(): kotlin/Boolean // dev.kord.common.entity/DiscordGuildApplicationCommandPermission.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/ApplicationCommandPermissionType = ..., kotlin/Boolean = ...): dev.kord.common.entity/DiscordGuildApplicationCommandPermission // dev.kord.common.entity/DiscordGuildApplicationCommandPermission.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.ApplicationCommandPermissionType;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordGuildApplicationCommandPermission.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordGuildApplicationCommandPermission.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordGuildApplicationCommandPermission.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordGuildApplicationCommandPermission> { // dev.kord.common.entity/DiscordGuildApplicationCommandPermission.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordGuildApplicationCommandPermission.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordGuildApplicationCommandPermission.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordGuildApplicationCommandPermission.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordGuildApplicationCommandPermission // dev.kord.common.entity/DiscordGuildApplicationCommandPermission.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordGuildApplicationCommandPermission) // dev.kord.common.entity/DiscordGuildApplicationCommandPermission.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordGuildApplicationCommandPermission){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordGuildApplicationCommandPermission.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordGuildApplicationCommandPermission> // dev.kord.common.entity/DiscordGuildApplicationCommandPermission.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordGuildApplicationCommandPermissions { // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin.collections/List<dev.kord.common.entity/DiscordGuildApplicationCommandPermission>) // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.collections.List<dev.kord.common.entity.DiscordGuildApplicationCommandPermission>){}[0]

    final val applicationId // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val guildId // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions.id.<get-id>|<get-id>(){}[0]
    final val permissions // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions.permissions|{}permissions[0]
        final fun <get-permissions>(): kotlin.collections/List<dev.kord.common.entity/DiscordGuildApplicationCommandPermission> // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions.permissions.<get-permissions>|<get-permissions>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions.component3|component3(){}[0]
    final fun component4(): kotlin.collections/List<dev.kord.common.entity/DiscordGuildApplicationCommandPermission> // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., kotlin.collections/List<dev.kord.common.entity/DiscordGuildApplicationCommandPermission> = ...): dev.kord.common.entity/DiscordGuildApplicationCommandPermissions // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.collections.List<dev.kord.common.entity.DiscordGuildApplicationCommandPermission>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordGuildApplicationCommandPermissions> { // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordGuildApplicationCommandPermissions // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordGuildApplicationCommandPermissions) // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordGuildApplicationCommandPermissions){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordGuildApplicationCommandPermissions> // dev.kord.common.entity/DiscordGuildApplicationCommandPermissions.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordGuildBan { // dev.kord.common.entity/DiscordGuildBan|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordUser) // dev.kord.common.entity/DiscordGuildBan.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.DiscordUser){}[0]

    final val guildId // dev.kord.common.entity/DiscordGuildBan.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordGuildBan.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val user // dev.kord.common.entity/DiscordGuildBan.user|{}user[0]
        final fun <get-user>(): dev.kord.common.entity/DiscordUser // dev.kord.common.entity/DiscordGuildBan.user.<get-user>|<get-user>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordGuildBan.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/DiscordUser // dev.kord.common.entity/DiscordGuildBan.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/DiscordUser = ...): dev.kord.common.entity/DiscordGuildBan // dev.kord.common.entity/DiscordGuildBan.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.DiscordUser){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordGuildBan.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordGuildBan.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordGuildBan.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordGuildBan> { // dev.kord.common.entity/DiscordGuildBan.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordGuildBan.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordGuildBan.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordGuildBan.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordGuildBan // dev.kord.common.entity/DiscordGuildBan.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordGuildBan) // dev.kord.common.entity/DiscordGuildBan.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordGuildBan){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordGuildBan.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordGuildBan> // dev.kord.common.entity/DiscordGuildBan.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordGuildIntegrations { // dev.kord.common.entity/DiscordGuildIntegrations|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake) // dev.kord.common.entity/DiscordGuildIntegrations.<init>|<init>(dev.kord.common.entity.Snowflake){}[0]

    final val guildId // dev.kord.common.entity/DiscordGuildIntegrations.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordGuildIntegrations.guildId.<get-guildId>|<get-guildId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordGuildIntegrations.component1|component1(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ...): dev.kord.common.entity/DiscordGuildIntegrations // dev.kord.common.entity/DiscordGuildIntegrations.copy|copy(dev.kord.common.entity.Snowflake){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordGuildIntegrations.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordGuildIntegrations.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordGuildIntegrations.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordGuildIntegrations> { // dev.kord.common.entity/DiscordGuildIntegrations.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordGuildIntegrations.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordGuildIntegrations.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordGuildIntegrations.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordGuildIntegrations // dev.kord.common.entity/DiscordGuildIntegrations.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordGuildIntegrations) // dev.kord.common.entity/DiscordGuildIntegrations.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordGuildIntegrations){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordGuildIntegrations.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordGuildIntegrations> // dev.kord.common.entity/DiscordGuildIntegrations.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordGuildMember { // dev.kord.common.entity/DiscordGuildMember|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlin.collections/List<dev.kord.common.entity/Snowflake>, kotlinx.datetime/Instant, dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity/GuildMemberFlags, dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ...) // dev.kord.common.entity/DiscordGuildMember.<init>|<init>(dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlin.collections.List<dev.kord.common.entity.Snowflake>;kotlinx.datetime.Instant;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.GuildMemberFlags;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>){}[0]

    final val avatar // dev.kord.common.entity/DiscordGuildMember.avatar|{}avatar[0]
        final fun <get-avatar>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordGuildMember.avatar.<get-avatar>|<get-avatar>(){}[0]
    final val communicationDisabledUntil // dev.kord.common.entity/DiscordGuildMember.communicationDisabledUntil|{}communicationDisabledUntil[0]
        final fun <get-communicationDisabledUntil>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordGuildMember.communicationDisabledUntil.<get-communicationDisabledUntil>|<get-communicationDisabledUntil>(){}[0]
    final val deaf // dev.kord.common.entity/DiscordGuildMember.deaf|{}deaf[0]
        final fun <get-deaf>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordGuildMember.deaf.<get-deaf>|<get-deaf>(){}[0]
    final val flags // dev.kord.common.entity/DiscordGuildMember.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity/GuildMemberFlags // dev.kord.common.entity/DiscordGuildMember.flags.<get-flags>|<get-flags>(){}[0]
    final val joinedAt // dev.kord.common.entity/DiscordGuildMember.joinedAt|{}joinedAt[0]
        final fun <get-joinedAt>(): kotlinx.datetime/Instant // dev.kord.common.entity/DiscordGuildMember.joinedAt.<get-joinedAt>|<get-joinedAt>(){}[0]
    final val mute // dev.kord.common.entity/DiscordGuildMember.mute|{}mute[0]
        final fun <get-mute>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordGuildMember.mute.<get-mute>|<get-mute>(){}[0]
    final val nick // dev.kord.common.entity/DiscordGuildMember.nick|{}nick[0]
        final fun <get-nick>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordGuildMember.nick.<get-nick>|<get-nick>(){}[0]
    final val pending // dev.kord.common.entity/DiscordGuildMember.pending|{}pending[0]
        final fun <get-pending>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordGuildMember.pending.<get-pending>|<get-pending>(){}[0]
    final val premiumSince // dev.kord.common.entity/DiscordGuildMember.premiumSince|{}premiumSince[0]
        final fun <get-premiumSince>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordGuildMember.premiumSince.<get-premiumSince>|<get-premiumSince>(){}[0]
    final val roles // dev.kord.common.entity/DiscordGuildMember.roles|{}roles[0]
        final fun <get-roles>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/DiscordGuildMember.roles.<get-roles>|<get-roles>(){}[0]
    final val user // dev.kord.common.entity/DiscordGuildMember.user|{}user[0]
        final fun <get-user>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordGuildMember.user.<get-user>|<get-user>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordGuildMember.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordGuildMember.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordGuildMember.component11|component11(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordGuildMember.component2|component2(){}[0]
    final fun component3(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/DiscordGuildMember.component3|component3(){}[0]
    final fun component4(): kotlinx.datetime/Instant // dev.kord.common.entity/DiscordGuildMember.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordGuildMember.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordGuildMember.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordGuildMember.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity/GuildMemberFlags // dev.kord.common.entity/DiscordGuildMember.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordGuildMember.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlin.collections/List<dev.kord.common.entity/Snowflake> = ..., kotlinx.datetime/Instant = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity/GuildMemberFlags = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ...): dev.kord.common.entity/DiscordGuildMember // dev.kord.common.entity/DiscordGuildMember.copy|copy(dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlin.collections.List<dev.kord.common.entity.Snowflake>;kotlinx.datetime.Instant;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.GuildMemberFlags;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordGuildMember.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordGuildMember.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordGuildMember.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordGuildMember> { // dev.kord.common.entity/DiscordGuildMember.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordGuildMember.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordGuildMember.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordGuildMember.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordGuildMember // dev.kord.common.entity/DiscordGuildMember.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordGuildMember) // dev.kord.common.entity/DiscordGuildMember.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordGuildMember){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordGuildMember.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordGuildMember.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordGuildMember> // dev.kord.common.entity/DiscordGuildMember.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordGuildOnboarding { // dev.kord.common.entity/DiscordGuildOnboarding|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin.collections/List<dev.kord.common.entity/DiscordOnboardingPrompt>, kotlin.collections/List<dev.kord.common.entity/Snowflake>, kotlin/Boolean, dev.kord.common.entity/OnboardingMode) // dev.kord.common.entity/DiscordGuildOnboarding.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.collections.List<dev.kord.common.entity.DiscordOnboardingPrompt>;kotlin.collections.List<dev.kord.common.entity.Snowflake>;kotlin.Boolean;dev.kord.common.entity.OnboardingMode){}[0]

    final val defaultChannelIds // dev.kord.common.entity/DiscordGuildOnboarding.defaultChannelIds|{}defaultChannelIds[0]
        final fun <get-defaultChannelIds>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/DiscordGuildOnboarding.defaultChannelIds.<get-defaultChannelIds>|<get-defaultChannelIds>(){}[0]
    final val enabled // dev.kord.common.entity/DiscordGuildOnboarding.enabled|{}enabled[0]
        final fun <get-enabled>(): kotlin/Boolean // dev.kord.common.entity/DiscordGuildOnboarding.enabled.<get-enabled>|<get-enabled>(){}[0]
    final val guildId // dev.kord.common.entity/DiscordGuildOnboarding.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordGuildOnboarding.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val mode // dev.kord.common.entity/DiscordGuildOnboarding.mode|{}mode[0]
        final fun <get-mode>(): dev.kord.common.entity/OnboardingMode // dev.kord.common.entity/DiscordGuildOnboarding.mode.<get-mode>|<get-mode>(){}[0]
    final val prompts // dev.kord.common.entity/DiscordGuildOnboarding.prompts|{}prompts[0]
        final fun <get-prompts>(): kotlin.collections/List<dev.kord.common.entity/DiscordOnboardingPrompt> // dev.kord.common.entity/DiscordGuildOnboarding.prompts.<get-prompts>|<get-prompts>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordGuildOnboarding.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<dev.kord.common.entity/DiscordOnboardingPrompt> // dev.kord.common.entity/DiscordGuildOnboarding.component2|component2(){}[0]
    final fun component3(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/DiscordGuildOnboarding.component3|component3(){}[0]
    final fun component4(): kotlin/Boolean // dev.kord.common.entity/DiscordGuildOnboarding.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity/OnboardingMode // dev.kord.common.entity/DiscordGuildOnboarding.component5|component5(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin.collections/List<dev.kord.common.entity/DiscordOnboardingPrompt> = ..., kotlin.collections/List<dev.kord.common.entity/Snowflake> = ..., kotlin/Boolean = ..., dev.kord.common.entity/OnboardingMode = ...): dev.kord.common.entity/DiscordGuildOnboarding // dev.kord.common.entity/DiscordGuildOnboarding.copy|copy(dev.kord.common.entity.Snowflake;kotlin.collections.List<dev.kord.common.entity.DiscordOnboardingPrompt>;kotlin.collections.List<dev.kord.common.entity.Snowflake>;kotlin.Boolean;dev.kord.common.entity.OnboardingMode){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordGuildOnboarding.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordGuildOnboarding.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordGuildOnboarding.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordGuildOnboarding> { // dev.kord.common.entity/DiscordGuildOnboarding.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordGuildOnboarding.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordGuildOnboarding.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordGuildOnboarding.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordGuildOnboarding // dev.kord.common.entity/DiscordGuildOnboarding.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordGuildOnboarding) // dev.kord.common.entity/DiscordGuildOnboarding.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordGuildOnboarding){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordGuildOnboarding.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordGuildOnboarding.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordGuildOnboarding> // dev.kord.common.entity/DiscordGuildOnboarding.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordGuildPreview { // dev.kord.common.entity/DiscordGuildPreview|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/String?, kotlin/String?, kotlin/String?, kotlin.collections/List<dev.kord.common.entity/DiscordEmoji>, kotlin.collections/List<dev.kord.common.entity/GuildFeature>, kotlin/Int, kotlin/Int, kotlin/String?, kotlin.collections/List<dev.kord.common.entity/DiscordMessageSticker>) // dev.kord.common.entity/DiscordGuildPreview.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.collections.List<dev.kord.common.entity.DiscordEmoji>;kotlin.collections.List<dev.kord.common.entity.GuildFeature>;kotlin.Int;kotlin.Int;kotlin.String?;kotlin.collections.List<dev.kord.common.entity.DiscordMessageSticker>){}[0]

    final val approximateMemberCount // dev.kord.common.entity/DiscordGuildPreview.approximateMemberCount|{}approximateMemberCount[0]
        final fun <get-approximateMemberCount>(): kotlin/Int // dev.kord.common.entity/DiscordGuildPreview.approximateMemberCount.<get-approximateMemberCount>|<get-approximateMemberCount>(){}[0]
    final val approximatePresenceCount // dev.kord.common.entity/DiscordGuildPreview.approximatePresenceCount|{}approximatePresenceCount[0]
        final fun <get-approximatePresenceCount>(): kotlin/Int // dev.kord.common.entity/DiscordGuildPreview.approximatePresenceCount.<get-approximatePresenceCount>|<get-approximatePresenceCount>(){}[0]
    final val description // dev.kord.common.entity/DiscordGuildPreview.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.common.entity/DiscordGuildPreview.description.<get-description>|<get-description>(){}[0]
    final val discoverySplash // dev.kord.common.entity/DiscordGuildPreview.discoverySplash|{}discoverySplash[0]
        final fun <get-discoverySplash>(): kotlin/String? // dev.kord.common.entity/DiscordGuildPreview.discoverySplash.<get-discoverySplash>|<get-discoverySplash>(){}[0]
    final val emojis // dev.kord.common.entity/DiscordGuildPreview.emojis|{}emojis[0]
        final fun <get-emojis>(): kotlin.collections/List<dev.kord.common.entity/DiscordEmoji> // dev.kord.common.entity/DiscordGuildPreview.emojis.<get-emojis>|<get-emojis>(){}[0]
    final val features // dev.kord.common.entity/DiscordGuildPreview.features|{}features[0]
        final fun <get-features>(): kotlin.collections/List<dev.kord.common.entity/GuildFeature> // dev.kord.common.entity/DiscordGuildPreview.features.<get-features>|<get-features>(){}[0]
    final val icon // dev.kord.common.entity/DiscordGuildPreview.icon|{}icon[0]
        final fun <get-icon>(): kotlin/String? // dev.kord.common.entity/DiscordGuildPreview.icon.<get-icon>|<get-icon>(){}[0]
    final val id // dev.kord.common.entity/DiscordGuildPreview.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordGuildPreview.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.common.entity/DiscordGuildPreview.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordGuildPreview.name.<get-name>|<get-name>(){}[0]
    final val splash // dev.kord.common.entity/DiscordGuildPreview.splash|{}splash[0]
        final fun <get-splash>(): kotlin/String? // dev.kord.common.entity/DiscordGuildPreview.splash.<get-splash>|<get-splash>(){}[0]
    final val stickers // dev.kord.common.entity/DiscordGuildPreview.stickers|{}stickers[0]
        final fun <get-stickers>(): kotlin.collections/List<dev.kord.common.entity/DiscordMessageSticker> // dev.kord.common.entity/DiscordGuildPreview.stickers.<get-stickers>|<get-stickers>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordGuildPreview.component1|component1(){}[0]
    final fun component10(): kotlin/String? // dev.kord.common.entity/DiscordGuildPreview.component10|component10(){}[0]
    final fun component11(): kotlin.collections/List<dev.kord.common.entity/DiscordMessageSticker> // dev.kord.common.entity/DiscordGuildPreview.component11|component11(){}[0]
    final fun component2(): kotlin/String // dev.kord.common.entity/DiscordGuildPreview.component2|component2(){}[0]
    final fun component3(): kotlin/String? // dev.kord.common.entity/DiscordGuildPreview.component3|component3(){}[0]
    final fun component4(): kotlin/String? // dev.kord.common.entity/DiscordGuildPreview.component4|component4(){}[0]
    final fun component5(): kotlin/String? // dev.kord.common.entity/DiscordGuildPreview.component5|component5(){}[0]
    final fun component6(): kotlin.collections/List<dev.kord.common.entity/DiscordEmoji> // dev.kord.common.entity/DiscordGuildPreview.component6|component6(){}[0]
    final fun component7(): kotlin.collections/List<dev.kord.common.entity/GuildFeature> // dev.kord.common.entity/DiscordGuildPreview.component7|component7(){}[0]
    final fun component8(): kotlin/Int // dev.kord.common.entity/DiscordGuildPreview.component8|component8(){}[0]
    final fun component9(): kotlin/Int // dev.kord.common.entity/DiscordGuildPreview.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin.collections/List<dev.kord.common.entity/DiscordEmoji> = ..., kotlin.collections/List<dev.kord.common.entity/GuildFeature> = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/String? = ..., kotlin.collections/List<dev.kord.common.entity/DiscordMessageSticker> = ...): dev.kord.common.entity/DiscordGuildPreview // dev.kord.common.entity/DiscordGuildPreview.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.collections.List<dev.kord.common.entity.DiscordEmoji>;kotlin.collections.List<dev.kord.common.entity.GuildFeature>;kotlin.Int;kotlin.Int;kotlin.String?;kotlin.collections.List<dev.kord.common.entity.DiscordMessageSticker>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordGuildPreview.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordGuildPreview.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordGuildPreview.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordGuildPreview> { // dev.kord.common.entity/DiscordGuildPreview.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordGuildPreview.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordGuildPreview.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordGuildPreview.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordGuildPreview // dev.kord.common.entity/DiscordGuildPreview.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordGuildPreview) // dev.kord.common.entity/DiscordGuildPreview.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordGuildPreview){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordGuildPreview.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordGuildPreview.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordGuildPreview> // dev.kord.common.entity/DiscordGuildPreview.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordGuildRole { // dev.kord.common.entity/DiscordGuildRole|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordRole) // dev.kord.common.entity/DiscordGuildRole.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.DiscordRole){}[0]

    final val guildId // dev.kord.common.entity/DiscordGuildRole.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordGuildRole.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val role // dev.kord.common.entity/DiscordGuildRole.role|{}role[0]
        final fun <get-role>(): dev.kord.common.entity/DiscordRole // dev.kord.common.entity/DiscordGuildRole.role.<get-role>|<get-role>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordGuildRole.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/DiscordRole // dev.kord.common.entity/DiscordGuildRole.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/DiscordRole = ...): dev.kord.common.entity/DiscordGuildRole // dev.kord.common.entity/DiscordGuildRole.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.DiscordRole){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordGuildRole.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordGuildRole.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordGuildRole.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordGuildRole> { // dev.kord.common.entity/DiscordGuildRole.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordGuildRole.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordGuildRole.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordGuildRole.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordGuildRole // dev.kord.common.entity/DiscordGuildRole.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordGuildRole) // dev.kord.common.entity/DiscordGuildRole.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordGuildRole){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordGuildRole.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordGuildRole> // dev.kord.common.entity/DiscordGuildRole.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordGuildScheduledEvent { // dev.kord.common.entity/DiscordGuildScheduledEvent|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake?, dev.kord.common.entity.optional/OptionalSnowflake? = ..., kotlin/String, dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlinx.datetime/Instant, kotlinx.datetime/Instant?, dev.kord.common.entity/GuildScheduledEventPrivacyLevel, dev.kord.common.entity/GuildScheduledEventStatus, dev.kord.common.entity/ScheduledEntityType, dev.kord.common.entity/Snowflake?, dev.kord.common.entity/GuildScheduledEventEntityMetadata?, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...) // dev.kord.common.entity/DiscordGuildScheduledEvent.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.optional.OptionalSnowflake?;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlinx.datetime.Instant;kotlinx.datetime.Instant?;dev.kord.common.entity.GuildScheduledEventPrivacyLevel;dev.kord.common.entity.GuildScheduledEventStatus;dev.kord.common.entity.ScheduledEntityType;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.GuildScheduledEventEntityMetadata?;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]

    final val channelId // dev.kord.common.entity/DiscordGuildScheduledEvent.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordGuildScheduledEvent.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val creator // dev.kord.common.entity/DiscordGuildScheduledEvent.creator|{}creator[0]
        final fun <get-creator>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordGuildScheduledEvent.creator.<get-creator>|<get-creator>(){}[0]
    final val creatorId // dev.kord.common.entity/DiscordGuildScheduledEvent.creatorId|{}creatorId[0]
        final fun <get-creatorId>(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.common.entity/DiscordGuildScheduledEvent.creatorId.<get-creatorId>|<get-creatorId>(){}[0]
    final val description // dev.kord.common.entity/DiscordGuildScheduledEvent.description|{}description[0]
        final fun <get-description>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordGuildScheduledEvent.description.<get-description>|<get-description>(){}[0]
    final val entityId // dev.kord.common.entity/DiscordGuildScheduledEvent.entityId|{}entityId[0]
        final fun <get-entityId>(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordGuildScheduledEvent.entityId.<get-entityId>|<get-entityId>(){}[0]
    final val entityMetadata // dev.kord.common.entity/DiscordGuildScheduledEvent.entityMetadata|{}entityMetadata[0]
        final fun <get-entityMetadata>(): dev.kord.common.entity/GuildScheduledEventEntityMetadata? // dev.kord.common.entity/DiscordGuildScheduledEvent.entityMetadata.<get-entityMetadata>|<get-entityMetadata>(){}[0]
    final val entityType // dev.kord.common.entity/DiscordGuildScheduledEvent.entityType|{}entityType[0]
        final fun <get-entityType>(): dev.kord.common.entity/ScheduledEntityType // dev.kord.common.entity/DiscordGuildScheduledEvent.entityType.<get-entityType>|<get-entityType>(){}[0]
    final val guildId // dev.kord.common.entity/DiscordGuildScheduledEvent.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordGuildScheduledEvent.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.common.entity/DiscordGuildScheduledEvent.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordGuildScheduledEvent.id.<get-id>|<get-id>(){}[0]
    final val image // dev.kord.common.entity/DiscordGuildScheduledEvent.image|{}image[0]
        final fun <get-image>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordGuildScheduledEvent.image.<get-image>|<get-image>(){}[0]
    final val name // dev.kord.common.entity/DiscordGuildScheduledEvent.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordGuildScheduledEvent.name.<get-name>|<get-name>(){}[0]
    final val privacyLevel // dev.kord.common.entity/DiscordGuildScheduledEvent.privacyLevel|{}privacyLevel[0]
        final fun <get-privacyLevel>(): dev.kord.common.entity/GuildScheduledEventPrivacyLevel // dev.kord.common.entity/DiscordGuildScheduledEvent.privacyLevel.<get-privacyLevel>|<get-privacyLevel>(){}[0]
    final val scheduledEndTime // dev.kord.common.entity/DiscordGuildScheduledEvent.scheduledEndTime|{}scheduledEndTime[0]
        final fun <get-scheduledEndTime>(): kotlinx.datetime/Instant? // dev.kord.common.entity/DiscordGuildScheduledEvent.scheduledEndTime.<get-scheduledEndTime>|<get-scheduledEndTime>(){}[0]
    final val scheduledStartTime // dev.kord.common.entity/DiscordGuildScheduledEvent.scheduledStartTime|{}scheduledStartTime[0]
        final fun <get-scheduledStartTime>(): kotlinx.datetime/Instant // dev.kord.common.entity/DiscordGuildScheduledEvent.scheduledStartTime.<get-scheduledStartTime>|<get-scheduledStartTime>(){}[0]
    final val status // dev.kord.common.entity/DiscordGuildScheduledEvent.status|{}status[0]
        final fun <get-status>(): dev.kord.common.entity/GuildScheduledEventStatus // dev.kord.common.entity/DiscordGuildScheduledEvent.status.<get-status>|<get-status>(){}[0]
    final val userCount // dev.kord.common.entity/DiscordGuildScheduledEvent.userCount|{}userCount[0]
        final fun <get-userCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordGuildScheduledEvent.userCount.<get-userCount>|<get-userCount>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordGuildScheduledEvent.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity/GuildScheduledEventStatus // dev.kord.common.entity/DiscordGuildScheduledEvent.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity/ScheduledEntityType // dev.kord.common.entity/DiscordGuildScheduledEvent.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordGuildScheduledEvent.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity/GuildScheduledEventEntityMetadata? // dev.kord.common.entity/DiscordGuildScheduledEvent.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordGuildScheduledEvent.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordGuildScheduledEvent.component15|component15(){}[0]
    final fun component16(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordGuildScheduledEvent.component16|component16(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordGuildScheduledEvent.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordGuildScheduledEvent.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalSnowflake? // dev.kord.common.entity/DiscordGuildScheduledEvent.component4|component4(){}[0]
    final fun component5(): kotlin/String // dev.kord.common.entity/DiscordGuildScheduledEvent.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordGuildScheduledEvent.component6|component6(){}[0]
    final fun component7(): kotlinx.datetime/Instant // dev.kord.common.entity/DiscordGuildScheduledEvent.component7|component7(){}[0]
    final fun component8(): kotlinx.datetime/Instant? // dev.kord.common.entity/DiscordGuildScheduledEvent.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity/GuildScheduledEventPrivacyLevel // dev.kord.common.entity/DiscordGuildScheduledEvent.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake? = ..., dev.kord.common.entity.optional/OptionalSnowflake? = ..., kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlinx.datetime/Instant = ..., kotlinx.datetime/Instant? = ..., dev.kord.common.entity/GuildScheduledEventPrivacyLevel = ..., dev.kord.common.entity/GuildScheduledEventStatus = ..., dev.kord.common.entity/ScheduledEntityType = ..., dev.kord.common.entity/Snowflake? = ..., dev.kord.common.entity/GuildScheduledEventEntityMetadata? = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...): dev.kord.common.entity/DiscordGuildScheduledEvent // dev.kord.common.entity/DiscordGuildScheduledEvent.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.optional.OptionalSnowflake?;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlinx.datetime.Instant;kotlinx.datetime.Instant?;dev.kord.common.entity.GuildScheduledEventPrivacyLevel;dev.kord.common.entity.GuildScheduledEventStatus;dev.kord.common.entity.ScheduledEntityType;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.GuildScheduledEventEntityMetadata?;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordGuildScheduledEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordGuildScheduledEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordGuildScheduledEvent.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordGuildScheduledEvent> { // dev.kord.common.entity/DiscordGuildScheduledEvent.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordGuildScheduledEvent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordGuildScheduledEvent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordGuildScheduledEvent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordGuildScheduledEvent // dev.kord.common.entity/DiscordGuildScheduledEvent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordGuildScheduledEvent) // dev.kord.common.entity/DiscordGuildScheduledEvent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordGuildScheduledEvent){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordGuildScheduledEvent.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordGuildScheduledEvent.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordGuildScheduledEvent> // dev.kord.common.entity/DiscordGuildScheduledEvent.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordGuildWidget { // dev.kord.common.entity/DiscordGuildWidget|null[0]
    constructor <init>(kotlin/Boolean, dev.kord.common.entity/Snowflake?) // dev.kord.common.entity/DiscordGuildWidget.<init>|<init>(kotlin.Boolean;dev.kord.common.entity.Snowflake?){}[0]

    final val channelId // dev.kord.common.entity/DiscordGuildWidget.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordGuildWidget.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val enabled // dev.kord.common.entity/DiscordGuildWidget.enabled|{}enabled[0]
        final fun <get-enabled>(): kotlin/Boolean // dev.kord.common.entity/DiscordGuildWidget.enabled.<get-enabled>|<get-enabled>(){}[0]

    final fun component1(): kotlin/Boolean // dev.kord.common.entity/DiscordGuildWidget.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordGuildWidget.component2|component2(){}[0]
    final fun copy(kotlin/Boolean = ..., dev.kord.common.entity/Snowflake? = ...): dev.kord.common.entity/DiscordGuildWidget // dev.kord.common.entity/DiscordGuildWidget.copy|copy(kotlin.Boolean;dev.kord.common.entity.Snowflake?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordGuildWidget.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordGuildWidget.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordGuildWidget.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordGuildWidget> { // dev.kord.common.entity/DiscordGuildWidget.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordGuildWidget.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordGuildWidget.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordGuildWidget.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordGuildWidget // dev.kord.common.entity/DiscordGuildWidget.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordGuildWidget) // dev.kord.common.entity/DiscordGuildWidget.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordGuildWidget){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordGuildWidget.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordGuildWidget> // dev.kord.common.entity/DiscordGuildWidget.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordIntegration { // dev.kord.common.entity/DiscordIntegration|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/String, kotlin/Boolean, dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/IntegrationExpireBehavior> = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.common.entity/DiscordIntegrationsAccount, dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/IntegrationApplication> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ...) // dev.kord.common.entity/DiscordIntegration.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String;kotlin.Boolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.IntegrationExpireBehavior>;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.common.entity.DiscordIntegrationsAccount;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.IntegrationApplication>;dev.kord.common.entity.optional.OptionalSnowflake){}[0]

    final val account // dev.kord.common.entity/DiscordIntegration.account|{}account[0]
        final fun <get-account>(): dev.kord.common.entity/DiscordIntegrationsAccount // dev.kord.common.entity/DiscordIntegration.account.<get-account>|<get-account>(){}[0]
    final val application // dev.kord.common.entity/DiscordIntegration.application|{}application[0]
        final fun <get-application>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/IntegrationApplication> // dev.kord.common.entity/DiscordIntegration.application.<get-application>|<get-application>(){}[0]
    final val enableEmoticons // dev.kord.common.entity/DiscordIntegration.enableEmoticons|{}enableEmoticons[0]
        final fun <get-enableEmoticons>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordIntegration.enableEmoticons.<get-enableEmoticons>|<get-enableEmoticons>(){}[0]
    final val enabled // dev.kord.common.entity/DiscordIntegration.enabled|{}enabled[0]
        final fun <get-enabled>(): kotlin/Boolean // dev.kord.common.entity/DiscordIntegration.enabled.<get-enabled>|<get-enabled>(){}[0]
    final val expireBehavior // dev.kord.common.entity/DiscordIntegration.expireBehavior|{}expireBehavior[0]
        final fun <get-expireBehavior>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/IntegrationExpireBehavior> // dev.kord.common.entity/DiscordIntegration.expireBehavior.<get-expireBehavior>|<get-expireBehavior>(){}[0]
    final val expireGracePeriod // dev.kord.common.entity/DiscordIntegration.expireGracePeriod|{}expireGracePeriod[0]
        final fun <get-expireGracePeriod>(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.common.entity/DiscordIntegration.expireGracePeriod.<get-expireGracePeriod>|<get-expireGracePeriod>(){}[0]
    final val guildId // dev.kord.common.entity/DiscordIntegration.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordIntegration.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.common.entity/DiscordIntegration.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordIntegration.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.common.entity/DiscordIntegration.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordIntegration.name.<get-name>|<get-name>(){}[0]
    final val revoked // dev.kord.common.entity/DiscordIntegration.revoked|{}revoked[0]
        final fun <get-revoked>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordIntegration.revoked.<get-revoked>|<get-revoked>(){}[0]
    final val roleId // dev.kord.common.entity/DiscordIntegration.roleId|{}roleId[0]
        final fun <get-roleId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordIntegration.roleId.<get-roleId>|<get-roleId>(){}[0]
    final val subscriberCount // dev.kord.common.entity/DiscordIntegration.subscriberCount|{}subscriberCount[0]
        final fun <get-subscriberCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordIntegration.subscriberCount.<get-subscriberCount>|<get-subscriberCount>(){}[0]
    final val syncedAt // dev.kord.common.entity/DiscordIntegration.syncedAt|{}syncedAt[0]
        final fun <get-syncedAt>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.common.entity/DiscordIntegration.syncedAt.<get-syncedAt>|<get-syncedAt>(){}[0]
    final val syncing // dev.kord.common.entity/DiscordIntegration.syncing|{}syncing[0]
        final fun <get-syncing>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordIntegration.syncing.<get-syncing>|<get-syncing>(){}[0]
    final val type // dev.kord.common.entity/DiscordIntegration.type|{}type[0]
        final fun <get-type>(): kotlin/String // dev.kord.common.entity/DiscordIntegration.type.<get-type>|<get-type>(){}[0]
    final val user // dev.kord.common.entity/DiscordIntegration.user|{}user[0]
        final fun <get-user>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordIntegration.user.<get-user>|<get-user>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordIntegration.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordIntegration.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity/DiscordIntegrationsAccount // dev.kord.common.entity/DiscordIntegration.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.common.entity/DiscordIntegration.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordIntegration.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordIntegration.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/IntegrationApplication> // dev.kord.common.entity/DiscordIntegration.component15|component15(){}[0]
    final fun component16(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordIntegration.component16|component16(){}[0]
    final fun component2(): kotlin/String // dev.kord.common.entity/DiscordIntegration.component2|component2(){}[0]
    final fun component3(): kotlin/String // dev.kord.common.entity/DiscordIntegration.component3|component3(){}[0]
    final fun component4(): kotlin/Boolean // dev.kord.common.entity/DiscordIntegration.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordIntegration.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordIntegration.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordIntegration.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/IntegrationExpireBehavior> // dev.kord.common.entity/DiscordIntegration.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<kotlin.time/Duration> // dev.kord.common.entity/DiscordIntegration.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., kotlin/String = ..., kotlin/Boolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/IntegrationExpireBehavior> = ..., dev.kord.common.entity.optional/Optional<kotlin.time/Duration> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.common.entity/DiscordIntegrationsAccount = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/IntegrationApplication> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ...): dev.kord.common.entity/DiscordIntegration // dev.kord.common.entity/DiscordIntegration.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String;kotlin.Boolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.IntegrationExpireBehavior>;dev.kord.common.entity.optional.Optional<kotlin.time.Duration>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.common.entity.DiscordIntegrationsAccount;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.IntegrationApplication>;dev.kord.common.entity.optional.OptionalSnowflake){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordIntegration.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordIntegration.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordIntegration.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordIntegration> { // dev.kord.common.entity/DiscordIntegration.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordIntegration.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordIntegration.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordIntegration.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordIntegration // dev.kord.common.entity/DiscordIntegration.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordIntegration) // dev.kord.common.entity/DiscordIntegration.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordIntegration){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordIntegration.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordIntegration.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordIntegration> // dev.kord.common.entity/DiscordIntegration.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordIntegrationAccount { // dev.kord.common.entity/DiscordIntegrationAccount|null[0]
    constructor <init>(kotlin/String, kotlin/String) // dev.kord.common.entity/DiscordIntegrationAccount.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final val id // dev.kord.common.entity/DiscordIntegrationAccount.id|{}id[0]
        final fun <get-id>(): kotlin/String // dev.kord.common.entity/DiscordIntegrationAccount.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.common.entity/DiscordIntegrationAccount.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordIntegrationAccount.name.<get-name>|<get-name>(){}[0]

    final fun component1(): kotlin/String // dev.kord.common.entity/DiscordIntegrationAccount.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.common.entity/DiscordIntegrationAccount.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ...): dev.kord.common.entity/DiscordIntegrationAccount // dev.kord.common.entity/DiscordIntegrationAccount.copy|copy(kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordIntegrationAccount.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordIntegrationAccount.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordIntegrationAccount.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordIntegrationAccount> { // dev.kord.common.entity/DiscordIntegrationAccount.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordIntegrationAccount.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordIntegrationAccount.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordIntegrationAccount.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordIntegrationAccount // dev.kord.common.entity/DiscordIntegrationAccount.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordIntegrationAccount) // dev.kord.common.entity/DiscordIntegrationAccount.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordIntegrationAccount){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordIntegrationAccount.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordIntegrationAccount> // dev.kord.common.entity/DiscordIntegrationAccount.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordIntegrationDelete { // dev.kord.common.entity/DiscordIntegrationDelete|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalSnowflake = ...) // dev.kord.common.entity/DiscordIntegrationDelete.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake){}[0]

    final val applicationId // dev.kord.common.entity/DiscordIntegrationDelete.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordIntegrationDelete.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val guildId // dev.kord.common.entity/DiscordIntegrationDelete.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordIntegrationDelete.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.common.entity/DiscordIntegrationDelete.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordIntegrationDelete.id.<get-id>|<get-id>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordIntegrationDelete.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordIntegrationDelete.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordIntegrationDelete.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ...): dev.kord.common.entity/DiscordIntegrationDelete // dev.kord.common.entity/DiscordIntegrationDelete.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordIntegrationDelete.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordIntegrationDelete.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordIntegrationDelete.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordIntegrationDelete> { // dev.kord.common.entity/DiscordIntegrationDelete.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordIntegrationDelete.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordIntegrationDelete.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordIntegrationDelete.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordIntegrationDelete // dev.kord.common.entity/DiscordIntegrationDelete.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordIntegrationDelete) // dev.kord.common.entity/DiscordIntegrationDelete.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordIntegrationDelete){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordIntegrationDelete.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordIntegrationDelete> // dev.kord.common.entity/DiscordIntegrationDelete.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordIntegrationsAccount { // dev.kord.common.entity/DiscordIntegrationsAccount|null[0]
    constructor <init>(kotlin/String, kotlin/String) // dev.kord.common.entity/DiscordIntegrationsAccount.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final val id // dev.kord.common.entity/DiscordIntegrationsAccount.id|{}id[0]
        final fun <get-id>(): kotlin/String // dev.kord.common.entity/DiscordIntegrationsAccount.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.common.entity/DiscordIntegrationsAccount.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordIntegrationsAccount.name.<get-name>|<get-name>(){}[0]

    final fun component1(): kotlin/String // dev.kord.common.entity/DiscordIntegrationsAccount.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.common.entity/DiscordIntegrationsAccount.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ...): dev.kord.common.entity/DiscordIntegrationsAccount // dev.kord.common.entity/DiscordIntegrationsAccount.copy|copy(kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordIntegrationsAccount.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordIntegrationsAccount.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordIntegrationsAccount.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordIntegrationsAccount> { // dev.kord.common.entity/DiscordIntegrationsAccount.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordIntegrationsAccount.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordIntegrationsAccount.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordIntegrationsAccount.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordIntegrationsAccount // dev.kord.common.entity/DiscordIntegrationsAccount.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordIntegrationsAccount) // dev.kord.common.entity/DiscordIntegrationsAccount.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordIntegrationsAccount){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordIntegrationsAccount.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordIntegrationsAccount> // dev.kord.common.entity/DiscordIntegrationsAccount.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordInteraction { // dev.kord.common.entity/DiscordInteraction|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/InteractionType, dev.kord.common.entity/InteractionCallbackData, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordChannel> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordInteractionGuildMember> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., kotlin/String, kotlin/Int, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessage> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common/Locale> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common/Locale> = ...) // dev.kord.common.entity/DiscordInteraction.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.InteractionType;dev.kord.common.entity.InteractionCallbackData;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordChannel>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordInteractionGuildMember>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;kotlin.String;kotlin.Int;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordMessage>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions>;dev.kord.common.entity.optional.Optional<dev.kord.common.Locale>;dev.kord.common.entity.optional.Optional<dev.kord.common.Locale>){}[0]

    final val appPermissions // dev.kord.common.entity/DiscordInteraction.appPermissions|{}appPermissions[0]
        final fun <get-appPermissions>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> // dev.kord.common.entity/DiscordInteraction.appPermissions.<get-appPermissions>|<get-appPermissions>(){}[0]
    final val applicationId // dev.kord.common.entity/DiscordInteraction.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordInteraction.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val channel // dev.kord.common.entity/DiscordInteraction.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordChannel> // dev.kord.common.entity/DiscordInteraction.channel.<get-channel>|<get-channel>(){}[0]
    final val channelId // dev.kord.common.entity/DiscordInteraction.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordInteraction.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val data // dev.kord.common.entity/DiscordInteraction.data|{}data[0]
        final fun <get-data>(): dev.kord.common.entity/InteractionCallbackData // dev.kord.common.entity/DiscordInteraction.data.<get-data>|<get-data>(){}[0]
    final val guildId // dev.kord.common.entity/DiscordInteraction.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordInteraction.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val guildLocale // dev.kord.common.entity/DiscordInteraction.guildLocale|{}guildLocale[0]
        final fun <get-guildLocale>(): dev.kord.common.entity.optional/Optional<dev.kord.common/Locale> // dev.kord.common.entity/DiscordInteraction.guildLocale.<get-guildLocale>|<get-guildLocale>(){}[0]
    final val id // dev.kord.common.entity/DiscordInteraction.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordInteraction.id.<get-id>|<get-id>(){}[0]
    final val locale // dev.kord.common.entity/DiscordInteraction.locale|{}locale[0]
        final fun <get-locale>(): dev.kord.common.entity.optional/Optional<dev.kord.common/Locale> // dev.kord.common.entity/DiscordInteraction.locale.<get-locale>|<get-locale>(){}[0]
    final val member // dev.kord.common.entity/DiscordInteraction.member|{}member[0]
        final fun <get-member>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordInteractionGuildMember> // dev.kord.common.entity/DiscordInteraction.member.<get-member>|<get-member>(){}[0]
    final val message // dev.kord.common.entity/DiscordInteraction.message|{}message[0]
        final fun <get-message>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessage> // dev.kord.common.entity/DiscordInteraction.message.<get-message>|<get-message>(){}[0]
    final val token // dev.kord.common.entity/DiscordInteraction.token|{}token[0]
        final fun <get-token>(): kotlin/String // dev.kord.common.entity/DiscordInteraction.token.<get-token>|<get-token>(){}[0]
    final val type // dev.kord.common.entity/DiscordInteraction.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/InteractionType // dev.kord.common.entity/DiscordInteraction.type.<get-type>|<get-type>(){}[0]
    final val user // dev.kord.common.entity/DiscordInteraction.user|{}user[0]
        final fun <get-user>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordInteraction.user.<get-user>|<get-user>(){}[0]
    final val version // dev.kord.common.entity/DiscordInteraction.version|{}version[0]
        final fun <get-version>(): kotlin/Int // dev.kord.common.entity/DiscordInteraction.version.<get-version>|<get-version>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordInteraction.component1|component1(){}[0]
    final fun component10(): kotlin/String // dev.kord.common.entity/DiscordInteraction.component10|component10(){}[0]
    final fun component11(): kotlin/Int // dev.kord.common.entity/DiscordInteraction.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessage> // dev.kord.common.entity/DiscordInteraction.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> // dev.kord.common.entity/DiscordInteraction.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/Optional<dev.kord.common/Locale> // dev.kord.common.entity/DiscordInteraction.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity.optional/Optional<dev.kord.common/Locale> // dev.kord.common.entity/DiscordInteraction.component15|component15(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordInteraction.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/InteractionType // dev.kord.common.entity/DiscordInteraction.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity/InteractionCallbackData // dev.kord.common.entity/DiscordInteraction.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordInteraction.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordChannel> // dev.kord.common.entity/DiscordInteraction.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordInteraction.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordInteractionGuildMember> // dev.kord.common.entity/DiscordInteraction.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordInteraction.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/InteractionType = ..., dev.kord.common.entity/InteractionCallbackData = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordChannel> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordInteractionGuildMember> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., kotlin/String = ..., kotlin/Int = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessage> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common/Locale> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common/Locale> = ...): dev.kord.common.entity/DiscordInteraction // dev.kord.common.entity/DiscordInteraction.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.InteractionType;dev.kord.common.entity.InteractionCallbackData;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordChannel>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordInteractionGuildMember>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;kotlin.String;kotlin.Int;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordMessage>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions>;dev.kord.common.entity.optional.Optional<dev.kord.common.Locale>;dev.kord.common.entity.optional.Optional<dev.kord.common.Locale>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordInteraction.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordInteraction.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordInteraction.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordInteraction> { // dev.kord.common.entity/DiscordInteraction.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordInteraction.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordInteraction.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordInteraction.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordInteraction // dev.kord.common.entity/DiscordInteraction.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordInteraction) // dev.kord.common.entity/DiscordInteraction.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordInteraction){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordInteraction.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordInteraction.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordInteraction> // dev.kord.common.entity/DiscordInteraction.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordInteractionGuildMember { // dev.kord.common.entity/DiscordInteractionGuildMember|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlin.collections/List<dev.kord.common.entity/Snowflake>, kotlinx.datetime/Instant, dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ..., dev.kord.common.entity/Permissions, dev.kord.common.entity/GuildMemberFlags, dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ...) // dev.kord.common.entity/DiscordInteractionGuildMember.<init>|<init>(dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlin.collections.List<dev.kord.common.entity.Snowflake>;kotlinx.datetime.Instant;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>;dev.kord.common.entity.Permissions;dev.kord.common.entity.GuildMemberFlags;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>){}[0]

    final val avatar // dev.kord.common.entity/DiscordInteractionGuildMember.avatar|{}avatar[0]
        final fun <get-avatar>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordInteractionGuildMember.avatar.<get-avatar>|<get-avatar>(){}[0]
    final val communicationDisabledUntil // dev.kord.common.entity/DiscordInteractionGuildMember.communicationDisabledUntil|{}communicationDisabledUntil[0]
        final fun <get-communicationDisabledUntil>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordInteractionGuildMember.communicationDisabledUntil.<get-communicationDisabledUntil>|<get-communicationDisabledUntil>(){}[0]
    final val flags // dev.kord.common.entity/DiscordInteractionGuildMember.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity/GuildMemberFlags // dev.kord.common.entity/DiscordInteractionGuildMember.flags.<get-flags>|<get-flags>(){}[0]
    final val joinedAt // dev.kord.common.entity/DiscordInteractionGuildMember.joinedAt|{}joinedAt[0]
        final fun <get-joinedAt>(): kotlinx.datetime/Instant // dev.kord.common.entity/DiscordInteractionGuildMember.joinedAt.<get-joinedAt>|<get-joinedAt>(){}[0]
    final val nick // dev.kord.common.entity/DiscordInteractionGuildMember.nick|{}nick[0]
        final fun <get-nick>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordInteractionGuildMember.nick.<get-nick>|<get-nick>(){}[0]
    final val pending // dev.kord.common.entity/DiscordInteractionGuildMember.pending|{}pending[0]
        final fun <get-pending>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordInteractionGuildMember.pending.<get-pending>|<get-pending>(){}[0]
    final val permissions // dev.kord.common.entity/DiscordInteractionGuildMember.permissions|{}permissions[0]
        final fun <get-permissions>(): dev.kord.common.entity/Permissions // dev.kord.common.entity/DiscordInteractionGuildMember.permissions.<get-permissions>|<get-permissions>(){}[0]
    final val premiumSince // dev.kord.common.entity/DiscordInteractionGuildMember.premiumSince|{}premiumSince[0]
        final fun <get-premiumSince>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordInteractionGuildMember.premiumSince.<get-premiumSince>|<get-premiumSince>(){}[0]
    final val roles // dev.kord.common.entity/DiscordInteractionGuildMember.roles|{}roles[0]
        final fun <get-roles>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/DiscordInteractionGuildMember.roles.<get-roles>|<get-roles>(){}[0]
    final val user // dev.kord.common.entity/DiscordInteractionGuildMember.user|{}user[0]
        final fun <get-user>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordInteractionGuildMember.user.<get-user>|<get-user>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordInteractionGuildMember.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordInteractionGuildMember.component10|component10(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordInteractionGuildMember.component2|component2(){}[0]
    final fun component3(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/DiscordInteractionGuildMember.component3|component3(){}[0]
    final fun component4(): kotlinx.datetime/Instant // dev.kord.common.entity/DiscordInteractionGuildMember.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordInteractionGuildMember.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity/Permissions // dev.kord.common.entity/DiscordInteractionGuildMember.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity/GuildMemberFlags // dev.kord.common.entity/DiscordInteractionGuildMember.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordInteractionGuildMember.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordInteractionGuildMember.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlin.collections/List<dev.kord.common.entity/Snowflake> = ..., kotlinx.datetime/Instant = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ..., dev.kord.common.entity/Permissions = ..., dev.kord.common.entity/GuildMemberFlags = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ...): dev.kord.common.entity/DiscordInteractionGuildMember // dev.kord.common.entity/DiscordInteractionGuildMember.copy|copy(dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlin.collections.List<dev.kord.common.entity.Snowflake>;kotlinx.datetime.Instant;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>;dev.kord.common.entity.Permissions;dev.kord.common.entity.GuildMemberFlags;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordInteractionGuildMember.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordInteractionGuildMember.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordInteractionGuildMember.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordInteractionGuildMember> { // dev.kord.common.entity/DiscordInteractionGuildMember.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordInteractionGuildMember.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordInteractionGuildMember.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordInteractionGuildMember.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordInteractionGuildMember // dev.kord.common.entity/DiscordInteractionGuildMember.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordInteractionGuildMember) // dev.kord.common.entity/DiscordInteractionGuildMember.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordInteractionGuildMember){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordInteractionGuildMember.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordInteractionGuildMember.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordInteractionGuildMember> // dev.kord.common.entity/DiscordInteractionGuildMember.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordInvite : dev.kord.common.entity/BaseDiscordInvite { // dev.kord.common.entity/DiscordInvite|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialGuild> = ..., dev.kord.common.entity/DiscordChannel?, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialApplication> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordStageInstance> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildScheduledEvent> = ...) // dev.kord.common.entity/DiscordInvite.<init>|<init>(kotlin.String;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordPartialGuild>;dev.kord.common.entity.DiscordChannel?;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.InviteTargetType>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordPartialApplication>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordStageInstance>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordGuildScheduledEvent>){}[0]

    final val approximateMemberCount // dev.kord.common.entity/DiscordInvite.approximateMemberCount|{}approximateMemberCount[0]
        final fun <get-approximateMemberCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordInvite.approximateMemberCount.<get-approximateMemberCount>|<get-approximateMemberCount>(){}[0]
    final val approximatePresenceCount // dev.kord.common.entity/DiscordInvite.approximatePresenceCount|{}approximatePresenceCount[0]
        final fun <get-approximatePresenceCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordInvite.approximatePresenceCount.<get-approximatePresenceCount>|<get-approximatePresenceCount>(){}[0]
    final val channel // dev.kord.common.entity/DiscordInvite.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.common.entity/DiscordChannel? // dev.kord.common.entity/DiscordInvite.channel.<get-channel>|<get-channel>(){}[0]
    final val code // dev.kord.common.entity/DiscordInvite.code|{}code[0]
        final fun <get-code>(): kotlin/String // dev.kord.common.entity/DiscordInvite.code.<get-code>|<get-code>(){}[0]
    final val expiresAt // dev.kord.common.entity/DiscordInvite.expiresAt|{}expiresAt[0]
        final fun <get-expiresAt>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordInvite.expiresAt.<get-expiresAt>|<get-expiresAt>(){}[0]
    final val guild // dev.kord.common.entity/DiscordInvite.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialGuild> // dev.kord.common.entity/DiscordInvite.guild.<get-guild>|<get-guild>(){}[0]
    final val guildScheduledEvent // dev.kord.common.entity/DiscordInvite.guildScheduledEvent|{}guildScheduledEvent[0]
        final fun <get-guildScheduledEvent>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildScheduledEvent> // dev.kord.common.entity/DiscordInvite.guildScheduledEvent.<get-guildScheduledEvent>|<get-guildScheduledEvent>(){}[0]
    final val inviter // dev.kord.common.entity/DiscordInvite.inviter|{}inviter[0]
        final fun <get-inviter>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordInvite.inviter.<get-inviter>|<get-inviter>(){}[0]
    final val stageInstance // dev.kord.common.entity/DiscordInvite.stageInstance|{}stageInstance[0]
        final fun <get-stageInstance>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordStageInstance> // dev.kord.common.entity/DiscordInvite.stageInstance.<get-stageInstance>|<get-stageInstance>(){}[0]
    final val targetApplication // dev.kord.common.entity/DiscordInvite.targetApplication|{}targetApplication[0]
        final fun <get-targetApplication>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialApplication> // dev.kord.common.entity/DiscordInvite.targetApplication.<get-targetApplication>|<get-targetApplication>(){}[0]
    final val targetType // dev.kord.common.entity/DiscordInvite.targetType|{}targetType[0]
        final fun <get-targetType>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> // dev.kord.common.entity/DiscordInvite.targetType.<get-targetType>|<get-targetType>(){}[0]
    final val targetUser // dev.kord.common.entity/DiscordInvite.targetUser|{}targetUser[0]
        final fun <get-targetUser>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordInvite.targetUser.<get-targetUser>|<get-targetUser>(){}[0]

    final fun component1(): kotlin/String // dev.kord.common.entity/DiscordInvite.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordInvite.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordStageInstance> // dev.kord.common.entity/DiscordInvite.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildScheduledEvent> // dev.kord.common.entity/DiscordInvite.component12|component12(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialGuild> // dev.kord.common.entity/DiscordInvite.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/DiscordChannel? // dev.kord.common.entity/DiscordInvite.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordInvite.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> // dev.kord.common.entity/DiscordInvite.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordInvite.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialApplication> // dev.kord.common.entity/DiscordInvite.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordInvite.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordInvite.component9|component9(){}[0]
    final fun copy(kotlin/String = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialGuild> = ..., dev.kord.common.entity/DiscordChannel? = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialApplication> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordStageInstance> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildScheduledEvent> = ...): dev.kord.common.entity/DiscordInvite // dev.kord.common.entity/DiscordInvite.copy|copy(kotlin.String;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordPartialGuild>;dev.kord.common.entity.DiscordChannel?;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.InviteTargetType>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordPartialApplication>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordStageInstance>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordGuildScheduledEvent>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordInvite.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordInvite.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordInvite.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordInvite> { // dev.kord.common.entity/DiscordInvite.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordInvite.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordInvite.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordInvite.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordInvite // dev.kord.common.entity/DiscordInvite.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordInvite) // dev.kord.common.entity/DiscordInvite.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordInvite){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordInvite.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordInvite.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordInvite> // dev.kord.common.entity/DiscordInvite.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordInviteWithMetadata : dev.kord.common.entity/BaseDiscordInvite { // dev.kord.common.entity/DiscordInviteWithMetadata|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialGuild> = ..., dev.kord.common.entity/DiscordChannel?, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialApplication> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildScheduledEvent> = ..., kotlin/Int, kotlin/Int, kotlin.time/Duration, kotlin/Boolean, kotlinx.datetime/Instant) // dev.kord.common.entity/DiscordInviteWithMetadata.<init>|<init>(kotlin.String;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordPartialGuild>;dev.kord.common.entity.DiscordChannel?;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.InviteTargetType>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordPartialApplication>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordGuildScheduledEvent>;kotlin.Int;kotlin.Int;kotlin.time.Duration;kotlin.Boolean;kotlinx.datetime.Instant){}[0]

    final val approximateMemberCount // dev.kord.common.entity/DiscordInviteWithMetadata.approximateMemberCount|{}approximateMemberCount[0]
        final fun <get-approximateMemberCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordInviteWithMetadata.approximateMemberCount.<get-approximateMemberCount>|<get-approximateMemberCount>(){}[0]
    final val approximatePresenceCount // dev.kord.common.entity/DiscordInviteWithMetadata.approximatePresenceCount|{}approximatePresenceCount[0]
        final fun <get-approximatePresenceCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordInviteWithMetadata.approximatePresenceCount.<get-approximatePresenceCount>|<get-approximatePresenceCount>(){}[0]
    final val channel // dev.kord.common.entity/DiscordInviteWithMetadata.channel|{}channel[0]
        final fun <get-channel>(): dev.kord.common.entity/DiscordChannel? // dev.kord.common.entity/DiscordInviteWithMetadata.channel.<get-channel>|<get-channel>(){}[0]
    final val code // dev.kord.common.entity/DiscordInviteWithMetadata.code|{}code[0]
        final fun <get-code>(): kotlin/String // dev.kord.common.entity/DiscordInviteWithMetadata.code.<get-code>|<get-code>(){}[0]
    final val createdAt // dev.kord.common.entity/DiscordInviteWithMetadata.createdAt|{}createdAt[0]
        final fun <get-createdAt>(): kotlinx.datetime/Instant // dev.kord.common.entity/DiscordInviteWithMetadata.createdAt.<get-createdAt>|<get-createdAt>(){}[0]
    final val expiresAt // dev.kord.common.entity/DiscordInviteWithMetadata.expiresAt|{}expiresAt[0]
        final fun <get-expiresAt>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordInviteWithMetadata.expiresAt.<get-expiresAt>|<get-expiresAt>(){}[0]
    final val guild // dev.kord.common.entity/DiscordInviteWithMetadata.guild|{}guild[0]
        final fun <get-guild>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialGuild> // dev.kord.common.entity/DiscordInviteWithMetadata.guild.<get-guild>|<get-guild>(){}[0]
    final val guildScheduledEvent // dev.kord.common.entity/DiscordInviteWithMetadata.guildScheduledEvent|{}guildScheduledEvent[0]
        final fun <get-guildScheduledEvent>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildScheduledEvent> // dev.kord.common.entity/DiscordInviteWithMetadata.guildScheduledEvent.<get-guildScheduledEvent>|<get-guildScheduledEvent>(){}[0]
    final val inviter // dev.kord.common.entity/DiscordInviteWithMetadata.inviter|{}inviter[0]
        final fun <get-inviter>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordInviteWithMetadata.inviter.<get-inviter>|<get-inviter>(){}[0]
    final val maxAge // dev.kord.common.entity/DiscordInviteWithMetadata.maxAge|{}maxAge[0]
        final fun <get-maxAge>(): kotlin.time/Duration // dev.kord.common.entity/DiscordInviteWithMetadata.maxAge.<get-maxAge>|<get-maxAge>(){}[0]
    final val maxUses // dev.kord.common.entity/DiscordInviteWithMetadata.maxUses|{}maxUses[0]
        final fun <get-maxUses>(): kotlin/Int // dev.kord.common.entity/DiscordInviteWithMetadata.maxUses.<get-maxUses>|<get-maxUses>(){}[0]
    final val targetApplication // dev.kord.common.entity/DiscordInviteWithMetadata.targetApplication|{}targetApplication[0]
        final fun <get-targetApplication>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialApplication> // dev.kord.common.entity/DiscordInviteWithMetadata.targetApplication.<get-targetApplication>|<get-targetApplication>(){}[0]
    final val targetType // dev.kord.common.entity/DiscordInviteWithMetadata.targetType|{}targetType[0]
        final fun <get-targetType>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> // dev.kord.common.entity/DiscordInviteWithMetadata.targetType.<get-targetType>|<get-targetType>(){}[0]
    final val targetUser // dev.kord.common.entity/DiscordInviteWithMetadata.targetUser|{}targetUser[0]
        final fun <get-targetUser>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordInviteWithMetadata.targetUser.<get-targetUser>|<get-targetUser>(){}[0]
    final val temporary // dev.kord.common.entity/DiscordInviteWithMetadata.temporary|{}temporary[0]
        final fun <get-temporary>(): kotlin/Boolean // dev.kord.common.entity/DiscordInviteWithMetadata.temporary.<get-temporary>|<get-temporary>(){}[0]
    final val uses // dev.kord.common.entity/DiscordInviteWithMetadata.uses|{}uses[0]
        final fun <get-uses>(): kotlin/Int // dev.kord.common.entity/DiscordInviteWithMetadata.uses.<get-uses>|<get-uses>(){}[0]

    final fun component1(): kotlin/String // dev.kord.common.entity/DiscordInviteWithMetadata.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordInviteWithMetadata.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildScheduledEvent> // dev.kord.common.entity/DiscordInviteWithMetadata.component11|component11(){}[0]
    final fun component12(): kotlin/Int // dev.kord.common.entity/DiscordInviteWithMetadata.component12|component12(){}[0]
    final fun component13(): kotlin/Int // dev.kord.common.entity/DiscordInviteWithMetadata.component13|component13(){}[0]
    final fun component14(): kotlin.time/Duration // dev.kord.common.entity/DiscordInviteWithMetadata.component14|component14(){}[0]
    final fun component15(): kotlin/Boolean // dev.kord.common.entity/DiscordInviteWithMetadata.component15|component15(){}[0]
    final fun component16(): kotlinx.datetime/Instant // dev.kord.common.entity/DiscordInviteWithMetadata.component16|component16(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialGuild> // dev.kord.common.entity/DiscordInviteWithMetadata.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/DiscordChannel? // dev.kord.common.entity/DiscordInviteWithMetadata.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordInviteWithMetadata.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> // dev.kord.common.entity/DiscordInviteWithMetadata.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordInviteWithMetadata.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialApplication> // dev.kord.common.entity/DiscordInviteWithMetadata.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordInviteWithMetadata.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordInviteWithMetadata.component9|component9(){}[0]
    final fun copy(kotlin/String = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialGuild> = ..., dev.kord.common.entity/DiscordChannel? = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InviteTargetType> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialApplication> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildScheduledEvent> = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin.time/Duration = ..., kotlin/Boolean = ..., kotlinx.datetime/Instant = ...): dev.kord.common.entity/DiscordInviteWithMetadata // dev.kord.common.entity/DiscordInviteWithMetadata.copy|copy(kotlin.String;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordPartialGuild>;dev.kord.common.entity.DiscordChannel?;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.InviteTargetType>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordPartialApplication>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordGuildScheduledEvent>;kotlin.Int;kotlin.Int;kotlin.time.Duration;kotlin.Boolean;kotlinx.datetime.Instant){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordInviteWithMetadata.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordInviteWithMetadata.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordInviteWithMetadata.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordInviteWithMetadata> { // dev.kord.common.entity/DiscordInviteWithMetadata.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordInviteWithMetadata.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordInviteWithMetadata.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordInviteWithMetadata.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordInviteWithMetadata // dev.kord.common.entity/DiscordInviteWithMetadata.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordInviteWithMetadata) // dev.kord.common.entity/DiscordInviteWithMetadata.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordInviteWithMetadata){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordInviteWithMetadata.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordInviteWithMetadata.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordInviteWithMetadata> // dev.kord.common.entity/DiscordInviteWithMetadata.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordMentionedChannel { // dev.kord.common.entity/DiscordMentionedChannel|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/ChannelType, kotlin/String) // dev.kord.common.entity/DiscordMentionedChannel.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.ChannelType;kotlin.String){}[0]

    final val guildId // dev.kord.common.entity/DiscordMentionedChannel.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordMentionedChannel.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.common.entity/DiscordMentionedChannel.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordMentionedChannel.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.common.entity/DiscordMentionedChannel.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordMentionedChannel.name.<get-name>|<get-name>(){}[0]
    final val type // dev.kord.common.entity/DiscordMentionedChannel.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ChannelType // dev.kord.common.entity/DiscordMentionedChannel.type.<get-type>|<get-type>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordMentionedChannel.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordMentionedChannel.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/ChannelType // dev.kord.common.entity/DiscordMentionedChannel.component3|component3(){}[0]
    final fun component4(): kotlin/String // dev.kord.common.entity/DiscordMentionedChannel.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/ChannelType = ..., kotlin/String = ...): dev.kord.common.entity/DiscordMentionedChannel // dev.kord.common.entity/DiscordMentionedChannel.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.ChannelType;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordMentionedChannel.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordMentionedChannel.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordMentionedChannel.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordMentionedChannel> { // dev.kord.common.entity/DiscordMentionedChannel.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordMentionedChannel.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordMentionedChannel.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordMentionedChannel.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordMentionedChannel // dev.kord.common.entity/DiscordMentionedChannel.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordMentionedChannel) // dev.kord.common.entity/DiscordMentionedChannel.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordMentionedChannel){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordMentionedChannel.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordMentionedChannel> // dev.kord.common.entity/DiscordMentionedChannel.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordMessage { // dev.kord.common.entity/DiscordMessage|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity/DiscordUser, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> = ..., kotlin/String, kotlinx.datetime/Instant, kotlinx.datetime/Instant?, kotlin/Boolean, kotlin/Boolean, kotlin.collections/List<dev.kord.common.entity/DiscordOptionallyMemberUser>, kotlin.collections/List<dev.kord.common.entity/Snowflake>, dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordMentionedChannel>> = ..., kotlin.collections/List<dev.kord.common.entity/DiscordAttachment>, kotlin.collections/List<dev.kord.common.entity/DiscordEmbed>, dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Reaction>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., kotlin/Boolean, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity/MessageType, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageActivity> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageApplication> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessageReference> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordStickerItem>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessage?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/RoleSubscription> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessageInteraction> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordChannel> = ..., dev.kord.common.entity.optional/OptionalInt = ...) // dev.kord.common.entity/DiscordMessage.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.DiscordUser;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordGuildMember>;kotlin.String;kotlinx.datetime.Instant;kotlinx.datetime.Instant?;kotlin.Boolean;kotlin.Boolean;kotlin.collections.List<dev.kord.common.entity.DiscordOptionallyMemberUser>;kotlin.collections.List<dev.kord.common.entity.Snowflake>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordMentionedChannel>>;kotlin.collections.List<dev.kord.common.entity.DiscordAttachment>;kotlin.collections.List<dev.kord.common.entity.DiscordEmbed>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Reaction>>;dev.kord.common.entity.optional.Optional<kotlin.String>;kotlin.Boolean;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.MessageType;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageActivity>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageApplication>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordMessageReference>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageFlags>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordStickerItem>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordMessage?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.RoleSubscription>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordComponent>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordMessageInteraction>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordChannel>;dev.kord.common.entity.optional.OptionalInt){}[0]

    final val activity // dev.kord.common.entity/DiscordMessage.activity|{}activity[0]
        final fun <get-activity>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageActivity> // dev.kord.common.entity/DiscordMessage.activity.<get-activity>|<get-activity>(){}[0]
    final val application // dev.kord.common.entity/DiscordMessage.application|{}application[0]
        final fun <get-application>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageApplication> // dev.kord.common.entity/DiscordMessage.application.<get-application>|<get-application>(){}[0]
    final val applicationId // dev.kord.common.entity/DiscordMessage.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordMessage.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val attachments // dev.kord.common.entity/DiscordMessage.attachments|{}attachments[0]
        final fun <get-attachments>(): kotlin.collections/List<dev.kord.common.entity/DiscordAttachment> // dev.kord.common.entity/DiscordMessage.attachments.<get-attachments>|<get-attachments>(){}[0]
    final val author // dev.kord.common.entity/DiscordMessage.author|{}author[0]
        final fun <get-author>(): dev.kord.common.entity/DiscordUser // dev.kord.common.entity/DiscordMessage.author.<get-author>|<get-author>(){}[0]
    final val channelId // dev.kord.common.entity/DiscordMessage.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordMessage.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val components // dev.kord.common.entity/DiscordMessage.components|{}components[0]
        final fun <get-components>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> // dev.kord.common.entity/DiscordMessage.components.<get-components>|<get-components>(){}[0]
    final val content // dev.kord.common.entity/DiscordMessage.content|{}content[0]
        final fun <get-content>(): kotlin/String // dev.kord.common.entity/DiscordMessage.content.<get-content>|<get-content>(){}[0]
    final val editedTimestamp // dev.kord.common.entity/DiscordMessage.editedTimestamp|{}editedTimestamp[0]
        final fun <get-editedTimestamp>(): kotlinx.datetime/Instant? // dev.kord.common.entity/DiscordMessage.editedTimestamp.<get-editedTimestamp>|<get-editedTimestamp>(){}[0]
    final val embeds // dev.kord.common.entity/DiscordMessage.embeds|{}embeds[0]
        final fun <get-embeds>(): kotlin.collections/List<dev.kord.common.entity/DiscordEmbed> // dev.kord.common.entity/DiscordMessage.embeds.<get-embeds>|<get-embeds>(){}[0]
    final val flags // dev.kord.common.entity/DiscordMessage.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> // dev.kord.common.entity/DiscordMessage.flags.<get-flags>|<get-flags>(){}[0]
    final val guildId // dev.kord.common.entity/DiscordMessage.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordMessage.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.common.entity/DiscordMessage.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordMessage.id.<get-id>|<get-id>(){}[0]
    final val interaction // dev.kord.common.entity/DiscordMessage.interaction|{}interaction[0]
        final fun <get-interaction>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessageInteraction> // dev.kord.common.entity/DiscordMessage.interaction.<get-interaction>|<get-interaction>(){}[0]
    final val member // dev.kord.common.entity/DiscordMessage.member|{}member[0]
        final fun <get-member>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> // dev.kord.common.entity/DiscordMessage.member.<get-member>|<get-member>(){}[0]
    final val mentionEveryone // dev.kord.common.entity/DiscordMessage.mentionEveryone|{}mentionEveryone[0]
        final fun <get-mentionEveryone>(): kotlin/Boolean // dev.kord.common.entity/DiscordMessage.mentionEveryone.<get-mentionEveryone>|<get-mentionEveryone>(){}[0]
    final val mentionRoles // dev.kord.common.entity/DiscordMessage.mentionRoles|{}mentionRoles[0]
        final fun <get-mentionRoles>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/DiscordMessage.mentionRoles.<get-mentionRoles>|<get-mentionRoles>(){}[0]
    final val mentionedChannels // dev.kord.common.entity/DiscordMessage.mentionedChannels|{}mentionedChannels[0]
        final fun <get-mentionedChannels>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordMentionedChannel>> // dev.kord.common.entity/DiscordMessage.mentionedChannels.<get-mentionedChannels>|<get-mentionedChannels>(){}[0]
    final val mentions // dev.kord.common.entity/DiscordMessage.mentions|{}mentions[0]
        final fun <get-mentions>(): kotlin.collections/List<dev.kord.common.entity/DiscordOptionallyMemberUser> // dev.kord.common.entity/DiscordMessage.mentions.<get-mentions>|<get-mentions>(){}[0]
    final val messageReference // dev.kord.common.entity/DiscordMessage.messageReference|{}messageReference[0]
        final fun <get-messageReference>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessageReference> // dev.kord.common.entity/DiscordMessage.messageReference.<get-messageReference>|<get-messageReference>(){}[0]
    final val nonce // dev.kord.common.entity/DiscordMessage.nonce|{}nonce[0]
        final fun <get-nonce>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordMessage.nonce.<get-nonce>|<get-nonce>(){}[0]
    final val pinned // dev.kord.common.entity/DiscordMessage.pinned|{}pinned[0]
        final fun <get-pinned>(): kotlin/Boolean // dev.kord.common.entity/DiscordMessage.pinned.<get-pinned>|<get-pinned>(){}[0]
    final val position // dev.kord.common.entity/DiscordMessage.position|{}position[0]
        final fun <get-position>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordMessage.position.<get-position>|<get-position>(){}[0]
    final val reactions // dev.kord.common.entity/DiscordMessage.reactions|{}reactions[0]
        final fun <get-reactions>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Reaction>> // dev.kord.common.entity/DiscordMessage.reactions.<get-reactions>|<get-reactions>(){}[0]
    final val referencedMessage // dev.kord.common.entity/DiscordMessage.referencedMessage|{}referencedMessage[0]
        final fun <get-referencedMessage>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessage?> // dev.kord.common.entity/DiscordMessage.referencedMessage.<get-referencedMessage>|<get-referencedMessage>(){}[0]
    final val roleSubscriptionData // dev.kord.common.entity/DiscordMessage.roleSubscriptionData|{}roleSubscriptionData[0]
        final fun <get-roleSubscriptionData>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/RoleSubscription> // dev.kord.common.entity/DiscordMessage.roleSubscriptionData.<get-roleSubscriptionData>|<get-roleSubscriptionData>(){}[0]
    final val stickers // dev.kord.common.entity/DiscordMessage.stickers|{}stickers[0]
        final fun <get-stickers>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordStickerItem>> // dev.kord.common.entity/DiscordMessage.stickers.<get-stickers>|<get-stickers>(){}[0]
    final val thread // dev.kord.common.entity/DiscordMessage.thread|{}thread[0]
        final fun <get-thread>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordChannel> // dev.kord.common.entity/DiscordMessage.thread.<get-thread>|<get-thread>(){}[0]
    final val timestamp // dev.kord.common.entity/DiscordMessage.timestamp|{}timestamp[0]
        final fun <get-timestamp>(): kotlinx.datetime/Instant // dev.kord.common.entity/DiscordMessage.timestamp.<get-timestamp>|<get-timestamp>(){}[0]
    final val tts // dev.kord.common.entity/DiscordMessage.tts|{}tts[0]
        final fun <get-tts>(): kotlin/Boolean // dev.kord.common.entity/DiscordMessage.tts.<get-tts>|<get-tts>(){}[0]
    final val type // dev.kord.common.entity/DiscordMessage.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/MessageType // dev.kord.common.entity/DiscordMessage.type.<get-type>|<get-type>(){}[0]
    final val webhookId // dev.kord.common.entity/DiscordMessage.webhookId|{}webhookId[0]
        final fun <get-webhookId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordMessage.webhookId.<get-webhookId>|<get-webhookId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordMessage.component1|component1(){}[0]
    final fun component10(): kotlin/Boolean // dev.kord.common.entity/DiscordMessage.component10|component10(){}[0]
    final fun component11(): kotlin.collections/List<dev.kord.common.entity/DiscordOptionallyMemberUser> // dev.kord.common.entity/DiscordMessage.component11|component11(){}[0]
    final fun component12(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/DiscordMessage.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordMentionedChannel>> // dev.kord.common.entity/DiscordMessage.component13|component13(){}[0]
    final fun component14(): kotlin.collections/List<dev.kord.common.entity/DiscordAttachment> // dev.kord.common.entity/DiscordMessage.component14|component14(){}[0]
    final fun component15(): kotlin.collections/List<dev.kord.common.entity/DiscordEmbed> // dev.kord.common.entity/DiscordMessage.component15|component15(){}[0]
    final fun component16(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Reaction>> // dev.kord.common.entity/DiscordMessage.component16|component16(){}[0]
    final fun component17(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordMessage.component17|component17(){}[0]
    final fun component18(): kotlin/Boolean // dev.kord.common.entity/DiscordMessage.component18|component18(){}[0]
    final fun component19(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordMessage.component19|component19(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordMessage.component2|component2(){}[0]
    final fun component20(): dev.kord.common.entity/MessageType // dev.kord.common.entity/DiscordMessage.component20|component20(){}[0]
    final fun component21(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageActivity> // dev.kord.common.entity/DiscordMessage.component21|component21(){}[0]
    final fun component22(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageApplication> // dev.kord.common.entity/DiscordMessage.component22|component22(){}[0]
    final fun component23(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordMessage.component23|component23(){}[0]
    final fun component24(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessageReference> // dev.kord.common.entity/DiscordMessage.component24|component24(){}[0]
    final fun component25(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> // dev.kord.common.entity/DiscordMessage.component25|component25(){}[0]
    final fun component26(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordStickerItem>> // dev.kord.common.entity/DiscordMessage.component26|component26(){}[0]
    final fun component27(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessage?> // dev.kord.common.entity/DiscordMessage.component27|component27(){}[0]
    final fun component28(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/RoleSubscription> // dev.kord.common.entity/DiscordMessage.component28|component28(){}[0]
    final fun component29(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> // dev.kord.common.entity/DiscordMessage.component29|component29(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordMessage.component3|component3(){}[0]
    final fun component30(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessageInteraction> // dev.kord.common.entity/DiscordMessage.component30|component30(){}[0]
    final fun component31(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordChannel> // dev.kord.common.entity/DiscordMessage.component31|component31(){}[0]
    final fun component32(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordMessage.component32|component32(){}[0]
    final fun component4(): dev.kord.common.entity/DiscordUser // dev.kord.common.entity/DiscordMessage.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> // dev.kord.common.entity/DiscordMessage.component5|component5(){}[0]
    final fun component6(): kotlin/String // dev.kord.common.entity/DiscordMessage.component6|component6(){}[0]
    final fun component7(): kotlinx.datetime/Instant // dev.kord.common.entity/DiscordMessage.component7|component7(){}[0]
    final fun component8(): kotlinx.datetime/Instant? // dev.kord.common.entity/DiscordMessage.component8|component8(){}[0]
    final fun component9(): kotlin/Boolean // dev.kord.common.entity/DiscordMessage.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity/DiscordUser = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> = ..., kotlin/String = ..., kotlinx.datetime/Instant = ..., kotlinx.datetime/Instant? = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin.collections/List<dev.kord.common.entity/DiscordOptionallyMemberUser> = ..., kotlin.collections/List<dev.kord.common.entity/Snowflake> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordMentionedChannel>> = ..., kotlin.collections/List<dev.kord.common.entity/DiscordAttachment> = ..., kotlin.collections/List<dev.kord.common.entity/DiscordEmbed> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Reaction>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., kotlin/Boolean = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity/MessageType = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageActivity> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageApplication> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessageReference> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordStickerItem>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessage?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/RoleSubscription> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessageInteraction> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordChannel> = ..., dev.kord.common.entity.optional/OptionalInt = ...): dev.kord.common.entity/DiscordMessage // dev.kord.common.entity/DiscordMessage.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.DiscordUser;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordGuildMember>;kotlin.String;kotlinx.datetime.Instant;kotlinx.datetime.Instant?;kotlin.Boolean;kotlin.Boolean;kotlin.collections.List<dev.kord.common.entity.DiscordOptionallyMemberUser>;kotlin.collections.List<dev.kord.common.entity.Snowflake>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordMentionedChannel>>;kotlin.collections.List<dev.kord.common.entity.DiscordAttachment>;kotlin.collections.List<dev.kord.common.entity.DiscordEmbed>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Reaction>>;dev.kord.common.entity.optional.Optional<kotlin.String>;kotlin.Boolean;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.MessageType;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageActivity>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageApplication>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordMessageReference>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageFlags>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordStickerItem>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordMessage?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.RoleSubscription>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordComponent>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordMessageInteraction>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordChannel>;dev.kord.common.entity.optional.OptionalInt){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordMessage.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordMessage.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordMessage.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordMessage> { // dev.kord.common.entity/DiscordMessage.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordMessage.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordMessage.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordMessage.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordMessage // dev.kord.common.entity/DiscordMessage.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordMessage) // dev.kord.common.entity/DiscordMessage.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordMessage){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordMessage.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordMessage.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordMessage> // dev.kord.common.entity/DiscordMessage.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordMessageInteraction { // dev.kord.common.entity/DiscordMessageInteraction|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/InteractionType, kotlin/String, dev.kord.common.entity/DiscordUser) // dev.kord.common.entity/DiscordMessageInteraction.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.InteractionType;kotlin.String;dev.kord.common.entity.DiscordUser){}[0]

    final val id // dev.kord.common.entity/DiscordMessageInteraction.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordMessageInteraction.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.common.entity/DiscordMessageInteraction.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordMessageInteraction.name.<get-name>|<get-name>(){}[0]
    final val type // dev.kord.common.entity/DiscordMessageInteraction.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/InteractionType // dev.kord.common.entity/DiscordMessageInteraction.type.<get-type>|<get-type>(){}[0]
    final val user // dev.kord.common.entity/DiscordMessageInteraction.user|{}user[0]
        final fun <get-user>(): dev.kord.common.entity/DiscordUser // dev.kord.common.entity/DiscordMessageInteraction.user.<get-user>|<get-user>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordMessageInteraction.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/InteractionType // dev.kord.common.entity/DiscordMessageInteraction.component2|component2(){}[0]
    final fun component3(): kotlin/String // dev.kord.common.entity/DiscordMessageInteraction.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity/DiscordUser // dev.kord.common.entity/DiscordMessageInteraction.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/InteractionType = ..., kotlin/String = ..., dev.kord.common.entity/DiscordUser = ...): dev.kord.common.entity/DiscordMessageInteraction // dev.kord.common.entity/DiscordMessageInteraction.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.InteractionType;kotlin.String;dev.kord.common.entity.DiscordUser){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordMessageInteraction.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordMessageInteraction.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordMessageInteraction.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordMessageInteraction> { // dev.kord.common.entity/DiscordMessageInteraction.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordMessageInteraction.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordMessageInteraction.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordMessageInteraction.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordMessageInteraction // dev.kord.common.entity/DiscordMessageInteraction.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordMessageInteraction) // dev.kord.common.entity/DiscordMessageInteraction.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordMessageInteraction){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordMessageInteraction.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordMessageInteraction> // dev.kord.common.entity/DiscordMessageInteraction.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordMessageReference { // dev.kord.common.entity/DiscordMessageReference|null[0]
    constructor <init>(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.common.entity/DiscordMessageReference.<init>|<init>(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalBoolean){}[0]

    final val channelId // dev.kord.common.entity/DiscordMessageReference.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordMessageReference.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val failIfNotExists // dev.kord.common.entity/DiscordMessageReference.failIfNotExists|{}failIfNotExists[0]
        final fun <get-failIfNotExists>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordMessageReference.failIfNotExists.<get-failIfNotExists>|<get-failIfNotExists>(){}[0]
    final val guildId // dev.kord.common.entity/DiscordMessageReference.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordMessageReference.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.common.entity/DiscordMessageReference.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordMessageReference.id.<get-id>|<get-id>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordMessageReference.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordMessageReference.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordMessageReference.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordMessageReference.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.common.entity/DiscordMessageReference // dev.kord.common.entity/DiscordMessageReference.copy|copy(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalBoolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordMessageReference.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordMessageReference.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordMessageReference.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordMessageReference> { // dev.kord.common.entity/DiscordMessageReference.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordMessageReference.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordMessageReference.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordMessageReference.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordMessageReference // dev.kord.common.entity/DiscordMessageReference.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordMessageReference) // dev.kord.common.entity/DiscordMessageReference.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordMessageReference){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordMessageReference.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordMessageReference> // dev.kord.common.entity/DiscordMessageReference.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordMessageSticker { // dev.kord.common.entity/DiscordMessageSticker|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/String, kotlin/String?, dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity/MessageStickerType, dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.common.entity.optional/OptionalInt = ...) // dev.kord.common.entity/DiscordMessageSticker.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.String;kotlin.String?;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.MessageStickerType;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.common.entity.optional.OptionalInt){}[0]

    final val available // dev.kord.common.entity/DiscordMessageSticker.available|{}available[0]
        final fun <get-available>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordMessageSticker.available.<get-available>|<get-available>(){}[0]
    final val description // dev.kord.common.entity/DiscordMessageSticker.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.common.entity/DiscordMessageSticker.description.<get-description>|<get-description>(){}[0]
    final val formatType // dev.kord.common.entity/DiscordMessageSticker.formatType|{}formatType[0]
        final fun <get-formatType>(): dev.kord.common.entity/MessageStickerType // dev.kord.common.entity/DiscordMessageSticker.formatType.<get-formatType>|<get-formatType>(){}[0]
    final val guildId // dev.kord.common.entity/DiscordMessageSticker.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordMessageSticker.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.common.entity/DiscordMessageSticker.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordMessageSticker.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.common.entity/DiscordMessageSticker.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordMessageSticker.name.<get-name>|<get-name>(){}[0]
    final val packId // dev.kord.common.entity/DiscordMessageSticker.packId|{}packId[0]
        final fun <get-packId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordMessageSticker.packId.<get-packId>|<get-packId>(){}[0]
    final val sortValue // dev.kord.common.entity/DiscordMessageSticker.sortValue|{}sortValue[0]
        final fun <get-sortValue>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordMessageSticker.sortValue.<get-sortValue>|<get-sortValue>(){}[0]
    final val tags // dev.kord.common.entity/DiscordMessageSticker.tags|{}tags[0]
        final fun <get-tags>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordMessageSticker.tags.<get-tags>|<get-tags>(){}[0]
    final val user // dev.kord.common.entity/DiscordMessageSticker.user|{}user[0]
        final fun <get-user>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordMessageSticker.user.<get-user>|<get-user>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordMessageSticker.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordMessageSticker.component10|component10(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordMessageSticker.component2|component2(){}[0]
    final fun component3(): kotlin/String // dev.kord.common.entity/DiscordMessageSticker.component3|component3(){}[0]
    final fun component4(): kotlin/String? // dev.kord.common.entity/DiscordMessageSticker.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordMessageSticker.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity/MessageStickerType // dev.kord.common.entity/DiscordMessageSticker.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordMessageSticker.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordMessageSticker.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordMessageSticker.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/String = ..., kotlin/String? = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity/MessageStickerType = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.common.entity.optional/OptionalInt = ...): dev.kord.common.entity/DiscordMessageSticker // dev.kord.common.entity/DiscordMessageSticker.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.String;kotlin.String?;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.MessageStickerType;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.common.entity.optional.OptionalInt){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordMessageSticker.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordMessageSticker.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordMessageSticker.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordMessageSticker> { // dev.kord.common.entity/DiscordMessageSticker.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordMessageSticker.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordMessageSticker.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordMessageSticker.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordMessageSticker // dev.kord.common.entity/DiscordMessageSticker.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordMessageSticker) // dev.kord.common.entity/DiscordMessageSticker.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordMessageSticker){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordMessageSticker.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordMessageSticker.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordMessageSticker> // dev.kord.common.entity/DiscordMessageSticker.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordModal { // dev.kord.common.entity/DiscordModal|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin.collections/List<dev.kord.common.entity/DiscordComponent>) // dev.kord.common.entity/DiscordModal.<init>|<init>(kotlin.String;kotlin.String;kotlin.collections.List<dev.kord.common.entity.DiscordComponent>){}[0]

    final val components // dev.kord.common.entity/DiscordModal.components|{}components[0]
        final fun <get-components>(): kotlin.collections/List<dev.kord.common.entity/DiscordComponent> // dev.kord.common.entity/DiscordModal.components.<get-components>|<get-components>(){}[0]
    final val customId // dev.kord.common.entity/DiscordModal.customId|{}customId[0]
        final fun <get-customId>(): kotlin/String // dev.kord.common.entity/DiscordModal.customId.<get-customId>|<get-customId>(){}[0]
    final val title // dev.kord.common.entity/DiscordModal.title|{}title[0]
        final fun <get-title>(): kotlin/String // dev.kord.common.entity/DiscordModal.title.<get-title>|<get-title>(){}[0]

    final fun component1(): kotlin/String // dev.kord.common.entity/DiscordModal.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.common.entity/DiscordModal.component2|component2(){}[0]
    final fun component3(): kotlin.collections/List<dev.kord.common.entity/DiscordComponent> // dev.kord.common.entity/DiscordModal.component3|component3(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin.collections/List<dev.kord.common.entity/DiscordComponent> = ...): dev.kord.common.entity/DiscordModal // dev.kord.common.entity/DiscordModal.copy|copy(kotlin.String;kotlin.String;kotlin.collections.List<dev.kord.common.entity.DiscordComponent>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordModal.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordModal.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordModal.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordModal> { // dev.kord.common.entity/DiscordModal.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordModal.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordModal.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordModal.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordModal // dev.kord.common.entity/DiscordModal.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordModal) // dev.kord.common.entity/DiscordModal.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordModal){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordModal.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordModal.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordModal> // dev.kord.common.entity/DiscordModal.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordOnboardingPrompt { // dev.kord.common.entity/DiscordOnboardingPrompt|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/OnboardingPromptType, kotlin.collections/List<dev.kord.common.entity/DiscordOnboardingPromptOption>, kotlin/String, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean) // dev.kord.common.entity/DiscordOnboardingPrompt.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.OnboardingPromptType;kotlin.collections.List<dev.kord.common.entity.DiscordOnboardingPromptOption>;kotlin.String;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean){}[0]

    final val id // dev.kord.common.entity/DiscordOnboardingPrompt.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordOnboardingPrompt.id.<get-id>|<get-id>(){}[0]
    final val inOnboarding // dev.kord.common.entity/DiscordOnboardingPrompt.inOnboarding|{}inOnboarding[0]
        final fun <get-inOnboarding>(): kotlin/Boolean // dev.kord.common.entity/DiscordOnboardingPrompt.inOnboarding.<get-inOnboarding>|<get-inOnboarding>(){}[0]
    final val options // dev.kord.common.entity/DiscordOnboardingPrompt.options|{}options[0]
        final fun <get-options>(): kotlin.collections/List<dev.kord.common.entity/DiscordOnboardingPromptOption> // dev.kord.common.entity/DiscordOnboardingPrompt.options.<get-options>|<get-options>(){}[0]
    final val required // dev.kord.common.entity/DiscordOnboardingPrompt.required|{}required[0]
        final fun <get-required>(): kotlin/Boolean // dev.kord.common.entity/DiscordOnboardingPrompt.required.<get-required>|<get-required>(){}[0]
    final val singleSelect // dev.kord.common.entity/DiscordOnboardingPrompt.singleSelect|{}singleSelect[0]
        final fun <get-singleSelect>(): kotlin/Boolean // dev.kord.common.entity/DiscordOnboardingPrompt.singleSelect.<get-singleSelect>|<get-singleSelect>(){}[0]
    final val title // dev.kord.common.entity/DiscordOnboardingPrompt.title|{}title[0]
        final fun <get-title>(): kotlin/String // dev.kord.common.entity/DiscordOnboardingPrompt.title.<get-title>|<get-title>(){}[0]
    final val type // dev.kord.common.entity/DiscordOnboardingPrompt.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/OnboardingPromptType // dev.kord.common.entity/DiscordOnboardingPrompt.type.<get-type>|<get-type>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordOnboardingPrompt.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/OnboardingPromptType // dev.kord.common.entity/DiscordOnboardingPrompt.component2|component2(){}[0]
    final fun component3(): kotlin.collections/List<dev.kord.common.entity/DiscordOnboardingPromptOption> // dev.kord.common.entity/DiscordOnboardingPrompt.component3|component3(){}[0]
    final fun component4(): kotlin/String // dev.kord.common.entity/DiscordOnboardingPrompt.component4|component4(){}[0]
    final fun component5(): kotlin/Boolean // dev.kord.common.entity/DiscordOnboardingPrompt.component5|component5(){}[0]
    final fun component6(): kotlin/Boolean // dev.kord.common.entity/DiscordOnboardingPrompt.component6|component6(){}[0]
    final fun component7(): kotlin/Boolean // dev.kord.common.entity/DiscordOnboardingPrompt.component7|component7(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/OnboardingPromptType = ..., kotlin.collections/List<dev.kord.common.entity/DiscordOnboardingPromptOption> = ..., kotlin/String = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ...): dev.kord.common.entity/DiscordOnboardingPrompt // dev.kord.common.entity/DiscordOnboardingPrompt.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.OnboardingPromptType;kotlin.collections.List<dev.kord.common.entity.DiscordOnboardingPromptOption>;kotlin.String;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordOnboardingPrompt.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordOnboardingPrompt.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordOnboardingPrompt.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordOnboardingPrompt> { // dev.kord.common.entity/DiscordOnboardingPrompt.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordOnboardingPrompt.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordOnboardingPrompt.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordOnboardingPrompt.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordOnboardingPrompt // dev.kord.common.entity/DiscordOnboardingPrompt.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordOnboardingPrompt) // dev.kord.common.entity/DiscordOnboardingPrompt.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordOnboardingPrompt){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordOnboardingPrompt.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordOnboardingPrompt.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordOnboardingPrompt> // dev.kord.common.entity/DiscordOnboardingPrompt.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordOnboardingPromptOption { // dev.kord.common.entity/DiscordOnboardingPromptOption|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin.collections/List<dev.kord.common.entity/Snowflake>, kotlin.collections/List<dev.kord.common.entity/Snowflake>, dev.kord.common.entity/DiscordEmoji, kotlin/String, kotlin/String?) // dev.kord.common.entity/DiscordOnboardingPromptOption.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.collections.List<dev.kord.common.entity.Snowflake>;kotlin.collections.List<dev.kord.common.entity.Snowflake>;dev.kord.common.entity.DiscordEmoji;kotlin.String;kotlin.String?){}[0]

    final val channelIds // dev.kord.common.entity/DiscordOnboardingPromptOption.channelIds|{}channelIds[0]
        final fun <get-channelIds>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/DiscordOnboardingPromptOption.channelIds.<get-channelIds>|<get-channelIds>(){}[0]
    final val description // dev.kord.common.entity/DiscordOnboardingPromptOption.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.common.entity/DiscordOnboardingPromptOption.description.<get-description>|<get-description>(){}[0]
    final val emoji // dev.kord.common.entity/DiscordOnboardingPromptOption.emoji|{}emoji[0]
        final fun <get-emoji>(): dev.kord.common.entity/DiscordEmoji // dev.kord.common.entity/DiscordOnboardingPromptOption.emoji.<get-emoji>|<get-emoji>(){}[0]
    final val id // dev.kord.common.entity/DiscordOnboardingPromptOption.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordOnboardingPromptOption.id.<get-id>|<get-id>(){}[0]
    final val roleIds // dev.kord.common.entity/DiscordOnboardingPromptOption.roleIds|{}roleIds[0]
        final fun <get-roleIds>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/DiscordOnboardingPromptOption.roleIds.<get-roleIds>|<get-roleIds>(){}[0]
    final val title // dev.kord.common.entity/DiscordOnboardingPromptOption.title|{}title[0]
        final fun <get-title>(): kotlin/String // dev.kord.common.entity/DiscordOnboardingPromptOption.title.<get-title>|<get-title>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordOnboardingPromptOption.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/DiscordOnboardingPromptOption.component2|component2(){}[0]
    final fun component3(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/DiscordOnboardingPromptOption.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity/DiscordEmoji // dev.kord.common.entity/DiscordOnboardingPromptOption.component4|component4(){}[0]
    final fun component5(): kotlin/String // dev.kord.common.entity/DiscordOnboardingPromptOption.component5|component5(){}[0]
    final fun component6(): kotlin/String? // dev.kord.common.entity/DiscordOnboardingPromptOption.component6|component6(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin.collections/List<dev.kord.common.entity/Snowflake> = ..., kotlin.collections/List<dev.kord.common.entity/Snowflake> = ..., dev.kord.common.entity/DiscordEmoji = ..., kotlin/String = ..., kotlin/String? = ...): dev.kord.common.entity/DiscordOnboardingPromptOption // dev.kord.common.entity/DiscordOnboardingPromptOption.copy|copy(dev.kord.common.entity.Snowflake;kotlin.collections.List<dev.kord.common.entity.Snowflake>;kotlin.collections.List<dev.kord.common.entity.Snowflake>;dev.kord.common.entity.DiscordEmoji;kotlin.String;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordOnboardingPromptOption.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordOnboardingPromptOption.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordOnboardingPromptOption.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordOnboardingPromptOption> { // dev.kord.common.entity/DiscordOnboardingPromptOption.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordOnboardingPromptOption.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordOnboardingPromptOption.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordOnboardingPromptOption.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordOnboardingPromptOption // dev.kord.common.entity/DiscordOnboardingPromptOption.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordOnboardingPromptOption) // dev.kord.common.entity/DiscordOnboardingPromptOption.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordOnboardingPromptOption){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordOnboardingPromptOption.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordOnboardingPromptOption.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordOnboardingPromptOption> // dev.kord.common.entity/DiscordOnboardingPromptOption.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordOptionallyMemberUser { // dev.kord.common.entity/DiscordOptionallyMemberUser|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlin/String?, dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserFlags> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserPremium> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserFlags> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> = ...) // dev.kord.common.entity/DiscordOptionallyMemberUser.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlin.String?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.UserFlags>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.UserPremium>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.UserFlags>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordGuildMember>){}[0]

    final val avatar // dev.kord.common.entity/DiscordOptionallyMemberUser.avatar|{}avatar[0]
        final fun <get-avatar>(): kotlin/String? // dev.kord.common.entity/DiscordOptionallyMemberUser.avatar.<get-avatar>|<get-avatar>(){}[0]
    final val bot // dev.kord.common.entity/DiscordOptionallyMemberUser.bot|{}bot[0]
        final fun <get-bot>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordOptionallyMemberUser.bot.<get-bot>|<get-bot>(){}[0]
    final val discriminator // dev.kord.common.entity/DiscordOptionallyMemberUser.discriminator|{}discriminator[0]
        final fun <get-discriminator>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordOptionallyMemberUser.discriminator.<get-discriminator>|<get-discriminator>(){}[0]
    final val email // dev.kord.common.entity/DiscordOptionallyMemberUser.email|{}email[0]
        final fun <get-email>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordOptionallyMemberUser.email.<get-email>|<get-email>(){}[0]
    final val flags // dev.kord.common.entity/DiscordOptionallyMemberUser.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserFlags> // dev.kord.common.entity/DiscordOptionallyMemberUser.flags.<get-flags>|<get-flags>(){}[0]
    final val globalName // dev.kord.common.entity/DiscordOptionallyMemberUser.globalName|{}globalName[0]
        final fun <get-globalName>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordOptionallyMemberUser.globalName.<get-globalName>|<get-globalName>(){}[0]
    final val id // dev.kord.common.entity/DiscordOptionallyMemberUser.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordOptionallyMemberUser.id.<get-id>|<get-id>(){}[0]
    final val locale // dev.kord.common.entity/DiscordOptionallyMemberUser.locale|{}locale[0]
        final fun <get-locale>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordOptionallyMemberUser.locale.<get-locale>|<get-locale>(){}[0]
    final val member // dev.kord.common.entity/DiscordOptionallyMemberUser.member|{}member[0]
        final fun <get-member>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> // dev.kord.common.entity/DiscordOptionallyMemberUser.member.<get-member>|<get-member>(){}[0]
    final val mfaEnabled // dev.kord.common.entity/DiscordOptionallyMemberUser.mfaEnabled|{}mfaEnabled[0]
        final fun <get-mfaEnabled>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordOptionallyMemberUser.mfaEnabled.<get-mfaEnabled>|<get-mfaEnabled>(){}[0]
    final val premiumType // dev.kord.common.entity/DiscordOptionallyMemberUser.premiumType|{}premiumType[0]
        final fun <get-premiumType>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserPremium> // dev.kord.common.entity/DiscordOptionallyMemberUser.premiumType.<get-premiumType>|<get-premiumType>(){}[0]
    final val publicFlags // dev.kord.common.entity/DiscordOptionallyMemberUser.publicFlags|{}publicFlags[0]
        final fun <get-publicFlags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserFlags> // dev.kord.common.entity/DiscordOptionallyMemberUser.publicFlags.<get-publicFlags>|<get-publicFlags>(){}[0]
    final val system // dev.kord.common.entity/DiscordOptionallyMemberUser.system|{}system[0]
        final fun <get-system>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordOptionallyMemberUser.system.<get-system>|<get-system>(){}[0]
    final val username // dev.kord.common.entity/DiscordOptionallyMemberUser.username|{}username[0]
        final fun <get-username>(): kotlin/String // dev.kord.common.entity/DiscordOptionallyMemberUser.username.<get-username>|<get-username>(){}[0]
    final val verified // dev.kord.common.entity/DiscordOptionallyMemberUser.verified|{}verified[0]
        final fun <get-verified>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordOptionallyMemberUser.verified.<get-verified>|<get-verified>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordOptionallyMemberUser.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordOptionallyMemberUser.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordOptionallyMemberUser.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserFlags> // dev.kord.common.entity/DiscordOptionallyMemberUser.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserPremium> // dev.kord.common.entity/DiscordOptionallyMemberUser.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserFlags> // dev.kord.common.entity/DiscordOptionallyMemberUser.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> // dev.kord.common.entity/DiscordOptionallyMemberUser.component15|component15(){}[0]
    final fun component2(): kotlin/String // dev.kord.common.entity/DiscordOptionallyMemberUser.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordOptionallyMemberUser.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordOptionallyMemberUser.component4|component4(){}[0]
    final fun component5(): kotlin/String? // dev.kord.common.entity/DiscordOptionallyMemberUser.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordOptionallyMemberUser.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordOptionallyMemberUser.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordOptionallyMemberUser.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordOptionallyMemberUser.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlin/String? = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserFlags> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserPremium> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserFlags> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> = ...): dev.kord.common.entity/DiscordOptionallyMemberUser // dev.kord.common.entity/DiscordOptionallyMemberUser.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlin.String?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.UserFlags>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.UserPremium>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.UserFlags>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordGuildMember>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordOptionallyMemberUser.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordOptionallyMemberUser.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordOptionallyMemberUser.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordOptionallyMemberUser> { // dev.kord.common.entity/DiscordOptionallyMemberUser.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordOptionallyMemberUser.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordOptionallyMemberUser.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordOptionallyMemberUser.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordOptionallyMemberUser // dev.kord.common.entity/DiscordOptionallyMemberUser.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordOptionallyMemberUser) // dev.kord.common.entity/DiscordOptionallyMemberUser.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordOptionallyMemberUser){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordOptionallyMemberUser.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordOptionallyMemberUser.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordOptionallyMemberUser> // dev.kord.common.entity/DiscordOptionallyMemberUser.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordPartialApplication : dev.kord.common.entity/BaseDiscordApplication { // dev.kord.common.entity/DiscordPartialApplication|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/String?, kotlin/String, dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., kotlin/String, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationFlags> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InstallParams> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...) // dev.kord.common.entity/DiscordPartialApplication.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String?;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;kotlin.String;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ApplicationFlags>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.InstallParams>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]

    final val coverImage // dev.kord.common.entity/DiscordPartialApplication.coverImage|{}coverImage[0]
        final fun <get-coverImage>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordPartialApplication.coverImage.<get-coverImage>|<get-coverImage>(){}[0]
    final val customInstallUrl // dev.kord.common.entity/DiscordPartialApplication.customInstallUrl|{}customInstallUrl[0]
        final fun <get-customInstallUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordPartialApplication.customInstallUrl.<get-customInstallUrl>|<get-customInstallUrl>(){}[0]
    final val description // dev.kord.common.entity/DiscordPartialApplication.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.common.entity/DiscordPartialApplication.description.<get-description>|<get-description>(){}[0]
    final val flags // dev.kord.common.entity/DiscordPartialApplication.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationFlags> // dev.kord.common.entity/DiscordPartialApplication.flags.<get-flags>|<get-flags>(){}[0]
    final val guildId // dev.kord.common.entity/DiscordPartialApplication.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordPartialApplication.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val icon // dev.kord.common.entity/DiscordPartialApplication.icon|{}icon[0]
        final fun <get-icon>(): kotlin/String? // dev.kord.common.entity/DiscordPartialApplication.icon.<get-icon>|<get-icon>(){}[0]
    final val id // dev.kord.common.entity/DiscordPartialApplication.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordPartialApplication.id.<get-id>|<get-id>(){}[0]
    final val installParams // dev.kord.common.entity/DiscordPartialApplication.installParams|{}installParams[0]
        final fun <get-installParams>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InstallParams> // dev.kord.common.entity/DiscordPartialApplication.installParams.<get-installParams>|<get-installParams>(){}[0]
    final val name // dev.kord.common.entity/DiscordPartialApplication.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordPartialApplication.name.<get-name>|<get-name>(){}[0]
    final val owner // dev.kord.common.entity/DiscordPartialApplication.owner|{}owner[0]
        final fun <get-owner>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordPartialApplication.owner.<get-owner>|<get-owner>(){}[0]
    final val primarySkuId // dev.kord.common.entity/DiscordPartialApplication.primarySkuId|{}primarySkuId[0]
        final fun <get-primarySkuId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordPartialApplication.primarySkuId.<get-primarySkuId>|<get-primarySkuId>(){}[0]
    final val privacyPolicyUrl // dev.kord.common.entity/DiscordPartialApplication.privacyPolicyUrl|{}privacyPolicyUrl[0]
        final fun <get-privacyPolicyUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordPartialApplication.privacyPolicyUrl.<get-privacyPolicyUrl>|<get-privacyPolicyUrl>(){}[0]
    final val roleConnectionsVerificationUrl // dev.kord.common.entity/DiscordPartialApplication.roleConnectionsVerificationUrl|{}roleConnectionsVerificationUrl[0]
        final fun <get-roleConnectionsVerificationUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordPartialApplication.roleConnectionsVerificationUrl.<get-roleConnectionsVerificationUrl>|<get-roleConnectionsVerificationUrl>(){}[0]
    final val rpcOrigins // dev.kord.common.entity/DiscordPartialApplication.rpcOrigins|{}rpcOrigins[0]
        final fun <get-rpcOrigins>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.common.entity/DiscordPartialApplication.rpcOrigins.<get-rpcOrigins>|<get-rpcOrigins>(){}[0]
    final val slug // dev.kord.common.entity/DiscordPartialApplication.slug|{}slug[0]
        final fun <get-slug>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordPartialApplication.slug.<get-slug>|<get-slug>(){}[0]
    final val tags // dev.kord.common.entity/DiscordPartialApplication.tags|{}tags[0]
        final fun <get-tags>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.common.entity/DiscordPartialApplication.tags.<get-tags>|<get-tags>(){}[0]
    final val termsOfServiceUrl // dev.kord.common.entity/DiscordPartialApplication.termsOfServiceUrl|{}termsOfServiceUrl[0]
        final fun <get-termsOfServiceUrl>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordPartialApplication.termsOfServiceUrl.<get-termsOfServiceUrl>|<get-termsOfServiceUrl>(){}[0]
    final val verifyKey // dev.kord.common.entity/DiscordPartialApplication.verifyKey|{}verifyKey[0]
        final fun <get-verifyKey>(): kotlin/String // dev.kord.common.entity/DiscordPartialApplication.verifyKey.<get-verifyKey>|<get-verifyKey>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordPartialApplication.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordPartialApplication.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordPartialApplication.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordPartialApplication.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordPartialApplication.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationFlags> // dev.kord.common.entity/DiscordPartialApplication.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.common.entity/DiscordPartialApplication.component15|component15(){}[0]
    final fun component16(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InstallParams> // dev.kord.common.entity/DiscordPartialApplication.component16|component16(){}[0]
    final fun component17(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordPartialApplication.component17|component17(){}[0]
    final fun component18(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordPartialApplication.component18|component18(){}[0]
    final fun component2(): kotlin/String // dev.kord.common.entity/DiscordPartialApplication.component2|component2(){}[0]
    final fun component3(): kotlin/String? // dev.kord.common.entity/DiscordPartialApplication.component3|component3(){}[0]
    final fun component4(): kotlin/String // dev.kord.common.entity/DiscordPartialApplication.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.common.entity/DiscordPartialApplication.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordPartialApplication.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordPartialApplication.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordPartialApplication.component8|component8(){}[0]
    final fun component9(): kotlin/String // dev.kord.common.entity/DiscordPartialApplication.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., kotlin/String? = ..., kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., kotlin/String = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationFlags> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/InstallParams> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...): dev.kord.common.entity/DiscordPartialApplication // dev.kord.common.entity/DiscordPartialApplication.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String?;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;kotlin.String;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ApplicationFlags>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.InstallParams>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordPartialApplication.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordPartialApplication.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordPartialApplication.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordPartialApplication> { // dev.kord.common.entity/DiscordPartialApplication.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordPartialApplication.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordPartialApplication.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordPartialApplication.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordPartialApplication // dev.kord.common.entity/DiscordPartialApplication.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordPartialApplication) // dev.kord.common.entity/DiscordPartialApplication.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordPartialApplication){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordPartialApplication.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordPartialApplication.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordPartialApplication> // dev.kord.common.entity/DiscordPartialApplication.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordPartialEmoji { // dev.kord.common.entity/DiscordPartialEmoji|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake? = ..., kotlin/String? = ..., dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.common.entity/DiscordPartialEmoji.<init>|<init>(dev.kord.common.entity.Snowflake?;kotlin.String?;dev.kord.common.entity.optional.OptionalBoolean){}[0]

    final val animated // dev.kord.common.entity/DiscordPartialEmoji.animated|{}animated[0]
        final fun <get-animated>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordPartialEmoji.animated.<get-animated>|<get-animated>(){}[0]
    final val id // dev.kord.common.entity/DiscordPartialEmoji.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordPartialEmoji.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.common.entity/DiscordPartialEmoji.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.common.entity/DiscordPartialEmoji.name.<get-name>|<get-name>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordPartialEmoji.component1|component1(){}[0]
    final fun component2(): kotlin/String? // dev.kord.common.entity/DiscordPartialEmoji.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordPartialEmoji.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake? = ..., kotlin/String? = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.common.entity/DiscordPartialEmoji // dev.kord.common.entity/DiscordPartialEmoji.copy|copy(dev.kord.common.entity.Snowflake?;kotlin.String?;dev.kord.common.entity.optional.OptionalBoolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordPartialEmoji.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordPartialEmoji.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordPartialEmoji.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordPartialEmoji> { // dev.kord.common.entity/DiscordPartialEmoji.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordPartialEmoji.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordPartialEmoji.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordPartialEmoji.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordPartialEmoji // dev.kord.common.entity/DiscordPartialEmoji.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordPartialEmoji) // dev.kord.common.entity/DiscordPartialEmoji.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordPartialEmoji){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordPartialEmoji.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordPartialEmoji> // dev.kord.common.entity/DiscordPartialEmoji.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordPartialGuild { // dev.kord.common.entity/DiscordPartialGuild|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/String?, dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> = ..., kotlin.collections/List<dev.kord.common.entity/GuildFeature>, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordWelcomeScreen> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/NsfwLevel> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/VerificationLevel> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordStageInstance>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordMessageSticker>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordGuildScheduledEvent>> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.common.entity/DiscordPartialGuild.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions>;kotlin.collections.List<dev.kord.common.entity.GuildFeature>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordWelcomeScreen>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.NsfwLevel>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.VerificationLevel>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordStageInstance>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordMessageSticker>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordGuildScheduledEvent>>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalBoolean){}[0]

    final val approximateMemberCount // dev.kord.common.entity/DiscordPartialGuild.approximateMemberCount|{}approximateMemberCount[0]
        final fun <get-approximateMemberCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordPartialGuild.approximateMemberCount.<get-approximateMemberCount>|<get-approximateMemberCount>(){}[0]
    final val approximatePresenceCount // dev.kord.common.entity/DiscordPartialGuild.approximatePresenceCount|{}approximatePresenceCount[0]
        final fun <get-approximatePresenceCount>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordPartialGuild.approximatePresenceCount.<get-approximatePresenceCount>|<get-approximatePresenceCount>(){}[0]
    final val banner // dev.kord.common.entity/DiscordPartialGuild.banner|{}banner[0]
        final fun <get-banner>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordPartialGuild.banner.<get-banner>|<get-banner>(){}[0]
    final val description // dev.kord.common.entity/DiscordPartialGuild.description|{}description[0]
        final fun <get-description>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordPartialGuild.description.<get-description>|<get-description>(){}[0]
    final val features // dev.kord.common.entity/DiscordPartialGuild.features|{}features[0]
        final fun <get-features>(): kotlin.collections/List<dev.kord.common.entity/GuildFeature> // dev.kord.common.entity/DiscordPartialGuild.features.<get-features>|<get-features>(){}[0]
    final val guildScheduledEvents // dev.kord.common.entity/DiscordPartialGuild.guildScheduledEvents|{}guildScheduledEvents[0]
        final fun <get-guildScheduledEvents>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordGuildScheduledEvent>> // dev.kord.common.entity/DiscordPartialGuild.guildScheduledEvents.<get-guildScheduledEvents>|<get-guildScheduledEvents>(){}[0]
    final val icon // dev.kord.common.entity/DiscordPartialGuild.icon|{}icon[0]
        final fun <get-icon>(): kotlin/String? // dev.kord.common.entity/DiscordPartialGuild.icon.<get-icon>|<get-icon>(){}[0]
    final val id // dev.kord.common.entity/DiscordPartialGuild.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordPartialGuild.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.common.entity/DiscordPartialGuild.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordPartialGuild.name.<get-name>|<get-name>(){}[0]
    final val nsfwLevel // dev.kord.common.entity/DiscordPartialGuild.nsfwLevel|{}nsfwLevel[0]
        final fun <get-nsfwLevel>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/NsfwLevel> // dev.kord.common.entity/DiscordPartialGuild.nsfwLevel.<get-nsfwLevel>|<get-nsfwLevel>(){}[0]
    final val owner // dev.kord.common.entity/DiscordPartialGuild.owner|{}owner[0]
        final fun <get-owner>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordPartialGuild.owner.<get-owner>|<get-owner>(){}[0]
    final val permissions // dev.kord.common.entity/DiscordPartialGuild.permissions|{}permissions[0]
        final fun <get-permissions>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> // dev.kord.common.entity/DiscordPartialGuild.permissions.<get-permissions>|<get-permissions>(){}[0]
    final val premiumProgressBarEnabled // dev.kord.common.entity/DiscordPartialGuild.premiumProgressBarEnabled|{}premiumProgressBarEnabled[0]
        final fun <get-premiumProgressBarEnabled>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordPartialGuild.premiumProgressBarEnabled.<get-premiumProgressBarEnabled>|<get-premiumProgressBarEnabled>(){}[0]
    final val splash // dev.kord.common.entity/DiscordPartialGuild.splash|{}splash[0]
        final fun <get-splash>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordPartialGuild.splash.<get-splash>|<get-splash>(){}[0]
    final val stageInstances // dev.kord.common.entity/DiscordPartialGuild.stageInstances|{}stageInstances[0]
        final fun <get-stageInstances>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordStageInstance>> // dev.kord.common.entity/DiscordPartialGuild.stageInstances.<get-stageInstances>|<get-stageInstances>(){}[0]
    final val stickers // dev.kord.common.entity/DiscordPartialGuild.stickers|{}stickers[0]
        final fun <get-stickers>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordMessageSticker>> // dev.kord.common.entity/DiscordPartialGuild.stickers.<get-stickers>|<get-stickers>(){}[0]
    final val vanityUrlCode // dev.kord.common.entity/DiscordPartialGuild.vanityUrlCode|{}vanityUrlCode[0]
        final fun <get-vanityUrlCode>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordPartialGuild.vanityUrlCode.<get-vanityUrlCode>|<get-vanityUrlCode>(){}[0]
    final val verificationLevel // dev.kord.common.entity/DiscordPartialGuild.verificationLevel|{}verificationLevel[0]
        final fun <get-verificationLevel>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/VerificationLevel> // dev.kord.common.entity/DiscordPartialGuild.verificationLevel.<get-verificationLevel>|<get-verificationLevel>(){}[0]
    final val welcomeScreen // dev.kord.common.entity/DiscordPartialGuild.welcomeScreen|{}welcomeScreen[0]
        final fun <get-welcomeScreen>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordWelcomeScreen> // dev.kord.common.entity/DiscordPartialGuild.welcomeScreen.<get-welcomeScreen>|<get-welcomeScreen>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordPartialGuild.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordPartialGuild.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordPartialGuild.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/NsfwLevel> // dev.kord.common.entity/DiscordPartialGuild.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/VerificationLevel> // dev.kord.common.entity/DiscordPartialGuild.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordStageInstance>> // dev.kord.common.entity/DiscordPartialGuild.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordMessageSticker>> // dev.kord.common.entity/DiscordPartialGuild.component15|component15(){}[0]
    final fun component16(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordGuildScheduledEvent>> // dev.kord.common.entity/DiscordPartialGuild.component16|component16(){}[0]
    final fun component17(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordPartialGuild.component17|component17(){}[0]
    final fun component18(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordPartialGuild.component18|component18(){}[0]
    final fun component19(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordPartialGuild.component19|component19(){}[0]
    final fun component2(): kotlin/String // dev.kord.common.entity/DiscordPartialGuild.component2|component2(){}[0]
    final fun component3(): kotlin/String? // dev.kord.common.entity/DiscordPartialGuild.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordPartialGuild.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> // dev.kord.common.entity/DiscordPartialGuild.component5|component5(){}[0]
    final fun component6(): kotlin.collections/List<dev.kord.common.entity/GuildFeature> // dev.kord.common.entity/DiscordPartialGuild.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordWelcomeScreen> // dev.kord.common.entity/DiscordPartialGuild.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordPartialGuild.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordPartialGuild.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., kotlin/String? = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> = ..., kotlin.collections/List<dev.kord.common.entity/GuildFeature> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordWelcomeScreen> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/NsfwLevel> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/VerificationLevel> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordStageInstance>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordMessageSticker>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordGuildScheduledEvent>> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.common.entity/DiscordPartialGuild // dev.kord.common.entity/DiscordPartialGuild.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions>;kotlin.collections.List<dev.kord.common.entity.GuildFeature>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordWelcomeScreen>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.NsfwLevel>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.VerificationLevel>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordStageInstance>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordMessageSticker>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordGuildScheduledEvent>>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalBoolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordPartialGuild.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordPartialGuild.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordPartialGuild.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordPartialGuild> { // dev.kord.common.entity/DiscordPartialGuild.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordPartialGuild.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordPartialGuild.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordPartialGuild.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordPartialGuild // dev.kord.common.entity/DiscordPartialGuild.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordPartialGuild) // dev.kord.common.entity/DiscordPartialGuild.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordPartialGuild){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordPartialGuild.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordPartialGuild.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordPartialGuild> // dev.kord.common.entity/DiscordPartialGuild.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordPartialIntegration { // dev.kord.common.entity/DiscordPartialIntegration|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/String, dev.kord.common.entity/DiscordIntegrationsAccount) // dev.kord.common.entity/DiscordPartialIntegration.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String;dev.kord.common.entity.DiscordIntegrationsAccount){}[0]

    final val account // dev.kord.common.entity/DiscordPartialIntegration.account|{}account[0]
        final fun <get-account>(): dev.kord.common.entity/DiscordIntegrationsAccount // dev.kord.common.entity/DiscordPartialIntegration.account.<get-account>|<get-account>(){}[0]
    final val id // dev.kord.common.entity/DiscordPartialIntegration.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordPartialIntegration.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.common.entity/DiscordPartialIntegration.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordPartialIntegration.name.<get-name>|<get-name>(){}[0]
    final val type // dev.kord.common.entity/DiscordPartialIntegration.type|{}type[0]
        final fun <get-type>(): kotlin/String // dev.kord.common.entity/DiscordPartialIntegration.type.<get-type>|<get-type>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordPartialIntegration.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.common.entity/DiscordPartialIntegration.component2|component2(){}[0]
    final fun component3(): kotlin/String // dev.kord.common.entity/DiscordPartialIntegration.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity/DiscordIntegrationsAccount // dev.kord.common.entity/DiscordPartialIntegration.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., kotlin/String = ..., dev.kord.common.entity/DiscordIntegrationsAccount = ...): dev.kord.common.entity/DiscordPartialIntegration // dev.kord.common.entity/DiscordPartialIntegration.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String;dev.kord.common.entity.DiscordIntegrationsAccount){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordPartialIntegration.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordPartialIntegration.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordPartialIntegration.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordPartialIntegration> { // dev.kord.common.entity/DiscordPartialIntegration.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordPartialIntegration.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordPartialIntegration.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordPartialIntegration.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordPartialIntegration // dev.kord.common.entity/DiscordPartialIntegration.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordPartialIntegration) // dev.kord.common.entity/DiscordPartialIntegration.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordPartialIntegration){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordPartialIntegration.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordPartialIntegration> // dev.kord.common.entity/DiscordPartialIntegration.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordPartialInvite { // dev.kord.common.entity/DiscordPartialInvite|null[0]
    constructor <init>(kotlin/String?, kotlin/Int) // dev.kord.common.entity/DiscordPartialInvite.<init>|<init>(kotlin.String?;kotlin.Int){}[0]

    final val code // dev.kord.common.entity/DiscordPartialInvite.code|{}code[0]
        final fun <get-code>(): kotlin/String? // dev.kord.common.entity/DiscordPartialInvite.code.<get-code>|<get-code>(){}[0]
    final val uses // dev.kord.common.entity/DiscordPartialInvite.uses|{}uses[0]
        final fun <get-uses>(): kotlin/Int // dev.kord.common.entity/DiscordPartialInvite.uses.<get-uses>|<get-uses>(){}[0]

    final fun component1(): kotlin/String? // dev.kord.common.entity/DiscordPartialInvite.component1|component1(){}[0]
    final fun component2(): kotlin/Int // dev.kord.common.entity/DiscordPartialInvite.component2|component2(){}[0]
    final fun copy(kotlin/String? = ..., kotlin/Int = ...): dev.kord.common.entity/DiscordPartialInvite // dev.kord.common.entity/DiscordPartialInvite.copy|copy(kotlin.String?;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordPartialInvite.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordPartialInvite.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordPartialInvite.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordPartialInvite> { // dev.kord.common.entity/DiscordPartialInvite.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordPartialInvite.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordPartialInvite.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordPartialInvite.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordPartialInvite // dev.kord.common.entity/DiscordPartialInvite.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordPartialInvite) // dev.kord.common.entity/DiscordPartialInvite.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordPartialInvite){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordPartialInvite.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordPartialInvite> // dev.kord.common.entity/DiscordPartialInvite.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordPartialMessage { // dev.kord.common.entity/DiscordPartialMessage|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordOptionallyMemberUser>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordMentionedChannel>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordAttachment>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordEmbed>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Reaction>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageType> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageActivity> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageApplication> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessageReference> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordStickerItem>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessage?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessageInteraction> = ..., dev.kord.common.entity.optional/OptionalInt = ...) // dev.kord.common.entity/DiscordPartialMessage.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordGuildMember>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordOptionallyMemberUser>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordMentionedChannel>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordAttachment>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordEmbed>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Reaction>>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageType>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageActivity>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageApplication>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordMessageReference>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageFlags>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordStickerItem>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordMessage?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordMessageInteraction>;dev.kord.common.entity.optional.OptionalInt){}[0]

    final val activity // dev.kord.common.entity/DiscordPartialMessage.activity|{}activity[0]
        final fun <get-activity>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageActivity> // dev.kord.common.entity/DiscordPartialMessage.activity.<get-activity>|<get-activity>(){}[0]
    final val application // dev.kord.common.entity/DiscordPartialMessage.application|{}application[0]
        final fun <get-application>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageApplication> // dev.kord.common.entity/DiscordPartialMessage.application.<get-application>|<get-application>(){}[0]
    final val attachments // dev.kord.common.entity/DiscordPartialMessage.attachments|{}attachments[0]
        final fun <get-attachments>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordAttachment>> // dev.kord.common.entity/DiscordPartialMessage.attachments.<get-attachments>|<get-attachments>(){}[0]
    final val author // dev.kord.common.entity/DiscordPartialMessage.author|{}author[0]
        final fun <get-author>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordPartialMessage.author.<get-author>|<get-author>(){}[0]
    final val channelId // dev.kord.common.entity/DiscordPartialMessage.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordPartialMessage.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val content // dev.kord.common.entity/DiscordPartialMessage.content|{}content[0]
        final fun <get-content>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordPartialMessage.content.<get-content>|<get-content>(){}[0]
    final val editedTimestamp // dev.kord.common.entity/DiscordPartialMessage.editedTimestamp|{}editedTimestamp[0]
        final fun <get-editedTimestamp>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordPartialMessage.editedTimestamp.<get-editedTimestamp>|<get-editedTimestamp>(){}[0]
    final val embeds // dev.kord.common.entity/DiscordPartialMessage.embeds|{}embeds[0]
        final fun <get-embeds>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordEmbed>> // dev.kord.common.entity/DiscordPartialMessage.embeds.<get-embeds>|<get-embeds>(){}[0]
    final val flags // dev.kord.common.entity/DiscordPartialMessage.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> // dev.kord.common.entity/DiscordPartialMessage.flags.<get-flags>|<get-flags>(){}[0]
    final val guildId // dev.kord.common.entity/DiscordPartialMessage.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordPartialMessage.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.common.entity/DiscordPartialMessage.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordPartialMessage.id.<get-id>|<get-id>(){}[0]
    final val interaction // dev.kord.common.entity/DiscordPartialMessage.interaction|{}interaction[0]
        final fun <get-interaction>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessageInteraction> // dev.kord.common.entity/DiscordPartialMessage.interaction.<get-interaction>|<get-interaction>(){}[0]
    final val member // dev.kord.common.entity/DiscordPartialMessage.member|{}member[0]
        final fun <get-member>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> // dev.kord.common.entity/DiscordPartialMessage.member.<get-member>|<get-member>(){}[0]
    final val mentionEveryone // dev.kord.common.entity/DiscordPartialMessage.mentionEveryone|{}mentionEveryone[0]
        final fun <get-mentionEveryone>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordPartialMessage.mentionEveryone.<get-mentionEveryone>|<get-mentionEveryone>(){}[0]
    final val mentionRoles // dev.kord.common.entity/DiscordPartialMessage.mentionRoles|{}mentionRoles[0]
        final fun <get-mentionRoles>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.common.entity/DiscordPartialMessage.mentionRoles.<get-mentionRoles>|<get-mentionRoles>(){}[0]
    final val mentionedChannels // dev.kord.common.entity/DiscordPartialMessage.mentionedChannels|{}mentionedChannels[0]
        final fun <get-mentionedChannels>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordMentionedChannel>> // dev.kord.common.entity/DiscordPartialMessage.mentionedChannels.<get-mentionedChannels>|<get-mentionedChannels>(){}[0]
    final val mentions // dev.kord.common.entity/DiscordPartialMessage.mentions|{}mentions[0]
        final fun <get-mentions>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordOptionallyMemberUser>> // dev.kord.common.entity/DiscordPartialMessage.mentions.<get-mentions>|<get-mentions>(){}[0]
    final val messageReference // dev.kord.common.entity/DiscordPartialMessage.messageReference|{}messageReference[0]
        final fun <get-messageReference>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessageReference> // dev.kord.common.entity/DiscordPartialMessage.messageReference.<get-messageReference>|<get-messageReference>(){}[0]
    final val nonce // dev.kord.common.entity/DiscordPartialMessage.nonce|{}nonce[0]
        final fun <get-nonce>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordPartialMessage.nonce.<get-nonce>|<get-nonce>(){}[0]
    final val pinned // dev.kord.common.entity/DiscordPartialMessage.pinned|{}pinned[0]
        final fun <get-pinned>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordPartialMessage.pinned.<get-pinned>|<get-pinned>(){}[0]
    final val position // dev.kord.common.entity/DiscordPartialMessage.position|{}position[0]
        final fun <get-position>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordPartialMessage.position.<get-position>|<get-position>(){}[0]
    final val reactions // dev.kord.common.entity/DiscordPartialMessage.reactions|{}reactions[0]
        final fun <get-reactions>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Reaction>> // dev.kord.common.entity/DiscordPartialMessage.reactions.<get-reactions>|<get-reactions>(){}[0]
    final val referencedMessage // dev.kord.common.entity/DiscordPartialMessage.referencedMessage|{}referencedMessage[0]
        final fun <get-referencedMessage>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessage?> // dev.kord.common.entity/DiscordPartialMessage.referencedMessage.<get-referencedMessage>|<get-referencedMessage>(){}[0]
    final val stickers // dev.kord.common.entity/DiscordPartialMessage.stickers|{}stickers[0]
        final fun <get-stickers>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordStickerItem>> // dev.kord.common.entity/DiscordPartialMessage.stickers.<get-stickers>|<get-stickers>(){}[0]
    final val timestamp // dev.kord.common.entity/DiscordPartialMessage.timestamp|{}timestamp[0]
        final fun <get-timestamp>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.common.entity/DiscordPartialMessage.timestamp.<get-timestamp>|<get-timestamp>(){}[0]
    final val tts // dev.kord.common.entity/DiscordPartialMessage.tts|{}tts[0]
        final fun <get-tts>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordPartialMessage.tts.<get-tts>|<get-tts>(){}[0]
    final val type // dev.kord.common.entity/DiscordPartialMessage.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageType> // dev.kord.common.entity/DiscordPartialMessage.type.<get-type>|<get-type>(){}[0]
    final val webhookId // dev.kord.common.entity/DiscordPartialMessage.webhookId|{}webhookId[0]
        final fun <get-webhookId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordPartialMessage.webhookId.<get-webhookId>|<get-webhookId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordPartialMessage.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordPartialMessage.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordOptionallyMemberUser>> // dev.kord.common.entity/DiscordPartialMessage.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.common.entity/DiscordPartialMessage.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordMentionedChannel>> // dev.kord.common.entity/DiscordPartialMessage.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordAttachment>> // dev.kord.common.entity/DiscordPartialMessage.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordEmbed>> // dev.kord.common.entity/DiscordPartialMessage.component15|component15(){}[0]
    final fun component16(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Reaction>> // dev.kord.common.entity/DiscordPartialMessage.component16|component16(){}[0]
    final fun component17(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordPartialMessage.component17|component17(){}[0]
    final fun component18(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordPartialMessage.component18|component18(){}[0]
    final fun component19(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordPartialMessage.component19|component19(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordPartialMessage.component2|component2(){}[0]
    final fun component20(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageType> // dev.kord.common.entity/DiscordPartialMessage.component20|component20(){}[0]
    final fun component21(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageActivity> // dev.kord.common.entity/DiscordPartialMessage.component21|component21(){}[0]
    final fun component22(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageApplication> // dev.kord.common.entity/DiscordPartialMessage.component22|component22(){}[0]
    final fun component23(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessageReference> // dev.kord.common.entity/DiscordPartialMessage.component23|component23(){}[0]
    final fun component24(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> // dev.kord.common.entity/DiscordPartialMessage.component24|component24(){}[0]
    final fun component25(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordStickerItem>> // dev.kord.common.entity/DiscordPartialMessage.component25|component25(){}[0]
    final fun component26(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessage?> // dev.kord.common.entity/DiscordPartialMessage.component26|component26(){}[0]
    final fun component27(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessageInteraction> // dev.kord.common.entity/DiscordPartialMessage.component27|component27(){}[0]
    final fun component28(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordPartialMessage.component28|component28(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordPartialMessage.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordPartialMessage.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> // dev.kord.common.entity/DiscordPartialMessage.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordPartialMessage.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> // dev.kord.common.entity/DiscordPartialMessage.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordPartialMessage.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordPartialMessage.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant> = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordOptionallyMemberUser>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Snowflake>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordMentionedChannel>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordAttachment>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordEmbed>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Reaction>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageType> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageActivity> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageApplication> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessageReference> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/MessageFlags> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordStickerItem>> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessage?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordMessageInteraction> = ..., dev.kord.common.entity.optional/OptionalInt = ...): dev.kord.common.entity/DiscordPartialMessage // dev.kord.common.entity/DiscordPartialMessage.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordGuildMember>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant>;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordOptionallyMemberUser>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Snowflake>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordMentionedChannel>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordAttachment>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordEmbed>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Reaction>>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageType>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageActivity>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageApplication>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordMessageReference>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.MessageFlags>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordStickerItem>>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordMessage?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordMessageInteraction>;dev.kord.common.entity.optional.OptionalInt){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordPartialMessage.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordPartialMessage.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordPartialMessage.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordPartialMessage> { // dev.kord.common.entity/DiscordPartialMessage.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordPartialMessage.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordPartialMessage.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordPartialMessage.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordPartialMessage // dev.kord.common.entity/DiscordPartialMessage.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordPartialMessage) // dev.kord.common.entity/DiscordPartialMessage.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordPartialMessage){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordPartialMessage.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordPartialMessage.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordPartialMessage> // dev.kord.common.entity/DiscordPartialMessage.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordPartialRole { // dev.kord.common.entity/DiscordPartialRole|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordRoleTags> = ...) // dev.kord.common.entity/DiscordPartialRole.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordRoleTags>){}[0]

    final val color // dev.kord.common.entity/DiscordPartialRole.color|{}color[0]
        final fun <get-color>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordPartialRole.color.<get-color>|<get-color>(){}[0]
    final val hoist // dev.kord.common.entity/DiscordPartialRole.hoist|{}hoist[0]
        final fun <get-hoist>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordPartialRole.hoist.<get-hoist>|<get-hoist>(){}[0]
    final val icon // dev.kord.common.entity/DiscordPartialRole.icon|{}icon[0]
        final fun <get-icon>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordPartialRole.icon.<get-icon>|<get-icon>(){}[0]
    final val id // dev.kord.common.entity/DiscordPartialRole.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordPartialRole.id.<get-id>|<get-id>(){}[0]
    final val managed // dev.kord.common.entity/DiscordPartialRole.managed|{}managed[0]
        final fun <get-managed>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordPartialRole.managed.<get-managed>|<get-managed>(){}[0]
    final val mentionable // dev.kord.common.entity/DiscordPartialRole.mentionable|{}mentionable[0]
        final fun <get-mentionable>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordPartialRole.mentionable.<get-mentionable>|<get-mentionable>(){}[0]
    final val name // dev.kord.common.entity/DiscordPartialRole.name|{}name[0]
        final fun <get-name>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordPartialRole.name.<get-name>|<get-name>(){}[0]
    final val permissions // dev.kord.common.entity/DiscordPartialRole.permissions|{}permissions[0]
        final fun <get-permissions>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> // dev.kord.common.entity/DiscordPartialRole.permissions.<get-permissions>|<get-permissions>(){}[0]
    final val position // dev.kord.common.entity/DiscordPartialRole.position|{}position[0]
        final fun <get-position>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordPartialRole.position.<get-position>|<get-position>(){}[0]
    final val tags // dev.kord.common.entity/DiscordPartialRole.tags|{}tags[0]
        final fun <get-tags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordRoleTags> // dev.kord.common.entity/DiscordPartialRole.tags.<get-tags>|<get-tags>(){}[0]
    final val unicodeEmoji // dev.kord.common.entity/DiscordPartialRole.unicodeEmoji|{}unicodeEmoji[0]
        final fun <get-unicodeEmoji>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordPartialRole.unicodeEmoji.<get-unicodeEmoji>|<get-unicodeEmoji>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordPartialRole.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordPartialRole.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordRoleTags> // dev.kord.common.entity/DiscordPartialRole.component11|component11(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordPartialRole.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordPartialRole.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordPartialRole.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordPartialRole.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordPartialRole.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordPartialRole.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> // dev.kord.common.entity/DiscordPartialRole.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordPartialRole.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Permissions> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordRoleTags> = ...): dev.kord.common.entity/DiscordPartialRole // dev.kord.common.entity/DiscordPartialRole.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.Permissions>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordRoleTags>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordPartialRole.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordPartialRole.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordPartialRole.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordPartialRole> { // dev.kord.common.entity/DiscordPartialRole.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordPartialRole.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordPartialRole.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordPartialRole.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordPartialRole // dev.kord.common.entity/DiscordPartialRole.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordPartialRole) // dev.kord.common.entity/DiscordPartialRole.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordPartialRole){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordPartialRole.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordPartialRole.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordPartialRole> // dev.kord.common.entity/DiscordPartialRole.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordPinsUpdateData { // dev.kord.common.entity/DiscordPinsUpdateData|null[0]
    constructor <init>(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ...) // dev.kord.common.entity/DiscordPinsUpdateData.<init>|<init>(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>){}[0]

    final val channelId // dev.kord.common.entity/DiscordPinsUpdateData.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordPinsUpdateData.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val guildId // dev.kord.common.entity/DiscordPinsUpdateData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordPinsUpdateData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val lastPinTimestamp // dev.kord.common.entity/DiscordPinsUpdateData.lastPinTimestamp|{}lastPinTimestamp[0]
        final fun <get-lastPinTimestamp>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordPinsUpdateData.lastPinTimestamp.<get-lastPinTimestamp>|<get-lastPinTimestamp>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordPinsUpdateData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordPinsUpdateData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordPinsUpdateData.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ...): dev.kord.common.entity/DiscordPinsUpdateData // dev.kord.common.entity/DiscordPinsUpdateData.copy|copy(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordPinsUpdateData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordPinsUpdateData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordPinsUpdateData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordPinsUpdateData> { // dev.kord.common.entity/DiscordPinsUpdateData.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordPinsUpdateData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordPinsUpdateData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordPinsUpdateData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordPinsUpdateData // dev.kord.common.entity/DiscordPinsUpdateData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordPinsUpdateData) // dev.kord.common.entity/DiscordPinsUpdateData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordPinsUpdateData){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordPinsUpdateData.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordPinsUpdateData.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordPinsUpdateData> // dev.kord.common.entity/DiscordPinsUpdateData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordPresenceUpdate { // dev.kord.common.entity/DiscordPresenceUpdate|null[0]
    constructor <init>(dev.kord.common.entity/DiscordPresenceUser, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity/PresenceStatus, kotlin.collections/List<dev.kord.common.entity/DiscordActivity>, dev.kord.common.entity/DiscordClientStatus) // dev.kord.common.entity/DiscordPresenceUpdate.<init>|<init>(dev.kord.common.entity.DiscordPresenceUser;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.PresenceStatus;kotlin.collections.List<dev.kord.common.entity.DiscordActivity>;dev.kord.common.entity.DiscordClientStatus){}[0]

    final val activities // dev.kord.common.entity/DiscordPresenceUpdate.activities|{}activities[0]
        final fun <get-activities>(): kotlin.collections/List<dev.kord.common.entity/DiscordActivity> // dev.kord.common.entity/DiscordPresenceUpdate.activities.<get-activities>|<get-activities>(){}[0]
    final val clientStatus // dev.kord.common.entity/DiscordPresenceUpdate.clientStatus|{}clientStatus[0]
        final fun <get-clientStatus>(): dev.kord.common.entity/DiscordClientStatus // dev.kord.common.entity/DiscordPresenceUpdate.clientStatus.<get-clientStatus>|<get-clientStatus>(){}[0]
    final val guildId // dev.kord.common.entity/DiscordPresenceUpdate.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordPresenceUpdate.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val status // dev.kord.common.entity/DiscordPresenceUpdate.status|{}status[0]
        final fun <get-status>(): dev.kord.common.entity/PresenceStatus // dev.kord.common.entity/DiscordPresenceUpdate.status.<get-status>|<get-status>(){}[0]
    final val user // dev.kord.common.entity/DiscordPresenceUpdate.user|{}user[0]
        final fun <get-user>(): dev.kord.common.entity/DiscordPresenceUser // dev.kord.common.entity/DiscordPresenceUpdate.user.<get-user>|<get-user>(){}[0]

    final fun component1(): dev.kord.common.entity/DiscordPresenceUser // dev.kord.common.entity/DiscordPresenceUpdate.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordPresenceUpdate.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/PresenceStatus // dev.kord.common.entity/DiscordPresenceUpdate.component3|component3(){}[0]
    final fun component4(): kotlin.collections/List<dev.kord.common.entity/DiscordActivity> // dev.kord.common.entity/DiscordPresenceUpdate.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity/DiscordClientStatus // dev.kord.common.entity/DiscordPresenceUpdate.component5|component5(){}[0]
    final fun copy(dev.kord.common.entity/DiscordPresenceUser = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity/PresenceStatus = ..., kotlin.collections/List<dev.kord.common.entity/DiscordActivity> = ..., dev.kord.common.entity/DiscordClientStatus = ...): dev.kord.common.entity/DiscordPresenceUpdate // dev.kord.common.entity/DiscordPresenceUpdate.copy|copy(dev.kord.common.entity.DiscordPresenceUser;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.PresenceStatus;kotlin.collections.List<dev.kord.common.entity.DiscordActivity>;dev.kord.common.entity.DiscordClientStatus){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordPresenceUpdate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordPresenceUpdate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordPresenceUpdate.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordPresenceUpdate> { // dev.kord.common.entity/DiscordPresenceUpdate.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordPresenceUpdate.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordPresenceUpdate.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordPresenceUpdate.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordPresenceUpdate // dev.kord.common.entity/DiscordPresenceUpdate.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordPresenceUpdate) // dev.kord.common.entity/DiscordPresenceUpdate.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordPresenceUpdate){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordPresenceUpdate.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordPresenceUpdate.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordPresenceUpdate> // dev.kord.common.entity/DiscordPresenceUpdate.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordPresenceUser { // dev.kord.common.entity/DiscordPresenceUser|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlinx.serialization.json/JsonObject) // dev.kord.common.entity/DiscordPresenceUser.<init>|<init>(dev.kord.common.entity.Snowflake;kotlinx.serialization.json.JsonObject){}[0]

    final val details // dev.kord.common.entity/DiscordPresenceUser.details|{}details[0]
        final fun <get-details>(): kotlinx.serialization.json/JsonObject // dev.kord.common.entity/DiscordPresenceUser.details.<get-details>|<get-details>(){}[0]
    final val id // dev.kord.common.entity/DiscordPresenceUser.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordPresenceUser.id.<get-id>|<get-id>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordPresenceUser.component1|component1(){}[0]
    final fun component2(): kotlinx.serialization.json/JsonObject // dev.kord.common.entity/DiscordPresenceUser.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlinx.serialization.json/JsonObject = ...): dev.kord.common.entity/DiscordPresenceUser // dev.kord.common.entity/DiscordPresenceUser.copy|copy(dev.kord.common.entity.Snowflake;kotlinx.serialization.json.JsonObject){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordPresenceUser.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordPresenceUser.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordPresenceUser.toString|toString(){}[0]

    final object Companion { // dev.kord.common.entity/DiscordPresenceUser.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordPresenceUser> // dev.kord.common.entity/DiscordPresenceUser.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordRemovedGuildMember { // dev.kord.common.entity/DiscordRemovedGuildMember|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordUser) // dev.kord.common.entity/DiscordRemovedGuildMember.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.DiscordUser){}[0]

    final val guildId // dev.kord.common.entity/DiscordRemovedGuildMember.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordRemovedGuildMember.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val user // dev.kord.common.entity/DiscordRemovedGuildMember.user|{}user[0]
        final fun <get-user>(): dev.kord.common.entity/DiscordUser // dev.kord.common.entity/DiscordRemovedGuildMember.user.<get-user>|<get-user>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordRemovedGuildMember.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/DiscordUser // dev.kord.common.entity/DiscordRemovedGuildMember.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/DiscordUser = ...): dev.kord.common.entity/DiscordRemovedGuildMember // dev.kord.common.entity/DiscordRemovedGuildMember.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.DiscordUser){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordRemovedGuildMember.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordRemovedGuildMember.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordRemovedGuildMember.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordRemovedGuildMember> { // dev.kord.common.entity/DiscordRemovedGuildMember.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordRemovedGuildMember.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordRemovedGuildMember.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordRemovedGuildMember.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordRemovedGuildMember // dev.kord.common.entity/DiscordRemovedGuildMember.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordRemovedGuildMember) // dev.kord.common.entity/DiscordRemovedGuildMember.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordRemovedGuildMember){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordRemovedGuildMember.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordRemovedGuildMember> // dev.kord.common.entity/DiscordRemovedGuildMember.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordRole { // dev.kord.common.entity/DiscordRole|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Int, kotlin/Boolean, dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlin/Int, dev.kord.common.entity/Permissions, kotlin/Boolean, kotlin/Boolean, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordRoleTags> = ..., dev.kord.common.entity/RoleFlags) // dev.kord.common.entity/DiscordRole.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Int;kotlin.Boolean;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlin.Int;dev.kord.common.entity.Permissions;kotlin.Boolean;kotlin.Boolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordRoleTags>;dev.kord.common.entity.RoleFlags){}[0]

    final val color // dev.kord.common.entity/DiscordRole.color|{}color[0]
        final fun <get-color>(): kotlin/Int // dev.kord.common.entity/DiscordRole.color.<get-color>|<get-color>(){}[0]
    final val flags // dev.kord.common.entity/DiscordRole.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity/RoleFlags // dev.kord.common.entity/DiscordRole.flags.<get-flags>|<get-flags>(){}[0]
    final val hoist // dev.kord.common.entity/DiscordRole.hoist|{}hoist[0]
        final fun <get-hoist>(): kotlin/Boolean // dev.kord.common.entity/DiscordRole.hoist.<get-hoist>|<get-hoist>(){}[0]
    final val icon // dev.kord.common.entity/DiscordRole.icon|{}icon[0]
        final fun <get-icon>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordRole.icon.<get-icon>|<get-icon>(){}[0]
    final val id // dev.kord.common.entity/DiscordRole.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordRole.id.<get-id>|<get-id>(){}[0]
    final val managed // dev.kord.common.entity/DiscordRole.managed|{}managed[0]
        final fun <get-managed>(): kotlin/Boolean // dev.kord.common.entity/DiscordRole.managed.<get-managed>|<get-managed>(){}[0]
    final val mentionable // dev.kord.common.entity/DiscordRole.mentionable|{}mentionable[0]
        final fun <get-mentionable>(): kotlin/Boolean // dev.kord.common.entity/DiscordRole.mentionable.<get-mentionable>|<get-mentionable>(){}[0]
    final val name // dev.kord.common.entity/DiscordRole.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordRole.name.<get-name>|<get-name>(){}[0]
    final val permissions // dev.kord.common.entity/DiscordRole.permissions|{}permissions[0]
        final fun <get-permissions>(): dev.kord.common.entity/Permissions // dev.kord.common.entity/DiscordRole.permissions.<get-permissions>|<get-permissions>(){}[0]
    final val position // dev.kord.common.entity/DiscordRole.position|{}position[0]
        final fun <get-position>(): kotlin/Int // dev.kord.common.entity/DiscordRole.position.<get-position>|<get-position>(){}[0]
    final val tags // dev.kord.common.entity/DiscordRole.tags|{}tags[0]
        final fun <get-tags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordRoleTags> // dev.kord.common.entity/DiscordRole.tags.<get-tags>|<get-tags>(){}[0]
    final val unicodeEmoji // dev.kord.common.entity/DiscordRole.unicodeEmoji|{}unicodeEmoji[0]
        final fun <get-unicodeEmoji>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordRole.unicodeEmoji.<get-unicodeEmoji>|<get-unicodeEmoji>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordRole.component1|component1(){}[0]
    final fun component10(): kotlin/Boolean // dev.kord.common.entity/DiscordRole.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordRoleTags> // dev.kord.common.entity/DiscordRole.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity/RoleFlags // dev.kord.common.entity/DiscordRole.component12|component12(){}[0]
    final fun component2(): kotlin/String // dev.kord.common.entity/DiscordRole.component2|component2(){}[0]
    final fun component3(): kotlin/Int // dev.kord.common.entity/DiscordRole.component3|component3(){}[0]
    final fun component4(): kotlin/Boolean // dev.kord.common.entity/DiscordRole.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordRole.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordRole.component6|component6(){}[0]
    final fun component7(): kotlin/Int // dev.kord.common.entity/DiscordRole.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity/Permissions // dev.kord.common.entity/DiscordRole.component8|component8(){}[0]
    final fun component9(): kotlin/Boolean // dev.kord.common.entity/DiscordRole.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., kotlin/Int = ..., kotlin/Boolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlin/Int = ..., dev.kord.common.entity/Permissions = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordRoleTags> = ..., dev.kord.common.entity/RoleFlags = ...): dev.kord.common.entity/DiscordRole // dev.kord.common.entity/DiscordRole.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Int;kotlin.Boolean;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlin.Int;dev.kord.common.entity.Permissions;kotlin.Boolean;kotlin.Boolean;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordRoleTags>;dev.kord.common.entity.RoleFlags){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordRole.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordRole.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordRole.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordRole> { // dev.kord.common.entity/DiscordRole.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordRole.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordRole.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordRole.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordRole // dev.kord.common.entity/DiscordRole.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordRole) // dev.kord.common.entity/DiscordRole.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordRole){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordRole.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordRole.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordRole> // dev.kord.common.entity/DiscordRole.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordRoleTags { // dev.kord.common.entity/DiscordRoleTags|null[0]
    constructor <init>(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/Nothing?> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/Nothing?> = ..., dev.kord.common.entity.optional/Optional<kotlin/Nothing?> = ...) // dev.kord.common.entity/DiscordRoleTags.<init>|<init>(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.Nothing?>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.Nothing?>;dev.kord.common.entity.optional.Optional<kotlin.Nothing?>){}[0]

    final val availableForPurchase // dev.kord.common.entity/DiscordRoleTags.availableForPurchase|{}availableForPurchase[0]
        final fun <get-availableForPurchase>(): dev.kord.common.entity.optional/Optional<kotlin/Nothing?> // dev.kord.common.entity/DiscordRoleTags.availableForPurchase.<get-availableForPurchase>|<get-availableForPurchase>(){}[0]
    final val botId // dev.kord.common.entity/DiscordRoleTags.botId|{}botId[0]
        final fun <get-botId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordRoleTags.botId.<get-botId>|<get-botId>(){}[0]
    final val guildConnections // dev.kord.common.entity/DiscordRoleTags.guildConnections|{}guildConnections[0]
        final fun <get-guildConnections>(): dev.kord.common.entity.optional/Optional<kotlin/Nothing?> // dev.kord.common.entity/DiscordRoleTags.guildConnections.<get-guildConnections>|<get-guildConnections>(){}[0]
    final val integrationId // dev.kord.common.entity/DiscordRoleTags.integrationId|{}integrationId[0]
        final fun <get-integrationId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordRoleTags.integrationId.<get-integrationId>|<get-integrationId>(){}[0]
    final val premiumSubscriber // dev.kord.common.entity/DiscordRoleTags.premiumSubscriber|{}premiumSubscriber[0]
        final fun <get-premiumSubscriber>(): dev.kord.common.entity.optional/Optional<kotlin/Nothing?> // dev.kord.common.entity/DiscordRoleTags.premiumSubscriber.<get-premiumSubscriber>|<get-premiumSubscriber>(){}[0]
    final val subscriptionListingId // dev.kord.common.entity/DiscordRoleTags.subscriptionListingId|{}subscriptionListingId[0]
        final fun <get-subscriptionListingId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordRoleTags.subscriptionListingId.<get-subscriptionListingId>|<get-subscriptionListingId>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordRoleTags.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordRoleTags.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/Nothing?> // dev.kord.common.entity/DiscordRoleTags.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordRoleTags.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin/Nothing?> // dev.kord.common.entity/DiscordRoleTags.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin/Nothing?> // dev.kord.common.entity/DiscordRoleTags.component6|component6(){}[0]
    final fun copy(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/Nothing?> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/Nothing?> = ..., dev.kord.common.entity.optional/Optional<kotlin/Nothing?> = ...): dev.kord.common.entity/DiscordRoleTags // dev.kord.common.entity/DiscordRoleTags.copy|copy(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.Nothing?>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.Nothing?>;dev.kord.common.entity.optional.Optional<kotlin.Nothing?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordRoleTags.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordRoleTags.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordRoleTags.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordRoleTags> { // dev.kord.common.entity/DiscordRoleTags.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordRoleTags.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordRoleTags.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordRoleTags.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordRoleTags // dev.kord.common.entity/DiscordRoleTags.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordRoleTags) // dev.kord.common.entity/DiscordRoleTags.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordRoleTags){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordRoleTags.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordRoleTags.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordRoleTags> // dev.kord.common.entity/DiscordRoleTags.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordSelectDefaultValue { // dev.kord.common.entity/DiscordSelectDefaultValue|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/SelectDefaultValueType) // dev.kord.common.entity/DiscordSelectDefaultValue.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.SelectDefaultValueType){}[0]

    final val id // dev.kord.common.entity/DiscordSelectDefaultValue.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordSelectDefaultValue.id.<get-id>|<get-id>(){}[0]
    final val type // dev.kord.common.entity/DiscordSelectDefaultValue.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/SelectDefaultValueType // dev.kord.common.entity/DiscordSelectDefaultValue.type.<get-type>|<get-type>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordSelectDefaultValue.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/SelectDefaultValueType // dev.kord.common.entity/DiscordSelectDefaultValue.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/SelectDefaultValueType = ...): dev.kord.common.entity/DiscordSelectDefaultValue // dev.kord.common.entity/DiscordSelectDefaultValue.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.SelectDefaultValueType){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordSelectDefaultValue.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordSelectDefaultValue.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordSelectDefaultValue.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordSelectDefaultValue> { // dev.kord.common.entity/DiscordSelectDefaultValue.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordSelectDefaultValue.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordSelectDefaultValue.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordSelectDefaultValue.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordSelectDefaultValue // dev.kord.common.entity/DiscordSelectDefaultValue.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordSelectDefaultValue) // dev.kord.common.entity/DiscordSelectDefaultValue.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordSelectDefaultValue){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordSelectDefaultValue.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordSelectDefaultValue> // dev.kord.common.entity/DiscordSelectDefaultValue.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordSelectOption { // dev.kord.common.entity/DiscordSelectOption|null[0]
    constructor <init>(kotlin/String, kotlin/String, dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> = ..., dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.common.entity/DiscordSelectOption.<init>|<init>(kotlin.String;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordPartialEmoji>;dev.kord.common.entity.optional.OptionalBoolean){}[0]

    final val default // dev.kord.common.entity/DiscordSelectOption.default|{}default[0]
        final fun <get-default>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordSelectOption.default.<get-default>|<get-default>(){}[0]
    final val description // dev.kord.common.entity/DiscordSelectOption.description|{}description[0]
        final fun <get-description>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordSelectOption.description.<get-description>|<get-description>(){}[0]
    final val emoji // dev.kord.common.entity/DiscordSelectOption.emoji|{}emoji[0]
        final fun <get-emoji>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> // dev.kord.common.entity/DiscordSelectOption.emoji.<get-emoji>|<get-emoji>(){}[0]
    final val label // dev.kord.common.entity/DiscordSelectOption.label|{}label[0]
        final fun <get-label>(): kotlin/String // dev.kord.common.entity/DiscordSelectOption.label.<get-label>|<get-label>(){}[0]
    final val value // dev.kord.common.entity/DiscordSelectOption.value|{}value[0]
        final fun <get-value>(): kotlin/String // dev.kord.common.entity/DiscordSelectOption.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/String // dev.kord.common.entity/DiscordSelectOption.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.common.entity/DiscordSelectOption.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordSelectOption.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> // dev.kord.common.entity/DiscordSelectOption.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordSelectOption.component5|component5(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.common.entity/DiscordSelectOption // dev.kord.common.entity/DiscordSelectOption.copy|copy(kotlin.String;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordPartialEmoji>;dev.kord.common.entity.optional.OptionalBoolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordSelectOption.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordSelectOption.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordSelectOption.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordSelectOption> { // dev.kord.common.entity/DiscordSelectOption.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordSelectOption.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordSelectOption.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordSelectOption.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordSelectOption // dev.kord.common.entity/DiscordSelectOption.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordSelectOption) // dev.kord.common.entity/DiscordSelectOption.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordSelectOption){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordSelectOption.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordSelectOption.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordSelectOption> // dev.kord.common.entity/DiscordSelectOption.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordShard { // dev.kord.common.entity/DiscordShard|null[0]
    constructor <init>(kotlin/Int, kotlin/Int) // dev.kord.common.entity/DiscordShard.<init>|<init>(kotlin.Int;kotlin.Int){}[0]

    final val count // dev.kord.common.entity/DiscordShard.count|{}count[0]
        final fun <get-count>(): kotlin/Int // dev.kord.common.entity/DiscordShard.count.<get-count>|<get-count>(){}[0]
    final val index // dev.kord.common.entity/DiscordShard.index|{}index[0]
        final fun <get-index>(): kotlin/Int // dev.kord.common.entity/DiscordShard.index.<get-index>|<get-index>(){}[0]

    final fun component1(): kotlin/Int // dev.kord.common.entity/DiscordShard.component1|component1(){}[0]
    final fun component2(): kotlin/Int // dev.kord.common.entity/DiscordShard.component2|component2(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/Int = ...): dev.kord.common.entity/DiscordShard // dev.kord.common.entity/DiscordShard.copy|copy(kotlin.Int;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordShard.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordShard.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordShard.toString|toString(){}[0]

    final class NewCompanion { // dev.kord.common.entity/DiscordShard.NewCompanion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordShard> // dev.kord.common.entity/DiscordShard.NewCompanion.serializer|serializer(){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordShard.Companion|null[0]
        final val NewCompanion // dev.kord.common.entity/DiscordShard.Companion.NewCompanion|{}NewCompanion[0]
            final fun <get-NewCompanion>(): dev.kord.common.entity/DiscordShard.NewCompanion // dev.kord.common.entity/DiscordShard.Companion.NewCompanion.<get-NewCompanion>|<get-NewCompanion>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordShard> // dev.kord.common.entity/DiscordShard.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordStageInstance { // dev.kord.common.entity/DiscordStageInstance|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/StageInstancePrivacyLevel, kotlin/Boolean, dev.kord.common.entity/Snowflake?) // dev.kord.common.entity/DiscordStageInstance.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.StageInstancePrivacyLevel;kotlin.Boolean;dev.kord.common.entity.Snowflake?){}[0]

    final val channelId // dev.kord.common.entity/DiscordStageInstance.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordStageInstance.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val discoverableDisabled // dev.kord.common.entity/DiscordStageInstance.discoverableDisabled|{}discoverableDisabled[0]
        final fun <get-discoverableDisabled>(): kotlin/Boolean // dev.kord.common.entity/DiscordStageInstance.discoverableDisabled.<get-discoverableDisabled>|<get-discoverableDisabled>(){}[0]
    final val guildId // dev.kord.common.entity/DiscordStageInstance.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordStageInstance.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val guildScheduledEventId // dev.kord.common.entity/DiscordStageInstance.guildScheduledEventId|{}guildScheduledEventId[0]
        final fun <get-guildScheduledEventId>(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordStageInstance.guildScheduledEventId.<get-guildScheduledEventId>|<get-guildScheduledEventId>(){}[0]
    final val id // dev.kord.common.entity/DiscordStageInstance.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordStageInstance.id.<get-id>|<get-id>(){}[0]
    final val privacyLevel // dev.kord.common.entity/DiscordStageInstance.privacyLevel|{}privacyLevel[0]
        final fun <get-privacyLevel>(): dev.kord.common.entity/StageInstancePrivacyLevel // dev.kord.common.entity/DiscordStageInstance.privacyLevel.<get-privacyLevel>|<get-privacyLevel>(){}[0]
    final val topic // dev.kord.common.entity/DiscordStageInstance.topic|{}topic[0]
        final fun <get-topic>(): kotlin/String // dev.kord.common.entity/DiscordStageInstance.topic.<get-topic>|<get-topic>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordStageInstance.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordStageInstance.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordStageInstance.component3|component3(){}[0]
    final fun component4(): kotlin/String // dev.kord.common.entity/DiscordStageInstance.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity/StageInstancePrivacyLevel // dev.kord.common.entity/DiscordStageInstance.component5|component5(){}[0]
    final fun component6(): kotlin/Boolean // dev.kord.common.entity/DiscordStageInstance.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordStageInstance.component7|component7(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., dev.kord.common.entity/StageInstancePrivacyLevel = ..., kotlin/Boolean = ..., dev.kord.common.entity/Snowflake? = ...): dev.kord.common.entity/DiscordStageInstance // dev.kord.common.entity/DiscordStageInstance.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.StageInstancePrivacyLevel;kotlin.Boolean;dev.kord.common.entity.Snowflake?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordStageInstance.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordStageInstance.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordStageInstance.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordStageInstance> { // dev.kord.common.entity/DiscordStageInstance.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordStageInstance.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordStageInstance.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordStageInstance.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordStageInstance // dev.kord.common.entity/DiscordStageInstance.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordStageInstance) // dev.kord.common.entity/DiscordStageInstance.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordStageInstance){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordStageInstance.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordStageInstance> // dev.kord.common.entity/DiscordStageInstance.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordStickerItem { // dev.kord.common.entity/DiscordStickerItem|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/MessageStickerType) // dev.kord.common.entity/DiscordStickerItem.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.MessageStickerType){}[0]

    final val formatType // dev.kord.common.entity/DiscordStickerItem.formatType|{}formatType[0]
        final fun <get-formatType>(): dev.kord.common.entity/MessageStickerType // dev.kord.common.entity/DiscordStickerItem.formatType.<get-formatType>|<get-formatType>(){}[0]
    final val id // dev.kord.common.entity/DiscordStickerItem.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordStickerItem.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.common.entity/DiscordStickerItem.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordStickerItem.name.<get-name>|<get-name>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordStickerItem.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.common.entity/DiscordStickerItem.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/MessageStickerType // dev.kord.common.entity/DiscordStickerItem.component3|component3(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., dev.kord.common.entity/MessageStickerType = ...): dev.kord.common.entity/DiscordStickerItem // dev.kord.common.entity/DiscordStickerItem.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.MessageStickerType){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordStickerItem.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordStickerItem.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordStickerItem.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordStickerItem> { // dev.kord.common.entity/DiscordStickerItem.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordStickerItem.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordStickerItem.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordStickerItem.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordStickerItem // dev.kord.common.entity/DiscordStickerItem.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordStickerItem) // dev.kord.common.entity/DiscordStickerItem.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordStickerItem){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordStickerItem.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordStickerItem> // dev.kord.common.entity/DiscordStickerItem.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordStickerPack { // dev.kord.common.entity/DiscordStickerPack|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin.collections/List<dev.kord.common.entity/DiscordMessageSticker>, kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/String, dev.kord.common.entity/Snowflake) // dev.kord.common.entity/DiscordStickerPack.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.collections.List<dev.kord.common.entity.DiscordMessageSticker>;kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.String;dev.kord.common.entity.Snowflake){}[0]

    final val bannerAssetId // dev.kord.common.entity/DiscordStickerPack.bannerAssetId|{}bannerAssetId[0]
        final fun <get-bannerAssetId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordStickerPack.bannerAssetId.<get-bannerAssetId>|<get-bannerAssetId>(){}[0]
    final val coverStickerId // dev.kord.common.entity/DiscordStickerPack.coverStickerId|{}coverStickerId[0]
        final fun <get-coverStickerId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordStickerPack.coverStickerId.<get-coverStickerId>|<get-coverStickerId>(){}[0]
    final val description // dev.kord.common.entity/DiscordStickerPack.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.common.entity/DiscordStickerPack.description.<get-description>|<get-description>(){}[0]
    final val id // dev.kord.common.entity/DiscordStickerPack.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordStickerPack.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.common.entity/DiscordStickerPack.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordStickerPack.name.<get-name>|<get-name>(){}[0]
    final val skuId // dev.kord.common.entity/DiscordStickerPack.skuId|{}skuId[0]
        final fun <get-skuId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordStickerPack.skuId.<get-skuId>|<get-skuId>(){}[0]
    final val stickers // dev.kord.common.entity/DiscordStickerPack.stickers|{}stickers[0]
        final fun <get-stickers>(): kotlin.collections/List<dev.kord.common.entity/DiscordMessageSticker> // dev.kord.common.entity/DiscordStickerPack.stickers.<get-stickers>|<get-stickers>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordStickerPack.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<dev.kord.common.entity/DiscordMessageSticker> // dev.kord.common.entity/DiscordStickerPack.component2|component2(){}[0]
    final fun component3(): kotlin/String // dev.kord.common.entity/DiscordStickerPack.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordStickerPack.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordStickerPack.component5|component5(){}[0]
    final fun component6(): kotlin/String // dev.kord.common.entity/DiscordStickerPack.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordStickerPack.component7|component7(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin.collections/List<dev.kord.common.entity/DiscordMessageSticker> = ..., kotlin/String = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlin/String = ..., dev.kord.common.entity/Snowflake = ...): dev.kord.common.entity/DiscordStickerPack // dev.kord.common.entity/DiscordStickerPack.copy|copy(dev.kord.common.entity.Snowflake;kotlin.collections.List<dev.kord.common.entity.DiscordMessageSticker>;kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlin.String;dev.kord.common.entity.Snowflake){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordStickerPack.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordStickerPack.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordStickerPack.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordStickerPack> { // dev.kord.common.entity/DiscordStickerPack.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordStickerPack.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordStickerPack.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordStickerPack.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordStickerPack // dev.kord.common.entity/DiscordStickerPack.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordStickerPack) // dev.kord.common.entity/DiscordStickerPack.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordStickerPack){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordStickerPack.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordStickerPack.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordStickerPack> // dev.kord.common.entity/DiscordStickerPack.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordTeam { // dev.kord.common.entity/DiscordTeam|null[0]
    constructor <init>(kotlin/String?, dev.kord.common.entity/Snowflake, kotlin.collections/List<dev.kord.common.entity/DiscordTeamMember>, kotlin/String, dev.kord.common.entity/Snowflake) // dev.kord.common.entity/DiscordTeam.<init>|<init>(kotlin.String?;dev.kord.common.entity.Snowflake;kotlin.collections.List<dev.kord.common.entity.DiscordTeamMember>;kotlin.String;dev.kord.common.entity.Snowflake){}[0]

    final val icon // dev.kord.common.entity/DiscordTeam.icon|{}icon[0]
        final fun <get-icon>(): kotlin/String? // dev.kord.common.entity/DiscordTeam.icon.<get-icon>|<get-icon>(){}[0]
    final val id // dev.kord.common.entity/DiscordTeam.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordTeam.id.<get-id>|<get-id>(){}[0]
    final val members // dev.kord.common.entity/DiscordTeam.members|{}members[0]
        final fun <get-members>(): kotlin.collections/List<dev.kord.common.entity/DiscordTeamMember> // dev.kord.common.entity/DiscordTeam.members.<get-members>|<get-members>(){}[0]
    final val name // dev.kord.common.entity/DiscordTeam.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordTeam.name.<get-name>|<get-name>(){}[0]
    final val ownerUserId // dev.kord.common.entity/DiscordTeam.ownerUserId|{}ownerUserId[0]
        final fun <get-ownerUserId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordTeam.ownerUserId.<get-ownerUserId>|<get-ownerUserId>(){}[0]

    final fun component1(): kotlin/String? // dev.kord.common.entity/DiscordTeam.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordTeam.component2|component2(){}[0]
    final fun component3(): kotlin.collections/List<dev.kord.common.entity/DiscordTeamMember> // dev.kord.common.entity/DiscordTeam.component3|component3(){}[0]
    final fun component4(): kotlin/String // dev.kord.common.entity/DiscordTeam.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordTeam.component5|component5(){}[0]
    final fun copy(kotlin/String? = ..., dev.kord.common.entity/Snowflake = ..., kotlin.collections/List<dev.kord.common.entity/DiscordTeamMember> = ..., kotlin/String = ..., dev.kord.common.entity/Snowflake = ...): dev.kord.common.entity/DiscordTeam // dev.kord.common.entity/DiscordTeam.copy|copy(kotlin.String?;dev.kord.common.entity.Snowflake;kotlin.collections.List<dev.kord.common.entity.DiscordTeamMember>;kotlin.String;dev.kord.common.entity.Snowflake){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordTeam.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordTeam.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordTeam.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordTeam> { // dev.kord.common.entity/DiscordTeam.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordTeam.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordTeam.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordTeam.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordTeam // dev.kord.common.entity/DiscordTeam.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordTeam) // dev.kord.common.entity/DiscordTeam.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordTeam){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordTeam.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordTeam.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordTeam> // dev.kord.common.entity/DiscordTeam.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordTeamMember { // dev.kord.common.entity/DiscordTeamMember|null[0]
    constructor <init>(dev.kord.common.entity/TeamMembershipState, dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordUser, dev.kord.common.entity/TeamMemberRole) // dev.kord.common.entity/DiscordTeamMember.<init>|<init>(dev.kord.common.entity.TeamMembershipState;dev.kord.common.entity.Snowflake;dev.kord.common.entity.DiscordUser;dev.kord.common.entity.TeamMemberRole){}[0]

    final val membershipState // dev.kord.common.entity/DiscordTeamMember.membershipState|{}membershipState[0]
        final fun <get-membershipState>(): dev.kord.common.entity/TeamMembershipState // dev.kord.common.entity/DiscordTeamMember.membershipState.<get-membershipState>|<get-membershipState>(){}[0]
    final val role // dev.kord.common.entity/DiscordTeamMember.role|{}role[0]
        final fun <get-role>(): dev.kord.common.entity/TeamMemberRole // dev.kord.common.entity/DiscordTeamMember.role.<get-role>|<get-role>(){}[0]
    final val teamId // dev.kord.common.entity/DiscordTeamMember.teamId|{}teamId[0]
        final fun <get-teamId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordTeamMember.teamId.<get-teamId>|<get-teamId>(){}[0]
    final val user // dev.kord.common.entity/DiscordTeamMember.user|{}user[0]
        final fun <get-user>(): dev.kord.common.entity/DiscordUser // dev.kord.common.entity/DiscordTeamMember.user.<get-user>|<get-user>(){}[0]

    final fun component1(): dev.kord.common.entity/TeamMembershipState // dev.kord.common.entity/DiscordTeamMember.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordTeamMember.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/DiscordUser // dev.kord.common.entity/DiscordTeamMember.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity/TeamMemberRole // dev.kord.common.entity/DiscordTeamMember.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity/TeamMembershipState = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/DiscordUser = ..., dev.kord.common.entity/TeamMemberRole = ...): dev.kord.common.entity/DiscordTeamMember // dev.kord.common.entity/DiscordTeamMember.copy|copy(dev.kord.common.entity.TeamMembershipState;dev.kord.common.entity.Snowflake;dev.kord.common.entity.DiscordUser;dev.kord.common.entity.TeamMemberRole){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordTeamMember.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordTeamMember.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordTeamMember.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordTeamMember> { // dev.kord.common.entity/DiscordTeamMember.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordTeamMember.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordTeamMember.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordTeamMember.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordTeamMember // dev.kord.common.entity/DiscordTeamMember.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordTeamMember) // dev.kord.common.entity/DiscordTeamMember.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordTeamMember){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordTeamMember.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordTeamMember> // dev.kord.common.entity/DiscordTeamMember.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordTemplate { // dev.kord.common.entity/DiscordTemplate|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/String?, kotlin/Int, dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordUser, kotlinx.datetime/Instant, kotlinx.datetime/Instant, dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordPartialGuild, kotlin/Boolean?) // dev.kord.common.entity/DiscordTemplate.<init>|<init>(kotlin.String;kotlin.String;kotlin.String?;kotlin.Int;dev.kord.common.entity.Snowflake;dev.kord.common.entity.DiscordUser;kotlinx.datetime.Instant;kotlinx.datetime.Instant;dev.kord.common.entity.Snowflake;dev.kord.common.entity.DiscordPartialGuild;kotlin.Boolean?){}[0]

    final val code // dev.kord.common.entity/DiscordTemplate.code|{}code[0]
        final fun <get-code>(): kotlin/String // dev.kord.common.entity/DiscordTemplate.code.<get-code>|<get-code>(){}[0]
    final val createdAt // dev.kord.common.entity/DiscordTemplate.createdAt|{}createdAt[0]
        final fun <get-createdAt>(): kotlinx.datetime/Instant // dev.kord.common.entity/DiscordTemplate.createdAt.<get-createdAt>|<get-createdAt>(){}[0]
    final val creator // dev.kord.common.entity/DiscordTemplate.creator|{}creator[0]
        final fun <get-creator>(): dev.kord.common.entity/DiscordUser // dev.kord.common.entity/DiscordTemplate.creator.<get-creator>|<get-creator>(){}[0]
    final val creatorId // dev.kord.common.entity/DiscordTemplate.creatorId|{}creatorId[0]
        final fun <get-creatorId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordTemplate.creatorId.<get-creatorId>|<get-creatorId>(){}[0]
    final val description // dev.kord.common.entity/DiscordTemplate.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.common.entity/DiscordTemplate.description.<get-description>|<get-description>(){}[0]
    final val isDirty // dev.kord.common.entity/DiscordTemplate.isDirty|{}isDirty[0]
        final fun <get-isDirty>(): kotlin/Boolean? // dev.kord.common.entity/DiscordTemplate.isDirty.<get-isDirty>|<get-isDirty>(){}[0]
    final val name // dev.kord.common.entity/DiscordTemplate.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordTemplate.name.<get-name>|<get-name>(){}[0]
    final val serializedSourceGuild // dev.kord.common.entity/DiscordTemplate.serializedSourceGuild|{}serializedSourceGuild[0]
        final fun <get-serializedSourceGuild>(): dev.kord.common.entity/DiscordPartialGuild // dev.kord.common.entity/DiscordTemplate.serializedSourceGuild.<get-serializedSourceGuild>|<get-serializedSourceGuild>(){}[0]
    final val sourceGuildId // dev.kord.common.entity/DiscordTemplate.sourceGuildId|{}sourceGuildId[0]
        final fun <get-sourceGuildId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordTemplate.sourceGuildId.<get-sourceGuildId>|<get-sourceGuildId>(){}[0]
    final val updatedAt // dev.kord.common.entity/DiscordTemplate.updatedAt|{}updatedAt[0]
        final fun <get-updatedAt>(): kotlinx.datetime/Instant // dev.kord.common.entity/DiscordTemplate.updatedAt.<get-updatedAt>|<get-updatedAt>(){}[0]
    final val usageCount // dev.kord.common.entity/DiscordTemplate.usageCount|{}usageCount[0]
        final fun <get-usageCount>(): kotlin/Int // dev.kord.common.entity/DiscordTemplate.usageCount.<get-usageCount>|<get-usageCount>(){}[0]

    final fun component1(): kotlin/String // dev.kord.common.entity/DiscordTemplate.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity/DiscordPartialGuild // dev.kord.common.entity/DiscordTemplate.component10|component10(){}[0]
    final fun component11(): kotlin/Boolean? // dev.kord.common.entity/DiscordTemplate.component11|component11(){}[0]
    final fun component2(): kotlin/String // dev.kord.common.entity/DiscordTemplate.component2|component2(){}[0]
    final fun component3(): kotlin/String? // dev.kord.common.entity/DiscordTemplate.component3|component3(){}[0]
    final fun component4(): kotlin/Int // dev.kord.common.entity/DiscordTemplate.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordTemplate.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity/DiscordUser // dev.kord.common.entity/DiscordTemplate.component6|component6(){}[0]
    final fun component7(): kotlinx.datetime/Instant // dev.kord.common.entity/DiscordTemplate.component7|component7(){}[0]
    final fun component8(): kotlinx.datetime/Instant // dev.kord.common.entity/DiscordTemplate.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordTemplate.component9|component9(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/String? = ..., kotlin/Int = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/DiscordUser = ..., kotlinx.datetime/Instant = ..., kotlinx.datetime/Instant = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/DiscordPartialGuild = ..., kotlin/Boolean? = ...): dev.kord.common.entity/DiscordTemplate // dev.kord.common.entity/DiscordTemplate.copy|copy(kotlin.String;kotlin.String;kotlin.String?;kotlin.Int;dev.kord.common.entity.Snowflake;dev.kord.common.entity.DiscordUser;kotlinx.datetime.Instant;kotlinx.datetime.Instant;dev.kord.common.entity.Snowflake;dev.kord.common.entity.DiscordPartialGuild;kotlin.Boolean?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordTemplate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordTemplate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordTemplate.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordTemplate> { // dev.kord.common.entity/DiscordTemplate.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordTemplate.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordTemplate.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordTemplate.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordTemplate // dev.kord.common.entity/DiscordTemplate.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordTemplate) // dev.kord.common.entity/DiscordTemplate.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordTemplate){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordTemplate.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordTemplate> // dev.kord.common.entity/DiscordTemplate.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordTextInputComponent : dev.kord.common.entity/DiscordComponent { // dev.kord.common.entity/DiscordTextInputComponent|null[0]
    constructor <init>(dev.kord.common.entity/ComponentType, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/TextInputStyle> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectOption>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectDefaultValue>> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> = ...) // dev.kord.common.entity/DiscordTextInputComponent.<init>|<init>(dev.kord.common.entity.ComponentType;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.TextInputStyle>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordPartialEmoji>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordComponent>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordSelectOption>>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordSelectDefaultValue>>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.ChannelType>>){}[0]

    final val channelTypes // dev.kord.common.entity/DiscordTextInputComponent.channelTypes|{}channelTypes[0]
        final fun <get-channelTypes>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> // dev.kord.common.entity/DiscordTextInputComponent.channelTypes.<get-channelTypes>|<get-channelTypes>(){}[0]
    final val components // dev.kord.common.entity/DiscordTextInputComponent.components|{}components[0]
        final fun <get-components>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> // dev.kord.common.entity/DiscordTextInputComponent.components.<get-components>|<get-components>(){}[0]
    final val customId // dev.kord.common.entity/DiscordTextInputComponent.customId|{}customId[0]
        final fun <get-customId>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordTextInputComponent.customId.<get-customId>|<get-customId>(){}[0]
    final val defaultValues // dev.kord.common.entity/DiscordTextInputComponent.defaultValues|{}defaultValues[0]
        final fun <get-defaultValues>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectDefaultValue>> // dev.kord.common.entity/DiscordTextInputComponent.defaultValues.<get-defaultValues>|<get-defaultValues>(){}[0]
    final val disabled // dev.kord.common.entity/DiscordTextInputComponent.disabled|{}disabled[0]
        final fun <get-disabled>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordTextInputComponent.disabled.<get-disabled>|<get-disabled>(){}[0]
    final val emoji // dev.kord.common.entity/DiscordTextInputComponent.emoji|{}emoji[0]
        final fun <get-emoji>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> // dev.kord.common.entity/DiscordTextInputComponent.emoji.<get-emoji>|<get-emoji>(){}[0]
    final val label // dev.kord.common.entity/DiscordTextInputComponent.label|{}label[0]
        final fun <get-label>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordTextInputComponent.label.<get-label>|<get-label>(){}[0]
    final val maxLength // dev.kord.common.entity/DiscordTextInputComponent.maxLength|{}maxLength[0]
        final fun <get-maxLength>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordTextInputComponent.maxLength.<get-maxLength>|<get-maxLength>(){}[0]
    final val maxValues // dev.kord.common.entity/DiscordTextInputComponent.maxValues|{}maxValues[0]
        final fun <get-maxValues>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordTextInputComponent.maxValues.<get-maxValues>|<get-maxValues>(){}[0]
    final val minLength // dev.kord.common.entity/DiscordTextInputComponent.minLength|{}minLength[0]
        final fun <get-minLength>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordTextInputComponent.minLength.<get-minLength>|<get-minLength>(){}[0]
    final val minValues // dev.kord.common.entity/DiscordTextInputComponent.minValues|{}minValues[0]
        final fun <get-minValues>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordTextInputComponent.minValues.<get-minValues>|<get-minValues>(){}[0]
    final val options // dev.kord.common.entity/DiscordTextInputComponent.options|{}options[0]
        final fun <get-options>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectOption>> // dev.kord.common.entity/DiscordTextInputComponent.options.<get-options>|<get-options>(){}[0]
    final val placeholder // dev.kord.common.entity/DiscordTextInputComponent.placeholder|{}placeholder[0]
        final fun <get-placeholder>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordTextInputComponent.placeholder.<get-placeholder>|<get-placeholder>(){}[0]
    final val required // dev.kord.common.entity/DiscordTextInputComponent.required|{}required[0]
        final fun <get-required>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordTextInputComponent.required.<get-required>|<get-required>(){}[0]
    final val style // dev.kord.common.entity/DiscordTextInputComponent.style|{}style[0]
        final fun <get-style>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/TextInputStyle> // dev.kord.common.entity/DiscordTextInputComponent.style.<get-style>|<get-style>(){}[0]
    final val type // dev.kord.common.entity/DiscordTextInputComponent.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ComponentType // dev.kord.common.entity/DiscordTextInputComponent.type.<get-type>|<get-type>(){}[0]
    final val url // dev.kord.common.entity/DiscordTextInputComponent.url|{}url[0]
        final fun <get-url>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordTextInputComponent.url.<get-url>|<get-url>(){}[0]
    final val value // dev.kord.common.entity/DiscordTextInputComponent.value|{}value[0]
        final fun <get-value>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordTextInputComponent.value.<get-value>|<get-value>(){}[0]

    final fun component1(): dev.kord.common.entity/ComponentType // dev.kord.common.entity/DiscordTextInputComponent.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordTextInputComponent.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectDefaultValue>> // dev.kord.common.entity/DiscordTextInputComponent.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordTextInputComponent.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordTextInputComponent.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordTextInputComponent.component14|component14(){}[0]
    final fun component15(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordTextInputComponent.component15|component15(){}[0]
    final fun component16(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordTextInputComponent.component16|component16(){}[0]
    final fun component17(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordTextInputComponent.component17|component17(){}[0]
    final fun component18(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> // dev.kord.common.entity/DiscordTextInputComponent.component18|component18(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/TextInputStyle> // dev.kord.common.entity/DiscordTextInputComponent.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordTextInputComponent.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> // dev.kord.common.entity/DiscordTextInputComponent.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordTextInputComponent.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordTextInputComponent.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordTextInputComponent.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> // dev.kord.common.entity/DiscordTextInputComponent.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectOption>> // dev.kord.common.entity/DiscordTextInputComponent.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/ComponentType = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/TextInputStyle> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectOption>> = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectDefaultValue>> = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalInt = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> = ...): dev.kord.common.entity/DiscordTextInputComponent // dev.kord.common.entity/DiscordTextInputComponent.copy|copy(dev.kord.common.entity.ComponentType;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.TextInputStyle>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordPartialEmoji>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordComponent>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordSelectOption>>;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordSelectDefaultValue>>;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalInt;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.ChannelType>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordTextInputComponent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordTextInputComponent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordTextInputComponent.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordTextInputComponent> { // dev.kord.common.entity/DiscordTextInputComponent.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordTextInputComponent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordTextInputComponent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordTextInputComponent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordTextInputComponent // dev.kord.common.entity/DiscordTextInputComponent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordTextInputComponent) // dev.kord.common.entity/DiscordTextInputComponent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordTextInputComponent){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordTextInputComponent.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordTextInputComponent.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordTextInputComponent> // dev.kord.common.entity/DiscordTextInputComponent.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordThreadMember { // dev.kord.common.entity/DiscordThreadMember|null[0]
    constructor <init>(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlinx.datetime/Instant, kotlin/Int) // dev.kord.common.entity/DiscordThreadMember.<init>|<init>(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlinx.datetime.Instant;kotlin.Int){}[0]

    final val flags // dev.kord.common.entity/DiscordThreadMember.flags|{}flags[0]
        final fun <get-flags>(): kotlin/Int // dev.kord.common.entity/DiscordThreadMember.flags.<get-flags>|<get-flags>(){}[0]
    final val id // dev.kord.common.entity/DiscordThreadMember.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordThreadMember.id.<get-id>|<get-id>(){}[0]
    final val joinTimestamp // dev.kord.common.entity/DiscordThreadMember.joinTimestamp|{}joinTimestamp[0]
        final fun <get-joinTimestamp>(): kotlinx.datetime/Instant // dev.kord.common.entity/DiscordThreadMember.joinTimestamp.<get-joinTimestamp>|<get-joinTimestamp>(){}[0]
    final val userId // dev.kord.common.entity/DiscordThreadMember.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordThreadMember.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordThreadMember.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordThreadMember.component2|component2(){}[0]
    final fun component3(): kotlinx.datetime/Instant // dev.kord.common.entity/DiscordThreadMember.component3|component3(){}[0]
    final fun component4(): kotlin/Int // dev.kord.common.entity/DiscordThreadMember.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., kotlinx.datetime/Instant = ..., kotlin/Int = ...): dev.kord.common.entity/DiscordThreadMember // dev.kord.common.entity/DiscordThreadMember.copy|copy(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.OptionalSnowflake;kotlinx.datetime.Instant;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordThreadMember.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordThreadMember.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordThreadMember.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordThreadMember> { // dev.kord.common.entity/DiscordThreadMember.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordThreadMember.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordThreadMember.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordThreadMember.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordThreadMember // dev.kord.common.entity/DiscordThreadMember.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordThreadMember) // dev.kord.common.entity/DiscordThreadMember.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordThreadMember){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordThreadMember.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordThreadMember> // dev.kord.common.entity/DiscordThreadMember.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordThreadMetadata { // dev.kord.common.entity/DiscordThreadMetadata|null[0]
    constructor <init>(kotlin/Boolean, kotlinx.datetime/Instant, dev.kord.common.entity/ArchiveDuration, dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ...) // dev.kord.common.entity/DiscordThreadMetadata.<init>|<init>(kotlin.Boolean;kotlinx.datetime.Instant;dev.kord.common.entity.ArchiveDuration;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>){}[0]

    final val archiveTimestamp // dev.kord.common.entity/DiscordThreadMetadata.archiveTimestamp|{}archiveTimestamp[0]
        final fun <get-archiveTimestamp>(): kotlinx.datetime/Instant // dev.kord.common.entity/DiscordThreadMetadata.archiveTimestamp.<get-archiveTimestamp>|<get-archiveTimestamp>(){}[0]
    final val archived // dev.kord.common.entity/DiscordThreadMetadata.archived|{}archived[0]
        final fun <get-archived>(): kotlin/Boolean // dev.kord.common.entity/DiscordThreadMetadata.archived.<get-archived>|<get-archived>(){}[0]
    final val autoArchiveDuration // dev.kord.common.entity/DiscordThreadMetadata.autoArchiveDuration|{}autoArchiveDuration[0]
        final fun <get-autoArchiveDuration>(): dev.kord.common.entity/ArchiveDuration // dev.kord.common.entity/DiscordThreadMetadata.autoArchiveDuration.<get-autoArchiveDuration>|<get-autoArchiveDuration>(){}[0]
    final val createTimestamp // dev.kord.common.entity/DiscordThreadMetadata.createTimestamp|{}createTimestamp[0]
        final fun <get-createTimestamp>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordThreadMetadata.createTimestamp.<get-createTimestamp>|<get-createTimestamp>(){}[0]
    final val invitable // dev.kord.common.entity/DiscordThreadMetadata.invitable|{}invitable[0]
        final fun <get-invitable>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordThreadMetadata.invitable.<get-invitable>|<get-invitable>(){}[0]
    final val locked // dev.kord.common.entity/DiscordThreadMetadata.locked|{}locked[0]
        final fun <get-locked>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordThreadMetadata.locked.<get-locked>|<get-locked>(){}[0]

    final fun component1(): kotlin/Boolean // dev.kord.common.entity/DiscordThreadMetadata.component1|component1(){}[0]
    final fun component2(): kotlinx.datetime/Instant // dev.kord.common.entity/DiscordThreadMetadata.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/ArchiveDuration // dev.kord.common.entity/DiscordThreadMetadata.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordThreadMetadata.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordThreadMetadata.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordThreadMetadata.component6|component6(){}[0]
    final fun copy(kotlin/Boolean = ..., kotlinx.datetime/Instant = ..., dev.kord.common.entity/ArchiveDuration = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ...): dev.kord.common.entity/DiscordThreadMetadata // dev.kord.common.entity/DiscordThreadMetadata.copy|copy(kotlin.Boolean;kotlinx.datetime.Instant;dev.kord.common.entity.ArchiveDuration;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordThreadMetadata.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordThreadMetadata.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordThreadMetadata.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordThreadMetadata> { // dev.kord.common.entity/DiscordThreadMetadata.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordThreadMetadata.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordThreadMetadata.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordThreadMetadata.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordThreadMetadata // dev.kord.common.entity/DiscordThreadMetadata.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordThreadMetadata) // dev.kord.common.entity/DiscordThreadMetadata.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordThreadMetadata){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordThreadMetadata.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordThreadMetadata.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordThreadMetadata> // dev.kord.common.entity/DiscordThreadMetadata.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordTyping { // dev.kord.common.entity/DiscordTyping|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity/Snowflake, kotlinx.datetime/Instant, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> = ...) // dev.kord.common.entity/DiscordTyping.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.Snowflake;kotlinx.datetime.Instant;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordGuildMember>){}[0]

    final val channelId // dev.kord.common.entity/DiscordTyping.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordTyping.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val guildId // dev.kord.common.entity/DiscordTyping.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordTyping.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val member // dev.kord.common.entity/DiscordTyping.member|{}member[0]
        final fun <get-member>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> // dev.kord.common.entity/DiscordTyping.member.<get-member>|<get-member>(){}[0]
    final val timestamp // dev.kord.common.entity/DiscordTyping.timestamp|{}timestamp[0]
        final fun <get-timestamp>(): kotlinx.datetime/Instant // dev.kord.common.entity/DiscordTyping.timestamp.<get-timestamp>|<get-timestamp>(){}[0]
    final val userId // dev.kord.common.entity/DiscordTyping.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordTyping.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordTyping.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordTyping.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordTyping.component3|component3(){}[0]
    final fun component4(): kotlinx.datetime/Instant // dev.kord.common.entity/DiscordTyping.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> // dev.kord.common.entity/DiscordTyping.component5|component5(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity/Snowflake = ..., kotlinx.datetime/Instant = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> = ...): dev.kord.common.entity/DiscordTyping // dev.kord.common.entity/DiscordTyping.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.Snowflake;kotlinx.datetime.Instant;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordGuildMember>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordTyping.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordTyping.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordTyping.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordTyping> { // dev.kord.common.entity/DiscordTyping.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordTyping.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordTyping.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordTyping.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordTyping // dev.kord.common.entity/DiscordTyping.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordTyping) // dev.kord.common.entity/DiscordTyping.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordTyping){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordTyping.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordTyping.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordTyping> // dev.kord.common.entity/DiscordTyping.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordUnavailableGuild { // dev.kord.common.entity/DiscordUnavailableGuild|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.common.entity/DiscordUnavailableGuild.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalBoolean){}[0]

    final val id // dev.kord.common.entity/DiscordUnavailableGuild.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordUnavailableGuild.id.<get-id>|<get-id>(){}[0]
    final val unavailable // dev.kord.common.entity/DiscordUnavailableGuild.unavailable|{}unavailable[0]
        final fun <get-unavailable>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordUnavailableGuild.unavailable.<get-unavailable>|<get-unavailable>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordUnavailableGuild.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordUnavailableGuild.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.common.entity/DiscordUnavailableGuild // dev.kord.common.entity/DiscordUnavailableGuild.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalBoolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordUnavailableGuild.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordUnavailableGuild.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordUnavailableGuild.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordUnavailableGuild> { // dev.kord.common.entity/DiscordUnavailableGuild.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordUnavailableGuild.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordUnavailableGuild.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordUnavailableGuild.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordUnavailableGuild // dev.kord.common.entity/DiscordUnavailableGuild.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordUnavailableGuild) // dev.kord.common.entity/DiscordUnavailableGuild.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordUnavailableGuild){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordUnavailableGuild.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordUnavailableGuild> // dev.kord.common.entity/DiscordUnavailableGuild.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordUpdatedEmojis { // dev.kord.common.entity/DiscordUpdatedEmojis|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin.collections/List<dev.kord.common.entity/DiscordEmoji>) // dev.kord.common.entity/DiscordUpdatedEmojis.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.collections.List<dev.kord.common.entity.DiscordEmoji>){}[0]

    final val emojis // dev.kord.common.entity/DiscordUpdatedEmojis.emojis|{}emojis[0]
        final fun <get-emojis>(): kotlin.collections/List<dev.kord.common.entity/DiscordEmoji> // dev.kord.common.entity/DiscordUpdatedEmojis.emojis.<get-emojis>|<get-emojis>(){}[0]
    final val guildId // dev.kord.common.entity/DiscordUpdatedEmojis.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordUpdatedEmojis.guildId.<get-guildId>|<get-guildId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordUpdatedEmojis.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<dev.kord.common.entity/DiscordEmoji> // dev.kord.common.entity/DiscordUpdatedEmojis.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin.collections/List<dev.kord.common.entity/DiscordEmoji> = ...): dev.kord.common.entity/DiscordUpdatedEmojis // dev.kord.common.entity/DiscordUpdatedEmojis.copy|copy(dev.kord.common.entity.Snowflake;kotlin.collections.List<dev.kord.common.entity.DiscordEmoji>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordUpdatedEmojis.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordUpdatedEmojis.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordUpdatedEmojis.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordUpdatedEmojis> { // dev.kord.common.entity/DiscordUpdatedEmojis.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordUpdatedEmojis.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordUpdatedEmojis.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordUpdatedEmojis.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordUpdatedEmojis // dev.kord.common.entity/DiscordUpdatedEmojis.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordUpdatedEmojis) // dev.kord.common.entity/DiscordUpdatedEmojis.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordUpdatedEmojis){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordUpdatedEmojis.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordUpdatedEmojis.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordUpdatedEmojis> // dev.kord.common.entity/DiscordUpdatedEmojis.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordUpdatedGuildMember { // dev.kord.common.entity/DiscordUpdatedGuildMember|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin.collections/List<dev.kord.common.entity/Snowflake>, dev.kord.common.entity/DiscordUser, dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlinx.datetime/Instant, dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ..., dev.kord.common.entity/GuildMemberFlags, dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ...) // dev.kord.common.entity/DiscordUpdatedGuildMember.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.collections.List<dev.kord.common.entity.Snowflake>;dev.kord.common.entity.DiscordUser;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlinx.datetime.Instant;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>;dev.kord.common.entity.GuildMemberFlags;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>){}[0]

    final val avatar // dev.kord.common.entity/DiscordUpdatedGuildMember.avatar|{}avatar[0]
        final fun <get-avatar>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordUpdatedGuildMember.avatar.<get-avatar>|<get-avatar>(){}[0]
    final val communicationDisabledUntil // dev.kord.common.entity/DiscordUpdatedGuildMember.communicationDisabledUntil|{}communicationDisabledUntil[0]
        final fun <get-communicationDisabledUntil>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordUpdatedGuildMember.communicationDisabledUntil.<get-communicationDisabledUntil>|<get-communicationDisabledUntil>(){}[0]
    final val flags // dev.kord.common.entity/DiscordUpdatedGuildMember.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity/GuildMemberFlags // dev.kord.common.entity/DiscordUpdatedGuildMember.flags.<get-flags>|<get-flags>(){}[0]
    final val guildId // dev.kord.common.entity/DiscordUpdatedGuildMember.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordUpdatedGuildMember.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val joinedAt // dev.kord.common.entity/DiscordUpdatedGuildMember.joinedAt|{}joinedAt[0]
        final fun <get-joinedAt>(): kotlinx.datetime/Instant // dev.kord.common.entity/DiscordUpdatedGuildMember.joinedAt.<get-joinedAt>|<get-joinedAt>(){}[0]
    final val nick // dev.kord.common.entity/DiscordUpdatedGuildMember.nick|{}nick[0]
        final fun <get-nick>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordUpdatedGuildMember.nick.<get-nick>|<get-nick>(){}[0]
    final val pending // dev.kord.common.entity/DiscordUpdatedGuildMember.pending|{}pending[0]
        final fun <get-pending>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordUpdatedGuildMember.pending.<get-pending>|<get-pending>(){}[0]
    final val premiumSince // dev.kord.common.entity/DiscordUpdatedGuildMember.premiumSince|{}premiumSince[0]
        final fun <get-premiumSince>(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordUpdatedGuildMember.premiumSince.<get-premiumSince>|<get-premiumSince>(){}[0]
    final val roles // dev.kord.common.entity/DiscordUpdatedGuildMember.roles|{}roles[0]
        final fun <get-roles>(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/DiscordUpdatedGuildMember.roles.<get-roles>|<get-roles>(){}[0]
    final val user // dev.kord.common.entity/DiscordUpdatedGuildMember.user|{}user[0]
        final fun <get-user>(): dev.kord.common.entity/DiscordUser // dev.kord.common.entity/DiscordUpdatedGuildMember.user.<get-user>|<get-user>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordUpdatedGuildMember.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordUpdatedGuildMember.component10|component10(){}[0]
    final fun component2(): kotlin.collections/List<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/DiscordUpdatedGuildMember.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/DiscordUser // dev.kord.common.entity/DiscordUpdatedGuildMember.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordUpdatedGuildMember.component4|component4(){}[0]
    final fun component5(): kotlinx.datetime/Instant // dev.kord.common.entity/DiscordUpdatedGuildMember.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> // dev.kord.common.entity/DiscordUpdatedGuildMember.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity/GuildMemberFlags // dev.kord.common.entity/DiscordUpdatedGuildMember.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordUpdatedGuildMember.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordUpdatedGuildMember.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin.collections/List<dev.kord.common.entity/Snowflake> = ..., dev.kord.common.entity/DiscordUser = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlinx.datetime/Instant = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ..., dev.kord.common.entity/GuildMemberFlags = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<kotlinx.datetime/Instant?> = ...): dev.kord.common.entity/DiscordUpdatedGuildMember // dev.kord.common.entity/DiscordUpdatedGuildMember.copy|copy(dev.kord.common.entity.Snowflake;kotlin.collections.List<dev.kord.common.entity.Snowflake>;dev.kord.common.entity.DiscordUser;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlinx.datetime.Instant;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>;dev.kord.common.entity.GuildMemberFlags;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<kotlinx.datetime.Instant?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordUpdatedGuildMember.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordUpdatedGuildMember.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordUpdatedGuildMember.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordUpdatedGuildMember> { // dev.kord.common.entity/DiscordUpdatedGuildMember.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordUpdatedGuildMember.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordUpdatedGuildMember.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordUpdatedGuildMember.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordUpdatedGuildMember // dev.kord.common.entity/DiscordUpdatedGuildMember.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordUpdatedGuildMember) // dev.kord.common.entity/DiscordUpdatedGuildMember.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordUpdatedGuildMember){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordUpdatedGuildMember.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordUpdatedGuildMember.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordUpdatedGuildMember> // dev.kord.common.entity/DiscordUpdatedGuildMember.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordUser { // dev.kord.common.entity/DiscordUser|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlin/String?, dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserFlags> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserPremium> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserFlags> = ..., kotlin/String? = ..., kotlin/Int? = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...) // dev.kord.common.entity/DiscordUser.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlin.String?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.UserFlags>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.UserPremium>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.UserFlags>;kotlin.String?;kotlin.Int?;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]

    final val accentColor // dev.kord.common.entity/DiscordUser.accentColor|{}accentColor[0]
        final fun <get-accentColor>(): kotlin/Int? // dev.kord.common.entity/DiscordUser.accentColor.<get-accentColor>|<get-accentColor>(){}[0]
    final val avatar // dev.kord.common.entity/DiscordUser.avatar|{}avatar[0]
        final fun <get-avatar>(): kotlin/String? // dev.kord.common.entity/DiscordUser.avatar.<get-avatar>|<get-avatar>(){}[0]
    final val avatarDecoration // dev.kord.common.entity/DiscordUser.avatarDecoration|{}avatarDecoration[0]
        final fun <get-avatarDecoration>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordUser.avatarDecoration.<get-avatarDecoration>|<get-avatarDecoration>(){}[0]
    final val banner // dev.kord.common.entity/DiscordUser.banner|{}banner[0]
        final fun <get-banner>(): kotlin/String? // dev.kord.common.entity/DiscordUser.banner.<get-banner>|<get-banner>(){}[0]
    final val bot // dev.kord.common.entity/DiscordUser.bot|{}bot[0]
        final fun <get-bot>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordUser.bot.<get-bot>|<get-bot>(){}[0]
    final val discriminator // dev.kord.common.entity/DiscordUser.discriminator|{}discriminator[0]
        final fun <get-discriminator>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordUser.discriminator.<get-discriminator>|<get-discriminator>(){}[0]
    final val email // dev.kord.common.entity/DiscordUser.email|{}email[0]
        final fun <get-email>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordUser.email.<get-email>|<get-email>(){}[0]
    final val flags // dev.kord.common.entity/DiscordUser.flags|{}flags[0]
        final fun <get-flags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserFlags> // dev.kord.common.entity/DiscordUser.flags.<get-flags>|<get-flags>(){}[0]
    final val globalName // dev.kord.common.entity/DiscordUser.globalName|{}globalName[0]
        final fun <get-globalName>(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordUser.globalName.<get-globalName>|<get-globalName>(){}[0]
    final val id // dev.kord.common.entity/DiscordUser.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordUser.id.<get-id>|<get-id>(){}[0]
    final val locale // dev.kord.common.entity/DiscordUser.locale|{}locale[0]
        final fun <get-locale>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordUser.locale.<get-locale>|<get-locale>(){}[0]
    final val mfaEnabled // dev.kord.common.entity/DiscordUser.mfaEnabled|{}mfaEnabled[0]
        final fun <get-mfaEnabled>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordUser.mfaEnabled.<get-mfaEnabled>|<get-mfaEnabled>(){}[0]
    final val premiumType // dev.kord.common.entity/DiscordUser.premiumType|{}premiumType[0]
        final fun <get-premiumType>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserPremium> // dev.kord.common.entity/DiscordUser.premiumType.<get-premiumType>|<get-premiumType>(){}[0]
    final val publicFlags // dev.kord.common.entity/DiscordUser.publicFlags|{}publicFlags[0]
        final fun <get-publicFlags>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserFlags> // dev.kord.common.entity/DiscordUser.publicFlags.<get-publicFlags>|<get-publicFlags>(){}[0]
    final val system // dev.kord.common.entity/DiscordUser.system|{}system[0]
        final fun <get-system>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordUser.system.<get-system>|<get-system>(){}[0]
    final val username // dev.kord.common.entity/DiscordUser.username|{}username[0]
        final fun <get-username>(): kotlin/String // dev.kord.common.entity/DiscordUser.username.<get-username>|<get-username>(){}[0]
    final val verified // dev.kord.common.entity/DiscordUser.verified|{}verified[0]
        final fun <get-verified>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordUser.verified.<get-verified>|<get-verified>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordUser.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordUser.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordUser.component11|component11(){}[0]
    final fun component12(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserFlags> // dev.kord.common.entity/DiscordUser.component12|component12(){}[0]
    final fun component13(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserPremium> // dev.kord.common.entity/DiscordUser.component13|component13(){}[0]
    final fun component14(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserFlags> // dev.kord.common.entity/DiscordUser.component14|component14(){}[0]
    final fun component15(): kotlin/String? // dev.kord.common.entity/DiscordUser.component15|component15(){}[0]
    final fun component16(): kotlin/Int? // dev.kord.common.entity/DiscordUser.component16|component16(){}[0]
    final fun component17(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordUser.component17|component17(){}[0]
    final fun component2(): kotlin/String // dev.kord.common.entity/DiscordUser.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordUser.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin/String?> // dev.kord.common.entity/DiscordUser.component4|component4(){}[0]
    final fun component5(): kotlin/String? // dev.kord.common.entity/DiscordUser.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordUser.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordUser.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordUser.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordUser.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., kotlin/String? = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserFlags> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserPremium> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/UserFlags> = ..., kotlin/String? = ..., kotlin/Int? = ..., dev.kord.common.entity.optional/Optional<kotlin/String?> = ...): dev.kord.common.entity/DiscordUser // dev.kord.common.entity/DiscordUser.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<kotlin.String?>;kotlin.String?;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.OptionalBoolean;dev.kord.common.entity.optional.Optional<kotlin.String?>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.UserFlags>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.UserPremium>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.UserFlags>;kotlin.String?;kotlin.Int?;dev.kord.common.entity.optional.Optional<kotlin.String?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordUser.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordUser.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordUser.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordUser> { // dev.kord.common.entity/DiscordUser.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordUser.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordUser.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordUser.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordUser // dev.kord.common.entity/DiscordUser.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordUser) // dev.kord.common.entity/DiscordUser.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordUser){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordUser.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordUser.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordUser.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordVoiceRegion { // dev.kord.common.entity/DiscordVoiceRegion|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean) // dev.kord.common.entity/DiscordVoiceRegion.<init>|<init>(kotlin.String;kotlin.String;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean){}[0]

    final val custom // dev.kord.common.entity/DiscordVoiceRegion.custom|{}custom[0]
        final fun <get-custom>(): kotlin/Boolean // dev.kord.common.entity/DiscordVoiceRegion.custom.<get-custom>|<get-custom>(){}[0]
    final val deprecated // dev.kord.common.entity/DiscordVoiceRegion.deprecated|{}deprecated[0]
        final fun <get-deprecated>(): kotlin/Boolean // dev.kord.common.entity/DiscordVoiceRegion.deprecated.<get-deprecated>|<get-deprecated>(){}[0]
    final val id // dev.kord.common.entity/DiscordVoiceRegion.id|{}id[0]
        final fun <get-id>(): kotlin/String // dev.kord.common.entity/DiscordVoiceRegion.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.common.entity/DiscordVoiceRegion.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/DiscordVoiceRegion.name.<get-name>|<get-name>(){}[0]
    final val optimal // dev.kord.common.entity/DiscordVoiceRegion.optimal|{}optimal[0]
        final fun <get-optimal>(): kotlin/Boolean // dev.kord.common.entity/DiscordVoiceRegion.optimal.<get-optimal>|<get-optimal>(){}[0]

    final fun component1(): kotlin/String // dev.kord.common.entity/DiscordVoiceRegion.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.common.entity/DiscordVoiceRegion.component2|component2(){}[0]
    final fun component3(): kotlin/Boolean // dev.kord.common.entity/DiscordVoiceRegion.component3|component3(){}[0]
    final fun component4(): kotlin/Boolean // dev.kord.common.entity/DiscordVoiceRegion.component4|component4(){}[0]
    final fun component5(): kotlin/Boolean // dev.kord.common.entity/DiscordVoiceRegion.component5|component5(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ...): dev.kord.common.entity/DiscordVoiceRegion // dev.kord.common.entity/DiscordVoiceRegion.copy|copy(kotlin.String;kotlin.String;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordVoiceRegion.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordVoiceRegion.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordVoiceRegion.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordVoiceRegion> { // dev.kord.common.entity/DiscordVoiceRegion.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordVoiceRegion.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordVoiceRegion.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordVoiceRegion.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordVoiceRegion // dev.kord.common.entity/DiscordVoiceRegion.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordVoiceRegion) // dev.kord.common.entity/DiscordVoiceRegion.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordVoiceRegion){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordVoiceRegion.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordVoiceRegion> // dev.kord.common.entity/DiscordVoiceRegion.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordVoiceServerUpdateData { // dev.kord.common.entity/DiscordVoiceServerUpdateData|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity/Snowflake, kotlin/String?) // dev.kord.common.entity/DiscordVoiceServerUpdateData.<init>|<init>(kotlin.String;dev.kord.common.entity.Snowflake;kotlin.String?){}[0]

    final val endpoint // dev.kord.common.entity/DiscordVoiceServerUpdateData.endpoint|{}endpoint[0]
        final fun <get-endpoint>(): kotlin/String? // dev.kord.common.entity/DiscordVoiceServerUpdateData.endpoint.<get-endpoint>|<get-endpoint>(){}[0]
    final val guildId // dev.kord.common.entity/DiscordVoiceServerUpdateData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordVoiceServerUpdateData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val token // dev.kord.common.entity/DiscordVoiceServerUpdateData.token|{}token[0]
        final fun <get-token>(): kotlin/String // dev.kord.common.entity/DiscordVoiceServerUpdateData.token.<get-token>|<get-token>(){}[0]

    final fun component1(): kotlin/String // dev.kord.common.entity/DiscordVoiceServerUpdateData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordVoiceServerUpdateData.component2|component2(){}[0]
    final fun component3(): kotlin/String? // dev.kord.common.entity/DiscordVoiceServerUpdateData.component3|component3(){}[0]
    final fun copy(kotlin/String = ..., dev.kord.common.entity/Snowflake = ..., kotlin/String? = ...): dev.kord.common.entity/DiscordVoiceServerUpdateData // dev.kord.common.entity/DiscordVoiceServerUpdateData.copy|copy(kotlin.String;dev.kord.common.entity.Snowflake;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordVoiceServerUpdateData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordVoiceServerUpdateData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordVoiceServerUpdateData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordVoiceServerUpdateData> { // dev.kord.common.entity/DiscordVoiceServerUpdateData.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordVoiceServerUpdateData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordVoiceServerUpdateData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordVoiceServerUpdateData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordVoiceServerUpdateData // dev.kord.common.entity/DiscordVoiceServerUpdateData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordVoiceServerUpdateData) // dev.kord.common.entity/DiscordVoiceServerUpdateData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordVoiceServerUpdateData){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordVoiceServerUpdateData.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordVoiceServerUpdateData> // dev.kord.common.entity/DiscordVoiceServerUpdateData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordVoiceState { // dev.kord.common.entity/DiscordVoiceState|null[0]
    constructor <init>(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity/Snowflake?, dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> = ..., kotlin/String, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, dev.kord.common.entity.optional/OptionalBoolean = ..., kotlin/Boolean, kotlinx.datetime/Instant?) // dev.kord.common.entity/DiscordVoiceState.<init>|<init>(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordGuildMember>;kotlin.String;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;dev.kord.common.entity.optional.OptionalBoolean;kotlin.Boolean;kotlinx.datetime.Instant?){}[0]

    final val channelId // dev.kord.common.entity/DiscordVoiceState.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordVoiceState.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val deaf // dev.kord.common.entity/DiscordVoiceState.deaf|{}deaf[0]
        final fun <get-deaf>(): kotlin/Boolean // dev.kord.common.entity/DiscordVoiceState.deaf.<get-deaf>|<get-deaf>(){}[0]
    final val guildId // dev.kord.common.entity/DiscordVoiceState.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordVoiceState.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val member // dev.kord.common.entity/DiscordVoiceState.member|{}member[0]
        final fun <get-member>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> // dev.kord.common.entity/DiscordVoiceState.member.<get-member>|<get-member>(){}[0]
    final val mute // dev.kord.common.entity/DiscordVoiceState.mute|{}mute[0]
        final fun <get-mute>(): kotlin/Boolean // dev.kord.common.entity/DiscordVoiceState.mute.<get-mute>|<get-mute>(){}[0]
    final val requestToSpeakTimestamp // dev.kord.common.entity/DiscordVoiceState.requestToSpeakTimestamp|{}requestToSpeakTimestamp[0]
        final fun <get-requestToSpeakTimestamp>(): kotlinx.datetime/Instant? // dev.kord.common.entity/DiscordVoiceState.requestToSpeakTimestamp.<get-requestToSpeakTimestamp>|<get-requestToSpeakTimestamp>(){}[0]
    final val selfDeaf // dev.kord.common.entity/DiscordVoiceState.selfDeaf|{}selfDeaf[0]
        final fun <get-selfDeaf>(): kotlin/Boolean // dev.kord.common.entity/DiscordVoiceState.selfDeaf.<get-selfDeaf>|<get-selfDeaf>(){}[0]
    final val selfMute // dev.kord.common.entity/DiscordVoiceState.selfMute|{}selfMute[0]
        final fun <get-selfMute>(): kotlin/Boolean // dev.kord.common.entity/DiscordVoiceState.selfMute.<get-selfMute>|<get-selfMute>(){}[0]
    final val selfStream // dev.kord.common.entity/DiscordVoiceState.selfStream|{}selfStream[0]
        final fun <get-selfStream>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordVoiceState.selfStream.<get-selfStream>|<get-selfStream>(){}[0]
    final val selfVideo // dev.kord.common.entity/DiscordVoiceState.selfVideo|{}selfVideo[0]
        final fun <get-selfVideo>(): kotlin/Boolean // dev.kord.common.entity/DiscordVoiceState.selfVideo.<get-selfVideo>|<get-selfVideo>(){}[0]
    final val sessionId // dev.kord.common.entity/DiscordVoiceState.sessionId|{}sessionId[0]
        final fun <get-sessionId>(): kotlin/String // dev.kord.common.entity/DiscordVoiceState.sessionId.<get-sessionId>|<get-sessionId>(){}[0]
    final val suppress // dev.kord.common.entity/DiscordVoiceState.suppress|{}suppress[0]
        final fun <get-suppress>(): kotlin/Boolean // dev.kord.common.entity/DiscordVoiceState.suppress.<get-suppress>|<get-suppress>(){}[0]
    final val userId // dev.kord.common.entity/DiscordVoiceState.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordVoiceState.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordVoiceState.component1|component1(){}[0]
    final fun component10(): kotlin/Boolean // dev.kord.common.entity/DiscordVoiceState.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordVoiceState.component11|component11(){}[0]
    final fun component12(): kotlin/Boolean // dev.kord.common.entity/DiscordVoiceState.component12|component12(){}[0]
    final fun component13(): kotlinx.datetime/Instant? // dev.kord.common.entity/DiscordVoiceState.component13|component13(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordVoiceState.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordVoiceState.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> // dev.kord.common.entity/DiscordVoiceState.component4|component4(){}[0]
    final fun component5(): kotlin/String // dev.kord.common.entity/DiscordVoiceState.component5|component5(){}[0]
    final fun component6(): kotlin/Boolean // dev.kord.common.entity/DiscordVoiceState.component6|component6(){}[0]
    final fun component7(): kotlin/Boolean // dev.kord.common.entity/DiscordVoiceState.component7|component7(){}[0]
    final fun component8(): kotlin/Boolean // dev.kord.common.entity/DiscordVoiceState.component8|component8(){}[0]
    final fun component9(): kotlin/Boolean // dev.kord.common.entity/DiscordVoiceState.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity/Snowflake? = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> = ..., kotlin/String = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ..., kotlin/Boolean = ..., kotlinx.datetime/Instant? = ...): dev.kord.common.entity/DiscordVoiceState // dev.kord.common.entity/DiscordVoiceState.copy|copy(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.Snowflake?;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordGuildMember>;kotlin.String;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;dev.kord.common.entity.optional.OptionalBoolean;kotlin.Boolean;kotlinx.datetime.Instant?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordVoiceState.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordVoiceState.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordVoiceState.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordVoiceState> { // dev.kord.common.entity/DiscordVoiceState.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordVoiceState.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordVoiceState.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordVoiceState.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordVoiceState // dev.kord.common.entity/DiscordVoiceState.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordVoiceState) // dev.kord.common.entity/DiscordVoiceState.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordVoiceState){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordVoiceState.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordVoiceState.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordVoiceState> // dev.kord.common.entity/DiscordVoiceState.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordWebhook { // dev.kord.common.entity/DiscordWebhook|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/WebhookType, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., kotlin/String?, kotlin/String?, dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity/Snowflake?) // dev.kord.common.entity/DiscordWebhook.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.WebhookType;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;kotlin.String?;kotlin.String?;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.Snowflake?){}[0]

    final val applicationId // dev.kord.common.entity/DiscordWebhook.applicationId|{}applicationId[0]
        final fun <get-applicationId>(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordWebhook.applicationId.<get-applicationId>|<get-applicationId>(){}[0]
    final val avatar // dev.kord.common.entity/DiscordWebhook.avatar|{}avatar[0]
        final fun <get-avatar>(): kotlin/String? // dev.kord.common.entity/DiscordWebhook.avatar.<get-avatar>|<get-avatar>(){}[0]
    final val channelId // dev.kord.common.entity/DiscordWebhook.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordWebhook.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val guildId // dev.kord.common.entity/DiscordWebhook.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordWebhook.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.common.entity/DiscordWebhook.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordWebhook.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.common.entity/DiscordWebhook.name|{}name[0]
        final fun <get-name>(): kotlin/String? // dev.kord.common.entity/DiscordWebhook.name.<get-name>|<get-name>(){}[0]
    final val token // dev.kord.common.entity/DiscordWebhook.token|{}token[0]
        final fun <get-token>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordWebhook.token.<get-token>|<get-token>(){}[0]
    final val type // dev.kord.common.entity/DiscordWebhook.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/WebhookType // dev.kord.common.entity/DiscordWebhook.type.<get-type>|<get-type>(){}[0]
    final val user // dev.kord.common.entity/DiscordWebhook.user|{}user[0]
        final fun <get-user>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordWebhook.user.<get-user>|<get-user>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordWebhook.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/WebhookType // dev.kord.common.entity/DiscordWebhook.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/DiscordWebhook.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordWebhook.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/DiscordWebhook.component5|component5(){}[0]
    final fun component6(): kotlin/String? // dev.kord.common.entity/DiscordWebhook.component6|component6(){}[0]
    final fun component7(): kotlin/String? // dev.kord.common.entity/DiscordWebhook.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordWebhook.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordWebhook.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/WebhookType = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ..., kotlin/String? = ..., kotlin/String? = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity/Snowflake? = ...): dev.kord.common.entity/DiscordWebhook // dev.kord.common.entity/DiscordWebhook.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.WebhookType;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>;kotlin.String?;kotlin.String?;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.Snowflake?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordWebhook.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordWebhook.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordWebhook.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordWebhook> { // dev.kord.common.entity/DiscordWebhook.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordWebhook.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordWebhook.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordWebhook.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordWebhook // dev.kord.common.entity/DiscordWebhook.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordWebhook) // dev.kord.common.entity/DiscordWebhook.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordWebhook){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordWebhook.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordWebhook.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordWebhook> // dev.kord.common.entity/DiscordWebhook.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordWebhooksUpdateData { // dev.kord.common.entity/DiscordWebhooksUpdateData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake) // dev.kord.common.entity/DiscordWebhooksUpdateData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]

    final val channelId // dev.kord.common.entity/DiscordWebhooksUpdateData.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordWebhooksUpdateData.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val guildId // dev.kord.common.entity/DiscordWebhooksUpdateData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordWebhooksUpdateData.guildId.<get-guildId>|<get-guildId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordWebhooksUpdateData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordWebhooksUpdateData.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ...): dev.kord.common.entity/DiscordWebhooksUpdateData // dev.kord.common.entity/DiscordWebhooksUpdateData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordWebhooksUpdateData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordWebhooksUpdateData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordWebhooksUpdateData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordWebhooksUpdateData> { // dev.kord.common.entity/DiscordWebhooksUpdateData.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordWebhooksUpdateData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordWebhooksUpdateData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordWebhooksUpdateData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordWebhooksUpdateData // dev.kord.common.entity/DiscordWebhooksUpdateData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordWebhooksUpdateData) // dev.kord.common.entity/DiscordWebhooksUpdateData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordWebhooksUpdateData){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordWebhooksUpdateData.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordWebhooksUpdateData> // dev.kord.common.entity/DiscordWebhooksUpdateData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordWelcomeScreen { // dev.kord.common.entity/DiscordWelcomeScreen|null[0]
    constructor <init>(kotlin/String?, kotlin.collections/List<dev.kord.common.entity/DiscordWelcomeScreenChannel>) // dev.kord.common.entity/DiscordWelcomeScreen.<init>|<init>(kotlin.String?;kotlin.collections.List<dev.kord.common.entity.DiscordWelcomeScreenChannel>){}[0]

    final val description // dev.kord.common.entity/DiscordWelcomeScreen.description|{}description[0]
        final fun <get-description>(): kotlin/String? // dev.kord.common.entity/DiscordWelcomeScreen.description.<get-description>|<get-description>(){}[0]
    final val welcomeChannels // dev.kord.common.entity/DiscordWelcomeScreen.welcomeChannels|{}welcomeChannels[0]
        final fun <get-welcomeChannels>(): kotlin.collections/List<dev.kord.common.entity/DiscordWelcomeScreenChannel> // dev.kord.common.entity/DiscordWelcomeScreen.welcomeChannels.<get-welcomeChannels>|<get-welcomeChannels>(){}[0]

    final fun component1(): kotlin/String? // dev.kord.common.entity/DiscordWelcomeScreen.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<dev.kord.common.entity/DiscordWelcomeScreenChannel> // dev.kord.common.entity/DiscordWelcomeScreen.component2|component2(){}[0]
    final fun copy(kotlin/String? = ..., kotlin.collections/List<dev.kord.common.entity/DiscordWelcomeScreenChannel> = ...): dev.kord.common.entity/DiscordWelcomeScreen // dev.kord.common.entity/DiscordWelcomeScreen.copy|copy(kotlin.String?;kotlin.collections.List<dev.kord.common.entity.DiscordWelcomeScreenChannel>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordWelcomeScreen.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordWelcomeScreen.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordWelcomeScreen.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordWelcomeScreen> { // dev.kord.common.entity/DiscordWelcomeScreen.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordWelcomeScreen.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordWelcomeScreen.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordWelcomeScreen.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordWelcomeScreen // dev.kord.common.entity/DiscordWelcomeScreen.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordWelcomeScreen) // dev.kord.common.entity/DiscordWelcomeScreen.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordWelcomeScreen){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordWelcomeScreen.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/DiscordWelcomeScreen.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordWelcomeScreen> // dev.kord.common.entity/DiscordWelcomeScreen.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/DiscordWelcomeScreenChannel { // dev.kord.common.entity/DiscordWelcomeScreenChannel|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, dev.kord.common.entity/Snowflake?, kotlin/String?) // dev.kord.common.entity/DiscordWelcomeScreenChannel.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake?;kotlin.String?){}[0]

    final val channelId // dev.kord.common.entity/DiscordWelcomeScreenChannel.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordWelcomeScreenChannel.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val description // dev.kord.common.entity/DiscordWelcomeScreenChannel.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.common.entity/DiscordWelcomeScreenChannel.description.<get-description>|<get-description>(){}[0]
    final val emojiId // dev.kord.common.entity/DiscordWelcomeScreenChannel.emojiId|{}emojiId[0]
        final fun <get-emojiId>(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordWelcomeScreenChannel.emojiId.<get-emojiId>|<get-emojiId>(){}[0]
    final val emojiName // dev.kord.common.entity/DiscordWelcomeScreenChannel.emojiName|{}emojiName[0]
        final fun <get-emojiName>(): kotlin/String? // dev.kord.common.entity/DiscordWelcomeScreenChannel.emojiName.<get-emojiName>|<get-emojiName>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/DiscordWelcomeScreenChannel.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.common.entity/DiscordWelcomeScreenChannel.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/DiscordWelcomeScreenChannel.component3|component3(){}[0]
    final fun component4(): kotlin/String? // dev.kord.common.entity/DiscordWelcomeScreenChannel.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., dev.kord.common.entity/Snowflake? = ..., kotlin/String? = ...): dev.kord.common.entity/DiscordWelcomeScreenChannel // dev.kord.common.entity/DiscordWelcomeScreenChannel.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;dev.kord.common.entity.Snowflake?;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordWelcomeScreenChannel.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordWelcomeScreenChannel.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordWelcomeScreenChannel.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/DiscordWelcomeScreenChannel> { // dev.kord.common.entity/DiscordWelcomeScreenChannel.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/DiscordWelcomeScreenChannel.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/DiscordWelcomeScreenChannel.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/DiscordWelcomeScreenChannel.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/DiscordWelcomeScreenChannel // dev.kord.common.entity/DiscordWelcomeScreenChannel.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/DiscordWelcomeScreenChannel) // dev.kord.common.entity/DiscordWelcomeScreenChannel.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.DiscordWelcomeScreenChannel){}[0]
    }

    final object Companion { // dev.kord.common.entity/DiscordWelcomeScreenChannel.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordWelcomeScreenChannel> // dev.kord.common.entity/DiscordWelcomeScreenChannel.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/ForumTag { // dev.kord.common.entity/ForumTag|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Boolean, dev.kord.common.entity/Snowflake?, kotlin/String?) // dev.kord.common.entity/ForumTag.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Boolean;dev.kord.common.entity.Snowflake?;kotlin.String?){}[0]

    final val emojiId // dev.kord.common.entity/ForumTag.emojiId|{}emojiId[0]
        final fun <get-emojiId>(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/ForumTag.emojiId.<get-emojiId>|<get-emojiId>(){}[0]
    final val emojiName // dev.kord.common.entity/ForumTag.emojiName|{}emojiName[0]
        final fun <get-emojiName>(): kotlin/String? // dev.kord.common.entity/ForumTag.emojiName.<get-emojiName>|<get-emojiName>(){}[0]
    final val id // dev.kord.common.entity/ForumTag.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/ForumTag.id.<get-id>|<get-id>(){}[0]
    final val moderated // dev.kord.common.entity/ForumTag.moderated|{}moderated[0]
        final fun <get-moderated>(): kotlin/Boolean // dev.kord.common.entity/ForumTag.moderated.<get-moderated>|<get-moderated>(){}[0]
    final val name // dev.kord.common.entity/ForumTag.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/ForumTag.name.<get-name>|<get-name>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/ForumTag.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.common.entity/ForumTag.component2|component2(){}[0]
    final fun component3(): kotlin/Boolean // dev.kord.common.entity/ForumTag.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity/ForumTag.component4|component4(){}[0]
    final fun component5(): kotlin/String? // dev.kord.common.entity/ForumTag.component5|component5(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., kotlin/Boolean = ..., dev.kord.common.entity/Snowflake? = ..., kotlin/String? = ...): dev.kord.common.entity/ForumTag // dev.kord.common.entity/ForumTag.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Boolean;dev.kord.common.entity.Snowflake?;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/ForumTag.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/ForumTag.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/ForumTag.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/ForumTag> { // dev.kord.common.entity/ForumTag.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/ForumTag.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/ForumTag.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/ForumTag.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/ForumTag // dev.kord.common.entity/ForumTag.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/ForumTag) // dev.kord.common.entity/ForumTag.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.ForumTag){}[0]
    }

    final object Companion { // dev.kord.common.entity/ForumTag.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/ForumTag> // dev.kord.common.entity/ForumTag.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/GuildMemberFlags { // dev.kord.common.entity/GuildMemberFlags|null[0]
    final val code // dev.kord.common.entity/GuildMemberFlags.code|{}code[0]
        final fun <get-code>(): kotlin/Int // dev.kord.common.entity/GuildMemberFlags.code.<get-code>|<get-code>(){}[0]
    final val values // dev.kord.common.entity/GuildMemberFlags.values|{}values[0]
        final fun <get-values>(): kotlin.collections/Set<dev.kord.common.entity/GuildMemberFlag> // dev.kord.common.entity/GuildMemberFlags.values.<get-values>|<get-values>(){}[0]

    final fun contains(dev.kord.common.entity/GuildMemberFlag): kotlin/Boolean // dev.kord.common.entity/GuildMemberFlags.contains|contains(dev.kord.common.entity.GuildMemberFlag){}[0]
    final fun contains(dev.kord.common.entity/GuildMemberFlags): kotlin/Boolean // dev.kord.common.entity/GuildMemberFlags.contains|contains(dev.kord.common.entity.GuildMemberFlags){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/GuildMemberFlags.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/GuildMemberFlags.hashCode|hashCode(){}[0]
    final fun minus(dev.kord.common.entity/GuildMemberFlag): dev.kord.common.entity/GuildMemberFlags // dev.kord.common.entity/GuildMemberFlags.minus|minus(dev.kord.common.entity.GuildMemberFlag){}[0]
    final fun minus(dev.kord.common.entity/GuildMemberFlags): dev.kord.common.entity/GuildMemberFlags // dev.kord.common.entity/GuildMemberFlags.minus|minus(dev.kord.common.entity.GuildMemberFlags){}[0]
    final fun plus(dev.kord.common.entity/GuildMemberFlag): dev.kord.common.entity/GuildMemberFlags // dev.kord.common.entity/GuildMemberFlags.plus|plus(dev.kord.common.entity.GuildMemberFlag){}[0]
    final fun plus(dev.kord.common.entity/GuildMemberFlags): dev.kord.common.entity/GuildMemberFlags // dev.kord.common.entity/GuildMemberFlags.plus|plus(dev.kord.common.entity.GuildMemberFlags){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/GuildMemberFlags.toString|toString(){}[0]
    final inline fun copy(kotlin/Function1<dev.kord.common.entity/GuildMemberFlags.Builder, kotlin/Unit>): dev.kord.common.entity/GuildMemberFlags // dev.kord.common.entity/GuildMemberFlags.copy|copy(kotlin.Function1<dev.kord.common.entity.GuildMemberFlags.Builder,kotlin.Unit>){}[0]

    final class Builder { // dev.kord.common.entity/GuildMemberFlags.Builder|null[0]
        constructor <init>(kotlin/Int = ...) // dev.kord.common.entity/GuildMemberFlags.Builder.<init>|<init>(kotlin.Int){}[0]

        final fun (dev.kord.common.entity/GuildMemberFlag).unaryMinus() // dev.kord.common.entity/GuildMemberFlags.Builder.unaryMinus|unaryMinus@dev.kord.common.entity.GuildMemberFlag(){}[0]
        final fun (dev.kord.common.entity/GuildMemberFlag).unaryPlus() // dev.kord.common.entity/GuildMemberFlags.Builder.unaryPlus|unaryPlus@dev.kord.common.entity.GuildMemberFlag(){}[0]
        final fun (dev.kord.common.entity/GuildMemberFlags).unaryMinus() // dev.kord.common.entity/GuildMemberFlags.Builder.unaryMinus|unaryMinus@dev.kord.common.entity.GuildMemberFlags(){}[0]
        final fun (dev.kord.common.entity/GuildMemberFlags).unaryPlus() // dev.kord.common.entity/GuildMemberFlags.Builder.unaryPlus|unaryPlus@dev.kord.common.entity.GuildMemberFlags(){}[0]
        final fun build(): dev.kord.common.entity/GuildMemberFlags // dev.kord.common.entity/GuildMemberFlags.Builder.build|build(){}[0]
    }

    final object Companion { // dev.kord.common.entity/GuildMemberFlags.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/GuildMemberFlags> // dev.kord.common.entity/GuildMemberFlags.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/GuildScheduledEventEntityMetadata { // dev.kord.common.entity/GuildScheduledEventEntityMetadata|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin/String> = ...) // dev.kord.common.entity/GuildScheduledEventEntityMetadata.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]

    final val location // dev.kord.common.entity/GuildScheduledEventEntityMetadata.location|{}location[0]
        final fun <get-location>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/GuildScheduledEventEntityMetadata.location.<get-location>|<get-location>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/GuildScheduledEventEntityMetadata.component1|component1(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin/String> = ...): dev.kord.common.entity/GuildScheduledEventEntityMetadata // dev.kord.common.entity/GuildScheduledEventEntityMetadata.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/GuildScheduledEventEntityMetadata.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/GuildScheduledEventEntityMetadata.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/GuildScheduledEventEntityMetadata.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/GuildScheduledEventEntityMetadata> { // dev.kord.common.entity/GuildScheduledEventEntityMetadata.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/GuildScheduledEventEntityMetadata.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/GuildScheduledEventEntityMetadata.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/GuildScheduledEventEntityMetadata.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/GuildScheduledEventEntityMetadata // dev.kord.common.entity/GuildScheduledEventEntityMetadata.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/GuildScheduledEventEntityMetadata) // dev.kord.common.entity/GuildScheduledEventEntityMetadata.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.GuildScheduledEventEntityMetadata){}[0]
    }

    final object Companion { // dev.kord.common.entity/GuildScheduledEventEntityMetadata.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/GuildScheduledEventEntityMetadata.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/GuildScheduledEventEntityMetadata> // dev.kord.common.entity/GuildScheduledEventEntityMetadata.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/InstallParams { // dev.kord.common.entity/InstallParams|null[0]
    constructor <init>(kotlin.collections/List<kotlin/String>, dev.kord.common.entity/Permissions) // dev.kord.common.entity/InstallParams.<init>|<init>(kotlin.collections.List<kotlin.String>;dev.kord.common.entity.Permissions){}[0]

    final val permissions // dev.kord.common.entity/InstallParams.permissions|{}permissions[0]
        final fun <get-permissions>(): dev.kord.common.entity/Permissions // dev.kord.common.entity/InstallParams.permissions.<get-permissions>|<get-permissions>(){}[0]
    final val scopes // dev.kord.common.entity/InstallParams.scopes|{}scopes[0]
        final fun <get-scopes>(): kotlin.collections/List<kotlin/String> // dev.kord.common.entity/InstallParams.scopes.<get-scopes>|<get-scopes>(){}[0]

    final fun component1(): kotlin.collections/List<kotlin/String> // dev.kord.common.entity/InstallParams.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Permissions // dev.kord.common.entity/InstallParams.component2|component2(){}[0]
    final fun copy(kotlin.collections/List<kotlin/String> = ..., dev.kord.common.entity/Permissions = ...): dev.kord.common.entity/InstallParams // dev.kord.common.entity/InstallParams.copy|copy(kotlin.collections.List<kotlin.String>;dev.kord.common.entity.Permissions){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/InstallParams.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/InstallParams.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/InstallParams.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/InstallParams> { // dev.kord.common.entity/InstallParams.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/InstallParams.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/InstallParams.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/InstallParams.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/InstallParams // dev.kord.common.entity/InstallParams.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/InstallParams) // dev.kord.common.entity/InstallParams.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.InstallParams){}[0]
    }

    final object Companion { // dev.kord.common.entity/InstallParams.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/InstallParams.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/InstallParams> // dev.kord.common.entity/InstallParams.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/IntegrationApplication { // dev.kord.common.entity/IntegrationApplication|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/String?, kotlin/String, dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ...) // dev.kord.common.entity/IntegrationApplication.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String?;kotlin.String;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>){}[0]

    final val bot // dev.kord.common.entity/IntegrationApplication.bot|{}bot[0]
        final fun <get-bot>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/IntegrationApplication.bot.<get-bot>|<get-bot>(){}[0]
    final val description // dev.kord.common.entity/IntegrationApplication.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.common.entity/IntegrationApplication.description.<get-description>|<get-description>(){}[0]
    final val icon // dev.kord.common.entity/IntegrationApplication.icon|{}icon[0]
        final fun <get-icon>(): kotlin/String? // dev.kord.common.entity/IntegrationApplication.icon.<get-icon>|<get-icon>(){}[0]
    final val id // dev.kord.common.entity/IntegrationApplication.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/IntegrationApplication.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.common.entity/IntegrationApplication.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/IntegrationApplication.name.<get-name>|<get-name>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/IntegrationApplication.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.common.entity/IntegrationApplication.component2|component2(){}[0]
    final fun component3(): kotlin/String? // dev.kord.common.entity/IntegrationApplication.component3|component3(){}[0]
    final fun component4(): kotlin/String // dev.kord.common.entity/IntegrationApplication.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> // dev.kord.common.entity/IntegrationApplication.component5|component5(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., kotlin/String? = ..., kotlin/String = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordUser> = ...): dev.kord.common.entity/IntegrationApplication // dev.kord.common.entity/IntegrationApplication.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.String?;kotlin.String;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordUser>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/IntegrationApplication.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/IntegrationApplication.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/IntegrationApplication.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/IntegrationApplication> { // dev.kord.common.entity/IntegrationApplication.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/IntegrationApplication.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/IntegrationApplication.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/IntegrationApplication.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/IntegrationApplication // dev.kord.common.entity/IntegrationApplication.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/IntegrationApplication) // dev.kord.common.entity/IntegrationApplication.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.IntegrationApplication){}[0]
    }

    final object Companion { // dev.kord.common.entity/IntegrationApplication.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/IntegrationApplication.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/IntegrationApplication> // dev.kord.common.entity/IntegrationApplication.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/InteractionCallbackData { // dev.kord.common.entity/InteractionCallbackData|null[0]
    constructor <init>(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationCommandType> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ResolvedObjects> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Option>> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ComponentType> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> = ...) // dev.kord.common.entity/InteractionCallbackData.<init>|<init>(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ApplicationCommandType>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ResolvedObjects>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Option>>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ComponentType>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordComponent>>){}[0]

    final val componentType // dev.kord.common.entity/InteractionCallbackData.componentType|{}componentType[0]
        final fun <get-componentType>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ComponentType> // dev.kord.common.entity/InteractionCallbackData.componentType.<get-componentType>|<get-componentType>(){}[0]
    final val components // dev.kord.common.entity/InteractionCallbackData.components|{}components[0]
        final fun <get-components>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> // dev.kord.common.entity/InteractionCallbackData.components.<get-components>|<get-components>(){}[0]
    final val customId // dev.kord.common.entity/InteractionCallbackData.customId|{}customId[0]
        final fun <get-customId>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/InteractionCallbackData.customId.<get-customId>|<get-customId>(){}[0]
    final val guildId // dev.kord.common.entity/InteractionCallbackData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/InteractionCallbackData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val id // dev.kord.common.entity/InteractionCallbackData.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/InteractionCallbackData.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.common.entity/InteractionCallbackData.name|{}name[0]
        final fun <get-name>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/InteractionCallbackData.name.<get-name>|<get-name>(){}[0]
    final val options // dev.kord.common.entity/InteractionCallbackData.options|{}options[0]
        final fun <get-options>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Option>> // dev.kord.common.entity/InteractionCallbackData.options.<get-options>|<get-options>(){}[0]
    final val resolved // dev.kord.common.entity/InteractionCallbackData.resolved|{}resolved[0]
        final fun <get-resolved>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ResolvedObjects> // dev.kord.common.entity/InteractionCallbackData.resolved.<get-resolved>|<get-resolved>(){}[0]
    final val targetId // dev.kord.common.entity/InteractionCallbackData.targetId|{}targetId[0]
        final fun <get-targetId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/InteractionCallbackData.targetId.<get-targetId>|<get-targetId>(){}[0]
    final val type // dev.kord.common.entity/InteractionCallbackData.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationCommandType> // dev.kord.common.entity/InteractionCallbackData.type.<get-type>|<get-type>(){}[0]
    final val values // dev.kord.common.entity/InteractionCallbackData.values|{}values[0]
        final fun <get-values>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.common.entity/InteractionCallbackData.values.<get-values>|<get-values>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/InteractionCallbackData.component1|component1(){}[0]
    final fun component10(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> // dev.kord.common.entity/InteractionCallbackData.component10|component10(){}[0]
    final fun component11(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> // dev.kord.common.entity/InteractionCallbackData.component11|component11(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationCommandType> // dev.kord.common.entity/InteractionCallbackData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/InteractionCallbackData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/InteractionCallbackData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ResolvedObjects> // dev.kord.common.entity/InteractionCallbackData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Option>> // dev.kord.common.entity/InteractionCallbackData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/InteractionCallbackData.component7|component7(){}[0]
    final fun component8(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/InteractionCallbackData.component8|component8(){}[0]
    final fun component9(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ComponentType> // dev.kord.common.entity/InteractionCallbackData.component9|component9(){}[0]
    final fun copy(dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ApplicationCommandType> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ResolvedObjects> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/Option>> = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/ComponentType> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<kotlin/String>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> = ...): dev.kord.common.entity/InteractionCallbackData // dev.kord.common.entity/InteractionCallbackData.copy|copy(dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ApplicationCommandType>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ResolvedObjects>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.Option>>;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.ComponentType>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<kotlin.String>>;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.DiscordComponent>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/InteractionCallbackData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/InteractionCallbackData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/InteractionCallbackData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/InteractionCallbackData> { // dev.kord.common.entity/InteractionCallbackData.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/InteractionCallbackData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/InteractionCallbackData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/InteractionCallbackData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/InteractionCallbackData // dev.kord.common.entity/InteractionCallbackData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/InteractionCallbackData) // dev.kord.common.entity/InteractionCallbackData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.InteractionCallbackData){}[0]
    }

    final object Companion { // dev.kord.common.entity/InteractionCallbackData.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/InteractionCallbackData.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/InteractionCallbackData> // dev.kord.common.entity/InteractionCallbackData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/MessageActivity { // dev.kord.common.entity/MessageActivity|null[0]
    constructor <init>(dev.kord.common.entity/MessageActivityType, dev.kord.common.entity.optional/Optional<kotlin/String> = ...) // dev.kord.common.entity/MessageActivity.<init>|<init>(dev.kord.common.entity.MessageActivityType;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]

    final val partyId // dev.kord.common.entity/MessageActivity.partyId|{}partyId[0]
        final fun <get-partyId>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/MessageActivity.partyId.<get-partyId>|<get-partyId>(){}[0]
    final val type // dev.kord.common.entity/MessageActivity.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/MessageActivityType // dev.kord.common.entity/MessageActivity.type.<get-type>|<get-type>(){}[0]

    final fun component1(): dev.kord.common.entity/MessageActivityType // dev.kord.common.entity/MessageActivity.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/MessageActivity.component2|component2(){}[0]
    final fun copy(dev.kord.common.entity/MessageActivityType = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ...): dev.kord.common.entity/MessageActivity // dev.kord.common.entity/MessageActivity.copy|copy(dev.kord.common.entity.MessageActivityType;dev.kord.common.entity.optional.Optional<kotlin.String>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/MessageActivity.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/MessageActivity.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/MessageActivity.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/MessageActivity> { // dev.kord.common.entity/MessageActivity.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/MessageActivity.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/MessageActivity.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/MessageActivity.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/MessageActivity // dev.kord.common.entity/MessageActivity.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/MessageActivity) // dev.kord.common.entity/MessageActivity.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.MessageActivity){}[0]
    }

    final object Companion { // dev.kord.common.entity/MessageActivity.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/MessageActivity.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/MessageActivity> // dev.kord.common.entity/MessageActivity.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/MessageApplication { // dev.kord.common.entity/MessageApplication|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/Optional<kotlin/String> = ..., kotlin/String, kotlin/String? = ..., kotlin/String) // dev.kord.common.entity/MessageApplication.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;kotlin.String;kotlin.String?;kotlin.String){}[0]

    final val coverImage // dev.kord.common.entity/MessageApplication.coverImage|{}coverImage[0]
        final fun <get-coverImage>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/MessageApplication.coverImage.<get-coverImage>|<get-coverImage>(){}[0]
    final val description // dev.kord.common.entity/MessageApplication.description|{}description[0]
        final fun <get-description>(): kotlin/String // dev.kord.common.entity/MessageApplication.description.<get-description>|<get-description>(){}[0]
    final val icon // dev.kord.common.entity/MessageApplication.icon|{}icon[0]
        final fun <get-icon>(): kotlin/String? // dev.kord.common.entity/MessageApplication.icon.<get-icon>|<get-icon>(){}[0]
    final val id // dev.kord.common.entity/MessageApplication.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/MessageApplication.id.<get-id>|<get-id>(){}[0]
    final val name // dev.kord.common.entity/MessageApplication.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/MessageApplication.name.<get-name>|<get-name>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/MessageApplication.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/MessageApplication.component2|component2(){}[0]
    final fun component3(): kotlin/String // dev.kord.common.entity/MessageApplication.component3|component3(){}[0]
    final fun component4(): kotlin/String? // dev.kord.common.entity/MessageApplication.component4|component4(){}[0]
    final fun component5(): kotlin/String // dev.kord.common.entity/MessageApplication.component5|component5(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/Optional<kotlin/String> = ..., kotlin/String = ..., kotlin/String? = ..., kotlin/String = ...): dev.kord.common.entity/MessageApplication // dev.kord.common.entity/MessageApplication.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.Optional<kotlin.String>;kotlin.String;kotlin.String?;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/MessageApplication.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/MessageApplication.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/MessageApplication.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/MessageApplication> { // dev.kord.common.entity/MessageApplication.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/MessageApplication.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/MessageApplication.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/MessageApplication.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/MessageApplication // dev.kord.common.entity/MessageApplication.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/MessageApplication) // dev.kord.common.entity/MessageApplication.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.MessageApplication){}[0]
    }

    final object Companion { // dev.kord.common.entity/MessageApplication.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/MessageApplication.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/MessageApplication> // dev.kord.common.entity/MessageApplication.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/MessageFlags { // dev.kord.common.entity/MessageFlags|null[0]
    final val code // dev.kord.common.entity/MessageFlags.code|{}code[0]
        final fun <get-code>(): kotlin/Int // dev.kord.common.entity/MessageFlags.code.<get-code>|<get-code>(){}[0]
    final val values // dev.kord.common.entity/MessageFlags.values|{}values[0]
        final fun <get-values>(): kotlin.collections/Set<dev.kord.common.entity/MessageFlag> // dev.kord.common.entity/MessageFlags.values.<get-values>|<get-values>(){}[0]

    final fun contains(dev.kord.common.entity/MessageFlag): kotlin/Boolean // dev.kord.common.entity/MessageFlags.contains|contains(dev.kord.common.entity.MessageFlag){}[0]
    final fun contains(dev.kord.common.entity/MessageFlags): kotlin/Boolean // dev.kord.common.entity/MessageFlags.contains|contains(dev.kord.common.entity.MessageFlags){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/MessageFlags.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/MessageFlags.hashCode|hashCode(){}[0]
    final fun minus(dev.kord.common.entity/MessageFlag): dev.kord.common.entity/MessageFlags // dev.kord.common.entity/MessageFlags.minus|minus(dev.kord.common.entity.MessageFlag){}[0]
    final fun minus(dev.kord.common.entity/MessageFlags): dev.kord.common.entity/MessageFlags // dev.kord.common.entity/MessageFlags.minus|minus(dev.kord.common.entity.MessageFlags){}[0]
    final fun plus(dev.kord.common.entity/MessageFlag): dev.kord.common.entity/MessageFlags // dev.kord.common.entity/MessageFlags.plus|plus(dev.kord.common.entity.MessageFlag){}[0]
    final fun plus(dev.kord.common.entity/MessageFlags): dev.kord.common.entity/MessageFlags // dev.kord.common.entity/MessageFlags.plus|plus(dev.kord.common.entity.MessageFlags){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/MessageFlags.toString|toString(){}[0]
    final inline fun copy(kotlin/Function1<dev.kord.common.entity/MessageFlags.Builder, kotlin/Unit>): dev.kord.common.entity/MessageFlags // dev.kord.common.entity/MessageFlags.copy|copy(kotlin.Function1<dev.kord.common.entity.MessageFlags.Builder,kotlin.Unit>){}[0]

    final class Builder { // dev.kord.common.entity/MessageFlags.Builder|null[0]
        constructor <init>(kotlin/Int = ...) // dev.kord.common.entity/MessageFlags.Builder.<init>|<init>(kotlin.Int){}[0]

        final fun (dev.kord.common.entity/MessageFlag).unaryMinus() // dev.kord.common.entity/MessageFlags.Builder.unaryMinus|unaryMinus@dev.kord.common.entity.MessageFlag(){}[0]
        final fun (dev.kord.common.entity/MessageFlag).unaryPlus() // dev.kord.common.entity/MessageFlags.Builder.unaryPlus|unaryPlus@dev.kord.common.entity.MessageFlag(){}[0]
        final fun (dev.kord.common.entity/MessageFlags).unaryMinus() // dev.kord.common.entity/MessageFlags.Builder.unaryMinus|unaryMinus@dev.kord.common.entity.MessageFlags(){}[0]
        final fun (dev.kord.common.entity/MessageFlags).unaryPlus() // dev.kord.common.entity/MessageFlags.Builder.unaryPlus|unaryPlus@dev.kord.common.entity.MessageFlags(){}[0]
        final fun build(): dev.kord.common.entity/MessageFlags // dev.kord.common.entity/MessageFlags.Builder.build|build(){}[0]
    }

    final object Companion { // dev.kord.common.entity/MessageFlags.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/MessageFlags> // dev.kord.common.entity/MessageFlags.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/MessageReactionAddData { // dev.kord.common.entity/MessageReactionAddData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> = ..., dev.kord.common.entity/DiscordPartialEmoji, dev.kord.common.entity.optional/OptionalSnowflake = ...) // dev.kord.common.entity/MessageReactionAddData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordGuildMember>;dev.kord.common.entity.DiscordPartialEmoji;dev.kord.common.entity.optional.OptionalSnowflake){}[0]

    final val channelId // dev.kord.common.entity/MessageReactionAddData.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/MessageReactionAddData.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val emoji // dev.kord.common.entity/MessageReactionAddData.emoji|{}emoji[0]
        final fun <get-emoji>(): dev.kord.common.entity/DiscordPartialEmoji // dev.kord.common.entity/MessageReactionAddData.emoji.<get-emoji>|<get-emoji>(){}[0]
    final val guildId // dev.kord.common.entity/MessageReactionAddData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/MessageReactionAddData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val member // dev.kord.common.entity/MessageReactionAddData.member|{}member[0]
        final fun <get-member>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> // dev.kord.common.entity/MessageReactionAddData.member.<get-member>|<get-member>(){}[0]
    final val messageAuthorId // dev.kord.common.entity/MessageReactionAddData.messageAuthorId|{}messageAuthorId[0]
        final fun <get-messageAuthorId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/MessageReactionAddData.messageAuthorId.<get-messageAuthorId>|<get-messageAuthorId>(){}[0]
    final val messageId // dev.kord.common.entity/MessageReactionAddData.messageId|{}messageId[0]
        final fun <get-messageId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/MessageReactionAddData.messageId.<get-messageId>|<get-messageId>(){}[0]
    final val userId // dev.kord.common.entity/MessageReactionAddData.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/MessageReactionAddData.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/MessageReactionAddData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/MessageReactionAddData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/MessageReactionAddData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/MessageReactionAddData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> // dev.kord.common.entity/MessageReactionAddData.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity/DiscordPartialEmoji // dev.kord.common.entity/MessageReactionAddData.component6|component6(){}[0]
    final fun component7(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/MessageReactionAddData.component7|component7(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordGuildMember> = ..., dev.kord.common.entity/DiscordPartialEmoji = ..., dev.kord.common.entity.optional/OptionalSnowflake = ...): dev.kord.common.entity/MessageReactionAddData // dev.kord.common.entity/MessageReactionAddData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.optional.Optional<dev.kord.common.entity.DiscordGuildMember>;dev.kord.common.entity.DiscordPartialEmoji;dev.kord.common.entity.optional.OptionalSnowflake){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/MessageReactionAddData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/MessageReactionAddData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/MessageReactionAddData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/MessageReactionAddData> { // dev.kord.common.entity/MessageReactionAddData.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/MessageReactionAddData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/MessageReactionAddData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/MessageReactionAddData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/MessageReactionAddData // dev.kord.common.entity/MessageReactionAddData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/MessageReactionAddData) // dev.kord.common.entity/MessageReactionAddData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.MessageReactionAddData){}[0]
    }

    final object Companion { // dev.kord.common.entity/MessageReactionAddData.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/MessageReactionAddData.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/MessageReactionAddData> // dev.kord.common.entity/MessageReactionAddData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/MessageReactionRemoveData { // dev.kord.common.entity/MessageReactionRemoveData|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity/DiscordPartialEmoji) // dev.kord.common.entity/MessageReactionRemoveData.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.DiscordPartialEmoji){}[0]

    final val channelId // dev.kord.common.entity/MessageReactionRemoveData.channelId|{}channelId[0]
        final fun <get-channelId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/MessageReactionRemoveData.channelId.<get-channelId>|<get-channelId>(){}[0]
    final val emoji // dev.kord.common.entity/MessageReactionRemoveData.emoji|{}emoji[0]
        final fun <get-emoji>(): dev.kord.common.entity/DiscordPartialEmoji // dev.kord.common.entity/MessageReactionRemoveData.emoji.<get-emoji>|<get-emoji>(){}[0]
    final val guildId // dev.kord.common.entity/MessageReactionRemoveData.guildId|{}guildId[0]
        final fun <get-guildId>(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/MessageReactionRemoveData.guildId.<get-guildId>|<get-guildId>(){}[0]
    final val messageId // dev.kord.common.entity/MessageReactionRemoveData.messageId|{}messageId[0]
        final fun <get-messageId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/MessageReactionRemoveData.messageId.<get-messageId>|<get-messageId>(){}[0]
    final val userId // dev.kord.common.entity/MessageReactionRemoveData.userId|{}userId[0]
        final fun <get-userId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/MessageReactionRemoveData.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/MessageReactionRemoveData.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/MessageReactionRemoveData.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/MessageReactionRemoveData.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity/MessageReactionRemoveData.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity/DiscordPartialEmoji // dev.kord.common.entity/MessageReactionRemoveData.component5|component5(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalSnowflake = ..., dev.kord.common.entity/DiscordPartialEmoji = ...): dev.kord.common.entity/MessageReactionRemoveData // dev.kord.common.entity/MessageReactionRemoveData.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalSnowflake;dev.kord.common.entity.DiscordPartialEmoji){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/MessageReactionRemoveData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/MessageReactionRemoveData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/MessageReactionRemoveData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/MessageReactionRemoveData> { // dev.kord.common.entity/MessageReactionRemoveData.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/MessageReactionRemoveData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/MessageReactionRemoveData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/MessageReactionRemoveData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/MessageReactionRemoveData // dev.kord.common.entity/MessageReactionRemoveData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/MessageReactionRemoveData) // dev.kord.common.entity/MessageReactionRemoveData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.MessageReactionRemoveData){}[0]
    }

    final object Companion { // dev.kord.common.entity/MessageReactionRemoveData.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/MessageReactionRemoveData> // dev.kord.common.entity/MessageReactionRemoveData.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/Overwrite { // dev.kord.common.entity/Overwrite|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, dev.kord.common.entity/OverwriteType, dev.kord.common.entity/Permissions, dev.kord.common.entity/Permissions) // dev.kord.common.entity/Overwrite.<init>|<init>(dev.kord.common.entity.Snowflake;dev.kord.common.entity.OverwriteType;dev.kord.common.entity.Permissions;dev.kord.common.entity.Permissions){}[0]

    final val allow // dev.kord.common.entity/Overwrite.allow|{}allow[0]
        final fun <get-allow>(): dev.kord.common.entity/Permissions // dev.kord.common.entity/Overwrite.allow.<get-allow>|<get-allow>(){}[0]
    final val deny // dev.kord.common.entity/Overwrite.deny|{}deny[0]
        final fun <get-deny>(): dev.kord.common.entity/Permissions // dev.kord.common.entity/Overwrite.deny.<get-deny>|<get-deny>(){}[0]
    final val id // dev.kord.common.entity/Overwrite.id|{}id[0]
        final fun <get-id>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/Overwrite.id.<get-id>|<get-id>(){}[0]
    final val type // dev.kord.common.entity/Overwrite.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/OverwriteType // dev.kord.common.entity/Overwrite.type.<get-type>|<get-type>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/Overwrite.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity/OverwriteType // dev.kord.common.entity/Overwrite.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/Permissions // dev.kord.common.entity/Overwrite.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity/Permissions // dev.kord.common.entity/Overwrite.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity/OverwriteType = ..., dev.kord.common.entity/Permissions = ..., dev.kord.common.entity/Permissions = ...): dev.kord.common.entity/Overwrite // dev.kord.common.entity/Overwrite.copy|copy(dev.kord.common.entity.Snowflake;dev.kord.common.entity.OverwriteType;dev.kord.common.entity.Permissions;dev.kord.common.entity.Permissions){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/Overwrite.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/Overwrite.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/Overwrite.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/Overwrite> { // dev.kord.common.entity/Overwrite.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/Overwrite.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/Overwrite.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/Overwrite.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/Overwrite // dev.kord.common.entity/Overwrite.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/Overwrite) // dev.kord.common.entity/Overwrite.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.Overwrite){}[0]
    }

    final object Companion { // dev.kord.common.entity/Overwrite.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/Overwrite> // dev.kord.common.entity/Overwrite.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/Permissions { // dev.kord.common.entity/Permissions|null[0]
    final val code // dev.kord.common.entity/Permissions.code|{}code[0]
        final fun <get-code>(): dev.kord.common/DiscordBitSet // dev.kord.common.entity/Permissions.code.<get-code>|<get-code>(){}[0]
    final val values // dev.kord.common.entity/Permissions.values|{}values[0]
        final fun <get-values>(): kotlin.collections/Set<dev.kord.common.entity/Permission> // dev.kord.common.entity/Permissions.values.<get-values>|<get-values>(){}[0]

    final fun contains(dev.kord.common.entity/Permission): kotlin/Boolean // dev.kord.common.entity/Permissions.contains|contains(dev.kord.common.entity.Permission){}[0]
    final fun contains(dev.kord.common.entity/Permissions): kotlin/Boolean // dev.kord.common.entity/Permissions.contains|contains(dev.kord.common.entity.Permissions){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/Permissions.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/Permissions.hashCode|hashCode(){}[0]
    final fun minus(dev.kord.common.entity/Permission): dev.kord.common.entity/Permissions // dev.kord.common.entity/Permissions.minus|minus(dev.kord.common.entity.Permission){}[0]
    final fun minus(dev.kord.common.entity/Permissions): dev.kord.common.entity/Permissions // dev.kord.common.entity/Permissions.minus|minus(dev.kord.common.entity.Permissions){}[0]
    final fun plus(dev.kord.common.entity/Permission): dev.kord.common.entity/Permissions // dev.kord.common.entity/Permissions.plus|plus(dev.kord.common.entity.Permission){}[0]
    final fun plus(dev.kord.common.entity/Permissions): dev.kord.common.entity/Permissions // dev.kord.common.entity/Permissions.plus|plus(dev.kord.common.entity.Permissions){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/Permissions.toString|toString(){}[0]
    final inline fun copy(kotlin/Function1<dev.kord.common.entity/Permissions.Builder, kotlin/Unit>): dev.kord.common.entity/Permissions // dev.kord.common.entity/Permissions.copy|copy(kotlin.Function1<dev.kord.common.entity.Permissions.Builder,kotlin.Unit>){}[0]
    final inline fun copy0(kotlin/Function1<dev.kord.common.entity/Permissions.Builder, kotlin/Unit>): dev.kord.common.entity/Permissions // dev.kord.common.entity/Permissions.copy0|copy0(kotlin.Function1<dev.kord.common.entity.Permissions.Builder,kotlin.Unit>){}[0]

    final class Builder { // dev.kord.common.entity/Permissions.Builder|null[0]
        constructor <init>(dev.kord.common/DiscordBitSet = ...) // dev.kord.common.entity/Permissions.Builder.<init>|<init>(dev.kord.common.DiscordBitSet){}[0]

        final fun (dev.kord.common.entity/Permission).unaryMinus() // dev.kord.common.entity/Permissions.Builder.unaryMinus|unaryMinus@dev.kord.common.entity.Permission(){}[0]
        final fun (dev.kord.common.entity/Permission).unaryPlus() // dev.kord.common.entity/Permissions.Builder.unaryPlus|unaryPlus@dev.kord.common.entity.Permission(){}[0]
        final fun (dev.kord.common.entity/Permissions).unaryMinus() // dev.kord.common.entity/Permissions.Builder.unaryMinus|unaryMinus@dev.kord.common.entity.Permissions(){}[0]
        final fun (dev.kord.common.entity/Permissions).unaryPlus() // dev.kord.common.entity/Permissions.Builder.unaryPlus|unaryPlus@dev.kord.common.entity.Permissions(){}[0]
        final fun build(): dev.kord.common.entity/Permissions // dev.kord.common.entity/Permissions.Builder.build|build(){}[0]
    }

    final class NewCompanion { // dev.kord.common.entity/Permissions.NewCompanion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/Permissions> // dev.kord.common.entity/Permissions.NewCompanion.serializer|serializer(){}[0]
    }

    final object Companion { // dev.kord.common.entity/Permissions.Companion|null[0]
        final val NewCompanion // dev.kord.common.entity/Permissions.Companion.NewCompanion|{}NewCompanion[0]
            final fun <get-NewCompanion>(): dev.kord.common.entity/Permissions.NewCompanion // dev.kord.common.entity/Permissions.Companion.NewCompanion.<get-NewCompanion>|<get-NewCompanion>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/Permissions> // dev.kord.common.entity/Permissions.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/Reaction { // dev.kord.common.entity/Reaction|null[0]
    constructor <init>(kotlin/Int, kotlin/Boolean, dev.kord.common.entity/DiscordEmoji) // dev.kord.common.entity/Reaction.<init>|<init>(kotlin.Int;kotlin.Boolean;dev.kord.common.entity.DiscordEmoji){}[0]

    final val count // dev.kord.common.entity/Reaction.count|{}count[0]
        final fun <get-count>(): kotlin/Int // dev.kord.common.entity/Reaction.count.<get-count>|<get-count>(){}[0]
    final val emoji // dev.kord.common.entity/Reaction.emoji|{}emoji[0]
        final fun <get-emoji>(): dev.kord.common.entity/DiscordEmoji // dev.kord.common.entity/Reaction.emoji.<get-emoji>|<get-emoji>(){}[0]
    final val me // dev.kord.common.entity/Reaction.me|{}me[0]
        final fun <get-me>(): kotlin/Boolean // dev.kord.common.entity/Reaction.me.<get-me>|<get-me>(){}[0]

    final fun component1(): kotlin/Int // dev.kord.common.entity/Reaction.component1|component1(){}[0]
    final fun component2(): kotlin/Boolean // dev.kord.common.entity/Reaction.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity/DiscordEmoji // dev.kord.common.entity/Reaction.component3|component3(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/Boolean = ..., dev.kord.common.entity/DiscordEmoji = ...): dev.kord.common.entity/Reaction // dev.kord.common.entity/Reaction.copy|copy(kotlin.Int;kotlin.Boolean;dev.kord.common.entity.DiscordEmoji){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/Reaction.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/Reaction.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/Reaction.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/Reaction> { // dev.kord.common.entity/Reaction.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/Reaction.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/Reaction.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/Reaction.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/Reaction // dev.kord.common.entity/Reaction.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/Reaction) // dev.kord.common.entity/Reaction.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.Reaction){}[0]
    }

    final object Companion { // dev.kord.common.entity/Reaction.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/Reaction> // dev.kord.common.entity/Reaction.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/ResolvedObjects { // dev.kord.common.entity/ResolvedObjects|null[0]
    constructor <init>(dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordInteractionGuildMember>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordUser>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordRole>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordChannel>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordMessage>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordAttachment>> = ...) // dev.kord.common.entity/ResolvedObjects.<init>|<init>(dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.entity.Snowflake,dev.kord.common.entity.DiscordInteractionGuildMember>>;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.entity.Snowflake,dev.kord.common.entity.DiscordUser>>;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.entity.Snowflake,dev.kord.common.entity.DiscordRole>>;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.entity.Snowflake,dev.kord.common.entity.DiscordChannel>>;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.entity.Snowflake,dev.kord.common.entity.DiscordMessage>>;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.entity.Snowflake,dev.kord.common.entity.DiscordAttachment>>){}[0]

    final val attachments // dev.kord.common.entity/ResolvedObjects.attachments|{}attachments[0]
        final fun <get-attachments>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordAttachment>> // dev.kord.common.entity/ResolvedObjects.attachments.<get-attachments>|<get-attachments>(){}[0]
    final val channels // dev.kord.common.entity/ResolvedObjects.channels|{}channels[0]
        final fun <get-channels>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordChannel>> // dev.kord.common.entity/ResolvedObjects.channels.<get-channels>|<get-channels>(){}[0]
    final val members // dev.kord.common.entity/ResolvedObjects.members|{}members[0]
        final fun <get-members>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordInteractionGuildMember>> // dev.kord.common.entity/ResolvedObjects.members.<get-members>|<get-members>(){}[0]
    final val messages // dev.kord.common.entity/ResolvedObjects.messages|{}messages[0]
        final fun <get-messages>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordMessage>> // dev.kord.common.entity/ResolvedObjects.messages.<get-messages>|<get-messages>(){}[0]
    final val roles // dev.kord.common.entity/ResolvedObjects.roles|{}roles[0]
        final fun <get-roles>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordRole>> // dev.kord.common.entity/ResolvedObjects.roles.<get-roles>|<get-roles>(){}[0]
    final val users // dev.kord.common.entity/ResolvedObjects.users|{}users[0]
        final fun <get-users>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordUser>> // dev.kord.common.entity/ResolvedObjects.users.<get-users>|<get-users>(){}[0]

    final fun component1(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordInteractionGuildMember>> // dev.kord.common.entity/ResolvedObjects.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordUser>> // dev.kord.common.entity/ResolvedObjects.component2|component2(){}[0]
    final fun component3(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordRole>> // dev.kord.common.entity/ResolvedObjects.component3|component3(){}[0]
    final fun component4(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordChannel>> // dev.kord.common.entity/ResolvedObjects.component4|component4(){}[0]
    final fun component5(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordMessage>> // dev.kord.common.entity/ResolvedObjects.component5|component5(){}[0]
    final fun component6(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordAttachment>> // dev.kord.common.entity/ResolvedObjects.component6|component6(){}[0]
    final fun copy(dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordInteractionGuildMember>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordUser>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordRole>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordChannel>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordMessage>> = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common.entity/Snowflake, dev.kord.common.entity/DiscordAttachment>> = ...): dev.kord.common.entity/ResolvedObjects // dev.kord.common.entity/ResolvedObjects.copy|copy(dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.entity.Snowflake,dev.kord.common.entity.DiscordInteractionGuildMember>>;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.entity.Snowflake,dev.kord.common.entity.DiscordUser>>;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.entity.Snowflake,dev.kord.common.entity.DiscordRole>>;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.entity.Snowflake,dev.kord.common.entity.DiscordChannel>>;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.entity.Snowflake,dev.kord.common.entity.DiscordMessage>>;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.entity.Snowflake,dev.kord.common.entity.DiscordAttachment>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/ResolvedObjects.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/ResolvedObjects.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/ResolvedObjects.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/ResolvedObjects> { // dev.kord.common.entity/ResolvedObjects.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/ResolvedObjects.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/ResolvedObjects.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/ResolvedObjects.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/ResolvedObjects // dev.kord.common.entity/ResolvedObjects.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/ResolvedObjects) // dev.kord.common.entity/ResolvedObjects.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.ResolvedObjects){}[0]
    }

    final object Companion { // dev.kord.common.entity/ResolvedObjects.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/ResolvedObjects.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/ResolvedObjects> // dev.kord.common.entity/ResolvedObjects.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/RoleFlags { // dev.kord.common.entity/RoleFlags|null[0]
    final val value // dev.kord.common.entity/RoleFlags.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/RoleFlags.value.<get-value>|<get-value>(){}[0]
    final val values // dev.kord.common.entity/RoleFlags.values|{}values[0]
        final fun <get-values>(): kotlin.collections/Set<dev.kord.common.entity/RoleFlag> // dev.kord.common.entity/RoleFlags.values.<get-values>|<get-values>(){}[0]

    final fun contains(dev.kord.common.entity/RoleFlag): kotlin/Boolean // dev.kord.common.entity/RoleFlags.contains|contains(dev.kord.common.entity.RoleFlag){}[0]
    final fun contains(dev.kord.common.entity/RoleFlags): kotlin/Boolean // dev.kord.common.entity/RoleFlags.contains|contains(dev.kord.common.entity.RoleFlags){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/RoleFlags.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/RoleFlags.hashCode|hashCode(){}[0]
    final fun minus(dev.kord.common.entity/RoleFlag): dev.kord.common.entity/RoleFlags // dev.kord.common.entity/RoleFlags.minus|minus(dev.kord.common.entity.RoleFlag){}[0]
    final fun minus(dev.kord.common.entity/RoleFlags): dev.kord.common.entity/RoleFlags // dev.kord.common.entity/RoleFlags.minus|minus(dev.kord.common.entity.RoleFlags){}[0]
    final fun plus(dev.kord.common.entity/RoleFlag): dev.kord.common.entity/RoleFlags // dev.kord.common.entity/RoleFlags.plus|plus(dev.kord.common.entity.RoleFlag){}[0]
    final fun plus(dev.kord.common.entity/RoleFlags): dev.kord.common.entity/RoleFlags // dev.kord.common.entity/RoleFlags.plus|plus(dev.kord.common.entity.RoleFlags){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/RoleFlags.toString|toString(){}[0]
    final inline fun copy(kotlin/Function1<dev.kord.common.entity/RoleFlags.Builder, kotlin/Unit>): dev.kord.common.entity/RoleFlags // dev.kord.common.entity/RoleFlags.copy|copy(kotlin.Function1<dev.kord.common.entity.RoleFlags.Builder,kotlin.Unit>){}[0]

    final class Builder { // dev.kord.common.entity/RoleFlags.Builder|null[0]
        constructor <init>(kotlin/Int = ...) // dev.kord.common.entity/RoleFlags.Builder.<init>|<init>(kotlin.Int){}[0]

        final fun (dev.kord.common.entity/RoleFlag).unaryMinus() // dev.kord.common.entity/RoleFlags.Builder.unaryMinus|unaryMinus@dev.kord.common.entity.RoleFlag(){}[0]
        final fun (dev.kord.common.entity/RoleFlag).unaryPlus() // dev.kord.common.entity/RoleFlags.Builder.unaryPlus|unaryPlus@dev.kord.common.entity.RoleFlag(){}[0]
        final fun (dev.kord.common.entity/RoleFlags).unaryMinus() // dev.kord.common.entity/RoleFlags.Builder.unaryMinus|unaryMinus@dev.kord.common.entity.RoleFlags(){}[0]
        final fun (dev.kord.common.entity/RoleFlags).unaryPlus() // dev.kord.common.entity/RoleFlags.Builder.unaryPlus|unaryPlus@dev.kord.common.entity.RoleFlags(){}[0]
        final fun build(): dev.kord.common.entity/RoleFlags // dev.kord.common.entity/RoleFlags.Builder.build|build(){}[0]
    }

    final object Companion { // dev.kord.common.entity/RoleFlags.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/RoleFlags> // dev.kord.common.entity/RoleFlags.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/RoleSubscription { // dev.kord.common.entity/RoleSubscription|null[0]
    constructor <init>(dev.kord.common.entity/Snowflake, kotlin/String, kotlin/Int, kotlin/Boolean) // dev.kord.common.entity/RoleSubscription.<init>|<init>(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Int;kotlin.Boolean){}[0]

    final val isRenewal // dev.kord.common.entity/RoleSubscription.isRenewal|{}isRenewal[0]
        final fun <get-isRenewal>(): kotlin/Boolean // dev.kord.common.entity/RoleSubscription.isRenewal.<get-isRenewal>|<get-isRenewal>(){}[0]
    final val subscriptionId // dev.kord.common.entity/RoleSubscription.subscriptionId|{}subscriptionId[0]
        final fun <get-subscriptionId>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/RoleSubscription.subscriptionId.<get-subscriptionId>|<get-subscriptionId>(){}[0]
    final val tierName // dev.kord.common.entity/RoleSubscription.tierName|{}tierName[0]
        final fun <get-tierName>(): kotlin/String // dev.kord.common.entity/RoleSubscription.tierName.<get-tierName>|<get-tierName>(){}[0]
    final val totalMonthsSubscribed // dev.kord.common.entity/RoleSubscription.totalMonthsSubscribed|{}totalMonthsSubscribed[0]
        final fun <get-totalMonthsSubscribed>(): kotlin/Int // dev.kord.common.entity/RoleSubscription.totalMonthsSubscribed.<get-totalMonthsSubscribed>|<get-totalMonthsSubscribed>(){}[0]

    final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/RoleSubscription.component1|component1(){}[0]
    final fun component2(): kotlin/String // dev.kord.common.entity/RoleSubscription.component2|component2(){}[0]
    final fun component3(): kotlin/Int // dev.kord.common.entity/RoleSubscription.component3|component3(){}[0]
    final fun component4(): kotlin/Boolean // dev.kord.common.entity/RoleSubscription.component4|component4(){}[0]
    final fun copy(dev.kord.common.entity/Snowflake = ..., kotlin/String = ..., kotlin/Int = ..., kotlin/Boolean = ...): dev.kord.common.entity/RoleSubscription // dev.kord.common.entity/RoleSubscription.copy|copy(dev.kord.common.entity.Snowflake;kotlin.String;kotlin.Int;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/RoleSubscription.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/RoleSubscription.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/RoleSubscription.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/RoleSubscription> { // dev.kord.common.entity/RoleSubscription.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/RoleSubscription.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/RoleSubscription.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/RoleSubscription.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/RoleSubscription // dev.kord.common.entity/RoleSubscription.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/RoleSubscription) // dev.kord.common.entity/RoleSubscription.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.RoleSubscription){}[0]
    }

    final object Companion { // dev.kord.common.entity/RoleSubscription.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/RoleSubscription> // dev.kord.common.entity/RoleSubscription.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/Snowflake : kotlin/Comparable<dev.kord.common.entity/Snowflake> { // dev.kord.common.entity/Snowflake|null[0]
    constructor <init>(kotlin/String) // dev.kord.common.entity/Snowflake.<init>|<init>(kotlin.String){}[0]
    constructor <init>(kotlin/ULong) // dev.kord.common.entity/Snowflake.<init>|<init>(kotlin.ULong){}[0]
    constructor <init>(kotlinx.datetime/Instant) // dev.kord.common.entity/Snowflake.<init>|<init>(kotlinx.datetime.Instant){}[0]

    final val increment // dev.kord.common.entity/Snowflake.increment|{}increment[0]
        final fun <get-increment>(): kotlin/UShort // dev.kord.common.entity/Snowflake.increment.<get-increment>|<get-increment>(){}[0]
    final val processId // dev.kord.common.entity/Snowflake.processId|{}processId[0]
        final fun <get-processId>(): kotlin/UByte // dev.kord.common.entity/Snowflake.processId.<get-processId>|<get-processId>(){}[0]
    final val timeMark // dev.kord.common.entity/Snowflake.timeMark|{}timeMark[0]
        final fun <get-timeMark>(): kotlin.time/TimeMark // dev.kord.common.entity/Snowflake.timeMark.<get-timeMark>|<get-timeMark>(){}[0]
    final val timestamp // dev.kord.common.entity/Snowflake.timestamp|{}timestamp[0]
        final fun <get-timestamp>(): kotlinx.datetime/Instant // dev.kord.common.entity/Snowflake.timestamp.<get-timestamp>|<get-timestamp>(){}[0]
    final val value // dev.kord.common.entity/Snowflake.value|{}value[0]
        final fun <get-value>(): kotlin/ULong // dev.kord.common.entity/Snowflake.value.<get-value>|<get-value>(){}[0]
    final val workerId // dev.kord.common.entity/Snowflake.workerId|{}workerId[0]
        final fun <get-workerId>(): kotlin/UByte // dev.kord.common.entity/Snowflake.workerId.<get-workerId>|<get-workerId>(){}[0]

    final fun compareTo(dev.kord.common.entity/Snowflake): kotlin/Int // dev.kord.common.entity/Snowflake.compareTo|compareTo(dev.kord.common.entity.Snowflake){}[0]
    final fun component1(): kotlinx.datetime/Instant // dev.kord.common.entity/Snowflake.component1|component1(){}[0]
    final fun component2(): kotlin/UByte // dev.kord.common.entity/Snowflake.component2|component2(){}[0]
    final fun component3(): kotlin/UByte // dev.kord.common.entity/Snowflake.component3|component3(){}[0]
    final fun component4(): kotlin/UShort // dev.kord.common.entity/Snowflake.component4|component4(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/Snowflake.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/Snowflake.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/Snowflake.toString|toString(){}[0]

    final object Companion { // dev.kord.common.entity/Snowflake.Companion|null[0]
        final val TimestampComparator // dev.kord.common.entity/Snowflake.Companion.TimestampComparator|{}TimestampComparator[0]
            final fun <get-TimestampComparator>(): kotlin/Comparator<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/Snowflake.Companion.TimestampComparator.<get-TimestampComparator>|<get-TimestampComparator>(){}[0]
        final val discordEpoch // dev.kord.common.entity/Snowflake.Companion.discordEpoch|{}discordEpoch[0]
            final fun <get-discordEpoch>(): kotlinx.datetime/Instant // dev.kord.common.entity/Snowflake.Companion.discordEpoch.<get-discordEpoch>|<get-discordEpoch>(){}[0]
        final val endOfTime // dev.kord.common.entity/Snowflake.Companion.endOfTime|{}endOfTime[0]
            final fun <get-endOfTime>(): kotlinx.datetime/Instant // dev.kord.common.entity/Snowflake.Companion.endOfTime.<get-endOfTime>|<get-endOfTime>(){}[0]
        final val max // dev.kord.common.entity/Snowflake.Companion.max|{}max[0]
            final fun <get-max>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/Snowflake.Companion.max.<get-max>|<get-max>(){}[0]
        final val min // dev.kord.common.entity/Snowflake.Companion.min|{}min[0]
            final fun <get-min>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/Snowflake.Companion.min.<get-min>|<get-min>(){}[0]
        final val validValues // dev.kord.common.entity/Snowflake.Companion.validValues|{}validValues[0]
            final fun <get-validValues>(): kotlin.ranges/ULongRange // dev.kord.common.entity/Snowflake.Companion.validValues.<get-validValues>|<get-validValues>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/Snowflake.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/SubCommand : dev.kord.common.entity/Option { // dev.kord.common.entity/SubCommand|null[0]
    constructor <init>(kotlin/String, dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/CommandArgument<kotlin/Any?>>> = ...) // dev.kord.common.entity/SubCommand.<init>|<init>(kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.CommandArgument<kotlin.Any?>>>){}[0]

    final val name // dev.kord.common.entity/SubCommand.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/SubCommand.name.<get-name>|<get-name>(){}[0]
    final val options // dev.kord.common.entity/SubCommand.options|{}options[0]
        final fun <get-options>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/CommandArgument<kotlin/Any?>>> // dev.kord.common.entity/SubCommand.options.<get-options>|<get-options>(){}[0]
    final val type // dev.kord.common.entity/SubCommand.type|{}type[0]
        final fun <get-type>(): dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/SubCommand.type.<get-type>|<get-type>(){}[0]

    final fun component1(): kotlin/String // dev.kord.common.entity/SubCommand.component1|component1(){}[0]
    final fun component2(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/CommandArgument<kotlin/Any?>>> // dev.kord.common.entity/SubCommand.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/CommandArgument<kotlin/Any?>>> = ...): dev.kord.common.entity/SubCommand // dev.kord.common.entity/SubCommand.copy|copy(kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.List<dev.kord.common.entity.CommandArgument<kotlin.Any?>>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/SubCommand.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/SubCommand.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/SubCommand.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<dev.kord.common.entity/SubCommand> { // dev.kord.common.entity/SubCommand.$serializer|null[0]
        final val descriptor // dev.kord.common.entity/SubCommand.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.entity/SubCommand.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // dev.kord.common.entity/SubCommand.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common.entity/SubCommand // dev.kord.common.entity/SubCommand.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common.entity/SubCommand) // dev.kord.common.entity/SubCommand.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.entity.SubCommand){}[0]
    }

    final object Companion { // dev.kord.common.entity/SubCommand.Companion|null[0]
        final val $childSerializers // dev.kord.common.entity/SubCommand.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/SubCommand> // dev.kord.common.entity/SubCommand.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/SystemChannelFlags { // dev.kord.common.entity/SystemChannelFlags|null[0]
    final val code // dev.kord.common.entity/SystemChannelFlags.code|{}code[0]
        final fun <get-code>(): kotlin/Int // dev.kord.common.entity/SystemChannelFlags.code.<get-code>|<get-code>(){}[0]
    final val values // dev.kord.common.entity/SystemChannelFlags.values|{}values[0]
        final fun <get-values>(): kotlin.collections/Set<dev.kord.common.entity/SystemChannelFlag> // dev.kord.common.entity/SystemChannelFlags.values.<get-values>|<get-values>(){}[0]

    final fun contains(dev.kord.common.entity/SystemChannelFlag): kotlin/Boolean // dev.kord.common.entity/SystemChannelFlags.contains|contains(dev.kord.common.entity.SystemChannelFlag){}[0]
    final fun contains(dev.kord.common.entity/SystemChannelFlags): kotlin/Boolean // dev.kord.common.entity/SystemChannelFlags.contains|contains(dev.kord.common.entity.SystemChannelFlags){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/SystemChannelFlags.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/SystemChannelFlags.hashCode|hashCode(){}[0]
    final fun minus(dev.kord.common.entity/SystemChannelFlag): dev.kord.common.entity/SystemChannelFlags // dev.kord.common.entity/SystemChannelFlags.minus|minus(dev.kord.common.entity.SystemChannelFlag){}[0]
    final fun minus(dev.kord.common.entity/SystemChannelFlags): dev.kord.common.entity/SystemChannelFlags // dev.kord.common.entity/SystemChannelFlags.minus|minus(dev.kord.common.entity.SystemChannelFlags){}[0]
    final fun plus(dev.kord.common.entity/SystemChannelFlag): dev.kord.common.entity/SystemChannelFlags // dev.kord.common.entity/SystemChannelFlags.plus|plus(dev.kord.common.entity.SystemChannelFlag){}[0]
    final fun plus(dev.kord.common.entity/SystemChannelFlags): dev.kord.common.entity/SystemChannelFlags // dev.kord.common.entity/SystemChannelFlags.plus|plus(dev.kord.common.entity.SystemChannelFlags){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/SystemChannelFlags.toString|toString(){}[0]
    final inline fun copy(kotlin/Function1<dev.kord.common.entity/SystemChannelFlags.Builder, kotlin/Unit>): dev.kord.common.entity/SystemChannelFlags // dev.kord.common.entity/SystemChannelFlags.copy|copy(kotlin.Function1<dev.kord.common.entity.SystemChannelFlags.Builder,kotlin.Unit>){}[0]

    final class Builder { // dev.kord.common.entity/SystemChannelFlags.Builder|null[0]
        constructor <init>(kotlin/Int = ...) // dev.kord.common.entity/SystemChannelFlags.Builder.<init>|<init>(kotlin.Int){}[0]

        final fun (dev.kord.common.entity/SystemChannelFlag).unaryMinus() // dev.kord.common.entity/SystemChannelFlags.Builder.unaryMinus|unaryMinus@dev.kord.common.entity.SystemChannelFlag(){}[0]
        final fun (dev.kord.common.entity/SystemChannelFlag).unaryPlus() // dev.kord.common.entity/SystemChannelFlags.Builder.unaryPlus|unaryPlus@dev.kord.common.entity.SystemChannelFlag(){}[0]
        final fun (dev.kord.common.entity/SystemChannelFlags).unaryMinus() // dev.kord.common.entity/SystemChannelFlags.Builder.unaryMinus|unaryMinus@dev.kord.common.entity.SystemChannelFlags(){}[0]
        final fun (dev.kord.common.entity/SystemChannelFlags).unaryPlus() // dev.kord.common.entity/SystemChannelFlags.Builder.unaryPlus|unaryPlus@dev.kord.common.entity.SystemChannelFlags(){}[0]
        final fun build(): dev.kord.common.entity/SystemChannelFlags // dev.kord.common.entity/SystemChannelFlags.Builder.build|build(){}[0]
    }

    final class NewCompanion { // dev.kord.common.entity/SystemChannelFlags.NewCompanion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/SystemChannelFlags> // dev.kord.common.entity/SystemChannelFlags.NewCompanion.serializer|serializer(){}[0]
    }

    final object Companion { // dev.kord.common.entity/SystemChannelFlags.Companion|null[0]
        final val NewCompanion // dev.kord.common.entity/SystemChannelFlags.Companion.NewCompanion|{}NewCompanion[0]
            final fun <get-NewCompanion>(): dev.kord.common.entity/SystemChannelFlags.NewCompanion // dev.kord.common.entity/SystemChannelFlags.Companion.NewCompanion.<get-NewCompanion>|<get-NewCompanion>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/SystemChannelFlags> // dev.kord.common.entity/SystemChannelFlags.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common.entity/UserFlags { // dev.kord.common.entity/UserFlags|null[0]
    final val code // dev.kord.common.entity/UserFlags.code|{}code[0]
        final fun <get-code>(): kotlin/Int // dev.kord.common.entity/UserFlags.code.<get-code>|<get-code>(){}[0]
    final val values // dev.kord.common.entity/UserFlags.values|{}values[0]
        final fun <get-values>(): kotlin.collections/Set<dev.kord.common.entity/UserFlag> // dev.kord.common.entity/UserFlags.values.<get-values>|<get-values>(){}[0]

    final fun contains(dev.kord.common.entity/UserFlag): kotlin/Boolean // dev.kord.common.entity/UserFlags.contains|contains(dev.kord.common.entity.UserFlag){}[0]
    final fun contains(dev.kord.common.entity/UserFlags): kotlin/Boolean // dev.kord.common.entity/UserFlags.contains|contains(dev.kord.common.entity.UserFlags){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/UserFlags.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/UserFlags.hashCode|hashCode(){}[0]
    final fun minus(dev.kord.common.entity/UserFlag): dev.kord.common.entity/UserFlags // dev.kord.common.entity/UserFlags.minus|minus(dev.kord.common.entity.UserFlag){}[0]
    final fun minus(dev.kord.common.entity/UserFlags): dev.kord.common.entity/UserFlags // dev.kord.common.entity/UserFlags.minus|minus(dev.kord.common.entity.UserFlags){}[0]
    final fun plus(dev.kord.common.entity/UserFlag): dev.kord.common.entity/UserFlags // dev.kord.common.entity/UserFlags.plus|plus(dev.kord.common.entity.UserFlag){}[0]
    final fun plus(dev.kord.common.entity/UserFlags): dev.kord.common.entity/UserFlags // dev.kord.common.entity/UserFlags.plus|plus(dev.kord.common.entity.UserFlags){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/UserFlags.toString|toString(){}[0]
    final inline fun copy(kotlin/Function1<dev.kord.common.entity/UserFlags.Builder, kotlin/Unit>): dev.kord.common.entity/UserFlags // dev.kord.common.entity/UserFlags.copy|copy(kotlin.Function1<dev.kord.common.entity.UserFlags.Builder,kotlin.Unit>){}[0]
    final inline fun copy0(kotlin/Function1<dev.kord.common.entity/UserFlags.Builder, kotlin/Unit>): dev.kord.common.entity/UserFlags // dev.kord.common.entity/UserFlags.copy0|copy0(kotlin.Function1<dev.kord.common.entity.UserFlags.Builder,kotlin.Unit>){}[0]

    final class Builder { // dev.kord.common.entity/UserFlags.Builder|null[0]
        constructor <init>(kotlin/Int = ...) // dev.kord.common.entity/UserFlags.Builder.<init>|<init>(kotlin.Int){}[0]

        final fun (dev.kord.common.entity/UserFlag).unaryMinus() // dev.kord.common.entity/UserFlags.Builder.unaryMinus|unaryMinus@dev.kord.common.entity.UserFlag(){}[0]
        final fun (dev.kord.common.entity/UserFlag).unaryPlus() // dev.kord.common.entity/UserFlags.Builder.unaryPlus|unaryPlus@dev.kord.common.entity.UserFlag(){}[0]
        final fun (dev.kord.common.entity/UserFlags).unaryMinus() // dev.kord.common.entity/UserFlags.Builder.unaryMinus|unaryMinus@dev.kord.common.entity.UserFlags(){}[0]
        final fun (dev.kord.common.entity/UserFlags).unaryPlus() // dev.kord.common.entity/UserFlags.Builder.unaryPlus|unaryPlus@dev.kord.common.entity.UserFlags(){}[0]
        final fun build(): dev.kord.common.entity/UserFlags // dev.kord.common.entity/UserFlags.Builder.build|build(){}[0]
    }

    final object Companion { // dev.kord.common.entity/UserFlags.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/UserFlags> // dev.kord.common.entity/UserFlags.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common/Color { // dev.kord.common/Color|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common/Color.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/Int, kotlin/Int, kotlin/Int) // dev.kord.common/Color.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.Int){}[0]

    final val blue // dev.kord.common/Color.blue|{}blue[0]
        final fun <get-blue>(): kotlin/Int // dev.kord.common/Color.blue.<get-blue>|<get-blue>(){}[0]
    final val green // dev.kord.common/Color.green|{}green[0]
        final fun <get-green>(): kotlin/Int // dev.kord.common/Color.green.<get-green>|<get-green>(){}[0]
    final val red // dev.kord.common/Color.red|{}red[0]
        final fun <get-red>(): kotlin/Int // dev.kord.common/Color.red.<get-red>|<get-red>(){}[0]
    final val rgb // dev.kord.common/Color.rgb|{}rgb[0]
        final fun <get-rgb>(): kotlin/Int // dev.kord.common/Color.rgb.<get-rgb>|<get-rgb>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common/Color.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common/Color.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common/Color.toString|toString(){}[0]

    final object Companion { // dev.kord.common/Color.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common/Color> // dev.kord.common/Color.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common/DiscordBitSet { // dev.kord.common/DiscordBitSet|null[0]
    constructor <init>(kotlin/LongArray) // dev.kord.common/DiscordBitSet.<init>|<init>(kotlin.LongArray){}[0]

    final val binary // dev.kord.common/DiscordBitSet.binary|{}binary[0]
        final fun <get-binary>(): kotlin/String // dev.kord.common/DiscordBitSet.binary.<get-binary>|<get-binary>(){}[0]
    final val isEmpty // dev.kord.common/DiscordBitSet.isEmpty|{}isEmpty[0]
        final fun <get-isEmpty>(): kotlin/Boolean // dev.kord.common/DiscordBitSet.isEmpty.<get-isEmpty>|<get-isEmpty>(){}[0]
    final val size // dev.kord.common/DiscordBitSet.size|{}size[0]
        final fun <get-size>(): kotlin/Int // dev.kord.common/DiscordBitSet.size.<get-size>|<get-size>(){}[0]
    final val value // dev.kord.common/DiscordBitSet.value|{}value[0]
        final fun <get-value>(): kotlin/String // dev.kord.common/DiscordBitSet.value.<get-value>|<get-value>(){}[0]

    final fun add(dev.kord.common/DiscordBitSet) // dev.kord.common/DiscordBitSet.add|add(dev.kord.common.DiscordBitSet){}[0]
    final fun contains(dev.kord.common/DiscordBitSet): kotlin/Boolean // dev.kord.common/DiscordBitSet.contains|contains(dev.kord.common.DiscordBitSet){}[0]
    final fun copy(): dev.kord.common/DiscordBitSet // dev.kord.common/DiscordBitSet.copy|copy(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common/DiscordBitSet.equals|equals(kotlin.Any?){}[0]
    final fun get(kotlin/Int): kotlin/Boolean // dev.kord.common/DiscordBitSet.get|get(kotlin.Int){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common/DiscordBitSet.hashCode|hashCode(){}[0]
    final fun minus(dev.kord.common/DiscordBitSet): dev.kord.common/DiscordBitSet // dev.kord.common/DiscordBitSet.minus|minus(dev.kord.common.DiscordBitSet){}[0]
    final fun plus(dev.kord.common/DiscordBitSet): dev.kord.common/DiscordBitSet // dev.kord.common/DiscordBitSet.plus|plus(dev.kord.common.DiscordBitSet){}[0]
    final fun remove(dev.kord.common/DiscordBitSet) // dev.kord.common/DiscordBitSet.remove|remove(dev.kord.common.DiscordBitSet){}[0]
    final fun set(kotlin/Int, kotlin/Boolean) // dev.kord.common/DiscordBitSet.set|set(kotlin.Int;kotlin.Boolean){}[0]
    final fun toString(): kotlin/String // dev.kord.common/DiscordBitSet.toString|toString(){}[0]

    final object Companion { // dev.kord.common/DiscordBitSet.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common/DiscordBitSet> // dev.kord.common/DiscordBitSet.Companion.serializer|serializer(){}[0]
    }
}

final class dev.kord.common/Locale { // dev.kord.common/Locale|null[0]
    constructor <init>(kotlin/String, kotlin/String? = ...) // dev.kord.common/Locale.<init>|<init>(kotlin.String;kotlin.String?){}[0]

    final val country // dev.kord.common/Locale.country|{}country[0]
        final fun <get-country>(): kotlin/String? // dev.kord.common/Locale.country.<get-country>|<get-country>(){}[0]
    final val language // dev.kord.common/Locale.language|{}language[0]
        final fun <get-language>(): kotlin/String // dev.kord.common/Locale.language.<get-language>|<get-language>(){}[0]

    final fun component1(): kotlin/String // dev.kord.common/Locale.component1|component1(){}[0]
    final fun component2(): kotlin/String? // dev.kord.common/Locale.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String? = ...): dev.kord.common/Locale // dev.kord.common/Locale.copy|copy(kotlin.String;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common/Locale.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common/Locale.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common/Locale.toString|toString(){}[0]

    final object Companion { // dev.kord.common/Locale.Companion|null[0]
        final val ALL // dev.kord.common/Locale.Companion.ALL|{}ALL[0]
            final fun <get-ALL>(): kotlin.collections/List<dev.kord.common/Locale> // dev.kord.common/Locale.Companion.ALL.<get-ALL>|<get-ALL>(){}[0]
        final val BULGARIAN // dev.kord.common/Locale.Companion.BULGARIAN|{}BULGARIAN[0]
            final fun <get-BULGARIAN>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.BULGARIAN.<get-BULGARIAN>|<get-BULGARIAN>(){}[0]
        final val CHINESE_CHINA // dev.kord.common/Locale.Companion.CHINESE_CHINA|{}CHINESE_CHINA[0]
            final fun <get-CHINESE_CHINA>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.CHINESE_CHINA.<get-CHINESE_CHINA>|<get-CHINESE_CHINA>(){}[0]
        final val CHINESE_TAIWAN // dev.kord.common/Locale.Companion.CHINESE_TAIWAN|{}CHINESE_TAIWAN[0]
            final fun <get-CHINESE_TAIWAN>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.CHINESE_TAIWAN.<get-CHINESE_TAIWAN>|<get-CHINESE_TAIWAN>(){}[0]
        final val CROATIAN // dev.kord.common/Locale.Companion.CROATIAN|{}CROATIAN[0]
            final fun <get-CROATIAN>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.CROATIAN.<get-CROATIAN>|<get-CROATIAN>(){}[0]
        final val CZECH // dev.kord.common/Locale.Companion.CZECH|{}CZECH[0]
            final fun <get-CZECH>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.CZECH.<get-CZECH>|<get-CZECH>(){}[0]
        final val DANISH // dev.kord.common/Locale.Companion.DANISH|{}DANISH[0]
            final fun <get-DANISH>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.DANISH.<get-DANISH>|<get-DANISH>(){}[0]
        final val DUTCH // dev.kord.common/Locale.Companion.DUTCH|{}DUTCH[0]
            final fun <get-DUTCH>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.DUTCH.<get-DUTCH>|<get-DUTCH>(){}[0]
        final val ENGLISH_GREAT_BRITAIN // dev.kord.common/Locale.Companion.ENGLISH_GREAT_BRITAIN|{}ENGLISH_GREAT_BRITAIN[0]
            final fun <get-ENGLISH_GREAT_BRITAIN>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.ENGLISH_GREAT_BRITAIN.<get-ENGLISH_GREAT_BRITAIN>|<get-ENGLISH_GREAT_BRITAIN>(){}[0]
        final val ENGLISH_UNITED_STATES // dev.kord.common/Locale.Companion.ENGLISH_UNITED_STATES|{}ENGLISH_UNITED_STATES[0]
            final fun <get-ENGLISH_UNITED_STATES>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.ENGLISH_UNITED_STATES.<get-ENGLISH_UNITED_STATES>|<get-ENGLISH_UNITED_STATES>(){}[0]
        final val FINNISH // dev.kord.common/Locale.Companion.FINNISH|{}FINNISH[0]
            final fun <get-FINNISH>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.FINNISH.<get-FINNISH>|<get-FINNISH>(){}[0]
        final val FRENCH // dev.kord.common/Locale.Companion.FRENCH|{}FRENCH[0]
            final fun <get-FRENCH>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.FRENCH.<get-FRENCH>|<get-FRENCH>(){}[0]
        final val GERMAN // dev.kord.common/Locale.Companion.GERMAN|{}GERMAN[0]
            final fun <get-GERMAN>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.GERMAN.<get-GERMAN>|<get-GERMAN>(){}[0]
        final val GREEK // dev.kord.common/Locale.Companion.GREEK|{}GREEK[0]
            final fun <get-GREEK>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.GREEK.<get-GREEK>|<get-GREEK>(){}[0]
        final val HINDI // dev.kord.common/Locale.Companion.HINDI|{}HINDI[0]
            final fun <get-HINDI>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.HINDI.<get-HINDI>|<get-HINDI>(){}[0]
        final val HUNGARIAN // dev.kord.common/Locale.Companion.HUNGARIAN|{}HUNGARIAN[0]
            final fun <get-HUNGARIAN>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.HUNGARIAN.<get-HUNGARIAN>|<get-HUNGARIAN>(){}[0]
        final val INDONESIAN // dev.kord.common/Locale.Companion.INDONESIAN|{}INDONESIAN[0]
            final fun <get-INDONESIAN>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.INDONESIAN.<get-INDONESIAN>|<get-INDONESIAN>(){}[0]
        final val ITALIAN // dev.kord.common/Locale.Companion.ITALIAN|{}ITALIAN[0]
            final fun <get-ITALIAN>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.ITALIAN.<get-ITALIAN>|<get-ITALIAN>(){}[0]
        final val JAPANESE // dev.kord.common/Locale.Companion.JAPANESE|{}JAPANESE[0]
            final fun <get-JAPANESE>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.JAPANESE.<get-JAPANESE>|<get-JAPANESE>(){}[0]
        final val KOREAN // dev.kord.common/Locale.Companion.KOREAN|{}KOREAN[0]
            final fun <get-KOREAN>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.KOREAN.<get-KOREAN>|<get-KOREAN>(){}[0]
        final val LITHUANIAN // dev.kord.common/Locale.Companion.LITHUANIAN|{}LITHUANIAN[0]
            final fun <get-LITHUANIAN>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.LITHUANIAN.<get-LITHUANIAN>|<get-LITHUANIAN>(){}[0]
        final val NORWEGIAN // dev.kord.common/Locale.Companion.NORWEGIAN|{}NORWEGIAN[0]
            final fun <get-NORWEGIAN>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.NORWEGIAN.<get-NORWEGIAN>|<get-NORWEGIAN>(){}[0]
        final val POLISH // dev.kord.common/Locale.Companion.POLISH|{}POLISH[0]
            final fun <get-POLISH>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.POLISH.<get-POLISH>|<get-POLISH>(){}[0]
        final val PORTUGUESE_BRAZIL // dev.kord.common/Locale.Companion.PORTUGUESE_BRAZIL|{}PORTUGUESE_BRAZIL[0]
            final fun <get-PORTUGUESE_BRAZIL>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.PORTUGUESE_BRAZIL.<get-PORTUGUESE_BRAZIL>|<get-PORTUGUESE_BRAZIL>(){}[0]
        final val ROMANIAN // dev.kord.common/Locale.Companion.ROMANIAN|{}ROMANIAN[0]
            final fun <get-ROMANIAN>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.ROMANIAN.<get-ROMANIAN>|<get-ROMANIAN>(){}[0]
        final val RUSSIAN // dev.kord.common/Locale.Companion.RUSSIAN|{}RUSSIAN[0]
            final fun <get-RUSSIAN>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.RUSSIAN.<get-RUSSIAN>|<get-RUSSIAN>(){}[0]
        final val SPANISH_LATIN_AMERICA // dev.kord.common/Locale.Companion.SPANISH_LATIN_AMERICA|{}SPANISH_LATIN_AMERICA[0]
            final fun <get-SPANISH_LATIN_AMERICA>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.SPANISH_LATIN_AMERICA.<get-SPANISH_LATIN_AMERICA>|<get-SPANISH_LATIN_AMERICA>(){}[0]
        final val SPANISH_SPAIN // dev.kord.common/Locale.Companion.SPANISH_SPAIN|{}SPANISH_SPAIN[0]
            final fun <get-SPANISH_SPAIN>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.SPANISH_SPAIN.<get-SPANISH_SPAIN>|<get-SPANISH_SPAIN>(){}[0]
        final val SWEDISH // dev.kord.common/Locale.Companion.SWEDISH|{}SWEDISH[0]
            final fun <get-SWEDISH>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.SWEDISH.<get-SWEDISH>|<get-SWEDISH>(){}[0]
        final val THAI // dev.kord.common/Locale.Companion.THAI|{}THAI[0]
            final fun <get-THAI>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.THAI.<get-THAI>|<get-THAI>(){}[0]
        final val TURKISH // dev.kord.common/Locale.Companion.TURKISH|{}TURKISH[0]
            final fun <get-TURKISH>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.TURKISH.<get-TURKISH>|<get-TURKISH>(){}[0]
        final val UKRAINIAN // dev.kord.common/Locale.Companion.UKRAINIAN|{}UKRAINIAN[0]
            final fun <get-UKRAINIAN>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.UKRAINIAN.<get-UKRAINIAN>|<get-UKRAINIAN>(){}[0]
        final val VIETNAMESE // dev.kord.common/Locale.Companion.VIETNAMESE|{}VIETNAMESE[0]
            final fun <get-VIETNAMESE>(): dev.kord.common/Locale // dev.kord.common/Locale.Companion.VIETNAMESE.<get-VIETNAMESE>|<get-VIETNAMESE>(){}[0]

        final fun fromString(kotlin/String): dev.kord.common/Locale // dev.kord.common/Locale.Companion.fromString|fromString(kotlin.String){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common/Locale> // dev.kord.common/Locale.Companion.serializer|serializer(){}[0]
    }

    final object Serializer : kotlinx.serialization/KSerializer<dev.kord.common/Locale> { // dev.kord.common/Locale.Serializer|null[0]
        final val descriptor // dev.kord.common/Locale.Serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common/Locale.Serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common/Locale // dev.kord.common/Locale.Serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common/Locale) // dev.kord.common/Locale.Serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.Locale){}[0]
    }
}

sealed class <#A: kotlin/Any?> dev.kord.common.entity/AuditLogChangeKey { // dev.kord.common.entity/AuditLogChangeKey|null[0]
    constructor <init>(kotlin/String, kotlinx.serialization/KSerializer<#A>) // dev.kord.common.entity/AuditLogChangeKey.<init>|<init>(kotlin.String;kotlinx.serialization.KSerializer<1:0>){}[0]

    final val name // dev.kord.common.entity/AuditLogChangeKey.name|{}name[0]
        final fun <get-name>(): kotlin/String // dev.kord.common.entity/AuditLogChangeKey.name.<get-name>|<get-name>(){}[0]
    final val serializer // dev.kord.common.entity/AuditLogChangeKey.serializer|{}serializer[0]
        final fun <get-serializer>(): kotlinx.serialization/KSerializer<#A> // dev.kord.common.entity/AuditLogChangeKey.serializer.<get-serializer>|<get-serializer>(){}[0]

    open fun toString(): kotlin/String // dev.kord.common.entity/AuditLogChangeKey.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/AuditLogChangeKey<kotlinx.serialization.json/JsonElement> { // dev.kord.common.entity/AuditLogChangeKey.Unknown|null[0]
        constructor <init>(kotlin/String) // dev.kord.common.entity/AuditLogChangeKey.Unknown.<init>|<init>(kotlin.String){}[0]
    }

    final object Add : dev.kord.common.entity/AuditLogChangeKey<kotlin.collections/List<dev.kord.common.entity/DiscordPartialRole>> // dev.kord.common.entity/AuditLogChangeKey.Add|null[0]

    final object AfkChannelId : dev.kord.common.entity/AuditLogChangeKey<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/AuditLogChangeKey.AfkChannelId|null[0]

    final object AfkTimeout : dev.kord.common.entity/AuditLogChangeKey<kotlin.time/Duration> // dev.kord.common.entity/AuditLogChangeKey.AfkTimeout|null[0]

    final object Allow : dev.kord.common.entity/AuditLogChangeKey<dev.kord.common.entity/Permissions> // dev.kord.common.entity/AuditLogChangeKey.Allow|null[0]

    final object ApplicationId : dev.kord.common.entity/AuditLogChangeKey<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/AuditLogChangeKey.ApplicationId|null[0]

    final object Archived : dev.kord.common.entity/AuditLogChangeKey<kotlin/Boolean> // dev.kord.common.entity/AuditLogChangeKey.Archived|null[0]

    final object AutoArchiveDuration : dev.kord.common.entity/AuditLogChangeKey<dev.kord.common.entity/ArchiveDuration> // dev.kord.common.entity/AuditLogChangeKey.AutoArchiveDuration|null[0]

    final object AvatarHash : dev.kord.common.entity/AuditLogChangeKey<kotlin/String> // dev.kord.common.entity/AuditLogChangeKey.AvatarHash|null[0]

    final object Bitrate : dev.kord.common.entity/AuditLogChangeKey<kotlin/Int> // dev.kord.common.entity/AuditLogChangeKey.Bitrate|null[0]

    final object ChannelId : dev.kord.common.entity/AuditLogChangeKey<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/AuditLogChangeKey.ChannelId|null[0]

    final object Code : dev.kord.common.entity/AuditLogChangeKey<kotlin/String> // dev.kord.common.entity/AuditLogChangeKey.Code|null[0]

    final object Color : dev.kord.common.entity/AuditLogChangeKey<dev.kord.common/Color> // dev.kord.common.entity/AuditLogChangeKey.Color|null[0]

    final object CommandId : dev.kord.common.entity/AuditLogChangeKey<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/AuditLogChangeKey.CommandId|null[0]

    final object CommunicationDisabledUntil : dev.kord.common.entity/AuditLogChangeKey<kotlinx.datetime/Instant> // dev.kord.common.entity/AuditLogChangeKey.CommunicationDisabledUntil|null[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // dev.kord.common.entity/AuditLogChangeKey.Companion|null[0]
        final fun <#A2: kotlin/Any?> serializer(kotlinx.serialization/KSerializer<#A2>): kotlinx.serialization/KSerializer<dev.kord.common.entity/AuditLogChangeKey<#A2>> // dev.kord.common.entity/AuditLogChangeKey.Companion.serializer|serializer(kotlinx.serialization.KSerializer<0:0>){0§<kotlin.Any?>}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // dev.kord.common.entity/AuditLogChangeKey.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }

    final object Deaf : dev.kord.common.entity/AuditLogChangeKey<kotlin/Boolean> // dev.kord.common.entity/AuditLogChangeKey.Deaf|null[0]

    final object DefaultAutoArchiveDuration : dev.kord.common.entity/AuditLogChangeKey<dev.kord.common.entity/ArchiveDuration> // dev.kord.common.entity/AuditLogChangeKey.DefaultAutoArchiveDuration|null[0]

    final object DefaultMessageNotificationLevel : dev.kord.common.entity/AuditLogChangeKey<dev.kord.common.entity/DefaultMessageNotificationLevel> // dev.kord.common.entity/AuditLogChangeKey.DefaultMessageNotificationLevel|null[0]

    final object Deny : dev.kord.common.entity/AuditLogChangeKey<dev.kord.common.entity/Permissions> // dev.kord.common.entity/AuditLogChangeKey.Deny|null[0]

    final object EnableEmoticons : dev.kord.common.entity/AuditLogChangeKey<kotlin/Boolean> // dev.kord.common.entity/AuditLogChangeKey.EnableEmoticons|null[0]

    final object EntityType : dev.kord.common.entity/AuditLogChangeKey<dev.kord.common.entity/ScheduledEntityType> // dev.kord.common.entity/AuditLogChangeKey.EntityType|null[0]

    final object ExpireBehavior : dev.kord.common.entity/AuditLogChangeKey<dev.kord.common.entity/IntegrationExpireBehavior> // dev.kord.common.entity/AuditLogChangeKey.ExpireBehavior|null[0]

    final object ExpireGracePeriod : dev.kord.common.entity/AuditLogChangeKey<kotlin.time/Duration> // dev.kord.common.entity/AuditLogChangeKey.ExpireGracePeriod|null[0]

    final object ExplicitContentFilter : dev.kord.common.entity/AuditLogChangeKey<dev.kord.common.entity/ExplicitContentFilter> // dev.kord.common.entity/AuditLogChangeKey.ExplicitContentFilter|null[0]

    final object Hoist : dev.kord.common.entity/AuditLogChangeKey<kotlin/Boolean> // dev.kord.common.entity/AuditLogChangeKey.Hoist|null[0]

    final object IconHash : dev.kord.common.entity/AuditLogChangeKey<kotlin/String> // dev.kord.common.entity/AuditLogChangeKey.IconHash|null[0]

    final object Id : dev.kord.common.entity/AuditLogChangeKey<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/AuditLogChangeKey.Id|null[0]

    final object ImageHash : dev.kord.common.entity/AuditLogChangeKey<kotlin/String> // dev.kord.common.entity/AuditLogChangeKey.ImageHash|null[0]

    final object InviterId : dev.kord.common.entity/AuditLogChangeKey<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/AuditLogChangeKey.InviterId|null[0]

    final object Location : dev.kord.common.entity/AuditLogChangeKey<kotlin/String> // dev.kord.common.entity/AuditLogChangeKey.Location|null[0]

    final object Locked : dev.kord.common.entity/AuditLogChangeKey<kotlin/Boolean> // dev.kord.common.entity/AuditLogChangeKey.Locked|null[0]

    final object MFALevel : dev.kord.common.entity/AuditLogChangeKey<dev.kord.common.entity/MFALevel> // dev.kord.common.entity/AuditLogChangeKey.MFALevel|null[0]

    final object MaxAges : dev.kord.common.entity/AuditLogChangeKey<kotlin.time/Duration> // dev.kord.common.entity/AuditLogChangeKey.MaxAges|null[0]

    final object MaxUses : dev.kord.common.entity/AuditLogChangeKey<kotlin/Int> // dev.kord.common.entity/AuditLogChangeKey.MaxUses|null[0]

    final object Mentionable : dev.kord.common.entity/AuditLogChangeKey<kotlin/Boolean> // dev.kord.common.entity/AuditLogChangeKey.Mentionable|null[0]

    final object Mute : dev.kord.common.entity/AuditLogChangeKey<kotlin/Boolean> // dev.kord.common.entity/AuditLogChangeKey.Mute|null[0]

    final object Name : dev.kord.common.entity/AuditLogChangeKey<kotlin/String> // dev.kord.common.entity/AuditLogChangeKey.Name|null[0]

    final object Nick : dev.kord.common.entity/AuditLogChangeKey<kotlin/String> // dev.kord.common.entity/AuditLogChangeKey.Nick|null[0]

    final object Nsfw : dev.kord.common.entity/AuditLogChangeKey<kotlin/Boolean> // dev.kord.common.entity/AuditLogChangeKey.Nsfw|null[0]

    final object OwnerId : dev.kord.common.entity/AuditLogChangeKey<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/AuditLogChangeKey.OwnerId|null[0]

    final object PermissionOverwrites : dev.kord.common.entity/AuditLogChangeKey<kotlin.collections/List<dev.kord.common.entity/Overwrite>> // dev.kord.common.entity/AuditLogChangeKey.PermissionOverwrites|null[0]

    final object Permissions : dev.kord.common.entity/AuditLogChangeKey<dev.kord.common.entity/Permissions> // dev.kord.common.entity/AuditLogChangeKey.Permissions|null[0]

    final object Position : dev.kord.common.entity/AuditLogChangeKey<kotlin/Int> // dev.kord.common.entity/AuditLogChangeKey.Position|null[0]

    final object PruneDeleteDays : dev.kord.common.entity/AuditLogChangeKey<kotlin/Int> // dev.kord.common.entity/AuditLogChangeKey.PruneDeleteDays|null[0]

    final object RateLimitPerUser : dev.kord.common.entity/AuditLogChangeKey<kotlin.time/Duration> // dev.kord.common.entity/AuditLogChangeKey.RateLimitPerUser|null[0]

    final object Region : dev.kord.common.entity/AuditLogChangeKey<kotlin/String> // dev.kord.common.entity/AuditLogChangeKey.Region|null[0]

    final object Remove : dev.kord.common.entity/AuditLogChangeKey<kotlin.collections/List<dev.kord.common.entity/DiscordPartialRole>> // dev.kord.common.entity/AuditLogChangeKey.Remove|null[0]

    final object SkuIds : dev.kord.common.entity/AuditLogChangeKey<kotlin.collections/List<dev.kord.common.entity/Snowflake>> // dev.kord.common.entity/AuditLogChangeKey.SkuIds|null[0]

    final object SplashHash : dev.kord.common.entity/AuditLogChangeKey<kotlin/String> // dev.kord.common.entity/AuditLogChangeKey.SplashHash|null[0]

    final object Status : dev.kord.common.entity/AuditLogChangeKey<dev.kord.common.entity/GuildScheduledEventStatus> // dev.kord.common.entity/AuditLogChangeKey.Status|null[0]

    final object SystemChannelId : dev.kord.common.entity/AuditLogChangeKey<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/AuditLogChangeKey.SystemChannelId|null[0]

    final object Temporary : dev.kord.common.entity/AuditLogChangeKey<kotlin/Boolean> // dev.kord.common.entity/AuditLogChangeKey.Temporary|null[0]

    final object Topic : dev.kord.common.entity/AuditLogChangeKey<kotlin/String> // dev.kord.common.entity/AuditLogChangeKey.Topic|null[0]

    final object Type : dev.kord.common.entity/AuditLogChangeKey<kotlin/String> // dev.kord.common.entity/AuditLogChangeKey.Type|null[0]

    final object UserLimit : dev.kord.common.entity/AuditLogChangeKey<kotlin/Int> // dev.kord.common.entity/AuditLogChangeKey.UserLimit|null[0]

    final object Uses : dev.kord.common.entity/AuditLogChangeKey<kotlin/Int> // dev.kord.common.entity/AuditLogChangeKey.Uses|null[0]

    final object VanityUrlCode : dev.kord.common.entity/AuditLogChangeKey<kotlin/String> // dev.kord.common.entity/AuditLogChangeKey.VanityUrlCode|null[0]

    final object VerificationLevel : dev.kord.common.entity/AuditLogChangeKey<dev.kord.common.entity/VerificationLevel> // dev.kord.common.entity/AuditLogChangeKey.VerificationLevel|null[0]

    final object WidgetChannelId : dev.kord.common.entity/AuditLogChangeKey<dev.kord.common.entity/Snowflake> // dev.kord.common.entity/AuditLogChangeKey.WidgetChannelId|null[0]

    final object WidgetEnabled : dev.kord.common.entity/AuditLogChangeKey<kotlin/Boolean> // dev.kord.common.entity/AuditLogChangeKey.WidgetEnabled|null[0]
}

sealed class <#A: out kotlin/Any?> dev.kord.common.entity.optional/Optional { // dev.kord.common.entity.optional/Optional|null[0]
    constructor <init>() // dev.kord.common.entity.optional/Optional.<init>|<init>(){}[0]

    open val value // dev.kord.common.entity.optional/Optional.value|{}value[0]
        open fun <get-value>(): #A? // dev.kord.common.entity.optional/Optional.value.<get-value>|<get-value>(){}[0]

    final class <#A1: kotlin/Any> Value : dev.kord.common.entity.optional/Optional<#A1> { // dev.kord.common.entity.optional/Optional.Value|null[0]
        constructor <init>(#A1) // dev.kord.common.entity.optional/Optional.Value.<init>|<init>(1:0){}[0]

        final val value // dev.kord.common.entity.optional/Optional.Value.value|{}value[0]
            final fun <get-value>(): #A1 // dev.kord.common.entity.optional/Optional.Value.value.<get-value>|<get-value>(){}[0]

        final fun component1(): #A1 // dev.kord.common.entity.optional/Optional.Value.component1|component1(){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity.optional/Optional.Value.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity.optional/Optional.Value.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity.optional/Optional.Value.toString|toString(){}[0]
    }

    final class <#A1: out kotlin/Any?> Missing : dev.kord.common.entity.optional/Optional<#A1> { // dev.kord.common.entity.optional/Optional.Missing|null[0]
        final val value // dev.kord.common.entity.optional/Optional.Missing.value|{}value[0]
            final fun <get-value>(): #A1? // dev.kord.common.entity.optional/Optional.Missing.value.<get-value>|<get-value>(){}[0]

        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity.optional/Optional.Missing.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity.optional/Optional.Missing.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity.optional/Optional.Missing.toString|toString(){}[0]

        final object Companion { // dev.kord.common.entity.optional/Optional.Missing.Companion|null[0]
            final fun <#A3: kotlin/Any> invoke(): dev.kord.common.entity.optional/Optional.Missing<#A3> // dev.kord.common.entity.optional/Optional.Missing.Companion.invoke|invoke(){0§<kotlin.Any>}[0]
        }
    }

    final class <#A1: out kotlin/Any?> Null : dev.kord.common.entity.optional/Optional<#A1?> { // dev.kord.common.entity.optional/Optional.Null|null[0]
        final val value // dev.kord.common.entity.optional/Optional.Null.value|{}value[0]
            final fun <get-value>(): #A1? // dev.kord.common.entity.optional/Optional.Null.value.<get-value>|<get-value>(){}[0]

        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity.optional/Optional.Null.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity.optional/Optional.Null.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity.optional/Optional.Null.toString|toString(){}[0]

        final object Companion { // dev.kord.common.entity.optional/Optional.Null.Companion|null[0]
            final fun <#A3: kotlin/Any> invoke(): dev.kord.common.entity.optional/Optional.Null<#A3> // dev.kord.common.entity.optional/Optional.Null.Companion.invoke|invoke(){0§<kotlin.Any>}[0]
        }
    }

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // dev.kord.common.entity.optional/Optional.Companion|null[0]
        final fun <#A2: kotlin/Any> invoke(#A2): dev.kord.common.entity.optional/Optional.Value<#A2> // dev.kord.common.entity.optional/Optional.Companion.invoke|invoke(0:0){0§<kotlin.Any>}[0]
        final fun <#A2: kotlin/Any> invoke(#A2?): dev.kord.common.entity.optional/Optional<#A2?> // dev.kord.common.entity.optional/Optional.Companion.invoke|invoke(0:0?){0§<kotlin.Any>}[0]
        final fun <#A2: kotlin/Any> invoke(): dev.kord.common.entity.optional/Optional.Missing<#A2> // dev.kord.common.entity.optional/Optional.Companion.invoke|invoke(){0§<kotlin.Any>}[0]
        final fun <#A2: kotlin/Any?, #B2: kotlin.collections/Collection<#A2>> missingOnEmpty(#B2): dev.kord.common.entity.optional/Optional<#B2> // dev.kord.common.entity.optional/Optional.Companion.missingOnEmpty|missingOnEmpty(0:1){0§<kotlin.Any?>;1§<kotlin.collections.Collection<0:0>>}[0]
        final fun <#A2: kotlin/Any?> serializer(kotlinx.serialization/KSerializer<#A2>): kotlinx.serialization/KSerializer<dev.kord.common.entity.optional/Optional<#A2>> // dev.kord.common.entity.optional/Optional.Companion.serializer|serializer(kotlinx.serialization.KSerializer<0:0>){0§<kotlin.Any?>}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // dev.kord.common.entity.optional/Optional.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

sealed class <#A: out kotlin/Any?> dev.kord.common.entity/CommandArgument : dev.kord.common.entity/Option { // dev.kord.common.entity/CommandArgument|null[0]
    constructor <init>() // dev.kord.common.entity/CommandArgument.<init>|<init>(){}[0]

    abstract val focused // dev.kord.common.entity/CommandArgument.focused|{}focused[0]
        abstract fun <get-focused>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/CommandArgument.focused.<get-focused>|<get-focused>(){}[0]
    abstract val value // dev.kord.common.entity/CommandArgument.value|{}value[0]
        abstract fun <get-value>(): #A // dev.kord.common.entity/CommandArgument.value.<get-value>|<get-value>(){}[0]

    final class AttachmentArgument : dev.kord.common.entity/CommandArgument<dev.kord.common.entity/Snowflake> { // dev.kord.common.entity/CommandArgument.AttachmentArgument|null[0]
        constructor <init>(kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.common.entity/CommandArgument.AttachmentArgument.<init>|<init>(kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalBoolean){}[0]

        final val focused // dev.kord.common.entity/CommandArgument.AttachmentArgument.focused|{}focused[0]
            final fun <get-focused>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/CommandArgument.AttachmentArgument.focused.<get-focused>|<get-focused>(){}[0]
        final val name // dev.kord.common.entity/CommandArgument.AttachmentArgument.name|{}name[0]
            final fun <get-name>(): kotlin/String // dev.kord.common.entity/CommandArgument.AttachmentArgument.name.<get-name>|<get-name>(){}[0]
        final val type // dev.kord.common.entity/CommandArgument.AttachmentArgument.type|{}type[0]
            final fun <get-type>(): dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/CommandArgument.AttachmentArgument.type.<get-type>|<get-type>(){}[0]
        final val value // dev.kord.common.entity/CommandArgument.AttachmentArgument.value|{}value[0]
            final fun <get-value>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/CommandArgument.AttachmentArgument.value.<get-value>|<get-value>(){}[0]

        final fun component1(): kotlin/String // dev.kord.common.entity/CommandArgument.AttachmentArgument.component1|component1(){}[0]
        final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/CommandArgument.AttachmentArgument.component2|component2(){}[0]
        final fun component3(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/CommandArgument.AttachmentArgument.component3|component3(){}[0]
        final fun copy(kotlin/String = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.common.entity/CommandArgument.AttachmentArgument // dev.kord.common.entity/CommandArgument.AttachmentArgument.copy|copy(kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalBoolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/CommandArgument.AttachmentArgument.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity/CommandArgument.AttachmentArgument.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity/CommandArgument.AttachmentArgument.toString|toString(){}[0]
    }

    final class AutoCompleteArgument : dev.kord.common.entity/CommandArgument<kotlin/String> { // dev.kord.common.entity/CommandArgument.AutoCompleteArgument|null[0]
        constructor <init>(kotlin/String, dev.kord.common.entity/ApplicationCommandOptionType, kotlin/String, dev.kord.common.entity.optional/OptionalBoolean) // dev.kord.common.entity/CommandArgument.AutoCompleteArgument.<init>|<init>(kotlin.String;dev.kord.common.entity.ApplicationCommandOptionType;kotlin.String;dev.kord.common.entity.optional.OptionalBoolean){}[0]

        final val focused // dev.kord.common.entity/CommandArgument.AutoCompleteArgument.focused|{}focused[0]
            final fun <get-focused>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/CommandArgument.AutoCompleteArgument.focused.<get-focused>|<get-focused>(){}[0]
        final val name // dev.kord.common.entity/CommandArgument.AutoCompleteArgument.name|{}name[0]
            final fun <get-name>(): kotlin/String // dev.kord.common.entity/CommandArgument.AutoCompleteArgument.name.<get-name>|<get-name>(){}[0]
        final val type // dev.kord.common.entity/CommandArgument.AutoCompleteArgument.type|{}type[0]
            final fun <get-type>(): dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/CommandArgument.AutoCompleteArgument.type.<get-type>|<get-type>(){}[0]
        final val value // dev.kord.common.entity/CommandArgument.AutoCompleteArgument.value|{}value[0]
            final fun <get-value>(): kotlin/String // dev.kord.common.entity/CommandArgument.AutoCompleteArgument.value.<get-value>|<get-value>(){}[0]

        final fun component1(): kotlin/String // dev.kord.common.entity/CommandArgument.AutoCompleteArgument.component1|component1(){}[0]
        final fun component2(): dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/CommandArgument.AutoCompleteArgument.component2|component2(){}[0]
        final fun component3(): kotlin/String // dev.kord.common.entity/CommandArgument.AutoCompleteArgument.component3|component3(){}[0]
        final fun component4(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/CommandArgument.AutoCompleteArgument.component4|component4(){}[0]
        final fun copy(kotlin/String = ..., dev.kord.common.entity/ApplicationCommandOptionType = ..., kotlin/String = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.common.entity/CommandArgument.AutoCompleteArgument // dev.kord.common.entity/CommandArgument.AutoCompleteArgument.copy|copy(kotlin.String;dev.kord.common.entity.ApplicationCommandOptionType;kotlin.String;dev.kord.common.entity.optional.OptionalBoolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/CommandArgument.AutoCompleteArgument.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity/CommandArgument.AutoCompleteArgument.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity/CommandArgument.AutoCompleteArgument.toString|toString(){}[0]
    }

    final class BooleanArgument : dev.kord.common.entity/CommandArgument<kotlin/Boolean> { // dev.kord.common.entity/CommandArgument.BooleanArgument|null[0]
        constructor <init>(kotlin/String, kotlin/Boolean, dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.common.entity/CommandArgument.BooleanArgument.<init>|<init>(kotlin.String;kotlin.Boolean;dev.kord.common.entity.optional.OptionalBoolean){}[0]

        final val focused // dev.kord.common.entity/CommandArgument.BooleanArgument.focused|{}focused[0]
            final fun <get-focused>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/CommandArgument.BooleanArgument.focused.<get-focused>|<get-focused>(){}[0]
        final val name // dev.kord.common.entity/CommandArgument.BooleanArgument.name|{}name[0]
            final fun <get-name>(): kotlin/String // dev.kord.common.entity/CommandArgument.BooleanArgument.name.<get-name>|<get-name>(){}[0]
        final val type // dev.kord.common.entity/CommandArgument.BooleanArgument.type|{}type[0]
            final fun <get-type>(): dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/CommandArgument.BooleanArgument.type.<get-type>|<get-type>(){}[0]
        final val value // dev.kord.common.entity/CommandArgument.BooleanArgument.value|{}value[0]
            final fun <get-value>(): kotlin/Boolean // dev.kord.common.entity/CommandArgument.BooleanArgument.value.<get-value>|<get-value>(){}[0]

        final fun component1(): kotlin/String // dev.kord.common.entity/CommandArgument.BooleanArgument.component1|component1(){}[0]
        final fun component2(): kotlin/Boolean // dev.kord.common.entity/CommandArgument.BooleanArgument.component2|component2(){}[0]
        final fun component3(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/CommandArgument.BooleanArgument.component3|component3(){}[0]
        final fun copy(kotlin/String = ..., kotlin/Boolean = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.common.entity/CommandArgument.BooleanArgument // dev.kord.common.entity/CommandArgument.BooleanArgument.copy|copy(kotlin.String;kotlin.Boolean;dev.kord.common.entity.optional.OptionalBoolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/CommandArgument.BooleanArgument.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity/CommandArgument.BooleanArgument.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity/CommandArgument.BooleanArgument.toString|toString(){}[0]
    }

    final class ChannelArgument : dev.kord.common.entity/CommandArgument<dev.kord.common.entity/Snowflake> { // dev.kord.common.entity/CommandArgument.ChannelArgument|null[0]
        constructor <init>(kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.common.entity/CommandArgument.ChannelArgument.<init>|<init>(kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalBoolean){}[0]

        final val focused // dev.kord.common.entity/CommandArgument.ChannelArgument.focused|{}focused[0]
            final fun <get-focused>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/CommandArgument.ChannelArgument.focused.<get-focused>|<get-focused>(){}[0]
        final val name // dev.kord.common.entity/CommandArgument.ChannelArgument.name|{}name[0]
            final fun <get-name>(): kotlin/String // dev.kord.common.entity/CommandArgument.ChannelArgument.name.<get-name>|<get-name>(){}[0]
        final val type // dev.kord.common.entity/CommandArgument.ChannelArgument.type|{}type[0]
            final fun <get-type>(): dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/CommandArgument.ChannelArgument.type.<get-type>|<get-type>(){}[0]
        final val value // dev.kord.common.entity/CommandArgument.ChannelArgument.value|{}value[0]
            final fun <get-value>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/CommandArgument.ChannelArgument.value.<get-value>|<get-value>(){}[0]

        final fun component1(): kotlin/String // dev.kord.common.entity/CommandArgument.ChannelArgument.component1|component1(){}[0]
        final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/CommandArgument.ChannelArgument.component2|component2(){}[0]
        final fun component3(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/CommandArgument.ChannelArgument.component3|component3(){}[0]
        final fun copy(kotlin/String = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.common.entity/CommandArgument.ChannelArgument // dev.kord.common.entity/CommandArgument.ChannelArgument.copy|copy(kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalBoolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/CommandArgument.ChannelArgument.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity/CommandArgument.ChannelArgument.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity/CommandArgument.ChannelArgument.toString|toString(){}[0]
    }

    final class IntegerArgument : dev.kord.common.entity/CommandArgument<kotlin/Long> { // dev.kord.common.entity/CommandArgument.IntegerArgument|null[0]
        constructor <init>(kotlin/String, kotlin/Long, dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.common.entity/CommandArgument.IntegerArgument.<init>|<init>(kotlin.String;kotlin.Long;dev.kord.common.entity.optional.OptionalBoolean){}[0]

        final val focused // dev.kord.common.entity/CommandArgument.IntegerArgument.focused|{}focused[0]
            final fun <get-focused>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/CommandArgument.IntegerArgument.focused.<get-focused>|<get-focused>(){}[0]
        final val name // dev.kord.common.entity/CommandArgument.IntegerArgument.name|{}name[0]
            final fun <get-name>(): kotlin/String // dev.kord.common.entity/CommandArgument.IntegerArgument.name.<get-name>|<get-name>(){}[0]
        final val type // dev.kord.common.entity/CommandArgument.IntegerArgument.type|{}type[0]
            final fun <get-type>(): dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/CommandArgument.IntegerArgument.type.<get-type>|<get-type>(){}[0]
        final val value // dev.kord.common.entity/CommandArgument.IntegerArgument.value|{}value[0]
            final fun <get-value>(): kotlin/Long // dev.kord.common.entity/CommandArgument.IntegerArgument.value.<get-value>|<get-value>(){}[0]

        final fun component1(): kotlin/String // dev.kord.common.entity/CommandArgument.IntegerArgument.component1|component1(){}[0]
        final fun component2(): kotlin/Long // dev.kord.common.entity/CommandArgument.IntegerArgument.component2|component2(){}[0]
        final fun component3(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/CommandArgument.IntegerArgument.component3|component3(){}[0]
        final fun copy(kotlin/String = ..., kotlin/Long = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.common.entity/CommandArgument.IntegerArgument // dev.kord.common.entity/CommandArgument.IntegerArgument.copy|copy(kotlin.String;kotlin.Long;dev.kord.common.entity.optional.OptionalBoolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/CommandArgument.IntegerArgument.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity/CommandArgument.IntegerArgument.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity/CommandArgument.IntegerArgument.toString|toString(){}[0]
    }

    final class MentionableArgument : dev.kord.common.entity/CommandArgument<dev.kord.common.entity/Snowflake> { // dev.kord.common.entity/CommandArgument.MentionableArgument|null[0]
        constructor <init>(kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.common.entity/CommandArgument.MentionableArgument.<init>|<init>(kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalBoolean){}[0]

        final val focused // dev.kord.common.entity/CommandArgument.MentionableArgument.focused|{}focused[0]
            final fun <get-focused>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/CommandArgument.MentionableArgument.focused.<get-focused>|<get-focused>(){}[0]
        final val name // dev.kord.common.entity/CommandArgument.MentionableArgument.name|{}name[0]
            final fun <get-name>(): kotlin/String // dev.kord.common.entity/CommandArgument.MentionableArgument.name.<get-name>|<get-name>(){}[0]
        final val type // dev.kord.common.entity/CommandArgument.MentionableArgument.type|{}type[0]
            final fun <get-type>(): dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/CommandArgument.MentionableArgument.type.<get-type>|<get-type>(){}[0]
        final val value // dev.kord.common.entity/CommandArgument.MentionableArgument.value|{}value[0]
            final fun <get-value>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/CommandArgument.MentionableArgument.value.<get-value>|<get-value>(){}[0]

        final fun component1(): kotlin/String // dev.kord.common.entity/CommandArgument.MentionableArgument.component1|component1(){}[0]
        final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/CommandArgument.MentionableArgument.component2|component2(){}[0]
        final fun component3(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/CommandArgument.MentionableArgument.component3|component3(){}[0]
        final fun copy(kotlin/String = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.common.entity/CommandArgument.MentionableArgument // dev.kord.common.entity/CommandArgument.MentionableArgument.copy|copy(kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalBoolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/CommandArgument.MentionableArgument.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity/CommandArgument.MentionableArgument.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity/CommandArgument.MentionableArgument.toString|toString(){}[0]
    }

    final class NumberArgument : dev.kord.common.entity/CommandArgument<kotlin/Double> { // dev.kord.common.entity/CommandArgument.NumberArgument|null[0]
        constructor <init>(kotlin/String, kotlin/Double, dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.common.entity/CommandArgument.NumberArgument.<init>|<init>(kotlin.String;kotlin.Double;dev.kord.common.entity.optional.OptionalBoolean){}[0]

        final val focused // dev.kord.common.entity/CommandArgument.NumberArgument.focused|{}focused[0]
            final fun <get-focused>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/CommandArgument.NumberArgument.focused.<get-focused>|<get-focused>(){}[0]
        final val name // dev.kord.common.entity/CommandArgument.NumberArgument.name|{}name[0]
            final fun <get-name>(): kotlin/String // dev.kord.common.entity/CommandArgument.NumberArgument.name.<get-name>|<get-name>(){}[0]
        final val type // dev.kord.common.entity/CommandArgument.NumberArgument.type|{}type[0]
            final fun <get-type>(): dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/CommandArgument.NumberArgument.type.<get-type>|<get-type>(){}[0]
        final val value // dev.kord.common.entity/CommandArgument.NumberArgument.value|{}value[0]
            final fun <get-value>(): kotlin/Double // dev.kord.common.entity/CommandArgument.NumberArgument.value.<get-value>|<get-value>(){}[0]

        final fun component1(): kotlin/String // dev.kord.common.entity/CommandArgument.NumberArgument.component1|component1(){}[0]
        final fun component2(): kotlin/Double // dev.kord.common.entity/CommandArgument.NumberArgument.component2|component2(){}[0]
        final fun component3(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/CommandArgument.NumberArgument.component3|component3(){}[0]
        final fun copy(kotlin/String = ..., kotlin/Double = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.common.entity/CommandArgument.NumberArgument // dev.kord.common.entity/CommandArgument.NumberArgument.copy|copy(kotlin.String;kotlin.Double;dev.kord.common.entity.optional.OptionalBoolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/CommandArgument.NumberArgument.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity/CommandArgument.NumberArgument.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity/CommandArgument.NumberArgument.toString|toString(){}[0]
    }

    final class RoleArgument : dev.kord.common.entity/CommandArgument<dev.kord.common.entity/Snowflake> { // dev.kord.common.entity/CommandArgument.RoleArgument|null[0]
        constructor <init>(kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.common.entity/CommandArgument.RoleArgument.<init>|<init>(kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalBoolean){}[0]

        final val focused // dev.kord.common.entity/CommandArgument.RoleArgument.focused|{}focused[0]
            final fun <get-focused>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/CommandArgument.RoleArgument.focused.<get-focused>|<get-focused>(){}[0]
        final val name // dev.kord.common.entity/CommandArgument.RoleArgument.name|{}name[0]
            final fun <get-name>(): kotlin/String // dev.kord.common.entity/CommandArgument.RoleArgument.name.<get-name>|<get-name>(){}[0]
        final val type // dev.kord.common.entity/CommandArgument.RoleArgument.type|{}type[0]
            final fun <get-type>(): dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/CommandArgument.RoleArgument.type.<get-type>|<get-type>(){}[0]
        final val value // dev.kord.common.entity/CommandArgument.RoleArgument.value|{}value[0]
            final fun <get-value>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/CommandArgument.RoleArgument.value.<get-value>|<get-value>(){}[0]

        final fun component1(): kotlin/String // dev.kord.common.entity/CommandArgument.RoleArgument.component1|component1(){}[0]
        final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/CommandArgument.RoleArgument.component2|component2(){}[0]
        final fun component3(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/CommandArgument.RoleArgument.component3|component3(){}[0]
        final fun copy(kotlin/String = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.common.entity/CommandArgument.RoleArgument // dev.kord.common.entity/CommandArgument.RoleArgument.copy|copy(kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalBoolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/CommandArgument.RoleArgument.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity/CommandArgument.RoleArgument.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity/CommandArgument.RoleArgument.toString|toString(){}[0]
    }

    final class StringArgument : dev.kord.common.entity/CommandArgument<kotlin/String> { // dev.kord.common.entity/CommandArgument.StringArgument|null[0]
        constructor <init>(kotlin/String, kotlin/String, dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.common.entity/CommandArgument.StringArgument.<init>|<init>(kotlin.String;kotlin.String;dev.kord.common.entity.optional.OptionalBoolean){}[0]

        final val focused // dev.kord.common.entity/CommandArgument.StringArgument.focused|{}focused[0]
            final fun <get-focused>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/CommandArgument.StringArgument.focused.<get-focused>|<get-focused>(){}[0]
        final val name // dev.kord.common.entity/CommandArgument.StringArgument.name|{}name[0]
            final fun <get-name>(): kotlin/String // dev.kord.common.entity/CommandArgument.StringArgument.name.<get-name>|<get-name>(){}[0]
        final val type // dev.kord.common.entity/CommandArgument.StringArgument.type|{}type[0]
            final fun <get-type>(): dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/CommandArgument.StringArgument.type.<get-type>|<get-type>(){}[0]
        final val value // dev.kord.common.entity/CommandArgument.StringArgument.value|{}value[0]
            final fun <get-value>(): kotlin/String // dev.kord.common.entity/CommandArgument.StringArgument.value.<get-value>|<get-value>(){}[0]

        final fun component1(): kotlin/String // dev.kord.common.entity/CommandArgument.StringArgument.component1|component1(){}[0]
        final fun component2(): kotlin/String // dev.kord.common.entity/CommandArgument.StringArgument.component2|component2(){}[0]
        final fun component3(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/CommandArgument.StringArgument.component3|component3(){}[0]
        final fun copy(kotlin/String = ..., kotlin/String = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.common.entity/CommandArgument.StringArgument // dev.kord.common.entity/CommandArgument.StringArgument.copy|copy(kotlin.String;kotlin.String;dev.kord.common.entity.optional.OptionalBoolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/CommandArgument.StringArgument.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity/CommandArgument.StringArgument.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity/CommandArgument.StringArgument.toString|toString(){}[0]
    }

    final class UserArgument : dev.kord.common.entity/CommandArgument<dev.kord.common.entity/Snowflake> { // dev.kord.common.entity/CommandArgument.UserArgument|null[0]
        constructor <init>(kotlin/String, dev.kord.common.entity/Snowflake, dev.kord.common.entity.optional/OptionalBoolean = ...) // dev.kord.common.entity/CommandArgument.UserArgument.<init>|<init>(kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalBoolean){}[0]

        final val focused // dev.kord.common.entity/CommandArgument.UserArgument.focused|{}focused[0]
            final fun <get-focused>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/CommandArgument.UserArgument.focused.<get-focused>|<get-focused>(){}[0]
        final val name // dev.kord.common.entity/CommandArgument.UserArgument.name|{}name[0]
            final fun <get-name>(): kotlin/String // dev.kord.common.entity/CommandArgument.UserArgument.name.<get-name>|<get-name>(){}[0]
        final val type // dev.kord.common.entity/CommandArgument.UserArgument.type|{}type[0]
            final fun <get-type>(): dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/CommandArgument.UserArgument.type.<get-type>|<get-type>(){}[0]
        final val value // dev.kord.common.entity/CommandArgument.UserArgument.value|{}value[0]
            final fun <get-value>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/CommandArgument.UserArgument.value.<get-value>|<get-value>(){}[0]

        final fun component1(): kotlin/String // dev.kord.common.entity/CommandArgument.UserArgument.component1|component1(){}[0]
        final fun component2(): dev.kord.common.entity/Snowflake // dev.kord.common.entity/CommandArgument.UserArgument.component2|component2(){}[0]
        final fun component3(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/CommandArgument.UserArgument.component3|component3(){}[0]
        final fun copy(kotlin/String = ..., dev.kord.common.entity/Snowflake = ..., dev.kord.common.entity.optional/OptionalBoolean = ...): dev.kord.common.entity/CommandArgument.UserArgument // dev.kord.common.entity/CommandArgument.UserArgument.copy|copy(kotlin.String;dev.kord.common.entity.Snowflake;dev.kord.common.entity.optional.OptionalBoolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/CommandArgument.UserArgument.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity/CommandArgument.UserArgument.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity/CommandArgument.UserArgument.toString|toString(){}[0]
    }

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // dev.kord.common.entity/CommandArgument.Companion|null[0]
        final fun <#A2: kotlin/Any?> serializer(kotlinx.serialization/KSerializer<#A2>): kotlinx.serialization/KSerializer<dev.kord.common.entity/CommandArgument<#A2>> // dev.kord.common.entity/CommandArgument.Companion.serializer|serializer(kotlinx.serialization.KSerializer<0:0>){0§<kotlin.Any?>}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // dev.kord.common.entity/CommandArgument.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

sealed class dev.kord.common.entity.optional/OptionalBoolean { // dev.kord.common.entity.optional/OptionalBoolean|null[0]
    constructor <init>() // dev.kord.common.entity.optional/OptionalBoolean.<init>|<init>(){}[0]

    final val asNullable // dev.kord.common.entity.optional/OptionalBoolean.asNullable|{}asNullable[0]
        final fun <get-asNullable>(): kotlin/Boolean? // dev.kord.common.entity.optional/OptionalBoolean.asNullable.<get-asNullable>|<get-asNullable>(){}[0]
    final val asOptional // dev.kord.common.entity.optional/OptionalBoolean.asOptional|{}asOptional[0]
        final fun <get-asOptional>(): dev.kord.common.entity.optional/Optional<kotlin/Boolean> // dev.kord.common.entity.optional/OptionalBoolean.asOptional.<get-asOptional>|<get-asOptional>(){}[0]
    final val discordBoolean // dev.kord.common.entity.optional/OptionalBoolean.discordBoolean|{}discordBoolean[0]
        final fun <get-discordBoolean>(): kotlin/Boolean // dev.kord.common.entity.optional/OptionalBoolean.discordBoolean.<get-discordBoolean>|<get-discordBoolean>(){}[0]

    final fun not(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity.optional/OptionalBoolean.not|not(){}[0]
    final fun orElse(kotlin/Boolean): kotlin/Boolean // dev.kord.common.entity.optional/OptionalBoolean.orElse|orElse(kotlin.Boolean){}[0]

    final class Value : dev.kord.common.entity.optional/OptionalBoolean { // dev.kord.common.entity.optional/OptionalBoolean.Value|null[0]
        constructor <init>(kotlin/Boolean) // dev.kord.common.entity.optional/OptionalBoolean.Value.<init>|<init>(kotlin.Boolean){}[0]

        final val value // dev.kord.common.entity.optional/OptionalBoolean.Value.value|{}value[0]
            final fun <get-value>(): kotlin/Boolean // dev.kord.common.entity.optional/OptionalBoolean.Value.value.<get-value>|<get-value>(){}[0]

        final fun component1(): kotlin/Boolean // dev.kord.common.entity.optional/OptionalBoolean.Value.component1|component1(){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity.optional/OptionalBoolean.Value.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity.optional/OptionalBoolean.Value.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity.optional/OptionalBoolean.Value.toString|toString(){}[0]
    }

    final object Companion { // dev.kord.common.entity.optional/OptionalBoolean.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity.optional/OptionalBoolean> // dev.kord.common.entity.optional/OptionalBoolean.Companion.serializer|serializer(){}[0]
    }

    final object Missing : dev.kord.common.entity.optional/OptionalBoolean { // dev.kord.common.entity.optional/OptionalBoolean.Missing|null[0]
        final fun toString(): kotlin/String // dev.kord.common.entity.optional/OptionalBoolean.Missing.toString|toString(){}[0]
    }
}

sealed class dev.kord.common.entity.optional/OptionalInt { // dev.kord.common.entity.optional/OptionalInt|null[0]
    constructor <init>() // dev.kord.common.entity.optional/OptionalInt.<init>|<init>(){}[0]

    final val asNullable // dev.kord.common.entity.optional/OptionalInt.asNullable|{}asNullable[0]
        final fun <get-asNullable>(): kotlin/Int? // dev.kord.common.entity.optional/OptionalInt.asNullable.<get-asNullable>|<get-asNullable>(){}[0]
    final val asOptional // dev.kord.common.entity.optional/OptionalInt.asOptional|{}asOptional[0]
        final fun <get-asOptional>(): dev.kord.common.entity.optional/Optional<kotlin/Int> // dev.kord.common.entity.optional/OptionalInt.asOptional.<get-asOptional>|<get-asOptional>(){}[0]

    final fun orElse(kotlin/Int): kotlin/Int // dev.kord.common.entity.optional/OptionalInt.orElse|orElse(kotlin.Int){}[0]

    final class Value : dev.kord.common.entity.optional/OptionalInt { // dev.kord.common.entity.optional/OptionalInt.Value|null[0]
        constructor <init>(kotlin/Int) // dev.kord.common.entity.optional/OptionalInt.Value.<init>|<init>(kotlin.Int){}[0]

        final val value // dev.kord.common.entity.optional/OptionalInt.Value.value|{}value[0]
            final fun <get-value>(): kotlin/Int // dev.kord.common.entity.optional/OptionalInt.Value.value.<get-value>|<get-value>(){}[0]

        final fun component1(): kotlin/Int // dev.kord.common.entity.optional/OptionalInt.Value.component1|component1(){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity.optional/OptionalInt.Value.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity.optional/OptionalInt.Value.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity.optional/OptionalInt.Value.toString|toString(){}[0]
    }

    final object Companion { // dev.kord.common.entity.optional/OptionalInt.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity.optional/OptionalInt> // dev.kord.common.entity.optional/OptionalInt.Companion.serializer|serializer(){}[0]
    }

    final object Missing : dev.kord.common.entity.optional/OptionalInt { // dev.kord.common.entity.optional/OptionalInt.Missing|null[0]
        final fun toString(): kotlin/String // dev.kord.common.entity.optional/OptionalInt.Missing.toString|toString(){}[0]
    }
}

sealed class dev.kord.common.entity.optional/OptionalLong { // dev.kord.common.entity.optional/OptionalLong|null[0]
    constructor <init>() // dev.kord.common.entity.optional/OptionalLong.<init>|<init>(){}[0]

    final val asNullable // dev.kord.common.entity.optional/OptionalLong.asNullable|{}asNullable[0]
        final fun <get-asNullable>(): kotlin/Long? // dev.kord.common.entity.optional/OptionalLong.asNullable.<get-asNullable>|<get-asNullable>(){}[0]
    final val asOptional // dev.kord.common.entity.optional/OptionalLong.asOptional|{}asOptional[0]
        final fun <get-asOptional>(): dev.kord.common.entity.optional/Optional<kotlin/Long> // dev.kord.common.entity.optional/OptionalLong.asOptional.<get-asOptional>|<get-asOptional>(){}[0]

    final fun orElse(kotlin/Long): kotlin/Long // dev.kord.common.entity.optional/OptionalLong.orElse|orElse(kotlin.Long){}[0]

    final class Value : dev.kord.common.entity.optional/OptionalLong { // dev.kord.common.entity.optional/OptionalLong.Value|null[0]
        constructor <init>(kotlin/Long) // dev.kord.common.entity.optional/OptionalLong.Value.<init>|<init>(kotlin.Long){}[0]

        final val value // dev.kord.common.entity.optional/OptionalLong.Value.value|{}value[0]
            final fun <get-value>(): kotlin/Long // dev.kord.common.entity.optional/OptionalLong.Value.value.<get-value>|<get-value>(){}[0]

        final fun component1(): kotlin/Long // dev.kord.common.entity.optional/OptionalLong.Value.component1|component1(){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity.optional/OptionalLong.Value.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity.optional/OptionalLong.Value.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity.optional/OptionalLong.Value.toString|toString(){}[0]
    }

    final object Companion { // dev.kord.common.entity.optional/OptionalLong.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity.optional/OptionalLong> // dev.kord.common.entity.optional/OptionalLong.Companion.serializer|serializer(){}[0]
    }

    final object Missing : dev.kord.common.entity.optional/OptionalLong { // dev.kord.common.entity.optional/OptionalLong.Missing|null[0]
        final fun toString(): kotlin/String // dev.kord.common.entity.optional/OptionalLong.Missing.toString|toString(){}[0]
    }
}

sealed class dev.kord.common.entity.optional/OptionalSnowflake { // dev.kord.common.entity.optional/OptionalSnowflake|null[0]
    constructor <init>() // dev.kord.common.entity.optional/OptionalSnowflake.<init>|<init>(){}[0]

    final val asOptional // dev.kord.common.entity.optional/OptionalSnowflake.asOptional|{}asOptional[0]
        final fun <get-asOptional>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/Snowflake> // dev.kord.common.entity.optional/OptionalSnowflake.asOptional.<get-asOptional>|<get-asOptional>(){}[0]
    open val value // dev.kord.common.entity.optional/OptionalSnowflake.value|{}value[0]
        open fun <get-value>(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity.optional/OptionalSnowflake.value.<get-value>|<get-value>(){}[0]

    final fun orElse(dev.kord.common.entity/Snowflake): dev.kord.common.entity/Snowflake // dev.kord.common.entity.optional/OptionalSnowflake.orElse|orElse(dev.kord.common.entity.Snowflake){}[0]

    final class Value : dev.kord.common.entity.optional/OptionalSnowflake { // dev.kord.common.entity.optional/OptionalSnowflake.Value|null[0]
        constructor <init>(dev.kord.common.entity/Snowflake) // dev.kord.common.entity.optional/OptionalSnowflake.Value.<init>|<init>(dev.kord.common.entity.Snowflake){}[0]
        constructor <init>(kotlin/ULong) // dev.kord.common.entity.optional/OptionalSnowflake.Value.<init>|<init>(kotlin.ULong){}[0]

        final val value // dev.kord.common.entity.optional/OptionalSnowflake.Value.value|{}value[0]
            final fun <get-value>(): dev.kord.common.entity/Snowflake // dev.kord.common.entity.optional/OptionalSnowflake.Value.value.<get-value>|<get-value>(){}[0]

        final fun component1(): dev.kord.common.entity/Snowflake // dev.kord.common.entity.optional/OptionalSnowflake.Value.component1|component1(){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity.optional/OptionalSnowflake.Value.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity.optional/OptionalSnowflake.Value.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity.optional/OptionalSnowflake.Value.toString|toString(){}[0]
    }

    final object Companion { // dev.kord.common.entity.optional/OptionalSnowflake.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity.optional/OptionalSnowflake> // dev.kord.common.entity.optional/OptionalSnowflake.Companion.serializer|serializer(){}[0]
    }

    final object Missing : dev.kord.common.entity.optional/OptionalSnowflake { // dev.kord.common.entity.optional/OptionalSnowflake.Missing|null[0]
        final fun toString(): kotlin/String // dev.kord.common.entity.optional/OptionalSnowflake.Missing.toString|toString(){}[0]
    }
}

sealed class dev.kord.common.entity/ActivityFlag { // dev.kord.common.entity/ActivityFlag|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/ActivityFlag.<init>|<init>(kotlin.Int){}[0]

    final val shift // dev.kord.common.entity/ActivityFlag.shift|{}shift[0]
        final fun <get-shift>(): kotlin/Int // dev.kord.common.entity/ActivityFlag.shift.<get-shift>|<get-shift>(){}[0]
    final val value // dev.kord.common.entity/ActivityFlag.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/ActivityFlag.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/ActivityFlag.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/ActivityFlag.hashCode|hashCode(){}[0]
    final fun plus(dev.kord.common.entity/ActivityFlag): dev.kord.common.entity/ActivityFlags // dev.kord.common.entity/ActivityFlag.plus|plus(dev.kord.common.entity.ActivityFlag){}[0]
    final fun plus(dev.kord.common.entity/ActivityFlags): dev.kord.common.entity/ActivityFlags // dev.kord.common.entity/ActivityFlag.plus|plus(dev.kord.common.entity.ActivityFlags){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/ActivityFlag.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/ActivityFlag // dev.kord.common.entity/ActivityFlag.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/ActivityFlag.Companion|null[0]
        final val entries // dev.kord.common.entity/ActivityFlag.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/ActivityFlag> // dev.kord.common.entity/ActivityFlag.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun fromShift(kotlin/Int): dev.kord.common.entity/ActivityFlag // dev.kord.common.entity/ActivityFlag.Companion.fromShift|fromShift(kotlin.Int){}[0]
    }

    final object Embedded : dev.kord.common.entity/ActivityFlag // dev.kord.common.entity/ActivityFlag.Embedded|null[0]

    final object Instance : dev.kord.common.entity/ActivityFlag // dev.kord.common.entity/ActivityFlag.Instance|null[0]

    final object Join : dev.kord.common.entity/ActivityFlag // dev.kord.common.entity/ActivityFlag.Join|null[0]

    final object JoinRequest : dev.kord.common.entity/ActivityFlag // dev.kord.common.entity/ActivityFlag.JoinRequest|null[0]

    final object PartyPrivacyFriends : dev.kord.common.entity/ActivityFlag // dev.kord.common.entity/ActivityFlag.PartyPrivacyFriends|null[0]

    final object PartyPrivacyVoiceChannel : dev.kord.common.entity/ActivityFlag // dev.kord.common.entity/ActivityFlag.PartyPrivacyVoiceChannel|null[0]

    final object Play : dev.kord.common.entity/ActivityFlag // dev.kord.common.entity/ActivityFlag.Play|null[0]

    final object Spectate : dev.kord.common.entity/ActivityFlag // dev.kord.common.entity/ActivityFlag.Spectate|null[0]

    final object Sync : dev.kord.common.entity/ActivityFlag // dev.kord.common.entity/ActivityFlag.Sync|null[0]
}

sealed class dev.kord.common.entity/ActivityType { // dev.kord.common.entity/ActivityType|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/ActivityType.<init>|<init>(kotlin.Int){}[0]

    final val code // dev.kord.common.entity/ActivityType.code|{}code[0]
        final fun <get-code>(): kotlin/Int // dev.kord.common.entity/ActivityType.code.<get-code>|<get-code>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/ActivityType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/ActivityType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/ActivityType.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/ActivityType // dev.kord.common.entity/ActivityType.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/ActivityType.Companion|null[0]
        final val entries // dev.kord.common.entity/ActivityType.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/ActivityType> // dev.kord.common.entity/ActivityType.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/ActivityType // dev.kord.common.entity/ActivityType.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/ActivityType> // dev.kord.common.entity/ActivityType.Companion.serializer|serializer(){}[0]
    }

    final object Competing : dev.kord.common.entity/ActivityType // dev.kord.common.entity/ActivityType.Competing|null[0]

    final object Custom : dev.kord.common.entity/ActivityType // dev.kord.common.entity/ActivityType.Custom|null[0]

    final object Game : dev.kord.common.entity/ActivityType // dev.kord.common.entity/ActivityType.Game|null[0]

    final object Listening : dev.kord.common.entity/ActivityType // dev.kord.common.entity/ActivityType.Listening|null[0]

    final object Streaming : dev.kord.common.entity/ActivityType // dev.kord.common.entity/ActivityType.Streaming|null[0]

    final object Watching : dev.kord.common.entity/ActivityType // dev.kord.common.entity/ActivityType.Watching|null[0]
}

sealed class dev.kord.common.entity/AllowedMentionType { // dev.kord.common.entity/AllowedMentionType|null[0]
    constructor <init>(kotlin/String) // dev.kord.common.entity/AllowedMentionType.<init>|<init>(kotlin.String){}[0]

    final val value // dev.kord.common.entity/AllowedMentionType.value|{}value[0]
        final fun <get-value>(): kotlin/String // dev.kord.common.entity/AllowedMentionType.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/AllowedMentionType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/AllowedMentionType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/AllowedMentionType.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/AllowedMentionType // dev.kord.common.entity/AllowedMentionType.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/AllowedMentionType.Companion|null[0]
        final val entries // dev.kord.common.entity/AllowedMentionType.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/AllowedMentionType> // dev.kord.common.entity/AllowedMentionType.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/String): dev.kord.common.entity/AllowedMentionType // dev.kord.common.entity/AllowedMentionType.Companion.from|from(kotlin.String){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/AllowedMentionType> // dev.kord.common.entity/AllowedMentionType.Companion.serializer|serializer(){}[0]
    }

    final object EveryoneMentions : dev.kord.common.entity/AllowedMentionType // dev.kord.common.entity/AllowedMentionType.EveryoneMentions|null[0]

    final object RoleMentions : dev.kord.common.entity/AllowedMentionType // dev.kord.common.entity/AllowedMentionType.RoleMentions|null[0]

    final object UserMentions : dev.kord.common.entity/AllowedMentionType // dev.kord.common.entity/AllowedMentionType.UserMentions|null[0]
}

sealed class dev.kord.common.entity/ApplicationCommandOptionType { // dev.kord.common.entity/ApplicationCommandOptionType|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/ApplicationCommandOptionType.<init>|<init>(kotlin.Int){}[0]

    final val type // dev.kord.common.entity/ApplicationCommandOptionType.type|{}type[0]
        final fun <get-type>(): kotlin/Int // dev.kord.common.entity/ApplicationCommandOptionType.type.<get-type>|<get-type>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/ApplicationCommandOptionType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/ApplicationCommandOptionType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/ApplicationCommandOptionType.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/ApplicationCommandOptionType.Unknown|null[0]

    final object Attachment : dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/ApplicationCommandOptionType.Attachment|null[0]

    final object Boolean : dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/ApplicationCommandOptionType.Boolean|null[0]

    final object Channel : dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/ApplicationCommandOptionType.Channel|null[0]

    final object Companion { // dev.kord.common.entity/ApplicationCommandOptionType.Companion|null[0]
        final val entries // dev.kord.common.entity/ApplicationCommandOptionType.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/ApplicationCommandOptionType> // dev.kord.common.entity/ApplicationCommandOptionType.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/ApplicationCommandOptionType.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/ApplicationCommandOptionType> // dev.kord.common.entity/ApplicationCommandOptionType.Companion.serializer|serializer(){}[0]
    }

    final object Integer : dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/ApplicationCommandOptionType.Integer|null[0]

    final object Mentionable : dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/ApplicationCommandOptionType.Mentionable|null[0]

    final object Number : dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/ApplicationCommandOptionType.Number|null[0]

    final object Role : dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/ApplicationCommandOptionType.Role|null[0]

    final object String : dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/ApplicationCommandOptionType.String|null[0]

    final object SubCommand : dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/ApplicationCommandOptionType.SubCommand|null[0]

    final object SubCommandGroup : dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/ApplicationCommandOptionType.SubCommandGroup|null[0]

    final object User : dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/ApplicationCommandOptionType.User|null[0]
}

sealed class dev.kord.common.entity/ApplicationCommandPermissionType { // dev.kord.common.entity/ApplicationCommandPermissionType|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/ApplicationCommandPermissionType.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/ApplicationCommandPermissionType.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/ApplicationCommandPermissionType.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/ApplicationCommandPermissionType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/ApplicationCommandPermissionType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/ApplicationCommandPermissionType.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/ApplicationCommandPermissionType // dev.kord.common.entity/ApplicationCommandPermissionType.Unknown|null[0]

    final object Channel : dev.kord.common.entity/ApplicationCommandPermissionType // dev.kord.common.entity/ApplicationCommandPermissionType.Channel|null[0]

    final object Companion { // dev.kord.common.entity/ApplicationCommandPermissionType.Companion|null[0]
        final val entries // dev.kord.common.entity/ApplicationCommandPermissionType.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/ApplicationCommandPermissionType> // dev.kord.common.entity/ApplicationCommandPermissionType.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/ApplicationCommandPermissionType // dev.kord.common.entity/ApplicationCommandPermissionType.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/ApplicationCommandPermissionType> // dev.kord.common.entity/ApplicationCommandPermissionType.Companion.serializer|serializer(){}[0]
    }

    final object Role : dev.kord.common.entity/ApplicationCommandPermissionType // dev.kord.common.entity/ApplicationCommandPermissionType.Role|null[0]

    final object User : dev.kord.common.entity/ApplicationCommandPermissionType // dev.kord.common.entity/ApplicationCommandPermissionType.User|null[0]
}

sealed class dev.kord.common.entity/ApplicationCommandType { // dev.kord.common.entity/ApplicationCommandType|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/ApplicationCommandType.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/ApplicationCommandType.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/ApplicationCommandType.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/ApplicationCommandType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/ApplicationCommandType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/ApplicationCommandType.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/ApplicationCommandType // dev.kord.common.entity/ApplicationCommandType.Unknown|null[0]

    final object ChatInput : dev.kord.common.entity/ApplicationCommandType // dev.kord.common.entity/ApplicationCommandType.ChatInput|null[0]

    final object Companion { // dev.kord.common.entity/ApplicationCommandType.Companion|null[0]
        final val entries // dev.kord.common.entity/ApplicationCommandType.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/ApplicationCommandType> // dev.kord.common.entity/ApplicationCommandType.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/ApplicationCommandType // dev.kord.common.entity/ApplicationCommandType.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/ApplicationCommandType> // dev.kord.common.entity/ApplicationCommandType.Companion.serializer|serializer(){}[0]
    }

    final object Message : dev.kord.common.entity/ApplicationCommandType // dev.kord.common.entity/ApplicationCommandType.Message|null[0]

    final object User : dev.kord.common.entity/ApplicationCommandType // dev.kord.common.entity/ApplicationCommandType.User|null[0]
}

sealed class dev.kord.common.entity/ApplicationFlag { // dev.kord.common.entity/ApplicationFlag|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/ApplicationFlag.<init>|<init>(kotlin.Int){}[0]

    final val code // dev.kord.common.entity/ApplicationFlag.code|{}code[0]
        final fun <get-code>(): kotlin/Int // dev.kord.common.entity/ApplicationFlag.code.<get-code>|<get-code>(){}[0]
    final val shift // dev.kord.common.entity/ApplicationFlag.shift|{}shift[0]
        final fun <get-shift>(): kotlin/Int // dev.kord.common.entity/ApplicationFlag.shift.<get-shift>|<get-shift>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/ApplicationFlag.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/ApplicationFlag.hashCode|hashCode(){}[0]
    final fun plus(dev.kord.common.entity/ApplicationFlag): dev.kord.common.entity/ApplicationFlags // dev.kord.common.entity/ApplicationFlag.plus|plus(dev.kord.common.entity.ApplicationFlag){}[0]
    final fun plus(dev.kord.common.entity/ApplicationFlags): dev.kord.common.entity/ApplicationFlags // dev.kord.common.entity/ApplicationFlag.plus|plus(dev.kord.common.entity.ApplicationFlags){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/ApplicationFlag.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/ApplicationFlag // dev.kord.common.entity/ApplicationFlag.Unknown|null[0]

    final object ApplicationAutoModerationRuleCreateBadge : dev.kord.common.entity/ApplicationFlag // dev.kord.common.entity/ApplicationFlag.ApplicationAutoModerationRuleCreateBadge|null[0]

    final object ApplicationCommandBadge : dev.kord.common.entity/ApplicationFlag // dev.kord.common.entity/ApplicationFlag.ApplicationCommandBadge|null[0]

    final object Companion { // dev.kord.common.entity/ApplicationFlag.Companion|null[0]
        final val entries // dev.kord.common.entity/ApplicationFlag.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/ApplicationFlag> // dev.kord.common.entity/ApplicationFlag.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun fromShift(kotlin/Int): dev.kord.common.entity/ApplicationFlag // dev.kord.common.entity/ApplicationFlag.Companion.fromShift|fromShift(kotlin.Int){}[0]
    }

    final object Embedded : dev.kord.common.entity/ApplicationFlag // dev.kord.common.entity/ApplicationFlag.Embedded|null[0]

    final object GatewayGuildMembers : dev.kord.common.entity/ApplicationFlag // dev.kord.common.entity/ApplicationFlag.GatewayGuildMembers|null[0]

    final object GatewayGuildMembersLimited : dev.kord.common.entity/ApplicationFlag // dev.kord.common.entity/ApplicationFlag.GatewayGuildMembersLimited|null[0]

    final object GatewayMessageContent : dev.kord.common.entity/ApplicationFlag // dev.kord.common.entity/ApplicationFlag.GatewayMessageContent|null[0]

    final object GatewayMessageContentLimited : dev.kord.common.entity/ApplicationFlag // dev.kord.common.entity/ApplicationFlag.GatewayMessageContentLimited|null[0]

    final object GatewayPresence : dev.kord.common.entity/ApplicationFlag // dev.kord.common.entity/ApplicationFlag.GatewayPresence|null[0]

    final object GatewayPresenceLimited : dev.kord.common.entity/ApplicationFlag // dev.kord.common.entity/ApplicationFlag.GatewayPresenceLimited|null[0]

    final object VerificationPendingGuildLimit : dev.kord.common.entity/ApplicationFlag // dev.kord.common.entity/ApplicationFlag.VerificationPendingGuildLimit|null[0]
}

sealed class dev.kord.common.entity/ApplicationRoleConnectionMetadataType { // dev.kord.common.entity/ApplicationRoleConnectionMetadataType|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/ApplicationRoleConnectionMetadataType.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/ApplicationRoleConnectionMetadataType.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/ApplicationRoleConnectionMetadataType.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/ApplicationRoleConnectionMetadataType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/ApplicationRoleConnectionMetadataType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/ApplicationRoleConnectionMetadataType.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/ApplicationRoleConnectionMetadataType // dev.kord.common.entity/ApplicationRoleConnectionMetadataType.Unknown|null[0]

    final object BooleanEqual : dev.kord.common.entity/ApplicationRoleConnectionMetadataType // dev.kord.common.entity/ApplicationRoleConnectionMetadataType.BooleanEqual|null[0]

    final object BooleanNotEqual : dev.kord.common.entity/ApplicationRoleConnectionMetadataType // dev.kord.common.entity/ApplicationRoleConnectionMetadataType.BooleanNotEqual|null[0]

    final object Companion { // dev.kord.common.entity/ApplicationRoleConnectionMetadataType.Companion|null[0]
        final val entries // dev.kord.common.entity/ApplicationRoleConnectionMetadataType.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/ApplicationRoleConnectionMetadataType> // dev.kord.common.entity/ApplicationRoleConnectionMetadataType.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/ApplicationRoleConnectionMetadataType // dev.kord.common.entity/ApplicationRoleConnectionMetadataType.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/ApplicationRoleConnectionMetadataType> // dev.kord.common.entity/ApplicationRoleConnectionMetadataType.Companion.serializer|serializer(){}[0]
    }

    final object DateTimeGreaterThanOrEqual : dev.kord.common.entity/ApplicationRoleConnectionMetadataType // dev.kord.common.entity/ApplicationRoleConnectionMetadataType.DateTimeGreaterThanOrEqual|null[0]

    final object DateTimeLessThanOrEqual : dev.kord.common.entity/ApplicationRoleConnectionMetadataType // dev.kord.common.entity/ApplicationRoleConnectionMetadataType.DateTimeLessThanOrEqual|null[0]

    final object IntegerEqual : dev.kord.common.entity/ApplicationRoleConnectionMetadataType // dev.kord.common.entity/ApplicationRoleConnectionMetadataType.IntegerEqual|null[0]

    final object IntegerGreaterThanOrEqual : dev.kord.common.entity/ApplicationRoleConnectionMetadataType // dev.kord.common.entity/ApplicationRoleConnectionMetadataType.IntegerGreaterThanOrEqual|null[0]

    final object IntegerLessThanOrEqual : dev.kord.common.entity/ApplicationRoleConnectionMetadataType // dev.kord.common.entity/ApplicationRoleConnectionMetadataType.IntegerLessThanOrEqual|null[0]

    final object IntegerNotEqual : dev.kord.common.entity/ApplicationRoleConnectionMetadataType // dev.kord.common.entity/ApplicationRoleConnectionMetadataType.IntegerNotEqual|null[0]
}

sealed class dev.kord.common.entity/ArchiveDuration { // dev.kord.common.entity/ArchiveDuration|null[0]
    constructor <init>(kotlin.time/Duration) // dev.kord.common.entity/ArchiveDuration.<init>|<init>(kotlin.time.Duration){}[0]

    final val duration // dev.kord.common.entity/ArchiveDuration.duration|{}duration[0]
        final fun <get-duration>(): kotlin.time/Duration // dev.kord.common.entity/ArchiveDuration.duration.<get-duration>|<get-duration>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/ArchiveDuration.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/ArchiveDuration.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/ArchiveDuration.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/ArchiveDuration { // dev.kord.common.entity/ArchiveDuration.Unknown|null[0]
        constructor <init>(kotlin.time/Duration) // dev.kord.common.entity/ArchiveDuration.Unknown.<init>|<init>(kotlin.time.Duration){}[0]
    }

    final object Companion { // dev.kord.common.entity/ArchiveDuration.Companion|null[0]
        final val entries // dev.kord.common.entity/ArchiveDuration.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/ArchiveDuration> // dev.kord.common.entity/ArchiveDuration.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin.time/Duration): dev.kord.common.entity/ArchiveDuration // dev.kord.common.entity/ArchiveDuration.Companion.from|from(kotlin.time.Duration){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/ArchiveDuration> // dev.kord.common.entity/ArchiveDuration.Companion.serializer|serializer(){}[0]
    }

    final object Day : dev.kord.common.entity/ArchiveDuration // dev.kord.common.entity/ArchiveDuration.Day|null[0]

    final object Hour : dev.kord.common.entity/ArchiveDuration // dev.kord.common.entity/ArchiveDuration.Hour|null[0]

    final object ThreeDays : dev.kord.common.entity/ArchiveDuration // dev.kord.common.entity/ArchiveDuration.ThreeDays|null[0]

    final object Week : dev.kord.common.entity/ArchiveDuration // dev.kord.common.entity/ArchiveDuration.Week|null[0]
}

sealed class dev.kord.common.entity/AttachmentFlag { // dev.kord.common.entity/AttachmentFlag|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/AttachmentFlag.<init>|<init>(kotlin.Int){}[0]

    final val shift // dev.kord.common.entity/AttachmentFlag.shift|{}shift[0]
        final fun <get-shift>(): kotlin/Int // dev.kord.common.entity/AttachmentFlag.shift.<get-shift>|<get-shift>(){}[0]
    final val value // dev.kord.common.entity/AttachmentFlag.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/AttachmentFlag.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/AttachmentFlag.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/AttachmentFlag.hashCode|hashCode(){}[0]
    final fun plus(dev.kord.common.entity/AttachmentFlag): dev.kord.common.entity/AttachmentFlags // dev.kord.common.entity/AttachmentFlag.plus|plus(dev.kord.common.entity.AttachmentFlag){}[0]
    final fun plus(dev.kord.common.entity/AttachmentFlags): dev.kord.common.entity/AttachmentFlags // dev.kord.common.entity/AttachmentFlag.plus|plus(dev.kord.common.entity.AttachmentFlags){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/AttachmentFlag.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/AttachmentFlag // dev.kord.common.entity/AttachmentFlag.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/AttachmentFlag.Companion|null[0]
        final val entries // dev.kord.common.entity/AttachmentFlag.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/AttachmentFlag> // dev.kord.common.entity/AttachmentFlag.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun fromShift(kotlin/Int): dev.kord.common.entity/AttachmentFlag // dev.kord.common.entity/AttachmentFlag.Companion.fromShift|fromShift(kotlin.Int){}[0]
    }

    final object IsRemix : dev.kord.common.entity/AttachmentFlag // dev.kord.common.entity/AttachmentFlag.IsRemix|null[0]
}

sealed class dev.kord.common.entity/AuditLogEvent { // dev.kord.common.entity/AuditLogEvent|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/AuditLogEvent.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/AuditLogEvent.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/AuditLogEvent.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/AuditLogEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/AuditLogEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/AuditLogEvent.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.Unknown|null[0]

    final object ApplicationCommandPermissionUpdate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.ApplicationCommandPermissionUpdate|null[0]

    final object AutoModerationBlockMessage : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.AutoModerationBlockMessage|null[0]

    final object AutoModerationFlagToChannel : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.AutoModerationFlagToChannel|null[0]

    final object AutoModerationRuleCreate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.AutoModerationRuleCreate|null[0]

    final object AutoModerationRuleDelete : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.AutoModerationRuleDelete|null[0]

    final object AutoModerationRuleUpdate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.AutoModerationRuleUpdate|null[0]

    final object AutoModerationUserCommunicationDisabled : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.AutoModerationUserCommunicationDisabled|null[0]

    final object BotAdd : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.BotAdd|null[0]

    final object ChannelCreate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.ChannelCreate|null[0]

    final object ChannelDelete : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.ChannelDelete|null[0]

    final object ChannelOverwriteCreate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.ChannelOverwriteCreate|null[0]

    final object ChannelOverwriteDelete : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.ChannelOverwriteDelete|null[0]

    final object ChannelOverwriteUpdate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.ChannelOverwriteUpdate|null[0]

    final object ChannelUpdate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.ChannelUpdate|null[0]

    final object Companion { // dev.kord.common.entity/AuditLogEvent.Companion|null[0]
        final val entries // dev.kord.common.entity/AuditLogEvent.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/AuditLogEvent> // dev.kord.common.entity/AuditLogEvent.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/AuditLogEvent> // dev.kord.common.entity/AuditLogEvent.Companion.serializer|serializer(){}[0]
    }

    final object CreatorMonetizationRequestCreated : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.CreatorMonetizationRequestCreated|null[0]

    final object CreatorMonetizationTermsAccepted : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.CreatorMonetizationTermsAccepted|null[0]

    final object EmojiCreate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.EmojiCreate|null[0]

    final object EmojiDelete : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.EmojiDelete|null[0]

    final object EmojiUpdate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.EmojiUpdate|null[0]

    final object GuildScheduledEventCreate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.GuildScheduledEventCreate|null[0]

    final object GuildScheduledEventDelete : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.GuildScheduledEventDelete|null[0]

    final object GuildScheduledEventUpdate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.GuildScheduledEventUpdate|null[0]

    final object GuildUpdate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.GuildUpdate|null[0]

    final object IntegrationCreate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.IntegrationCreate|null[0]

    final object IntegrationDelete : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.IntegrationDelete|null[0]

    final object IntegrationUpdate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.IntegrationUpdate|null[0]

    final object InviteCreate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.InviteCreate|null[0]

    final object InviteDelete : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.InviteDelete|null[0]

    final object InviteUpdate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.InviteUpdate|null[0]

    final object MemberBanAdd : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.MemberBanAdd|null[0]

    final object MemberBanRemove : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.MemberBanRemove|null[0]

    final object MemberDisconnect : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.MemberDisconnect|null[0]

    final object MemberKick : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.MemberKick|null[0]

    final object MemberMove : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.MemberMove|null[0]

    final object MemberPrune : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.MemberPrune|null[0]

    final object MemberRoleUpdate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.MemberRoleUpdate|null[0]

    final object MemberUpdate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.MemberUpdate|null[0]

    final object MessageBulkDelete : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.MessageBulkDelete|null[0]

    final object MessageDelete : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.MessageDelete|null[0]

    final object MessagePin : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.MessagePin|null[0]

    final object MessageUnpin : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.MessageUnpin|null[0]

    final object RoleCreate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.RoleCreate|null[0]

    final object RoleDelete : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.RoleDelete|null[0]

    final object RoleUpdate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.RoleUpdate|null[0]

    final object StageInstanceCreate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.StageInstanceCreate|null[0]

    final object StageInstanceDelete : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.StageInstanceDelete|null[0]

    final object StageInstanceUpdate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.StageInstanceUpdate|null[0]

    final object StickerCreate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.StickerCreate|null[0]

    final object StickerDelete : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.StickerDelete|null[0]

    final object StickerUpdate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.StickerUpdate|null[0]

    final object ThreadCreate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.ThreadCreate|null[0]

    final object ThreadDelete : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.ThreadDelete|null[0]

    final object ThreadUpdate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.ThreadUpdate|null[0]

    final object WebhookCreate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.WebhookCreate|null[0]

    final object WebhookDelete : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.WebhookDelete|null[0]

    final object WebhookUpdate : dev.kord.common.entity/AuditLogEvent // dev.kord.common.entity/AuditLogEvent.WebhookUpdate|null[0]
}

sealed class dev.kord.common.entity/AutoModerationActionType { // dev.kord.common.entity/AutoModerationActionType|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/AutoModerationActionType.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/AutoModerationActionType.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/AutoModerationActionType.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/AutoModerationActionType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/AutoModerationActionType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/AutoModerationActionType.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/AutoModerationActionType // dev.kord.common.entity/AutoModerationActionType.Unknown|null[0]

    final object BlockMessage : dev.kord.common.entity/AutoModerationActionType // dev.kord.common.entity/AutoModerationActionType.BlockMessage|null[0]

    final object Companion { // dev.kord.common.entity/AutoModerationActionType.Companion|null[0]
        final val entries // dev.kord.common.entity/AutoModerationActionType.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/AutoModerationActionType> // dev.kord.common.entity/AutoModerationActionType.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/AutoModerationActionType // dev.kord.common.entity/AutoModerationActionType.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/AutoModerationActionType> // dev.kord.common.entity/AutoModerationActionType.Companion.serializer|serializer(){}[0]
    }

    final object SendAlertMessage : dev.kord.common.entity/AutoModerationActionType // dev.kord.common.entity/AutoModerationActionType.SendAlertMessage|null[0]

    final object Timeout : dev.kord.common.entity/AutoModerationActionType // dev.kord.common.entity/AutoModerationActionType.Timeout|null[0]
}

sealed class dev.kord.common.entity/AutoModerationRuleEventType { // dev.kord.common.entity/AutoModerationRuleEventType|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/AutoModerationRuleEventType.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/AutoModerationRuleEventType.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/AutoModerationRuleEventType.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/AutoModerationRuleEventType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/AutoModerationRuleEventType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/AutoModerationRuleEventType.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/AutoModerationRuleEventType // dev.kord.common.entity/AutoModerationRuleEventType.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/AutoModerationRuleEventType.Companion|null[0]
        final val entries // dev.kord.common.entity/AutoModerationRuleEventType.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/AutoModerationRuleEventType> // dev.kord.common.entity/AutoModerationRuleEventType.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/AutoModerationRuleEventType // dev.kord.common.entity/AutoModerationRuleEventType.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/AutoModerationRuleEventType> // dev.kord.common.entity/AutoModerationRuleEventType.Companion.serializer|serializer(){}[0]
    }

    final object MessageSend : dev.kord.common.entity/AutoModerationRuleEventType // dev.kord.common.entity/AutoModerationRuleEventType.MessageSend|null[0]
}

sealed class dev.kord.common.entity/AutoModerationRuleKeywordPresetType { // dev.kord.common.entity/AutoModerationRuleKeywordPresetType|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/AutoModerationRuleKeywordPresetType.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/AutoModerationRuleKeywordPresetType.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/AutoModerationRuleKeywordPresetType.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/AutoModerationRuleKeywordPresetType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/AutoModerationRuleKeywordPresetType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/AutoModerationRuleKeywordPresetType.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/AutoModerationRuleKeywordPresetType // dev.kord.common.entity/AutoModerationRuleKeywordPresetType.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/AutoModerationRuleKeywordPresetType.Companion|null[0]
        final val entries // dev.kord.common.entity/AutoModerationRuleKeywordPresetType.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/AutoModerationRuleKeywordPresetType> // dev.kord.common.entity/AutoModerationRuleKeywordPresetType.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/AutoModerationRuleKeywordPresetType // dev.kord.common.entity/AutoModerationRuleKeywordPresetType.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/AutoModerationRuleKeywordPresetType> // dev.kord.common.entity/AutoModerationRuleKeywordPresetType.Companion.serializer|serializer(){}[0]
    }

    final object Profanity : dev.kord.common.entity/AutoModerationRuleKeywordPresetType // dev.kord.common.entity/AutoModerationRuleKeywordPresetType.Profanity|null[0]

    final object SexualContent : dev.kord.common.entity/AutoModerationRuleKeywordPresetType // dev.kord.common.entity/AutoModerationRuleKeywordPresetType.SexualContent|null[0]

    final object Slurs : dev.kord.common.entity/AutoModerationRuleKeywordPresetType // dev.kord.common.entity/AutoModerationRuleKeywordPresetType.Slurs|null[0]
}

sealed class dev.kord.common.entity/AutoModerationRuleTriggerType { // dev.kord.common.entity/AutoModerationRuleTriggerType|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/AutoModerationRuleTriggerType.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/AutoModerationRuleTriggerType.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/AutoModerationRuleTriggerType.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/AutoModerationRuleTriggerType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/AutoModerationRuleTriggerType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/AutoModerationRuleTriggerType.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/AutoModerationRuleTriggerType // dev.kord.common.entity/AutoModerationRuleTriggerType.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/AutoModerationRuleTriggerType.Companion|null[0]
        final val entries // dev.kord.common.entity/AutoModerationRuleTriggerType.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/AutoModerationRuleTriggerType> // dev.kord.common.entity/AutoModerationRuleTriggerType.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/AutoModerationRuleTriggerType // dev.kord.common.entity/AutoModerationRuleTriggerType.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/AutoModerationRuleTriggerType> // dev.kord.common.entity/AutoModerationRuleTriggerType.Companion.serializer|serializer(){}[0]
    }

    final object Keyword : dev.kord.common.entity/AutoModerationRuleTriggerType // dev.kord.common.entity/AutoModerationRuleTriggerType.Keyword|null[0]

    final object KeywordPreset : dev.kord.common.entity/AutoModerationRuleTriggerType // dev.kord.common.entity/AutoModerationRuleTriggerType.KeywordPreset|null[0]

    final object MentionSpam : dev.kord.common.entity/AutoModerationRuleTriggerType // dev.kord.common.entity/AutoModerationRuleTriggerType.MentionSpam|null[0]

    final object Spam : dev.kord.common.entity/AutoModerationRuleTriggerType // dev.kord.common.entity/AutoModerationRuleTriggerType.Spam|null[0]
}

sealed class dev.kord.common.entity/ButtonStyle { // dev.kord.common.entity/ButtonStyle|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/ButtonStyle.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/ButtonStyle.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/ButtonStyle.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/ButtonStyle.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/ButtonStyle.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/ButtonStyle.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/ButtonStyle // dev.kord.common.entity/ButtonStyle.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/ButtonStyle.Companion|null[0]
        final val entries // dev.kord.common.entity/ButtonStyle.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/ButtonStyle> // dev.kord.common.entity/ButtonStyle.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/ButtonStyle // dev.kord.common.entity/ButtonStyle.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/ButtonStyle> // dev.kord.common.entity/ButtonStyle.Companion.serializer|serializer(){}[0]
    }

    final object Danger : dev.kord.common.entity/ButtonStyle // dev.kord.common.entity/ButtonStyle.Danger|null[0]

    final object Link : dev.kord.common.entity/ButtonStyle // dev.kord.common.entity/ButtonStyle.Link|null[0]

    final object Primary : dev.kord.common.entity/ButtonStyle // dev.kord.common.entity/ButtonStyle.Primary|null[0]

    final object Secondary : dev.kord.common.entity/ButtonStyle // dev.kord.common.entity/ButtonStyle.Secondary|null[0]

    final object Success : dev.kord.common.entity/ButtonStyle // dev.kord.common.entity/ButtonStyle.Success|null[0]
}

sealed class dev.kord.common.entity/ChannelFlag { // dev.kord.common.entity/ChannelFlag|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/ChannelFlag.<init>|<init>(kotlin.Int){}[0]

    final val code // dev.kord.common.entity/ChannelFlag.code|{}code[0]
        final fun <get-code>(): kotlin/Int // dev.kord.common.entity/ChannelFlag.code.<get-code>|<get-code>(){}[0]
    final val shift // dev.kord.common.entity/ChannelFlag.shift|{}shift[0]
        final fun <get-shift>(): kotlin/Int // dev.kord.common.entity/ChannelFlag.shift.<get-shift>|<get-shift>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/ChannelFlag.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/ChannelFlag.hashCode|hashCode(){}[0]
    final fun plus(dev.kord.common.entity/ChannelFlag): dev.kord.common.entity/ChannelFlags // dev.kord.common.entity/ChannelFlag.plus|plus(dev.kord.common.entity.ChannelFlag){}[0]
    final fun plus(dev.kord.common.entity/ChannelFlags): dev.kord.common.entity/ChannelFlags // dev.kord.common.entity/ChannelFlag.plus|plus(dev.kord.common.entity.ChannelFlags){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/ChannelFlag.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/ChannelFlag // dev.kord.common.entity/ChannelFlag.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/ChannelFlag.Companion|null[0]
        final val entries // dev.kord.common.entity/ChannelFlag.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/ChannelFlag> // dev.kord.common.entity/ChannelFlag.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun fromShift(kotlin/Int): dev.kord.common.entity/ChannelFlag // dev.kord.common.entity/ChannelFlag.Companion.fromShift|fromShift(kotlin.Int){}[0]
    }

    final object HideMediaDownloadOptions : dev.kord.common.entity/ChannelFlag // dev.kord.common.entity/ChannelFlag.HideMediaDownloadOptions|null[0]

    final object Pinned : dev.kord.common.entity/ChannelFlag // dev.kord.common.entity/ChannelFlag.Pinned|null[0]

    final object RequireTag : dev.kord.common.entity/ChannelFlag // dev.kord.common.entity/ChannelFlag.RequireTag|null[0]
}

sealed class dev.kord.common.entity/ChannelType { // dev.kord.common.entity/ChannelType|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/ChannelType.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/ChannelType.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/ChannelType.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/ChannelType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/ChannelType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/ChannelType.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/ChannelType // dev.kord.common.entity/ChannelType.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/ChannelType.Companion|null[0]
        final val entries // dev.kord.common.entity/ChannelType.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/ChannelType> // dev.kord.common.entity/ChannelType.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/ChannelType // dev.kord.common.entity/ChannelType.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/ChannelType> // dev.kord.common.entity/ChannelType.Companion.serializer|serializer(){}[0]
    }

    final object DM : dev.kord.common.entity/ChannelType // dev.kord.common.entity/ChannelType.DM|null[0]

    final object GroupDM : dev.kord.common.entity/ChannelType // dev.kord.common.entity/ChannelType.GroupDM|null[0]

    final object GuildCategory : dev.kord.common.entity/ChannelType // dev.kord.common.entity/ChannelType.GuildCategory|null[0]

    final object GuildDirectory : dev.kord.common.entity/ChannelType // dev.kord.common.entity/ChannelType.GuildDirectory|null[0]

    final object GuildForum : dev.kord.common.entity/ChannelType // dev.kord.common.entity/ChannelType.GuildForum|null[0]

    final object GuildMedia : dev.kord.common.entity/ChannelType // dev.kord.common.entity/ChannelType.GuildMedia|null[0]

    final object GuildNews : dev.kord.common.entity/ChannelType // dev.kord.common.entity/ChannelType.GuildNews|null[0]

    final object GuildStageVoice : dev.kord.common.entity/ChannelType // dev.kord.common.entity/ChannelType.GuildStageVoice|null[0]

    final object GuildText : dev.kord.common.entity/ChannelType // dev.kord.common.entity/ChannelType.GuildText|null[0]

    final object GuildVoice : dev.kord.common.entity/ChannelType // dev.kord.common.entity/ChannelType.GuildVoice|null[0]

    final object PrivateThread : dev.kord.common.entity/ChannelType // dev.kord.common.entity/ChannelType.PrivateThread|null[0]

    final object PublicGuildThread : dev.kord.common.entity/ChannelType // dev.kord.common.entity/ChannelType.PublicGuildThread|null[0]

    final object PublicNewsThread : dev.kord.common.entity/ChannelType // dev.kord.common.entity/ChannelType.PublicNewsThread|null[0]
}

sealed class dev.kord.common.entity/Choice { // dev.kord.common.entity/Choice|null[0]
    constructor <init>() // dev.kord.common.entity/Choice.<init>|<init>(){}[0]

    abstract val name // dev.kord.common.entity/Choice.name|{}name[0]
        abstract fun <get-name>(): kotlin/String // dev.kord.common.entity/Choice.name.<get-name>|<get-name>(){}[0]
    abstract val nameLocalizations // dev.kord.common.entity/Choice.nameLocalizations|{}nameLocalizations[0]
        abstract fun <get-nameLocalizations>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.common.entity/Choice.nameLocalizations.<get-nameLocalizations>|<get-nameLocalizations>(){}[0]
    abstract val value // dev.kord.common.entity/Choice.value|{}value[0]
        abstract fun <get-value>(): kotlin/Any // dev.kord.common.entity/Choice.value.<get-value>|<get-value>(){}[0]

    final class IntegerChoice : dev.kord.common.entity/Choice { // dev.kord.common.entity/Choice.IntegerChoice|null[0]
        constructor <init>(kotlin/String, dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?>, kotlin/Long) // dev.kord.common.entity/Choice.IntegerChoice.<init>|<init>(kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>;kotlin.Long){}[0]

        final val name // dev.kord.common.entity/Choice.IntegerChoice.name|{}name[0]
            final fun <get-name>(): kotlin/String // dev.kord.common.entity/Choice.IntegerChoice.name.<get-name>|<get-name>(){}[0]
        final val nameLocalizations // dev.kord.common.entity/Choice.IntegerChoice.nameLocalizations|{}nameLocalizations[0]
            final fun <get-nameLocalizations>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.common.entity/Choice.IntegerChoice.nameLocalizations.<get-nameLocalizations>|<get-nameLocalizations>(){}[0]
        final val value // dev.kord.common.entity/Choice.IntegerChoice.value|{}value[0]
            final fun <get-value>(): kotlin/Long // dev.kord.common.entity/Choice.IntegerChoice.value.<get-value>|<get-value>(){}[0]

        final fun component1(): kotlin/String // dev.kord.common.entity/Choice.IntegerChoice.component1|component1(){}[0]
        final fun component2(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.common.entity/Choice.IntegerChoice.component2|component2(){}[0]
        final fun component3(): kotlin/Long // dev.kord.common.entity/Choice.IntegerChoice.component3|component3(){}[0]
        final fun copy(kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> = ..., kotlin/Long = ...): dev.kord.common.entity/Choice.IntegerChoice // dev.kord.common.entity/Choice.IntegerChoice.copy|copy(kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>;kotlin.Long){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/Choice.IntegerChoice.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity/Choice.IntegerChoice.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity/Choice.IntegerChoice.toString|toString(){}[0]
    }

    final class NumberChoice : dev.kord.common.entity/Choice { // dev.kord.common.entity/Choice.NumberChoice|null[0]
        constructor <init>(kotlin/String, dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?>, kotlin/Double) // dev.kord.common.entity/Choice.NumberChoice.<init>|<init>(kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>;kotlin.Double){}[0]

        final val name // dev.kord.common.entity/Choice.NumberChoice.name|{}name[0]
            final fun <get-name>(): kotlin/String // dev.kord.common.entity/Choice.NumberChoice.name.<get-name>|<get-name>(){}[0]
        final val nameLocalizations // dev.kord.common.entity/Choice.NumberChoice.nameLocalizations|{}nameLocalizations[0]
            final fun <get-nameLocalizations>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.common.entity/Choice.NumberChoice.nameLocalizations.<get-nameLocalizations>|<get-nameLocalizations>(){}[0]
        final val value // dev.kord.common.entity/Choice.NumberChoice.value|{}value[0]
            final fun <get-value>(): kotlin/Double // dev.kord.common.entity/Choice.NumberChoice.value.<get-value>|<get-value>(){}[0]

        final fun component1(): kotlin/String // dev.kord.common.entity/Choice.NumberChoice.component1|component1(){}[0]
        final fun component2(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.common.entity/Choice.NumberChoice.component2|component2(){}[0]
        final fun component3(): kotlin/Double // dev.kord.common.entity/Choice.NumberChoice.component3|component3(){}[0]
        final fun copy(kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> = ..., kotlin/Double = ...): dev.kord.common.entity/Choice.NumberChoice // dev.kord.common.entity/Choice.NumberChoice.copy|copy(kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>;kotlin.Double){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/Choice.NumberChoice.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity/Choice.NumberChoice.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity/Choice.NumberChoice.toString|toString(){}[0]
    }

    final class StringChoice : dev.kord.common.entity/Choice { // dev.kord.common.entity/Choice.StringChoice|null[0]
        constructor <init>(kotlin/String, dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?>, kotlin/String) // dev.kord.common.entity/Choice.StringChoice.<init>|<init>(kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>;kotlin.String){}[0]

        final val name // dev.kord.common.entity/Choice.StringChoice.name|{}name[0]
            final fun <get-name>(): kotlin/String // dev.kord.common.entity/Choice.StringChoice.name.<get-name>|<get-name>(){}[0]
        final val nameLocalizations // dev.kord.common.entity/Choice.StringChoice.nameLocalizations|{}nameLocalizations[0]
            final fun <get-nameLocalizations>(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.common.entity/Choice.StringChoice.nameLocalizations.<get-nameLocalizations>|<get-nameLocalizations>(){}[0]
        final val value // dev.kord.common.entity/Choice.StringChoice.value|{}value[0]
            final fun <get-value>(): kotlin/String // dev.kord.common.entity/Choice.StringChoice.value.<get-value>|<get-value>(){}[0]

        final fun component1(): kotlin/String // dev.kord.common.entity/Choice.StringChoice.component1|component1(){}[0]
        final fun component2(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> // dev.kord.common.entity/Choice.StringChoice.component2|component2(){}[0]
        final fun component3(): kotlin/String // dev.kord.common.entity/Choice.StringChoice.component3|component3(){}[0]
        final fun copy(kotlin/String = ..., dev.kord.common.entity.optional/Optional<kotlin.collections/Map<dev.kord.common/Locale, kotlin/String>?> = ..., kotlin/String = ...): dev.kord.common.entity/Choice.StringChoice // dev.kord.common.entity/Choice.StringChoice.copy|copy(kotlin.String;dev.kord.common.entity.optional.Optional<kotlin.collections.Map<dev.kord.common.Locale,kotlin.String>?>;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/Choice.StringChoice.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // dev.kord.common.entity/Choice.StringChoice.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // dev.kord.common.entity/Choice.StringChoice.toString|toString(){}[0]
    }

    final object Companion { // dev.kord.common.entity/Choice.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/Choice> // dev.kord.common.entity/Choice.Companion.serializer|serializer(){}[0]
    }
}

sealed class dev.kord.common.entity/ComponentType { // dev.kord.common.entity/ComponentType|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/ComponentType.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/ComponentType.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/ComponentType.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/ComponentType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/ComponentType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/ComponentType.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/ComponentType // dev.kord.common.entity/ComponentType.Unknown|null[0]

    final object ActionRow : dev.kord.common.entity/ComponentType // dev.kord.common.entity/ComponentType.ActionRow|null[0]

    final object Button : dev.kord.common.entity/ComponentType // dev.kord.common.entity/ComponentType.Button|null[0]

    final object ChannelSelect : dev.kord.common.entity/ComponentType // dev.kord.common.entity/ComponentType.ChannelSelect|null[0]

    final object Companion { // dev.kord.common.entity/ComponentType.Companion|null[0]
        final val entries // dev.kord.common.entity/ComponentType.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/ComponentType> // dev.kord.common.entity/ComponentType.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/ComponentType // dev.kord.common.entity/ComponentType.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/ComponentType> // dev.kord.common.entity/ComponentType.Companion.serializer|serializer(){}[0]
    }

    final object MentionableSelect : dev.kord.common.entity/ComponentType // dev.kord.common.entity/ComponentType.MentionableSelect|null[0]

    final object RoleSelect : dev.kord.common.entity/ComponentType // dev.kord.common.entity/ComponentType.RoleSelect|null[0]

    final object StringSelect : dev.kord.common.entity/ComponentType // dev.kord.common.entity/ComponentType.StringSelect|null[0]

    final object TextInput : dev.kord.common.entity/ComponentType // dev.kord.common.entity/ComponentType.TextInput|null[0]

    final object UserSelect : dev.kord.common.entity/ComponentType // dev.kord.common.entity/ComponentType.UserSelect|null[0]
}

sealed class dev.kord.common.entity/DefaultMessageNotificationLevel { // dev.kord.common.entity/DefaultMessageNotificationLevel|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/DefaultMessageNotificationLevel.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/DefaultMessageNotificationLevel.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/DefaultMessageNotificationLevel.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DefaultMessageNotificationLevel.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DefaultMessageNotificationLevel.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DefaultMessageNotificationLevel.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/DefaultMessageNotificationLevel // dev.kord.common.entity/DefaultMessageNotificationLevel.Unknown|null[0]

    final object AllMessages : dev.kord.common.entity/DefaultMessageNotificationLevel // dev.kord.common.entity/DefaultMessageNotificationLevel.AllMessages|null[0]

    final object Companion { // dev.kord.common.entity/DefaultMessageNotificationLevel.Companion|null[0]
        final val entries // dev.kord.common.entity/DefaultMessageNotificationLevel.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/DefaultMessageNotificationLevel> // dev.kord.common.entity/DefaultMessageNotificationLevel.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/DefaultMessageNotificationLevel // dev.kord.common.entity/DefaultMessageNotificationLevel.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DefaultMessageNotificationLevel> // dev.kord.common.entity/DefaultMessageNotificationLevel.Companion.serializer|serializer(){}[0]
    }

    final object OnlyMentions : dev.kord.common.entity/DefaultMessageNotificationLevel // dev.kord.common.entity/DefaultMessageNotificationLevel.OnlyMentions|null[0]
}

sealed class dev.kord.common.entity/DiscordComponent { // dev.kord.common.entity/DiscordComponent|null[0]
    constructor <init>() // dev.kord.common.entity/DiscordComponent.<init>|<init>(){}[0]

    abstract val channelTypes // dev.kord.common.entity/DiscordComponent.channelTypes|{}channelTypes[0]
        abstract fun <get-channelTypes>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/ChannelType>> // dev.kord.common.entity/DiscordComponent.channelTypes.<get-channelTypes>|<get-channelTypes>(){}[0]
    abstract val components // dev.kord.common.entity/DiscordComponent.components|{}components[0]
        abstract fun <get-components>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordComponent>> // dev.kord.common.entity/DiscordComponent.components.<get-components>|<get-components>(){}[0]
    abstract val customId // dev.kord.common.entity/DiscordComponent.customId|{}customId[0]
        abstract fun <get-customId>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordComponent.customId.<get-customId>|<get-customId>(){}[0]
    abstract val defaultValues // dev.kord.common.entity/DiscordComponent.defaultValues|{}defaultValues[0]
        abstract fun <get-defaultValues>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectDefaultValue>> // dev.kord.common.entity/DiscordComponent.defaultValues.<get-defaultValues>|<get-defaultValues>(){}[0]
    abstract val disabled // dev.kord.common.entity/DiscordComponent.disabled|{}disabled[0]
        abstract fun <get-disabled>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordComponent.disabled.<get-disabled>|<get-disabled>(){}[0]
    abstract val emoji // dev.kord.common.entity/DiscordComponent.emoji|{}emoji[0]
        abstract fun <get-emoji>(): dev.kord.common.entity.optional/Optional<dev.kord.common.entity/DiscordPartialEmoji> // dev.kord.common.entity/DiscordComponent.emoji.<get-emoji>|<get-emoji>(){}[0]
    abstract val label // dev.kord.common.entity/DiscordComponent.label|{}label[0]
        abstract fun <get-label>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordComponent.label.<get-label>|<get-label>(){}[0]
    abstract val maxLength // dev.kord.common.entity/DiscordComponent.maxLength|{}maxLength[0]
        abstract fun <get-maxLength>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordComponent.maxLength.<get-maxLength>|<get-maxLength>(){}[0]
    abstract val maxValues // dev.kord.common.entity/DiscordComponent.maxValues|{}maxValues[0]
        abstract fun <get-maxValues>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordComponent.maxValues.<get-maxValues>|<get-maxValues>(){}[0]
    abstract val minLength // dev.kord.common.entity/DiscordComponent.minLength|{}minLength[0]
        abstract fun <get-minLength>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordComponent.minLength.<get-minLength>|<get-minLength>(){}[0]
    abstract val minValues // dev.kord.common.entity/DiscordComponent.minValues|{}minValues[0]
        abstract fun <get-minValues>(): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity/DiscordComponent.minValues.<get-minValues>|<get-minValues>(){}[0]
    abstract val options // dev.kord.common.entity/DiscordComponent.options|{}options[0]
        abstract fun <get-options>(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<dev.kord.common.entity/DiscordSelectOption>> // dev.kord.common.entity/DiscordComponent.options.<get-options>|<get-options>(){}[0]
    abstract val placeholder // dev.kord.common.entity/DiscordComponent.placeholder|{}placeholder[0]
        abstract fun <get-placeholder>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordComponent.placeholder.<get-placeholder>|<get-placeholder>(){}[0]
    abstract val required // dev.kord.common.entity/DiscordComponent.required|{}required[0]
        abstract fun <get-required>(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity/DiscordComponent.required.<get-required>|<get-required>(){}[0]
    abstract val type // dev.kord.common.entity/DiscordComponent.type|{}type[0]
        abstract fun <get-type>(): dev.kord.common.entity/ComponentType // dev.kord.common.entity/DiscordComponent.type.<get-type>|<get-type>(){}[0]
    abstract val url // dev.kord.common.entity/DiscordComponent.url|{}url[0]
        abstract fun <get-url>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordComponent.url.<get-url>|<get-url>(){}[0]
    abstract val value // dev.kord.common.entity/DiscordComponent.value|{}value[0]
        abstract fun <get-value>(): dev.kord.common.entity.optional/Optional<kotlin/String> // dev.kord.common.entity/DiscordComponent.value.<get-value>|<get-value>(){}[0]

    final object Companion { // dev.kord.common.entity/DiscordComponent.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordComponent> // dev.kord.common.entity/DiscordComponent.Companion.serializer|serializer(){}[0]
    }
}

sealed class dev.kord.common.entity/DiscordConnectionVisibility { // dev.kord.common.entity/DiscordConnectionVisibility|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/DiscordConnectionVisibility.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/DiscordConnectionVisibility.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/DiscordConnectionVisibility.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/DiscordConnectionVisibility.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/DiscordConnectionVisibility.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/DiscordConnectionVisibility.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/DiscordConnectionVisibility // dev.kord.common.entity/DiscordConnectionVisibility.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/DiscordConnectionVisibility.Companion|null[0]
        final val entries // dev.kord.common.entity/DiscordConnectionVisibility.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/DiscordConnectionVisibility> // dev.kord.common.entity/DiscordConnectionVisibility.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/DiscordConnectionVisibility // dev.kord.common.entity/DiscordConnectionVisibility.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/DiscordConnectionVisibility> // dev.kord.common.entity/DiscordConnectionVisibility.Companion.serializer|serializer(){}[0]
    }

    final object Everyone : dev.kord.common.entity/DiscordConnectionVisibility // dev.kord.common.entity/DiscordConnectionVisibility.Everyone|null[0]

    final object None : dev.kord.common.entity/DiscordConnectionVisibility // dev.kord.common.entity/DiscordConnectionVisibility.None|null[0]
}

sealed class dev.kord.common.entity/EmbedType { // dev.kord.common.entity/EmbedType|null[0]
    constructor <init>(kotlin/String) // dev.kord.common.entity/EmbedType.<init>|<init>(kotlin.String){}[0]

    final val value // dev.kord.common.entity/EmbedType.value|{}value[0]
        final fun <get-value>(): kotlin/String // dev.kord.common.entity/EmbedType.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/EmbedType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/EmbedType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/EmbedType.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/EmbedType // dev.kord.common.entity/EmbedType.Unknown|null[0]

    final object Article : dev.kord.common.entity/EmbedType // dev.kord.common.entity/EmbedType.Article|null[0]

    final object Companion { // dev.kord.common.entity/EmbedType.Companion|null[0]
        final val entries // dev.kord.common.entity/EmbedType.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/EmbedType> // dev.kord.common.entity/EmbedType.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/String): dev.kord.common.entity/EmbedType // dev.kord.common.entity/EmbedType.Companion.from|from(kotlin.String){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/EmbedType> // dev.kord.common.entity/EmbedType.Companion.serializer|serializer(){}[0]
    }

    final object Gifv : dev.kord.common.entity/EmbedType // dev.kord.common.entity/EmbedType.Gifv|null[0]

    final object Image : dev.kord.common.entity/EmbedType // dev.kord.common.entity/EmbedType.Image|null[0]

    final object Link : dev.kord.common.entity/EmbedType // dev.kord.common.entity/EmbedType.Link|null[0]

    final object Rich : dev.kord.common.entity/EmbedType // dev.kord.common.entity/EmbedType.Rich|null[0]

    final object Video : dev.kord.common.entity/EmbedType // dev.kord.common.entity/EmbedType.Video|null[0]
}

sealed class dev.kord.common.entity/ExplicitContentFilter { // dev.kord.common.entity/ExplicitContentFilter|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/ExplicitContentFilter.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/ExplicitContentFilter.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/ExplicitContentFilter.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/ExplicitContentFilter.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/ExplicitContentFilter.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/ExplicitContentFilter.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/ExplicitContentFilter // dev.kord.common.entity/ExplicitContentFilter.Unknown|null[0]

    final object AllMembers : dev.kord.common.entity/ExplicitContentFilter // dev.kord.common.entity/ExplicitContentFilter.AllMembers|null[0]

    final object Companion { // dev.kord.common.entity/ExplicitContentFilter.Companion|null[0]
        final val entries // dev.kord.common.entity/ExplicitContentFilter.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/ExplicitContentFilter> // dev.kord.common.entity/ExplicitContentFilter.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/ExplicitContentFilter // dev.kord.common.entity/ExplicitContentFilter.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/ExplicitContentFilter> // dev.kord.common.entity/ExplicitContentFilter.Companion.serializer|serializer(){}[0]
    }

    final object Disabled : dev.kord.common.entity/ExplicitContentFilter // dev.kord.common.entity/ExplicitContentFilter.Disabled|null[0]

    final object MembersWithoutRoles : dev.kord.common.entity/ExplicitContentFilter // dev.kord.common.entity/ExplicitContentFilter.MembersWithoutRoles|null[0]
}

sealed class dev.kord.common.entity/ForumLayoutType { // dev.kord.common.entity/ForumLayoutType|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/ForumLayoutType.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/ForumLayoutType.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/ForumLayoutType.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/ForumLayoutType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/ForumLayoutType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/ForumLayoutType.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/ForumLayoutType // dev.kord.common.entity/ForumLayoutType.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/ForumLayoutType.Companion|null[0]
        final val entries // dev.kord.common.entity/ForumLayoutType.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/ForumLayoutType> // dev.kord.common.entity/ForumLayoutType.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/ForumLayoutType // dev.kord.common.entity/ForumLayoutType.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/ForumLayoutType> // dev.kord.common.entity/ForumLayoutType.Companion.serializer|serializer(){}[0]
    }

    final object GalleryView : dev.kord.common.entity/ForumLayoutType // dev.kord.common.entity/ForumLayoutType.GalleryView|null[0]

    final object ListView : dev.kord.common.entity/ForumLayoutType // dev.kord.common.entity/ForumLayoutType.ListView|null[0]

    final object NotSet : dev.kord.common.entity/ForumLayoutType // dev.kord.common.entity/ForumLayoutType.NotSet|null[0]
}

sealed class dev.kord.common.entity/GuildFeature { // dev.kord.common.entity/GuildFeature|null[0]
    constructor <init>(kotlin/String) // dev.kord.common.entity/GuildFeature.<init>|<init>(kotlin.String){}[0]

    final val value // dev.kord.common.entity/GuildFeature.value|{}value[0]
        final fun <get-value>(): kotlin/String // dev.kord.common.entity/GuildFeature.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/GuildFeature.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/GuildFeature.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/GuildFeature.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.Unknown|null[0]

    final object AnimatedBanner : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.AnimatedBanner|null[0]

    final object AnimatedIcon : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.AnimatedIcon|null[0]

    final object ApplicationCommandPermissionsV2 : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.ApplicationCommandPermissionsV2|null[0]

    final object AutoModeration : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.AutoModeration|null[0]

    final object Banner : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.Banner|null[0]

    final object Community : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.Community|null[0]

    final object Companion { // dev.kord.common.entity/GuildFeature.Companion|null[0]
        final val entries // dev.kord.common.entity/GuildFeature.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/GuildFeature> // dev.kord.common.entity/GuildFeature.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/String): dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.Companion.from|from(kotlin.String){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/GuildFeature> // dev.kord.common.entity/GuildFeature.Companion.serializer|serializer(){}[0]
    }

    final object CreatorMonetizableProvisional : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.CreatorMonetizableProvisional|null[0]

    final object CreatorStorePage : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.CreatorStorePage|null[0]

    final object DeveloperSupportServer : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.DeveloperSupportServer|null[0]

    final object Discoverable : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.Discoverable|null[0]

    final object Featurable : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.Featurable|null[0]

    final object InviteSplash : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.InviteSplash|null[0]

    final object InvitesDisabled : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.InvitesDisabled|null[0]

    final object MemberVerificationGateEnabled : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.MemberVerificationGateEnabled|null[0]

    final object MoreStickers : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.MoreStickers|null[0]

    final object News : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.News|null[0]

    final object Partnered : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.Partnered|null[0]

    final object PreviewEnabled : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.PreviewEnabled|null[0]

    final object RaidAlertsDisabled : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.RaidAlertsDisabled|null[0]

    final object RoleIcons : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.RoleIcons|null[0]

    final object RoleSubscriptionsAvailableForPurchase : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.RoleSubscriptionsAvailableForPurchase|null[0]

    final object RoleSubscriptionsEnabled : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.RoleSubscriptionsEnabled|null[0]

    final object TicketedEventsEnabled : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.TicketedEventsEnabled|null[0]

    final object VIPRegions : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.VIPRegions|null[0]

    final object VanityUrl : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.VanityUrl|null[0]

    final object Verified : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.Verified|null[0]

    final object WelcomeScreenEnabled : dev.kord.common.entity/GuildFeature // dev.kord.common.entity/GuildFeature.WelcomeScreenEnabled|null[0]
}

sealed class dev.kord.common.entity/GuildMemberFlag { // dev.kord.common.entity/GuildMemberFlag|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/GuildMemberFlag.<init>|<init>(kotlin.Int){}[0]

    final val code // dev.kord.common.entity/GuildMemberFlag.code|{}code[0]
        final fun <get-code>(): kotlin/Int // dev.kord.common.entity/GuildMemberFlag.code.<get-code>|<get-code>(){}[0]
    final val shift // dev.kord.common.entity/GuildMemberFlag.shift|{}shift[0]
        final fun <get-shift>(): kotlin/Int // dev.kord.common.entity/GuildMemberFlag.shift.<get-shift>|<get-shift>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/GuildMemberFlag.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/GuildMemberFlag.hashCode|hashCode(){}[0]
    final fun plus(dev.kord.common.entity/GuildMemberFlag): dev.kord.common.entity/GuildMemberFlags // dev.kord.common.entity/GuildMemberFlag.plus|plus(dev.kord.common.entity.GuildMemberFlag){}[0]
    final fun plus(dev.kord.common.entity/GuildMemberFlags): dev.kord.common.entity/GuildMemberFlags // dev.kord.common.entity/GuildMemberFlag.plus|plus(dev.kord.common.entity.GuildMemberFlags){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/GuildMemberFlag.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/GuildMemberFlag // dev.kord.common.entity/GuildMemberFlag.Unknown|null[0]

    final object BypassesVerification : dev.kord.common.entity/GuildMemberFlag // dev.kord.common.entity/GuildMemberFlag.BypassesVerification|null[0]

    final object Companion { // dev.kord.common.entity/GuildMemberFlag.Companion|null[0]
        final val entries // dev.kord.common.entity/GuildMemberFlag.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/GuildMemberFlag> // dev.kord.common.entity/GuildMemberFlag.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun fromShift(kotlin/Int): dev.kord.common.entity/GuildMemberFlag // dev.kord.common.entity/GuildMemberFlag.Companion.fromShift|fromShift(kotlin.Int){}[0]
    }

    final object CompletedOnboarding : dev.kord.common.entity/GuildMemberFlag // dev.kord.common.entity/GuildMemberFlag.CompletedOnboarding|null[0]

    final object DidRejoin : dev.kord.common.entity/GuildMemberFlag // dev.kord.common.entity/GuildMemberFlag.DidRejoin|null[0]

    final object StartedOnboarding : dev.kord.common.entity/GuildMemberFlag // dev.kord.common.entity/GuildMemberFlag.StartedOnboarding|null[0]
}

sealed class dev.kord.common.entity/GuildScheduledEventPrivacyLevel { // dev.kord.common.entity/GuildScheduledEventPrivacyLevel|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/GuildScheduledEventPrivacyLevel.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/GuildScheduledEventPrivacyLevel.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/GuildScheduledEventPrivacyLevel.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/GuildScheduledEventPrivacyLevel.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/GuildScheduledEventPrivacyLevel.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/GuildScheduledEventPrivacyLevel.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/GuildScheduledEventPrivacyLevel // dev.kord.common.entity/GuildScheduledEventPrivacyLevel.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/GuildScheduledEventPrivacyLevel.Companion|null[0]
        final val entries // dev.kord.common.entity/GuildScheduledEventPrivacyLevel.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/GuildScheduledEventPrivacyLevel> // dev.kord.common.entity/GuildScheduledEventPrivacyLevel.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/GuildScheduledEventPrivacyLevel // dev.kord.common.entity/GuildScheduledEventPrivacyLevel.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/GuildScheduledEventPrivacyLevel> // dev.kord.common.entity/GuildScheduledEventPrivacyLevel.Companion.serializer|serializer(){}[0]
    }

    final object GuildOnly : dev.kord.common.entity/GuildScheduledEventPrivacyLevel // dev.kord.common.entity/GuildScheduledEventPrivacyLevel.GuildOnly|null[0]
}

sealed class dev.kord.common.entity/GuildScheduledEventStatus { // dev.kord.common.entity/GuildScheduledEventStatus|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/GuildScheduledEventStatus.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/GuildScheduledEventStatus.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/GuildScheduledEventStatus.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/GuildScheduledEventStatus.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/GuildScheduledEventStatus.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/GuildScheduledEventStatus.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/GuildScheduledEventStatus // dev.kord.common.entity/GuildScheduledEventStatus.Unknown|null[0]

    final object Active : dev.kord.common.entity/GuildScheduledEventStatus // dev.kord.common.entity/GuildScheduledEventStatus.Active|null[0]

    final object Cancelled : dev.kord.common.entity/GuildScheduledEventStatus // dev.kord.common.entity/GuildScheduledEventStatus.Cancelled|null[0]

    final object Companion { // dev.kord.common.entity/GuildScheduledEventStatus.Companion|null[0]
        final val entries // dev.kord.common.entity/GuildScheduledEventStatus.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/GuildScheduledEventStatus> // dev.kord.common.entity/GuildScheduledEventStatus.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/GuildScheduledEventStatus // dev.kord.common.entity/GuildScheduledEventStatus.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/GuildScheduledEventStatus> // dev.kord.common.entity/GuildScheduledEventStatus.Companion.serializer|serializer(){}[0]
    }

    final object Completed : dev.kord.common.entity/GuildScheduledEventStatus // dev.kord.common.entity/GuildScheduledEventStatus.Completed|null[0]

    final object Scheduled : dev.kord.common.entity/GuildScheduledEventStatus // dev.kord.common.entity/GuildScheduledEventStatus.Scheduled|null[0]
}

sealed class dev.kord.common.entity/IntegrationExpireBehavior { // dev.kord.common.entity/IntegrationExpireBehavior|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/IntegrationExpireBehavior.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/IntegrationExpireBehavior.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/IntegrationExpireBehavior.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/IntegrationExpireBehavior.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/IntegrationExpireBehavior.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/IntegrationExpireBehavior.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/IntegrationExpireBehavior // dev.kord.common.entity/IntegrationExpireBehavior.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/IntegrationExpireBehavior.Companion|null[0]
        final val entries // dev.kord.common.entity/IntegrationExpireBehavior.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/IntegrationExpireBehavior> // dev.kord.common.entity/IntegrationExpireBehavior.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/IntegrationExpireBehavior // dev.kord.common.entity/IntegrationExpireBehavior.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/IntegrationExpireBehavior> // dev.kord.common.entity/IntegrationExpireBehavior.Companion.serializer|serializer(){}[0]
    }

    final object Kick : dev.kord.common.entity/IntegrationExpireBehavior // dev.kord.common.entity/IntegrationExpireBehavior.Kick|null[0]

    final object RemoveRole : dev.kord.common.entity/IntegrationExpireBehavior // dev.kord.common.entity/IntegrationExpireBehavior.RemoveRole|null[0]
}

sealed class dev.kord.common.entity/InteractionResponseType { // dev.kord.common.entity/InteractionResponseType|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/InteractionResponseType.<init>|<init>(kotlin.Int){}[0]

    final val type // dev.kord.common.entity/InteractionResponseType.type|{}type[0]
        final fun <get-type>(): kotlin/Int // dev.kord.common.entity/InteractionResponseType.type.<get-type>|<get-type>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/InteractionResponseType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/InteractionResponseType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/InteractionResponseType.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/InteractionResponseType // dev.kord.common.entity/InteractionResponseType.Unknown|null[0]

    final object ApplicationCommandAutoCompleteResult : dev.kord.common.entity/InteractionResponseType // dev.kord.common.entity/InteractionResponseType.ApplicationCommandAutoCompleteResult|null[0]

    final object ChannelMessageWithSource : dev.kord.common.entity/InteractionResponseType // dev.kord.common.entity/InteractionResponseType.ChannelMessageWithSource|null[0]

    final object Companion { // dev.kord.common.entity/InteractionResponseType.Companion|null[0]
        final val entries // dev.kord.common.entity/InteractionResponseType.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/InteractionResponseType> // dev.kord.common.entity/InteractionResponseType.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/InteractionResponseType // dev.kord.common.entity/InteractionResponseType.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/InteractionResponseType> // dev.kord.common.entity/InteractionResponseType.Companion.serializer|serializer(){}[0]
    }

    final object DeferredChannelMessageWithSource : dev.kord.common.entity/InteractionResponseType // dev.kord.common.entity/InteractionResponseType.DeferredChannelMessageWithSource|null[0]

    final object DeferredUpdateMessage : dev.kord.common.entity/InteractionResponseType // dev.kord.common.entity/InteractionResponseType.DeferredUpdateMessage|null[0]

    final object Modal : dev.kord.common.entity/InteractionResponseType // dev.kord.common.entity/InteractionResponseType.Modal|null[0]

    final object Pong : dev.kord.common.entity/InteractionResponseType // dev.kord.common.entity/InteractionResponseType.Pong|null[0]

    final object UpdateMessage : dev.kord.common.entity/InteractionResponseType // dev.kord.common.entity/InteractionResponseType.UpdateMessage|null[0]
}

sealed class dev.kord.common.entity/InteractionType { // dev.kord.common.entity/InteractionType|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/InteractionType.<init>|<init>(kotlin.Int){}[0]

    final val type // dev.kord.common.entity/InteractionType.type|{}type[0]
        final fun <get-type>(): kotlin/Int // dev.kord.common.entity/InteractionType.type.<get-type>|<get-type>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/InteractionType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/InteractionType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/InteractionType.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/InteractionType // dev.kord.common.entity/InteractionType.Unknown|null[0]

    final object ApplicationCommand : dev.kord.common.entity/InteractionType // dev.kord.common.entity/InteractionType.ApplicationCommand|null[0]

    final object AutoComplete : dev.kord.common.entity/InteractionType // dev.kord.common.entity/InteractionType.AutoComplete|null[0]

    final object Companion { // dev.kord.common.entity/InteractionType.Companion|null[0]
        final val entries // dev.kord.common.entity/InteractionType.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/InteractionType> // dev.kord.common.entity/InteractionType.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/InteractionType // dev.kord.common.entity/InteractionType.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/InteractionType> // dev.kord.common.entity/InteractionType.Companion.serializer|serializer(){}[0]
    }

    final object Component : dev.kord.common.entity/InteractionType // dev.kord.common.entity/InteractionType.Component|null[0]

    final object ModalSubmit : dev.kord.common.entity/InteractionType // dev.kord.common.entity/InteractionType.ModalSubmit|null[0]

    final object Ping : dev.kord.common.entity/InteractionType // dev.kord.common.entity/InteractionType.Ping|null[0]
}

sealed class dev.kord.common.entity/InviteTargetType { // dev.kord.common.entity/InviteTargetType|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/InviteTargetType.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/InviteTargetType.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/InviteTargetType.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/InviteTargetType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/InviteTargetType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/InviteTargetType.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/InviteTargetType // dev.kord.common.entity/InviteTargetType.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/InviteTargetType.Companion|null[0]
        final val entries // dev.kord.common.entity/InviteTargetType.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/InviteTargetType> // dev.kord.common.entity/InviteTargetType.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/InviteTargetType // dev.kord.common.entity/InviteTargetType.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/InviteTargetType> // dev.kord.common.entity/InviteTargetType.Companion.serializer|serializer(){}[0]
    }

    final object EmbeddedApplication : dev.kord.common.entity/InviteTargetType // dev.kord.common.entity/InviteTargetType.EmbeddedApplication|null[0]

    final object Stream : dev.kord.common.entity/InviteTargetType // dev.kord.common.entity/InviteTargetType.Stream|null[0]
}

sealed class dev.kord.common.entity/MFALevel { // dev.kord.common.entity/MFALevel|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/MFALevel.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/MFALevel.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/MFALevel.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/MFALevel.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/MFALevel.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/MFALevel.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/MFALevel // dev.kord.common.entity/MFALevel.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/MFALevel.Companion|null[0]
        final val entries // dev.kord.common.entity/MFALevel.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/MFALevel> // dev.kord.common.entity/MFALevel.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/MFALevel // dev.kord.common.entity/MFALevel.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/MFALevel> // dev.kord.common.entity/MFALevel.Companion.serializer|serializer(){}[0]
    }

    final object Elevated : dev.kord.common.entity/MFALevel // dev.kord.common.entity/MFALevel.Elevated|null[0]

    final object None : dev.kord.common.entity/MFALevel // dev.kord.common.entity/MFALevel.None|null[0]
}

sealed class dev.kord.common.entity/MessageActivityType { // dev.kord.common.entity/MessageActivityType|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/MessageActivityType.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/MessageActivityType.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/MessageActivityType.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/MessageActivityType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/MessageActivityType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/MessageActivityType.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/MessageActivityType // dev.kord.common.entity/MessageActivityType.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/MessageActivityType.Companion|null[0]
        final val entries // dev.kord.common.entity/MessageActivityType.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/MessageActivityType> // dev.kord.common.entity/MessageActivityType.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/MessageActivityType // dev.kord.common.entity/MessageActivityType.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/MessageActivityType> // dev.kord.common.entity/MessageActivityType.Companion.serializer|serializer(){}[0]
    }

    final object Join : dev.kord.common.entity/MessageActivityType // dev.kord.common.entity/MessageActivityType.Join|null[0]

    final object JoinRequest : dev.kord.common.entity/MessageActivityType // dev.kord.common.entity/MessageActivityType.JoinRequest|null[0]

    final object Listen : dev.kord.common.entity/MessageActivityType // dev.kord.common.entity/MessageActivityType.Listen|null[0]

    final object Spectate : dev.kord.common.entity/MessageActivityType // dev.kord.common.entity/MessageActivityType.Spectate|null[0]
}

sealed class dev.kord.common.entity/MessageFlag { // dev.kord.common.entity/MessageFlag|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/MessageFlag.<init>|<init>(kotlin.Int){}[0]

    final val code // dev.kord.common.entity/MessageFlag.code|{}code[0]
        final fun <get-code>(): kotlin/Int // dev.kord.common.entity/MessageFlag.code.<get-code>|<get-code>(){}[0]
    final val shift // dev.kord.common.entity/MessageFlag.shift|{}shift[0]
        final fun <get-shift>(): kotlin/Int // dev.kord.common.entity/MessageFlag.shift.<get-shift>|<get-shift>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/MessageFlag.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/MessageFlag.hashCode|hashCode(){}[0]
    final fun plus(dev.kord.common.entity/MessageFlag): dev.kord.common.entity/MessageFlags // dev.kord.common.entity/MessageFlag.plus|plus(dev.kord.common.entity.MessageFlag){}[0]
    final fun plus(dev.kord.common.entity/MessageFlags): dev.kord.common.entity/MessageFlags // dev.kord.common.entity/MessageFlag.plus|plus(dev.kord.common.entity.MessageFlags){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/MessageFlag.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/MessageFlag // dev.kord.common.entity/MessageFlag.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/MessageFlag.Companion|null[0]
        final val entries // dev.kord.common.entity/MessageFlag.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/MessageFlag> // dev.kord.common.entity/MessageFlag.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun fromShift(kotlin/Int): dev.kord.common.entity/MessageFlag // dev.kord.common.entity/MessageFlag.Companion.fromShift|fromShift(kotlin.Int){}[0]
    }

    final object CrossPosted : dev.kord.common.entity/MessageFlag // dev.kord.common.entity/MessageFlag.CrossPosted|null[0]

    final object Ephemeral : dev.kord.common.entity/MessageFlag // dev.kord.common.entity/MessageFlag.Ephemeral|null[0]

    final object FailedToMentionSomeRolesInThread : dev.kord.common.entity/MessageFlag // dev.kord.common.entity/MessageFlag.FailedToMentionSomeRolesInThread|null[0]

    final object HasThread : dev.kord.common.entity/MessageFlag // dev.kord.common.entity/MessageFlag.HasThread|null[0]

    final object IsCrossPost : dev.kord.common.entity/MessageFlag // dev.kord.common.entity/MessageFlag.IsCrossPost|null[0]

    final object IsVoiceMessage : dev.kord.common.entity/MessageFlag // dev.kord.common.entity/MessageFlag.IsVoiceMessage|null[0]

    final object Loading : dev.kord.common.entity/MessageFlag // dev.kord.common.entity/MessageFlag.Loading|null[0]

    final object SourceMessageDeleted : dev.kord.common.entity/MessageFlag // dev.kord.common.entity/MessageFlag.SourceMessageDeleted|null[0]

    final object SuppressEmbeds : dev.kord.common.entity/MessageFlag // dev.kord.common.entity/MessageFlag.SuppressEmbeds|null[0]

    final object SuppressNotifications : dev.kord.common.entity/MessageFlag // dev.kord.common.entity/MessageFlag.SuppressNotifications|null[0]

    final object Urgent : dev.kord.common.entity/MessageFlag // dev.kord.common.entity/MessageFlag.Urgent|null[0]
}

sealed class dev.kord.common.entity/MessageStickerType { // dev.kord.common.entity/MessageStickerType|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/MessageStickerType.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/MessageStickerType.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/MessageStickerType.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/MessageStickerType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/MessageStickerType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/MessageStickerType.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/MessageStickerType // dev.kord.common.entity/MessageStickerType.Unknown|null[0]

    final object APNG : dev.kord.common.entity/MessageStickerType // dev.kord.common.entity/MessageStickerType.APNG|null[0]

    final object Companion { // dev.kord.common.entity/MessageStickerType.Companion|null[0]
        final val entries // dev.kord.common.entity/MessageStickerType.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/MessageStickerType> // dev.kord.common.entity/MessageStickerType.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/MessageStickerType // dev.kord.common.entity/MessageStickerType.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/MessageStickerType> // dev.kord.common.entity/MessageStickerType.Companion.serializer|serializer(){}[0]
    }

    final object GIF : dev.kord.common.entity/MessageStickerType // dev.kord.common.entity/MessageStickerType.GIF|null[0]

    final object LOTTIE : dev.kord.common.entity/MessageStickerType // dev.kord.common.entity/MessageStickerType.LOTTIE|null[0]

    final object PNG : dev.kord.common.entity/MessageStickerType // dev.kord.common.entity/MessageStickerType.PNG|null[0]
}

sealed class dev.kord.common.entity/MessageType { // dev.kord.common.entity/MessageType|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/MessageType.<init>|<init>(kotlin.Int){}[0]

    final val code // dev.kord.common.entity/MessageType.code|{}code[0]
        final fun <get-code>(): kotlin/Int // dev.kord.common.entity/MessageType.code.<get-code>|<get-code>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/MessageType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/MessageType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/MessageType.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.Unknown|null[0]

    final object AutoModerationAction : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.AutoModerationAction|null[0]

    final object Call : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.Call|null[0]

    final object ChannelFollowAdd : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.ChannelFollowAdd|null[0]

    final object ChannelIconChange : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.ChannelIconChange|null[0]

    final object ChannelNameChange : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.ChannelNameChange|null[0]

    final object ChannelPinnedMessage : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.ChannelPinnedMessage|null[0]

    final object ChatInputCommand : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.ChatInputCommand|null[0]

    final object Companion { // dev.kord.common.entity/MessageType.Companion|null[0]
        final val entries // dev.kord.common.entity/MessageType.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/MessageType> // dev.kord.common.entity/MessageType.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/MessageType> // dev.kord.common.entity/MessageType.Companion.serializer|serializer(){}[0]
    }

    final object ContextMenuCommand : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.ContextMenuCommand|null[0]

    final object Default : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.Default|null[0]

    final object GuildApplicationPremiumSubscription : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.GuildApplicationPremiumSubscription|null[0]

    final object GuildBoost : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.GuildBoost|null[0]

    final object GuildBoostTier1 : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.GuildBoostTier1|null[0]

    final object GuildBoostTier2 : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.GuildBoostTier2|null[0]

    final object GuildBoostTier3 : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.GuildBoostTier3|null[0]

    final object GuildDiscoveryDisqualified : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.GuildDiscoveryDisqualified|null[0]

    final object GuildDiscoveryGracePeriodFinalWarning : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.GuildDiscoveryGracePeriodFinalWarning|null[0]

    final object GuildDiscoveryGracePeriodInitialWarning : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.GuildDiscoveryGracePeriodInitialWarning|null[0]

    final object GuildDiscoveryRequalified : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.GuildDiscoveryRequalified|null[0]

    final object GuildInviteReminder : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.GuildInviteReminder|null[0]

    final object InteractionPremiumUpsell : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.InteractionPremiumUpsell|null[0]

    final object RecipientAdd : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.RecipientAdd|null[0]

    final object RecipientRemove : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.RecipientRemove|null[0]

    final object Reply : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.Reply|null[0]

    final object RoleSubscriptionPurchase : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.RoleSubscriptionPurchase|null[0]

    final object StageEnd : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.StageEnd|null[0]

    final object StageSpeaker : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.StageSpeaker|null[0]

    final object StageStart : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.StageStart|null[0]

    final object StageTopic : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.StageTopic|null[0]

    final object ThreadCreated : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.ThreadCreated|null[0]

    final object ThreadStarterMessage : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.ThreadStarterMessage|null[0]

    final object UserJoin : dev.kord.common.entity/MessageType // dev.kord.common.entity/MessageType.UserJoin|null[0]
}

sealed class dev.kord.common.entity/NsfwLevel { // dev.kord.common.entity/NsfwLevel|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/NsfwLevel.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/NsfwLevel.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/NsfwLevel.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/NsfwLevel.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/NsfwLevel.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/NsfwLevel.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/NsfwLevel // dev.kord.common.entity/NsfwLevel.Unknown|null[0]

    final object AgeRestricted : dev.kord.common.entity/NsfwLevel // dev.kord.common.entity/NsfwLevel.AgeRestricted|null[0]

    final object Companion { // dev.kord.common.entity/NsfwLevel.Companion|null[0]
        final val entries // dev.kord.common.entity/NsfwLevel.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/NsfwLevel> // dev.kord.common.entity/NsfwLevel.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/NsfwLevel // dev.kord.common.entity/NsfwLevel.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/NsfwLevel> // dev.kord.common.entity/NsfwLevel.Companion.serializer|serializer(){}[0]
    }

    final object Default : dev.kord.common.entity/NsfwLevel // dev.kord.common.entity/NsfwLevel.Default|null[0]

    final object Explicit : dev.kord.common.entity/NsfwLevel // dev.kord.common.entity/NsfwLevel.Explicit|null[0]

    final object Safe : dev.kord.common.entity/NsfwLevel // dev.kord.common.entity/NsfwLevel.Safe|null[0]
}

sealed class dev.kord.common.entity/OnboardingMode { // dev.kord.common.entity/OnboardingMode|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/OnboardingMode.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/OnboardingMode.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/OnboardingMode.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/OnboardingMode.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/OnboardingMode.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/OnboardingMode.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/OnboardingMode // dev.kord.common.entity/OnboardingMode.Unknown|null[0]

    final object Advanced : dev.kord.common.entity/OnboardingMode // dev.kord.common.entity/OnboardingMode.Advanced|null[0]

    final object Companion { // dev.kord.common.entity/OnboardingMode.Companion|null[0]
        final val entries // dev.kord.common.entity/OnboardingMode.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/OnboardingMode> // dev.kord.common.entity/OnboardingMode.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/OnboardingMode // dev.kord.common.entity/OnboardingMode.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/OnboardingMode> // dev.kord.common.entity/OnboardingMode.Companion.serializer|serializer(){}[0]
    }

    final object Default : dev.kord.common.entity/OnboardingMode // dev.kord.common.entity/OnboardingMode.Default|null[0]
}

sealed class dev.kord.common.entity/OnboardingPromptType { // dev.kord.common.entity/OnboardingPromptType|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/OnboardingPromptType.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/OnboardingPromptType.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/OnboardingPromptType.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/OnboardingPromptType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/OnboardingPromptType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/OnboardingPromptType.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/OnboardingPromptType // dev.kord.common.entity/OnboardingPromptType.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/OnboardingPromptType.Companion|null[0]
        final val entries // dev.kord.common.entity/OnboardingPromptType.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/OnboardingPromptType> // dev.kord.common.entity/OnboardingPromptType.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/OnboardingPromptType // dev.kord.common.entity/OnboardingPromptType.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/OnboardingPromptType> // dev.kord.common.entity/OnboardingPromptType.Companion.serializer|serializer(){}[0]
    }

    final object Dropdown : dev.kord.common.entity/OnboardingPromptType // dev.kord.common.entity/OnboardingPromptType.Dropdown|null[0]

    final object MultipleChoice : dev.kord.common.entity/OnboardingPromptType // dev.kord.common.entity/OnboardingPromptType.MultipleChoice|null[0]
}

sealed class dev.kord.common.entity/Option { // dev.kord.common.entity/Option|null[0]
    constructor <init>() // dev.kord.common.entity/Option.<init>|<init>(){}[0]

    abstract val name // dev.kord.common.entity/Option.name|{}name[0]
        abstract fun <get-name>(): kotlin/String // dev.kord.common.entity/Option.name.<get-name>|<get-name>(){}[0]
    abstract val type // dev.kord.common.entity/Option.type|{}type[0]
        abstract fun <get-type>(): dev.kord.common.entity/ApplicationCommandOptionType // dev.kord.common.entity/Option.type.<get-type>|<get-type>(){}[0]

    final object Companion { // dev.kord.common.entity/Option.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/Option> // dev.kord.common.entity/Option.Companion.serializer|serializer(){}[0]
    }
}

sealed class dev.kord.common.entity/OverwriteType { // dev.kord.common.entity/OverwriteType|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/OverwriteType.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/OverwriteType.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/OverwriteType.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/OverwriteType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/OverwriteType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/OverwriteType.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/OverwriteType // dev.kord.common.entity/OverwriteType.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/OverwriteType.Companion|null[0]
        final val entries // dev.kord.common.entity/OverwriteType.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/OverwriteType> // dev.kord.common.entity/OverwriteType.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/OverwriteType // dev.kord.common.entity/OverwriteType.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/OverwriteType> // dev.kord.common.entity/OverwriteType.Companion.serializer|serializer(){}[0]
    }

    final object Member : dev.kord.common.entity/OverwriteType // dev.kord.common.entity/OverwriteType.Member|null[0]

    final object Role : dev.kord.common.entity/OverwriteType // dev.kord.common.entity/OverwriteType.Role|null[0]
}

sealed class dev.kord.common.entity/Permission { // dev.kord.common.entity/Permission|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/Permission.<init>|<init>(kotlin.Int){}[0]

    final val code // dev.kord.common.entity/Permission.code|{}code[0]
        final fun <get-code>(): dev.kord.common/DiscordBitSet // dev.kord.common.entity/Permission.code.<get-code>|<get-code>(){}[0]
    final val shift // dev.kord.common.entity/Permission.shift|{}shift[0]
        final fun <get-shift>(): kotlin/Int // dev.kord.common.entity/Permission.shift.<get-shift>|<get-shift>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/Permission.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/Permission.hashCode|hashCode(){}[0]
    final fun plus(dev.kord.common.entity/Permission): dev.kord.common.entity/Permissions // dev.kord.common.entity/Permission.plus|plus(dev.kord.common.entity.Permission){}[0]
    final fun plus(dev.kord.common.entity/Permissions): dev.kord.common.entity/Permissions // dev.kord.common.entity/Permission.plus|plus(dev.kord.common.entity.Permissions){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/Permission.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.Unknown|null[0]

    final object AddReactions : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.AddReactions|null[0]

    final object Administrator : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.Administrator|null[0]

    final object AttachFiles : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.AttachFiles|null[0]

    final object BanMembers : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.BanMembers|null[0]

    final object ChangeNickname : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.ChangeNickname|null[0]

    final object Companion { // dev.kord.common.entity/Permission.Companion|null[0]
        final val entries // dev.kord.common.entity/Permission.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/Permission> // dev.kord.common.entity/Permission.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun fromShift(kotlin/Int): dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.Companion.fromShift|fromShift(kotlin.Int){}[0]
    }

    final object Connect : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.Connect|null[0]

    final object CreateEvents : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.CreateEvents|null[0]

    final object CreateGuildExpressions : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.CreateGuildExpressions|null[0]

    final object CreateInstantInvite : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.CreateInstantInvite|null[0]

    final object CreatePrivateThreads : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.CreatePrivateThreads|null[0]

    final object CreatePublicThreads : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.CreatePublicThreads|null[0]

    final object DeafenMembers : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.DeafenMembers|null[0]

    final object EmbedLinks : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.EmbedLinks|null[0]

    final object KickMembers : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.KickMembers|null[0]

    final object ManageChannels : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.ManageChannels|null[0]

    final object ManageEvents : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.ManageEvents|null[0]

    final object ManageGuild : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.ManageGuild|null[0]

    final object ManageGuildExpressions : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.ManageGuildExpressions|null[0]

    final object ManageMessages : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.ManageMessages|null[0]

    final object ManageNicknames : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.ManageNicknames|null[0]

    final object ManageRoles : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.ManageRoles|null[0]

    final object ManageThreads : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.ManageThreads|null[0]

    final object ManageWebhooks : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.ManageWebhooks|null[0]

    final object MentionEveryone : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.MentionEveryone|null[0]

    final object ModerateMembers : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.ModerateMembers|null[0]

    final object MoveMembers : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.MoveMembers|null[0]

    final object MuteMembers : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.MuteMembers|null[0]

    final object PrioritySpeaker : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.PrioritySpeaker|null[0]

    final object ReadMessageHistory : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.ReadMessageHistory|null[0]

    final object RequestToSpeak : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.RequestToSpeak|null[0]

    final object SendMessages : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.SendMessages|null[0]

    final object SendMessagesInThreads : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.SendMessagesInThreads|null[0]

    final object SendTTSMessages : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.SendTTSMessages|null[0]

    final object SendVoiceMessages : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.SendVoiceMessages|null[0]

    final object Speak : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.Speak|null[0]

    final object Stream : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.Stream|null[0]

    final object UseApplicationCommands : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.UseApplicationCommands|null[0]

    final object UseEmbeddedActivities : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.UseEmbeddedActivities|null[0]

    final object UseExternalEmojis : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.UseExternalEmojis|null[0]

    final object UseExternalSounds : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.UseExternalSounds|null[0]

    final object UseExternalStickers : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.UseExternalStickers|null[0]

    final object UseSoundboard : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.UseSoundboard|null[0]

    final object UseVAD : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.UseVAD|null[0]

    final object ViewAuditLog : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.ViewAuditLog|null[0]

    final object ViewChannel : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.ViewChannel|null[0]

    final object ViewCreatorMonetizationAnalytics : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.ViewCreatorMonetizationAnalytics|null[0]

    final object ViewGuildInsights : dev.kord.common.entity/Permission // dev.kord.common.entity/Permission.ViewGuildInsights|null[0]
}

sealed class dev.kord.common.entity/PremiumTier { // dev.kord.common.entity/PremiumTier|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/PremiumTier.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/PremiumTier.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/PremiumTier.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/PremiumTier.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/PremiumTier.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/PremiumTier.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/PremiumTier // dev.kord.common.entity/PremiumTier.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/PremiumTier.Companion|null[0]
        final val entries // dev.kord.common.entity/PremiumTier.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/PremiumTier> // dev.kord.common.entity/PremiumTier.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/PremiumTier // dev.kord.common.entity/PremiumTier.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/PremiumTier> // dev.kord.common.entity/PremiumTier.Companion.serializer|serializer(){}[0]
    }

    final object None : dev.kord.common.entity/PremiumTier // dev.kord.common.entity/PremiumTier.None|null[0]

    final object One : dev.kord.common.entity/PremiumTier // dev.kord.common.entity/PremiumTier.One|null[0]

    final object Three : dev.kord.common.entity/PremiumTier // dev.kord.common.entity/PremiumTier.Three|null[0]

    final object Two : dev.kord.common.entity/PremiumTier // dev.kord.common.entity/PremiumTier.Two|null[0]
}

sealed class dev.kord.common.entity/PresenceStatus { // dev.kord.common.entity/PresenceStatus|null[0]
    constructor <init>(kotlin/String) // dev.kord.common.entity/PresenceStatus.<init>|<init>(kotlin.String){}[0]

    final val value // dev.kord.common.entity/PresenceStatus.value|{}value[0]
        final fun <get-value>(): kotlin/String // dev.kord.common.entity/PresenceStatus.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/PresenceStatus.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/PresenceStatus.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/PresenceStatus.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/PresenceStatus // dev.kord.common.entity/PresenceStatus.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/PresenceStatus.Companion|null[0]
        final val entries // dev.kord.common.entity/PresenceStatus.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/PresenceStatus> // dev.kord.common.entity/PresenceStatus.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/String): dev.kord.common.entity/PresenceStatus // dev.kord.common.entity/PresenceStatus.Companion.from|from(kotlin.String){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/PresenceStatus> // dev.kord.common.entity/PresenceStatus.Companion.serializer|serializer(){}[0]
    }

    final object DoNotDisturb : dev.kord.common.entity/PresenceStatus // dev.kord.common.entity/PresenceStatus.DoNotDisturb|null[0]

    final object Idle : dev.kord.common.entity/PresenceStatus // dev.kord.common.entity/PresenceStatus.Idle|null[0]

    final object Invisible : dev.kord.common.entity/PresenceStatus // dev.kord.common.entity/PresenceStatus.Invisible|null[0]

    final object Offline : dev.kord.common.entity/PresenceStatus // dev.kord.common.entity/PresenceStatus.Offline|null[0]

    final object Online : dev.kord.common.entity/PresenceStatus // dev.kord.common.entity/PresenceStatus.Online|null[0]
}

sealed class dev.kord.common.entity/RoleFlag { // dev.kord.common.entity/RoleFlag|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/RoleFlag.<init>|<init>(kotlin.Int){}[0]

    final val shift // dev.kord.common.entity/RoleFlag.shift|{}shift[0]
        final fun <get-shift>(): kotlin/Int // dev.kord.common.entity/RoleFlag.shift.<get-shift>|<get-shift>(){}[0]
    final val value // dev.kord.common.entity/RoleFlag.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/RoleFlag.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/RoleFlag.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/RoleFlag.hashCode|hashCode(){}[0]
    final fun plus(dev.kord.common.entity/RoleFlag): dev.kord.common.entity/RoleFlags // dev.kord.common.entity/RoleFlag.plus|plus(dev.kord.common.entity.RoleFlag){}[0]
    final fun plus(dev.kord.common.entity/RoleFlags): dev.kord.common.entity/RoleFlags // dev.kord.common.entity/RoleFlag.plus|plus(dev.kord.common.entity.RoleFlags){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/RoleFlag.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/RoleFlag // dev.kord.common.entity/RoleFlag.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/RoleFlag.Companion|null[0]
        final val entries // dev.kord.common.entity/RoleFlag.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/RoleFlag> // dev.kord.common.entity/RoleFlag.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun fromShift(kotlin/Int): dev.kord.common.entity/RoleFlag // dev.kord.common.entity/RoleFlag.Companion.fromShift|fromShift(kotlin.Int){}[0]
    }

    final object InPrompt : dev.kord.common.entity/RoleFlag // dev.kord.common.entity/RoleFlag.InPrompt|null[0]
}

sealed class dev.kord.common.entity/ScheduledEntityType { // dev.kord.common.entity/ScheduledEntityType|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/ScheduledEntityType.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/ScheduledEntityType.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/ScheduledEntityType.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/ScheduledEntityType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/ScheduledEntityType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/ScheduledEntityType.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/ScheduledEntityType // dev.kord.common.entity/ScheduledEntityType.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/ScheduledEntityType.Companion|null[0]
        final val entries // dev.kord.common.entity/ScheduledEntityType.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/ScheduledEntityType> // dev.kord.common.entity/ScheduledEntityType.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/ScheduledEntityType // dev.kord.common.entity/ScheduledEntityType.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/ScheduledEntityType> // dev.kord.common.entity/ScheduledEntityType.Companion.serializer|serializer(){}[0]
    }

    final object External : dev.kord.common.entity/ScheduledEntityType // dev.kord.common.entity/ScheduledEntityType.External|null[0]

    final object StageInstance : dev.kord.common.entity/ScheduledEntityType // dev.kord.common.entity/ScheduledEntityType.StageInstance|null[0]

    final object Voice : dev.kord.common.entity/ScheduledEntityType // dev.kord.common.entity/ScheduledEntityType.Voice|null[0]
}

sealed class dev.kord.common.entity/SelectDefaultValueType { // dev.kord.common.entity/SelectDefaultValueType|null[0]
    constructor <init>(kotlin/String) // dev.kord.common.entity/SelectDefaultValueType.<init>|<init>(kotlin.String){}[0]

    final val value // dev.kord.common.entity/SelectDefaultValueType.value|{}value[0]
        final fun <get-value>(): kotlin/String // dev.kord.common.entity/SelectDefaultValueType.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/SelectDefaultValueType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/SelectDefaultValueType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/SelectDefaultValueType.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/SelectDefaultValueType // dev.kord.common.entity/SelectDefaultValueType.Unknown|null[0]

    final object Channel : dev.kord.common.entity/SelectDefaultValueType // dev.kord.common.entity/SelectDefaultValueType.Channel|null[0]

    final object Companion { // dev.kord.common.entity/SelectDefaultValueType.Companion|null[0]
        final val entries // dev.kord.common.entity/SelectDefaultValueType.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/SelectDefaultValueType> // dev.kord.common.entity/SelectDefaultValueType.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/String): dev.kord.common.entity/SelectDefaultValueType // dev.kord.common.entity/SelectDefaultValueType.Companion.from|from(kotlin.String){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/SelectDefaultValueType> // dev.kord.common.entity/SelectDefaultValueType.Companion.serializer|serializer(){}[0]
    }

    final object Role : dev.kord.common.entity/SelectDefaultValueType // dev.kord.common.entity/SelectDefaultValueType.Role|null[0]

    final object User : dev.kord.common.entity/SelectDefaultValueType // dev.kord.common.entity/SelectDefaultValueType.User|null[0]
}

sealed class dev.kord.common.entity/SortOrderType { // dev.kord.common.entity/SortOrderType|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/SortOrderType.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/SortOrderType.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/SortOrderType.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/SortOrderType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/SortOrderType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/SortOrderType.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/SortOrderType // dev.kord.common.entity/SortOrderType.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/SortOrderType.Companion|null[0]
        final val entries // dev.kord.common.entity/SortOrderType.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/SortOrderType> // dev.kord.common.entity/SortOrderType.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/SortOrderType // dev.kord.common.entity/SortOrderType.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/SortOrderType> // dev.kord.common.entity/SortOrderType.Companion.serializer|serializer(){}[0]
    }

    final object CreationDate : dev.kord.common.entity/SortOrderType // dev.kord.common.entity/SortOrderType.CreationDate|null[0]

    final object LatestActivity : dev.kord.common.entity/SortOrderType // dev.kord.common.entity/SortOrderType.LatestActivity|null[0]
}

sealed class dev.kord.common.entity/StageInstancePrivacyLevel { // dev.kord.common.entity/StageInstancePrivacyLevel|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/StageInstancePrivacyLevel.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/StageInstancePrivacyLevel.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/StageInstancePrivacyLevel.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/StageInstancePrivacyLevel.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/StageInstancePrivacyLevel.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/StageInstancePrivacyLevel.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/StageInstancePrivacyLevel // dev.kord.common.entity/StageInstancePrivacyLevel.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/StageInstancePrivacyLevel.Companion|null[0]
        final val entries // dev.kord.common.entity/StageInstancePrivacyLevel.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/StageInstancePrivacyLevel> // dev.kord.common.entity/StageInstancePrivacyLevel.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/StageInstancePrivacyLevel // dev.kord.common.entity/StageInstancePrivacyLevel.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/StageInstancePrivacyLevel> // dev.kord.common.entity/StageInstancePrivacyLevel.Companion.serializer|serializer(){}[0]
    }

    final object GuildOnly : dev.kord.common.entity/StageInstancePrivacyLevel // dev.kord.common.entity/StageInstancePrivacyLevel.GuildOnly|null[0]

    final object Public : dev.kord.common.entity/StageInstancePrivacyLevel // dev.kord.common.entity/StageInstancePrivacyLevel.Public|null[0]
}

sealed class dev.kord.common.entity/SystemChannelFlag { // dev.kord.common.entity/SystemChannelFlag|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/SystemChannelFlag.<init>|<init>(kotlin.Int){}[0]

    final val code // dev.kord.common.entity/SystemChannelFlag.code|{}code[0]
        final fun <get-code>(): kotlin/Int // dev.kord.common.entity/SystemChannelFlag.code.<get-code>|<get-code>(){}[0]
    final val shift // dev.kord.common.entity/SystemChannelFlag.shift|{}shift[0]
        final fun <get-shift>(): kotlin/Int // dev.kord.common.entity/SystemChannelFlag.shift.<get-shift>|<get-shift>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/SystemChannelFlag.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/SystemChannelFlag.hashCode|hashCode(){}[0]
    final fun plus(dev.kord.common.entity/SystemChannelFlag): dev.kord.common.entity/SystemChannelFlags // dev.kord.common.entity/SystemChannelFlag.plus|plus(dev.kord.common.entity.SystemChannelFlag){}[0]
    final fun plus(dev.kord.common.entity/SystemChannelFlags): dev.kord.common.entity/SystemChannelFlags // dev.kord.common.entity/SystemChannelFlag.plus|plus(dev.kord.common.entity.SystemChannelFlags){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/SystemChannelFlag.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/SystemChannelFlag // dev.kord.common.entity/SystemChannelFlag.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/SystemChannelFlag.Companion|null[0]
        final val entries // dev.kord.common.entity/SystemChannelFlag.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/SystemChannelFlag> // dev.kord.common.entity/SystemChannelFlag.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun fromShift(kotlin/Int): dev.kord.common.entity/SystemChannelFlag // dev.kord.common.entity/SystemChannelFlag.Companion.fromShift|fromShift(kotlin.Int){}[0]
    }

    final object SuppressGuildReminderNotifications : dev.kord.common.entity/SystemChannelFlag // dev.kord.common.entity/SystemChannelFlag.SuppressGuildReminderNotifications|null[0]

    final object SuppressJoinNotificationReplies : dev.kord.common.entity/SystemChannelFlag // dev.kord.common.entity/SystemChannelFlag.SuppressJoinNotificationReplies|null[0]

    final object SuppressJoinNotifications : dev.kord.common.entity/SystemChannelFlag // dev.kord.common.entity/SystemChannelFlag.SuppressJoinNotifications|null[0]

    final object SuppressPremiumSubscriptions : dev.kord.common.entity/SystemChannelFlag // dev.kord.common.entity/SystemChannelFlag.SuppressPremiumSubscriptions|null[0]

    final object SuppressRoleSubscriptionPurchaseNotificationReplies : dev.kord.common.entity/SystemChannelFlag // dev.kord.common.entity/SystemChannelFlag.SuppressRoleSubscriptionPurchaseNotificationReplies|null[0]

    final object SuppressRoleSubscriptionPurchaseNotifications : dev.kord.common.entity/SystemChannelFlag // dev.kord.common.entity/SystemChannelFlag.SuppressRoleSubscriptionPurchaseNotifications|null[0]
}

sealed class dev.kord.common.entity/TeamMemberRole { // dev.kord.common.entity/TeamMemberRole|null[0]
    constructor <init>(kotlin/String) // dev.kord.common.entity/TeamMemberRole.<init>|<init>(kotlin.String){}[0]

    final val value // dev.kord.common.entity/TeamMemberRole.value|{}value[0]
        final fun <get-value>(): kotlin/String // dev.kord.common.entity/TeamMemberRole.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/TeamMemberRole.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/TeamMemberRole.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/TeamMemberRole.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/TeamMemberRole // dev.kord.common.entity/TeamMemberRole.Unknown|null[0]

    final object Admin : dev.kord.common.entity/TeamMemberRole // dev.kord.common.entity/TeamMemberRole.Admin|null[0]

    final object Companion { // dev.kord.common.entity/TeamMemberRole.Companion|null[0]
        final val entries // dev.kord.common.entity/TeamMemberRole.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/TeamMemberRole> // dev.kord.common.entity/TeamMemberRole.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/String): dev.kord.common.entity/TeamMemberRole // dev.kord.common.entity/TeamMemberRole.Companion.from|from(kotlin.String){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/TeamMemberRole> // dev.kord.common.entity/TeamMemberRole.Companion.serializer|serializer(){}[0]
    }

    final object Developer : dev.kord.common.entity/TeamMemberRole // dev.kord.common.entity/TeamMemberRole.Developer|null[0]

    final object ReadOnly : dev.kord.common.entity/TeamMemberRole // dev.kord.common.entity/TeamMemberRole.ReadOnly|null[0]
}

sealed class dev.kord.common.entity/TeamMembershipState { // dev.kord.common.entity/TeamMembershipState|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/TeamMembershipState.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/TeamMembershipState.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/TeamMembershipState.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/TeamMembershipState.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/TeamMembershipState.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/TeamMembershipState.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/TeamMembershipState // dev.kord.common.entity/TeamMembershipState.Unknown|null[0]

    final object Accepted : dev.kord.common.entity/TeamMembershipState // dev.kord.common.entity/TeamMembershipState.Accepted|null[0]

    final object Companion { // dev.kord.common.entity/TeamMembershipState.Companion|null[0]
        final val entries // dev.kord.common.entity/TeamMembershipState.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/TeamMembershipState> // dev.kord.common.entity/TeamMembershipState.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/TeamMembershipState // dev.kord.common.entity/TeamMembershipState.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/TeamMembershipState> // dev.kord.common.entity/TeamMembershipState.Companion.serializer|serializer(){}[0]
    }

    final object Invited : dev.kord.common.entity/TeamMembershipState // dev.kord.common.entity/TeamMembershipState.Invited|null[0]
}

sealed class dev.kord.common.entity/TextInputStyle { // dev.kord.common.entity/TextInputStyle|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/TextInputStyle.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/TextInputStyle.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/TextInputStyle.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/TextInputStyle.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/TextInputStyle.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/TextInputStyle.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/TextInputStyle // dev.kord.common.entity/TextInputStyle.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/TextInputStyle.Companion|null[0]
        final val entries // dev.kord.common.entity/TextInputStyle.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/TextInputStyle> // dev.kord.common.entity/TextInputStyle.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/TextInputStyle // dev.kord.common.entity/TextInputStyle.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/TextInputStyle> // dev.kord.common.entity/TextInputStyle.Companion.serializer|serializer(){}[0]
    }

    final object Paragraph : dev.kord.common.entity/TextInputStyle // dev.kord.common.entity/TextInputStyle.Paragraph|null[0]

    final object Short : dev.kord.common.entity/TextInputStyle // dev.kord.common.entity/TextInputStyle.Short|null[0]
}

sealed class dev.kord.common.entity/UserFlag { // dev.kord.common.entity/UserFlag|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/UserFlag.<init>|<init>(kotlin.Int){}[0]

    final val code // dev.kord.common.entity/UserFlag.code|{}code[0]
        final fun <get-code>(): kotlin/Int // dev.kord.common.entity/UserFlag.code.<get-code>|<get-code>(){}[0]
    final val shift // dev.kord.common.entity/UserFlag.shift|{}shift[0]
        final fun <get-shift>(): kotlin/Int // dev.kord.common.entity/UserFlag.shift.<get-shift>|<get-shift>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/UserFlag.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/UserFlag.hashCode|hashCode(){}[0]
    final fun plus(dev.kord.common.entity/UserFlag): dev.kord.common.entity/UserFlags // dev.kord.common.entity/UserFlag.plus|plus(dev.kord.common.entity.UserFlag){}[0]
    final fun plus(dev.kord.common.entity/UserFlags): dev.kord.common.entity/UserFlags // dev.kord.common.entity/UserFlag.plus|plus(dev.kord.common.entity.UserFlags){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/UserFlag.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/UserFlag // dev.kord.common.entity/UserFlag.Unknown|null[0]

    final object ActiveDeveloper : dev.kord.common.entity/UserFlag // dev.kord.common.entity/UserFlag.ActiveDeveloper|null[0]

    final object BotHttpInteractions : dev.kord.common.entity/UserFlag // dev.kord.common.entity/UserFlag.BotHttpInteractions|null[0]

    final object BugHunterLevel1 : dev.kord.common.entity/UserFlag // dev.kord.common.entity/UserFlag.BugHunterLevel1|null[0]

    final object BugHunterLevel2 : dev.kord.common.entity/UserFlag // dev.kord.common.entity/UserFlag.BugHunterLevel2|null[0]

    final object Companion { // dev.kord.common.entity/UserFlag.Companion|null[0]
        final val entries // dev.kord.common.entity/UserFlag.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/UserFlag> // dev.kord.common.entity/UserFlag.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun fromShift(kotlin/Int): dev.kord.common.entity/UserFlag // dev.kord.common.entity/UserFlag.Companion.fromShift|fromShift(kotlin.Int){}[0]
    }

    final object DiscordCertifiedModerator : dev.kord.common.entity/UserFlag // dev.kord.common.entity/UserFlag.DiscordCertifiedModerator|null[0]

    final object DiscordEmployee : dev.kord.common.entity/UserFlag // dev.kord.common.entity/UserFlag.DiscordEmployee|null[0]

    final object DiscordPartner : dev.kord.common.entity/UserFlag // dev.kord.common.entity/UserFlag.DiscordPartner|null[0]

    final object EarlySupporter : dev.kord.common.entity/UserFlag // dev.kord.common.entity/UserFlag.EarlySupporter|null[0]

    final object HouseBalance : dev.kord.common.entity/UserFlag // dev.kord.common.entity/UserFlag.HouseBalance|null[0]

    final object HouseBravery : dev.kord.common.entity/UserFlag // dev.kord.common.entity/UserFlag.HouseBravery|null[0]

    final object HouseBrilliance : dev.kord.common.entity/UserFlag // dev.kord.common.entity/UserFlag.HouseBrilliance|null[0]

    final object HypeSquad : dev.kord.common.entity/UserFlag // dev.kord.common.entity/UserFlag.HypeSquad|null[0]

    final object TeamUser : dev.kord.common.entity/UserFlag // dev.kord.common.entity/UserFlag.TeamUser|null[0]

    final object VerifiedBot : dev.kord.common.entity/UserFlag // dev.kord.common.entity/UserFlag.VerifiedBot|null[0]

    final object VerifiedBotDeveloper : dev.kord.common.entity/UserFlag // dev.kord.common.entity/UserFlag.VerifiedBotDeveloper|null[0]
}

sealed class dev.kord.common.entity/UserPremium { // dev.kord.common.entity/UserPremium|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/UserPremium.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/UserPremium.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/UserPremium.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/UserPremium.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/UserPremium.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/UserPremium.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/UserPremium // dev.kord.common.entity/UserPremium.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/UserPremium.Companion|null[0]
        final val entries // dev.kord.common.entity/UserPremium.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/UserPremium> // dev.kord.common.entity/UserPremium.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/UserPremium // dev.kord.common.entity/UserPremium.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/UserPremium> // dev.kord.common.entity/UserPremium.Companion.serializer|serializer(){}[0]
    }

    final object Nitro : dev.kord.common.entity/UserPremium // dev.kord.common.entity/UserPremium.Nitro|null[0]

    final object NitroBasic : dev.kord.common.entity/UserPremium // dev.kord.common.entity/UserPremium.NitroBasic|null[0]

    final object NitroClassic : dev.kord.common.entity/UserPremium // dev.kord.common.entity/UserPremium.NitroClassic|null[0]

    final object None : dev.kord.common.entity/UserPremium // dev.kord.common.entity/UserPremium.None|null[0]
}

sealed class dev.kord.common.entity/VerificationLevel { // dev.kord.common.entity/VerificationLevel|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/VerificationLevel.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/VerificationLevel.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/VerificationLevel.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/VerificationLevel.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/VerificationLevel.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/VerificationLevel.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/VerificationLevel // dev.kord.common.entity/VerificationLevel.Unknown|null[0]

    final object Companion { // dev.kord.common.entity/VerificationLevel.Companion|null[0]
        final val entries // dev.kord.common.entity/VerificationLevel.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/VerificationLevel> // dev.kord.common.entity/VerificationLevel.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/VerificationLevel // dev.kord.common.entity/VerificationLevel.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/VerificationLevel> // dev.kord.common.entity/VerificationLevel.Companion.serializer|serializer(){}[0]
    }

    final object High : dev.kord.common.entity/VerificationLevel // dev.kord.common.entity/VerificationLevel.High|null[0]

    final object Low : dev.kord.common.entity/VerificationLevel // dev.kord.common.entity/VerificationLevel.Low|null[0]

    final object Medium : dev.kord.common.entity/VerificationLevel // dev.kord.common.entity/VerificationLevel.Medium|null[0]

    final object None : dev.kord.common.entity/VerificationLevel // dev.kord.common.entity/VerificationLevel.None|null[0]

    final object VeryHigh : dev.kord.common.entity/VerificationLevel // dev.kord.common.entity/VerificationLevel.VeryHigh|null[0]
}

sealed class dev.kord.common.entity/VideoQualityMode { // dev.kord.common.entity/VideoQualityMode|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/VideoQualityMode.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/VideoQualityMode.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/VideoQualityMode.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/VideoQualityMode.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/VideoQualityMode.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/VideoQualityMode.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/VideoQualityMode // dev.kord.common.entity/VideoQualityMode.Unknown|null[0]

    final object Auto : dev.kord.common.entity/VideoQualityMode // dev.kord.common.entity/VideoQualityMode.Auto|null[0]

    final object Companion { // dev.kord.common.entity/VideoQualityMode.Companion|null[0]
        final val entries // dev.kord.common.entity/VideoQualityMode.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/VideoQualityMode> // dev.kord.common.entity/VideoQualityMode.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/VideoQualityMode // dev.kord.common.entity/VideoQualityMode.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/VideoQualityMode> // dev.kord.common.entity/VideoQualityMode.Companion.serializer|serializer(){}[0]
    }

    final object Full : dev.kord.common.entity/VideoQualityMode // dev.kord.common.entity/VideoQualityMode.Full|null[0]
}

sealed class dev.kord.common.entity/WebhookType { // dev.kord.common.entity/WebhookType|null[0]
    constructor <init>(kotlin/Int) // dev.kord.common.entity/WebhookType.<init>|<init>(kotlin.Int){}[0]

    final val value // dev.kord.common.entity/WebhookType.value|{}value[0]
        final fun <get-value>(): kotlin/Int // dev.kord.common.entity/WebhookType.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // dev.kord.common.entity/WebhookType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // dev.kord.common.entity/WebhookType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // dev.kord.common.entity/WebhookType.toString|toString(){}[0]

    final class Unknown : dev.kord.common.entity/WebhookType // dev.kord.common.entity/WebhookType.Unknown|null[0]

    final object Application : dev.kord.common.entity/WebhookType // dev.kord.common.entity/WebhookType.Application|null[0]

    final object ChannelFollower : dev.kord.common.entity/WebhookType // dev.kord.common.entity/WebhookType.ChannelFollower|null[0]

    final object Companion { // dev.kord.common.entity/WebhookType.Companion|null[0]
        final val entries // dev.kord.common.entity/WebhookType.Companion.entries|{}entries[0]
            final fun <get-entries>(): kotlin.collections/List<dev.kord.common.entity/WebhookType> // dev.kord.common.entity/WebhookType.Companion.entries.<get-entries>|<get-entries>(){}[0]

        final fun from(kotlin/Int): dev.kord.common.entity/WebhookType // dev.kord.common.entity/WebhookType.Companion.from|from(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<dev.kord.common.entity/WebhookType> // dev.kord.common.entity/WebhookType.Companion.serializer|serializer(){}[0]
    }

    final object Incoming : dev.kord.common.entity/WebhookType // dev.kord.common.entity/WebhookType.Incoming|null[0]
}

sealed class dev.kord.common.serialization/DurationAsLongSerializer : kotlinx.serialization/KSerializer<kotlin.time/Duration> { // dev.kord.common.serialization/DurationAsLongSerializer|null[0]
    constructor <init>(kotlin.time/DurationUnit, kotlin/String) // dev.kord.common.serialization/DurationAsLongSerializer.<init>|<init>(kotlin.time.DurationUnit;kotlin.String){}[0]

    final val descriptor // dev.kord.common.serialization/DurationAsLongSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.serialization/DurationAsLongSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
    final val unit // dev.kord.common.serialization/DurationAsLongSerializer.unit|{}unit[0]
        final fun <get-unit>(): kotlin.time/DurationUnit // dev.kord.common.serialization/DurationAsLongSerializer.unit.<get-unit>|<get-unit>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlin.time/Duration // dev.kord.common.serialization/DurationAsLongSerializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlin.time/Duration) // dev.kord.common.serialization/DurationAsLongSerializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlin.time.Duration){}[0]
}

final object dev.kord.common.serialization/DurationInDaysSerializer : dev.kord.common.serialization/DurationAsLongSerializer // dev.kord.common.serialization/DurationInDaysSerializer|null[0]

final object dev.kord.common.serialization/DurationInDoubleSecondsSerializer : kotlinx.serialization/KSerializer<kotlin.time/Duration> { // dev.kord.common.serialization/DurationInDoubleSecondsSerializer|null[0]
    final val descriptor // dev.kord.common.serialization/DurationInDoubleSecondsSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.serialization/DurationInDoubleSecondsSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlin.time/Duration // dev.kord.common.serialization/DurationInDoubleSecondsSerializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlin.time/Duration) // dev.kord.common.serialization/DurationInDoubleSecondsSerializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlin.time.Duration){}[0]
}

final object dev.kord.common.serialization/DurationInHoursSerializer : dev.kord.common.serialization/DurationAsLongSerializer // dev.kord.common.serialization/DurationInHoursSerializer|null[0]

final object dev.kord.common.serialization/DurationInMicrosecondsSerializer : dev.kord.common.serialization/DurationAsLongSerializer // dev.kord.common.serialization/DurationInMicrosecondsSerializer|null[0]

final object dev.kord.common.serialization/DurationInMillisecondsSerializer : dev.kord.common.serialization/DurationAsLongSerializer // dev.kord.common.serialization/DurationInMillisecondsSerializer|null[0]

final object dev.kord.common.serialization/DurationInMinutesSerializer : dev.kord.common.serialization/DurationAsLongSerializer // dev.kord.common.serialization/DurationInMinutesSerializer|null[0]

final object dev.kord.common.serialization/DurationInNanosecondsSerializer : dev.kord.common.serialization/DurationAsLongSerializer // dev.kord.common.serialization/DurationInNanosecondsSerializer|null[0]

final object dev.kord.common.serialization/DurationInSecondsSerializer : dev.kord.common.serialization/DurationAsLongSerializer // dev.kord.common.serialization/DurationInSecondsSerializer|null[0]

final object dev.kord.common.serialization/InstantInEpochMillisecondsSerializer : kotlinx.serialization/KSerializer<kotlinx.datetime/Instant> { // dev.kord.common.serialization/InstantInEpochMillisecondsSerializer|null[0]
    final val descriptor // dev.kord.common.serialization/InstantInEpochMillisecondsSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.serialization/InstantInEpochMillisecondsSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlinx.datetime/Instant // dev.kord.common.serialization/InstantInEpochMillisecondsSerializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlinx.datetime/Instant) // dev.kord.common.serialization/InstantInEpochMillisecondsSerializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlinx.datetime.Instant){}[0]
}

final object dev.kord.common.serialization/InstantInEpochSecondsSerializer : kotlinx.serialization/KSerializer<kotlinx.datetime/Instant> { // dev.kord.common.serialization/InstantInEpochSecondsSerializer|null[0]
    final val descriptor // dev.kord.common.serialization/InstantInEpochSecondsSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common.serialization/InstantInEpochSecondsSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlinx.datetime/Instant // dev.kord.common.serialization/InstantInEpochSecondsSerializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlinx.datetime/Instant) // dev.kord.common.serialization/InstantInEpochSecondsSerializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlinx.datetime.Instant){}[0]
}

final object dev.kord.common/DiscordBitSetSerializer : kotlinx.serialization/KSerializer<dev.kord.common/DiscordBitSet> { // dev.kord.common/DiscordBitSetSerializer|null[0]
    final val descriptor // dev.kord.common/DiscordBitSetSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // dev.kord.common/DiscordBitSetSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final fun deserialize(kotlinx.serialization.encoding/Decoder): dev.kord.common/DiscordBitSet // dev.kord.common/DiscordBitSetSerializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, dev.kord.common/DiscordBitSet) // dev.kord.common/DiscordBitSetSerializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;dev.kord.common.DiscordBitSet){}[0]
}

final object dev.kord.common/KordConfiguration { // dev.kord.common/KordConfiguration|null[0]
    final var GATEWAY_VERSION // dev.kord.common/KordConfiguration.GATEWAY_VERSION|{}GATEWAY_VERSION[0]
        final fun <get-GATEWAY_VERSION>(): kotlin/Int // dev.kord.common/KordConfiguration.GATEWAY_VERSION.<get-GATEWAY_VERSION>|<get-GATEWAY_VERSION>(){}[0]
        final fun <set-GATEWAY_VERSION>(kotlin/Int) // dev.kord.common/KordConfiguration.GATEWAY_VERSION.<set-GATEWAY_VERSION>|<set-GATEWAY_VERSION>(kotlin.Int){}[0]
    final var REST_VERSION // dev.kord.common/KordConfiguration.REST_VERSION|{}REST_VERSION[0]
        final fun <get-REST_VERSION>(): kotlin/Int // dev.kord.common/KordConfiguration.REST_VERSION.<get-REST_VERSION>|<get-REST_VERSION>(){}[0]
        final fun <set-REST_VERSION>(kotlin/Int) // dev.kord.common/KordConfiguration.REST_VERSION.<set-REST_VERSION>|<set-REST_VERSION>(kotlin.Int){}[0]
    final var VOICE_GATEWAY_VERSION // dev.kord.common/KordConfiguration.VOICE_GATEWAY_VERSION|{}VOICE_GATEWAY_VERSION[0]
        final fun <get-VOICE_GATEWAY_VERSION>(): kotlin/Int // dev.kord.common/KordConfiguration.VOICE_GATEWAY_VERSION.<get-VOICE_GATEWAY_VERSION>|<get-VOICE_GATEWAY_VERSION>(){}[0]
        final fun <set-VOICE_GATEWAY_VERSION>(kotlin/Int) // dev.kord.common/KordConfiguration.VOICE_GATEWAY_VERSION.<set-VOICE_GATEWAY_VERSION>|<set-VOICE_GATEWAY_VERSION>(kotlin.Int){}[0]
}

final object dev.kord.common/KordConstants { // dev.kord.common/KordConstants|null[0]
    final val COMMIT_HASH // dev.kord.common/KordConstants.COMMIT_HASH|{}COMMIT_HASH[0]
        final fun <get-COMMIT_HASH>(): kotlin/String // dev.kord.common/KordConstants.COMMIT_HASH.<get-COMMIT_HASH>|<get-COMMIT_HASH>(){}[0]
    final val GITHUB_URL // dev.kord.common/KordConstants.GITHUB_URL|{}GITHUB_URL[0]
        final fun <get-GITHUB_URL>(): kotlin/String // dev.kord.common/KordConstants.GITHUB_URL.<get-GITHUB_URL>|<get-GITHUB_URL>(){}[0]
    final val SHORT_COMMIT_HASH // dev.kord.common/KordConstants.SHORT_COMMIT_HASH|{}SHORT_COMMIT_HASH[0]
        final fun <get-SHORT_COMMIT_HASH>(): kotlin/String // dev.kord.common/KordConstants.SHORT_COMMIT_HASH.<get-SHORT_COMMIT_HASH>|<get-SHORT_COMMIT_HASH>(){}[0]
    final val USER_AGENT // dev.kord.common/KordConstants.USER_AGENT|{}USER_AGENT[0]
        final fun <get-USER_AGENT>(): kotlin/String // dev.kord.common/KordConstants.USER_AGENT.<get-USER_AGENT>|<get-USER_AGENT>(){}[0]
    final val VERSION // dev.kord.common/KordConstants.VERSION|{}VERSION[0]
        final fun <get-VERSION>(): kotlin/String // dev.kord.common/KordConstants.VERSION.<get-VERSION>|<get-VERSION>(){}[0]
}

final val dev.kord.common.entity.optional/asNullable // dev.kord.common.entity.optional/asNullable|@dev.kord.common.entity.optional.OptionalBoolean?{}asNullable[0]
    final fun (dev.kord.common.entity.optional/OptionalBoolean?).<get-asNullable>(): kotlin/Boolean? // dev.kord.common.entity.optional/asNullable.<get-asNullable>|<get-asNullable>@dev.kord.common.entity.optional.OptionalBoolean?(){}[0]
final val dev.kord.common.entity.optional/asNullable // dev.kord.common.entity.optional/asNullable|@dev.kord.common.entity.optional.OptionalInt?{}asNullable[0]
    final fun (dev.kord.common.entity.optional/OptionalInt?).<get-asNullable>(): kotlin/Int? // dev.kord.common.entity.optional/asNullable.<get-asNullable>|<get-asNullable>@dev.kord.common.entity.optional.OptionalInt?(){}[0]
final val dev.kord.common.entity.optional/asNullable // dev.kord.common.entity.optional/asNullable|@dev.kord.common.entity.optional.OptionalLong?{}asNullable[0]
    final fun (dev.kord.common.entity.optional/OptionalLong?).<get-asNullable>(): kotlin/Long? // dev.kord.common.entity.optional/asNullable.<get-asNullable>|<get-asNullable>@dev.kord.common.entity.optional.OptionalLong?(){}[0]
final val dev.kord.common.entity.optional/value // dev.kord.common.entity.optional/value|@dev.kord.common.entity.optional.OptionalBoolean?{}value[0]
    final fun (dev.kord.common.entity.optional/OptionalBoolean?).<get-value>(): kotlin/Boolean? // dev.kord.common.entity.optional/value.<get-value>|<get-value>@dev.kord.common.entity.optional.OptionalBoolean?(){}[0]
final val dev.kord.common.entity.optional/value // dev.kord.common.entity.optional/value|@dev.kord.common.entity.optional.OptionalInt?{}value[0]
    final fun (dev.kord.common.entity.optional/OptionalInt?).<get-value>(): kotlin/Int? // dev.kord.common.entity.optional/value.<get-value>|<get-value>@dev.kord.common.entity.optional.OptionalInt?(){}[0]
final val dev.kord.common.entity.optional/value // dev.kord.common.entity.optional/value|@dev.kord.common.entity.optional.OptionalLong?{}value[0]
    final fun (dev.kord.common.entity.optional/OptionalLong?).<get-value>(): kotlin/Long? // dev.kord.common.entity.optional/value.<get-value>|<get-value>@dev.kord.common.entity.optional.OptionalLong?(){}[0]
final val dev.kord.common.entity.optional/value // dev.kord.common.entity.optional/value|@dev.kord.common.entity.optional.OptionalSnowflake?{}value[0]
    final fun (dev.kord.common.entity.optional/OptionalSnowflake?).<get-value>(): dev.kord.common.entity/Snowflake? // dev.kord.common.entity.optional/value.<get-value>|<get-value>@dev.kord.common.entity.optional.OptionalSnowflake?(){}[0]
final val dev.kord.common.entity/ALL // dev.kord.common.entity/ALL|@dev.kord.common.entity.Permissions.Companion{}ALL[0]
    final fun (dev.kord.common.entity/Permissions.Companion).<get-ALL>(): dev.kord.common.entity/Permissions // dev.kord.common.entity/ALL.<get-ALL>|<get-ALL>@dev.kord.common.entity.Permissions.Companion(){}[0]
final val dev.kord.common.entity/ALL // dev.kord.common.entity/ALL|@dev.kord.common.entity.Permissions.NewCompanion{}ALL[0]
    final fun (dev.kord.common.entity/Permissions.NewCompanion).<get-ALL>(): dev.kord.common.entity/Permissions // dev.kord.common.entity/ALL.<get-ALL>|<get-ALL>@dev.kord.common.entity.Permissions.NewCompanion(){}[0]

final fun (dev.kord.common.entity.optional/Optional<kotlin/Boolean>).dev.kord.common.entity.optional/toPrimitive(): dev.kord.common.entity.optional/OptionalBoolean // dev.kord.common.entity.optional/toPrimitive|toPrimitive@dev.kord.common.entity.optional.Optional<kotlin.Boolean>(){}[0]
final fun (dev.kord.common.entity.optional/OptionalBoolean?).dev.kord.common.entity.optional/orElse(kotlin/Boolean): kotlin/Boolean // dev.kord.common.entity.optional/orElse|orElse@dev.kord.common.entity.optional.OptionalBoolean?(kotlin.Boolean){}[0]
final fun (dev.kord.common.entity.optional/OptionalInt?).dev.kord.common.entity.optional/getOrThrow(): kotlin/Int // dev.kord.common.entity.optional/getOrThrow|getOrThrow@dev.kord.common.entity.optional.OptionalInt?(){}[0]
final fun (dev.kord.common.entity.optional/OptionalInt?).dev.kord.common.entity.optional/orElse(kotlin/Int): kotlin/Int // dev.kord.common.entity.optional/orElse|orElse@dev.kord.common.entity.optional.OptionalInt?(kotlin.Int){}[0]
final fun (dev.kord.common.entity.optional/OptionalLong?).dev.kord.common.entity.optional/orElse(kotlin/Long): kotlin/Long // dev.kord.common.entity.optional/orElse|orElse@dev.kord.common.entity.optional.OptionalLong?(kotlin.Long){}[0]
final fun (dev.kord.common.entity/Snowflake).dev.kord.common.entity.optional/optionalSnowflake(): dev.kord.common.entity.optional/OptionalSnowflake.Value // dev.kord.common.entity.optional/optionalSnowflake|optionalSnowflake@dev.kord.common.entity.Snowflake(){}[0]
final fun (dev.kord.common.entity/Snowflake?).dev.kord.common.entity.optional/optionalSnowflake(): dev.kord.common.entity.optional/OptionalSnowflake.Value? // dev.kord.common.entity.optional/optionalSnowflake|optionalSnowflake@dev.kord.common.entity.Snowflake?(){}[0]
final fun (kotlin.reflect/KMutableProperty0<dev.kord.common.entity.optional/OptionalBoolean>).dev.kord.common.entity.optional.delegate/delegate(): kotlin.properties/ReadWriteProperty<kotlin/Any?, kotlin/Boolean?> // dev.kord.common.entity.optional.delegate/delegate|delegate@kotlin.reflect.KMutableProperty0<dev.kord.common.entity.optional.OptionalBoolean>(){}[0]
final fun (kotlin.reflect/KMutableProperty0<dev.kord.common.entity.optional/OptionalInt>).dev.kord.common.entity.optional.delegate/delegate(): kotlin.properties/ReadWriteProperty<kotlin/Any?, kotlin/Int?> // dev.kord.common.entity.optional.delegate/delegate|delegate@kotlin.reflect.KMutableProperty0<dev.kord.common.entity.optional.OptionalInt>(){}[0]
final fun (kotlin.reflect/KMutableProperty0<dev.kord.common.entity.optional/OptionalInt?>).dev.kord.common.entity.optional.delegate/delegate(): kotlin.properties/ReadWriteProperty<kotlin/Any?, kotlin/Int?> // dev.kord.common.entity.optional.delegate/delegate|delegate@kotlin.reflect.KMutableProperty0<dev.kord.common.entity.optional.OptionalInt?>(){}[0]
final fun (kotlin.reflect/KMutableProperty0<dev.kord.common.entity.optional/OptionalLong>).dev.kord.common.entity.optional.delegate/delegate(): kotlin.properties/ReadWriteProperty<kotlin/Any?, kotlin/Long?> // dev.kord.common.entity.optional.delegate/delegate|delegate@kotlin.reflect.KMutableProperty0<dev.kord.common.entity.optional.OptionalLong>(){}[0]
final fun (kotlin.reflect/KMutableProperty0<dev.kord.common.entity.optional/OptionalLong?>).dev.kord.common.entity.optional.delegate/delegate(): kotlin.properties/ReadWriteProperty<kotlin/Any?, kotlin/Long?> // dev.kord.common.entity.optional.delegate/delegate|delegate@kotlin.reflect.KMutableProperty0<dev.kord.common.entity.optional.OptionalLong?>(){}[0]
final fun (kotlin.reflect/KMutableProperty0<dev.kord.common.entity.optional/OptionalSnowflake>).dev.kord.common.entity.optional.delegate/delegate(): kotlin.properties/ReadWriteProperty<kotlin/Any?, dev.kord.common.entity/Snowflake?> // dev.kord.common.entity.optional.delegate/delegate|delegate@kotlin.reflect.KMutableProperty0<dev.kord.common.entity.optional.OptionalSnowflake>(){}[0]
final fun (kotlin.reflect/KMutableProperty0<dev.kord.common.entity.optional/OptionalSnowflake?>).dev.kord.common.entity.optional.delegate/delegate(): kotlin.properties/ReadWriteProperty<kotlin/Any?, dev.kord.common.entity/Snowflake?> // dev.kord.common.entity.optional.delegate/delegate|delegate@kotlin.reflect.KMutableProperty0<dev.kord.common.entity.optional.OptionalSnowflake?>(){}[0]
final fun (kotlin/Boolean).dev.kord.common.entity.optional/optional(): dev.kord.common.entity.optional/OptionalBoolean.Value // dev.kord.common.entity.optional/optional|optional@kotlin.Boolean(){}[0]
final fun (kotlin/Int).dev.kord.common.entity.optional/optionalInt(): dev.kord.common.entity.optional/OptionalInt.Value // dev.kord.common.entity.optional/optionalInt|optionalInt@kotlin.Int(){}[0]
final fun (kotlin/Long?).dev.kord.common.entity.optional/optional(): dev.kord.common.entity.optional/OptionalLong // dev.kord.common.entity.optional/optional|optional@kotlin.Long?(){}[0]
final fun (kotlinx.datetime/Instant).dev.kord.common/toMessageFormat(dev.kord.common/DiscordTimestampStyle? = ...): kotlin/String // dev.kord.common/toMessageFormat|toMessageFormat@kotlinx.datetime.Instant(dev.kord.common.DiscordTimestampStyle?){}[0]
final fun <#A: kotlin/Any> (#A).dev.kord.common.entity.optional/optional(): dev.kord.common.entity.optional/Optional.Value<#A> // dev.kord.common.entity.optional/optional|optional@0:0(){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (dev.kord.common.entity.optional/Optional<#A>).dev.kord.common.entity.optional/switchOnMissing(#A): dev.kord.common.entity.optional/Optional<#A> // dev.kord.common.entity.optional/switchOnMissing|switchOnMissing@dev.kord.common.entity.optional.Optional<0:0>(0:0){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (dev.kord.common.entity.optional/Optional<#A>).dev.kord.common.entity.optional/switchOnMissing(dev.kord.common.entity.optional/Optional<#A>): dev.kord.common.entity.optional/Optional<#A> // dev.kord.common.entity.optional/switchOnMissing|switchOnMissing@dev.kord.common.entity.optional.Optional<0:0>(dev.kord.common.entity.optional.Optional<0:0>){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (dev.kord.common.entity.optional/Optional<#A?>).dev.kord.common.entity.optional/coerceToMissing(): dev.kord.common.entity.optional/Optional<#A> // dev.kord.common.entity.optional/coerceToMissing|coerceToMissing@dev.kord.common.entity.optional.Optional<0:0?>(){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (kotlin.reflect/KMutableProperty0<dev.kord.common.entity.optional/Optional<#A>>).dev.kord.common.entity.optional.delegate/delegate(): kotlin.properties/ReadWriteProperty<kotlin/Any?, #A?> // dev.kord.common.entity.optional.delegate/delegate|delegate@kotlin.reflect.KMutableProperty0<dev.kord.common.entity.optional.Optional<0:0>>(){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (kotlin.reflect/KMutableProperty0<dev.kord.common.entity.optional/Optional<#A?>>).dev.kord.common.entity.optional.delegate/delegate(): kotlin.properties/ReadWriteProperty<kotlin/Any?, #A?> // dev.kord.common.entity.optional.delegate/delegate|delegate@kotlin.reflect.KMutableProperty0<dev.kord.common.entity.optional.Optional<0:0?>>(){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (kotlin.reflect/KMutableProperty0<dev.kord.common.entity.optional/Optional<kotlin.collections/List<#A>>>).dev.kord.common.entity.optional.delegate/delegateList(): kotlin.properties/ReadWriteProperty<kotlin/Any?, kotlin.collections/List<#A>> // dev.kord.common.entity.optional.delegate/delegateList|delegateList@kotlin.reflect.KMutableProperty0<dev.kord.common.entity.optional.Optional<kotlin.collections.List<0:0>>>(){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (dev.kord.common.entity.optional/Optional<kotlin.collections/MutableMap<#A, #B>>).dev.kord.common.entity.optional/mapCopy(): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<#A, #B>> // dev.kord.common.entity.optional/mapCopy|mapCopy@dev.kord.common.entity.optional.Optional<kotlin.collections.MutableMap<0:0,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (#A?).dev.kord.common.entity.optional/optional(): dev.kord.common.entity.optional/Optional<#A?> // dev.kord.common.entity.optional/optional|optional@0:0?(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (dev.kord.common.entity.optional/Optional<kotlin.collections/List<#A>>).dev.kord.common.entity.optional/orEmpty(): kotlin.collections/List<#A> // dev.kord.common.entity.optional/orEmpty|orEmpty@dev.kord.common.entity.optional.Optional<kotlin.collections.List<0:0>>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (dev.kord.common.entity.optional/Optional<kotlin.collections/MutableList<#A>>).dev.kord.common.entity.optional/mapCopy(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<#A>> // dev.kord.common.entity.optional/mapCopy|mapCopy@dev.kord.common.entity.optional.Optional<kotlin.collections.MutableList<0:0>>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (dev.kord.common.entity.optional/Optional<kotlin.collections/Set<#A>>).dev.kord.common.entity.optional/orEmpty(): kotlin.collections/Set<#A> // dev.kord.common.entity.optional/orEmpty|orEmpty@dev.kord.common.entity.optional.Optional<kotlin.collections.Set<0:0>>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.reflect/KMutableProperty0<dev.kord.common.entity.optional/OptionalBoolean?>).dev.kord.common.entity.optional.delegate/delegate(): kotlin.properties/ReadWriteProperty<#A, kotlin/Boolean?> // dev.kord.common.entity.optional.delegate/delegate|delegate@kotlin.reflect.KMutableProperty0<dev.kord.common.entity.optional.OptionalBoolean?>(){0§<kotlin.Any?>}[0]
final fun dev.kord.common.entity/ActivityFlags(kotlin.collections/Iterable<dev.kord.common.entity/ActivityFlag>): dev.kord.common.entity/ActivityFlags // dev.kord.common.entity/ActivityFlags|ActivityFlags(kotlin.collections.Iterable<dev.kord.common.entity.ActivityFlag>){}[0]
final fun dev.kord.common.entity/ActivityFlags(kotlin.collections/Iterable<dev.kord.common.entity/ActivityFlags>): dev.kord.common.entity/ActivityFlags // dev.kord.common.entity/ActivityFlags|ActivityFlags(kotlin.collections.Iterable<dev.kord.common.entity.ActivityFlags>){}[0]
final fun dev.kord.common.entity/ActivityFlags(kotlin/Array<out dev.kord.common.entity/ActivityFlag>...): dev.kord.common.entity/ActivityFlags // dev.kord.common.entity/ActivityFlags|ActivityFlags(kotlin.Array<out|dev.kord.common.entity.ActivityFlag>...){}[0]
final fun dev.kord.common.entity/ActivityFlags(kotlin/Array<out dev.kord.common.entity/ActivityFlags>...): dev.kord.common.entity/ActivityFlags // dev.kord.common.entity/ActivityFlags|ActivityFlags(kotlin.Array<out|dev.kord.common.entity.ActivityFlags>...){}[0]
final fun dev.kord.common.entity/ApplicationFlags(kotlin.collections/Iterable<dev.kord.common.entity/ApplicationFlag>): dev.kord.common.entity/ApplicationFlags // dev.kord.common.entity/ApplicationFlags|ApplicationFlags(kotlin.collections.Iterable<dev.kord.common.entity.ApplicationFlag>){}[0]
final fun dev.kord.common.entity/ApplicationFlags(kotlin.collections/Iterable<dev.kord.common.entity/ApplicationFlags>): dev.kord.common.entity/ApplicationFlags // dev.kord.common.entity/ApplicationFlags|ApplicationFlags(kotlin.collections.Iterable<dev.kord.common.entity.ApplicationFlags>){}[0]
final fun dev.kord.common.entity/ApplicationFlags(kotlin/Array<out dev.kord.common.entity/ApplicationFlag>...): dev.kord.common.entity/ApplicationFlags // dev.kord.common.entity/ApplicationFlags|ApplicationFlags(kotlin.Array<out|dev.kord.common.entity.ApplicationFlag>...){}[0]
final fun dev.kord.common.entity/ApplicationFlags(kotlin/Array<out dev.kord.common.entity/ApplicationFlags>...): dev.kord.common.entity/ApplicationFlags // dev.kord.common.entity/ApplicationFlags|ApplicationFlags(kotlin.Array<out|dev.kord.common.entity.ApplicationFlags>...){}[0]
final fun dev.kord.common.entity/AttachmentFlags(kotlin.collections/Iterable<dev.kord.common.entity/AttachmentFlag>): dev.kord.common.entity/AttachmentFlags // dev.kord.common.entity/AttachmentFlags|AttachmentFlags(kotlin.collections.Iterable<dev.kord.common.entity.AttachmentFlag>){}[0]
final fun dev.kord.common.entity/AttachmentFlags(kotlin.collections/Iterable<dev.kord.common.entity/AttachmentFlags>): dev.kord.common.entity/AttachmentFlags // dev.kord.common.entity/AttachmentFlags|AttachmentFlags(kotlin.collections.Iterable<dev.kord.common.entity.AttachmentFlags>){}[0]
final fun dev.kord.common.entity/AttachmentFlags(kotlin/Array<out dev.kord.common.entity/AttachmentFlag>...): dev.kord.common.entity/AttachmentFlags // dev.kord.common.entity/AttachmentFlags|AttachmentFlags(kotlin.Array<out|dev.kord.common.entity.AttachmentFlag>...){}[0]
final fun dev.kord.common.entity/AttachmentFlags(kotlin/Array<out dev.kord.common.entity/AttachmentFlags>...): dev.kord.common.entity/AttachmentFlags // dev.kord.common.entity/AttachmentFlags|AttachmentFlags(kotlin.Array<out|dev.kord.common.entity.AttachmentFlags>...){}[0]
final fun dev.kord.common.entity/ChannelFlags(kotlin.collections/Iterable<dev.kord.common.entity/ChannelFlag>): dev.kord.common.entity/ChannelFlags // dev.kord.common.entity/ChannelFlags|ChannelFlags(kotlin.collections.Iterable<dev.kord.common.entity.ChannelFlag>){}[0]
final fun dev.kord.common.entity/ChannelFlags(kotlin.collections/Iterable<dev.kord.common.entity/ChannelFlags>): dev.kord.common.entity/ChannelFlags // dev.kord.common.entity/ChannelFlags|ChannelFlags(kotlin.collections.Iterable<dev.kord.common.entity.ChannelFlags>){}[0]
final fun dev.kord.common.entity/ChannelFlags(kotlin/Array<out dev.kord.common.entity/ChannelFlag>...): dev.kord.common.entity/ChannelFlags // dev.kord.common.entity/ChannelFlags|ChannelFlags(kotlin.Array<out|dev.kord.common.entity.ChannelFlag>...){}[0]
final fun dev.kord.common.entity/ChannelFlags(kotlin/Array<out dev.kord.common.entity/ChannelFlags>...): dev.kord.common.entity/ChannelFlags // dev.kord.common.entity/ChannelFlags|ChannelFlags(kotlin.Array<out|dev.kord.common.entity.ChannelFlags>...){}[0]
final fun dev.kord.common.entity/GuildMemberFlags(kotlin.collections/Iterable<dev.kord.common.entity/GuildMemberFlag>): dev.kord.common.entity/GuildMemberFlags // dev.kord.common.entity/GuildMemberFlags|GuildMemberFlags(kotlin.collections.Iterable<dev.kord.common.entity.GuildMemberFlag>){}[0]
final fun dev.kord.common.entity/GuildMemberFlags(kotlin.collections/Iterable<dev.kord.common.entity/GuildMemberFlags>): dev.kord.common.entity/GuildMemberFlags // dev.kord.common.entity/GuildMemberFlags|GuildMemberFlags(kotlin.collections.Iterable<dev.kord.common.entity.GuildMemberFlags>){}[0]
final fun dev.kord.common.entity/GuildMemberFlags(kotlin/Array<out dev.kord.common.entity/GuildMemberFlag>...): dev.kord.common.entity/GuildMemberFlags // dev.kord.common.entity/GuildMemberFlags|GuildMemberFlags(kotlin.Array<out|dev.kord.common.entity.GuildMemberFlag>...){}[0]
final fun dev.kord.common.entity/GuildMemberFlags(kotlin/Array<out dev.kord.common.entity/GuildMemberFlags>...): dev.kord.common.entity/GuildMemberFlags // dev.kord.common.entity/GuildMemberFlags|GuildMemberFlags(kotlin.Array<out|dev.kord.common.entity.GuildMemberFlags>...){}[0]
final fun dev.kord.common.entity/MessageFlags(kotlin.collections/Iterable<dev.kord.common.entity/MessageFlag>): dev.kord.common.entity/MessageFlags // dev.kord.common.entity/MessageFlags|MessageFlags(kotlin.collections.Iterable<dev.kord.common.entity.MessageFlag>){}[0]
final fun dev.kord.common.entity/MessageFlags(kotlin.collections/Iterable<dev.kord.common.entity/MessageFlags>): dev.kord.common.entity/MessageFlags // dev.kord.common.entity/MessageFlags|MessageFlags(kotlin.collections.Iterable<dev.kord.common.entity.MessageFlags>){}[0]
final fun dev.kord.common.entity/MessageFlags(kotlin/Array<out dev.kord.common.entity/MessageFlag>...): dev.kord.common.entity/MessageFlags // dev.kord.common.entity/MessageFlags|MessageFlags(kotlin.Array<out|dev.kord.common.entity.MessageFlag>...){}[0]
final fun dev.kord.common.entity/MessageFlags(kotlin/Array<out dev.kord.common.entity/MessageFlags>...): dev.kord.common.entity/MessageFlags // dev.kord.common.entity/MessageFlags|MessageFlags(kotlin.Array<out|dev.kord.common.entity.MessageFlags>...){}[0]
final fun dev.kord.common.entity/Permissions(kotlin.collections/Iterable<dev.kord.common.entity/Permission>): dev.kord.common.entity/Permissions // dev.kord.common.entity/Permissions|Permissions(kotlin.collections.Iterable<dev.kord.common.entity.Permission>){}[0]
final fun dev.kord.common.entity/Permissions(kotlin.collections/Iterable<dev.kord.common.entity/Permissions>): dev.kord.common.entity/Permissions // dev.kord.common.entity/Permissions|Permissions(kotlin.collections.Iterable<dev.kord.common.entity.Permissions>){}[0]
final fun dev.kord.common.entity/Permissions(kotlin/Array<out dev.kord.common.entity/Permission>...): dev.kord.common.entity/Permissions // dev.kord.common.entity/Permissions|Permissions(kotlin.Array<out|dev.kord.common.entity.Permission>...){}[0]
final fun dev.kord.common.entity/Permissions(kotlin/Array<out dev.kord.common.entity/Permissions>...): dev.kord.common.entity/Permissions // dev.kord.common.entity/Permissions|Permissions(kotlin.Array<out|dev.kord.common.entity.Permissions>...){}[0]
final fun dev.kord.common.entity/RoleFlags(kotlin.collections/Iterable<dev.kord.common.entity/RoleFlag>): dev.kord.common.entity/RoleFlags // dev.kord.common.entity/RoleFlags|RoleFlags(kotlin.collections.Iterable<dev.kord.common.entity.RoleFlag>){}[0]
final fun dev.kord.common.entity/RoleFlags(kotlin.collections/Iterable<dev.kord.common.entity/RoleFlags>): dev.kord.common.entity/RoleFlags // dev.kord.common.entity/RoleFlags|RoleFlags(kotlin.collections.Iterable<dev.kord.common.entity.RoleFlags>){}[0]
final fun dev.kord.common.entity/RoleFlags(kotlin/Array<out dev.kord.common.entity/RoleFlag>...): dev.kord.common.entity/RoleFlags // dev.kord.common.entity/RoleFlags|RoleFlags(kotlin.Array<out|dev.kord.common.entity.RoleFlag>...){}[0]
final fun dev.kord.common.entity/RoleFlags(kotlin/Array<out dev.kord.common.entity/RoleFlags>...): dev.kord.common.entity/RoleFlags // dev.kord.common.entity/RoleFlags|RoleFlags(kotlin.Array<out|dev.kord.common.entity.RoleFlags>...){}[0]
final fun dev.kord.common.entity/Snowflake(kotlin/Long): dev.kord.common.entity/Snowflake // dev.kord.common.entity/Snowflake|Snowflake(kotlin.Long){}[0]
final fun dev.kord.common.entity/SystemChannelFlags(kotlin.collections/Iterable<dev.kord.common.entity/SystemChannelFlag>): dev.kord.common.entity/SystemChannelFlags // dev.kord.common.entity/SystemChannelFlags|SystemChannelFlags(kotlin.collections.Iterable<dev.kord.common.entity.SystemChannelFlag>){}[0]
final fun dev.kord.common.entity/SystemChannelFlags(kotlin.collections/Iterable<dev.kord.common.entity/SystemChannelFlags>): dev.kord.common.entity/SystemChannelFlags // dev.kord.common.entity/SystemChannelFlags|SystemChannelFlags(kotlin.collections.Iterable<dev.kord.common.entity.SystemChannelFlags>){}[0]
final fun dev.kord.common.entity/SystemChannelFlags(kotlin/Array<out dev.kord.common.entity/SystemChannelFlag>...): dev.kord.common.entity/SystemChannelFlags // dev.kord.common.entity/SystemChannelFlags|SystemChannelFlags(kotlin.Array<out|dev.kord.common.entity.SystemChannelFlag>...){}[0]
final fun dev.kord.common.entity/SystemChannelFlags(kotlin/Array<out dev.kord.common.entity/SystemChannelFlags>...): dev.kord.common.entity/SystemChannelFlags // dev.kord.common.entity/SystemChannelFlags|SystemChannelFlags(kotlin.Array<out|dev.kord.common.entity.SystemChannelFlags>...){}[0]
final fun dev.kord.common.entity/UserFlags(kotlin.collections/Iterable<dev.kord.common.entity/UserFlag>): dev.kord.common.entity/UserFlags // dev.kord.common.entity/UserFlags|UserFlags(kotlin.collections.Iterable<dev.kord.common.entity.UserFlag>){}[0]
final fun dev.kord.common.entity/UserFlags(kotlin.collections/Iterable<dev.kord.common.entity/UserFlags>): dev.kord.common.entity/UserFlags // dev.kord.common.entity/UserFlags|UserFlags(kotlin.collections.Iterable<dev.kord.common.entity.UserFlags>){}[0]
final fun dev.kord.common.entity/UserFlags(kotlin/Array<out dev.kord.common.entity/UserFlag>...): dev.kord.common.entity/UserFlags // dev.kord.common.entity/UserFlags|UserFlags(kotlin.Array<out|dev.kord.common.entity.UserFlag>...){}[0]
final fun dev.kord.common.entity/UserFlags(kotlin/Array<out dev.kord.common.entity/UserFlags>...): dev.kord.common.entity/UserFlags // dev.kord.common.entity/UserFlags|UserFlags(kotlin.Array<out|dev.kord.common.entity.UserFlags>...){}[0]
final fun dev.kord.common.ratelimit/IntervalRateLimiter(kotlin/Int, kotlin.time/Duration, kotlin.time/TimeSource = ...): dev.kord.common.ratelimit/IntervalRateLimiter // dev.kord.common.ratelimit/IntervalRateLimiter|IntervalRateLimiter(kotlin.Int;kotlin.time.Duration;kotlin.time.TimeSource){}[0]
final fun dev.kord.common.ratelimit/IntervalRateLimiter(kotlin/Int, kotlin.time/Duration, kotlinx.datetime/Clock): dev.kord.common.ratelimit/IntervalRateLimiter // dev.kord.common.ratelimit/IntervalRateLimiter|IntervalRateLimiter(kotlin.Int;kotlin.time.Duration;kotlinx.datetime.Clock){}[0]
final fun dev.kord.common/DiscordBitSet(kotlin/LongArray...): dev.kord.common/DiscordBitSet // dev.kord.common/DiscordBitSet|DiscordBitSet(kotlin.LongArray...){}[0]
final fun dev.kord.common/DiscordBitSet(kotlin/String): dev.kord.common/DiscordBitSet // dev.kord.common/DiscordBitSet|DiscordBitSet(kotlin.String){}[0]
final fun dev.kord.common/EmptyBitSet(): dev.kord.common/DiscordBitSet // dev.kord.common/EmptyBitSet|EmptyBitSet(){}[0]
final inline fun (dev.kord.common.entity.optional/OptionalInt).dev.kord.common.entity.optional/map(kotlin/Function1<kotlin/Int, kotlin/Int>): dev.kord.common.entity.optional/OptionalInt // dev.kord.common.entity.optional/map|map@dev.kord.common.entity.optional.OptionalInt(kotlin.Function1<kotlin.Int,kotlin.Int>){}[0]
final inline fun <#A: kotlin/Any, #B: kotlin/Any> (dev.kord.common.entity.optional/Optional<#A>).dev.kord.common.entity.optional/flatMap(kotlin/Function1<#A, dev.kord.common.entity.optional/Optional<#B>>): dev.kord.common.entity.optional/Optional<#B> // dev.kord.common.entity.optional/flatMap|flatMap@dev.kord.common.entity.optional.Optional<0:0>(kotlin.Function1<0:0,dev.kord.common.entity.optional.Optional<0:1>>){0§<kotlin.Any>;1§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any, #B: kotlin/Any> (dev.kord.common.entity.optional/Optional<#A>).dev.kord.common.entity.optional/map(kotlin/Function1<#A, #B>): dev.kord.common.entity.optional/Optional<#B> // dev.kord.common.entity.optional/map|map@dev.kord.common.entity.optional.Optional<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any, #B: kotlin/Any> (dev.kord.common.entity.optional/Optional<#A?>).dev.kord.common.entity.optional/map(kotlin/Function1<#A, #B>): dev.kord.common.entity.optional/Optional<#B?> // dev.kord.common.entity.optional/map|map@dev.kord.common.entity.optional.Optional<0:0?>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any, #B: kotlin/Any?> (dev.kord.common.entity.optional/Optional<#A?>).dev.kord.common.entity.optional/mapNotNull(kotlin/Function1<#A, #B>): dev.kord.common.entity.optional/Optional<#B?> // dev.kord.common.entity.optional/mapNotNull|mapNotNull@dev.kord.common.entity.optional.Optional<0:0?>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any> (dev.kord.common.entity.optional/Optional<#A>).dev.kord.common.entity.optional/mapSnowflake(kotlin/Function1<#A, dev.kord.common.entity/Snowflake>): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity.optional/mapSnowflake|mapSnowflake@dev.kord.common.entity.optional.Optional<0:0>(kotlin.Function1<0:0,dev.kord.common.entity.Snowflake>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (dev.kord.common.entity.optional/Optional<#A?>).dev.kord.common.entity.optional/mapSnowflake(kotlin/Function1<#A, dev.kord.common.entity/Snowflake>): dev.kord.common.entity.optional/OptionalSnowflake // dev.kord.common.entity.optional/mapSnowflake|mapSnowflake@dev.kord.common.entity.optional.Optional<0:0?>(kotlin.Function1<0:0,dev.kord.common.entity.Snowflake>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (dev.kord.common.entity.optional/OptionalSnowflake).dev.kord.common.entity.optional/map(kotlin/Function1<dev.kord.common.entity/Snowflake, #A>): dev.kord.common.entity.optional/Optional<#A> // dev.kord.common.entity.optional/map|map@dev.kord.common.entity.optional.OptionalSnowflake(kotlin.Function1<dev.kord.common.entity.Snowflake,0:0>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any> (dev.kord.common.entity.optional/Optional<#A>).dev.kord.common.entity.optional/unwrap(kotlin/Function1<#A, #B>): #B? // dev.kord.common.entity.optional/unwrap|unwrap@dev.kord.common.entity.optional.Optional<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (dev.kord.common.entity.optional/Optional<kotlin.collections/Map<#A, #B>>).dev.kord.common.entity.optional/mapValues(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, #C>): dev.kord.common.entity.optional/Optional<kotlin.collections/Map<#A, #C>> // dev.kord.common.entity.optional/mapValues|mapValues@dev.kord.common.entity.optional.Optional<kotlin.collections.Map<0:0,0:1>>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (dev.kord.common.entity.optional/Optional<#A>).dev.kord.common.entity.optional/mapNullable(kotlin/Function1<#A, #B>): dev.kord.common.entity.optional/Optional<#B?> // dev.kord.common.entity.optional/mapNullable|mapNullable@dev.kord.common.entity.optional.Optional<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (dev.kord.common.entity.optional/Optional<kotlin.collections/List<#A>>).dev.kord.common.entity.optional/mapList(kotlin/Function1<#A, #B>): dev.kord.common.entity.optional/Optional<kotlin.collections/List<#B>> // dev.kord.common.entity.optional/mapList|mapList@dev.kord.common.entity.optional.Optional<kotlin.collections.List<0:0>>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (dev.kord.common.entity.optional/Optional<kotlin.collections/List<#A>?>).dev.kord.common.entity.optional/mapList(kotlin/Function1<#A, #B>): dev.kord.common.entity.optional/Optional<kotlin.collections/List<#B>?> // dev.kord.common.entity.optional/mapList|mapList@dev.kord.common.entity.optional.Optional<kotlin.collections.List<0:0>?>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (dev.kord.common.entity.optional/Optional<kotlin.collections/List<#A>>).dev.kord.common.entity.optional/filterList(kotlin/Function1<#A, kotlin/Boolean>): dev.kord.common.entity.optional/Optional<kotlin.collections/List<#A>> // dev.kord.common.entity.optional/filterList|filterList@dev.kord.common.entity.optional.Optional<kotlin.collections.List<0:0>>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (dev.kord.common.entity.optional/Optional<kotlin.collections/List<#A>>).dev.kord.common.entity.optional/first(kotlin/Function1<#A, kotlin/Boolean>): #A // dev.kord.common.entity.optional/first|first@dev.kord.common.entity.optional.Optional<kotlin.collections.List<0:0>>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (dev.kord.common.entity.optional/Optional<kotlin.collections/List<#A>>).dev.kord.common.entity.optional/firstOrNull(kotlin/Function1<#A, kotlin/Boolean>): #A? // dev.kord.common.entity.optional/firstOrNull|firstOrNull@dev.kord.common.entity.optional.Optional<kotlin.collections.List<0:0>>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (dev.kord.common.entity.optional/Optional<kotlin.collections/List<*>>).dev.kord.common.entity.optional/filterInstanceOfList(): dev.kord.common.entity.optional/Optional<kotlin.collections/List<#A>> // dev.kord.common.entity.optional/filterInstanceOfList|filterInstanceOfList@dev.kord.common.entity.optional.Optional<kotlin.collections.List<*>>(){0§<kotlin.Any?>}[0]
final inline fun dev.kord.common.entity/ActivityFlags(kotlin/Function1<dev.kord.common.entity/ActivityFlags.Builder, kotlin/Unit> = ...): dev.kord.common.entity/ActivityFlags // dev.kord.common.entity/ActivityFlags|ActivityFlags(kotlin.Function1<dev.kord.common.entity.ActivityFlags.Builder,kotlin.Unit>){}[0]
final inline fun dev.kord.common.entity/ApplicationFlags(kotlin/Function1<dev.kord.common.entity/ApplicationFlags.Builder, kotlin/Unit> = ...): dev.kord.common.entity/ApplicationFlags // dev.kord.common.entity/ApplicationFlags|ApplicationFlags(kotlin.Function1<dev.kord.common.entity.ApplicationFlags.Builder,kotlin.Unit>){}[0]
final inline fun dev.kord.common.entity/AttachmentFlags(kotlin/Function1<dev.kord.common.entity/AttachmentFlags.Builder, kotlin/Unit> = ...): dev.kord.common.entity/AttachmentFlags // dev.kord.common.entity/AttachmentFlags|AttachmentFlags(kotlin.Function1<dev.kord.common.entity.AttachmentFlags.Builder,kotlin.Unit>){}[0]
final inline fun dev.kord.common.entity/ChannelFlags(kotlin/Function1<dev.kord.common.entity/ChannelFlags.Builder, kotlin/Unit> = ...): dev.kord.common.entity/ChannelFlags // dev.kord.common.entity/ChannelFlags|ChannelFlags(kotlin.Function1<dev.kord.common.entity.ChannelFlags.Builder,kotlin.Unit>){}[0]
final inline fun dev.kord.common.entity/GuildMemberFlags(kotlin/Function1<dev.kord.common.entity/GuildMemberFlags.Builder, kotlin/Unit> = ...): dev.kord.common.entity/GuildMemberFlags // dev.kord.common.entity/GuildMemberFlags|GuildMemberFlags(kotlin.Function1<dev.kord.common.entity.GuildMemberFlags.Builder,kotlin.Unit>){}[0]
final inline fun dev.kord.common.entity/MessageFlags(kotlin/Function1<dev.kord.common.entity/MessageFlags.Builder, kotlin/Unit> = ...): dev.kord.common.entity/MessageFlags // dev.kord.common.entity/MessageFlags|MessageFlags(kotlin.Function1<dev.kord.common.entity.MessageFlags.Builder,kotlin.Unit>){}[0]
final inline fun dev.kord.common.entity/Permissions(kotlin/Function1<dev.kord.common.entity/Permissions.Builder, kotlin/Unit> = ...): dev.kord.common.entity/Permissions // dev.kord.common.entity/Permissions|Permissions(kotlin.Function1<dev.kord.common.entity.Permissions.Builder,kotlin.Unit>){}[0]
final inline fun dev.kord.common.entity/Permissions0(kotlin/Function1<dev.kord.common.entity/Permissions.Builder, kotlin/Unit> = ...): dev.kord.common.entity/Permissions // dev.kord.common.entity/Permissions0|Permissions0(kotlin.Function1<dev.kord.common.entity.Permissions.Builder,kotlin.Unit>){}[0]
final inline fun dev.kord.common.entity/RoleFlags(kotlin/Function1<dev.kord.common.entity/RoleFlags.Builder, kotlin/Unit> = ...): dev.kord.common.entity/RoleFlags // dev.kord.common.entity/RoleFlags|RoleFlags(kotlin.Function1<dev.kord.common.entity.RoleFlags.Builder,kotlin.Unit>){}[0]
final inline fun dev.kord.common.entity/SystemChannelFlags(kotlin/Function1<dev.kord.common.entity/SystemChannelFlags.Builder, kotlin/Unit> = ...): dev.kord.common.entity/SystemChannelFlags // dev.kord.common.entity/SystemChannelFlags|SystemChannelFlags(kotlin.Function1<dev.kord.common.entity.SystemChannelFlags.Builder,kotlin.Unit>){}[0]
final inline fun dev.kord.common.entity/UserFlags(kotlin/Function1<dev.kord.common.entity/UserFlags.Builder, kotlin/Unit> = ...): dev.kord.common.entity/UserFlags // dev.kord.common.entity/UserFlags|UserFlags(kotlin.Function1<dev.kord.common.entity.UserFlags.Builder,kotlin.Unit>){}[0]
final suspend inline fun <#A: kotlin/Any?> (dev.kord.common.ratelimit/RateLimiter).dev.kord.common.ratelimit/consume(kotlin/Function0<#A>): #A // dev.kord.common.ratelimit/consume|consume@dev.kord.common.ratelimit.RateLimiter(kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]
