// THIS FILE IS AUTO-GENERATED BY KordEnumProcessor, DO NOT EDIT!
@file:Suppress(names = arrayOf("RedundantVisibilityModifier", "IncorrectFormatting",
                "ReplaceArrayOfWithLiteral", "SpellCheckingInspection", "GrazieInspection"))

package dev.kord.common.entity

import dev.kord.common.`annotation`.KordUnsafe
import dev.kord.common.entity.flags.BitFlags
import dev.kord.common.entity.flags.IntBitFlag
import dev.kord.common.entity.flags.IntBitFlags
import kotlin.LazyThreadSafetyMode.PUBLICATION
import kotlinx.serialization.Serializable
import kotlinx.serialization.builtins.serializer
import kotlinx.serialization.descriptors.PrimitiveKind

/**
 * Convenience container of multiple [SystemChannelFlags][SystemChannelFlag] which can be combined
 * into one.
 *
 * ## Creating a collection of message flags
 * You can create an [SystemChannelFlags] object using the following methods
 * ```kotlin
 * // From flags
 * val flags1 = SystemChannelFlags(SystemChannelFlag.SuppressJoinNotifications,
 * SystemChannelFlag.SuppressPremiumSubscriptions)
 * // From an iterable
 * val flags2 = SystemChannelFlags(listOf(SystemChannelFlag.SuppressJoinNotifications,
 * SystemChannelFlag.SuppressPremiumSubscriptions))
 * // Using a builder
 * val flags3 = SystemChannelFlags {
 *  +SystemChannelFlag.SuppressJoinNotifications
 *  -SystemChannelFlag.SuppressPremiumSubscriptions
 * }
 * ```
 *
 * ## Modifying existing flags
 * You can crate a modified copy of a [SystemChannelFlags] instance using the
 * [dev.kord.common.entity.flags.copy] method
 *
 * ```kotlin
 * flags.copy {
 *  +SystemChannelFlag.SuppressJoinNotifications
 * }
 * ```
 *
 * ## Mathematical operators
 * All [SystemChannelFlags] objects can use +/- operators
 *
 * ```kotlin
 * val flags = SystemChannelFlags(SystemChannelFlag.SuppressJoinNotifications)
 * val flags2 = flags + SystemChannelFlag.SuppressPremiumSubscriptions
 * val otherFlags = flags - SystemChannelFlag.SuppressPremiumSubscriptions
 * val flags3 = flags + otherFlags
 * ```
 *
 * ## Checking for a flag
 * You can use the [contains] operator to check whether a collection contains a specific flag
 * ```kotlin
 * val hasFlag = SystemChannelFlag.SuppressJoinNotifications in obj.flags
 * val hasFlags = SystemChannelFlags(SystemChannelFlag.SuppressPremiumSubscriptions,
 * SystemChannelFlag.SuppressPremiumSubscriptions) in obj.flags
 * ```
 *
 * ## Unknown flag
 *
 * Whenever a newly added flag has not been added to Kord yet it will get deserialized as
 * [SystemChannelFlag.Unknown].
 * You can also use that to check for an yet unsupported flag
 * ```kotlin
 * val hasFlags = SystemChannelFlag.Unknown(1 shl 69) in obj.flags
 * ```
 * @see SystemChannelFlag
 * @see SystemChannelFlags.Builder
 * @property code numeric value of all [SystemChannelFlag]s
 */
@Serializable(with = SystemChannelFlags.Serializer::class)
public class SystemChannelFlags(
    code: Int = 0,
) :
        IntBitFlags<SystemChannelFlag, SystemChannelFlags, SystemChannelFlags.Builder>(SystemChannelFlag.entries,
        code) {
    protected override val name: String = "SystemChannelFlags"

    public override fun equals(other: Any?): Boolean = this === other ||
            (other is SystemChannelFlags && this.code == other.code)

    public override fun hashCode(): Int = code.hashCode()

    public override fun buildUpon(): Builder = Builder(code)

    protected override fun Implementation(flags: Int): SystemChannelFlags =
            SystemChannelFlags(flags)

    public class Builder(
        code: Int = 0,
    ) : IntBitFlags.Builder<SystemChannelFlag, SystemChannelFlags>(code) {
        public override fun flags(): SystemChannelFlags = SystemChannelFlags(code)
    }

    public class Serializer :
            BitFlags.Serializer<Int, SystemChannelFlag, SystemChannelFlags>(PrimitiveKind.INT,
            "code", Int.serializer()) {
        public override fun Implementation(code: Int): SystemChannelFlags = SystemChannelFlags(code)
    }

    public companion object :
            BitFlags.Companion<Int, SystemChannelFlag, SystemChannelFlags, Builder>() {
        public override fun Builder(): Builder = SystemChannelFlags.Builder()
    }
}

public sealed class SystemChannelFlag(
    /**
     * The raw code used by Discord.
     */
    public override val code: Int,
) : IntBitFlag {
    public final override fun equals(other: Any?): Boolean = this === other ||
            (other is SystemChannelFlag && this.code == other.code)

    public final override fun hashCode(): Int = code.hashCode()

    public final override fun toString(): String =
            "SystemChannelFlag.${this::class.simpleName}(code=$code)"

    /**
     * An unknown [SystemChannelFlag].
     *
     * This is used as a fallback for [SystemChannelFlag]s that haven't been added to Kord yet.
     */
    public class Unknown @KordUnsafe constructor(
        code: Int,
    ) : SystemChannelFlag(code)

    /**
     * Suppress member join notifications.
     */
    public object SuppressJoinNotifications : SystemChannelFlag(1)

    /**
     * Suppress server boost notificationÎ©.
     */
    public object SuppressPremiumSubscriptions : SystemChannelFlag(2)

    public companion object {
        /**
         * A [List] of all known [SystemChannelFlag]s.
         */
        public val entries: List<SystemChannelFlag> by lazy(mode = PUBLICATION) {
            listOf(
                SuppressJoinNotifications,
                SuppressPremiumSubscriptions,
            )
        }

    }
}
