// THIS FILE IS AUTO-GENERATED BY KordEnumProcessor, DO NOT EDIT!
@file:Suppress(names = arrayOf("RedundantVisibilityModifier", "IncorrectFormatting",
                "ReplaceArrayOfWithLiteral", "SpellCheckingInspection", "GrazieInspection"))

package dev.kord.common.entity

import dev.kord.common.DiscordBitSet
import dev.kord.common.EmptyBitSet
import dev.kord.common.`annotation`.KordUnsafe
import dev.kord.common.entity.flags.BitFlags
import dev.kord.common.entity.flags.DiscordBitSetFlag
import dev.kord.common.entity.flags.DiscordBitSetFlags
import kotlin.LazyThreadSafetyMode.PUBLICATION
import kotlinx.serialization.Serializable
import kotlinx.serialization.descriptors.PrimitiveKind

/**
 * Convenience container of multiple [Permissions][Permission] which can be combined into one.
 *
 * ## Creating a collection of message flags
 * You can create an [Permissions] object using the following methods
 * ```kotlin
 * // From flags
 * val flags1 = Permissions(Permission.CreateInstantInvite, Permission.KickMembers)
 * // From an iterable
 * val flags2 = Permissions(listOf(Permission.CreateInstantInvite, Permission.KickMembers))
 * // Using a builder
 * val flags3 = Permissions {
 *  +Permission.CreateInstantInvite
 *  -Permission.KickMembers
 * }
 * ```
 *
 * ## Modifying existing flags
 * You can crate a modified copy of a [Permissions] instance using the
 * [dev.kord.common.entity.flags.copy] method
 *
 * ```kotlin
 * flags.copy {
 *  +Permission.CreateInstantInvite
 * }
 * ```
 *
 * ## Mathematical operators
 * All [Permissions] objects can use +/- operators
 *
 * ```kotlin
 * val flags = Permissions(Permission.CreateInstantInvite)
 * val flags2 = flags + Permission.KickMembers
 * val otherFlags = flags - Permission.BanMembers
 * val flags3 = flags + otherFlags
 * ```
 *
 * ## Checking for a flag
 * You can use the [contains] operator to check whether a collection contains a specific flag
 * ```kotlin
 * val hasFlag = Permission.CreateInstantInvite in member.permissions
 * val hasFlags = Permissions(Permission.Administrator,
 * Permission.ManageChannels) in member.permissions
 * ```
 *
 * ## Unknown flag
 *
 * Whenever a newly added flag has not been added to Kord yet it will get deserialized as
 * [Permission.Unknown].
 * You can also use that to check for an yet unsupported flag
 * ```kotlin
 * val hasFlags = Permission.Unknown(1 shl 69) in member.permissions
 * ```
 * @see Permission
 * @see Permissions.Builder
 * @property code numeric value of all [Permission]s
 */
@Serializable(with = Permissions.Serializer::class)
public class Permissions(
    code: DiscordBitSet = EmptyBitSet(),
) : DiscordBitSetFlags<Permission, Permissions, Permissions.Builder>(Permission.entries, code) {
    protected override val name: String = "Permissions"

    public override fun equals(other: Any?): Boolean = this === other ||
            (other is Permissions && this.code == other.code)

    public override fun hashCode(): Int = code.hashCode()

    public override fun buildUpon(): Builder = Builder(code)

    protected override fun Implementation(flags: DiscordBitSet): Permissions = Permissions(flags)

    public class Builder(
        code: DiscordBitSet = EmptyBitSet(),
    ) : DiscordBitSetFlags.Builder<Permission, Permissions>(code) {
        public override fun flags(): Permissions = Permissions(code)
    }

    public class Serializer :
            BitFlags.Serializer<DiscordBitSet, Permission, Permissions>(PrimitiveKind.STRING,
            "code", DiscordBitSet.serializer()) {
        public override fun Implementation(code: DiscordBitSet): Permissions = Permissions(code)
    }

    public companion object : DiscordBitSetFlags.Companion<Permission, Permissions, Builder>() {
        public override fun Builder(): Builder = Permissions.Builder()

        protected override fun Implementation(flags: DiscordBitSet): Permissions =
                Permissions(flags)
    }
}

/**
 * See [Permission]s in the
 * [Discord Developer Documentation](https://discord.com/developers/docs/topics/permissions).
 */
public sealed class Permission(
    /**
     * The raw code used by Discord.
     */
    public override val code: DiscordBitSet,
) : DiscordBitSetFlag {
    protected constructor(vararg values: Long) : this(DiscordBitSet(values))

    public final override fun equals(other: Any?): Boolean = this === other ||
            (other is Permission && this.code == other.code)

    public final override fun hashCode(): Int = code.hashCode()

    public final override fun toString(): String =
            "Permission.${this::class.simpleName}(code=$code)"

    /**
     * An unknown [Permission].
     *
     * This is used as a fallback for [Permission]s that haven't been added to Kord yet.
     */
    public class Unknown @KordUnsafe constructor(
        code: DiscordBitSet,
    ) : Permission(code) {
        @KordUnsafe
        public constructor(vararg code: Long) : this(DiscordBitSet(code))
    }

    /**
     * Allows creation of instant invites.
     */
    public object CreateInstantInvite : Permission(1L)

    /**
     * Allows kicking members.
     */
    public object KickMembers : Permission(2L)

    /**
     * Allows banning members.
     */
    public object BanMembers : Permission(4L)

    /**
     * Allows all permissions and bypasses channel permission overwrites.
     */
    public object Administrator : Permission(8L)

    /**
     * Allows management and editing of channels.
     */
    public object ManageChannels : Permission(16L)

    /**
     * Allows management and editing of the guild.
     */
    public object ManageGuild : Permission(32L)

    /**
     * Allows for the addition of reactions to messages.
     */
    public object AddReactions : Permission(64L)

    /**
     * Allows for viewing of audit logs.
     */
    public object ViewAuditLog : Permission(128L)

    /**
     * Allows for using priority speaker in a voice channel.
     */
    public object PrioritySpeaker : Permission(256L)

    /**
     * Allows the user to go live.
     */
    public object Stream : Permission(512L)

    /**
     * Allows guild members to view a channel, which includes reading messages in text channels and
     * joining voice
     * channels.
     */
    public object ViewChannel : Permission(1024L)

    /**
     * Allows for sending messages in a channel (does not allow sending messages in threads).
     */
    public object SendMessages : Permission(2048L)

    /**
     * Allows for sending of `/tts` messages.
     */
    public object SendTTSMessages : Permission(4096L)

    /**
     * Allows for deletion of other users messages.
     */
    public object ManageMessages : Permission(8192L)

    /**
     * Links sent by users with this permission will be auto-embedded.
     */
    public object EmbedLinks : Permission(16384L)

    /**
     * Allows for uploading images and files.
     */
    public object AttachFiles : Permission(32768L)

    /**
     * Allows for reading of message history.
     */
    public object ReadMessageHistory : Permission(65536L)

    /**
     * Allows for using the `@everyone` tag to notify all users in a channel, and the `@here` tag to
     * notify all online
     * users in a channel.
     */
    public object MentionEveryone : Permission(131072L)

    /**
     * Allows the usage of custom emojis from other servers.
     */
    public object UseExternalEmojis : Permission(262144L)

    /**
     * Allows for viewing guild insights.
     */
    public object ViewGuildInsights : Permission(524288L)

    /**
     * Allows for joining of a voice channel.
     */
    public object Connect : Permission(1048576L)

    /**
     * Allows for speaking in a voice channel.
     */
    public object Speak : Permission(2097152L)

    /**
     * Allows for muting members in a voice channel.
     */
    public object MuteMembers : Permission(4194304L)

    /**
     * Allows for deafening of members in a voice channel.
     */
    public object DeafenMembers : Permission(8388608L)

    /**
     * Allows for moving of members between voice channels.
     */
    public object MoveMembers : Permission(16777216L)

    /**
     * Allows for using voice-activity-detection in a voice channel.
     */
    public object UseVAD : Permission(33554432L)

    /**
     * Allows for modification of own nickname.
     */
    public object ChangeNickname : Permission(67108864L)

    /**
     * Allows for modification of other users nicknames.
     */
    public object ManageNicknames : Permission(134217728L)

    /**
     * Allows management and editing of roles.
     */
    public object ManageRoles : Permission(268435456L)

    /**
     * Allows management and editing of webhooks.
     */
    public object ManageWebhooks : Permission(536870912L)

    /**
     * Allows management and editing of emojis and stickers.
     */
    public object ManageEmojisAndStickers : Permission(1073741824L)

    /**
     * Allows members to use application commands, including slash commands and context menu
     * commands.
     */
    public object UseApplicationCommands : Permission(2147483648L)

    /**
     * Allows for requesting to speak in stage channels.
     *
     * is permission is under active development and may be changed or removed._
     */
    public object RequestToSpeak : Permission(4294967296L)

    /**
     * Allows for creating, editing, and deleting scheduled events.
     */
    public object ManageEvents : Permission(8589934592L)

    /**
     * Allows for deleting and archiving threads, and viewing all private threads.
     */
    public object ManageThreads : Permission(17179869184L)

    /**
     * Allows for creating public and announcement threads.
     */
    public object CreatePublicThreads : Permission(34359738368L)

    /**
     * Allows for creating private threads.
     */
    public object CreatePrivateThreads : Permission(68719476736L)

    /**
     * Allows the usage of custom stickers from other servers.
     */
    public object UseExternalStickers : Permission(137438953472L)

    /**
     * Allows for sending messages in threads.
     */
    public object SendMessagesInThreads : Permission(274877906944L)

    /**
     * Allows for using Activities (applications with the [Embedded][ApplicationFlag.Embedded] flag)
     * in a voice channel.
     */
    public object UseEmbeddedActivities : Permission(549755813888L)

    /**
     * Allows for timing out users to prevent them from sending or reacting to messages in chat and
     * threads, and from
     * speaking in voice and stage channels.
     */
    public object ModerateMembers : Permission(1099511627776L)

    /**
     * A combination of all [Permission]s
     */
    public object All : Permission(buildAll())

    public companion object {
        /**
         * A [List] of all known [Permission]s.
         */
        public val entries: List<Permission> by lazy(mode = PUBLICATION) {
            listOf(
                CreateInstantInvite,
                KickMembers,
                BanMembers,
                Administrator,
                ManageChannels,
                ManageGuild,
                AddReactions,
                ViewAuditLog,
                PrioritySpeaker,
                Stream,
                ViewChannel,
                SendMessages,
                SendTTSMessages,
                ManageMessages,
                EmbedLinks,
                AttachFiles,
                ReadMessageHistory,
                MentionEveryone,
                UseExternalEmojis,
                ViewGuildInsights,
                Connect,
                Speak,
                MuteMembers,
                DeafenMembers,
                MoveMembers,
                UseVAD,
                ChangeNickname,
                ManageNicknames,
                ManageRoles,
                ManageWebhooks,
                ManageEmojisAndStickers,
                UseApplicationCommands,
                RequestToSpeak,
                ManageEvents,
                ManageThreads,
                CreatePublicThreads,
                CreatePrivateThreads,
                UseExternalStickers,
                SendMessagesInThreads,
                UseEmbeddedActivities,
                ModerateMembers,
            )
        }


        private fun buildAll(): DiscordBitSet {
            // We cannot inline this into the "All" object, because that causes a weird compiler bug
            return entries.fold(EmptyBitSet()) { acc, value ->
                 acc + value.code
            }
        }
    }
}
