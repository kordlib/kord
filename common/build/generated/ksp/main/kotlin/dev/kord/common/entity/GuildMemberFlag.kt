// THIS FILE IS AUTO-GENERATED BY KordEnumProcessor, DO NOT EDIT!
@file:Suppress(names = arrayOf("RedundantVisibilityModifier", "IncorrectFormatting",
                "ReplaceArrayOfWithLiteral", "SpellCheckingInspection", "GrazieInspection"))

package dev.kord.common.entity

import dev.kord.common.`annotation`.KordUnsafe
import dev.kord.common.entity.flags.BitFlags
import dev.kord.common.entity.flags.IntBitFlag
import dev.kord.common.entity.flags.IntBitFlags
import kotlin.LazyThreadSafetyMode.PUBLICATION
import kotlinx.serialization.Serializable
import kotlinx.serialization.builtins.serializer
import kotlinx.serialization.descriptors.PrimitiveKind

/**
 * Convenience container of multiple [GuildMemberFlags][GuildMemberFlag] which can be combined into
 * one.
 *
 * ## Creating a collection of message flags
 * You can create an [GuildMemberFlags] object using the following methods
 * ```kotlin
 * // From flags
 * val flags1 = GuildMemberFlags(GuildMemberFlag.DidRejoin, GuildMemberFlag.CompletedOnboarding)
 * // From an iterable
 * val flags2 = GuildMemberFlags(listOf(GuildMemberFlag.DidRejoin,
 * GuildMemberFlag.CompletedOnboarding))
 * // Using a builder
 * val flags3 = GuildMemberFlags {
 *  +GuildMemberFlag.DidRejoin
 *  -GuildMemberFlag.CompletedOnboarding
 * }
 * ```
 *
 * ## Modifying existing flags
 * You can crate a modified copy of a [GuildMemberFlags] instance using the
 * [dev.kord.common.entity.flags.copy] method
 *
 * ```kotlin
 * flags.copy {
 *  +GuildMemberFlag.DidRejoin
 * }
 * ```
 *
 * ## Mathematical operators
 * All [GuildMemberFlags] objects can use +/- operators
 *
 * ```kotlin
 * val flags = GuildMemberFlags(GuildMemberFlag.DidRejoin)
 * val flags2 = flags + GuildMemberFlag.CompletedOnboarding
 * val otherFlags = flags - GuildMemberFlag.CompletedOnboarding
 * val flags3 = flags + otherFlags
 * ```
 *
 * ## Checking for a flag
 * You can use the [contains] operator to check whether a collection contains a specific flag
 * ```kotlin
 * val hasFlag = GuildMemberFlag.DidRejoin in obj.flags
 * val hasFlags = GuildMemberFlag(GuildMemberFlag.CompletedOnboarding,
 * GuildMemberFlag.CompletedOnboarding) in obj.flags
 * ```
 *
 * ## Unknown flag
 *
 * Whenever a newly added flag has not been added to Kord yet it will get deserialized as
 * [GuildMemberFlag.Unknown].
 * You can also use that to check for an yet unsupported flag
 * ```kotlin
 * val hasFlags = GuildMemberFlag.Unknown(1 shl 69) in obj.flags
 * ```
 * @see GuildMemberFlag
 * @see GuildMemberFlags.Builder
 * @property code numeric value of all [GuildMemberFlags]s
 */
@Serializable(with = GuildMemberFlags.Serializer::class)
public class GuildMemberFlags(
    code: Int = 0,
) :
        IntBitFlags<GuildMemberFlag, GuildMemberFlags, GuildMemberFlags.Builder>(GuildMemberFlag.entries,
        code) {
    protected override val name: String = "GuildMemberFlags"

    public override fun equals(other: Any?): Boolean = this === other ||
            (other is GuildMemberFlags && this.code == other.code)

    public override fun hashCode(): Int = code.hashCode()

    public override fun buildUpon(): Builder = Builder(code)

    protected override fun Implementation(flags: Int): GuildMemberFlags = GuildMemberFlags(flags)

    public class Builder(
        code: Int = 0,
    ) : IntBitFlags.Builder<GuildMemberFlag, GuildMemberFlags>(code) {
        public override fun flags(): GuildMemberFlags = GuildMemberFlags(code)
    }

    public class Serializer :
            BitFlags.Serializer<Int, GuildMemberFlag, GuildMemberFlags>(PrimitiveKind.INT, "code",
            Int.serializer()) {
        public override fun Implementation(code: Int): GuildMemberFlags = GuildMemberFlags(code)
    }

    public companion object : BitFlags.Companion<Int, GuildMemberFlag, GuildMemberFlags, Builder>()
            {
        public override fun Builder(): Builder = GuildMemberFlags.Builder()
    }
}

/**
 * See [GuildMemberFlag]s in the
 * [Discord Developer Documentation](https://discord.com/developers/docs/resources/guild#guild-member-object-guild-member-flags).
 */
public sealed class GuildMemberFlag(
    /**
     * The raw code used by Discord.
     */
    public override val code: Int,
) : IntBitFlag {
    public final override fun equals(other: Any?): Boolean = this === other ||
            (other is GuildMemberFlag && this.code == other.code)

    public final override fun hashCode(): Int = code.hashCode()

    public final override fun toString(): String =
            "GuildMemberFlag.${this::class.simpleName}(code=$code)"

    /**
     * An unknown [GuildMemberFlag].
     *
     * This is used as a fallback for [GuildMemberFlag]s that haven't been added to Kord yet.
     */
    public class Unknown @KordUnsafe constructor(
        code: Int,
    ) : GuildMemberFlag(code)

    /**
     * Member has left and rejoined the guild
     */
    public object DidRejoin : GuildMemberFlag(1)

    /**
     * Member has completed onboarding
     */
    public object CompletedOnboarding : GuildMemberFlag(2)

    /**
     * Member is exempt from guild verification requirements
     */
    public object BypassesVerification : GuildMemberFlag(4)

    /**
     * Member has started onboarding
     */
    public object StartedOnboarding : GuildMemberFlag(8)

    public companion object {
        /**
         * A [List] of all known [GuildMemberFlag]s.
         */
        public val entries: List<GuildMemberFlag> by lazy(mode = PUBLICATION) {
            listOf(
                DidRejoin,
                CompletedOnboarding,
                BypassesVerification,
                StartedOnboarding,
            )
        }

    }
}
